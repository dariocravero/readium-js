var $ = require('zepto')
var _ = require('underscore')
var Backbone = require('backbone')
var HighlightView = require('./highlight-view')
var TextLineInferrer = require('./text-line-inferrer')

var HighlightGroup = Backbone.Model.extend({

  defaults: function() {
    return {
      "selectedNodes": [],
      "highlightViews": []
    };
  },

  initialize: function(attributes, options) {
    this.set("scale", attributes.scale);
    this.constructHighlightViews();
  },

  // --------------- PRIVATE HELPERS ---------------------------------------

  highlightGroupCallback: function(event) {

    var that = this;

    // Trigger this event on each of the highlight views (except triggering event)
    if (event.type === "click") {
      that.get("bbPageSetView").trigger("annotationClicked", "highlight", that.get("CFI"), that.get("id"), event);
      return;
    }


    // Trigger this event on each of the highlight views (except triggering event)
    if (event.type === "contextmenu") {
      that.get("bbPageSetView").trigger("annotationRightClicked", "highlight", that.get("CFI"), that.get("id"), event);
      return;
    }


    // Events that are called on each member of the group
    _.each(this.get("highlightViews"), function(highlightView) {

      if (event.type === "mouseenter") {
        highlightView.setHoverHighlight();
      } else if (event.type === "mouseleave") {
        highlightView.setBaseHighlight();
      }
    });
  },

  constructHighlightViews: function() {

    var that = this;
    var rectList = [];
    var inferrer;
    var inferredLines;

    _.each(this.get("selectedNodes"), function(node, index) {

      var rects;
      var range = document.createRange();
      range.selectNodeContents(node);
      rects = range.getClientRects();

      // REFACTORING CANDIDATE: Maybe a better way to append an array here
      _.each(rects, function(rect) {
        rectList.push(rect);
      });
    });

    inferrer = new TextLineInferrer();
    inferredLines = inferrer.inferLines(rectList);

    var scale = this.get("scale");

    _.each(inferredLines, function(line, index) {

      var highlightTop = line.startTop / scale;;
      var highlightLeft = line.left / scale;;
      var highlightHeight = line.avgHeight / scale;
      var highlightWidth = line.width / scale;;

      var highlightView = new HighlightView({
        CFI: that.get("CFI"),
        top: highlightTop + that.get("offsetTopAddition"),
        left: highlightLeft + that.get("offsetLeftAddition"),
        height: highlightHeight,
        width: highlightWidth,
        styles: that.get('styles'),
        highlightGroupCallback: that.highlightGroupCallback,
        callbackContext: that
      });

      that.get("highlightViews").push(highlightView);
    });
  },

  resetHighlights: function(viewportElement, offsetTop, offsetLeft) {

    if (offsetTop) {
      this.set({
        offsetTopAddition: offsetTop
      });
    }
    if (offsetLeft) {
      this.set({
        offsetLeftAddition: offsetLeft
      });
    }

    this.destroyCurrentHighlights();
    this.constructHighlightViews();
    this.renderHighlights(viewportElement);
  },

  // REFACTORING CANDIDATE: Ensure that event listeners are being properly cleaned up. 
  destroyCurrentHighlights: function() {

    _.each(this.get("highlightViews"), function(highlightView) {
      highlightView.remove();
      highlightView.off();
    });

    this.get("highlightViews").length = 0;
  },

  renderHighlights: function(viewportElement) {

    _.each(this.get("highlightViews"), function(view, index) {
      $(viewportElement).append(view.render());
    });
  },

  toInfo: function() {

    return {

      id: this.get("id"),
      type: "highlight",
      CFI: this.get("CFI")
    };
  },

  setStyles: function(styles) {
    var highlightViews = this.get('highlightViews');

    this.set({
      styles: styles
    });

    _.each(highlightViews, function(view, index) {
      view.setStyles(styles);
    });
  }
});

module.exports = HighlightGroup
