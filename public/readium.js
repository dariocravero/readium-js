(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/lib/jquery-sizes.js":[function(require,module,exports){
// https://raw.githubusercontent.com/bramstein/jsizes/master/lib/jquery.sizes.js

/**
 * @preserve JSizes - JQuery plugin v0.33
 *
 * Licensed under the revised BSD License.
 * Copyright 2008-2010 Bram Stein
 * All rights reserved.
 */
var $ = require('jquery')

var num = function (value) {
    return parseInt(value, 10) || 0;
  };

/**
  * Sets or gets the values for min-width, min-height, max-width
  * and max-height.
  */
$.each(['min', 'max'], function (i, name) {
  $.fn[name + 'Size'] = function (value) {
    var width, height;
    if (value) {
      if (value.width !== undefined) {
        this.css(name + '-width', value.width);
      }
      if (value.height !== undefined) {
        this.css(name + '-height', value.height);
      }
    } else {
      width = this.css(name + '-width');
      height = this.css(name + '-height');
      // Apparently:
      //  * Opera returns -1px instead of none
      //  * IE6 returns undefined instead of none
      return {'width': (name === 'max' && (width === undefined || width === 'none' || num(width) === -1) && Number.MAX_VALUE) || num(width), 
          'height': (name === 'max' && (height === undefined || height === 'none' || num(height) === -1) && Number.MAX_VALUE) || num(height)};
    }
    return this;
  };
});

/**
  * Returns whether or not an element is visible.
  */
$.fn.isVisible = function () {
  return this.is(':visible');
};

/**
  * Sets or gets the values for border, margin and padding.
  */
$.each(['border', 'margin', 'padding'], function (i, name) {
  $.fn[name] = function (value) {
    if (value) {
      if (value.top !== undefined) {
        this.css(name + '-top' + (name === 'border' ? '-width' : ''), value.top);
      }
      if (value.bottom !== undefined) {
        this.css(name + '-bottom' + (name === 'border' ? '-width' : ''), value.bottom);
      }
      if (value.left !== undefined) {
        this.css(name + '-left' + (name === 'border' ? '-width' : ''), value.left);
      }
      if (value.right !== undefined) {
        this.css(name + '-right' + (name === 'border' ? '-width' : ''), value.right);
      }
    } else {
      return {top: num(this.css(name + '-top' + (name === 'border' ? '-width' : ''))),
          bottom: num(this.css(name + '-bottom' + (name === 'border' ? '-width' : ''))),
          left: num(this.css(name + '-left' + (name === 'border' ? '-width' : ''))),
          right: num(this.css(name + '-right' + (name === 'border' ? '-width' : '')))};
    }
    return this;
  };
});

},{"jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/Backbone/backbone.js":[function(require,module,exports){
//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore');
    factory(root, exports, _);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      if (!model.collection) model.collection = this;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

},{"underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/IPv6.js":[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.14.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports === 'object') {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.IPv6 = factory(root);
  }
}(this, function (root) {
  'use strict';

  /*
  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
  var _out = IPv6.best(_in);
  var _expected = "fe80::204:61ff:fe9d:f156";

  console.log(_in, _out, _expected, _out === _expected);
  */

  // save current IPv6 variable, if any
  var _IPv6 = root && root.IPv6;

  function bestPresentation(address) {
    // based on:
    // Javascript to test an IPv6 address for proper format, and to
    // present the "best text representation" according to IETF Draft RFC at
    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
    // 8 Feb 2010 Rich Brown, Dartware, LLC
    // Please feel free to use this code as long as you provide a link to
    // http://www.intermapper.com
    // http://intermapper.com/support/tools/IPV6-Validator.aspx
    // http://download.dartware.com/thirdparty/ipv6validator.js

    var _address = address.toLowerCase();
    var segments = _address.split(':');
    var length = segments.length;
    var total = 8;

    // trim colons (:: or ::a:b:c… or …a:b:c::)
    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
      // must have been ::
      // remove first two items
      segments.shift();
      segments.shift();
    } else if (segments[0] === '' && segments[1] === '') {
      // must have been ::xxxx
      // remove the first item
      segments.shift();
    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
      // must have been xxxx::
      segments.pop();
    }

    length = segments.length;

    // adjust total segments for IPv4 trailer
    if (segments[length - 1].indexOf('.') !== -1) {
      // found a "." which means IPv4
      total = 7;
    }

    // fill empty segments them with "0000"
    var pos;
    for (pos = 0; pos < length; pos++) {
      if (segments[pos] === '') {
        break;
      }
    }

    if (pos < total) {
      segments.splice(pos, 1, '0000');
      while (segments.length < total) {
        segments.splice(pos, 0, '0000');
      }

      length = segments.length;
    }

    // strip leading zeros
    var _segments;
    for (var i = 0; i < total; i++) {
      _segments = segments[i].split('');
      for (var j = 0; j < 3 ; j++) {
        if (_segments[0] === '0' && _segments.length > 1) {
          _segments.splice(0,1);
        } else {
          break;
        }
      }

      segments[i] = _segments.join('');
    }

    // find longest sequence of zeroes and coalesce them into one segment
    var best = -1;
    var _best = 0;
    var _current = 0;
    var current = -1;
    var inzeroes = false;
    // i; already declared

    for (i = 0; i < total; i++) {
      if (inzeroes) {
        if (segments[i] === '0') {
          _current += 1;
        } else {
          inzeroes = false;
          if (_current > _best) {
            best = current;
            _best = _current;
          }
        }
      } else {
        if (segments[i] === '0') {
          inzeroes = true;
          current = i;
          _current = 1;
        }
      }
    }

    if (_current > _best) {
      best = current;
      _best = _current;
    }

    if (_best > 1) {
      segments.splice(best, _best, '');
    }

    length = segments.length;

    // assemble remaining segments
    var result = '';
    if (segments[0] === '')  {
      result = ':';
    }

    for (i = 0; i < length; i++) {
      result += segments[i];
      if (i === length - 1) {
        break;
      }

      result += ':';
    }

    if (segments[length - 1] === '') {
      result += ':';
    }

    return result;
  }

  function noConflict() {
    /*jshint validthis: true */
    if (root.IPv6 === this) {
      root.IPv6 = _IPv6;
    }
  
    return this;
  }

  return {
    best: bestPresentation,
    noConflict: noConflict
  };
}));

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/SecondLevelDomains.js":[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.14.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports === 'object') {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.SecondLevelDomains = factory(root);
  }
}(this, function (root) {
  'use strict';

  // save current SecondLevelDomains variable, if any
  var _SecondLevelDomains = root && root.SecondLevelDomains;

  var SLD = {
    // list of known Second Level Domains
    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
    // ----
    // publicsuffix.org is more current and actually used by a couple of browsers internally.
    // downside is it also contains domains like "dyndns.org" - which is fine for the security
    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
    // ----
    list: {
      'ac':' com gov mil net org ',
      'ae':' ac co gov mil name net org pro sch ',
      'af':' com edu gov net org ',
      'al':' com edu gov mil net org ',
      'ao':' co ed gv it og pb ',
      'ar':' com edu gob gov int mil net org tur ',
      'at':' ac co gv or ',
      'au':' asn com csiro edu gov id net org ',
      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',
      'bb':' biz co com edu gov info net org store tv ',
      'bh':' biz cc com edu gov info net org ',
      'bn':' com edu gov net org ',
      'bo':' com edu gob gov int mil net org tv ',
      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
      'bs':' com edu gov net org ',
      'bz':' du et om ov rg ',
      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
      'ck':' biz co edu gen gov info net org ',
      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
      'co':' com edu gov mil net nom org ',
      'cr':' ac c co ed fi go or sa ',
      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',
      'do':' art com edu gob gov mil net org sld web ',
      'dz':' art asso com edu gov net org pol ',
      'ec':' com edu fin gov info med mil net org pro ',
      'eg':' com edu eun gov mil name net org sci ',
      'er':' com edu gov ind mil net org rochest w ',
      'es':' com edu gob nom org ',
      'et':' biz com edu gov info name net org ',
      'fj':' ac biz com info mil name net org pro ',
      'fk':' ac co gov net nom org ',
      'fr':' asso com f gouv nom prd presse tm ',
      'gg':' co net org ',
      'gh':' com edu gov mil org ',
      'gn':' ac com gov net org ',
      'gr':' com edu gov mil net org ',
      'gt':' com edu gob ind mil net org ',
      'gu':' com edu gov net org ',
      'hk':' com edu gov idv net org ',
      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
      'id':' ac co go mil net or sch web ',
      'il':' ac co gov idf k12 muni net org ',
      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',
      'iq':' com edu gov i mil net org ',
      'ir':' ac co dnssec gov i id net org sch ',
      'it':' edu gov ',
      'je':' co net org ',
      'jo':' com edu gov mil name net org sch ',
      'jp':' ac ad co ed go gr lg ne or ',
      'ke':' ac co go info me mobi ne or sc ',
      'kh':' com edu gov mil net org per ',
      'ki':' biz com de edu gov info mob net org tel ',
      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
      'kn':' edu gov net org ',
      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
      'kw':' com edu gov net org ',
      'ky':' com edu gov net org ',
      'kz':' com edu gov mil net org ',
      'lb':' com edu gov net org ',
      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
      'lr':' com edu gov net org ',
      'lv':' asn com conf edu gov id mil net org ',
      'ly':' com edu gov id med net org plc sch ',
      'ma':' ac co gov m net org press ',
      'mc':' asso tm ',
      'me':' ac co edu gov its net org priv ',
      'mg':' com edu gov mil nom org prd tm ',
      'mk':' com edu gov inf name net org pro ',
      'ml':' com edu gov net org presse ',
      'mn':' edu gov org ',
      'mo':' com edu gov net org ',
      'mt':' com edu gov net org ',
      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',
      'mw':' ac co com coop edu gov int museum net org ',
      'mx':' com edu gob net org ',
      'my':' com edu gov mil name net org sch ',
      'nf':' arts com firm info net other per rec store web ',
      'ng':' biz com edu gov mil mobi name net org sch ',
      'ni':' ac co com edu gob mil net nom org ',
      'np':' com edu gov mil net org ',
      'nr':' biz com edu gov info net org ',
      'om':' ac biz co com edu gov med mil museum net org pro sch ',
      'pe':' com edu gob mil net nom org sld ',
      'ph':' com edu gov i mil net ngo org ',
      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',
      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
      'pr':' ac biz com edu est gov info isla name net org pro prof ',
      'ps':' com edu gov net org plo sec ',
      'pw':' belau co ed go ne or ',
      'ro':' arts com firm info nom nt org rec store tm www ',
      'rs':' ac co edu gov in org ',
      'sb':' com edu gov net org ',
      'sc':' com edu gov net org ',
      'sh':' co com edu gov net nom org ',
      'sl':' com edu gov net org ',
      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',
      'sv':' com edu gob org red ',
      'sz':' ac co org ',
      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
      'tw':' club com ebiz edu game gov idv mil net org ',
      'mu':' ac co com gov net or org ',
      'mz':' ac co edu gov org ',
      'na':' co com ',
      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',
      'pa':' abo ac com edu gob ing med net nom org sld ',
      'pt':' com edu gov int net nome org publ ',
      'py':' com edu gov mil net org ',
      'qa':' com edu gov mil net org ',
      're':' asso com nom ',
      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
      'rw':' ac co com edu gouv gov int mil net ',
      'sa':' com edu gov med net org pub sch ',
      'sd':' com edu gov info med net org tv ',
      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
      'sg':' com edu gov idn net org per ',
      'sn':' art com edu gouv org perso univ ',
      'sy':' com edu gov mil net news org ',
      'th':' ac co go in mi net or ',
      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',
      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
      'tz':' ac co go ne or ',
      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
      'ug':' ac co go ne or org sc ',
      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
      'us':' dni fed isa kids nsn ',
      'uy':' com edu gub mil net org ',
      've':' co com edu gob info mil net org web ',
      'vi':' co com k12 net org ',
      'vn':' ac biz com edu gov health info int name net org pro ',
      'ye':' co com gov ltd me net org plc ',
      'yu':' ac co edu gov org ',
      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
      'zm':' ac co com edu gov net org sch '
    },
    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
    // in both performance and memory footprint. No initialization required.
    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
    // Following methods use lastIndexOf() rather than array.split() in order
    // to avoid any memory allocations.
    has: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;
    },
    is: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset >= 0) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
    },
    get: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return null;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return null;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return null;
      }
      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {
        return null;
      }
      return domain.slice(sldOffset+1);
    },
    noConflict: function(){
      if (root.SecondLevelDomains === this) {
        root.SecondLevelDomains = _SecondLevelDomains;
      }
      return this;
    }
  };

  return SLD;
}));

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js":[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.14.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */
(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports === 'object') {
    // Node
    module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
  } else {
    // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
  }
}(this, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
  /*jshint camelcase: false */

  // save current URI variable, if any
  var _URI = root && root.URI;

  function URI(url, base) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof URI)) {
      return new URI(url, base);
    }

    if (url === undefined) {
      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    this.href(url);

    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  URI.version = '1.14.1';

  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      if (lookup[data[i]] !== undefined) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length;

    // value may be string, number, array, regexp
    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);
    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    }

    // arrays can't be equal if they have different amount of content
    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  URI._parts = function() {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  };
  // state: allow duplicate query parameters (a=1&a=1)
  URI.duplicateQueryParameters = false;
  // state: replaces + with %20 (space in query strings)
  URI.escapeQuerySpace = true;
  // static properties
  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\.-]/i;
  URI.punycode_expression = /(xn--)/i;
  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
  // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt
  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
  // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html
  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/
  };
  // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  };
  // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -
  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/;
  // map DOM Elements to their URI attribute
  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src', // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };
  URI.getDomAttribute = function(node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase();
    // <input> should only expose src for type="image"
    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  }

  // encoding / decoding according to RFC3986
  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string)
      .replace(/[!'()*]/g, escapeForDumbFirefox36)
      .replace(/\*/g, '%2A');
  }
  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;
  URI.iso8859 = function() {
    URI.encode = escape;
    URI.decode = unescape;
  };
  URI.unicode = function() {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };
  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    }
  };
  URI.encodeQuery = function(string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };
  URI.decodeQuery = function(string, escapeQuerySpace) {
    string += '';
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch(e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  };
  URI.recodePath = function(string) {
    var segments = (string + '').split('/');
    for (var i = 0, length = segments.length; i < length; i++) {
      segments[i] = URI.encodePathSegment(URI.decode(segments[i]));
    }

    return segments.join('/');
  };
  URI.decodePath = function(string) {
    var segments = (string + '').split('/');
    for (var i = 0, length = segments.length; i < length; i++) {
      segments[i] = URI.decodePathSegment(segments[i]);
    }

    return segments.join('/');
  };
  // generate encode/decode path functions
  var _parts = {'encode':'encode', 'decode':'decode'};
  var _part;
  var generateAccessor = function(_group, _part) {
    return function(string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
  }

  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function(string, parts) {
    var pos;
    if (!parts) {
      parts = {};
    }
    // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]

    // extract fragment
    pos = string.indexOf('#');
    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract query
    pos = string.indexOf('?');
    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract protocol
    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2);
      // extract "user:pass@host:port"
      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');
      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;
        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3) === '//') {
          string = string.substring(pos + 3);

          // extract "user:pass@host:port"
          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    }

    // what's left must be the path
    parts.path = string;

    // and we're done
    return parts;
  };
  URI.parseHost = function(string, parts) {
    // extract host:port
    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;
      if (parts.port === '/') {
        parts.port = null;
      }
    } else if (string.indexOf(':') !== string.lastIndexOf(':')) {
      // IPv6 host contains multiple colons - but no port
      // this notation is actually not allowed by RFC 3986, but we're a liberal parser
      parts.hostname = string.substring(0, pos) || null;
      parts.port = null;
    } else {
      t = string.substring(0, pos).split(':');
      parts.hostname = t[0] || null;
      parts.port = t[1] || null;
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    return string.substring(pos) || '/';
  };
  URI.parseAuthority = function(string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };
  URI.parseUserinfo = function(string, parts) {
    // extract username:password
    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t;

    // authority@ must come before /path
    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };
  URI.parseQuery = function(string, escapeQuerySpace) {
    if (!string) {
      return {};
    }

    // throw out the funky business - "?"[name"="value"&"]+
    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace);
      // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string') {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function(parts) {
    var t = '';

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
    }

    t += (URI.buildAuthority(parts) || '');

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }
    return t;
  };
  URI.buildHost = function(parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };
  URI.buildAuthority = function(parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };
  URI.buildUserinfo = function(parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);

      if (parts.password) {
        t += ':' + URI.encode(parts.password);
      }

      t += '@';
    }

    return t;
  };
  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type

    var t = '';
    var unique, key, i, length;
    for (key in data) {
      if (hasOwn.call(data, key) && key) {
        if (isArray(data[key])) {
          unique = {};
          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };
  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function(data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };
  URI.removeQuery = function(data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (data[name] === value) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the first parameter');
    }
  };
  URI.hasQuery = function(data, name, value, withinArray) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          if (!URI.hasQuery(data, key, name[key])) {
            return false;
          }
        }
      }

      return true;
    } else if (typeof name !== 'string') {
      throw new TypeError('URI.hasQuery() accepts an object, string as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data; // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);
        /* falls through */
      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };


  URI.commonPath = function(one, two) {
    var length = Math.min(one.length, two.length);
    var pos;

    // find first non-matching character
    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    }

    // revert to last /
    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function(string, callback, options) {
    options || (options = {});
    var _start = options.start || URI.findUri.start;
    var _end = options.end || URI.findUri.end;
    var _trim = options.trim || URI.findUri.trim;
    var _attributeOpen = /[a-z0-9-]=["']?$/i;

    _start.lastIndex = 0;
    while (true) {
      var match = _start.exec(string);
      if (!match) {
        break;
      }

      var start = match.index;
      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);
        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end).replace(_trim, '');
      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function(v) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js

    if (v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
      }

      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }
    }
  };

  // noConflict
  URI.noConflict = function(removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function(deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function() {
    return new URI(this);
  };

  p.valueOf = p.toString = function() {
    return this.build(false)._string;
  };


  function generateSimpleAccessor(_part){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';
          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function(v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? ('?' + t) : t;
  };
  p.hash = function(v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? ('#' + t) : t;
  };

  p.pathname = function(v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? URI.decodePath(res) : res;
    } else {
      this._parts.path = v ? URI.recodePath(v) : '/';
      this.build(!build);
      return this;
    }
  };
  p.path = p.pathname;
  p.href = function(href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;
    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    }

    // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)
    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;
      for (key in src) {
        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  };

  // identification accessors
  p.is = function(what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;

      // hostname identification
      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  };

  // component specific input validation
  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function(v, build) {
    if (v !== undefined) {
      if (v) {
        // accept trailing ://
        v = v.replace(/:(\/\/)?$/, '');

        if (!v.match(URI.protocol_expression)) {
          throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
        }
      }
    }
    return _protocol.call(this, v, build);
  };
  p.scheme = p.protocol;
  p.port = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';
        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        if (v.match(/[^0-9]/)) {
          throw new TypeError('Port "' + v + '" contains characters other than [0-9]');
        }
      }
    }
    return _port.call(this, v, build);
  };
  p.hostname = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = {};
      URI.parseHost(v, x);
      v = x.hostname;
    }
    return _hostname.call(this, v, build);
  };

  // compound accessors
  p.host = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      URI.parseHost(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.authority = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      URI.parseAuthority(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.userinfo = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      if (!this._parts.username) {
        return '';
      }

      var t = URI.buildUserinfo(this._parts);
      return t.substring(0, t.length -1);
    } else {
      if (v[v.length-1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.resource = function(v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  };

  // fraction accessors
  p.subdomain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    // convenience, return "www" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // grab domain and add another segment
      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;
      var sub = this._parts.hostname.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v) {
        URI.ensureValidHostname(v);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.domain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // convenience, return "example.org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // if hostname consists of 1 or 2 segments, it must be the domain
      var t = this._parts.hostname.match(/\./g);
      if (t && t.length < 2) {
        return this._parts.hostname;
      }

      // grab tld and add another segment
      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      URI.ensureValidHostname(v);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.tld = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // return "org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');
      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.directory = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');

      return v ? URI.decodePath(res) : res;

    } else {
      var e = this._parts.path.length - this.filename().length;
      var directory = this._parts.path.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(directory));

      // fully qualifier directories begin with a slash
      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      }

      // directories always end with a slash
      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.filename = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');
      var res = this._parts.path.substring(pos+1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };
  p.suffix = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      }

      // suffix may only contain alnum characters (yup, I made this up.)
      s = filename.substring(pos+1);
      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.segment = function(segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined
        ? segments
        : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
      if (isArray(v)) {
        segments = [];
        // collapse empty elements within array
        for (var i=0, l=v.length; i < l; i++) {
          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
            continue;
          }

          if (segments.length && !segments[segments.length -1].length) {
            segments.pop();
          }

          segments.push(v[i]);
        }
      } else if (v || typeof v === 'string') {
        if (segments[segments.length -1] === '') {
          // empty trailing elements have to be overwritten
          // to prevent results such as /foo//bar
          segments[segments.length -1] = v;
        } else {
          segments.push(v);
        }
      }
    } else {
      if (v) {
        segments[segment] = v;
      } else {
        segments.splice(segment, 1);
      }
    }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };
  p.segmentCoded = function(segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);
      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.decode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  };

  // mutating query string
  var q = p.query;
  p.query = function(v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };
  p.setQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.addQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.removeQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.hasQuery = function(name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };
  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery;

  // sanitizing URLs
  p.normalize = function() {
    if (this._parts.urn) {
      return this
        .normalizeProtocol(false)
        .normalizeQuery(false)
        .normalizeFragment(false)
        .build();
    }

    return this
      .normalizeProtocol(false)
      .normalizeHostname(false)
      .normalizePort(false)
      .normalizePath(false)
      .normalizeQuery(false)
      .normalizeFragment(false)
      .build();
  };
  p.normalizeProtocol = function(build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizeHostname = function(build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizePort = function(build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizePath = function(build) {
    if (this._parts.urn) {
      return this;
    }

    if (!this._parts.path || this._parts.path === '/') {
      return this;
    }

    var _was_relative;
    var _path = this._parts.path;
    var _leadingParents = '';
    var _parent, _pos;

    // handle relative paths
    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    }

    // resolve simples
    _path = _path
      .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
      .replace(/\/{2,}/g, '/');

    // remember leading parents
    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    }

    // resolve parents
    while (true) {
      _parent = _path.indexOf('/..');
      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');
      if (_pos === -1) {
        _pos = _parent;
      }
      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    }

    // revert to relative
    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    _path = URI.recodePath(_path);
    this._parts.path = _path;
    this.build(!build);
    return this;
  };
  p.normalizePathname = p.normalizePath;
  p.normalizeQuery = function(build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };
  p.normalizeFragment = function(build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function() {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = escape;
    URI.decode = decodeURIComponent;
    this.normalize();
    URI.encode = e;
    URI.decode = d;
    return this;
  };

  p.unicode = function() {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;
    this.normalize();
    URI.encode = e;
    URI.decode = d;
    return this;
  };

  p.readable = function() {
    var uri = this.clone();
    // removing username, password, because they shouldn't be displayed according to RFC 3986
    uri.username('').password('').normalize();
    var t = '';
    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);
        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);
    if (uri._parts.query) {
      var q = '';
      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
          .replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
            .replace(/&/g, '%26');
        }
      }
      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  };

  // resolving relative and absolute URLs
  p.absoluteTo = function(base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (!resolved._parts.protocol) {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; (p = properties[i]); i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;
      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else if (resolved._parts.path.substring(-2) === '..') {
      resolved._parts.path += '/';
    }

    if (resolved.path().charAt(0) !== '/') {
      basedir = base.directory();
      resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
      resolved.normalizePath();
    }

    resolved.build();
    return resolved;
  };
  p.relativeTo = function(base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    }

    // determine common sub path
    common = URI.commonPath(relative.path(), base.path());

    // If the paths have nothing in common, return a relative URL with the absolute path.
    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path
      .substring(common.length)
      .replace(/[^\/]*$/, '')
      .replace(/.*?\//g, '../');

    relativeParts.path = parents + relativeParts.path.substring(common.length);

    return relative.build();
  };

  // comparing URIs
  p.equals = function(uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;

    one.normalize();
    two.normalize();

    // exact match
    if (one.toString() === two.toString()) {
      return true;
    }

    // extract query string
    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query('');

    // definitely not equal if not even non-query parts match
    if (one.toString() !== two.toString()) {
      return false;
    }

    // query parameters have the same length, even if they're permuted
    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  };

  // state
  p.duplicateQueryParameters = function(v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function(v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
}));

},{"./IPv6":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/IPv6.js","./SecondLevelDomains":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/SecondLevelDomains.js","./punycode":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/punycode.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/punycode.js":[function(require,module,exports){
(function (global){
/*! http://mths.be/punycode v1.2.3 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports;
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		while (length--) {
			array[length] = fn(array[length]);
		}
		return array;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings.
	 * @private
	 * @param {String} domain The domain name.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		return map(string.split(regexSeparators), fn).join('.');
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <http://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    length,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols to a Punycode string of ASCII-only
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name to Unicode. Only the
	 * Punycoded parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it on a string that has already been converted to
	 * Unicode.
	 * @memberOf punycode
	 * @param {String} domain The Punycode domain name to convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(domain) {
		return mapDomain(domain, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name to Punycode. Only the
	 * non-ASCII parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it with a domain that's already in ASCII.
	 * @memberOf punycode
	 * @param {String} domain The domain name to convert, as a Unicode string.
	 * @returns {String} The Punycode representation of the given domain name.
	 */
	function toASCII(domain) {
		return mapDomain(domain, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.2.3',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <http://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return punycode;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js":[function(require,module,exports){
arguments[4]["/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/Backbone/backbone.js"][0].apply(exports,arguments)
},{"underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/parser/epub-cfi.js":[function(require,module,exports){
module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { fragment: peg$parsefragment },
        peg$startRuleFunction  = peg$parsefragment,

        peg$c0 = peg$FAILED,
        peg$c1 = "epubcfi(",
        peg$c2 = { type: "literal", value: "epubcfi(", description: "\"epubcfi(\"" },
        peg$c3 = ")",
        peg$c4 = { type: "literal", value: ")", description: "\")\"" },
        peg$c5 = function(fragmentVal) { 
                
                return { type:"CFIAST", cfiString:fragmentVal };
            },
        peg$c6 = ",",
        peg$c7 = { type: "literal", value: ",", description: "\",\"" },
        peg$c8 = function(stepVal, localPathVal, rangeLocalPath1Val, rangeLocalPath2Val) {

                return { type:"range", path:stepVal, localPath:localPathVal, range1:rangeLocalPath1Val, range2:rangeLocalPath2Val };
          },
        peg$c9 = function(stepVal, localPathVal) { 

                return { type:"path", path:stepVal, localPath:localPathVal }; 
            },
        peg$c10 = [],
        peg$c11 = null,
        peg$c12 = function(localPathStepVal, termStepVal) { 

                return { steps:localPathStepVal, termStep:termStepVal }; 
            },
        peg$c13 = "/",
        peg$c14 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c15 = "[",
        peg$c16 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c17 = "]",
        peg$c18 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c19 = function(stepLengthVal, assertVal) { 

                return { type:"indexStep", stepLength:stepLengthVal, idAssertion:assertVal[1] };
            },
        peg$c20 = "!/",
        peg$c21 = { type: "literal", value: "!/", description: "\"!/\"" },
        peg$c22 = function(stepLengthVal, assertVal) { 

                return { type:"indirectionStep", stepLength:stepLengthVal, idAssertion:assertVal[1] };
            },
        peg$c23 = ":",
        peg$c24 = { type: "literal", value: ":", description: "\":\"" },
        peg$c25 = function(textOffsetValue, textLocAssertVal) { 

                return { type:"textTerminus", offsetValue:textOffsetValue, textAssertion:textLocAssertVal[1] };
            },
        peg$c26 = function(idVal) { 

                return idVal; 
            },
        peg$c27 = function(csvVal, paramVal) { 

                return { type:"textLocationAssertion", csv:csvVal, parameter:paramVal }; 
            },
        peg$c28 = ";",
        peg$c29 = { type: "literal", value: ";", description: "\";\"" },
        peg$c30 = "=",
        peg$c31 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c32 = function(paramLHSVal, paramRHSVal) { 

                return { type:"parameter", LHSValue:paramLHSVal, RHSValue:paramRHSVal }; 
            },
        peg$c33 = function(preAssertionVal, postAssertionVal) { 

                return { type:"csv", preAssertion:preAssertionVal, postAssertion:postAssertionVal }; 
            },
        peg$c34 = function(stringVal) { 

                return stringVal.join(''); 
            },
        peg$c35 = function(escSpecCharVal) { 
                
                return escSpecCharVal[1]; 
            },
        peg$c36 = /^[1-9]/,
        peg$c37 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c38 = /^[0-9]/,
        peg$c39 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c40 = ".",
        peg$c41 = { type: "literal", value: ".", description: "\".\"" },
        peg$c42 = function(intPartVal, fracPartVal) { 

                return intPartVal.join('') + "." + fracPartVal.join(''); 
            },
        peg$c43 = "0",
        peg$c44 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c45 = function(integerVal) { 

                if (integerVal === "0") { 
                  return "0";
                } 
                else { 
                  return integerVal[0].concat(integerVal[1].join(''));
                }
            },
        peg$c46 = " ",
        peg$c47 = { type: "literal", value: " ", description: "\" \"" },
        peg$c48 = function() { return " "; },
        peg$c49 = "^",
        peg$c50 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c51 = function() { return "^"; },
        peg$c52 = "\"",
        peg$c53 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c54 = function() { return '"'; },
        peg$c55 = function(bracketVal) { return bracketVal; },
        peg$c56 = "(",
        peg$c57 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c58 = function(paraVal) { return paraVal; },
        peg$c59 = function() { return ","; },
        peg$c60 = function() { return ";"; },
        peg$c61 = function() { return "="; },
        peg$c62 = /^[a-z]/,
        peg$c63 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c64 = /^[A-Z]/,
        peg$c65 = { type: "class", value: "[A-Z]", description: "[A-Z]" },
        peg$c66 = "-",
        peg$c67 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c68 = "_",
        peg$c69 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c70 = function(charVal) { return charVal; },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsefragment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1) {
        s1 = peg$c1;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parserange();
        if (s2 === peg$FAILED) {
          s2 = peg$parsepath();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserange() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseindexStep();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselocal_path();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c6;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselocal_path();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c6;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parselocal_path();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c8(s1, s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepath() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseindexStep();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselocal_path();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselocal_path() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseindexStep();
      if (s2 === peg$FAILED) {
        s2 = peg$parseindirectionStep();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseindexStep();
          if (s2 === peg$FAILED) {
            s2 = peg$parseindirectionStep();
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseterminus();
        if (s2 === peg$FAILED) {
          s2 = peg$c11;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexStep() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c13;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c15;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidAssertion();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c17;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c11;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c19(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindirectionStep() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s1 = peg$c20;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c15;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidAssertion();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c17;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c11;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c22(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseterminus() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c15;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetextLocationAssertion();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c17;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c11;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c25(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidAssertion() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsevalue();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c26(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetextLocationAssertion() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsecsv();
      if (s1 === peg$FAILED) {
        s1 = peg$c11;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparameter();
        if (s2 === peg$FAILED) {
          s2 = peg$c11;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c27(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseparameter() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c28;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevalueNoSpace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c30;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsevalueNoSpace();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c32(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecsv() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsevalue();
      if (s1 === peg$FAILED) {
        s1 = peg$c11;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalue();
          if (s3 === peg$FAILED) {
            s3 = peg$c11;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c33(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevalueNoSpace() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseescapedSpecialChars();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecharacter();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseescapedSpecialChars();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecharacter();
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c34(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsevalue() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseescapedSpecialChars();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecharacter();
        if (s2 === peg$FAILED) {
          s2 = peg$parsespace();
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseescapedSpecialChars();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecharacter();
            if (s2 === peg$FAILED) {
              s2 = peg$parsespace();
            }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c34(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseescapedSpecialChars() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsecircumflex();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecircumflex();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsecircumflex();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesquareBracket();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parsecircumflex();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseparentheses();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parsecircumflex();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecomma();
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parsecircumflex();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsesemicolon();
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parsecircumflex();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseequal();
                  if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c35(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c36.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c38.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
          }
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c40;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          if (peg$c38.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
          }
          if (s4 !== peg$FAILED) {
            if (peg$c36.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c42(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c43;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (peg$c36.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c38.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c45(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsespace() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c46;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c48();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecircumflex() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c49;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c51();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedoubleQuote() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c52;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c54();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesquareBracket() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c55(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparentheses() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c56;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s1 = peg$c3;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c58(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomma() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c59();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesemicolon() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c28;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c60();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseequal() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c30;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c61();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c62.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s1 === peg$FAILED) {
        if (peg$c64.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s1 === peg$FAILED) {
          if (peg$c38.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c66;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s1 = peg$c68;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c69); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s1 = peg$c40;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c70(s1);
      }
      s0 = s1;

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/cfi-assertion.js":[function(require,module,exports){
var CFIAssertionError = function (expectedAssertion, targetElementAssertion, message) {

    function CFIAssertionError () {

        this.expectedAssertion = expectedAssertion;
        this.targetElementAssertion = targetElementAssertion;
    }

    CFIAssertionError.prototype = new Error(message);
    CFIAssertionError.constructor = CFIAssertionError();

    return new CFIAssertionError();
};

module.exports = CFIAssertionError

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/node-type.js":[function(require,module,exports){
// REFACTORING CANDIDATE: This type of error may not be required in the long run. The parser should catch any syntax errors, 
//   provided it is error-free, and as such, the AST should never really have any node type errors, which are essentially errors
//   in the structure of the AST. This error should probably be refactored out when the grammar and interpreter are more stable.
var NodeTypeError = function (node, message) {

    function NodeTypeError () {

        this.node = node;
    }

    NodeTypeError.prototype = new Error(message);
    NodeTypeError.constructor = NodeTypeError;

    return new NodeTypeError();
};

module.exports = NodeTypeError

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/out-of-range.js":[function(require,module,exports){
// REFACTORING CANDIDATE: Might make sense to include some more specifics about the out-of-rangeyness.
var OutOfRangeError = function (targetIndex, maxIndex, message) {

    function OutOfRangeError () {

        this.targetIndex = targetIndex;
        this.maxIndex = maxIndex;
    }

    OutOfRangeError.prototype = new Error(message);
    OutOfRangeError.constructor = OutOfRangeError()

    return new OutOfRangeError();
};

module.exports = OutOfRangeError

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/terminus.js":[function(require,module,exports){
// REFACTORING CANDIDATE: This is a bit too general to be useful. When I have a better understanding of the type of errors
//   that can occur with the various terminus conditions, it'll make more sense to revisit this. 
var TerminusError = function (terminusType, terminusCondition, message) {

    function TerminusError () {

        this.terminusType = terminusType;
        this.terminusCondition = terminusCondition;
    }

    TerminusError.prototype = new Error(message);
    TerminusError.constructor = TerminusError();

    return new TerminusError();
};

module.exports = TerminusError

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/generator.js":[function(require,module,exports){
var $ = require('jquery')
var Instructions = require('./instructions')
var NodeTypeError = require('./errors/node-type')
var OutOfRangeError = require('./errors/out-of-range')

var Generator = {

    // ------------------------------------------------------------------------------------ //
    //  "PUBLIC" METHODS (THE API)                                                          //
    // ------------------------------------------------------------------------------------ //

    generateCharOffsetRangeComponent : function (rangeStartElement, startOffset, rangeEndElement, endOffset, classBlacklist, elementBlacklist, idBlacklist) {

        var docRange;
        var commonAncestor;
        var range1OffsetStep;
        var range1CFI;
        var range2OffsetStep;
        var range2CFI;
        var commonCFIComponent;

        this.validateStartTextNode(rangeStartElement);
        this.validateStartTextNode(rangeEndElement);

        // Parent element is the same
        if ($(rangeStartElement).parent()[0] === $(rangeEndElement).parent()[0]) {
            range1OffsetStep = this.createCFITextNodeStep($(rangeStartElement), startOffset, classBlacklist, elementBlacklist, idBlacklist);
            range2OffsetStep = this.createCFITextNodeStep($(rangeEndElement), endOffset, classBlacklist, elementBlacklist, idBlacklist);          
            commonCFIComponent = this.createCFIElementSteps($(rangeStartElement).parent(), "html", classBlacklist, elementBlacklist, idBlacklist);
            return commonCFIComponent.substring(1, commonCFIComponent.length) + "," + range1OffsetStep + "," + range2OffsetStep;
        }
        else {

            // Create a document range to find the common ancestor
            docRange = document.createRange();
            docRange.setStart(rangeStartElement, startOffset);
            docRange.setEnd(rangeEndElement, endOffset);
            commonAncestor = docRange.commonAncestorContainer;

            // Generate terminating offset and range 1
            range1OffsetStep = this.createCFITextNodeStep($(rangeStartElement), startOffset, classBlacklist, elementBlacklist, idBlacklist);
            range1CFI = this.createCFIElementSteps($(rangeStartElement).parent(), commonAncestor, classBlacklist, elementBlacklist, idBlacklist) + range1OffsetStep;

            // Generate terminating offset and range 2
            range2OffsetStep = this.createCFITextNodeStep($(rangeEndElement), endOffset, classBlacklist, elementBlacklist, idBlacklist);
            range2CFI = this.createCFIElementSteps($(rangeEndElement).parent(), commonAncestor, classBlacklist, elementBlacklist, idBlacklist) + range2OffsetStep;

            // Generate shared component
            commonCFIComponent = this.createCFIElementSteps($(commonAncestor), "html", classBlacklist, elementBlacklist, idBlacklist);

            // Return the result
            return commonCFIComponent.substring(1, commonCFIComponent.length) + "," + range1CFI + "," + range2CFI;
        }
    },

    generateElementRangeComponent : function (rangeStartElement, rangeEndElement, classBlacklist, elementBlacklist, idBlacklist) {

        var docRange;
        var commonAncestor;
        var range1CFI;
        var range2CFI;
        var commonCFIComponent;

        this.validateStartElement(rangeStartElement);
        this.validateStartElement(rangeEndElement);

        if (rangeStartElement === rangeEndElement) {
            throw new Error("Start and end element cannot be the same for a CFI range");
        }

        // Create a document range to find the common ancestor
        docRange = document.createRange();
        docRange.setStart(rangeStartElement, 0);
        docRange.setEnd(rangeEndElement, rangeEndElement.childNodes.length);
        commonAncestor = docRange.commonAncestorContainer;

        // Generate range 1
        range1CFI = this.createCFIElementSteps($(rangeStartElement), commonAncestor, classBlacklist, elementBlacklist, idBlacklist);

        // Generate range 2
        range2CFI = this.createCFIElementSteps($(rangeEndElement), commonAncestor, classBlacklist, elementBlacklist, idBlacklist);

        // Generate shared component
        commonCFIComponent = this.createCFIElementSteps($(commonAncestor), "html", classBlacklist, elementBlacklist, idBlacklist);

        // Return the result
        return commonCFIComponent.substring(1, commonCFIComponent.length) + "," + range1CFI + "," + range2CFI;
    },

    // Description: Generates a character offset CFI 
    // Arguments: The text node that contains the offset referenced by the cfi, the offset value, the name of the 
    //   content document that contains the text node, the package document for this EPUB.
    generateCharacterOffsetCFIComponent : function (startTextNode, characterOffset, classBlacklist, elementBlacklist, idBlacklist) {

        var textNodeStep;
        var contentDocCFI;
        var $itemRefStartNode;
        var packageDocCFI;

        this.validateStartTextNode(startTextNode, characterOffset);

        // Create the text node step
        textNodeStep = this.createCFITextNodeStep($(startTextNode), characterOffset, classBlacklist, elementBlacklist, idBlacklist);

        // Call the recursive method to create all the steps up to the head element of the content document (the "html" element)
        contentDocCFI = this.createCFIElementSteps($(startTextNode).parent(), "html", classBlacklist, elementBlacklist, idBlacklist) + textNodeStep;
        return contentDocCFI.substring(1, contentDocCFI.length);
    },

    generateElementCFIComponent : function (startElement, classBlacklist, elementBlacklist, idBlacklist) {

        var contentDocCFI;
        var $itemRefStartNode;
        var packageDocCFI;

        this.validateStartElement(startElement);

        // Call the recursive method to create all the steps up to the head element of the content document (the "html" element)
        contentDocCFI = this.createCFIElementSteps($(startElement), "html", classBlacklist, elementBlacklist, idBlacklist);

        // Remove the ! 
        return contentDocCFI.substring(1, contentDocCFI.length);
    },

    generatePackageDocumentCFIComponent : function (contentDocumentName, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {

        this.validateContentDocumentName(contentDocumentName);
        this.validatePackageDocument(packageDocument, contentDocumentName);

        // Get the start node (itemref element) that references the content document
        $itemRefStartNode = $("itemref[idref='" + contentDocumentName + "']", $(packageDocument));

        // Create the steps up to the top element of the package document (the "package" element)
        packageDocCFIComponent = this.createCFIElementSteps($itemRefStartNode, "package", classBlacklist, elementBlacklist, idBlacklist);

        // Append an !; this assumes that a CFI content document CFI component will be appended at some point
        return packageDocCFIComponent + "!";
    },

    generatePackageDocumentCFIComponentWithSpineIndex : function (spineIndex, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {

        // Get the start node (itemref element) that references the content document
        $itemRefStartNode = $($("spine", packageDocument).children()[spineIndex]);

        // Create the steps up to the top element of the package document (the "package" element)
        packageDocCFIComponent = this.createCFIElementSteps($itemRefStartNode, "package", classBlacklist, elementBlacklist, idBlacklist);

        // Append an !; this assumes that a CFI content document CFI component will be appended at some point
        return packageDocCFIComponent + "!";
    },

    generateCompleteCFI : function (packageDocumentCFIComponent, contentDocumentCFIComponent) {

        return "epubcfi(" + packageDocumentCFIComponent + contentDocumentCFIComponent + ")";  
    },

    // ------------------------------------------------------------------------------------ //
    //  "PRIVATE" HELPERS                                                                   //
    // ------------------------------------------------------------------------------------ //

    validateStartTextNode : function (startTextNode, characterOffset) {
        
        // Check that the text node to start from IS a text node
        if (!startTextNode) {
            throw new NodeTypeError(startTextNode, "Cannot generate a character offset from a starting point that is not a text node");
        } else if (startTextNode.nodeType != 3) {
            throw new NodeTypeError(startTextNode, "Cannot generate a character offset from a starting point that is not a text node");
        }

        // Check that the character offset is within a valid range for the text node supplied
        if (characterOffset < 0) {
            throw new OutOfRangeError(characterOffset, 0, "Character offset cannot be less than 0");
        }
        else if (characterOffset > startTextNode.nodeValue.length) {
            throw new OutOfRangeError(characterOffset, startTextNode.nodeValue.length - 1, "character offset cannot be greater than the length of the text node");
        }
    },

    validateStartElement : function (startElement) {

        if (!startElement) {
            throw new NodeTypeError(startElement, "CFI target element is undefined");
        }

        if (!(startElement.nodeType && startElement.nodeType === 1)) {
            throw new NodeTypeError(startElement, "CFI target element is not an HTML element");
        }
    },

    validateContentDocumentName : function (contentDocumentName) {

        // Check that the idref for the content document has been provided
        if (!contentDocumentName) {
            throw new Error("The idref for the content document, as found in the spine, must be supplied");
        }
    },

    validatePackageDocument : function (packageDocument, contentDocumentName) {
        
        // Check that the package document is non-empty and contains an itemref element for the supplied idref
        if (!packageDocument) {
            throw new Error("A package document must be supplied to generate a CFI");
        }
        else if ($($("itemref[idref='" + contentDocumentName + "']", packageDocument)[0]).length === 0) {
            throw new Error("The idref of the content document could not be found in the spine");
        }
    },

    // Description: Creates a CFI terminating step to a text node, with a character offset
    // REFACTORING CANDIDATE: Some of the parts of this method could be refactored into their own methods
    createCFITextNodeStep : function ($startTextNode, characterOffset, classBlacklist, elementBlacklist, idBlacklist) {

        var $parentNode;
        var $contentsExcludingMarkers;
        var CFIIndex;
        var indexOfTextNode;
        var preAssertion;
        var preAssertionStartIndex;
        var textLength;
        var postAssertion;
        var postAssertionEndIndex;

        // Find text node position in the set of child elements, ignoring any blacklisted elements 
        $parentNode = $startTextNode.parent();
        $contentsExcludingMarkers = Instructions.applyBlacklist($parentNode.contents(), classBlacklist, elementBlacklist, idBlacklist);

        // Find the text node index in the parent list, inferring nodes that were originally a single text node
        var prevNodeWasTextNode;
        var indexOfFirstInSequence;
        var textNodeOnlyIndex = 0;
        var characterOffsetSinceUnsplit = 0;
        var finalCharacterOffsetInSequence = 0;
        $.each($contentsExcludingMarkers, 
            function (index) {

                // If this is a text node, check if it matches and return the current index
                if (this.nodeType === Node.TEXT_NODE) {

                    if (this === $startTextNode[0]) {

                        // Set index as the first in the adjacent sequence of text nodes, or as the index of the current node if this 
                        //   node is a standard one sandwiched between two element nodes. 
                        if (prevNodeWasTextNode) {
                            indexOfTextNode = indexOfFirstInSequence;
                            finalCharacterOffsetInSequence = characterOffsetSinceUnsplit;
                        }
                        else {
                            indexOfTextNode = textNodeOnlyIndex;
                        }
                        
                        // Break out of .each loop
                        return false; 
                    }

                    // Save this index as the first in sequence of adjacent text nodes, if it is not already set by this point
                    prevNodeWasTextNode = true;
                    characterOffsetSinceUnsplit = characterOffsetSinceUnsplit + this.length
                    if (indexOfFirstInSequence === undefined) {
                        indexOfFirstInSequence = textNodeOnlyIndex;
                        textNodeOnlyIndex = textNodeOnlyIndex + 1;
                    }
                }
                // This node is not a text node
                else {
                    prevNodeWasTextNode = false;
                    indexOfFirstInSequence = undefined;
                    characterOffsetSinceUnsplit  = 0;
                }
            }
        );

        // Convert the text node index to a CFI odd-integer representation
        CFIIndex = (indexOfTextNode * 2) + 1;

        // TODO: text assertions are not in the grammar yet, I think, or they're just causing problems. This has
        //   been temporarily removed. 

        // Add pre- and post- text assertions
        // preAssertionStartIndex = (characterOffset - 3 >= 0) ? characterOffset - 3 : 0;
        // preAssertion = $startTextNode[0].nodeValue.substring(preAssertionStartIndex, characterOffset);

        // textLength = $startTextNode[0].nodeValue.length;
        // postAssertionEndIndex = (characterOffset + 3 <= textLength) ? characterOffset + 3 : textLength;
        // postAssertion = $startTextNode[0].nodeValue.substring(characterOffset, postAssertionEndIndex);

        // Gotta infer the correct character offset, as well

        // Return the constructed CFI text node step
        return "/" + CFIIndex + ":" + (finalCharacterOffsetInSequence + characterOffset);
         // + "[" + preAssertion + "," + postAssertion + "]";
    },

    createCFIElementSteps : function ($currNode, topLevelElement, classBlacklist, elementBlacklist, idBlacklist) {

        var $blacklistExcluded;
        var $parentNode;
        var currNodePosition;
        var CFIPosition;
        var idAssertion;
        var elementStep; 

        // Find position of current node in parent list
        $blacklistExcluded = Instructions.applyBlacklist($currNode.parent().children(), classBlacklist, elementBlacklist, idBlacklist);
        $.each($blacklistExcluded, 
            function (index, value) {

                if (this === $currNode[0]) {

                    currNodePosition = index;

                    // Break loop
                    return false;
                }
        });

        // Convert position to the CFI even-integer representation
        CFIPosition = (currNodePosition + 1) * 2;

        // Create CFI step with id assertion, if the element has an id
        if ($currNode.attr("id")) {
            elementStep = "/" + CFIPosition + "[" + $currNode.attr("id") + "]";
        }
        else {
            elementStep = "/" + CFIPosition;
        }

        // If a parent is an html element return the (last) step for this content document, otherwise, continue.
        //   Also need to check if the current node is the top-level element. This can occur if the start node is also the
        //   top level element.
        $parentNode = $currNode.parent();
        if ($parentNode.is(topLevelElement) || $currNode.is(topLevelElement)) {
            
            // If the top level node is a type from which an indirection step, add an indirection step character (!)
            // REFACTORING CANDIDATE: It is possible that this should be changed to: if (topLevelElement = 'package') do
            //   not return an indirection character. Every other type of top-level element may require an indirection
            //   step to navigate to, thus requiring that ! is always prepended. 
            if (topLevelElement === 'html') {
                return "!" + elementStep;
            }
            else {
                return elementStep;
            }
        }
        else {
            return this.createCFIElementSteps($parentNode, topLevelElement, classBlacklist, elementBlacklist, idBlacklist) + elementStep;
        }
    }
};

module.exports = Generator

},{"./errors/node-type":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/node-type.js","./errors/out-of-range":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/out-of-range.js","./instructions":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/instructions.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/index.js":[function(require,module,exports){
var generator     = require('./generator');
var instructions  = require('./instructions');
var interpreter   = require('./interpreter');

function generateCharacterOffsetCFIComponent(startTextNode, characterOffset, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generateCharacterOffsetCFIComponent(startTextNode, characterOffset, classBlacklist, elementBlacklist, idBlacklist);
}

function generateCharOffsetRangeComponent(rangeStartElement, startOffset, rangeEndElement, endOffset, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generateCharOffsetRangeComponent(rangeStartElement, startOffset, rangeEndElement, endOffset, classBlacklist, elementBlacklist, idBlacklist);
}

function generateCompleteCFI(packageDocumentCFIComponent, contentDocumentCFIComponent) {
  return generator.generateCompleteCFI(packageDocumentCFIComponent, contentDocumentCFIComponent);
}

function generateElementCFIComponent(startElement, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generateElementCFIComponent(startElement, classBlacklist, elementBlacklist, idBlacklist);
}

function generateElementRangeComponent(rangeStartElement, rangeEndElement, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generateElementRangeComponent(rangeStartElement, rangeEndElement, classBlacklist, elementBlacklist, idBlacklist);
}

function generatePackageDocumentCFIComponent(contentDocumentName, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generatePackageDocumentCFIComponent(contentDocumentName, packageDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function generatePackageDocumentCFIComponentWithSpineIndex(spineIndex, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generatePackageDocumentCFIComponentWithSpineIndex(spineIndex, packageDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function getContentDocHref(CFI, packageDocument) {
  return interpreter.getContentDocHref(CFI, packageDocument);
}

function getRangeTargetElements(rangeCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.getRangeTargetElements(rangeCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function getTargetElement(CFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.getTargetElement(CFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function getTargetElementWithPartialCFI(contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.getTargetElementWithPartialCFI(contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function getTextTerminusInfoWithPartialCFI(contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.getTextTerminusInfoWithPartialCFI(contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function injectElement(CFI, contentDocument, elementToInject, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.injectElement(CFI, contentDocument, elementToInject, classBlacklist, elementBlacklist, idBlacklist);
}

function injectElementAtOffset($textNodeList, textOffset, elementToInject) {
  return instructions.injectCFIMarkerIntoText($textNodeList, textOffset, elementToInject);
}

function injectRangeElements(rangeCFI, contentDocument, startElementToInject, endElementToInject, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.injectRangeElements(rangeCFI, contentDocument, startElementToInject, endElementToInject, classBlacklist, elementBlacklist, idBlacklist);
}

module.exports = {
  generateCharacterOffsetCFIComponent: generateCharacterOffsetCFIComponent,
  generateCharOffsetRangeComponent: generateCharOffsetRangeComponent,
  generateCompleteCFI: generateCompleteCFI,
  generateElementCFIComponent: generateElementCFIComponent,
  generateElementRangeComponent: generateElementRangeComponent,
  generatePackageDocumentCFIComponent: generatePackageDocumentCFIComponent,
  generatePackageDocumentCFIComponentWithSpineIndex: generatePackageDocumentCFIComponentWithSpineIndex,
  getContentDocHref: getContentDocHref,
  getRangeTargetElements: getRangeTargetElements,
  getTargetElement: getTargetElement,
  getTargetElementWithPartialCFI: getTargetElementWithPartialCFI,
  getTextTerminusInfoWithPartialCFI: getTextTerminusInfoWithPartialCFI,
  injectElement: injectElement,
  injectElementAtOffset: injectElementAtOffset,
  injectRangeElements: injectRangeElements
}

},{"./generator":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/generator.js","./instructions":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/instructions.js","./interpreter":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/interpreter.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/instructions.js":[function(require,module,exports){
// Description: This model contains the implementation for "instructions" included in the EPUB CFI domain specific language (DSL). 
//   Lexing and parsing a CFI produces a set of executable instructions for processing a CFI (represented in the AST). 
//   This object contains a set of functions that implement each of the executable instructions in the AST. 

var NodeTypeError = require('./errors/node-type')
var OutOfRangeError = require('./errors/out-of-range')
var TerminusError = require('./errors/terminus')

var Instructions = {

	// ------------------------------------------------------------------------------------ //
	//  "PUBLIC" METHODS (THE API)                                                          //
	// ------------------------------------------------------------------------------------ //

	// Description: Follows a step
	// Rationale: The use of children() is important here, as this jQuery method returns a tree of xml nodes, EXCLUDING
	//   CDATA and text nodes. When we index into the set of child elements, we are assuming that text nodes have been 
	//   excluded.
	// REFACTORING CANDIDATE: This should be called "followIndexStep"
	getNextNode : function (CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist) {

		// Find the jquery index for the current node
		var $targetNode;
		if (CFIStepValue % 2 == 0) {

			$targetNode = this.elementNodeStep(CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist);
		}
		else {

			$targetNode = this.inferTargetTextNode(CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist);
		}

		return $targetNode;
	},

	// Description: This instruction executes an indirection step, where a resource is retrieved using a 
	//   link contained on a attribute of the target element. The attribute that contains the link differs
	//   depending on the target. 
	// Note: Iframe indirection will (should) fail if the iframe is not from the same domain as its containing script due to 
	//   the cross origin security policy
	followIndirectionStep : function (CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist) {

		var that = this;
		var $contentDocument; 
		var $blacklistExcluded;
		var $startElement;
		var $targetNode;

		// TODO: This check must be expanded to all the different types of indirection step
		// Only expects iframes, at the moment
		if ($currNode === undefined || !$currNode.is("iframe")) {

			throw NodeTypeError($currNode, "expected an iframe element");
		}

		// Check node type; only iframe indirection is handled, at the moment
		if ($currNode.is("iframe")) {

			// Get content
			$contentDocument = $currNode.contents();

			// Go to the first XHTML element, which will be the first child of the top-level document object
			$blacklistExcluded = this.applyBlacklist($contentDocument.children(), classBlacklist, elementBlacklist, idBlacklist);
			$startElement = $($blacklistExcluded[0]);

			// Follow an index step
			$targetNode = this.getNextNode(CFIStepValue, $startElement, classBlacklist, elementBlacklist, idBlacklist);

			// Return that shit!
			return $targetNode; 
		}

		// TODO: Other types of indirection
		// TODO: $targetNode.is("embed")) : src
		// TODO: ($targetNode.is("object")) : data
		// TODO: ($targetNode.is("image") || $targetNode.is("xlink:href")) : xlink:href
	},

	// Description: Injects an element at the specified text node
	// Arguments: a cfi text termination string, a jquery object to the current node
	// REFACTORING CANDIDATE: Rename this to indicate that it injects into a text terminus
	textTermination : function ($currNode, textOffset, elementToInject) {

		var $injectedElement;
		// Get the first node, this should be a text node
		if ($currNode === undefined) {

			throw NodeTypeError($currNode, "expected a terminating node, or node list");
		} 
		else if ($currNode.length === 0) {

			throw TerminusError("Text", "Text offset:" + textOffset, "no nodes found for termination condition");
		}

		$injectedElement = this.injectCFIMarkerIntoText($currNode, textOffset, elementToInject);
		return $injectedElement;
	},

	// Description: Checks that the id assertion for the node target matches that on 
	//   the found node. 
	targetIdMatchesIdAssertion : function ($foundNode, idAssertion) {

		if ($foundNode.attr("id") === idAssertion) {

			return true;
		}
		else {

			return false;
		}
	},

	// ------------------------------------------------------------------------------------ //
	//  "PRIVATE" HELPERS                                                                   //
	// ------------------------------------------------------------------------------------ //

	// Description: Step reference for xml element node. Expected that CFIStepValue is an even integer
	elementNodeStep : function (CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist) {

		var $targetNode;
		var $blacklistExcluded;
		var numElements;
		var jqueryTargetNodeIndex = (CFIStepValue / 2) - 1;

		$blacklistExcluded = this.applyBlacklist($currNode.children(), classBlacklist, elementBlacklist, idBlacklist);
		numElements = $blacklistExcluded.length;

		if (this.indexOutOfRange(jqueryTargetNodeIndex, numElements)) {

			throw OutOfRangeError(jqueryTargetNodeIndex, numElements - 1, "");
		}

	    $targetNode = $($blacklistExcluded[jqueryTargetNodeIndex]);
		return $targetNode;
	},

	retrieveItemRefHref : function ($itemRefElement, $packageDocument) {

		return $("#" + $itemRefElement.attr("idref"), $packageDocument).attr("href");
	},

	indexOutOfRange : function (targetIndex, numChildElements) {

		return (targetIndex > numChildElements - 1) ? true : false;
	},

	// Rationale: In order to inject an element into a specific position, access to the parent object 
	//   is required. This is obtained with the jquery parent() method. An alternative would be to 
	//   pass in the parent with a filtered list containing only children that are part of the target text node.
    injectCFIMarkerIntoText : function ($textNodeList, textOffset, elementToInject) {

        var nodeNum;
        var currNodeLength;
        var currTextPosition = 0;
        var nodeOffset;
        var originalText;
        var $injectedNode;
        var $newTextNode;
        // The iteration counter may be incorrect here (should be $textNodeList.length - 1 ??)
        for (nodeNum = 0; nodeNum <= $textNodeList.length; nodeNum++) {

            if ($textNodeList[nodeNum].nodeType === 3) {

                currNodeMaxIndex = $textNodeList[nodeNum].nodeValue.length  + currTextPosition;
                nodeOffset = textOffset - currTextPosition;

                if (currNodeMaxIndex > textOffset) {

                    // This node is going to be split and the components re-inserted
                    originalText = $textNodeList[nodeNum].nodeValue;	

                    // Before part
                    $textNodeList[nodeNum].nodeValue = originalText.slice(0, nodeOffset);

                    // Injected element
                    $injectedNode = $(elementToInject).insertAfter($textNodeList.eq(nodeNum));

                    // After part
                    $newTextNode = $(document.createTextNode(originalText.slice(nodeOffset, originalText.length)));
                    $($newTextNode).insertAfter($injectedNode);

                    return $injectedNode;
                } else if (currNodeMaxIndex == textOffset){
                    $injectedNode = $(elementToInject).insertAfter($textNodeList.eq(nodeNum));
                    return $injectedNode;
                }
                else {

                    currTextPosition = currNodeMaxIndex;
                }
            }
        }

        throw TerminusError("Text", "Text offset:" + textOffset, "The offset exceeded the length of the text");
    },

	// Rationale: In order to inject an element into a specific position, access to the parent object 
	//   is required. This is obtained with the jquery parent() method. An alternative would be to 
	//   pass in the parent with a filtered list containing only children that are part of the target text node.

	// Description: This method finds a target text node and then injects an element into the appropriate node
	// Rationale: The possibility that cfi marker elements have been injected into a text node at some point previous to 
	//   this method being called (and thus splitting the original text node into two separate text nodes) necessitates that
	//   the set of nodes that compromised the original target text node are inferred and returned.
	// Notes: Passed a current node. This node should have a set of elements under it. This will include at least one text node, 
	//   element nodes (maybe), or possibly a mix. 
	// REFACTORING CANDIDATE: This method is pretty long (and confusing). Worth investigating to see if it can be refactored into something clearer.
	inferTargetTextNode : function (CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist) {
		
		var $elementsWithoutMarkers;
		var currLogicalTextNodeIndex;
		var targetLogicalTextNodeIndex;
		var nodeNum;
		var $targetTextNodeList;
		var prevNodeWasTextNode;

		// Remove any cfi marker elements from the set of elements. 
		// Rationale: A filtering function is used, as simply using a class selector with jquery appears to 
		//   result in behaviour where text nodes are also filtered out, along with the class element being filtered.
		$elementsWithoutMarkers = this.applyBlacklist($currNode.contents(), classBlacklist, elementBlacklist, idBlacklist);

		// Convert CFIStepValue to logical index; assumes odd integer for the step value
		targetLogicalTextNodeIndex = ((parseInt(CFIStepValue) + 1) / 2) - 1;

		// Set text node position counter
		currLogicalTextNodeIndex = 0;
		prevNodeWasTextNode = false;
		$targetTextNodeList = $elementsWithoutMarkers.filter(
			function () {

				if (currLogicalTextNodeIndex === targetLogicalTextNodeIndex) {

					// If it's a text node
					if (this.nodeType === Node.TEXT_NODE) {
						prevNodeWasTextNode = true;
						return true;
					}
					// Rationale: The logical text node position is only incremented once a group of text nodes (a single logical
					//   text node) has been passed by the loop. 
					else if (prevNodeWasTextNode && (this.nodeType !== Node.TEXT_NODE)) {
						currLogicalTextNodeIndex++;
						prevNodeWasTextNode = false;			
						return false;
					}
				}
				// Don't return any elements
				else {

					if (this.nodeType === Node.TEXT_NODE) {
						prevNodeWasTextNode = true;
					}
					else if (prevNodeWasTextNode && (this.nodeType !== Node.TEXT_NODE) && (this !== $elementsWithoutMarkers.lastChild)) {
						currLogicalTextNodeIndex++;
						prevNodeWasTextNode = false;
					}

					return false;
				}
			}
		);

		// The filtering above should have counted the number of "logical" text nodes; this can be used to 
		// detect out of range errors
		if ($targetTextNodeList.length === 0) {
			throw OutOfRangeError(logicalTargetTextNodeIndex, currLogicalTextNodeIndex, "Index out of range");
		}

		// return the text node list
		return $targetTextNodeList;
	},

	applyBlacklist : function ($elements, classBlacklist, elementBlacklist, idBlacklist) {

        var $filteredElements;

        $filteredElements = $elements.filter(
            function () {

                var $currElement = $(this);
                var includeInList = true;

                if (classBlacklist) {

                	// Filter each element with the class type
                	$.each(classBlacklist, function (index, value) {

	                    if ($currElement.hasClass(value)) {
	                    	includeInList = false;

	                    	// Break this loop
	                        return false;
	                    }
                	});
                }

                if (elementBlacklist) {
                	
	                // For each type of element
	                $.each(elementBlacklist, function (index, value) {

	                    if ($currElement.is(value)) {
	                    	includeInList = false;

	                    	// Break this loop
	                        return false;
	                    }
	                });
				}

				if (idBlacklist) {
                	
	                // For each type of element
	                $.each(idBlacklist, function (index, value) {

	                    if ($currElement.attr("id") === value) {
	                    	includeInList = false;

	                    	// Break this loop
	                        return false;
	                    }
	                });
				}

                return includeInList;
            }
        );

        return $filteredElements;
    }
};

module.exports = Instructions

},{"./errors/node-type":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/node-type.js","./errors/out-of-range":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/out-of-range.js","./errors/terminus":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/terminus.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/interpreter.js":[function(require,module,exports){
// Description: This is an interpreter that inteprets an Abstract Syntax Tree (AST) for a CFI. The result of executing the interpreter
//   is to inject an element, or set of elements, into an EPUB content document (which is just an XHTML document). These element(s) will
//   represent the position or area in the EPUB referenced by a CFI.
// Rationale: The AST is a clean and readable expression of the step-terminus structure of a CFI. Although building an interpreter adds to the
//   CFI infrastructure, it provides a number of benefits. First, it emphasizes a clear separation of concerns between lexing/parsing a
//   CFI, which involves some complexity related to escaped and special characters, and the execution of the underlying set of steps 
//   represented by the CFI. Second, it will be easier to extend the interpreter to account for new/altered CFI steps (say for references
//   to vector objects or multiple CFIs) than if lexing, parsing and interpretation were all handled in a single step. Finally, Readium's objective is 
//   to demonstrate implementation of the EPUB 3.0 spec. An implementation with a strong separation of concerns that conforms to 
//   well-understood patterns for DSL processing should be easier to communicate, analyze and understand. 
// REFACTORING CANDIDATE: node type errors shouldn't really be possible if the CFI syntax is correct and the parser is error free. 
//   Might want to make the script die in those instances, once the grammar and interpreter are more stable. 
// REFACTORING CANDIDATE: The use of the 'nodeType' property is confusing as this is a DOM node property and the two are unrelated. 
//   Whoops. There shouldn't be any interference, however, I think this should be changed. 

var $ = require('jquery')
var CFIAssertionError = require('./errors/cfi-assertion')
var Instructions = require('./instructions')
var NodeTypeError = require('./errors/node-type')
var Parser = require('./parser')

var Interpreter = {

    // ------------------------------------------------------------------------------------ //
    //  "PUBLIC" METHODS (THE API)                                                          //
    // ------------------------------------------------------------------------------------ //

    // Description: Find the content document referenced by the spine item. This should be the spine item 
    //   referenced by the first indirection step in the CFI.
    // Rationale: This method is a part of the API so that the reading system can "interact" the content document 
    //   pointed to by a CFI. If this is not a separate step, the processing of the CFI must be tightly coupled with 
    //   the reading system, as it stands now. 
    getContentDocHref : function (CFI, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var $packageDocument = $(packageDocument);
        var decodedCFI = decodeURI(CFI);
        var CFIAST = Parser.parse(decodedCFI);

        if (!CFIAST || CFIAST.type !== "CFIAST") { 
            throw NodeTypeError(CFIAST, "expected CFI AST root node");
        }

        // Interpet the path node (the package document step)
        var $packageElement = $($("package", $packageDocument)[0]);
        var $currElement = this.interpretIndexStepNode(CFIAST.cfiString.path, $packageElement, classBlacklist, elementBlacklist, idBlacklist);
        foundHref = this.searchLocalPathForHref($currElement, $packageDocument, CFIAST.cfiString.localPath, classBlacklist, elementBlacklist, idBlacklist);

        if (foundHref) {
            return foundHref;
        }
        else {
            return undefined;
        }
    },

    // Description: Inject an arbitrary html element into a position in a content document referenced by a CFI
    injectElement : function (CFI, contentDocument, elementToInject, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(CFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var indirectionStepNum;
        var $currElement;

        // Rationale: Since the correct content document for this CFI is already being passed, we can skip to the beginning 
        //   of the indirection step that referenced the content document.
        // Note: This assumes that indirection steps and index steps conform to an interface: an object with stepLength, idAssertion
        indirectionStepNum = this.getFirstIndirectionStepNum(CFIAST);
        indirectionNode = CFIAST.cfiString.localPath.steps[indirectionStepNum];
        indirectionNode.type = "indexStep";

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, indirectionStepNum, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // TODO: detect what kind of terminus; for now, text node termini are the only kind implemented
        $currElement = this.interpretTextTerminusNode(CFIAST.cfiString.localPath.termStep, $currElement, elementToInject);

        // Return the element that was injected into
        return $currElement;
    },

    // Description: Inject an arbitrary html element into a position in a content document referenced by a CFI
    injectRangeElements : function (rangeCFI, contentDocument, startElementToInject, endElementToInject, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(rangeCFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var indirectionStepNum;
        var $currElement;
        var $range1TargetElement;
        var $range2TargetElement;

        // Rationale: Since the correct content document for this CFI is already being passed, we can skip to the beginning 
        //   of the indirection step that referenced the content document.
        // Note: This assumes that indirection steps and index steps conform to an interface: an object with stepLength, idAssertion
        indirectionStepNum = this.getFirstIndirectionStepNum(CFIAST);
        indirectionNode = CFIAST.cfiString.localPath.steps[indirectionStepNum];
        indirectionNode.type = "indexStep";

        // Interpret the rest of the steps in the first local path
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, indirectionStepNum, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Interpret the first range local_path
        $range1TargetElement = this.interpretLocalPath(CFIAST.cfiString.range1, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);
        $range1TargetElement = this.interpretTextTerminusNode(CFIAST.cfiString.range1.termStep, $range1TargetElement, startElementToInject);

        // Interpret the second range local_path
        $range2TargetElement = this.interpretLocalPath(CFIAST.cfiString.range2, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);
        $range2TargetElement = this.interpretTextTerminusNode(CFIAST.cfiString.range2.termStep, $range2TargetElement, endElementToInject);

        // Return the element that was injected into
        return {
            startElement : $range1TargetElement[0],
            endElement : $range2TargetElement[0]
        };
    },

    // Description: This method will return the element or node (say, a text node) that is the final target of the 
    //   the CFI.
    getTargetElement : function (CFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(CFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var indirectionStepNum;
        var $currElement;
        
        // Rationale: Since the correct content document for this CFI is already being passed, we can skip to the beginning 
        //   of the indirection step that referenced the content document.
        // Note: This assumes that indirection steps and index steps conform to an interface: an object with stepLength, idAssertion
        indirectionStepNum = this.getFirstIndirectionStepNum(CFIAST);
        indirectionNode = CFIAST.cfiString.localPath.steps[indirectionStepNum];
        indirectionNode.type = "indexStep";

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, indirectionStepNum, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Return the element at the end of the CFI
        return $currElement;
    },

    getRangeTargetElements : function (rangeCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(rangeCFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var indirectionStepNum;
        var $currElement;
        var $range1TargetElement;
        var $range2TargetElement;
        
        // Rationale: Since the correct content document for this CFI is already being passed, we can skip to the beginning 
        //   of the indirection step that referenced the content document.
        // Note: This assumes that indirection steps and index steps conform to an interface: an object with stepLength, idAssertion
        indirectionStepNum = this.getFirstIndirectionStepNum(CFIAST);
        indirectionNode = CFIAST.cfiString.localPath.steps[indirectionStepNum];
        indirectionNode.type = "indexStep";

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, indirectionStepNum, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Interpret first range local_path
        $range1TargetElement = this.interpretLocalPath(CFIAST.cfiString.range1, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Interpret second range local_path
        $range2TargetElement = this.interpretLocalPath(CFIAST.cfiString.range2, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Return the element at the end of the CFI
        return {
            startElement : $range1TargetElement[0],
            endElement : $range2TargetElement[0]
        };
    },

    // Description: This method allows a "partial" CFI to be used to reference a target in a content document, without a 
    //   package document CFI component. 
    // Arguments: {
    //     contentDocumentCFI : This is a partial CFI that represents a path in a content document only. This partial must be 
    //        syntactically valid, even though it references a path starting at the top of a content document (which is a CFI that
    //        that has no defined meaning in the spec.)
    //     contentDocument : A DOM representation of the content document to which the partial CFI refers. 
    // }
    // Rationale: This method exists to meet the requirements of the Readium-SDK and should be used with care
    getTargetElementWithPartialCFI : function (contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(contentDocumentCFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        
        // Interpret the path node 
        var $currElement = this.interpretIndexStepNode(CFIAST.cfiString.path, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Return the element at the end of the CFI
        return $currElement;        
    },

    // Description: This method allows a "partial" CFI to be used, with a content document, to return the text node and offset 
    //    referenced by the partial CFI.
    // Arguments: {
    //     contentDocumentCFI : This is a partial CFI that represents a path in a content document only. This partial must be 
    //        syntactically valid, even though it references a path starting at the top of a content document (which is a CFI that
    //        that has no defined meaning in the spec.)
    //     contentDocument : A DOM representation of the content document to which the partial CFI refers. 
    // }
    // Rationale: This method exists to meet the requirements of the Readium-SDK and should be used with care
    getTextTerminusInfoWithPartialCFI : function (contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(contentDocumentCFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var textOffset;
        
        // Interpret the path node 
        var $currElement = this.interpretIndexStepNode(CFIAST.cfiString.path, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Return the element at the end of the CFI
        textOffset = parseInt(CFIAST.cfiString.localPath.termStep.offsetValue);
        return { textNode : $currElement,
                 textOffset : textOffset
            };
    },

    // ------------------------------------------------------------------------------------ //
    //  "PRIVATE" HELPERS                                                                   //
    // ------------------------------------------------------------------------------------ //

    getFirstIndirectionStepNum : function (CFIAST) {

        // Find the first indirection step in the local path; follow it like a regular step, as the step in the content document it 
        //   references is already loaded and has been passed to this method
        var stepNum = 0;
        for (stepNum; stepNum <= CFIAST.cfiString.localPath.steps.length - 1 ; stepNum++) {
        
            nextStepNode = CFIAST.cfiString.localPath.steps[stepNum];
            if (nextStepNode.type === "indirectionStep") {
                return stepNum;
            }
        }
    },

    // REFACTORING CANDIDATE: cfiString node and start step num could be merged into one argument, by simply passing the 
    //   starting step... probably a good idea, this would make the meaning of this method clearer.
    interpretLocalPath : function (localPathNode, startStepNum, $currElement, classBlacklist, elementBlacklist, idBlacklist) {

        var stepNum = startStepNum;
        var nextStepNode;
        for (stepNum; stepNum <= localPathNode.steps.length - 1 ; stepNum++) {
        
            nextStepNode = localPathNode.steps[stepNum];
            if (nextStepNode.type === "indexStep") {

                $currElement = this.interpretIndexStepNode(nextStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist);
            }
            else if (nextStepNode.type === "indirectionStep") {

                $currElement = this.interpretIndirectionStepNode(nextStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist);
            }
        }

        return $currElement;
    },

    interpretIndexStepNode : function (indexStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist) {

        // Check node type; throw error if wrong type
        if (indexStepNode === undefined || indexStepNode.type !== "indexStep") {

            throw NodeTypeError(indexStepNode, "expected index step node");
        }

        // Index step
        var $stepTarget = Instructions.getNextNode(indexStepNode.stepLength, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Check the id assertion, if it exists
        if (indexStepNode.idAssertion) {

            if (!Instructions.targetIdMatchesIdAssertion($stepTarget, indexStepNode.idAssertion)) {

                throw CFIAssertionError(indexStepNode.idAssertion, $stepTarget.attr('id'), "Id assertion failed");
            }
        }

        return $stepTarget;
    },

    interpretIndirectionStepNode : function (indirectionStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist) {

        // Check node type; throw error if wrong type
        if (indirectionStepNode === undefined || indirectionStepNode.type !== "indirectionStep") {

            throw NodeTypeError(indirectionStepNode, "expected indirection step node");
        }

        // Indirection step
        var $stepTarget = Instructions.followIndirectionStep(
            indirectionStepNode.stepLength, 
            $currElement, 
            classBlacklist, 
            elementBlacklist);

        // Check the id assertion, if it exists
        if (indirectionStepNode.idAssertion) {

            if (!Instructions.targetIdMatchesIdAssertion($stepTarget, indirectionStepNode.idAssertion)) {

                throw CFIAssertionError(indirectionStepNode.idAssertion, $stepTarget.attr('id'), "Id assertion failed");
            }
        }

        return $stepTarget;
    },

    // REFACTORING CANDIDATE: The logic here assumes that a user will always want to use this terminus
    //   to inject content into the found node. This will not always be the case, and different types of interpretation
    //   are probably desired. 
    interpretTextTerminusNode : function (terminusNode, $currElement, elementToInject) {

        if (terminusNode === undefined || terminusNode.type !== "textTerminus") {

            throw NodeTypeError(terminusNode, "expected text terminus node");
        }

        var $injectedElement = Instructions.textTermination(
            $currElement, 
            terminusNode.offsetValue, 
            elementToInject
            );

        return $injectedElement;
    },

    searchLocalPathForHref : function ($currElement, $packageDocument, localPathNode, classBlacklist, elementBlacklist, idBlacklist) {

        // Interpret the first local_path node, which is a set of steps and and a terminus condition
        var stepNum = 0;
        var nextStepNode;
        for (stepNum = 0 ; stepNum <= localPathNode.steps.length - 1 ; stepNum++) {
        
            nextStepNode = localPathNode.steps[stepNum];
            if (nextStepNode.type === "indexStep") {
                
                $currElement = this.interpretIndexStepNode(nextStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist);
            }
            else if (nextStepNode.type === "indirectionStep") {

                $currElement = this.interpretIndirectionStepNode(nextStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist);
            }

            // Found the content document href referenced by the spine item 
            if ($currElement.is("itemref")) {

                return Instructions.retrieveItemRefHref($currElement, $packageDocument);
            }
        }

        return undefined;
    }
};

module.exports = Interpreter

},{"./errors/cfi-assertion":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/cfi-assertion.js","./errors/node-type":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/errors/node-type.js","./instructions":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/instructions.js","./parser":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/parser.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/parser.js":[function(require,module,exports){
// Thin wrapper around the parser's generated file
module.exports = require('../parser/epub-cfi.js')

},{"../parser/epub-cfi.js":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/parser/epub-cfi.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js":[function(require,module,exports){
/*!
 * jQuery JavaScript Library v2.1.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-18T15:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.3",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/rangy/lib/rangy-core.js":[function(require,module,exports){
/**
 * Rangy, a cross-browser JavaScript range and selection library
 * https://github.com/timdown/rangy
 *
 * Copyright 2015, Tim Down
 * Licensed under the MIT license.
 * Version: 1.3.0-beta.1
 * Build date: 12 February 2015
 */

(function(factory, root) {
    if (typeof define == "function" && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof module != "undefined" && typeof exports == "object") {
        // Node/CommonJS style
        module.exports = factory();
    } else {
        // No AMD or CommonJS support so we place Rangy in (probably) the global variable
        root.rangy = factory();
    }
})(function() {

    var OBJECT = "object", FUNCTION = "function", UNDEFINED = "undefined";

    // Minimal set of properties required for DOM Level 2 Range compliance. Comparison constants such as START_TO_START
    // are omitted because ranges in KHTML do not have them but otherwise work perfectly well. See issue 113.
    var domRangeProperties = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed",
        "commonAncestorContainer"];

    // Minimal set of methods required for DOM Level 2 Range compliance
    var domRangeMethods = ["setStart", "setStartBefore", "setStartAfter", "setEnd", "setEndBefore",
        "setEndAfter", "collapse", "selectNode", "selectNodeContents", "compareBoundaryPoints", "deleteContents",
        "extractContents", "cloneContents", "insertNode", "surroundContents", "cloneRange", "toString", "detach"];

    var textRangeProperties = ["boundingHeight", "boundingLeft", "boundingTop", "boundingWidth", "htmlText", "text"];

    // Subset of TextRange's full set of methods that we're interested in
    var textRangeMethods = ["collapse", "compareEndPoints", "duplicate", "moveToElementText", "parentElement", "select",
        "setEndPoint", "getBoundingClientRect"];

    /*----------------------------------------------------------------------------------------------------------------*/

    // Trio of functions taken from Peter Michaux's article:
    // http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting
    function isHostMethod(o, p) {
        var t = typeof o[p];
        return t == FUNCTION || (!!(t == OBJECT && o[p])) || t == "unknown";
    }

    function isHostObject(o, p) {
        return !!(typeof o[p] == OBJECT && o[p]);
    }

    function isHostProperty(o, p) {
        return typeof o[p] != UNDEFINED;
    }

    // Creates a convenience function to save verbose repeated calls to tests functions
    function createMultiplePropertyTest(testFunc) {
        return function(o, props) {
            var i = props.length;
            while (i--) {
                if (!testFunc(o, props[i])) {
                    return false;
                }
            }
            return true;
        };
    }

    // Next trio of functions are a convenience to save verbose repeated calls to previous two functions
    var areHostMethods = createMultiplePropertyTest(isHostMethod);
    var areHostObjects = createMultiplePropertyTest(isHostObject);
    var areHostProperties = createMultiplePropertyTest(isHostProperty);

    function isTextRange(range) {
        return range && areHostMethods(range, textRangeMethods) && areHostProperties(range, textRangeProperties);
    }

    function getBody(doc) {
        return isHostObject(doc, "body") ? doc.body : doc.getElementsByTagName("body")[0];
    }

    var forEach = [].forEach ?
        function(arr, func) {
            arr.forEach(func);
        } :
        function(arr, func) {
            for (var i = 0, len = arr.length; i < len; ++i) {
                func(arr[i], i);
            }
        };

    var modules = {};

    var isBrowser = (typeof window != UNDEFINED && typeof document != UNDEFINED);

    var util = {
        isHostMethod: isHostMethod,
        isHostObject: isHostObject,
        isHostProperty: isHostProperty,
        areHostMethods: areHostMethods,
        areHostObjects: areHostObjects,
        areHostProperties: areHostProperties,
        isTextRange: isTextRange,
        getBody: getBody,
        forEach: forEach
    };

    var api = {
        version: "1.3.0-beta.1",
        initialized: false,
        isBrowser: isBrowser,
        supported: true,
        util: util,
        features: {},
        modules: modules,
        config: {
            alertOnFail: true,
            alertOnWarn: false,
            preferTextRange: false,
            autoInitialize: (typeof rangyAutoInitialize == UNDEFINED) ? true : rangyAutoInitialize
        }
    };

    function consoleLog(msg) {
        if (typeof console != UNDEFINED && isHostMethod(console, "log")) {
            console.log(msg);
        }
    }

    function alertOrLog(msg, shouldAlert) {
        if (isBrowser && shouldAlert) {
            alert(msg);
        } else  {
            consoleLog(msg);
        }
    }

    function fail(reason) {
        api.initialized = true;
        api.supported = false;
        alertOrLog("Rangy is not supported in this environment. Reason: " + reason, api.config.alertOnFail);
    }

    api.fail = fail;

    function warn(msg) {
        alertOrLog("Rangy warning: " + msg, api.config.alertOnWarn);
    }

    api.warn = warn;

    // Add utility extend() method
    var extend;
    if ({}.hasOwnProperty) {
        util.extend = extend = function(obj, props, deep) {
            var o, p;
            for (var i in props) {
                if (props.hasOwnProperty(i)) {
                    o = obj[i];
                    p = props[i];
                    if (deep && o !== null && typeof o == "object" && p !== null && typeof p == "object") {
                        extend(o, p, true);
                    }
                    obj[i] = p;
                }
            }
            // Special case for toString, which does not show up in for...in loops in IE <= 8
            if (props.hasOwnProperty("toString")) {
                obj.toString = props.toString;
            }
            return obj;
        };

        util.createOptions = function(optionsParam, defaults) {
            var options = {};
            extend(options, defaults);
            if (optionsParam) {
                extend(options, optionsParam);
            }
            return options;
        };
    } else {
        fail("hasOwnProperty not supported");
    }

    // Test whether we're in a browser and bail out if not
    if (!isBrowser) {
        fail("Rangy can only run in a browser");
    }

    // Test whether Array.prototype.slice can be relied on for NodeLists and use an alternative toArray() if not
    (function() {
        var toArray;

        if (isBrowser) {
            var el = document.createElement("div");
            el.appendChild(document.createElement("span"));
            var slice = [].slice;
            try {
                if (slice.call(el.childNodes, 0)[0].nodeType == 1) {
                    toArray = function(arrayLike) {
                        return slice.call(arrayLike, 0);
                    };
                }
            } catch (e) {}
        }

        if (!toArray) {
            toArray = function(arrayLike) {
                var arr = [];
                for (var i = 0, len = arrayLike.length; i < len; ++i) {
                    arr[i] = arrayLike[i];
                }
                return arr;
            };
        }

        util.toArray = toArray;
    })();

    // Very simple event handler wrapper function that doesn't attempt to solve issues such as "this" handling or
    // normalization of event properties
    var addListener;
    if (isBrowser) {
        if (isHostMethod(document, "addEventListener")) {
            addListener = function(obj, eventType, listener) {
                obj.addEventListener(eventType, listener, false);
            };
        } else if (isHostMethod(document, "attachEvent")) {
            addListener = function(obj, eventType, listener) {
                obj.attachEvent("on" + eventType, listener);
            };
        } else {
            fail("Document does not have required addEventListener or attachEvent method");
        }

        util.addListener = addListener;
    }

    var initListeners = [];

    function getErrorDesc(ex) {
        return ex.message || ex.description || String(ex);
    }

    // Initialization
    function init() {
        if (!isBrowser || api.initialized) {
            return;
        }
        var testRange;
        var implementsDomRange = false, implementsTextRange = false;

        // First, perform basic feature tests

        if (isHostMethod(document, "createRange")) {
            testRange = document.createRange();
            if (areHostMethods(testRange, domRangeMethods) && areHostProperties(testRange, domRangeProperties)) {
                implementsDomRange = true;
            }
        }

        var body = getBody(document);
        if (!body || body.nodeName.toLowerCase() != "body") {
            fail("No body element found");
            return;
        }

        if (body && isHostMethod(body, "createTextRange")) {
            testRange = body.createTextRange();
            if (isTextRange(testRange)) {
                implementsTextRange = true;
            }
        }

        if (!implementsDomRange && !implementsTextRange) {
            fail("Neither Range nor TextRange are available");
            return;
        }

        api.initialized = true;
        api.features = {
            implementsDomRange: implementsDomRange,
            implementsTextRange: implementsTextRange
        };

        // Initialize modules
        var module, errorMessage;
        for (var moduleName in modules) {
            if ( (module = modules[moduleName]) instanceof Module ) {
                module.init(module, api);
            }
        }

        // Call init listeners
        for (var i = 0, len = initListeners.length; i < len; ++i) {
            try {
                initListeners[i](api);
            } catch (ex) {
                errorMessage = "Rangy init listener threw an exception. Continuing. Detail: " + getErrorDesc(ex);
                consoleLog(errorMessage);
            }
        }
    }

    // Allow external scripts to initialize this library in case it's loaded after the document has loaded
    api.init = init;

    // Execute listener immediately if already initialized
    api.addInitListener = function(listener) {
        if (api.initialized) {
            listener(api);
        } else {
            initListeners.push(listener);
        }
    };

    var shimListeners = [];

    api.addShimListener = function(listener) {
        shimListeners.push(listener);
    };

    function shim(win) {
        win = win || window;
        init();

        // Notify listeners
        for (var i = 0, len = shimListeners.length; i < len; ++i) {
            shimListeners[i](win);
        }
    }

    if (isBrowser) {
        api.shim = api.createMissingNativeApi = shim;
    }

    function Module(name, dependencies, initializer) {
        this.name = name;
        this.dependencies = dependencies;
        this.initialized = false;
        this.supported = false;
        this.initializer = initializer;
    }

    Module.prototype = {
        init: function() {
            var requiredModuleNames = this.dependencies || [];
            for (var i = 0, len = requiredModuleNames.length, requiredModule, moduleName; i < len; ++i) {
                moduleName = requiredModuleNames[i];

                requiredModule = modules[moduleName];
                if (!requiredModule || !(requiredModule instanceof Module)) {
                    throw new Error("required module '" + moduleName + "' not found");
                }

                requiredModule.init();

                if (!requiredModule.supported) {
                    throw new Error("required module '" + moduleName + "' not supported");
                }
            }

            // Now run initializer
            this.initializer(this);
        },

        fail: function(reason) {
            this.initialized = true;
            this.supported = false;
            throw new Error("Module '" + this.name + "' failed to load: " + reason);
        },

        warn: function(msg) {
            api.warn("Module " + this.name + ": " + msg);
        },

        deprecationNotice: function(deprecated, replacement) {
            api.warn("DEPRECATED: " + deprecated + " in module " + this.name + "is deprecated. Please use " +
                replacement + " instead");
        },

        createError: function(msg) {
            return new Error("Error in Rangy " + this.name + " module: " + msg);
        }
    };

    function createModule(name, dependencies, initFunc) {
        var newModule = new Module(name, dependencies, function(module) {
            if (!module.initialized) {
                module.initialized = true;
                try {
                    initFunc(api, module);
                    module.supported = true;
                } catch (ex) {
                    var errorMessage = "Module '" + name + "' failed to load: " + getErrorDesc(ex);
                    consoleLog(errorMessage);
                    if (ex.stack) {
                        consoleLog(ex.stack);
                    }
                }
            }
        });
        modules[name] = newModule;
        return newModule;
    }

    api.createModule = function(name) {
        // Allow 2 or 3 arguments (second argument is an optional array of dependencies)
        var initFunc, dependencies;
        if (arguments.length == 2) {
            initFunc = arguments[1];
            dependencies = [];
        } else {
            initFunc = arguments[2];
            dependencies = arguments[1];
        }

        var module = createModule(name, dependencies, initFunc);

        // Initialize the module immediately if the core is already initialized
        if (api.initialized && api.supported) {
            module.init();
        }
    };

    api.createCoreModule = function(name, dependencies, initFunc) {
        createModule(name, dependencies, initFunc);
    };

    /*----------------------------------------------------------------------------------------------------------------*/

    // Ensure rangy.rangePrototype and rangy.selectionPrototype are available immediately

    function RangePrototype() {}
    api.RangePrototype = RangePrototype;
    api.rangePrototype = new RangePrototype();

    function SelectionPrototype() {}
    api.selectionPrototype = new SelectionPrototype();

    /*----------------------------------------------------------------------------------------------------------------*/

    // DOM utility methods used by Rangy
    api.createCoreModule("DomUtil", [], function(api, module) {
        var UNDEF = "undefined";
        var util = api.util;

        // Perform feature tests
        if (!util.areHostMethods(document, ["createDocumentFragment", "createElement", "createTextNode"])) {
            module.fail("document missing a Node creation method");
        }

        if (!util.isHostMethod(document, "getElementsByTagName")) {
            module.fail("document missing getElementsByTagName method");
        }

        var el = document.createElement("div");
        if (!util.areHostMethods(el, ["insertBefore", "appendChild", "cloneNode"] ||
                !util.areHostObjects(el, ["previousSibling", "nextSibling", "childNodes", "parentNode"]))) {
            module.fail("Incomplete Element implementation");
        }

        // innerHTML is required for Range's createContextualFragment method
        if (!util.isHostProperty(el, "innerHTML")) {
            module.fail("Element is missing innerHTML property");
        }

        var textNode = document.createTextNode("test");
        if (!util.areHostMethods(textNode, ["splitText", "deleteData", "insertData", "appendData", "cloneNode"] ||
                !util.areHostObjects(el, ["previousSibling", "nextSibling", "childNodes", "parentNode"]) ||
                !util.areHostProperties(textNode, ["data"]))) {
            module.fail("Incomplete Text Node implementation");
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // Removed use of indexOf because of a bizarre bug in Opera that is thrown in one of the Acid3 tests. I haven't been
        // able to replicate it outside of the test. The bug is that indexOf returns -1 when called on an Array that
        // contains just the document as a single element and the value searched for is the document.
        var arrayContains = /*Array.prototype.indexOf ?
            function(arr, val) {
                return arr.indexOf(val) > -1;
            }:*/

            function(arr, val) {
                var i = arr.length;
                while (i--) {
                    if (arr[i] === val) {
                        return true;
                    }
                }
                return false;
            };

        // Opera 11 puts HTML elements in the null namespace, it seems, and IE 7 has undefined namespaceURI
        function isHtmlNamespace(node) {
            var ns;
            return typeof node.namespaceURI == UNDEF || ((ns = node.namespaceURI) === null || ns == "http://www.w3.org/1999/xhtml");
        }

        function parentElement(node) {
            var parent = node.parentNode;
            return (parent.nodeType == 1) ? parent : null;
        }

        function getNodeIndex(node) {
            var i = 0;
            while( (node = node.previousSibling) ) {
                ++i;
            }
            return i;
        }

        function getNodeLength(node) {
            switch (node.nodeType) {
                case 7:
                case 10:
                    return 0;
                case 3:
                case 8:
                    return node.length;
                default:
                    return node.childNodes.length;
            }
        }

        function getCommonAncestor(node1, node2) {
            var ancestors = [], n;
            for (n = node1; n; n = n.parentNode) {
                ancestors.push(n);
            }

            for (n = node2; n; n = n.parentNode) {
                if (arrayContains(ancestors, n)) {
                    return n;
                }
            }

            return null;
        }

        function isAncestorOf(ancestor, descendant, selfIsAncestor) {
            var n = selfIsAncestor ? descendant : descendant.parentNode;
            while (n) {
                if (n === ancestor) {
                    return true;
                } else {
                    n = n.parentNode;
                }
            }
            return false;
        }

        function isOrIsAncestorOf(ancestor, descendant) {
            return isAncestorOf(ancestor, descendant, true);
        }

        function getClosestAncestorIn(node, ancestor, selfIsAncestor) {
            var p, n = selfIsAncestor ? node : node.parentNode;
            while (n) {
                p = n.parentNode;
                if (p === ancestor) {
                    return n;
                }
                n = p;
            }
            return null;
        }

        function isCharacterDataNode(node) {
            var t = node.nodeType;
            return t == 3 || t == 4 || t == 8 ; // Text, CDataSection or Comment
        }

        function isTextOrCommentNode(node) {
            if (!node) {
                return false;
            }
            var t = node.nodeType;
            return t == 3 || t == 8 ; // Text or Comment
        }

        function insertAfter(node, precedingNode) {
            var nextNode = precedingNode.nextSibling, parent = precedingNode.parentNode;
            if (nextNode) {
                parent.insertBefore(node, nextNode);
            } else {
                parent.appendChild(node);
            }
            return node;
        }

        // Note that we cannot use splitText() because it is bugridden in IE 9.
        function splitDataNode(node, index, positionsToPreserve) {
            var newNode = node.cloneNode(false);
            newNode.deleteData(0, index);
            node.deleteData(index, node.length - index);
            insertAfter(newNode, node);

            // Preserve positions
            if (positionsToPreserve) {
                for (var i = 0, position; position = positionsToPreserve[i++]; ) {
                    // Handle case where position was inside the portion of node after the split point
                    if (position.node == node && position.offset > index) {
                        position.node = newNode;
                        position.offset -= index;
                    }
                    // Handle the case where the position is a node offset within node's parent
                    else if (position.node == node.parentNode && position.offset > getNodeIndex(node)) {
                        ++position.offset;
                    }
                }
            }
            return newNode;
        }

        function getDocument(node) {
            if (node.nodeType == 9) {
                return node;
            } else if (typeof node.ownerDocument != UNDEF) {
                return node.ownerDocument;
            } else if (typeof node.document != UNDEF) {
                return node.document;
            } else if (node.parentNode) {
                return getDocument(node.parentNode);
            } else {
                throw module.createError("getDocument: no document found for node");
            }
        }

        function getWindow(node) {
            var doc = getDocument(node);
            if (typeof doc.defaultView != UNDEF) {
                return doc.defaultView;
            } else if (typeof doc.parentWindow != UNDEF) {
                return doc.parentWindow;
            } else {
                throw module.createError("Cannot get a window object for node");
            }
        }

        function getIframeDocument(iframeEl) {
            if (typeof iframeEl.contentDocument != UNDEF) {
                return iframeEl.contentDocument;
            } else if (typeof iframeEl.contentWindow != UNDEF) {
                return iframeEl.contentWindow.document;
            } else {
                throw module.createError("getIframeDocument: No Document object found for iframe element");
            }
        }

        function getIframeWindow(iframeEl) {
            if (typeof iframeEl.contentWindow != UNDEF) {
                return iframeEl.contentWindow;
            } else if (typeof iframeEl.contentDocument != UNDEF) {
                return iframeEl.contentDocument.defaultView;
            } else {
                throw module.createError("getIframeWindow: No Window object found for iframe element");
            }
        }

        // This looks bad. Is it worth it?
        function isWindow(obj) {
            return obj && util.isHostMethod(obj, "setTimeout") && util.isHostObject(obj, "document");
        }

        function getContentDocument(obj, module, methodName) {
            var doc;

            if (!obj) {
                doc = document;
            }

            // Test if a DOM node has been passed and obtain a document object for it if so
            else if (util.isHostProperty(obj, "nodeType")) {
                doc = (obj.nodeType == 1 && obj.tagName.toLowerCase() == "iframe") ?
                    getIframeDocument(obj) : getDocument(obj);
            }

            // Test if the doc parameter appears to be a Window object
            else if (isWindow(obj)) {
                doc = obj.document;
            }

            if (!doc) {
                throw module.createError(methodName + "(): Parameter must be a Window object or DOM node");
            }

            return doc;
        }

        function getRootContainer(node) {
            var parent;
            while ( (parent = node.parentNode) ) {
                node = parent;
            }
            return node;
        }

        function comparePoints(nodeA, offsetA, nodeB, offsetB) {
            // See http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Comparing
            var nodeC, root, childA, childB, n;
            if (nodeA == nodeB) {
                // Case 1: nodes are the same
                return offsetA === offsetB ? 0 : (offsetA < offsetB) ? -1 : 1;
            } else if ( (nodeC = getClosestAncestorIn(nodeB, nodeA, true)) ) {
                // Case 2: node C (container B or an ancestor) is a child node of A
                return offsetA <= getNodeIndex(nodeC) ? -1 : 1;
            } else if ( (nodeC = getClosestAncestorIn(nodeA, nodeB, true)) ) {
                // Case 3: node C (container A or an ancestor) is a child node of B
                return getNodeIndex(nodeC) < offsetB  ? -1 : 1;
            } else {
                root = getCommonAncestor(nodeA, nodeB);
                if (!root) {
                    throw new Error("comparePoints error: nodes have no common ancestor");
                }

                // Case 4: containers are siblings or descendants of siblings
                childA = (nodeA === root) ? root : getClosestAncestorIn(nodeA, root, true);
                childB = (nodeB === root) ? root : getClosestAncestorIn(nodeB, root, true);

                if (childA === childB) {
                    // This shouldn't be possible
                    throw module.createError("comparePoints got to case 4 and childA and childB are the same!");
                } else {
                    n = root.firstChild;
                    while (n) {
                        if (n === childA) {
                            return -1;
                        } else if (n === childB) {
                            return 1;
                        }
                        n = n.nextSibling;
                    }
                }
            }
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // Test for IE's crash (IE 6/7) or exception (IE >= 8) when a reference to garbage-collected text node is queried
        var crashyTextNodes = false;

        function isBrokenNode(node) {
            var n;
            try {
                n = node.parentNode;
                return false;
            } catch (e) {
                return true;
            }
        }

        (function() {
            var el = document.createElement("b");
            el.innerHTML = "1";
            var textNode = el.firstChild;
            el.innerHTML = "<br />";
            crashyTextNodes = isBrokenNode(textNode);

            api.features.crashyTextNodes = crashyTextNodes;
        })();

        /*----------------------------------------------------------------------------------------------------------------*/

        function inspectNode(node) {
            if (!node) {
                return "[No node]";
            }
            if (crashyTextNodes && isBrokenNode(node)) {
                return "[Broken node]";
            }
            if (isCharacterDataNode(node)) {
                return '"' + node.data + '"';
            }
            if (node.nodeType == 1) {
                var idAttr = node.id ? ' id="' + node.id + '"' : "";
                return "<" + node.nodeName + idAttr + ">[index:" + getNodeIndex(node) + ",length:" + node.childNodes.length + "][" + (node.innerHTML || "[innerHTML not supported]").slice(0, 25) + "]";
            }
            return node.nodeName;
        }

        function fragmentFromNodeChildren(node) {
            var fragment = getDocument(node).createDocumentFragment(), child;
            while ( (child = node.firstChild) ) {
                fragment.appendChild(child);
            }
            return fragment;
        }

        var getComputedStyleProperty;
        if (typeof window.getComputedStyle != UNDEF) {
            getComputedStyleProperty = function(el, propName) {
                return getWindow(el).getComputedStyle(el, null)[propName];
            };
        } else if (typeof document.documentElement.currentStyle != UNDEF) {
            getComputedStyleProperty = function(el, propName) {
                return el.currentStyle[propName];
            };
        } else {
            module.fail("No means of obtaining computed style properties found");
        }

        function NodeIterator(root) {
            this.root = root;
            this._next = root;
        }

        NodeIterator.prototype = {
            _current: null,

            hasNext: function() {
                return !!this._next;
            },

            next: function() {
                var n = this._current = this._next;
                var child, next;
                if (this._current) {
                    child = n.firstChild;
                    if (child) {
                        this._next = child;
                    } else {
                        next = null;
                        while ((n !== this.root) && !(next = n.nextSibling)) {
                            n = n.parentNode;
                        }
                        this._next = next;
                    }
                }
                return this._current;
            },

            detach: function() {
                this._current = this._next = this.root = null;
            }
        };

        function createIterator(root) {
            return new NodeIterator(root);
        }

        function DomPosition(node, offset) {
            this.node = node;
            this.offset = offset;
        }

        DomPosition.prototype = {
            equals: function(pos) {
                return !!pos && this.node === pos.node && this.offset == pos.offset;
            },

            inspect: function() {
                return "[DomPosition(" + inspectNode(this.node) + ":" + this.offset + ")]";
            },

            toString: function() {
                return this.inspect();
            }
        };

        function DOMException(codeName) {
            this.code = this[codeName];
            this.codeName = codeName;
            this.message = "DOMException: " + this.codeName;
        }

        DOMException.prototype = {
            INDEX_SIZE_ERR: 1,
            HIERARCHY_REQUEST_ERR: 3,
            WRONG_DOCUMENT_ERR: 4,
            NO_MODIFICATION_ALLOWED_ERR: 7,
            NOT_FOUND_ERR: 8,
            NOT_SUPPORTED_ERR: 9,
            INVALID_STATE_ERR: 11,
            INVALID_NODE_TYPE_ERR: 24
        };

        DOMException.prototype.toString = function() {
            return this.message;
        };

        api.dom = {
            arrayContains: arrayContains,
            isHtmlNamespace: isHtmlNamespace,
            parentElement: parentElement,
            getNodeIndex: getNodeIndex,
            getNodeLength: getNodeLength,
            getCommonAncestor: getCommonAncestor,
            isAncestorOf: isAncestorOf,
            isOrIsAncestorOf: isOrIsAncestorOf,
            getClosestAncestorIn: getClosestAncestorIn,
            isCharacterDataNode: isCharacterDataNode,
            isTextOrCommentNode: isTextOrCommentNode,
            insertAfter: insertAfter,
            splitDataNode: splitDataNode,
            getDocument: getDocument,
            getWindow: getWindow,
            getIframeWindow: getIframeWindow,
            getIframeDocument: getIframeDocument,
            getBody: util.getBody,
            isWindow: isWindow,
            getContentDocument: getContentDocument,
            getRootContainer: getRootContainer,
            comparePoints: comparePoints,
            isBrokenNode: isBrokenNode,
            inspectNode: inspectNode,
            getComputedStyleProperty: getComputedStyleProperty,
            fragmentFromNodeChildren: fragmentFromNodeChildren,
            createIterator: createIterator,
            DomPosition: DomPosition
        };

        api.DOMException = DOMException;
    });

    /*----------------------------------------------------------------------------------------------------------------*/

    // Pure JavaScript implementation of DOM Range
    api.createCoreModule("DomRange", ["DomUtil"], function(api, module) {
        var dom = api.dom;
        var util = api.util;
        var DomPosition = dom.DomPosition;
        var DOMException = api.DOMException;

        var isCharacterDataNode = dom.isCharacterDataNode;
        var getNodeIndex = dom.getNodeIndex;
        var isOrIsAncestorOf = dom.isOrIsAncestorOf;
        var getDocument = dom.getDocument;
        var comparePoints = dom.comparePoints;
        var splitDataNode = dom.splitDataNode;
        var getClosestAncestorIn = dom.getClosestAncestorIn;
        var getNodeLength = dom.getNodeLength;
        var arrayContains = dom.arrayContains;
        var getRootContainer = dom.getRootContainer;
        var crashyTextNodes = api.features.crashyTextNodes;

        /*----------------------------------------------------------------------------------------------------------------*/

        // Utility functions

        function isNonTextPartiallySelected(node, range) {
            return (node.nodeType != 3) &&
                   (isOrIsAncestorOf(node, range.startContainer) || isOrIsAncestorOf(node, range.endContainer));
        }

        function getRangeDocument(range) {
            return range.document || getDocument(range.startContainer);
        }

        function getBoundaryBeforeNode(node) {
            return new DomPosition(node.parentNode, getNodeIndex(node));
        }

        function getBoundaryAfterNode(node) {
            return new DomPosition(node.parentNode, getNodeIndex(node) + 1);
        }

        function insertNodeAtPosition(node, n, o) {
            var firstNodeInserted = node.nodeType == 11 ? node.firstChild : node;
            if (isCharacterDataNode(n)) {
                if (o == n.length) {
                    dom.insertAfter(node, n);
                } else {
                    n.parentNode.insertBefore(node, o == 0 ? n : splitDataNode(n, o));
                }
            } else if (o >= n.childNodes.length) {
                n.appendChild(node);
            } else {
                n.insertBefore(node, n.childNodes[o]);
            }
            return firstNodeInserted;
        }

        function rangesIntersect(rangeA, rangeB, touchingIsIntersecting) {
            assertRangeValid(rangeA);
            assertRangeValid(rangeB);

            if (getRangeDocument(rangeB) != getRangeDocument(rangeA)) {
                throw new DOMException("WRONG_DOCUMENT_ERR");
            }

            var startComparison = comparePoints(rangeA.startContainer, rangeA.startOffset, rangeB.endContainer, rangeB.endOffset),
                endComparison = comparePoints(rangeA.endContainer, rangeA.endOffset, rangeB.startContainer, rangeB.startOffset);

            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;
        }

        function cloneSubtree(iterator) {
            var partiallySelected;
            for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {
                partiallySelected = iterator.isPartiallySelectedSubtree();
                node = node.cloneNode(!partiallySelected);
                if (partiallySelected) {
                    subIterator = iterator.getSubtreeIterator();
                    node.appendChild(cloneSubtree(subIterator));
                    subIterator.detach();
                }

                if (node.nodeType == 10) { // DocumentType
                    throw new DOMException("HIERARCHY_REQUEST_ERR");
                }
                frag.appendChild(node);
            }
            return frag;
        }

        function iterateSubtree(rangeIterator, func, iteratorState) {
            var it, n;
            iteratorState = iteratorState || { stop: false };
            for (var node, subRangeIterator; node = rangeIterator.next(); ) {
                if (rangeIterator.isPartiallySelectedSubtree()) {
                    if (func(node) === false) {
                        iteratorState.stop = true;
                        return;
                    } else {
                        // The node is partially selected by the Range, so we can use a new RangeIterator on the portion of
                        // the node selected by the Range.
                        subRangeIterator = rangeIterator.getSubtreeIterator();
                        iterateSubtree(subRangeIterator, func, iteratorState);
                        subRangeIterator.detach();
                        if (iteratorState.stop) {
                            return;
                        }
                    }
                } else {
                    // The whole node is selected, so we can use efficient DOM iteration to iterate over the node and its
                    // descendants
                    it = dom.createIterator(node);
                    while ( (n = it.next()) ) {
                        if (func(n) === false) {
                            iteratorState.stop = true;
                            return;
                        }
                    }
                }
            }
        }

        function deleteSubtree(iterator) {
            var subIterator;
            while (iterator.next()) {
                if (iterator.isPartiallySelectedSubtree()) {
                    subIterator = iterator.getSubtreeIterator();
                    deleteSubtree(subIterator);
                    subIterator.detach();
                } else {
                    iterator.remove();
                }
            }
        }

        function extractSubtree(iterator) {
            for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {

                if (iterator.isPartiallySelectedSubtree()) {
                    node = node.cloneNode(false);
                    subIterator = iterator.getSubtreeIterator();
                    node.appendChild(extractSubtree(subIterator));
                    subIterator.detach();
                } else {
                    iterator.remove();
                }
                if (node.nodeType == 10) { // DocumentType
                    throw new DOMException("HIERARCHY_REQUEST_ERR");
                }
                frag.appendChild(node);
            }
            return frag;
        }

        function getNodesInRange(range, nodeTypes, filter) {
            var filterNodeTypes = !!(nodeTypes && nodeTypes.length), regex;
            var filterExists = !!filter;
            if (filterNodeTypes) {
                regex = new RegExp("^(" + nodeTypes.join("|") + ")$");
            }

            var nodes = [];
            iterateSubtree(new RangeIterator(range, false), function(node) {
                if (filterNodeTypes && !regex.test(node.nodeType)) {
                    return;
                }
                if (filterExists && !filter(node)) {
                    return;
                }
                // Don't include a boundary container if it is a character data node and the range does not contain any
                // of its character data. See issue 190.
                var sc = range.startContainer;
                if (node == sc && isCharacterDataNode(sc) && range.startOffset == sc.length) {
                    return;
                }

                var ec = range.endContainer;
                if (node == ec && isCharacterDataNode(ec) && range.endOffset == 0) {
                    return;
                }

                nodes.push(node);
            });
            return nodes;
        }

        function inspect(range) {
            var name = (typeof range.getName == "undefined") ? "Range" : range.getName();
            return "[" + name + "(" + dom.inspectNode(range.startContainer) + ":" + range.startOffset + ", " +
                    dom.inspectNode(range.endContainer) + ":" + range.endOffset + ")]";
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // RangeIterator code partially borrows from IERange by Tim Ryan (http://github.com/timcameronryan/IERange)

        function RangeIterator(range, clonePartiallySelectedTextNodes) {
            this.range = range;
            this.clonePartiallySelectedTextNodes = clonePartiallySelectedTextNodes;


            if (!range.collapsed) {
                this.sc = range.startContainer;
                this.so = range.startOffset;
                this.ec = range.endContainer;
                this.eo = range.endOffset;
                var root = range.commonAncestorContainer;

                if (this.sc === this.ec && isCharacterDataNode(this.sc)) {
                    this.isSingleCharacterDataNode = true;
                    this._first = this._last = this._next = this.sc;
                } else {
                    this._first = this._next = (this.sc === root && !isCharacterDataNode(this.sc)) ?
                        this.sc.childNodes[this.so] : getClosestAncestorIn(this.sc, root, true);
                    this._last = (this.ec === root && !isCharacterDataNode(this.ec)) ?
                        this.ec.childNodes[this.eo - 1] : getClosestAncestorIn(this.ec, root, true);
                }
            }
        }

        RangeIterator.prototype = {
            _current: null,
            _next: null,
            _first: null,
            _last: null,
            isSingleCharacterDataNode: false,

            reset: function() {
                this._current = null;
                this._next = this._first;
            },

            hasNext: function() {
                return !!this._next;
            },

            next: function() {
                // Move to next node
                var current = this._current = this._next;
                if (current) {
                    this._next = (current !== this._last) ? current.nextSibling : null;

                    // Check for partially selected text nodes
                    if (isCharacterDataNode(current) && this.clonePartiallySelectedTextNodes) {
                        if (current === this.ec) {
                            (current = current.cloneNode(true)).deleteData(this.eo, current.length - this.eo);
                        }
                        if (this._current === this.sc) {
                            (current = current.cloneNode(true)).deleteData(0, this.so);
                        }
                    }
                }

                return current;
            },

            remove: function() {
                var current = this._current, start, end;

                if (isCharacterDataNode(current) && (current === this.sc || current === this.ec)) {
                    start = (current === this.sc) ? this.so : 0;
                    end = (current === this.ec) ? this.eo : current.length;
                    if (start != end) {
                        current.deleteData(start, end - start);
                    }
                } else {
                    if (current.parentNode) {
                        current.parentNode.removeChild(current);
                    } else {
                    }
                }
            },

            // Checks if the current node is partially selected
            isPartiallySelectedSubtree: function() {
                var current = this._current;
                return isNonTextPartiallySelected(current, this.range);
            },

            getSubtreeIterator: function() {
                var subRange;
                if (this.isSingleCharacterDataNode) {
                    subRange = this.range.cloneRange();
                    subRange.collapse(false);
                } else {
                    subRange = new Range(getRangeDocument(this.range));
                    var current = this._current;
                    var startContainer = current, startOffset = 0, endContainer = current, endOffset = getNodeLength(current);

                    if (isOrIsAncestorOf(current, this.sc)) {
                        startContainer = this.sc;
                        startOffset = this.so;
                    }
                    if (isOrIsAncestorOf(current, this.ec)) {
                        endContainer = this.ec;
                        endOffset = this.eo;
                    }

                    updateBoundaries(subRange, startContainer, startOffset, endContainer, endOffset);
                }
                return new RangeIterator(subRange, this.clonePartiallySelectedTextNodes);
            },

            detach: function() {
                this.range = this._current = this._next = this._first = this._last = this.sc = this.so = this.ec = this.eo = null;
            }
        };

        /*----------------------------------------------------------------------------------------------------------------*/

        var beforeAfterNodeTypes = [1, 3, 4, 5, 7, 8, 10];
        var rootContainerNodeTypes = [2, 9, 11];
        var readonlyNodeTypes = [5, 6, 10, 12];
        var insertableNodeTypes = [1, 3, 4, 5, 7, 8, 10, 11];
        var surroundNodeTypes = [1, 3, 4, 5, 7, 8];

        function createAncestorFinder(nodeTypes) {
            return function(node, selfIsAncestor) {
                var t, n = selfIsAncestor ? node : node.parentNode;
                while (n) {
                    t = n.nodeType;
                    if (arrayContains(nodeTypes, t)) {
                        return n;
                    }
                    n = n.parentNode;
                }
                return null;
            };
        }

        var getDocumentOrFragmentContainer = createAncestorFinder( [9, 11] );
        var getReadonlyAncestor = createAncestorFinder(readonlyNodeTypes);
        var getDocTypeNotationEntityAncestor = createAncestorFinder( [6, 10, 12] );

        function assertNoDocTypeNotationEntityAncestor(node, allowSelf) {
            if (getDocTypeNotationEntityAncestor(node, allowSelf)) {
                throw new DOMException("INVALID_NODE_TYPE_ERR");
            }
        }

        function assertValidNodeType(node, invalidTypes) {
            if (!arrayContains(invalidTypes, node.nodeType)) {
                throw new DOMException("INVALID_NODE_TYPE_ERR");
            }
        }

        function assertValidOffset(node, offset) {
            if (offset < 0 || offset > (isCharacterDataNode(node) ? node.length : node.childNodes.length)) {
                throw new DOMException("INDEX_SIZE_ERR");
            }
        }

        function assertSameDocumentOrFragment(node1, node2) {
            if (getDocumentOrFragmentContainer(node1, true) !== getDocumentOrFragmentContainer(node2, true)) {
                throw new DOMException("WRONG_DOCUMENT_ERR");
            }
        }

        function assertNodeNotReadOnly(node) {
            if (getReadonlyAncestor(node, true)) {
                throw new DOMException("NO_MODIFICATION_ALLOWED_ERR");
            }
        }

        function assertNode(node, codeName) {
            if (!node) {
                throw new DOMException(codeName);
            }
        }

        function isOrphan(node) {
            return (crashyTextNodes && dom.isBrokenNode(node)) ||
                !arrayContains(rootContainerNodeTypes, node.nodeType) && !getDocumentOrFragmentContainer(node, true);
        }

        function isValidOffset(node, offset) {
            return offset <= (isCharacterDataNode(node) ? node.length : node.childNodes.length);
        }

        function isRangeValid(range) {
            return (!!range.startContainer && !!range.endContainer &&
                    !isOrphan(range.startContainer) &&
                    !isOrphan(range.endContainer) &&
                    isValidOffset(range.startContainer, range.startOffset) &&
                    isValidOffset(range.endContainer, range.endOffset));
        }

        function assertRangeValid(range) {
            if (!isRangeValid(range)) {
                throw new Error("Range error: Range is no longer valid after DOM mutation (" + range.inspect() + ")");
            }
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // Test the browser's innerHTML support to decide how to implement createContextualFragment
        var styleEl = document.createElement("style");
        var htmlParsingConforms = false;
        try {
            styleEl.innerHTML = "<b>x</b>";
            htmlParsingConforms = (styleEl.firstChild.nodeType == 3); // Opera incorrectly creates an element node
        } catch (e) {
            // IE 6 and 7 throw
        }

        api.features.htmlParsingConforms = htmlParsingConforms;

        var createContextualFragment = htmlParsingConforms ?

            // Implementation as per HTML parsing spec, trusting in the browser's implementation of innerHTML. See
            // discussion and base code for this implementation at issue 67.
            // Spec: http://html5.org/specs/dom-parsing.html#extensions-to-the-range-interface
            // Thanks to Aleks Williams.
            function(fragmentStr) {
                // "Let node the context object's start's node."
                var node = this.startContainer;
                var doc = getDocument(node);

                // "If the context object's start's node is null, raise an INVALID_STATE_ERR
                // exception and abort these steps."
                if (!node) {
                    throw new DOMException("INVALID_STATE_ERR");
                }

                // "Let element be as follows, depending on node's interface:"
                // Document, Document Fragment: null
                var el = null;

                // "Element: node"
                if (node.nodeType == 1) {
                    el = node;

                // "Text, Comment: node's parentElement"
                } else if (isCharacterDataNode(node)) {
                    el = dom.parentElement(node);
                }

                // "If either element is null or element's ownerDocument is an HTML document
                // and element's local name is "html" and element's namespace is the HTML
                // namespace"
                if (el === null || (
                    el.nodeName == "HTML" &&
                    dom.isHtmlNamespace(getDocument(el).documentElement) &&
                    dom.isHtmlNamespace(el)
                )) {

                // "let element be a new Element with "body" as its local name and the HTML
                // namespace as its namespace.""
                    el = doc.createElement("body");
                } else {
                    el = el.cloneNode(false);
                }

                // "If the node's document is an HTML document: Invoke the HTML fragment parsing algorithm."
                // "If the node's document is an XML document: Invoke the XML fragment parsing algorithm."
                // "In either case, the algorithm must be invoked with fragment as the input
                // and element as the context element."
                el.innerHTML = fragmentStr;

                // "If this raises an exception, then abort these steps. Otherwise, let new
                // children be the nodes returned."

                // "Let fragment be a new DocumentFragment."
                // "Append all new children to fragment."
                // "Return fragment."
                return dom.fragmentFromNodeChildren(el);
            } :

            // In this case, innerHTML cannot be trusted, so fall back to a simpler, non-conformant implementation that
            // previous versions of Rangy used (with the exception of using a body element rather than a div)
            function(fragmentStr) {
                var doc = getRangeDocument(this);
                var el = doc.createElement("body");
                el.innerHTML = fragmentStr;

                return dom.fragmentFromNodeChildren(el);
            };

        function splitRangeBoundaries(range, positionsToPreserve) {
            assertRangeValid(range);

            var sc = range.startContainer, so = range.startOffset, ec = range.endContainer, eo = range.endOffset;
            var startEndSame = (sc === ec);

            if (isCharacterDataNode(ec) && eo > 0 && eo < ec.length) {
                splitDataNode(ec, eo, positionsToPreserve);
            }

            if (isCharacterDataNode(sc) && so > 0 && so < sc.length) {
                sc = splitDataNode(sc, so, positionsToPreserve);
                if (startEndSame) {
                    eo -= so;
                    ec = sc;
                } else if (ec == sc.parentNode && eo >= getNodeIndex(sc)) {
                    eo++;
                }
                so = 0;
            }
            range.setStartAndEnd(sc, so, ec, eo);
        }
        
        function rangeToHtml(range) {
            assertRangeValid(range);
            var container = range.commonAncestorContainer.parentNode.cloneNode(false);
            container.appendChild( range.cloneContents() );
            return container.innerHTML;
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        var rangeProperties = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed",
            "commonAncestorContainer"];

        var s2s = 0, s2e = 1, e2e = 2, e2s = 3;
        var n_b = 0, n_a = 1, n_b_a = 2, n_i = 3;

        util.extend(api.rangePrototype, {
            compareBoundaryPoints: function(how, range) {
                assertRangeValid(this);
                assertSameDocumentOrFragment(this.startContainer, range.startContainer);

                var nodeA, offsetA, nodeB, offsetB;
                var prefixA = (how == e2s || how == s2s) ? "start" : "end";
                var prefixB = (how == s2e || how == s2s) ? "start" : "end";
                nodeA = this[prefixA + "Container"];
                offsetA = this[prefixA + "Offset"];
                nodeB = range[prefixB + "Container"];
                offsetB = range[prefixB + "Offset"];
                return comparePoints(nodeA, offsetA, nodeB, offsetB);
            },

            insertNode: function(node) {
                assertRangeValid(this);
                assertValidNodeType(node, insertableNodeTypes);
                assertNodeNotReadOnly(this.startContainer);

                if (isOrIsAncestorOf(node, this.startContainer)) {
                    throw new DOMException("HIERARCHY_REQUEST_ERR");
                }

                // No check for whether the container of the start of the Range is of a type that does not allow
                // children of the type of node: the browser's DOM implementation should do this for us when we attempt
                // to add the node

                var firstNodeInserted = insertNodeAtPosition(node, this.startContainer, this.startOffset);
                this.setStartBefore(firstNodeInserted);
            },

            cloneContents: function() {
                assertRangeValid(this);

                var clone, frag;
                if (this.collapsed) {
                    return getRangeDocument(this).createDocumentFragment();
                } else {
                    if (this.startContainer === this.endContainer && isCharacterDataNode(this.startContainer)) {
                        clone = this.startContainer.cloneNode(true);
                        clone.data = clone.data.slice(this.startOffset, this.endOffset);
                        frag = getRangeDocument(this).createDocumentFragment();
                        frag.appendChild(clone);
                        return frag;
                    } else {
                        var iterator = new RangeIterator(this, true);
                        clone = cloneSubtree(iterator);
                        iterator.detach();
                    }
                    return clone;
                }
            },

            canSurroundContents: function() {
                assertRangeValid(this);
                assertNodeNotReadOnly(this.startContainer);
                assertNodeNotReadOnly(this.endContainer);

                // Check if the contents can be surrounded. Specifically, this means whether the range partially selects
                // no non-text nodes.
                var iterator = new RangeIterator(this, true);
                var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||
                        (iterator._last && isNonTextPartiallySelected(iterator._last, this)));
                iterator.detach();
                return !boundariesInvalid;
            },

            surroundContents: function(node) {
                assertValidNodeType(node, surroundNodeTypes);

                if (!this.canSurroundContents()) {
                    throw new DOMException("INVALID_STATE_ERR");
                }

                // Extract the contents
                var content = this.extractContents();

                // Clear the children of the node
                if (node.hasChildNodes()) {
                    while (node.lastChild) {
                        node.removeChild(node.lastChild);
                    }
                }

                // Insert the new node and add the extracted contents
                insertNodeAtPosition(node, this.startContainer, this.startOffset);
                node.appendChild(content);

                this.selectNode(node);
            },

            cloneRange: function() {
                assertRangeValid(this);
                var range = new Range(getRangeDocument(this));
                var i = rangeProperties.length, prop;
                while (i--) {
                    prop = rangeProperties[i];
                    range[prop] = this[prop];
                }
                return range;
            },

            toString: function() {
                assertRangeValid(this);
                var sc = this.startContainer;
                if (sc === this.endContainer && isCharacterDataNode(sc)) {
                    return (sc.nodeType == 3 || sc.nodeType == 4) ? sc.data.slice(this.startOffset, this.endOffset) : "";
                } else {
                    var textParts = [], iterator = new RangeIterator(this, true);
                    iterateSubtree(iterator, function(node) {
                        // Accept only text or CDATA nodes, not comments
                        if (node.nodeType == 3 || node.nodeType == 4) {
                            textParts.push(node.data);
                        }
                    });
                    iterator.detach();
                    return textParts.join("");
                }
            },

            // The methods below are all non-standard. The following batch were introduced by Mozilla but have since
            // been removed from Mozilla.

            compareNode: function(node) {
                assertRangeValid(this);

                var parent = node.parentNode;
                var nodeIndex = getNodeIndex(node);

                if (!parent) {
                    throw new DOMException("NOT_FOUND_ERR");
                }

                var startComparison = this.comparePoint(parent, nodeIndex),
                    endComparison = this.comparePoint(parent, nodeIndex + 1);

                if (startComparison < 0) { // Node starts before
                    return (endComparison > 0) ? n_b_a : n_b;
                } else {
                    return (endComparison > 0) ? n_a : n_i;
                }
            },

            comparePoint: function(node, offset) {
                assertRangeValid(this);
                assertNode(node, "HIERARCHY_REQUEST_ERR");
                assertSameDocumentOrFragment(node, this.startContainer);

                if (comparePoints(node, offset, this.startContainer, this.startOffset) < 0) {
                    return -1;
                } else if (comparePoints(node, offset, this.endContainer, this.endOffset) > 0) {
                    return 1;
                }
                return 0;
            },

            createContextualFragment: createContextualFragment,

            toHtml: function() {
                return rangeToHtml(this);
            },

            // touchingIsIntersecting determines whether this method considers a node that borders a range intersects
            // with it (as in WebKit) or not (as in Gecko pre-1.9, and the default)
            intersectsNode: function(node, touchingIsIntersecting) {
                assertRangeValid(this);
                assertNode(node, "NOT_FOUND_ERR");
                if (getDocument(node) !== getRangeDocument(this)) {
                    return false;
                }

                var parent = node.parentNode, offset = getNodeIndex(node);
                assertNode(parent, "NOT_FOUND_ERR");

                var startComparison = comparePoints(parent, offset, this.endContainer, this.endOffset),
                    endComparison = comparePoints(parent, offset + 1, this.startContainer, this.startOffset);

                return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;
            },

            isPointInRange: function(node, offset) {
                assertRangeValid(this);
                assertNode(node, "HIERARCHY_REQUEST_ERR");
                assertSameDocumentOrFragment(node, this.startContainer);

                return (comparePoints(node, offset, this.startContainer, this.startOffset) >= 0) &&
                       (comparePoints(node, offset, this.endContainer, this.endOffset) <= 0);
            },

            // The methods below are non-standard and invented by me.

            // Sharing a boundary start-to-end or end-to-start does not count as intersection.
            intersectsRange: function(range) {
                return rangesIntersect(this, range, false);
            },

            // Sharing a boundary start-to-end or end-to-start does count as intersection.
            intersectsOrTouchesRange: function(range) {
                return rangesIntersect(this, range, true);
            },

            intersection: function(range) {
                if (this.intersectsRange(range)) {
                    var startComparison = comparePoints(this.startContainer, this.startOffset, range.startContainer, range.startOffset),
                        endComparison = comparePoints(this.endContainer, this.endOffset, range.endContainer, range.endOffset);

                    var intersectionRange = this.cloneRange();
                    if (startComparison == -1) {
                        intersectionRange.setStart(range.startContainer, range.startOffset);
                    }
                    if (endComparison == 1) {
                        intersectionRange.setEnd(range.endContainer, range.endOffset);
                    }
                    return intersectionRange;
                }
                return null;
            },

            union: function(range) {
                if (this.intersectsOrTouchesRange(range)) {
                    var unionRange = this.cloneRange();
                    if (comparePoints(range.startContainer, range.startOffset, this.startContainer, this.startOffset) == -1) {
                        unionRange.setStart(range.startContainer, range.startOffset);
                    }
                    if (comparePoints(range.endContainer, range.endOffset, this.endContainer, this.endOffset) == 1) {
                        unionRange.setEnd(range.endContainer, range.endOffset);
                    }
                    return unionRange;
                } else {
                    throw new DOMException("Ranges do not intersect");
                }
            },

            containsNode: function(node, allowPartial) {
                if (allowPartial) {
                    return this.intersectsNode(node, false);
                } else {
                    return this.compareNode(node) == n_i;
                }
            },

            containsNodeContents: function(node) {
                return this.comparePoint(node, 0) >= 0 && this.comparePoint(node, getNodeLength(node)) <= 0;
            },

            containsRange: function(range) {
                var intersection = this.intersection(range);
                return intersection !== null && range.equals(intersection);
            },

            containsNodeText: function(node) {
                var nodeRange = this.cloneRange();
                nodeRange.selectNode(node);
                var textNodes = nodeRange.getNodes([3]);
                if (textNodes.length > 0) {
                    nodeRange.setStart(textNodes[0], 0);
                    var lastTextNode = textNodes.pop();
                    nodeRange.setEnd(lastTextNode, lastTextNode.length);
                    return this.containsRange(nodeRange);
                } else {
                    return this.containsNodeContents(node);
                }
            },

            getNodes: function(nodeTypes, filter) {
                assertRangeValid(this);
                return getNodesInRange(this, nodeTypes, filter);
            },

            getDocument: function() {
                return getRangeDocument(this);
            },

            collapseBefore: function(node) {
                this.setEndBefore(node);
                this.collapse(false);
            },

            collapseAfter: function(node) {
                this.setStartAfter(node);
                this.collapse(true);
            },
            
            getBookmark: function(containerNode) {
                var doc = getRangeDocument(this);
                var preSelectionRange = api.createRange(doc);
                containerNode = containerNode || dom.getBody(doc);
                preSelectionRange.selectNodeContents(containerNode);
                var range = this.intersection(preSelectionRange);
                var start = 0, end = 0;
                if (range) {
                    preSelectionRange.setEnd(range.startContainer, range.startOffset);
                    start = preSelectionRange.toString().length;
                    end = start + range.toString().length;
                }

                return {
                    start: start,
                    end: end,
                    containerNode: containerNode
                };
            },
            
            moveToBookmark: function(bookmark) {
                var containerNode = bookmark.containerNode;
                var charIndex = 0;
                this.setStart(containerNode, 0);
                this.collapse(true);
                var nodeStack = [containerNode], node, foundStart = false, stop = false;
                var nextCharIndex, i, childNodes;

                while (!stop && (node = nodeStack.pop())) {
                    if (node.nodeType == 3) {
                        nextCharIndex = charIndex + node.length;
                        if (!foundStart && bookmark.start >= charIndex && bookmark.start <= nextCharIndex) {
                            this.setStart(node, bookmark.start - charIndex);
                            foundStart = true;
                        }
                        if (foundStart && bookmark.end >= charIndex && bookmark.end <= nextCharIndex) {
                            this.setEnd(node, bookmark.end - charIndex);
                            stop = true;
                        }
                        charIndex = nextCharIndex;
                    } else {
                        childNodes = node.childNodes;
                        i = childNodes.length;
                        while (i--) {
                            nodeStack.push(childNodes[i]);
                        }
                    }
                }
            },

            getName: function() {
                return "DomRange";
            },

            equals: function(range) {
                return Range.rangesEqual(this, range);
            },

            isValid: function() {
                return isRangeValid(this);
            },
            
            inspect: function() {
                return inspect(this);
            },
            
            detach: function() {
                // In DOM4, detach() is now a no-op.
            }
        });

        function copyComparisonConstantsToObject(obj) {
            obj.START_TO_START = s2s;
            obj.START_TO_END = s2e;
            obj.END_TO_END = e2e;
            obj.END_TO_START = e2s;

            obj.NODE_BEFORE = n_b;
            obj.NODE_AFTER = n_a;
            obj.NODE_BEFORE_AND_AFTER = n_b_a;
            obj.NODE_INSIDE = n_i;
        }

        function copyComparisonConstants(constructor) {
            copyComparisonConstantsToObject(constructor);
            copyComparisonConstantsToObject(constructor.prototype);
        }

        function createRangeContentRemover(remover, boundaryUpdater) {
            return function() {
                assertRangeValid(this);

                var sc = this.startContainer, so = this.startOffset, root = this.commonAncestorContainer;

                var iterator = new RangeIterator(this, true);

                // Work out where to position the range after content removal
                var node, boundary;
                if (sc !== root) {
                    node = getClosestAncestorIn(sc, root, true);
                    boundary = getBoundaryAfterNode(node);
                    sc = boundary.node;
                    so = boundary.offset;
                }

                // Check none of the range is read-only
                iterateSubtree(iterator, assertNodeNotReadOnly);

                iterator.reset();

                // Remove the content
                var returnValue = remover(iterator);
                iterator.detach();

                // Move to the new position
                boundaryUpdater(this, sc, so, sc, so);

                return returnValue;
            };
        }

        function createPrototypeRange(constructor, boundaryUpdater) {
            function createBeforeAfterNodeSetter(isBefore, isStart) {
                return function(node) {
                    assertValidNodeType(node, beforeAfterNodeTypes);
                    assertValidNodeType(getRootContainer(node), rootContainerNodeTypes);

                    var boundary = (isBefore ? getBoundaryBeforeNode : getBoundaryAfterNode)(node);
                    (isStart ? setRangeStart : setRangeEnd)(this, boundary.node, boundary.offset);
                };
            }

            function setRangeStart(range, node, offset) {
                var ec = range.endContainer, eo = range.endOffset;
                if (node !== range.startContainer || offset !== range.startOffset) {
                    // Check the root containers of the range and the new boundary, and also check whether the new boundary
                    // is after the current end. In either case, collapse the range to the new position
                    if (getRootContainer(node) != getRootContainer(ec) || comparePoints(node, offset, ec, eo) == 1) {
                        ec = node;
                        eo = offset;
                    }
                    boundaryUpdater(range, node, offset, ec, eo);
                }
            }

            function setRangeEnd(range, node, offset) {
                var sc = range.startContainer, so = range.startOffset;
                if (node !== range.endContainer || offset !== range.endOffset) {
                    // Check the root containers of the range and the new boundary, and also check whether the new boundary
                    // is after the current end. In either case, collapse the range to the new position
                    if (getRootContainer(node) != getRootContainer(sc) || comparePoints(node, offset, sc, so) == -1) {
                        sc = node;
                        so = offset;
                    }
                    boundaryUpdater(range, sc, so, node, offset);
                }
            }

            // Set up inheritance
            var F = function() {};
            F.prototype = api.rangePrototype;
            constructor.prototype = new F();

            util.extend(constructor.prototype, {
                setStart: function(node, offset) {
                    assertNoDocTypeNotationEntityAncestor(node, true);
                    assertValidOffset(node, offset);

                    setRangeStart(this, node, offset);
                },

                setEnd: function(node, offset) {
                    assertNoDocTypeNotationEntityAncestor(node, true);
                    assertValidOffset(node, offset);

                    setRangeEnd(this, node, offset);
                },

                /**
                 * Convenience method to set a range's start and end boundaries. Overloaded as follows:
                 * - Two parameters (node, offset) creates a collapsed range at that position
                 * - Three parameters (node, startOffset, endOffset) creates a range contained with node starting at
                 *   startOffset and ending at endOffset
                 * - Four parameters (startNode, startOffset, endNode, endOffset) creates a range starting at startOffset in
                 *   startNode and ending at endOffset in endNode
                 */
                setStartAndEnd: function() {
                    var args = arguments;
                    var sc = args[0], so = args[1], ec = sc, eo = so;

                    switch (args.length) {
                        case 3:
                            eo = args[2];
                            break;
                        case 4:
                            ec = args[2];
                            eo = args[3];
                            break;
                    }

                    boundaryUpdater(this, sc, so, ec, eo);
                },
                
                setBoundary: function(node, offset, isStart) {
                    this["set" + (isStart ? "Start" : "End")](node, offset);
                },

                setStartBefore: createBeforeAfterNodeSetter(true, true),
                setStartAfter: createBeforeAfterNodeSetter(false, true),
                setEndBefore: createBeforeAfterNodeSetter(true, false),
                setEndAfter: createBeforeAfterNodeSetter(false, false),

                collapse: function(isStart) {
                    assertRangeValid(this);
                    if (isStart) {
                        boundaryUpdater(this, this.startContainer, this.startOffset, this.startContainer, this.startOffset);
                    } else {
                        boundaryUpdater(this, this.endContainer, this.endOffset, this.endContainer, this.endOffset);
                    }
                },

                selectNodeContents: function(node) {
                    assertNoDocTypeNotationEntityAncestor(node, true);

                    boundaryUpdater(this, node, 0, node, getNodeLength(node));
                },

                selectNode: function(node) {
                    assertNoDocTypeNotationEntityAncestor(node, false);
                    assertValidNodeType(node, beforeAfterNodeTypes);

                    var start = getBoundaryBeforeNode(node), end = getBoundaryAfterNode(node);
                    boundaryUpdater(this, start.node, start.offset, end.node, end.offset);
                },

                extractContents: createRangeContentRemover(extractSubtree, boundaryUpdater),

                deleteContents: createRangeContentRemover(deleteSubtree, boundaryUpdater),

                canSurroundContents: function() {
                    assertRangeValid(this);
                    assertNodeNotReadOnly(this.startContainer);
                    assertNodeNotReadOnly(this.endContainer);

                    // Check if the contents can be surrounded. Specifically, this means whether the range partially selects
                    // no non-text nodes.
                    var iterator = new RangeIterator(this, true);
                    var boundariesInvalid = (iterator._first && isNonTextPartiallySelected(iterator._first, this) ||
                            (iterator._last && isNonTextPartiallySelected(iterator._last, this)));
                    iterator.detach();
                    return !boundariesInvalid;
                },

                splitBoundaries: function() {
                    splitRangeBoundaries(this);
                },

                splitBoundariesPreservingPositions: function(positionsToPreserve) {
                    splitRangeBoundaries(this, positionsToPreserve);
                },

                normalizeBoundaries: function() {
                    assertRangeValid(this);

                    var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;

                    var mergeForward = function(node) {
                        var sibling = node.nextSibling;
                        if (sibling && sibling.nodeType == node.nodeType) {
                            ec = node;
                            eo = node.length;
                            node.appendData(sibling.data);
                            sibling.parentNode.removeChild(sibling);
                        }
                    };

                    var mergeBackward = function(node) {
                        var sibling = node.previousSibling;
                        if (sibling && sibling.nodeType == node.nodeType) {
                            sc = node;
                            var nodeLength = node.length;
                            so = sibling.length;
                            node.insertData(0, sibling.data);
                            sibling.parentNode.removeChild(sibling);
                            if (sc == ec) {
                                eo += so;
                                ec = sc;
                            } else if (ec == node.parentNode) {
                                var nodeIndex = getNodeIndex(node);
                                if (eo == nodeIndex) {
                                    ec = node;
                                    eo = nodeLength;
                                } else if (eo > nodeIndex) {
                                    eo--;
                                }
                            }
                        }
                    };

                    var normalizeStart = true;

                    if (isCharacterDataNode(ec)) {
                        if (ec.length == eo) {
                            mergeForward(ec);
                        }
                    } else {
                        if (eo > 0) {
                            var endNode = ec.childNodes[eo - 1];
                            if (endNode && isCharacterDataNode(endNode)) {
                                mergeForward(endNode);
                            }
                        }
                        normalizeStart = !this.collapsed;
                    }

                    if (normalizeStart) {
                        if (isCharacterDataNode(sc)) {
                            if (so == 0) {
                                mergeBackward(sc);
                            }
                        } else {
                            if (so < sc.childNodes.length) {
                                var startNode = sc.childNodes[so];
                                if (startNode && isCharacterDataNode(startNode)) {
                                    mergeBackward(startNode);
                                }
                            }
                        }
                    } else {
                        sc = ec;
                        so = eo;
                    }

                    boundaryUpdater(this, sc, so, ec, eo);
                },

                collapseToPoint: function(node, offset) {
                    assertNoDocTypeNotationEntityAncestor(node, true);
                    assertValidOffset(node, offset);
                    this.setStartAndEnd(node, offset);
                }
            });

            copyComparisonConstants(constructor);
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // Updates commonAncestorContainer and collapsed after boundary change
        function updateCollapsedAndCommonAncestor(range) {
            range.collapsed = (range.startContainer === range.endContainer && range.startOffset === range.endOffset);
            range.commonAncestorContainer = range.collapsed ?
                range.startContainer : dom.getCommonAncestor(range.startContainer, range.endContainer);
        }

        function updateBoundaries(range, startContainer, startOffset, endContainer, endOffset) {
            range.startContainer = startContainer;
            range.startOffset = startOffset;
            range.endContainer = endContainer;
            range.endOffset = endOffset;
            range.document = dom.getDocument(startContainer);

            updateCollapsedAndCommonAncestor(range);
        }

        function Range(doc) {
            this.startContainer = doc;
            this.startOffset = 0;
            this.endContainer = doc;
            this.endOffset = 0;
            this.document = doc;
            updateCollapsedAndCommonAncestor(this);
        }

        createPrototypeRange(Range, updateBoundaries);

        util.extend(Range, {
            rangeProperties: rangeProperties,
            RangeIterator: RangeIterator,
            copyComparisonConstants: copyComparisonConstants,
            createPrototypeRange: createPrototypeRange,
            inspect: inspect,
            toHtml: rangeToHtml,
            getRangeDocument: getRangeDocument,
            rangesEqual: function(r1, r2) {
                return r1.startContainer === r2.startContainer &&
                    r1.startOffset === r2.startOffset &&
                    r1.endContainer === r2.endContainer &&
                    r1.endOffset === r2.endOffset;
            }
        });

        api.DomRange = Range;
    });

    /*----------------------------------------------------------------------------------------------------------------*/

    // Wrappers for the browser's native DOM Range and/or TextRange implementation 
    api.createCoreModule("WrappedRange", ["DomRange"], function(api, module) {
        var WrappedRange, WrappedTextRange;
        var dom = api.dom;
        var util = api.util;
        var DomPosition = dom.DomPosition;
        var DomRange = api.DomRange;
        var getBody = dom.getBody;
        var getContentDocument = dom.getContentDocument;
        var isCharacterDataNode = dom.isCharacterDataNode;


        /*----------------------------------------------------------------------------------------------------------------*/

        if (api.features.implementsDomRange) {
            // This is a wrapper around the browser's native DOM Range. It has two aims:
            // - Provide workarounds for specific browser bugs
            // - provide convenient extensions, which are inherited from Rangy's DomRange

            (function() {
                var rangeProto;
                var rangeProperties = DomRange.rangeProperties;

                function updateRangeProperties(range) {
                    var i = rangeProperties.length, prop;
                    while (i--) {
                        prop = rangeProperties[i];
                        range[prop] = range.nativeRange[prop];
                    }
                    // Fix for broken collapsed property in IE 9.
                    range.collapsed = (range.startContainer === range.endContainer && range.startOffset === range.endOffset);
                }

                function updateNativeRange(range, startContainer, startOffset, endContainer, endOffset) {
                    var startMoved = (range.startContainer !== startContainer || range.startOffset != startOffset);
                    var endMoved = (range.endContainer !== endContainer || range.endOffset != endOffset);
                    var nativeRangeDifferent = !range.equals(range.nativeRange);

                    // Always set both boundaries for the benefit of IE9 (see issue 35)
                    if (startMoved || endMoved || nativeRangeDifferent) {
                        range.setEnd(endContainer, endOffset);
                        range.setStart(startContainer, startOffset);
                    }
                }

                var createBeforeAfterNodeSetter;

                WrappedRange = function(range) {
                    if (!range) {
                        throw module.createError("WrappedRange: Range must be specified");
                    }
                    this.nativeRange = range;
                    updateRangeProperties(this);
                };

                DomRange.createPrototypeRange(WrappedRange, updateNativeRange);

                rangeProto = WrappedRange.prototype;

                rangeProto.selectNode = function(node) {
                    this.nativeRange.selectNode(node);
                    updateRangeProperties(this);
                };

                rangeProto.cloneContents = function() {
                    return this.nativeRange.cloneContents();
                };

                // Due to a long-standing Firefox bug that I have not been able to find a reliable way to detect,
                // insertNode() is never delegated to the native range.

                rangeProto.surroundContents = function(node) {
                    this.nativeRange.surroundContents(node);
                    updateRangeProperties(this);
                };

                rangeProto.collapse = function(isStart) {
                    this.nativeRange.collapse(isStart);
                    updateRangeProperties(this);
                };

                rangeProto.cloneRange = function() {
                    return new WrappedRange(this.nativeRange.cloneRange());
                };

                rangeProto.refresh = function() {
                    updateRangeProperties(this);
                };

                rangeProto.toString = function() {
                    return this.nativeRange.toString();
                };

                // Create test range and node for feature detection

                var testTextNode = document.createTextNode("test");
                getBody(document).appendChild(testTextNode);
                var range = document.createRange();

                /*--------------------------------------------------------------------------------------------------------*/

                // Test for Firefox 2 bug that prevents moving the start of a Range to a point after its current end and
                // correct for it

                range.setStart(testTextNode, 0);
                range.setEnd(testTextNode, 0);

                try {
                    range.setStart(testTextNode, 1);

                    rangeProto.setStart = function(node, offset) {
                        this.nativeRange.setStart(node, offset);
                        updateRangeProperties(this);
                    };

                    rangeProto.setEnd = function(node, offset) {
                        this.nativeRange.setEnd(node, offset);
                        updateRangeProperties(this);
                    };

                    createBeforeAfterNodeSetter = function(name) {
                        return function(node) {
                            this.nativeRange[name](node);
                            updateRangeProperties(this);
                        };
                    };

                } catch(ex) {

                    rangeProto.setStart = function(node, offset) {
                        try {
                            this.nativeRange.setStart(node, offset);
                        } catch (ex) {
                            this.nativeRange.setEnd(node, offset);
                            this.nativeRange.setStart(node, offset);
                        }
                        updateRangeProperties(this);
                    };

                    rangeProto.setEnd = function(node, offset) {
                        try {
                            this.nativeRange.setEnd(node, offset);
                        } catch (ex) {
                            this.nativeRange.setStart(node, offset);
                            this.nativeRange.setEnd(node, offset);
                        }
                        updateRangeProperties(this);
                    };

                    createBeforeAfterNodeSetter = function(name, oppositeName) {
                        return function(node) {
                            try {
                                this.nativeRange[name](node);
                            } catch (ex) {
                                this.nativeRange[oppositeName](node);
                                this.nativeRange[name](node);
                            }
                            updateRangeProperties(this);
                        };
                    };
                }

                rangeProto.setStartBefore = createBeforeAfterNodeSetter("setStartBefore", "setEndBefore");
                rangeProto.setStartAfter = createBeforeAfterNodeSetter("setStartAfter", "setEndAfter");
                rangeProto.setEndBefore = createBeforeAfterNodeSetter("setEndBefore", "setStartBefore");
                rangeProto.setEndAfter = createBeforeAfterNodeSetter("setEndAfter", "setStartAfter");

                /*--------------------------------------------------------------------------------------------------------*/

                // Always use DOM4-compliant selectNodeContents implementation: it's simpler and less code than testing
                // whether the native implementation can be trusted
                rangeProto.selectNodeContents = function(node) {
                    this.setStartAndEnd(node, 0, dom.getNodeLength(node));
                };

                /*--------------------------------------------------------------------------------------------------------*/

                // Test for and correct WebKit bug that has the behaviour of compareBoundaryPoints round the wrong way for
                // constants START_TO_END and END_TO_START: https://bugs.webkit.org/show_bug.cgi?id=20738

                range.selectNodeContents(testTextNode);
                range.setEnd(testTextNode, 3);

                var range2 = document.createRange();
                range2.selectNodeContents(testTextNode);
                range2.setEnd(testTextNode, 4);
                range2.setStart(testTextNode, 2);

                if (range.compareBoundaryPoints(range.START_TO_END, range2) == -1 &&
                        range.compareBoundaryPoints(range.END_TO_START, range2) == 1) {
                    // This is the wrong way round, so correct for it

                    rangeProto.compareBoundaryPoints = function(type, range) {
                        range = range.nativeRange || range;
                        if (type == range.START_TO_END) {
                            type = range.END_TO_START;
                        } else if (type == range.END_TO_START) {
                            type = range.START_TO_END;
                        }
                        return this.nativeRange.compareBoundaryPoints(type, range);
                    };
                } else {
                    rangeProto.compareBoundaryPoints = function(type, range) {
                        return this.nativeRange.compareBoundaryPoints(type, range.nativeRange || range);
                    };
                }

                /*--------------------------------------------------------------------------------------------------------*/

                // Test for IE deleteContents() and extractContents() bug and correct it. See issue 107.

                var el = document.createElement("div");
                el.innerHTML = "123";
                var textNode = el.firstChild;
                var body = getBody(document);
                body.appendChild(el);

                range.setStart(textNode, 1);
                range.setEnd(textNode, 2);
                range.deleteContents();

                if (textNode.data == "13") {
                    // Behaviour is correct per DOM4 Range so wrap the browser's implementation of deleteContents() and
                    // extractContents()
                    rangeProto.deleteContents = function() {
                        this.nativeRange.deleteContents();
                        updateRangeProperties(this);
                    };

                    rangeProto.extractContents = function() {
                        var frag = this.nativeRange.extractContents();
                        updateRangeProperties(this);
                        return frag;
                    };
                } else {
                }

                body.removeChild(el);
                body = null;

                /*--------------------------------------------------------------------------------------------------------*/

                // Test for existence of createContextualFragment and delegate to it if it exists
                if (util.isHostMethod(range, "createContextualFragment")) {
                    rangeProto.createContextualFragment = function(fragmentStr) {
                        return this.nativeRange.createContextualFragment(fragmentStr);
                    };
                }

                /*--------------------------------------------------------------------------------------------------------*/

                // Clean up
                getBody(document).removeChild(testTextNode);

                rangeProto.getName = function() {
                    return "WrappedRange";
                };

                api.WrappedRange = WrappedRange;

                api.createNativeRange = function(doc) {
                    doc = getContentDocument(doc, module, "createNativeRange");
                    return doc.createRange();
                };
            })();
        }
        
        if (api.features.implementsTextRange) {
            /*
            This is a workaround for a bug where IE returns the wrong container element from the TextRange's parentElement()
            method. For example, in the following (where pipes denote the selection boundaries):

            <ul id="ul"><li id="a">| a </li><li id="b"> b |</li></ul>

            var range = document.selection.createRange();
            alert(range.parentElement().id); // Should alert "ul" but alerts "b"

            This method returns the common ancestor node of the following:
            - the parentElement() of the textRange
            - the parentElement() of the textRange after calling collapse(true)
            - the parentElement() of the textRange after calling collapse(false)
            */
            var getTextRangeContainerElement = function(textRange) {
                var parentEl = textRange.parentElement();
                var range = textRange.duplicate();
                range.collapse(true);
                var startEl = range.parentElement();
                range = textRange.duplicate();
                range.collapse(false);
                var endEl = range.parentElement();
                var startEndContainer = (startEl == endEl) ? startEl : dom.getCommonAncestor(startEl, endEl);

                return startEndContainer == parentEl ? startEndContainer : dom.getCommonAncestor(parentEl, startEndContainer);
            };

            var textRangeIsCollapsed = function(textRange) {
                return textRange.compareEndPoints("StartToEnd", textRange) == 0;
            };

            // Gets the boundary of a TextRange expressed as a node and an offset within that node. This function started
            // out as an improved version of code found in Tim Cameron Ryan's IERange (http://code.google.com/p/ierange/)
            // but has grown, fixing problems with line breaks in preformatted text, adding workaround for IE TextRange
            // bugs, handling for inputs and images, plus optimizations.
            var getTextRangeBoundaryPosition = function(textRange, wholeRangeContainerElement, isStart, isCollapsed, startInfo) {
                var workingRange = textRange.duplicate();
                workingRange.collapse(isStart);
                var containerElement = workingRange.parentElement();

                // Sometimes collapsing a TextRange that's at the start of a text node can move it into the previous node, so
                // check for that
                if (!dom.isOrIsAncestorOf(wholeRangeContainerElement, containerElement)) {
                    containerElement = wholeRangeContainerElement;
                }


                // Deal with nodes that cannot "contain rich HTML markup". In practice, this means form inputs, images and
                // similar. See http://msdn.microsoft.com/en-us/library/aa703950%28VS.85%29.aspx
                if (!containerElement.canHaveHTML) {
                    var pos = new DomPosition(containerElement.parentNode, dom.getNodeIndex(containerElement));
                    return {
                        boundaryPosition: pos,
                        nodeInfo: {
                            nodeIndex: pos.offset,
                            containerElement: pos.node
                        }
                    };
                }

                var workingNode = dom.getDocument(containerElement).createElement("span");

                // Workaround for HTML5 Shiv's insane violation of document.createElement(). See Rangy issue 104 and HTML5
                // Shiv issue 64: https://github.com/aFarkas/html5shiv/issues/64
                if (workingNode.parentNode) {
                    workingNode.parentNode.removeChild(workingNode);
                }

                var comparison, workingComparisonType = isStart ? "StartToStart" : "StartToEnd";
                var previousNode, nextNode, boundaryPosition, boundaryNode;
                var start = (startInfo && startInfo.containerElement == containerElement) ? startInfo.nodeIndex : 0;
                var childNodeCount = containerElement.childNodes.length;
                var end = childNodeCount;

                // Check end first. Code within the loop assumes that the endth child node of the container is definitely
                // after the range boundary.
                var nodeIndex = end;

                while (true) {
                    if (nodeIndex == childNodeCount) {
                        containerElement.appendChild(workingNode);
                    } else {
                        containerElement.insertBefore(workingNode, containerElement.childNodes[nodeIndex]);
                    }
                    workingRange.moveToElementText(workingNode);
                    comparison = workingRange.compareEndPoints(workingComparisonType, textRange);
                    if (comparison == 0 || start == end) {
                        break;
                    } else if (comparison == -1) {
                        if (end == start + 1) {
                            // We know the endth child node is after the range boundary, so we must be done.
                            break;
                        } else {
                            start = nodeIndex;
                        }
                    } else {
                        end = (end == start + 1) ? start : nodeIndex;
                    }
                    nodeIndex = Math.floor((start + end) / 2);
                    containerElement.removeChild(workingNode);
                }


                // We've now reached or gone past the boundary of the text range we're interested in
                // so have identified the node we want
                boundaryNode = workingNode.nextSibling;

                if (comparison == -1 && boundaryNode && isCharacterDataNode(boundaryNode)) {
                    // This is a character data node (text, comment, cdata). The working range is collapsed at the start of
                    // the node containing the text range's boundary, so we move the end of the working range to the
                    // boundary point and measure the length of its text to get the boundary's offset within the node.
                    workingRange.setEndPoint(isStart ? "EndToStart" : "EndToEnd", textRange);

                    var offset;

                    if (/[\r\n]/.test(boundaryNode.data)) {
                        /*
                        For the particular case of a boundary within a text node containing rendered line breaks (within a
                        <pre> element, for example), we need a slightly complicated approach to get the boundary's offset in
                        IE. The facts:
                        
                        - Each line break is represented as \r in the text node's data/nodeValue properties
                        - Each line break is represented as \r\n in the TextRange's 'text' property
                        - The 'text' property of the TextRange does not contain trailing line breaks
                        
                        To get round the problem presented by the final fact above, we can use the fact that TextRange's
                        moveStart() and moveEnd() methods return the actual number of characters moved, which is not
                        necessarily the same as the number of characters it was instructed to move. The simplest approach is
                        to use this to store the characters moved when moving both the start and end of the range to the
                        start of the document body and subtracting the start offset from the end offset (the
                        "move-negative-gazillion" method). However, this is extremely slow when the document is large and
                        the range is near the end of it. Clearly doing the mirror image (i.e. moving the range boundaries to
                        the end of the document) has the same problem.
                        
                        Another approach that works is to use moveStart() to move the start boundary of the range up to the
                        end boundary one character at a time and incrementing a counter with the value returned by the
                        moveStart() call. However, the check for whether the start boundary has reached the end boundary is
                        expensive, so this method is slow (although unlike "move-negative-gazillion" is largely unaffected
                        by the location of the range within the document).
                        
                        The approach used below is a hybrid of the two methods above. It uses the fact that a string
                        containing the TextRange's 'text' property with each \r\n converted to a single \r character cannot
                        be longer than the text of the TextRange, so the start of the range is moved that length initially
                        and then a character at a time to make up for any trailing line breaks not contained in the 'text'
                        property. This has good performance in most situations compared to the previous two methods.
                        */
                        var tempRange = workingRange.duplicate();
                        var rangeLength = tempRange.text.replace(/\r\n/g, "\r").length;

                        offset = tempRange.moveStart("character", rangeLength);
                        while ( (comparison = tempRange.compareEndPoints("StartToEnd", tempRange)) == -1) {
                            offset++;
                            tempRange.moveStart("character", 1);
                        }
                    } else {
                        offset = workingRange.text.length;
                    }
                    boundaryPosition = new DomPosition(boundaryNode, offset);
                } else {

                    // If the boundary immediately follows a character data node and this is the end boundary, we should favour
                    // a position within that, and likewise for a start boundary preceding a character data node
                    previousNode = (isCollapsed || !isStart) && workingNode.previousSibling;
                    nextNode = (isCollapsed || isStart) && workingNode.nextSibling;
                    if (nextNode && isCharacterDataNode(nextNode)) {
                        boundaryPosition = new DomPosition(nextNode, 0);
                    } else if (previousNode && isCharacterDataNode(previousNode)) {
                        boundaryPosition = new DomPosition(previousNode, previousNode.data.length);
                    } else {
                        boundaryPosition = new DomPosition(containerElement, dom.getNodeIndex(workingNode));
                    }
                }

                // Clean up
                workingNode.parentNode.removeChild(workingNode);

                return {
                    boundaryPosition: boundaryPosition,
                    nodeInfo: {
                        nodeIndex: nodeIndex,
                        containerElement: containerElement
                    }
                };
            };

            // Returns a TextRange representing the boundary of a TextRange expressed as a node and an offset within that
            // node. This function started out as an optimized version of code found in Tim Cameron Ryan's IERange
            // (http://code.google.com/p/ierange/)
            var createBoundaryTextRange = function(boundaryPosition, isStart) {
                var boundaryNode, boundaryParent, boundaryOffset = boundaryPosition.offset;
                var doc = dom.getDocument(boundaryPosition.node);
                var workingNode, childNodes, workingRange = getBody(doc).createTextRange();
                var nodeIsDataNode = isCharacterDataNode(boundaryPosition.node);

                if (nodeIsDataNode) {
                    boundaryNode = boundaryPosition.node;
                    boundaryParent = boundaryNode.parentNode;
                } else {
                    childNodes = boundaryPosition.node.childNodes;
                    boundaryNode = (boundaryOffset < childNodes.length) ? childNodes[boundaryOffset] : null;
                    boundaryParent = boundaryPosition.node;
                }

                // Position the range immediately before the node containing the boundary
                workingNode = doc.createElement("span");

                // Making the working element non-empty element persuades IE to consider the TextRange boundary to be within
                // the element rather than immediately before or after it
                workingNode.innerHTML = "&#feff;";

                // insertBefore is supposed to work like appendChild if the second parameter is null. However, a bug report
                // for IERange suggests that it can crash the browser: http://code.google.com/p/ierange/issues/detail?id=12
                if (boundaryNode) {
                    boundaryParent.insertBefore(workingNode, boundaryNode);
                } else {
                    boundaryParent.appendChild(workingNode);
                }

                workingRange.moveToElementText(workingNode);
                workingRange.collapse(!isStart);

                // Clean up
                boundaryParent.removeChild(workingNode);

                // Move the working range to the text offset, if required
                if (nodeIsDataNode) {
                    workingRange[isStart ? "moveStart" : "moveEnd"]("character", boundaryOffset);
                }

                return workingRange;
            };

            /*------------------------------------------------------------------------------------------------------------*/

            // This is a wrapper around a TextRange, providing full DOM Range functionality using rangy's DomRange as a
            // prototype

            WrappedTextRange = function(textRange) {
                this.textRange = textRange;
                this.refresh();
            };

            WrappedTextRange.prototype = new DomRange(document);

            WrappedTextRange.prototype.refresh = function() {
                var start, end, startBoundary;

                // TextRange's parentElement() method cannot be trusted. getTextRangeContainerElement() works around that.
                var rangeContainerElement = getTextRangeContainerElement(this.textRange);

                if (textRangeIsCollapsed(this.textRange)) {
                    end = start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true,
                        true).boundaryPosition;
                } else {
                    startBoundary = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, false);
                    start = startBoundary.boundaryPosition;

                    // An optimization used here is that if the start and end boundaries have the same parent element, the
                    // search scope for the end boundary can be limited to exclude the portion of the element that precedes
                    // the start boundary
                    end = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, false, false,
                        startBoundary.nodeInfo).boundaryPosition;
                }

                this.setStart(start.node, start.offset);
                this.setEnd(end.node, end.offset);
            };

            WrappedTextRange.prototype.getName = function() {
                return "WrappedTextRange";
            };

            DomRange.copyComparisonConstants(WrappedTextRange);

            var rangeToTextRange = function(range) {
                if (range.collapsed) {
                    return createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);
                } else {
                    var startRange = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);
                    var endRange = createBoundaryTextRange(new DomPosition(range.endContainer, range.endOffset), false);
                    var textRange = getBody( DomRange.getRangeDocument(range) ).createTextRange();
                    textRange.setEndPoint("StartToStart", startRange);
                    textRange.setEndPoint("EndToEnd", endRange);
                    return textRange;
                }
            };

            WrappedTextRange.rangeToTextRange = rangeToTextRange;

            WrappedTextRange.prototype.toTextRange = function() {
                return rangeToTextRange(this);
            };

            api.WrappedTextRange = WrappedTextRange;

            // IE 9 and above have both implementations and Rangy makes both available. The next few lines sets which
            // implementation to use by default.
            if (!api.features.implementsDomRange || api.config.preferTextRange) {
                // Add WrappedTextRange as the Range property of the global object to allow expression like Range.END_TO_END to work
                var globalObj = (function(f) { return f("return this;")(); })(Function);
                if (typeof globalObj.Range == "undefined") {
                    globalObj.Range = WrappedTextRange;
                }

                api.createNativeRange = function(doc) {
                    doc = getContentDocument(doc, module, "createNativeRange");
                    return getBody(doc).createTextRange();
                };

                api.WrappedRange = WrappedTextRange;
            }
        }

        api.createRange = function(doc) {
            doc = getContentDocument(doc, module, "createRange");
            return new api.WrappedRange(api.createNativeRange(doc));
        };

        api.createRangyRange = function(doc) {
            doc = getContentDocument(doc, module, "createRangyRange");
            return new DomRange(doc);
        };

        api.createIframeRange = function(iframeEl) {
            module.deprecationNotice("createIframeRange()", "createRange(iframeEl)");
            return api.createRange(iframeEl);
        };

        api.createIframeRangyRange = function(iframeEl) {
            module.deprecationNotice("createIframeRangyRange()", "createRangyRange(iframeEl)");
            return api.createRangyRange(iframeEl);
        };

        api.addShimListener(function(win) {
            var doc = win.document;
            if (typeof doc.createRange == "undefined") {
                doc.createRange = function() {
                    return api.createRange(doc);
                };
            }
            doc = win = null;
        });
    });

    /*----------------------------------------------------------------------------------------------------------------*/

    // This module creates a selection object wrapper that conforms as closely as possible to the Selection specification
    // in the HTML Editing spec (http://dvcs.w3.org/hg/editing/raw-file/tip/editing.html#selections)
    api.createCoreModule("WrappedSelection", ["DomRange", "WrappedRange"], function(api, module) {
        api.config.checkSelectionRanges = true;

        var BOOLEAN = "boolean";
        var NUMBER = "number";
        var dom = api.dom;
        var util = api.util;
        var isHostMethod = util.isHostMethod;
        var DomRange = api.DomRange;
        var WrappedRange = api.WrappedRange;
        var DOMException = api.DOMException;
        var DomPosition = dom.DomPosition;
        var getNativeSelection;
        var selectionIsCollapsed;
        var features = api.features;
        var CONTROL = "Control";
        var getDocument = dom.getDocument;
        var getBody = dom.getBody;
        var rangesEqual = DomRange.rangesEqual;


        // Utility function to support direction parameters in the API that may be a string ("backward" or "forward") or a
        // Boolean (true for backwards).
        function isDirectionBackward(dir) {
            return (typeof dir == "string") ? /^backward(s)?$/i.test(dir) : !!dir;
        }

        function getWindow(win, methodName) {
            if (!win) {
                return window;
            } else if (dom.isWindow(win)) {
                return win;
            } else if (win instanceof WrappedSelection) {
                return win.win;
            } else {
                var doc = dom.getContentDocument(win, module, methodName);
                return dom.getWindow(doc);
            }
        }

        function getWinSelection(winParam) {
            return getWindow(winParam, "getWinSelection").getSelection();
        }

        function getDocSelection(winParam) {
            return getWindow(winParam, "getDocSelection").document.selection;
        }
        
        function winSelectionIsBackward(sel) {
            var backward = false;
            if (sel.anchorNode) {
                backward = (dom.comparePoints(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset) == 1);
            }
            return backward;
        }

        // Test for the Range/TextRange and Selection features required
        // Test for ability to retrieve selection
        var implementsWinGetSelection = isHostMethod(window, "getSelection"),
            implementsDocSelection = util.isHostObject(document, "selection");

        features.implementsWinGetSelection = implementsWinGetSelection;
        features.implementsDocSelection = implementsDocSelection;

        var useDocumentSelection = implementsDocSelection && (!implementsWinGetSelection || api.config.preferTextRange);

        if (useDocumentSelection) {
            getNativeSelection = getDocSelection;
            api.isSelectionValid = function(winParam) {
                var doc = getWindow(winParam, "isSelectionValid").document, nativeSel = doc.selection;

                // Check whether the selection TextRange is actually contained within the correct document
                return (nativeSel.type != "None" || getDocument(nativeSel.createRange().parentElement()) == doc);
            };
        } else if (implementsWinGetSelection) {
            getNativeSelection = getWinSelection;
            api.isSelectionValid = function() {
                return true;
            };
        } else {
            module.fail("Neither document.selection or window.getSelection() detected.");
        }

        api.getNativeSelection = getNativeSelection;

        var testSelection = getNativeSelection();
        var testRange = api.createNativeRange(document);
        var body = getBody(document);

        // Obtaining a range from a selection
        var selectionHasAnchorAndFocus = util.areHostProperties(testSelection,
            ["anchorNode", "focusNode", "anchorOffset", "focusOffset"]);

        features.selectionHasAnchorAndFocus = selectionHasAnchorAndFocus;

        // Test for existence of native selection extend() method
        var selectionHasExtend = isHostMethod(testSelection, "extend");
        features.selectionHasExtend = selectionHasExtend;
        
        // Test if rangeCount exists
        var selectionHasRangeCount = (typeof testSelection.rangeCount == NUMBER);
        features.selectionHasRangeCount = selectionHasRangeCount;

        var selectionSupportsMultipleRanges = false;
        var collapsedNonEditableSelectionsSupported = true;

        var addRangeBackwardToNative = selectionHasExtend ?
            function(nativeSelection, range) {
                var doc = DomRange.getRangeDocument(range);
                var endRange = api.createRange(doc);
                endRange.collapseToPoint(range.endContainer, range.endOffset);
                nativeSelection.addRange(getNativeRange(endRange));
                nativeSelection.extend(range.startContainer, range.startOffset);
            } : null;

        if (util.areHostMethods(testSelection, ["addRange", "getRangeAt", "removeAllRanges"]) &&
                typeof testSelection.rangeCount == NUMBER && features.implementsDomRange) {

            (function() {
                // Previously an iframe was used but this caused problems in some circumstances in IE, so tests are
                // performed on the current document's selection. See issue 109.

                // Note also that if a selection previously existed, it is wiped by these tests. This should usually be fine
                // because initialization usually happens when the document loads, but could be a problem for a script that
                // loads and initializes Rangy later. If anyone complains, code could be added to save and restore the
                // selection.
                var sel = window.getSelection();
                if (sel) {
                    // Store the current selection
                    var originalSelectionRangeCount = sel.rangeCount;
                    var selectionHasMultipleRanges = (originalSelectionRangeCount > 1);
                    var originalSelectionRanges = [];
                    var originalSelectionBackward = winSelectionIsBackward(sel); 
                    for (var i = 0; i < originalSelectionRangeCount; ++i) {
                        originalSelectionRanges[i] = sel.getRangeAt(i);
                    }
                    
                    // Create some test elements
                    var body = getBody(document);
                    var testEl = body.appendChild( document.createElement("div") );
                    testEl.contentEditable = "false";
                    var textNode = testEl.appendChild( document.createTextNode("\u00a0\u00a0\u00a0") );

                    // Test whether the native selection will allow a collapsed selection within a non-editable element
                    var r1 = document.createRange();

                    r1.setStart(textNode, 1);
                    r1.collapse(true);
                    sel.addRange(r1);
                    collapsedNonEditableSelectionsSupported = (sel.rangeCount == 1);
                    sel.removeAllRanges();

                    // Test whether the native selection is capable of supporting multiple ranges.
                    if (!selectionHasMultipleRanges) {
                        // Doing the original feature test here in Chrome 36 (and presumably later versions) prints a
                        // console error of "Discontiguous selection is not supported." that cannot be suppressed. There's
                        // nothing we can do about this while retaining the feature test so we have to resort to a browser
                        // sniff. I'm not happy about it. See
                        // https://code.google.com/p/chromium/issues/detail?id=399791
                        var chromeMatch = window.navigator.appVersion.match(/Chrome\/(.*?) /);
                        if (chromeMatch && parseInt(chromeMatch[1]) >= 36) {
                            selectionSupportsMultipleRanges = false;
                        } else {
                            var r2 = r1.cloneRange();
                            r1.setStart(textNode, 0);
                            r2.setEnd(textNode, 3);
                            r2.setStart(textNode, 2);
                            sel.addRange(r1);
                            sel.addRange(r2);
                            selectionSupportsMultipleRanges = (sel.rangeCount == 2);
                        }
                    }

                    // Clean up
                    body.removeChild(testEl);
                    sel.removeAllRanges();

                    for (i = 0; i < originalSelectionRangeCount; ++i) {
                        if (i == 0 && originalSelectionBackward) {
                            if (addRangeBackwardToNative) {
                                addRangeBackwardToNative(sel, originalSelectionRanges[i]);
                            } else {
                                api.warn("Rangy initialization: original selection was backwards but selection has been restored forwards because the browser does not support Selection.extend");
                                sel.addRange(originalSelectionRanges[i]);
                            }
                        } else {
                            sel.addRange(originalSelectionRanges[i]);
                        }
                    }
                }
            })();
        }

        features.selectionSupportsMultipleRanges = selectionSupportsMultipleRanges;
        features.collapsedNonEditableSelectionsSupported = collapsedNonEditableSelectionsSupported;

        // ControlRanges
        var implementsControlRange = false, testControlRange;

        if (body && isHostMethod(body, "createControlRange")) {
            testControlRange = body.createControlRange();
            if (util.areHostProperties(testControlRange, ["item", "add"])) {
                implementsControlRange = true;
            }
        }
        features.implementsControlRange = implementsControlRange;

        // Selection collapsedness
        if (selectionHasAnchorAndFocus) {
            selectionIsCollapsed = function(sel) {
                return sel.anchorNode === sel.focusNode && sel.anchorOffset === sel.focusOffset;
            };
        } else {
            selectionIsCollapsed = function(sel) {
                return sel.rangeCount ? sel.getRangeAt(sel.rangeCount - 1).collapsed : false;
            };
        }

        function updateAnchorAndFocusFromRange(sel, range, backward) {
            var anchorPrefix = backward ? "end" : "start", focusPrefix = backward ? "start" : "end";
            sel.anchorNode = range[anchorPrefix + "Container"];
            sel.anchorOffset = range[anchorPrefix + "Offset"];
            sel.focusNode = range[focusPrefix + "Container"];
            sel.focusOffset = range[focusPrefix + "Offset"];
        }

        function updateAnchorAndFocusFromNativeSelection(sel) {
            var nativeSel = sel.nativeSelection;
            sel.anchorNode = nativeSel.anchorNode;
            sel.anchorOffset = nativeSel.anchorOffset;
            sel.focusNode = nativeSel.focusNode;
            sel.focusOffset = nativeSel.focusOffset;
        }

        function updateEmptySelection(sel) {
            sel.anchorNode = sel.focusNode = null;
            sel.anchorOffset = sel.focusOffset = 0;
            sel.rangeCount = 0;
            sel.isCollapsed = true;
            sel._ranges.length = 0;
        }

        function getNativeRange(range) {
            var nativeRange;
            if (range instanceof DomRange) {
                nativeRange = api.createNativeRange(range.getDocument());
                nativeRange.setEnd(range.endContainer, range.endOffset);
                nativeRange.setStart(range.startContainer, range.startOffset);
            } else if (range instanceof WrappedRange) {
                nativeRange = range.nativeRange;
            } else if (features.implementsDomRange && (range instanceof dom.getWindow(range.startContainer).Range)) {
                nativeRange = range;
            }
            return nativeRange;
        }

        function rangeContainsSingleElement(rangeNodes) {
            if (!rangeNodes.length || rangeNodes[0].nodeType != 1) {
                return false;
            }
            for (var i = 1, len = rangeNodes.length; i < len; ++i) {
                if (!dom.isAncestorOf(rangeNodes[0], rangeNodes[i])) {
                    return false;
                }
            }
            return true;
        }

        function getSingleElementFromRange(range) {
            var nodes = range.getNodes();
            if (!rangeContainsSingleElement(nodes)) {
                throw module.createError("getSingleElementFromRange: range " + range.inspect() + " did not consist of a single element");
            }
            return nodes[0];
        }

        // Simple, quick test which only needs to distinguish between a TextRange and a ControlRange
        function isTextRange(range) {
            return !!range && typeof range.text != "undefined";
        }

        function updateFromTextRange(sel, range) {
            // Create a Range from the selected TextRange
            var wrappedRange = new WrappedRange(range);
            sel._ranges = [wrappedRange];

            updateAnchorAndFocusFromRange(sel, wrappedRange, false);
            sel.rangeCount = 1;
            sel.isCollapsed = wrappedRange.collapsed;
        }

        function updateControlSelection(sel) {
            // Update the wrapped selection based on what's now in the native selection
            sel._ranges.length = 0;
            if (sel.docSelection.type == "None") {
                updateEmptySelection(sel);
            } else {
                var controlRange = sel.docSelection.createRange();
                if (isTextRange(controlRange)) {
                    // This case (where the selection type is "Control" and calling createRange() on the selection returns
                    // a TextRange) can happen in IE 9. It happens, for example, when all elements in the selected
                    // ControlRange have been removed from the ControlRange and removed from the document.
                    updateFromTextRange(sel, controlRange);
                } else {
                    sel.rangeCount = controlRange.length;
                    var range, doc = getDocument(controlRange.item(0));
                    for (var i = 0; i < sel.rangeCount; ++i) {
                        range = api.createRange(doc);
                        range.selectNode(controlRange.item(i));
                        sel._ranges.push(range);
                    }
                    sel.isCollapsed = sel.rangeCount == 1 && sel._ranges[0].collapsed;
                    updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], false);
                }
            }
        }

        function addRangeToControlSelection(sel, range) {
            var controlRange = sel.docSelection.createRange();
            var rangeElement = getSingleElementFromRange(range);

            // Create a new ControlRange containing all the elements in the selected ControlRange plus the element
            // contained by the supplied range
            var doc = getDocument(controlRange.item(0));
            var newControlRange = getBody(doc).createControlRange();
            for (var i = 0, len = controlRange.length; i < len; ++i) {
                newControlRange.add(controlRange.item(i));
            }
            try {
                newControlRange.add(rangeElement);
            } catch (ex) {
                throw module.createError("addRange(): Element within the specified Range could not be added to control selection (does it have layout?)");
            }
            newControlRange.select();

            // Update the wrapped selection based on what's now in the native selection
            updateControlSelection(sel);
        }

        var getSelectionRangeAt;

        if (isHostMethod(testSelection, "getRangeAt")) {
            // try/catch is present because getRangeAt() must have thrown an error in some browser and some situation.
            // Unfortunately, I didn't write a comment about the specifics and am now scared to take it out. Let that be a
            // lesson to us all, especially me.
            getSelectionRangeAt = function(sel, index) {
                try {
                    return sel.getRangeAt(index);
                } catch (ex) {
                    return null;
                }
            };
        } else if (selectionHasAnchorAndFocus) {
            getSelectionRangeAt = function(sel) {
                var doc = getDocument(sel.anchorNode);
                var range = api.createRange(doc);
                range.setStartAndEnd(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset);

                // Handle the case when the selection was selected backwards (from the end to the start in the
                // document)
                if (range.collapsed !== this.isCollapsed) {
                    range.setStartAndEnd(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset);
                }

                return range;
            };
        }

        function WrappedSelection(selection, docSelection, win) {
            this.nativeSelection = selection;
            this.docSelection = docSelection;
            this._ranges = [];
            this.win = win;
            this.refresh();
        }

        WrappedSelection.prototype = api.selectionPrototype;

        function deleteProperties(sel) {
            sel.win = sel.anchorNode = sel.focusNode = sel._ranges = null;
            sel.rangeCount = sel.anchorOffset = sel.focusOffset = 0;
            sel.detached = true;
        }

        var cachedRangySelections = [];

        function actOnCachedSelection(win, action) {
            var i = cachedRangySelections.length, cached, sel;
            while (i--) {
                cached = cachedRangySelections[i];
                sel = cached.selection;
                if (action == "deleteAll") {
                    deleteProperties(sel);
                } else if (cached.win == win) {
                    if (action == "delete") {
                        cachedRangySelections.splice(i, 1);
                        return true;
                    } else {
                        return sel;
                    }
                }
            }
            if (action == "deleteAll") {
                cachedRangySelections.length = 0;
            }
            return null;
        }

        var getSelection = function(win) {
            // Check if the parameter is a Rangy Selection object
            if (win && win instanceof WrappedSelection) {
                win.refresh();
                return win;
            }

            win = getWindow(win, "getNativeSelection");

            var sel = actOnCachedSelection(win);
            var nativeSel = getNativeSelection(win), docSel = implementsDocSelection ? getDocSelection(win) : null;
            if (sel) {
                sel.nativeSelection = nativeSel;
                sel.docSelection = docSel;
                sel.refresh();
            } else {
                sel = new WrappedSelection(nativeSel, docSel, win);
                cachedRangySelections.push( { win: win, selection: sel } );
            }
            return sel;
        };

        api.getSelection = getSelection;

        api.getIframeSelection = function(iframeEl) {
            module.deprecationNotice("getIframeSelection()", "getSelection(iframeEl)");
            return api.getSelection(dom.getIframeWindow(iframeEl));
        };

        var selProto = WrappedSelection.prototype;

        function createControlSelection(sel, ranges) {
            // Ensure that the selection becomes of type "Control"
            var doc = getDocument(ranges[0].startContainer);
            var controlRange = getBody(doc).createControlRange();
            for (var i = 0, el, len = ranges.length; i < len; ++i) {
                el = getSingleElementFromRange(ranges[i]);
                try {
                    controlRange.add(el);
                } catch (ex) {
                    throw module.createError("setRanges(): Element within one of the specified Ranges could not be added to control selection (does it have layout?)");
                }
            }
            controlRange.select();

            // Update the wrapped selection based on what's now in the native selection
            updateControlSelection(sel);
        }

        // Selecting a range
        if (!useDocumentSelection && selectionHasAnchorAndFocus && util.areHostMethods(testSelection, ["removeAllRanges", "addRange"])) {
            selProto.removeAllRanges = function() {
                this.nativeSelection.removeAllRanges();
                updateEmptySelection(this);
            };

            var addRangeBackward = function(sel, range) {
                addRangeBackwardToNative(sel.nativeSelection, range);
                sel.refresh();
            };

            if (selectionHasRangeCount) {
                selProto.addRange = function(range, direction) {
                    if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {
                        addRangeToControlSelection(this, range);
                    } else {
                        if (isDirectionBackward(direction) && selectionHasExtend) {
                            addRangeBackward(this, range);
                        } else {
                            var previousRangeCount;
                            if (selectionSupportsMultipleRanges) {
                                previousRangeCount = this.rangeCount;
                            } else {
                                this.removeAllRanges();
                                previousRangeCount = 0;
                            }
                            // Clone the native range so that changing the selected range does not affect the selection.
                            // This is contrary to the spec but is the only way to achieve consistency between browsers. See
                            // issue 80.
                            var clonedNativeRange = getNativeRange(range).cloneRange();
                            try {
                                this.nativeSelection.addRange(clonedNativeRange);
                            } catch (ex) {
                            }

                            // Check whether adding the range was successful
                            this.rangeCount = this.nativeSelection.rangeCount;

                            if (this.rangeCount == previousRangeCount + 1) {
                                // The range was added successfully

                                // Check whether the range that we added to the selection is reflected in the last range extracted from
                                // the selection
                                if (api.config.checkSelectionRanges) {
                                    var nativeRange = getSelectionRangeAt(this.nativeSelection, this.rangeCount - 1);
                                    if (nativeRange && !rangesEqual(nativeRange, range)) {
                                        // Happens in WebKit with, for example, a selection placed at the start of a text node
                                        range = new WrappedRange(nativeRange);
                                    }
                                }
                                this._ranges[this.rangeCount - 1] = range;
                                updateAnchorAndFocusFromRange(this, range, selectionIsBackward(this.nativeSelection));
                                this.isCollapsed = selectionIsCollapsed(this);
                            } else {
                                // The range was not added successfully. The simplest thing is to refresh
                                this.refresh();
                            }
                        }
                    }
                };
            } else {
                selProto.addRange = function(range, direction) {
                    if (isDirectionBackward(direction) && selectionHasExtend) {
                        addRangeBackward(this, range);
                    } else {
                        this.nativeSelection.addRange(getNativeRange(range));
                        this.refresh();
                    }
                };
            }

            selProto.setRanges = function(ranges) {
                if (implementsControlRange && implementsDocSelection && ranges.length > 1) {
                    createControlSelection(this, ranges);
                } else {
                    this.removeAllRanges();
                    for (var i = 0, len = ranges.length; i < len; ++i) {
                        this.addRange(ranges[i]);
                    }
                }
            };
        } else if (isHostMethod(testSelection, "empty") && isHostMethod(testRange, "select") &&
                   implementsControlRange && useDocumentSelection) {

            selProto.removeAllRanges = function() {
                // Added try/catch as fix for issue #21
                try {
                    this.docSelection.empty();

                    // Check for empty() not working (issue #24)
                    if (this.docSelection.type != "None") {
                        // Work around failure to empty a control selection by instead selecting a TextRange and then
                        // calling empty()
                        var doc;
                        if (this.anchorNode) {
                            doc = getDocument(this.anchorNode);
                        } else if (this.docSelection.type == CONTROL) {
                            var controlRange = this.docSelection.createRange();
                            if (controlRange.length) {
                                doc = getDocument( controlRange.item(0) );
                            }
                        }
                        if (doc) {
                            var textRange = getBody(doc).createTextRange();
                            textRange.select();
                            this.docSelection.empty();
                        }
                    }
                } catch(ex) {}
                updateEmptySelection(this);
            };

            selProto.addRange = function(range) {
                if (this.docSelection.type == CONTROL) {
                    addRangeToControlSelection(this, range);
                } else {
                    api.WrappedTextRange.rangeToTextRange(range).select();
                    this._ranges[0] = range;
                    this.rangeCount = 1;
                    this.isCollapsed = this._ranges[0].collapsed;
                    updateAnchorAndFocusFromRange(this, range, false);
                }
            };

            selProto.setRanges = function(ranges) {
                this.removeAllRanges();
                var rangeCount = ranges.length;
                if (rangeCount > 1) {
                    createControlSelection(this, ranges);
                } else if (rangeCount) {
                    this.addRange(ranges[0]);
                }
            };
        } else {
            module.fail("No means of selecting a Range or TextRange was found");
            return false;
        }

        selProto.getRangeAt = function(index) {
            if (index < 0 || index >= this.rangeCount) {
                throw new DOMException("INDEX_SIZE_ERR");
            } else {
                // Clone the range to preserve selection-range independence. See issue 80.
                return this._ranges[index].cloneRange();
            }
        };

        var refreshSelection;

        if (useDocumentSelection) {
            refreshSelection = function(sel) {
                var range;
                if (api.isSelectionValid(sel.win)) {
                    range = sel.docSelection.createRange();
                } else {
                    range = getBody(sel.win.document).createTextRange();
                    range.collapse(true);
                }

                if (sel.docSelection.type == CONTROL) {
                    updateControlSelection(sel);
                } else if (isTextRange(range)) {
                    updateFromTextRange(sel, range);
                } else {
                    updateEmptySelection(sel);
                }
            };
        } else if (isHostMethod(testSelection, "getRangeAt") && typeof testSelection.rangeCount == NUMBER) {
            refreshSelection = function(sel) {
                if (implementsControlRange && implementsDocSelection && sel.docSelection.type == CONTROL) {
                    updateControlSelection(sel);
                } else {
                    sel._ranges.length = sel.rangeCount = sel.nativeSelection.rangeCount;
                    if (sel.rangeCount) {
                        for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                            sel._ranges[i] = new api.WrappedRange(sel.nativeSelection.getRangeAt(i));
                        }
                        updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], selectionIsBackward(sel.nativeSelection));
                        sel.isCollapsed = selectionIsCollapsed(sel);
                    } else {
                        updateEmptySelection(sel);
                    }
                }
            };
        } else if (selectionHasAnchorAndFocus && typeof testSelection.isCollapsed == BOOLEAN && typeof testRange.collapsed == BOOLEAN && features.implementsDomRange) {
            refreshSelection = function(sel) {
                var range, nativeSel = sel.nativeSelection;
                if (nativeSel.anchorNode) {
                    range = getSelectionRangeAt(nativeSel, 0);
                    sel._ranges = [range];
                    sel.rangeCount = 1;
                    updateAnchorAndFocusFromNativeSelection(sel);
                    sel.isCollapsed = selectionIsCollapsed(sel);
                } else {
                    updateEmptySelection(sel);
                }
            };
        } else {
            module.fail("No means of obtaining a Range or TextRange from the user's selection was found");
            return false;
        }

        selProto.refresh = function(checkForChanges) {
            var oldRanges = checkForChanges ? this._ranges.slice(0) : null;
            var oldAnchorNode = this.anchorNode, oldAnchorOffset = this.anchorOffset;

            refreshSelection(this);
            if (checkForChanges) {
                // Check the range count first
                var i = oldRanges.length;
                if (i != this._ranges.length) {
                    return true;
                }

                // Now check the direction. Checking the anchor position is the same is enough since we're checking all the
                // ranges after this
                if (this.anchorNode != oldAnchorNode || this.anchorOffset != oldAnchorOffset) {
                    return true;
                }

                // Finally, compare each range in turn
                while (i--) {
                    if (!rangesEqual(oldRanges[i], this._ranges[i])) {
                        return true;
                    }
                }
                return false;
            }
        };

        // Removal of a single range
        var removeRangeManually = function(sel, range) {
            var ranges = sel.getAllRanges();
            sel.removeAllRanges();
            for (var i = 0, len = ranges.length; i < len; ++i) {
                if (!rangesEqual(range, ranges[i])) {
                    sel.addRange(ranges[i]);
                }
            }
            if (!sel.rangeCount) {
                updateEmptySelection(sel);
            }
        };

        if (implementsControlRange && implementsDocSelection) {
            selProto.removeRange = function(range) {
                if (this.docSelection.type == CONTROL) {
                    var controlRange = this.docSelection.createRange();
                    var rangeElement = getSingleElementFromRange(range);

                    // Create a new ControlRange containing all the elements in the selected ControlRange minus the
                    // element contained by the supplied range
                    var doc = getDocument(controlRange.item(0));
                    var newControlRange = getBody(doc).createControlRange();
                    var el, removed = false;
                    for (var i = 0, len = controlRange.length; i < len; ++i) {
                        el = controlRange.item(i);
                        if (el !== rangeElement || removed) {
                            newControlRange.add(controlRange.item(i));
                        } else {
                            removed = true;
                        }
                    }
                    newControlRange.select();

                    // Update the wrapped selection based on what's now in the native selection
                    updateControlSelection(this);
                } else {
                    removeRangeManually(this, range);
                }
            };
        } else {
            selProto.removeRange = function(range) {
                removeRangeManually(this, range);
            };
        }

        // Detecting if a selection is backward
        var selectionIsBackward;
        if (!useDocumentSelection && selectionHasAnchorAndFocus && features.implementsDomRange) {
            selectionIsBackward = winSelectionIsBackward;

            selProto.isBackward = function() {
                return selectionIsBackward(this);
            };
        } else {
            selectionIsBackward = selProto.isBackward = function() {
                return false;
            };
        }

        // Create an alias for backwards compatibility. From 1.3, everything is "backward" rather than "backwards"
        selProto.isBackwards = selProto.isBackward;

        // Selection stringifier
        // This is conformant to the old HTML5 selections draft spec but differs from WebKit and Mozilla's implementation.
        // The current spec does not yet define this method.
        selProto.toString = function() {
            var rangeTexts = [];
            for (var i = 0, len = this.rangeCount; i < len; ++i) {
                rangeTexts[i] = "" + this._ranges[i];
            }
            return rangeTexts.join("");
        };

        function assertNodeInSameDocument(sel, node) {
            if (sel.win.document != getDocument(node)) {
                throw new DOMException("WRONG_DOCUMENT_ERR");
            }
        }

        // No current browser conforms fully to the spec for this method, so Rangy's own method is always used
        selProto.collapse = function(node, offset) {
            assertNodeInSameDocument(this, node);
            var range = api.createRange(node);
            range.collapseToPoint(node, offset);
            this.setSingleRange(range);
            this.isCollapsed = true;
        };

        selProto.collapseToStart = function() {
            if (this.rangeCount) {
                var range = this._ranges[0];
                this.collapse(range.startContainer, range.startOffset);
            } else {
                throw new DOMException("INVALID_STATE_ERR");
            }
        };

        selProto.collapseToEnd = function() {
            if (this.rangeCount) {
                var range = this._ranges[this.rangeCount - 1];
                this.collapse(range.endContainer, range.endOffset);
            } else {
                throw new DOMException("INVALID_STATE_ERR");
            }
        };

        // The spec is very specific on how selectAllChildren should be implemented so the native implementation is
        // never used by Rangy.
        selProto.selectAllChildren = function(node) {
            assertNodeInSameDocument(this, node);
            var range = api.createRange(node);
            range.selectNodeContents(node);
            this.setSingleRange(range);
        };

        selProto.deleteFromDocument = function() {
            // Sepcial behaviour required for IE's control selections
            if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {
                var controlRange = this.docSelection.createRange();
                var element;
                while (controlRange.length) {
                    element = controlRange.item(0);
                    controlRange.remove(element);
                    element.parentNode.removeChild(element);
                }
                this.refresh();
            } else if (this.rangeCount) {
                var ranges = this.getAllRanges();
                if (ranges.length) {
                    this.removeAllRanges();
                    for (var i = 0, len = ranges.length; i < len; ++i) {
                        ranges[i].deleteContents();
                    }
                    // The spec says nothing about what the selection should contain after calling deleteContents on each
                    // range. Firefox moves the selection to where the final selected range was, so we emulate that
                    this.addRange(ranges[len - 1]);
                }
            }
        };

        // The following are non-standard extensions
        selProto.eachRange = function(func, returnValue) {
            for (var i = 0, len = this._ranges.length; i < len; ++i) {
                if ( func( this.getRangeAt(i) ) ) {
                    return returnValue;
                }
            }
        };

        selProto.getAllRanges = function() {
            var ranges = [];
            this.eachRange(function(range) {
                ranges.push(range);
            });
            return ranges;
        };

        selProto.setSingleRange = function(range, direction) {
            this.removeAllRanges();
            this.addRange(range, direction);
        };

        selProto.callMethodOnEachRange = function(methodName, params) {
            var results = [];
            this.eachRange( function(range) {
                results.push( range[methodName].apply(range, params) );
            } );
            return results;
        };
        
        function createStartOrEndSetter(isStart) {
            return function(node, offset) {
                var range;
                if (this.rangeCount) {
                    range = this.getRangeAt(0);
                    range["set" + (isStart ? "Start" : "End")](node, offset);
                } else {
                    range = api.createRange(this.win.document);
                    range.setStartAndEnd(node, offset);
                }
                this.setSingleRange(range, this.isBackward());
            };
        }

        selProto.setStart = createStartOrEndSetter(true);
        selProto.setEnd = createStartOrEndSetter(false);
        
        // Add select() method to Range prototype. Any existing selection will be removed.
        api.rangePrototype.select = function(direction) {
            getSelection( this.getDocument() ).setSingleRange(this, direction);
        };

        selProto.changeEachRange = function(func) {
            var ranges = [];
            var backward = this.isBackward();

            this.eachRange(function(range) {
                func(range);
                ranges.push(range);
            });

            this.removeAllRanges();
            if (backward && ranges.length == 1) {
                this.addRange(ranges[0], "backward");
            } else {
                this.setRanges(ranges);
            }
        };

        selProto.containsNode = function(node, allowPartial) {
            return this.eachRange( function(range) {
                return range.containsNode(node, allowPartial);
            }, true ) || false;
        };

        selProto.getBookmark = function(containerNode) {
            return {
                backward: this.isBackward(),
                rangeBookmarks: this.callMethodOnEachRange("getBookmark", [containerNode])
            };
        };

        selProto.moveToBookmark = function(bookmark) {
            var selRanges = [];
            for (var i = 0, rangeBookmark, range; rangeBookmark = bookmark.rangeBookmarks[i++]; ) {
                range = api.createRange(this.win);
                range.moveToBookmark(rangeBookmark);
                selRanges.push(range);
            }
            if (bookmark.backward) {
                this.setSingleRange(selRanges[0], "backward");
            } else {
                this.setRanges(selRanges);
            }
        };

        selProto.toHtml = function() {
            var rangeHtmls = [];
            this.eachRange(function(range) {
                rangeHtmls.push( DomRange.toHtml(range) );
            });
            return rangeHtmls.join("");
        };

        if (features.implementsTextRange) {
            selProto.getNativeTextRange = function() {
                var sel, textRange;
                if ( (sel = this.docSelection) ) {
                    var range = sel.createRange();
                    if (isTextRange(range)) {
                        return range;
                    } else {
                        throw module.createError("getNativeTextRange: selection is a control selection"); 
                    }
                } else if (this.rangeCount > 0) {
                    return api.WrappedTextRange.rangeToTextRange( this.getRangeAt(0) );
                } else {
                    throw module.createError("getNativeTextRange: selection contains no range");
                }
            };
        }

        function inspect(sel) {
            var rangeInspects = [];
            var anchor = new DomPosition(sel.anchorNode, sel.anchorOffset);
            var focus = new DomPosition(sel.focusNode, sel.focusOffset);
            var name = (typeof sel.getName == "function") ? sel.getName() : "Selection";

            if (typeof sel.rangeCount != "undefined") {
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    rangeInspects[i] = DomRange.inspect(sel.getRangeAt(i));
                }
            }
            return "[" + name + "(Ranges: " + rangeInspects.join(", ") +
                    ")(anchor: " + anchor.inspect() + ", focus: " + focus.inspect() + "]";
        }

        selProto.getName = function() {
            return "WrappedSelection";
        };

        selProto.inspect = function() {
            return inspect(this);
        };

        selProto.detach = function() {
            actOnCachedSelection(this.win, "delete");
            deleteProperties(this);
        };

        WrappedSelection.detachAll = function() {
            actOnCachedSelection(null, "deleteAll");
        };

        WrappedSelection.inspect = inspect;
        WrappedSelection.isDirectionBackward = isDirectionBackward;

        api.Selection = WrappedSelection;

        api.selectionPrototype = selProto;

        api.addShimListener(function(win) {
            if (typeof win.getSelection == "undefined") {
                win.getSelection = function() {
                    return getSelection(win);
                };
            }
            win = null;
        });
    });
    

    /*----------------------------------------------------------------------------------------------------------------*/

    // Wait for document to load before initializing
    var docReady = false;

    var loadHandler = function(e) {
        if (!docReady) {
            docReady = true;
            if (!api.initialized && api.config.autoInitialize) {
                init();
            }
        }
    };

    if (isBrowser) {
        // Test whether the document has already been loaded and initialize immediately if so
        if (document.readyState == "complete") {
            loadHandler();
        } else {
            if (isHostMethod(document, "addEventListener")) {
                document.addEventListener("DOMContentLoaded", loadHandler, false);
            }

            // Add a fallback in case the DOMContentLoaded event isn't supported
            addListener(window, "load", loadHandler);
        }
    }

    return api;
}, this);
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js":[function(require,module,exports){
//     Underscore.js 1.8.1
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var isArrayLike = function(collection) {
    var length = collection && collection.length;
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, target) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    return _.indexOf(obj, target) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, 'length').length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = list && list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    var i = 0, length = array && array.length;
    if (typeof isSorted == 'number') {
      i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
    } else if (isSorted && length) {
      i = _.sortedIndex(array, item);
      return array[i] === item ? i : -1;
    }
    if (item !== item) {
      return _.findIndex(slice.call(array, i), _.isNaN);
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    var idx = array ? array.length : 0;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    if (item !== item) {
      return _.findLastIndex(slice.call(array, 0, idx), _.isNaN);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = array != null && array.length;
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createIndexFinder(1);

  _.findLastIndex = createIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj, iteratee, context) {
    var result = {}, key;
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      iteratee = optimizeCb(iteratee, context);
      var keys = _.allKeys(obj);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
    } else {
      var keys = flatten(arguments, false, false, 1);
      obj = new Object(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (key in obj) result[key] = obj[key];
      }
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of 
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
  
  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/package.json":[function(require,module,exports){
module.exports=module.exports=module.exports={
  "name": "readium",
  "version": "0.0.1",
  "description": "readium",
  "main": "src/index.js",
  "readme": "README.md",
  "keywords": ["readium", "hmh"],
  "repository": "TODO",
  "dependencies": {
    "backbone": "^1.1.2",
    "epub-cfi": "^0.0.1",
    "jquery": "^2.1.3",
    "rangy": "^1.3.0-alpha.20140921",
    "underscore": "^1.7.0",
    "URIjs": "^1.14.1"
  },
  "devDependencies": {
    "browserify": "^8.1.1",
    "envify": "^3.2.0",
    "livereloadify": "^2.0.0",
    "node-static": "^0.7.6",
    "uglify-js": "~2.4.16",
    "watchify": "^2.2.1"
  },
  "scripts": {
    "build":      "NODE_ENV=production browserify src/app.js > ./dist/readium.js && uglifyjs ./dist/readium.js -cm > ./dist/readium.min.js",
    "livereload": "livereloadify ./public",
    "start": "npm run watch & npm run livereload & npm run static",
    "static": "static ./public --port 3000",
    "test": "jest",
    "watch": "watchify -o ./public/readium.js -v -d src/app.js"
  },
  "author": "Darío Javier Cravero <dario.cravero@hmhco.com>",
  "license": "TBD",
  "browserify": {
    "transform": [
      "envify"
    ]
  }
}

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/app.js":[function(require,module,exports){
(function (process){
var Readium = require('./index')

var reader = new Readium.Reader({
  useSimpleLoader: true
}, {
  el: '#readium-container'
})

//  https://github.com/readium/readium-js-viewer/blob/master/lib/EpubReader.js#L643-L792
//  Readium.Reader.readiumOptions {
//    useSimpleLoader: true, /* true to load from an expanded ePub; false to unpack it on the fly */
//    jsLibRoot: '/path/to/third/party',
//    openBookOptions: {} /* TODO Define */
//  }
//
//  Readium.Reader.readerOptions {
//    annotationsCSSUrl: '/path/to/file.css',
//    el: '#id', /* DOM selector */
//  }

reader.openPackageDocument('demo-book', function onOpenPackageDocument(packageDocument, options) {
  console.log('openPackageDocument', packageDocument, options)

  packageDocument.generateTocListDOM(function(html) {
    window.packageDocumentHtml = html;
    document.getElementById('toc').innerHTML = html.documentElement.querySelector('body').innerHTML;
  })

  if (process.env.node_env !== 'production') {
    window.readiumPackageDocument = packageDocument;
    window.readiumOptions = options;
  }
})

if (process.env.node_env !== 'production') {
  window.Readium = Readium
  window.readiumReader = reader;
}
}).call(this,require('_process'))

},{"./index":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/index.js","_process":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/browserify/node_modules/process/browser.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/annotations.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var BookmarkView = require('./bookmark-view')
var HighlightGroup = require('./highlight-group')
var ImageAnnotation = require('./image-annotation')
var UnderlineGroup = require('./underline-group')

var Annotations = Backbone.Model.extend({

  defaults: function() {
    return {
      "bookmarkViews": [],
      "highlights": [],
      "markers": {},
      "underlines": [],
      "imageAnnotations": [],
      "annotationHash": {},
      "offsetTopAddition": 0,
      "offsetLeftAddition": 0,
      "readerBoundElement": undefined
    };
  },

  initialize: function(attributes, options) {},


  remove: function() {
    var that = this;
    _.each(this.get("highlights"), function(highlightGroup) {
      highlightGroup.remove();
    });
  },

  redrawAnnotations: function(offsetTop, offsetLeft) {

    var that = this;
    // Highlights
    _.each(this.get("highlights"), function(highlightGroup) {
      highlightGroup.resetHighlights(that.get("readerBoundElement"), offsetTop, offsetLeft);
    });

    // Bookmarks
    _.each(this.get("bookmarkViews"), function(bookmarkView) {
      bookmarkView.resetBookmark(offsetTop, offsetLeft);
    });

    // Underlines
    _.each(this.get("underlines"), function(underlineGroup) {
      underlineGroup.resetUnderlines(that.get("readerBoundElement"), offsetTop, offsetLeft);
    });
  },

  getBookmark: function(id) {

    var bookmarkView = this.get("annotationHash")[id];
    if (bookmarkView) {
      return bookmarkView.bookmark.toInfo();
    } else {
      return undefined;
    }
  },

  getHighlight: function(id) {

    var highlight = this.get("annotationHash")[id];
    if (highlight) {
      return highlight.toInfo();
    } else {
      return undefined;
    }
  },

  getUnderline: function(id) {

    var underline = this.get("annotationHash")[id];
    if (underline) {
      return underline.toInfo();
    } else {
      return undefined;
    }
  },

  getBookmarks: function() {

    var bookmarks = [];
    _.each(this.get("bookmarkViews"), function(bookmarkView) {

      bookmarks.push(bookmarkView.bookmark.toInfo());
    });
    return bookmarks;
  },

  getHighlights: function() {

    var highlights = [];
    _.each(this.get("highlights"), function(highlight) {

      highlights.push(highlight.toInfo());
    });
    return highlights;
  },

  getUnderlines: function() {

    var underlines = [];
    _.each(this.get("underlines"), function(underline) {

      underlines.push(underline.toInfo());
    });
    return underlines;
  },

  getImageAnnotations: function() {

    var imageAnnotations = [];
    _.each(this.get("imageAnnotations"), function(imageAnnotation) {

      imageAnnotations.push(imageAnnotation.toInfo());
    });
    return imageAnnotations;
  },

  addBookmark: function(CFI, targetElement, annotationId, offsetTop, offsetLeft, type) {

    if (!offsetTop) {
      offsetTop = this.get("offsetTopAddition");
    }
    if (!offsetLeft) {
      offsetLeft = this.get("offsetLeftAddition");
    }

    annotationId = annotationId.toString();
    this.validateAnnotationId(annotationId);

    var bookmarkView = new BookmarkView({
      CFI: CFI,
      targetElement: targetElement,
      offsetTopAddition: offsetTop,
      offsetLeftAddition: offsetLeft,
      id: annotationId.toString(),
      bbPageSetView: this.get("bbPageSetView"),
      type: type
    });
    this.get("annotationHash")[annotationId] = bookmarkView;
    this.get("bookmarkViews").push(bookmarkView);
    $(this.get("readerBoundElement")).append(bookmarkView.render());
  },

  removeHighlight: function(annotationId) {
    var annotationHash = this.get("annotationHash");
    var highlights = this.get("highlights");
    var markers = this.get("markers");

    if (!markers[annotationId])
      return;

    var startMarker = markers[annotationId].startMarker;
    var endMarker = markers[annotationId].endMarker;

    startMarker.parentNode.removeChild(startMarker);
    endMarker.parentNode.removeChild(endMarker);

    delete markers[annotationId];

    delete annotationHash[annotationId];

    highlights = _.reject(highlights,
      function(obj) {
        if (obj.id == annotationId) {
          obj.destroyCurrentHighlights();
          return true;
        } else {
          return false;
        }
      }
    );


    this.set("highlights", highlights);
  },

  addHighlight: function(CFI, highlightedTextNodes, annotationId, offsetTop, offsetLeft, startMarker, endMarker, styles) {
    if (!offsetTop) {
      offsetTop = this.get("offsetTopAddition");
    }
    if (!offsetLeft) {
      offsetLeft = this.get("offsetLeftAddition");
    }

    annotationId = annotationId.toString();
    this.validateAnnotationId(annotationId);

    var highlightGroup = new HighlightGroup({
      CFI: CFI,
      selectedNodes: highlightedTextNodes,
      offsetTopAddition: offsetTop,
      offsetLeftAddition: offsetLeft,
      styles: styles,
      id: annotationId,
      bbPageSetView: this.get("bbPageSetView"),
      scale: this.get("scale")
    });
    this.get("annotationHash")[annotationId] = highlightGroup;
    this.get("highlights").push(highlightGroup);
    this.get("markers")[annotationId] = {
      "startMarker": startMarker,
      "endMarker": endMarker
    };
    highlightGroup.renderHighlights(this.get("readerBoundElement"));
  },

  addUnderline: function(CFI, underlinedTextNodes, annotationId, offsetTop, offsetLeft, styles) {

    if (!offsetTop) {
      offsetTop = this.get("offsetTopAddition");
    }
    if (!offsetLeft) {
      offsetLeft = this.get("offsetLeftAddition");
    }

    annotationId = annotationId.toString();
    this.validateAnnotationId(annotationId);

    var underlineGroup = new UnderlineGroup({
      CFI: CFI,
      selectedNodes: underlinedTextNodes,
      offsetTopAddition: offsetTop,
      offsetLeftAddition: offsetLeft,
      styles: styles,
      id: annotationId,
      bbPageSetView: this.get("bbPageSetView")
    });
    this.get("annotationHash")[annotationId] = underlineGroup;
    this.get("underlines").push(underlineGroup);
    underlineGroup.renderUnderlines(this.get("readerBoundElement"));
  },

  addImageAnnotation: function(CFI, imageNode, annotationId) {

    annotationId = annotationId.toString();
    this.validateAnnotationId(annotationId);

    var imageAnnotation = new ImageAnnotation({
      CFI: CFI,
      imageNode: imageNode,
      id: annotationId,
      bbPageSetView: this.get("bbPageSetView")
    });
    this.get("annotationHash")[annotationId] = imageAnnotation;
    this.get("imageAnnotations").push(imageAnnotation);
    imageAnnotation.render();
  },

  updateAnnotationView: function(id, styles) {
    var annotationViews = this.get("annotationHash")[id];

    annotationViews.setStyles(styles);

    return annotationViews;
  },

  // REFACTORING CANDIDATE: Some kind of hash lookup would be more efficient here, might want to 
  //   change the implementation of the annotations as an array
  validateAnnotationId: function(id) {

    if (this.get("annotationHash")[id]) {
      throw new Error("That annotation id already exists; annotation not added");
    }
  }
});

module.exports = Annotations
},{"./bookmark-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/bookmark-view.js","./highlight-group":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/highlight-group.js","./image-annotation":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/image-annotation.js","./underline-group":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/underline-group.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/bookmark-view.js":[function(require,module,exports){
var Backbone = require('backbone')
var Bookmark = require('./bookmark')

var BookmarkView = Backbone.View.extend({

  el: "<div></div>",

  events: {
    "mouseenter": "setHoverBookmark",
    "mouseleave": "setBaseBookmark",
    "click": "clickHandler"
  },

  initialize: function(options) {

    this.bookmark = new Bookmark({
      CFI: options.CFI,
      targetElement: options.targetElement,
      offsetTopAddition: options.offsetTopAddition,
      offsetLeftAddition: options.offsetLeftAddition,
      id: options.id,
      bbPageSetView: options.bbPageSetView,
      type: options.type
    });
  },

  resetBookmark: function(offsetTop, offsetLeft) {

    if (offsetTop) {
      this.bookmark.set({
        offsetTopAddition: offsetTop
      });
    }

    if (offsetLeft) {
      this.bookmark.set({
        offsetLeftAddition: offsetLeft
      });
    }
    this.setCSS();
  },

  render: function() {

    this.setCSS();
    return this.el;
  },

  setCSS: function() {

    var absoluteTop;
    var absoluteLeft;

    if (this.bookmark.get("type") === "comment") {
      absoluteTop = this.bookmark.getAbsoluteTop();
      absoluteLeft = this.bookmark.getAbsoluteLeft();
      this.$el.css({
        "top": absoluteTop + "px",
        "left": absoluteLeft + "px",
        "width": "50px",
        "height": "50px",
        "position": "absolute"
      });
      this.$el.addClass("comment");
    } else {
      this.$el.addClass("bookmark");
    }
  },

  setHoverBookmark: function(event) {

    event.stopPropagation();
    if (this.$el.hasClass("comment")) {
      this.$el.removeClass("comment");
      this.$el.addClass("hover-comment");
    }
  },

  setBaseBookmark: function(event) {

    event.stopPropagation();
    if (this.$el.hasClass("hover-comment")) {
      this.$el.removeClass("hover-comment");
      this.$el.addClass("comment");
    }
  },

  clickHandler: function(event) {

    event.stopPropagation();
    var type;
    if (this.bookmark.get("type") === "comment") {
      type = "comment";
    } else {
      type = "bookmark";
    }

    this.bookmark.get("bbPageSetView").trigger("annotationClicked",
      type,
      this.bookmark.get("CFI"),
      this.bookmark.get("id"),
      this.$el.css("top"),
      this.$el.css("left"),
      event
    );
  }
});

module.exports = BookmarkView
},{"./bookmark":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/bookmark.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/bookmark.js":[function(require,module,exports){
var $ = require('jquery')
var Backbone = require('backbone')

var Bookmark = Backbone.Model.extend({
  defaults: {
    "isVisible": false,
    "bookmarkCenteringAdjustment": 15,
    "bookmarkTopAdjustment": 45
  },

  initialize: function(attributes, options) {

    // Figure out the top and left of the bookmark
    // This should include the additional offset provided by the annotations object
  },

  getAbsoluteTop: function() {

    var targetElementTop = $(this.get("targetElement")).offset().top;
    var bookmarkAbsoluteTop = this.get("offsetTopAddition") + targetElementTop - this.get("bookmarkTopAdjustment");
    return bookmarkAbsoluteTop;
  },

  getAbsoluteLeft: function() {

    var targetElementLeft = $(this.get("targetElement")).offset().left;
    var bookmarkAbsoluteLeft = this.get("offsetLeftAddition") + targetElementLeft - this.get("bookmarkCenteringAdjustment");
    return bookmarkAbsoluteLeft;
  },

  toInfo: function() {

    return {

      id: this.get("id"),
      type: "bookmark",
      CFI: this.get("CFI")
    };
  }
});

module.exports = Bookmark
},{"backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/highlight-group.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var HighlightView = require('./highlight-view')
var TextLineInferrer = require('./text-line-inferrer')

var HighlightGroup = Backbone.Model.extend({

  defaults: function() {
    return {
      "selectedNodes": [],
      "highlightViews": []
    };
  },

  initialize: function(attributes, options) {
    this.set("scale", attributes.scale);
    this.constructHighlightViews();
  },

  // --------------- PRIVATE HELPERS ---------------------------------------

  highlightGroupCallback: function(event) {

    var that = this;

    // Trigger this event on each of the highlight views (except triggering event)
    if (event.type === "click") {
      that.get("bbPageSetView").trigger("annotationClicked", "highlight", that.get("CFI"), that.get("id"), event);
      return;
    }


    // Trigger this event on each of the highlight views (except triggering event)
    if (event.type === "contextmenu") {
      that.get("bbPageSetView").trigger("annotationRightClicked", "highlight", that.get("CFI"), that.get("id"), event);
      return;
    }


    // Events that are called on each member of the group
    _.each(this.get("highlightViews"), function(highlightView) {

      if (event.type === "mouseenter") {
        highlightView.setHoverHighlight();
      } else if (event.type === "mouseleave") {
        highlightView.setBaseHighlight();
      }
    });
  },

  constructHighlightViews: function() {

    var that = this;
    var rectList = [];
    var inferrer;
    var inferredLines;

    _.each(this.get("selectedNodes"), function(node, index) {

      var rects;
      var range = document.createRange();
      range.selectNodeContents(node);
      rects = range.getClientRects();

      // REFACTORING CANDIDATE: Maybe a better way to append an array here
      _.each(rects, function(rect) {
        rectList.push(rect);
      });
    });

    inferrer = new TextLineInferrer();
    inferredLines = inferrer.inferLines(rectList);

    var scale = this.get("scale");

    _.each(inferredLines, function(line, index) {

      var highlightTop = line.startTop / scale;;
      var highlightLeft = line.left / scale;;
      var highlightHeight = line.avgHeight / scale;
      var highlightWidth = line.width / scale;;

      var highlightView = new HighlightView({
        CFI: that.get("CFI"),
        top: highlightTop + that.get("offsetTopAddition"),
        left: highlightLeft + that.get("offsetLeftAddition"),
        height: highlightHeight,
        width: highlightWidth,
        styles: that.get('styles'),
        highlightGroupCallback: that.highlightGroupCallback,
        callbackContext: that
      });

      that.get("highlightViews").push(highlightView);
    });
  },

  resetHighlights: function(viewportElement, offsetTop, offsetLeft) {

    if (offsetTop) {
      this.set({
        offsetTopAddition: offsetTop
      });
    }
    if (offsetLeft) {
      this.set({
        offsetLeftAddition: offsetLeft
      });
    }

    this.destroyCurrentHighlights();
    this.constructHighlightViews();
    this.renderHighlights(viewportElement);
  },

  // REFACTORING CANDIDATE: Ensure that event listeners are being properly cleaned up. 
  destroyCurrentHighlights: function() {

    _.each(this.get("highlightViews"), function(highlightView) {
      highlightView.remove();
      highlightView.off();
    });

    this.get("highlightViews").length = 0;
  },

  renderHighlights: function(viewportElement) {

    _.each(this.get("highlightViews"), function(view, index) {
      $(viewportElement).append(view.render());
    });
  },

  toInfo: function() {

    return {

      id: this.get("id"),
      type: "highlight",
      CFI: this.get("CFI")
    };
  },

  setStyles: function(styles) {
    var highlightViews = this.get('highlightViews');

    this.set({
      styles: styles
    });

    _.each(highlightViews, function(view, index) {
      view.setStyles(styles);
    });
  }
});

module.exports = HighlightGroup
},{"./highlight-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/highlight-view.js","./text-line-inferrer":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/text-line-inferrer.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/highlight-view.js":[function(require,module,exports){
var Backbone = require('Backbone')
var Highlight = require('./highlight')

var HighlightView = Backbone.View.extend({

  el: "<div class='highlight'></div>",

  events: {
    "mouseenter": "highlightEvent",
    "mouseleave": "highlightEvent",
    "click": "highlightEvent",
    "contextmenu": "highlightEvent"
  },

  initialize: function(options) {

    this.highlight = new Highlight({
      CFI: options.CFI,
      top: options.top,
      left: options.left,
      height: options.height,
      width: options.width,
      styles: options.styles,
      highlightGroupCallback: options.highlightGroupCallback,
      callbackContext: options.callbackContext
    });
  },

  render: function() {

    this.setCSS();
    return this.el;
  },

  resetPosition: function(top, left, height, width) {

    this.highlight.set({
      top: top,
      left: left,
      height: height,
      width: width
    });
    this.setCSS();
  },

  setStyles: function(styles) {

    this.highlight.set({
      styles: styles,
    });
    this.render();
  },

  setCSS: function() {

    var styles = this.highlight.get("styles") || {};

    this.$el.css({
      "top": this.highlight.get("top") + "px",
      "left": this.highlight.get("left") + "px",
      "height": this.highlight.get("height") + "px",
      "width": this.highlight.get("width") + "px",
      "background-color": styles.fill_color || "normal",
    });
  },

  setBaseHighlight: function() {

    this.$el.addClass("highlight");
    this.$el.removeClass("hover-highlight");
  },

  setHoverHighlight: function() {

    this.$el.addClass("hover-highlight");
    this.$el.removeClass("highlight");
  },

  highlightEvent: function(event) {

    event.stopPropagation();
    var highlightGroupCallback = this.highlight.get("highlightGroupCallback");
    var highlightGroupContext = this.highlight.get("callbackContext");
    highlightGroupContext.highlightGroupCallback(event);
  }
});

module.exports = HighlightView
},{"./highlight":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/highlight.js","Backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/Backbone/backbone.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/highlight.js":[function(require,module,exports){
var Backbone = require('backbone')

var Highlight = Backbone.Model.extend({
  defaults: {
    "isVisible": false
  },
  initialize: function(attributes, options) {}
});

module.exports = Highlight
},{"backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/image-annotation.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')


// Rationale: An image annotation does NOT have a view, as we don't know the state of an image element within an EPUB; it's entirely
//   possible that an EPUB image element could have a backbone view associated with it already, which would cause problems if we 
//   tried to associate another backbone view. As such, this model modifies CSS properties for an annotated image element.
//   
//   An image annotation view that manages an absolutely position element (similar to bookmarks, underlines and highlights) can be
//   added if more functionality is required. 

var ImageAnnotation = Backbone.Model.extend({

  initialize: function(attributes, options) {

    // Set handlers here. Can use jquery handlers
    var that = this;
    var $imageElement = $(this.get("imageNode"));
    $imageElement.on("mouseenter", function() {
      that.setMouseenterBorder();
    });
    $imageElement.on("mouseleave", function() {
      that.setMouseleaveBorder();
    });
    $imageElement.on("click", function() {
      that.get("bbPageSetView").trigger("annotationClicked", "image", that.get("CFI"), that.get("id"), event);
    });
  },

  render: function() {

    this.setCSS();
  },

  setCSS: function() {

    $(this.get("imageNode")).css({
      "border": "5px solid rgb(255, 0, 0)",
      "border": "5px solid rgba(255, 0, 0, 0.2)",
      "-webkit-background-clip": "padding-box",
      "background-clip": "padding-box"
    });
  },

  setMouseenterBorder: function() {

    $(this.get("imageNode")).css({
      "border": "5px solid rgba(255, 0, 0, 0.4)"
    });
  },

  setMouseleaveBorder: function() {

    $(this.get("imageNode")).css({
      "border": "5px solid rgba(255, 0, 0, 0.2)"
    });
  }
});

module.exports = ImageAnnotation
},{"backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/index.js":[function(require,module,exports){
// This was readium-js-shared/lib/annotations_module.js
// It was renamed slightly (no Module bit ) and split into multiple files for simplicity
// EpubAnnotationsModule is now EpubAnnotations. EpubAnnotations namespace was dropped in favour
// of explicit requires where used.

var ReflowableAnnotations = require('./reflowable-annotations')

var EpubAnnotations = function(contentDocumentDOM, bbPageSetView, annotationCSSUrl) {
  var reflowableAnnotations = new ReflowableAnnotations({
    contentDocumentDOM: contentDocumentDOM,
    bbPageSetView: bbPageSetView,
    annotationCSSUrl: annotationCSSUrl,
  });

  // Description: The public interface
  return {
    addSelectionHighlight: function(id, type, styles) {
      return reflowableAnnotations.addSelectionHighlight(id, type, styles);
    },
    addSelectionBookmark: function(id, type) {
      return reflowableAnnotations.addSelectionBookmark(id, type);
    },
    addSelectionImageAnnotation: function(id) {
      return reflowableAnnotations.addSelectionImageAnnotation(id);
    },
    addHighlight: function(CFI, id, type, styles) {
      return reflowableAnnotations.addHighlight(CFI, id, type, styles);
    },
    addBookmark: function(CFI, id, type) {
      return reflowableAnnotations.addBookmark(CFI, id, type);
    },
    addImageAnnotation: function(CFI, id) {
      return reflowableAnnotations.addImageAnnotation(CFI, id);
    },
    updateAnnotationView: function(id, styles) {
      return reflowableAnnotations.updateAnnotationView(id, styles);
    },
    redraw: function() {
      return reflowableAnnotations.redraw();
    },
    getBookmark: function(id) {
      return reflowableAnnotations.annotations.getBookmark(id);
    },
    getBookmarks: function() {
      return reflowableAnnotations.annotations.getBookmarks();
    },
    getHighlight: function(id) {
      return reflowableAnnotations.annotations.getHighlight(id);
    },
    getHighlights: function() {
      return reflowableAnnotations.annotations.getHighlights();
    },
    getUnderline: function(id) {
      return reflowableAnnotations.annotations.getUnderline(id);
    },
    getUnderlines: function() {
      return reflowableAnnotations.annotations.getUnderlines();
    },
    getImageAnnotation: function() {

    },
    getImageAnnotations: function() {

    },
    removeAnnotation: function(annotationId) {
      return reflowableAnnotations.remove(annotationId);
    },
    getCurrentSelectionCFI: function() {
      return reflowableAnnotations.getCurrentSelectionCFI();
    },
    getCurrentSelectionOffsetCFI: function() {
      return reflowableAnnotations.getCurrentSelectionOffsetCFI();
    },
    removeHighlight: function(annotationId) {
      return reflowableAnnotations.removeHighlight(annotationId);
    }
  };
};

module.exports = EpubAnnotations
},{"./reflowable-annotations":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/reflowable-annotations.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/reflowable-annotations.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Annotations = require('./annotations')
var Backbone = require('backbone')
var EPUBcfi = require('epub-cfi')

var ReflowableAnnotations = Backbone.Model.extend({

  initialize: function(attributes, options) {

    this.epubCFI = EPUBcfi;
    this.annotations = new Annotations({
      offsetTopAddition: 0,
      offsetLeftAddition: 0,
      readerBoundElement: $("html", this.get("contentDocumentDOM"))[0],
      scale: 0,
      bbPageSetView: this.get("bbPageSetView")
    });
    // inject annotation CSS into iframe 


    var annotationCSSUrl = this.get("annotationCSSUrl");
    if (annotationCSSUrl) {
      this.injectAnnotationCSS(annotationCSSUrl);
    }

    // emit an event when user selects some text.
    var epubWindow = $(this.get("contentDocumentDOM"));
    var self = this;
    epubWindow.on("mouseup", function(event) {
      var range = self.getCurrentSelectionRange();
      if (range === undefined) {
        return;
      }
      if (range.startOffset - range.endOffset) {
        self.annotations.get("bbPageSetView").trigger("textSelectionEvent", event);
      }
    });


  },

  // ------------------------------------------------------------------------------------ //
  //  "PUBLIC" METHODS (THE API)                                                          //
  // ------------------------------------------------------------------------------------ //

  redraw: function() {

    var leftAddition = -this.getPaginationLeftOffset();
    this.annotations.redrawAnnotations(0, leftAddition);
  },

  removeHighlight: function(annotationId) {
    return this.annotations.removeHighlight(annotationId)
  },



  addHighlight: function(CFI, id, type, styles) {

    var CFIRangeInfo;
    var range;
    var rangeStartNode;
    var rangeEndNode;
    var selectedElements;
    var leftAddition;
    var startMarkerHtml = this.getRangeStartMarker(CFI, id);
    var endMarkerHtml = this.getRangeEndMarker(CFI, id);

    // TODO webkit specific?
    // FIXME Check this polyfill https://github.com/jfsiii/XCSSMatrix
    var $html = $(this.get("contentDocumentDOM"));
    var matrix = $('html', $html).css('-webkit-transform');
    var scale = new WebKitCSSMatrix(matrix).a;
    this.set("scale", scale);

    try {
      CFIRangeInfo = this.epubCFI.injectRangeElements(
        CFI,
        this.get("contentDocumentDOM"),
        startMarkerHtml,
        endMarkerHtml, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );

      // Get start and end marker for the id, using injected into elements
      // REFACTORING CANDIDATE: Abstract range creation to account for no previous/next sibling, for different types of
      //   sibiling, etc. 
      rangeStartNode = CFIRangeInfo.startElement.nextSibling ? CFIRangeInfo.startElement.nextSibling : CFIRangeInfo.startElement;
      rangeEndNode = CFIRangeInfo.endElement.previousSibling ? CFIRangeInfo.endElement.previousSibling : CFIRangeInfo.endElement;
      range = document.createRange();
      range.setStart(rangeStartNode, 0);
      range.setEnd(rangeEndNode, rangeEndNode.length);

      selectionInfo = this.getSelectionInfo(range);
      leftAddition = -this.getPaginationLeftOffset();

      if (type === "highlight") {
        this.annotations.set('scale', this.get('scale'));
        this.annotations.addHighlight(CFI, selectionInfo.selectedElements, id, 0, leftAddition, CFIRangeInfo.startElement, CFIRangeInfo.endElement, styles);
      } else if (type === "underline") {
        this.annotations.addUnderline(CFI, selectionInfo.selectedElements, id, 0, leftAddition, styles);
      }

      return {
        CFI: CFI,
        selectedElements: selectionInfo.selectedElements
      };

    } catch (error) {
      console.log(error.message);
    }
  },

  addBookmark: function(CFI, id, type) {

    var selectedElements;
    var bookmarkMarkerHtml = this.getBookmarkMarker(CFI, id);
    var $injectedElement;
    var leftAddition;

    try {
      $injectedElement = this.epubCFI.injectElement(
        CFI,
        this.get("contentDocumentDOM"),
        bookmarkMarkerHtml, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );

      // Add bookmark annotation here
      leftAddition = -this.getPaginationLeftOffset();
      this.annotations.addBookmark(CFI, $injectedElement[0], id, 0, leftAddition, type);

      return {

        CFI: CFI,
        selectedElements: $injectedElement[0]
      };

    } catch (error) {
      console.log(error.message);
    }
  },

  addImageAnnotation: function(CFI, id) {

    var selectedElements;
    var bookmarkMarkerHtml = this.getBookmarkMarker(CFI, id);
    var $targetImage;

    try {
      $targetImage = this.epubCFI.getTargetElement(
        CFI,
        this.get("contentDocumentDOM"), ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );
      this.annotations.addImageAnnotation(CFI, $targetImage[0], id);

      return {

        CFI: CFI,
        selectedElements: $targetImage[0]
      };

    } catch (error) {
      console.log(error.message);
    }
  },

  // this returns a partial CFI only!!
  getCurrentSelectionCFI: function() {
    var currentSelection = this.getCurrentSelectionRange();
    var CFI;
    if (currentSelection) {
      selectionInfo = this.getSelectionInfo(currentSelection);
      CFI = selectionInfo.CFI;
    }

    return CFI;
  },

  // this returns a partial CFI only!!
  getCurrentSelectionOffsetCFI: function() {
    var currentSelection = this.getCurrentSelectionRange();

    var CFI;
    if (currentSelection) {
      CFI = this.generateCharOffsetCFI(currentSelection);
    }
    return CFI;
  },


  /// TODODM refactor thhis using getCurrentSelectionCFI (above)


  addSelectionHighlight: function(id, type, styles) {

    var arbitraryPackageDocCFI = "/99!"
    var generatedContentDocCFI;
    var CFI;
    var selectionInfo;
    var currentSelection = this.getCurrentSelectionRange();
    var annotationInfo;

    if (currentSelection) {

      selectionInfo = this.getSelectionInfo(currentSelection);
      generatedContentDocCFI = selectionInfo.CFI;
      CFI = "epubcfi(" + arbitraryPackageDocCFI + generatedContentDocCFI + ")";
      if (type === "highlight") {
        annotationInfo = this.addHighlight(CFI, id, type, styles);
      } else if (type === "underline") {
        annotationInfo = this.addHighlight(CFI, id, type, styles);
      }

      // Rationale: The annotationInfo object returned from .addBookmark(...) contains the same value of 
      //   the CFI variable in the current scope. Since this CFI variable contains a "hacked" CFI value -
      //   only the content document portion is valid - we want to replace the annotationInfo.CFI property with
      //   the partial content document CFI portion we originally generated.
      annotationInfo.CFI = generatedContentDocCFI;
      return annotationInfo;
    } else {
      throw new Error("Nothing selected");
    }
  },

  addSelectionBookmark: function(id, type) {

    var arbitraryPackageDocCFI = "/99!"
    var generatedContentDocCFI;
    var CFI;
    var currentSelection = this.getCurrentSelectionRange();
    var annotationInfo;

    if (currentSelection) {

      generatedContentDocCFI = this.generateCharOffsetCFI(currentSelection);
      CFI = "epubcfi(" + arbitraryPackageDocCFI + generatedContentDocCFI + ")";
      annotationInfo = this.addBookmark(CFI, id, type);

      // Rationale: The annotationInfo object returned from .addBookmark(...) contains the same value of 
      //   the CFI variable in the current scope. Since this CFI variable contains a "hacked" CFI value -
      //   only the content document portion is valid - we want to replace the annotationInfo.CFI property with
      //   the partial content document CFI portion we originally generated.
      annotationInfo.CFI = generatedContentDocCFI;
      return annotationInfo;
    } else {
      throw new Error("Nothing selected");
    }
  },

  addSelectionImageAnnotation: function(id) {

    var arbitraryPackageDocCFI = "/99!"
    var generatedContentDocCFI;
    var CFI;
    var selectionInfo;
    var currentSelection = this.getCurrentSelectionRange();
    var annotationInfo;
    var firstSelectedImage;

    if (currentSelection) {

      selectionInfo = this.getSelectionInfo(currentSelection, ["img"]);
      firstSelectedImage = selectionInfo.selectedElements[0];
      generatedContentDocCFI = this.epubCFI.generateElementCFIComponent(
        firstSelectedImage, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );
      CFI = "epubcfi(" + arbitraryPackageDocCFI + generatedContentDocCFI + ")";
      annotationInfo = this.addImageAnnotation(CFI, id);

      // Rationale: The annotationInfo object returned from .addBookmark(...) contains the same value of 
      //   the CFI variable in the current scope. Since this CFI variable contains a "hacked" CFI value -
      //   only the content document portion is valid - we want to replace the annotationInfo.CFI property with
      //   the partial content document CFI portion we originally generated.
      annotationInfo.CFI = generatedContentDocCFI;
      return annotationInfo;
    } else {
      throw new Error("Nothing selected");
    }
  },

  updateAnnotationView: function(id, styles) {

    var annotationViews = this.annotations.updateAnnotationView(id, styles);

    return annotationViews;
  },

  // ------------------------------------------------------------------------------------ //
  //  "PRIVATE" HELPERS                                                                   //
  // ------------------------------------------------------------------------------------ //

  getSelectionInfo: function(selectedRange, elementType) {

    // Generate CFI for selected text
    var CFI = this.generateRangeCFI(selectedRange);
    var intervalState = {
      startElementFound: false,
      endElementFound: false
    };
    var selectedElements = [];

    if (!elementType) {
      var elementType = ["text"];
    }

    this.findSelectedElements(
      selectedRange.commonAncestorContainer,
      selectedRange.startContainer,
      selectedRange.endContainer,
      intervalState,
      selectedElements,
      elementType
    );

    // Return a list of selected text nodes and the CFI
    return {
      CFI: CFI,
      selectedElements: selectedElements
    };
  },

  generateRangeCFI: function(selectedRange) {

    var startNode = selectedRange.startContainer;
    var endNode = selectedRange.endContainer;
    var startOffset;
    var endOffset;
    var rangeCFIComponent;

    if (startNode.nodeType === Node.TEXT_NODE && endNode.nodeType === Node.TEXT_NODE) {

      startOffset = selectedRange.startOffset;
      endOffset = selectedRange.endOffset;

      rangeCFIComponent = this.epubCFI.generateCharOffsetRangeComponent(
        startNode,
        startOffset,
        endNode,
        endOffset, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );
      return rangeCFIComponent;
    } else {
      throw new Error("Selection start and end must be text nodes");
    }
  },

  generateCharOffsetCFI: function(selectedRange) {

    // Character offset
    var startNode = selectedRange.startContainer;
    var startOffset = selectedRange.startOffset;
    var charOffsetCFI;

    if (startNode.nodeType === Node.TEXT_NODE) {
      charOffsetCFI = this.epubCFI.generateCharacterOffsetCFIComponent(
        startNode,
        startOffset, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );
    }
    return charOffsetCFI;
  },

  // REFACTORING CANDIDATE: Convert this to jquery
  findSelectedElements: function(currElement, startElement, endElement, intervalState, selectedElements, elementTypes) {

    if (currElement === startElement) {
      intervalState.startElementFound = true;
    }

    if (intervalState.startElementFound === true) {
      this.addElement(currElement, selectedElements, elementTypes);
    }

    if (currElement === endElement) {
      intervalState.endElementFound = true;
      return;
    }

    if (currElement.firstChild) {
      this.findSelectedElements(currElement.firstChild, startElement, endElement, intervalState, selectedElements, elementTypes);
      if (intervalState.endElementFound) {
        return;
      }
    }

    if (currElement.nextSibling) {
      this.findSelectedElements(currElement.nextSibling, startElement, endElement, intervalState, selectedElements, elementTypes);
      if (intervalState.endElementFound) {
        return;
      }
    }
  },

  addElement: function(currElement, selectedElements, elementTypes) {

    // Check if the node is one of the types
    _.each(elementTypes, function(elementType) {

      if (elementType === "text") {
        if (currElement.nodeType === Node.TEXT_NODE) {
          selectedElements.push(currElement);
        }
      } else {
        if ($(currElement).is(elementType)) {
          selectedElements.push(currElement);
        }
      }
    });
  },

  // Rationale: This is a cross-browser method to get the currently selected text
  getCurrentSelectionRange: function() {

    var currentSelection;
    var iframeDocument = this.get("contentDocumentDOM");
    if (iframeDocument.getSelection) {
      currentSelection = iframeDocument.getSelection();

      if (currentSelection && currentSelection.rangeCount && (currentSelection.anchorOffset !== currentSelection.focusOffset)) {
        return currentSelection.getRangeAt(0);
      } else {
        return undefined;
      }
    } else if (iframeDocument.selection) {
      return iframeDocument.selection.createRange();
    } else {
      return undefined;
    }
  },

  getPaginationLeftOffset: function() {

    var $htmlElement = $("html", this.get("contentDocumentDOM"));
    var offsetLeftPixels = $htmlElement.css("left");
    var offsetLeft = parseInt(offsetLeftPixels.replace("px", ""));
    return offsetLeft;
  },

  getBookmarkMarker: function(CFI, id) {

    return "<span class='bookmark-marker cfi-marker' id='" + id + "' data-cfi='" + CFI + "'></span>";
  },

  getRangeStartMarker: function(CFI, id) {

    return "<span class='range-start-marker cfi-marker' id='start-" + id + "' data-cfi='" + CFI + "'></span>";
  },

  getRangeEndMarker: function(CFI, id) {

    return "<span class='range-end-marker cfi-marker' id='end-" + id + "' data-cfi='" + CFI + "'></span>";
  },

  injectAnnotationCSS: function(annotationCSSUrl) {

    var $contentDocHead = $("head", this.get("contentDocumentDOM"));
    $contentDocHead.append(
      $("<link/>", {
        rel: "stylesheet",
        href: annotationCSSUrl,
        type: "text/css"
      })
    );
  }
});

module.exports = ReflowableAnnotations
},{"./annotations":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/annotations.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","epub-cfi":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/index.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/text-line-inferrer.js":[function(require,module,exports){
var Backbone = require('backbone')

// Rationale: The order of these matters
var TextLineInferrer = Backbone.Model.extend({

  initialize: function(attributes, options) {},

  // ----------------- PUBLIC INTERFACE --------------------------------------------------------------

  inferLines: function(rectList) {

    var inferredLines = [];
    var numRects = rectList.length;
    var numLines = 0;
    var currLine;
    var currRect;
    var rectAppended;

    // Iterate through each rect
    for (var currRectNum = 0; currRectNum <= numRects - 1; currRectNum++) {
      currRect = rectList[currRectNum];

      // Check if the rect can be added to any of the current lines
      rectAppended = false;
      for (var currLineNum = 0; currLineNum <= numLines - 1; currLineNum++) {
        currLine = inferredLines[currLineNum];

        if (this.includeRectInLine(currLine, currRect.top, currRect.left, currRect.width, currRect.height)) {
          this.expandLine(currLine, currRect.left, currRect.top, currRect.width, currRect.height);
          rectAppended = true;
          break;
        }
      }

      if (rectAppended) {
        continue;
      }
      // If the rect can't be added to any existing lines, create a new line
      else {
        inferredLines.push(this.createNewLine(currRect.left, currRect.top, currRect.width, currRect.height));
        numLines = numLines + 1; // Update the number of lines, so we're not using .length on every iteration
      }
    }

    return inferredLines;
  },


  // ----------------- PRIVATE HELPERS ---------------------------------------------------------------

  includeRectInLine: function(currLine, rectTop, rectLeft, rectWidth, rectHeight) {

    // is on an existing line : based on vertical position
    if (this.rectIsWithinLineVertically(rectTop, rectHeight, currLine.maxTop, currLine.maxBottom)) {
      if (this.rectIsWithinLineHorizontally(rectLeft, rectWidth, currLine.left, currLine.width, currLine.avgHeight)) {
        return true;
      }
    }

    return false;
  },

  rectIsWithinLineVertically: function(rectTop, rectHeight, currLineMaxTop, currLineMaxBottom) {

    var rectBottom = rectTop + rectHeight;
    var lineHeight = currLineMaxBottom - currLineMaxTop;
    var lineHeightAdjustment = (lineHeight * 0.75) / 2;
    var rectHeightAdjustment = (rectHeight * 0.75) / 2;

    rectTop = rectTop + rectHeightAdjustment;
    rectBottom = rectBottom - rectHeightAdjustment;
    currLineMaxTop = currLineMaxTop + lineHeightAdjustment;
    currLineMaxBottom = currLineMaxBottom - lineHeightAdjustment;

    if (rectTop === currLineMaxTop && rectBottom === currLineMaxBottom) {
      return true;
    } else if (rectTop < currLineMaxTop && rectBottom < currLineMaxBottom && rectBottom > currLineMaxTop) {
      return true;
    } else if (rectTop > currLineMaxTop && rectBottom > currLineMaxBottom && rectTop < currLineMaxBottom) {
      return true;
    } else if (rectTop > currLineMaxTop && rectBottom < currLineMaxBottom) {
      return true;
    } else if (rectTop < currLineMaxTop && rectBottom > currLineMaxBottom) {
      return true;
    } else {
      return false;
    }
  },

  rectIsWithinLineHorizontally: function(rectLeft, rectWidth, currLineLeft, currLineWidth, currLineAvgHeight) {

    var lineGapHeuristic = 2 * currLineAvgHeight;
    var rectRight = rectLeft + rectWidth;
    var currLineRight = rectLeft + currLineWidth;

    if ((currLineLeft - rectRight) > lineGapHeuristic) {
      return false;
    } else if ((rectLeft - currLineRight) > lineGapHeuristic) {
      return false;
    } else {
      return true;
    }
  },

  createNewLine: function(rectLeft, rectTop, rectWidth, rectHeight) {

    var maxBottom = rectTop + rectHeight;

    return {
      left: rectLeft,
      startTop: rectTop,
      width: rectWidth,
      avgHeight: rectHeight,
      maxTop: rectTop,
      maxBottom: maxBottom,
      numRects: 1
    };
  },

  expandLine: function(currLine, rectLeft, rectTop, rectWidth, rectHeight) {

    var lineOldRight = currLine.left + currLine.width;

    // Update all the properties of the current line with rect dimensions
    var rectRight = rectLeft + rectWidth;
    var rectBottom = rectTop + rectHeight;
    var numRectsPlusOne = currLine.numRects + 1;

    // Average height calculation
    var currSumHeights = currLine.avgHeight * currLine.numRects;
    var avgHeight = ((currSumHeights + rectHeight) / numRectsPlusOne);
    currLine.avgHeight = avgHeight;
    currLine.numRects = numRectsPlusOne;

    // Expand the line vertically
    currLine = this.expandLineVertically(currLine, rectTop, rectBottom);
    currLine = this.expandLineHorizontally(currLine, rectLeft, rectRight);

    return currLine;
  },

  expandLineVertically: function(currLine, rectTop, rectBottom) {

    if (rectTop < currLine.maxTop) {
      currLine.maxTop = rectTop;
    }
    if (rectBottom > currLine.maxBottom) {
      currLine.maxBottom = rectBottom;
    }

    return currLine;
  },

  expandLineHorizontally: function(currLine, rectLeft, rectRight) {

    var newLineLeft = currLine.left <= rectLeft ? currLine.left : rectLeft;
    var lineRight = currLine.left + currLine.width;
    var newLineRight = lineRight >= rectRight ? lineRight : rectRight;
    var newLineWidth = newLineRight - newLineLeft;
    currLine.left = newLineLeft;
    currLine.width = newLineWidth;

    return currLine;
  }
});

module.exports = TextLineInferrer
},{"backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/underline-group.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var TextLineInferrer = require('./text-line-inferrer')
var UnderlineView = require('./underline-view')

var UnderlineGroup = Backbone.Model.extend({
  defaults: function() {
    return {
      "selectedNodes": [],
      "underlineViews": []
    };
  },

  initialize: function(attributes, options) {

    this.constructUnderlineViews();
  },

  // --------------- PRIVATE HELPERS ---------------------------------------

  underlineGroupCallback: function(event) {

    var that = this;

    // Trigger this event on each of the underline views (except triggering event)
    if (event.type === "click") {
      that.get("bbPageSetView").trigger("annotationClicked", "underline", that.get("CFI"), that.get("id"), event);
      return;
    }

    // Events that are called on each member of the group
    _.each(this.get("underlineViews"), function(underlineView) {

      if (event.type === "mouseenter") {
        underlineView.setHoverUnderline();
      } else if (event.type === "mouseleave") {
        underlineView.setBaseUnderline();
      }
    });
  },

  constructUnderlineViews: function() {

    var that = this;
    var rectList = [];
    var inferrer;
    var inferredLines;

    _.each(this.get("selectedNodes"), function(node, index) {

      var rects;
      var range = document.createRange();
      range.selectNodeContents(node);
      rects = range.getClientRects();

      // REFACTORING CANDIDATE: Maybe a better way to append an array here
      _.each(rects, function(rect) {
        rectList.push(rect);
      });
    });

    inferrer = new TextLineInferrer();
    inferredLines = inferrer.inferLines(rectList);

    _.each(inferredLines, function(line, index) {

      var underlineTop = line.startTop;
      var underlineLeft = line.left;
      var underlineHeight = line.avgHeight;
      var underlineWidth = line.width;

      var underlineView = new UnderlineView({
        CFI: that.get("CFI"),
        top: underlineTop + that.get("offsetTopAddition"),
        left: underlineLeft + that.get("offsetLeftAddition"),
        height: underlineHeight,
        width: underlineWidth,
        styles: that.get("styles"),
        underlineGroupCallback: that.underlineGroupCallback,
        callbackContext: that
      });

      that.get("underlineViews").push(underlineView);
    });
  },

  resetUnderlines: function(viewportElement, offsetTop, offsetLeft) {

    if (offsetTop) {
      this.set({
        offsetTopAddition: offsetTop
      });
    }
    if (offsetLeft) {
      this.set({
        offsetLeftAddition: offsetLeft
      });
    }

    this.destroyCurrentUnderlines();
    this.constructUnderlineViews();
    this.renderUnderlines(viewportElement);
  },

  // REFACTORING CANDIDATE: Ensure that event listeners are being properly cleaned up. 
  destroyCurrentUnderlines: function() {

    _.each(this.get("underlineViews"), function(underlineView) {
      underlineView.remove();
      underlineView.off();
    });

    this.get("underlineViews").length = 0;
  },

  renderUnderlines: function(viewportElement) {

    _.each(this.get("underlineViews"), function(view, index) {
      $(viewportElement).append(view.render());
    });
  },

  toInfo: function() {

    return {

      id: this.get("id"),
      type: "underline",
      CFI: this.get("CFI")
    };
  },

  setStyles: function(styles) {

    var underlineViews = this.get('underlineViews');

    this.set({
      styles: styles
    });

    _.each(underlineViews, function(view, index) {
      view.setStyles(styles);
    });
  },
});

module.exports = UnderlineGroup
},{"./text-line-inferrer":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/text-line-inferrer.js","./underline-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/underline-view.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/underline-view.js":[function(require,module,exports){
var Backbone = require('backbone')
var Underline = require('./underline')

var UnderlineView = Backbone.View.extend({

  el: "<div class='underline-range'> \
             <div class='transparent-part'></div> \
             <div class='underline-part'></div> \
          </div>",

  events: {
    "mouseenter": "underlineEvent",
    "mouseleave": "underlineEvent",
    "click": "underlineEvent"
  },

  initialize: function(options) {

    this.underline = new Underline({
      CFI: options.CFI,
      top: options.top,
      left: options.left,
      height: options.height,
      width: options.width,
      styles: options.styles,
      underlineGroupCallback: options.underlineGroupCallback,
      callbackContext: options.callbackContext
    });

    this.$transparentElement = $(".transparent-part", this.$el);
    this.$underlineElement = $(".underline-part", this.$el);
  },

  render: function() {

    this.setCSS();
    return this.el;
  },

  resetPosition: function(top, left, height, width) {

    this.underline.set({
      top: top,
      left: left,
      height: height,
      width: width
    });
    this.setCSS();
  },

  setStyles: function(styles) {

    this.underline.set({
      styles: styles,
    });
    this.render();
  },

  setCSS: function() {
    var styles = this.underline.get("styles") || {};

    this.$el.css({
      "top": this.underline.get("top") + "px",
      "left": this.underline.get("left") + "px",
      "height": this.underline.get("height") + "px",
      "width": this.underline.get("width") + "px",
    });

    // Underline part
    this.$underlineElement.css({
      "background-color": styles.fill_color || "normal",
    });


    this.$underlineElement.addClass("underline");
  },

  underlineEvent: function(event) {

    event.stopPropagation();
    var underlineGroupCallback = this.underline.get("underlineGroupCallback");
    var underlineGroupContext = this.underline.get("callbackContext");
    underlineGroupContext.underlineGroupCallback(event);
  },

  setBaseUnderline: function() {

    this.$underlineElement.addClass("underline");
    this.$underlineElement.removeClass("hover-underline");
  },

  setHoverUnderline: function() {

    this.$underlineElement.addClass("hover-underline");
    this.$underlineElement.removeClass("underline");
  },
});


module.exports = UnderlineView
},{"./underline":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/underline.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/underline.js":[function(require,module,exports){
var Backbone = require('backbone')

var Underline = Backbone.Model.extend({
  defaults: {
    "isVisible": false
  },

  initialize: function(attributes, options) {}
});

module.exports = Underline
},{"backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/content-document-fetcher.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var _ = require('underscore');
var URI = require('URIjs');
var ContentTypeDiscovery = require('./discover-content-type');

function ContentDocumentFetcher(publicationFetcher, spineItem, loadedDocumentUri, publicationResourcesCache) {

  var self = this;

  var _contentDocumentPathRelativeToPackage = spineItem.href;
  var _publicationFetcher = publicationFetcher;
  var _contentDocumentText;
  var _srcMediaType = spineItem.media_type;
  var _contentDocumentDom;
  var _publicationResourcesCache = publicationResourcesCache;

  // PUBLIC API

  this.fetchContentDocumentAndResolveDom = function(contentDocumentResolvedCallback, errorCallback) {
    _publicationFetcher.relativeToPackageFetchFileContents(_contentDocumentPathRelativeToPackage, 'text',
      function(contentDocumentText) {
        _contentDocumentText = contentDocumentText;
        self.resolveInternalPackageResources(contentDocumentResolvedCallback, errorCallback);
      }, errorCallback
    );
  };

  this.resolveInternalPackageResources = function(resolvedDocumentCallback, onerror) {

    _contentDocumentDom = _publicationFetcher.markupParser.parseMarkup(_contentDocumentText, _srcMediaType);
    setBaseUri(_contentDocumentDom, loadedDocumentUri);

    var resolutionDeferreds = [];

    if (_publicationFetcher.shouldFetchMediaAssetsProgrammatically()) {
      resolveDocumentImages(resolutionDeferreds, onerror);
      resolveDocumentAudios(resolutionDeferreds, onerror);
      resolveDocumentVideos(resolutionDeferreds, onerror);
    }
    // TODO: recursive fetching, parsing and DOM construction of documents in IFRAMEs,
    // with CSS preprocessing and obfuscated font handling
    resolveDocumentIframes(resolutionDeferreds, onerror);
    // TODO: resolution (e.g. using DOM mutation events) of scripts loaded dynamically by scripts
    resolveDocumentScripts(resolutionDeferreds, onerror);
    resolveDocumentLinkStylesheets(resolutionDeferreds, onerror);
    resolveDocumentEmbeddedStylesheets(resolutionDeferreds, onerror);

    $.when.apply($, resolutionDeferreds).done(function() {
      resolvedDocumentCallback(_contentDocumentDom);
    });

  };

  // INTERNAL FUNCTIONS

  function setBaseUri(documentDom, baseURI) {
    var baseElem = documentDom.getElementsByTagName('base')[0];
    if (!baseElem) {
      baseElem = documentDom.createElement('base');

      var anchor = documentDom.getElementsByTagName('head')[0];
      anchor.insertBefore(baseElem, anchor.childNodes[0]);
    }
    baseElem.setAttribute('href', baseURI);
  }

  function _handleError(err) {
    if (err) {
      if (err.message) {
        console.error(err.message);
      }
      if (err.stack) {
        console.error(err.stack);
      }
    }
    console.error(err);
  }

  function fetchResourceForElement(resolvedElem, refAttrOrigVal, refAttr, fetchMode, resolutionDeferreds,
    onerror, resourceDataPreprocessing) {
    var resourceUriRelativeToPackageDocument = (new URI(refAttrOrigVal)).absoluteTo(_contentDocumentPathRelativeToPackage).toString();

    var cachedResourceUrl = _publicationResourcesCache.getResourceURL(resourceUriRelativeToPackageDocument);

    function replaceRefAttrInElem(newResourceUrl) {
      // Store original refAttrVal in a special attribute to provide access to the original href:
      $(resolvedElem).data('epubZipOrigHref', refAttrOrigVal);
      $(resolvedElem).attr(refAttr, newResourceUrl);
    }

    if (cachedResourceUrl) {
      replaceRefAttrInElem(cachedResourceUrl);
    } else {
      var resolutionDeferred = $.Deferred();
      resolutionDeferreds.push(resolutionDeferred);

      _publicationFetcher.relativeToPackageFetchFileContents(resourceUriRelativeToPackageDocument,
        fetchMode,
        function(resourceData) {

          // Generate a function to replace element's resource URL with URL of fetched data.
          // The function will either be called directly, immediately (if no preprocessing of resourceData is in effect)
          // or indirectly, later after resourceData preprocessing finishes:
          var replaceResourceURL = function(finalResourceData) {
            // Creating an object URL requires a Blob object, so resource data fetched in text mode needs to be wrapped in a Blob:
            if (fetchMode === 'text') {
              var textResourceContentType = ContentTypeDiscovery.identifyContentTypeFromFileName(resourceUriRelativeToPackageDocument);
              var declaredType = $(resolvedElem).attr('type');
              if (declaredType) {
                textResourceContentType = declaredType;
              }
              finalResourceData = new Blob([finalResourceData], {
                type: textResourceContentType
              });
            }
            //noinspection JSUnresolvedVariable,JSUnresolvedFunction
            var resourceObjectURL = window.URL.createObjectURL(finalResourceData);
            _publicationResourcesCache.putResourceURL(resourceUriRelativeToPackageDocument,
              resourceObjectURL);
            // TODO: take care of releasing object URLs when no longer needed
            replaceRefAttrInElem(resourceObjectURL);
            resolutionDeferred.resolve();
          };

          if (resourceDataPreprocessing) {
            resourceDataPreprocessing(resourceData, resourceUriRelativeToPackageDocument,
              replaceResourceURL);
          } else {
            replaceResourceURL(resourceData);
          }
        }, onerror);
    }
  }

  function fetchResourceForCssUrlMatch(cssUrlMatch, cssResourceDownloadDeferreds,
    styleSheetUriRelativeToPackageDocument, stylesheetCssResourceUrlsMap,
    isStyleSheetResource) {
    var origMatchedUrlString = cssUrlMatch[0];

    var extractedUrlCandidates = cssUrlMatch.slice(2);
    var extractedUrl = _.find(extractedUrlCandidates, function(matchGroup) {
      return typeof matchGroup !== 'undefined'
    });

    var extractedUri = new URI(extractedUrl);
    var isCssUrlRelative = extractedUri.scheme() === '';
    if (!isCssUrlRelative) {
      // Absolute URLs don't need programmatic fetching
      return;
    }
    var resourceUriRelativeToPackageDocument = (new URI(extractedUrl)).absoluteTo(styleSheetUriRelativeToPackageDocument).toString();

    var cachedResourceURL = _publicationResourcesCache.getResourceURL(resourceUriRelativeToPackageDocument);


    if (cachedResourceURL) {
      stylesheetCssResourceUrlsMap[origMatchedUrlString] = {
        isStyleSheetResource: isStyleSheetResource,
        resourceObjectURL: cachedResourceURL
      };
    } else {
      var cssUrlFetchDeferred = $.Deferred();
      cssResourceDownloadDeferreds.push(cssUrlFetchDeferred);

      var processedBlobCallback = function(resourceDataBlob) {
        //noinspection JSUnresolvedVariable,JSUnresolvedFunction
        var resourceObjectURL = window.URL.createObjectURL(resourceDataBlob);
        stylesheetCssResourceUrlsMap[origMatchedUrlString] = {
          isStyleSheetResource: isStyleSheetResource,
          resourceObjectURL: resourceObjectURL
        };
        _publicationResourcesCache.putResourceURL(resourceUriRelativeToPackageDocument, resourceObjectURL);
        cssUrlFetchDeferred.resolve();
      };
      var fetchErrorCallback = function(error) {
        _handleError(error);
        cssUrlFetchDeferred.resolve();
      };

      var fetchMode;
      var fetchCallback;
      if (isStyleSheetResource) {
        // TODO: test whether recursion works for nested @import rules with arbitrary indirection depth.
        fetchMode = 'text';
        fetchCallback = function(styleSheetResourceData) {
          preprocessCssStyleSheetData(styleSheetResourceData, resourceUriRelativeToPackageDocument,
            function(preprocessedStyleSheetData) {
              var resourceDataBlob = new Blob([preprocessedStyleSheetData], {
                type: 'text/css'
              });
              processedBlobCallback(resourceDataBlob);
            })
        }
      } else {
        fetchMode = 'blob';
        fetchCallback = processedBlobCallback;
      }

      _publicationFetcher.relativeToPackageFetchFileContents(resourceUriRelativeToPackageDocument,
        fetchMode,
        fetchCallback, fetchErrorCallback);
    }
  }

  function preprocessCssStyleSheetData(styleSheetResourceData, styleSheetUriRelativeToPackageDocument,
    callback) {
    var cssUrlRegexp = /[Uu][Rr][Ll]\(\s*([']([^']+)[']|["]([^"]+)["]|([^)]+))\s*\)/g;
    var nonUrlCssImportRegexp = /@[Ii][Mm][Pp][Oo][Rr][Tt]\s*('([^']+)'|"([^"]+)")/g;
    var stylesheetCssResourceUrlsMap = {};
    var cssResourceDownloadDeferreds = [];
    // Go through the stylesheet text using all regexps and process according to those regexp matches, if any:
    [nonUrlCssImportRegexp, cssUrlRegexp].forEach(function(processingRegexp) {
      // extract all URL references in the CSS sheet,
      var cssUrlMatch = processingRegexp.exec(styleSheetResourceData);
      while (cssUrlMatch != null) {
        // then fetch and replace them with corresponding object URLs:
        var isStyleSheetResource = false;
        // Special handling of @import-ed stylesheet files - recursive preprocessing:
        // TODO: will not properly handle @import url(...):
        if (processingRegexp == nonUrlCssImportRegexp) {
          // This resource URL points to an @import-ed CSS stylesheet file. Need to preprocess its text
          // after fetching but before making an object URL of it:
          isStyleSheetResource = true;
        }
        fetchResourceForCssUrlMatch(cssUrlMatch, cssResourceDownloadDeferreds,
          styleSheetUriRelativeToPackageDocument, stylesheetCssResourceUrlsMap, isStyleSheetResource);
        cssUrlMatch = processingRegexp.exec(styleSheetResourceData);
      }

    });

    if (cssResourceDownloadDeferreds.length > 0) {
      $.when.apply($, cssResourceDownloadDeferreds).done(function() {
        for (var origMatchedUrlString in stylesheetCssResourceUrlsMap) {
          var processedResourceDescriptor = stylesheetCssResourceUrlsMap[origMatchedUrlString];


          var processedUrlString;
          if (processedResourceDescriptor.isStyleSheetResource) {
            processedUrlString = '@import "' + processedResourceDescriptor.resourceObjectURL + '"';
          } else {
            processedUrlString = "url('" + processedResourceDescriptor.resourceObjectURL + "')";
          }
          var origMatchedUrlStringEscaped = origMatchedUrlString.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
            "\\$&");
          var origMatchedUrlStringRegExp = new RegExp(origMatchedUrlStringEscaped, 'g');
          //noinspection JSCheckFunctionSignatures
          styleSheetResourceData =
            styleSheetResourceData.replace(origMatchedUrlStringRegExp, processedUrlString, 'g');

        }
        callback(styleSheetResourceData);
      });
    } else {
      callback(styleSheetResourceData);
    }
  }


  function resolveResourceElements(elemName, refAttr, fetchMode, resolutionDeferreds, onerror,
    resourceDataPreprocessing) {

    var resolvedElems = $(elemName + '[' + refAttr + ']', _contentDocumentDom);

    resolvedElems.each(function(index, resolvedElem) {
      var refAttrOrigVal = $(resolvedElem).attr(refAttr);
      var refAttrUri = new URI(refAttrOrigVal);

      if (refAttrUri.scheme() === '') {
        // Relative URI, fetch from packed EPUB archive:

        fetchResourceForElement(resolvedElem, refAttrOrigVal, refAttr, fetchMode, resolutionDeferreds,
          onerror, resourceDataPreprocessing);
      }
    });
  }

  function resolveDocumentImages(resolutionDeferreds, onerror) {
    resolveResourceElements('img', 'src', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentAudios(resolutionDeferreds, onerror) {
    resolveResourceElements('audio', 'src', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentVideos(resolutionDeferreds, onerror) {
    resolveResourceElements('video', 'src', 'blob', resolutionDeferreds, onerror);
    resolveResourceElements('video', 'poster', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentScripts(resolutionDeferreds, onerror) {
    resolveResourceElements('script', 'src', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentIframes(resolutionDeferreds, onerror) {
    resolveResourceElements('iframe', 'src', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentLinkStylesheets(resolutionDeferreds, onerror) {
    resolveResourceElements('link', 'href', 'text', resolutionDeferreds, onerror,
      preprocessCssStyleSheetData);
  }

  function resolveDocumentEmbeddedStylesheets(resolutionDeferreds, onerror) {
    var resolvedElems = $('style', _contentDocumentDom);
    resolvedElems.each(function(index, resolvedElem) {
      var resolutionDeferred = $.Deferred();
      resolutionDeferreds.push(resolutionDeferred);
      var styleSheetData = $(resolvedElem).text();
      preprocessCssStyleSheetData(styleSheetData, _contentDocumentPathRelativeToPackage,
        function(resolvedStylesheetData) {
          $(resolvedElem).text(resolvedStylesheetData);
          resolutionDeferred.resolve();
        });
    });
  }

};

module.exports = ContentDocumentFetcher;
},{"./discover-content-type":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/discover-content-type.js","URIjs":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/discover-content-type.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var URI = require('URIjs');

var _instance = undefined;

function ContentTypeDiscovery() {

  var self = this;

  ContentTypeDiscovery.suffixContentTypeMap = {
    css: 'text/css',
    epub: 'application/epub+zip',
    gif: 'image/gif',
    html: 'text/html',
    jpg: 'image/jpeg',
    jpeg: 'image/jpeg',
    ncx: 'application/x-dtbncx+xml',
    opf: 'application/oebps-package+xml',
    png: 'image/png',
    svg: 'image/svg+xml',
    xhtml: 'application/xhtml+xml'
  };

  this.identifyContentTypeFromFileName = function(contentUrl) {
    var contentUrlSuffix = URI(contentUrl).suffix();
    var contentType = 'application/octet-stream';
    if (typeof ContentTypeDiscovery.suffixContentTypeMap[contentUrlSuffix] !== 'undefined') {
      contentType = ContentTypeDiscovery.suffixContentTypeMap[contentUrlSuffix];
    }
    return contentType;
  };

  this.identifyContentType = function(contentUrl) {
    // TODO: Make the call asynchronous (which would require a callback and would probably make sense
    // when calling functions are also remodelled for async).

    var contentType = $.ajax({
      type: "HEAD",
      url: contentUrl,
      async: false
    }).getResponseHeader('Content-Type');
    if (contentType === null) {
      contentType = self.identifyContentTypeFromFileName(contentUrl);
      console.log('guessed contentType [' + contentType + '] from URI [' + contentUrl +
        ']. Configuring the web server to provide the content type is recommended.');

    }

    return contentType;
  }

};

if (!_instance) {
  _instance = new ContentTypeDiscovery();
}

module.exports = _instance;
},{"URIjs":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/encryption-handler.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');

function EncryptionHandler(encryptionData) {
  var self = this;

  var ENCRYPTION_METHODS = {
    'http://www.idpf.org/2008/embedding': embeddedFontDeobfuscateIdpf,
    'http://ns.adobe.com/pdf/enc#RC': embeddedFontDeobfuscateAdobe
  };

  // INTERNAL FUNCTIONS

  function blob2BinArray(blob, callback) {
    var fileReader = new FileReader();
    fileReader.onload = function() {
      var arrayBuffer = this.result;
      callback(new Uint8Array(arrayBuffer));
    };
    fileReader.readAsArrayBuffer(blob);
  }

  function xorObfuscatedBlob(obfuscatedResourceBlob, prefixLength, xorKey, callback) {
    var obfuscatedPrefixBlob = obfuscatedResourceBlob.slice(0, prefixLength);
    blob2BinArray(obfuscatedPrefixBlob, function(bytes) {
      var masklen = xorKey.length;
      for (var i = 0; i < prefixLength; i++) {
        bytes[i] = bytes[i] ^ (xorKey[i % masklen]);
      }
      var deobfuscatedPrefixBlob = new Blob([bytes], {
        type: obfuscatedResourceBlob.type
      });
      var remainderBlob = obfuscatedResourceBlob.slice(prefixLength);
      var deobfuscatedBlob = new Blob([deobfuscatedPrefixBlob, remainderBlob], {
        type: obfuscatedResourceBlob.type
      });

      callback(deobfuscatedBlob);
    });
  }

  function embeddedFontDeobfuscateIdpf(obfuscatedResourceBlob, callback) {

    var prefixLength = 1040;
    // Shamelessly copied from
    // https://github.com/readium/readium-chrome-extension/blob/26d4b0cafd254cfa93bf7f6225887b83052642e0/scripts/models/path_resolver.js#L102 :
    xorObfuscatedBlob(obfuscatedResourceBlob, prefixLength, encryptionData.uidHash, callback);
  }

  function urnUuidToByteArray(id) {
    var uuidRegexp = /(urn:uuid:)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})/i;
    var matchResults = uuidRegexp.exec(id);
    var rawUuid = matchResults[2] + matchResults[3] + matchResults[4] + matchResults[5] + matchResults[6];
    if (!rawUuid || rawUuid.length != 32) {
      console.error('Bad UUID format for ID :' + id);
    }
    var byteArray = [];
    for (var i = 0; i < 16; i++) {
      var byteHex = rawUuid.substr(i * 2, 2);
      var byteNumber = parseInt(byteHex, 16);
      byteArray.push(byteNumber);
    }
    return byteArray;
  }

  function embeddedFontDeobfuscateAdobe(obfuscatedResourceBlob, callback) {

    // extract the UUID and convert to big-endian binary form (16 bytes):
    var uidWordArray = urnUuidToByteArray(encryptionData.uid);
    var prefixLength = 1024;
    xorObfuscatedBlob(obfuscatedResourceBlob, prefixLength, uidWordArray, callback)
  }


  // PUBLIC API

  this.isEncryptionSpecified = function() {
    return encryptionData && encryptionData.encryptions;
  };


  this.getEncryptionMethodForRelativePath = function(pathRelativeToRoot) {
    if (self.isEncryptionSpecified()) {
      return encryptionData.encryptions[pathRelativeToRoot];
    } else {
      return undefined;
    }
  };

  this.getDecryptionFunctionForRelativePath = function(pathRelativeToRoot) {
    var encryptionMethod = self.getEncryptionMethodForRelativePath(pathRelativeToRoot);
    if (encryptionMethod && ENCRYPTION_METHODS[encryptionMethod]) {
      return ENCRYPTION_METHODS[encryptionMethod];
    } else {
      return undefined;
    }
  };

};

EncryptionHandler.CreateEncryptionData = function(id, encryptionDom) {

  var encryptionData = {
    uid: id,
    uidHash: window.Crypto.SHA1(unescape(encodeURIComponent(id.trim())), {
      asBytes: true
    }),
    encryptions: undefined
  };

  var encryptedData = $('EncryptedData', encryptionDom);
  encryptedData.each(function(index, encryptedData) {
    var encryptionAlgorithm = $('EncryptionMethod', encryptedData).first().attr('Algorithm');

    // For some reason, jQuery selector "" against XML DOM sometimes doesn't match properly
    var cipherReference = $('CipherReference', encryptedData);
    cipherReference.each(function(index, CipherReference) {
      var cipherReferenceURI = $(CipherReference).attr('URI');
      console.log('Encryption/obfuscation algorithm ' + encryptionAlgorithm + ' specified for ' +
        cipherReferenceURI);

      if (!encryptionData.encryptions) {
        encryptionData.encryptions = {};
      }

      encryptionData.encryptions[cipherReferenceURI] = encryptionAlgorithm;
    });
  });

  return encryptionData;
};

module.exports = EncryptionHandler;
},{"jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/markup-parser.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

function MarkupParser() {

  var self = this;

  this.parseXml = function(xmlString) {
    return self.parseMarkup(xmlString, 'text/xml');
  };

  this.parseMarkup = function(markupString, contentType) {
    var parser = new window.DOMParser;
    return parser.parseFromString(markupString, contentType);
  };

};

module.exports = MarkupParser;
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/plain-resource-fetcher.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var _ = require('underscore');
var URI = require('URIjs');
var ContentTypeDiscovery = require('./discover-content-type');

function PlainResourceFetcher(parentFetcher, baseUrl) {

  var self = this;
  var _packageDocumentAbsoluteUrl;
  var _packageDocumentRelativePath;

  // INTERNAL FUNCTIONS

  function fetchFileContents(pathRelativeToPackageRoot, readCallback, onerror) {
    var fileUrl = self.resolveURI(pathRelativeToPackageRoot);

    if (typeof pathRelativeToPackageRoot === 'undefined') {
      throw 'Fetched file relative path is undefined!';
    }

    var xhr = new XMLHttpRequest();
    xhr.open('GET', fileUrl, true);
    xhr.responseType = 'arraybuffer';
    xhr.onerror = onerror;

    xhr.onload = function(loadEvent) {
      readCallback(xhr.response);
    };

    xhr.send();
  }


  // PUBLIC API

  this.initialize = function(callback) {

    parentFetcher.getXmlFileDom('META-INF/container.xml', function(containerXmlDom) {
      _packageDocumentRelativePath = parentFetcher.getRootFile(containerXmlDom);
      _packageDocumentAbsoluteUrl = self.resolveURI(_packageDocumentRelativePath);

      callback();

    }, function(error) {
      console.error("unable to find package document: " + error);
      _packageDocumentAbsoluteUrl = baseUrl;

      callback();
    });
  };

  this.resolveURI = function(pathRelativeToPackageRoot) {
    return baseUrl + "/" + pathRelativeToPackageRoot;
  };


  this.getPackageUrl = function() {
    return _packageDocumentAbsoluteUrl;
  };

  this.fetchFileContentsText = function(pathRelativeToPackageRoot, fetchCallback, onerror) {
    var fileUrl = self.resolveURI(pathRelativeToPackageRoot);

    if (typeof fileUrl === 'undefined') {
      throw 'Fetched file URL is undefined!';
    }
    $.ajax({
      // encoding: "UTF-8",
      // mimeType: "text/plain; charset=UTF-8",
      // beforeSend: function( xhr ) {
      //     xhr.overrideMimeType("text/plain; charset=UTF-8");
      // },
      isLocal: fileUrl.indexOf("http") === 0 ? false : true,
      url: fileUrl,
      dataType: 'text', //https://api.jquery.com/jQuery.ajax/
      async: true,
      success: function(result) {
        fetchCallback(result);
      },
      error: function(xhr, status, errorThrown) {
        console.error('Error when AJAX fetching ' + fileUrl);
        console.error(status);
        console.error(errorThrown);

        // // isLocal = false with custom URI scheme / protocol results in false fail on Firefox (Chrome okay)
        // if (status === "error" && (!errorThrown || !errorThrown.length) && xhr.responseText && xhr.responseText.length)
        // {
        //     console.error(xhr);
        //     if (typeof xhr.getResponseHeader !== "undefined") console.error(xhr.getResponseHeader("Content-Type"));
        //     if (typeof xhr.getAllResponseHeaders !== "undefined") console.error(xhr.getAllResponseHeaders());
        //     if (typeof xhr.responseText !== "undefined") console.error(xhr.responseText);
        //     
        //     // success
        //     fetchCallback(xhr.responseText);
        //     return;
        // }

        onerror(errorThrown);
      }
    });
  };

  this.fetchFileContentsBlob = function(pathRelativeToPackageRoot, fetchCallback, onerror) {

    var decryptionFunction = parentFetcher.getDecryptionFunctionForRelativePath(pathRelativeToPackageRoot);
    if (decryptionFunction) {
      var origFetchCallback = fetchCallback;
      fetchCallback = function(unencryptedBlob) {
        decryptionFunction(unencryptedBlob, function(decryptedBlob) {
          origFetchCallback(decryptedBlob);
        });
      };
    }
    fetchFileContents(pathRelativeToPackageRoot, function(contentsArrayBuffer) {
      var blob = new Blob([contentsArrayBuffer], {
        type: ContentTypeDiscovery.identifyContentTypeFromFileName(pathRelativeToPackageRoot)
      });
      fetchCallback(blob);
    }, onerror);
  };

  this.getPackageDom = function(callback, onerror) {
    self.fetchFileContentsText(_packageDocumentRelativePath, function(packageXml) {
      var packageDom = parentFetcher.markupParser.parseXml(packageXml);
      callback(packageDom);
    }, onerror);
  };

};

module.exports = PlainResourceFetcher;
},{"./discover-content-type":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/discover-content-type.js","URIjs":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/publication-fetcher.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var ContentDocumentFetcher = require('./content-document-fetcher');
var EncryptionHandler = require('./encryption-handler');
var MarkupParser = require('./markup-parser');
var PlainResourceFetcher = require('./plain-resource-fetcher');
var ResourceCache = require('./resource-cache');
var URI = require('URIjs');
var ZipResourceFetcher = require('./zip-resource-fetcher');

function PublicationFetcher(bookRoot, jsLibRoot) {

  var self = this;

  self.contentTypePackageReadStrategyMap = {
    'application/oebps-package+xml': 'exploded',
    'application/epub+zip': 'zipped',
    'application/zip': 'zipped'
  };

  var _shouldConstructDomProgrammatically;
  var _resourceFetcher;
  var _encryptionHandler;
  var _packageFullPath;
  var _packageDom;
  var _packageDomInitializationDeferred;
  var _publicationResourcesCache = new ResourceCache;


  this.markupParser = new MarkupParser();

  this.initialize = function(callback) {

    var isEpubExploded = isExploded();

    // Non exploded EPUBs (i.e. zipped .epub documents) should be fetched in a programmatical manner:
    _shouldConstructDomProgrammatically = !isEpubExploded;
    createResourceFetcher(isEpubExploded, callback);
  };



  // INTERNAL FUNCTIONS

  function _handleError(err) {
    if (err) {
      if (err.message) {
        console.error(err.message);
      }
      if (err.stack) {
        console.error(err.stack);
      }
    }
    console.error(err);
  }

  function isExploded() {

    var ext = ".epub";
    return bookRoot.indexOf(ext, bookRoot.length - ext.length) === -1;
  }

  function createResourceFetcher(isExploded, callback) {
    if (isExploded) {
      console.log('using new PlainResourceFetcher');
      _resourceFetcher = new PlainResourceFetcher(self, bookRoot);
      _resourceFetcher.initialize(function() {
        callback(_resourceFetcher);
      });
      return;
    } else {
      console.log('using new ZipResourceFetcher');
      _resourceFetcher = new ZipResourceFetcher(self, bookRoot, jsLibRoot);
      callback(_resourceFetcher);
    }
  }

  // PUBLIC API

  /**
   * Determine whether the documents fetched using this fetcher require special programmatic handling.
   * (resolving of internal resource references).
   * @returns {*} true if documents fetched using this fetcher require special programmatic handling
   * (resolving of internal resource references). Typically needed for zipped EPUBs or exploded EPUBs that contain
   * encrypted resources specified in META-INF/encryption.xml.
   *
   * false if documents can be fed directly into a window or iframe by src URL without using special fetching logic.
   */
  this.shouldConstructDomProgrammatically = function() {
    return _shouldConstructDomProgrammatically;
  };

  /**
   * Determine whether the media assets (audio, video, images) within content documents require special
   * programmatic handling.
   * @returns {*} true if content documents fetched using this fetcher require programmatic fetching
   * of media assets. Typically needed for zipped EPUBs.
   *
   * false if paths to media assets are accessible directly for the browser through their paths relative to
   * the base URI of their content document.
   */
  this.shouldFetchMediaAssetsProgrammatically = function() {
    return _shouldConstructDomProgrammatically && !isExploded();
  };

  this.getBookRoot = function() {
    return bookRoot;
  };

  this.getJsLibRoot = function() {
    return jsLibRoot;
  }

  this.getPackageUrl = function() {
    return _resourceFetcher.getPackageUrl();
  };

  this.fetchContentDocument = function(attachedData, loadedDocumentUri, contentDocumentResolvedCallback, errorCallback) {

    var contentDocumentFetcher = new ContentDocumentFetcher(self, attachedData.spineItem, loadedDocumentUri, _publicationResourcesCache);
    contentDocumentFetcher.fetchContentDocumentAndResolveDom(contentDocumentResolvedCallback, function(err) {
      _handleError(err);
      errorCallback(err);
    });
  };

  this.getFileContentsFromPackage = function(filePathRelativeToPackageRoot, callback, onerror) {

    _resourceFetcher.fetchFileContentsText(filePathRelativeToPackageRoot, function(fileContents) {
      callback(fileContents);
    }, onerror);
  };



  this.getXmlFileDom = function(xmlFilePathRelativeToPackageRoot, callback, onerror) {
    self.getFileContentsFromPackage(xmlFilePathRelativeToPackageRoot, function(xmlFileContents) {
      var fileDom = self.markupParser.parseXml(xmlFileContents);
      callback(fileDom);
    }, onerror);
  };

  this.getPackageFullPath = function(callback, onerror) {
    self.getXmlFileDom('META-INF/container.xml', function(containerXmlDom) {
      var packageFullPath = self.getRootFile(containerXmlDom);
      callback(packageFullPath);
    }, onerror);
  };

  this.getRootFile = function(containerXmlDom) {
    var rootFile = $('rootfile', containerXmlDom);
    var packageFullPath = rootFile.attr('full-path');
    return packageFullPath;
  };

  this.getPackageDom = function(callback, onerror) {
    if (_packageDom) {
      callback(_packageDom);
    } else {
      // TODO: use jQuery's Deferred
      // Register all callbacks interested in initialized packageDom, launch its instantiation only once
      // and broadcast to all callbacks registered during the initialization once it's done:
      if (_packageDomInitializationDeferred) {
        _packageDomInitializationDeferred.done(callback);
      } else {
        _packageDomInitializationDeferred = $.Deferred();
        _packageDomInitializationDeferred.done(callback);
        self.getPackageFullPath(function(packageFullPath) {
          _packageFullPath = packageFullPath;
          self.getXmlFileDom(packageFullPath, function(packageDom) {
            _packageDom = packageDom;
            _packageDomInitializationDeferred.resolve(packageDom);
            _packageDomInitializationDeferred = undefined;
          })
        }, onerror);
      }
    }
  };

  this.convertPathRelativeToPackageToRelativeToBase = function(relativeToPackagePath) {
    return new URI(relativeToPackagePath).absoluteTo(_packageFullPath).toString();
  };

  this.relativeToPackageFetchFileContents = function(relativeToPackagePath, fetchMode, fetchCallback, onerror) {

    if (!onerror) {
      onerror = _handleError;
    }

    var pathRelativeToEpubRoot = decodeURIComponent(self.convertPathRelativeToPackageToRelativeToBase(relativeToPackagePath));
    // In case we received an absolute path, convert it to relative form or the fetch will fail:
    if (pathRelativeToEpubRoot.charAt(0) === '/') {
      pathRelativeToEpubRoot = pathRelativeToEpubRoot.substr(1);
    }
    var fetchFunction = _resourceFetcher.fetchFileContentsText;
    if (fetchMode === 'blob') {
      fetchFunction = _resourceFetcher.fetchFileContentsBlob;
    } else if (fetchMode === 'data64uri') {
      fetchFunction = _resourceFetcher.fetchFileContentsData64Uri;
    }
    fetchFunction.call(_resourceFetcher, pathRelativeToEpubRoot, fetchCallback, onerror);
  };



  this.getRelativeXmlFileDom = function(filePath, callback, errorCallback) {
    self.getXmlFileDom(self.convertPathRelativeToPackageToRelativeToBase(filePath), callback, errorCallback);
  };

  function readEncriptionData(callback) {
    self.getXmlFileDom('META-INF/encryption.xml', function(encryptionDom, error) {

      if (error) {
        console.log(error);
        console.log("Document doesn't make use of encryption.");
        _encryptionHandler = new EncryptionHandler(undefined);
        callback();
      } else {

        var encryptions = [];


        var encryptedData = $('EncryptedData', encryptionDom);
        encryptedData.each(function(index, encryptedData) {
          var encryptionAlgorithm = $('EncryptionMethod', encryptedData).first().attr('Algorithm');

          encryptions.push({
            algorithm: encryptionAlgorithm
          });

          // For some reason, jQuery selector "" against XML DOM sometimes doesn't match properly
          var cipherReference = $('CipherReference', encryptedData);
          cipherReference.each(function(index, CipherReference) {
            var cipherReferenceURI = $(CipherReference).attr('URI');
            console.log('Encryption/obfuscation algorithm ' + encryptionAlgorithm + ' specified for ' +
              cipherReferenceURI);
            encryptions[cipherReferenceURI] = encryptionAlgorithm;
          });
        });
      }

    });
  }

  // Currently needed for deobfuscating fonts
  this.setPackageMetadata = function(packageMetadata, settingFinishedCallback) {

    self.getXmlFileDom('META-INF/encryption.xml', function(encryptionDom) {

      var encryptionData = EncryptionHandler.CreateEncryptionData(packageMetadata.id, encryptionDom);

      _encryptionHandler = new EncryptionHandler(encryptionData);

      if (_encryptionHandler.isEncryptionSpecified()) {
        // EPUBs that use encryption for any resources should be fetched in a programmatical manner:
        _shouldConstructDomProgrammatically = true;
      }

      settingFinishedCallback();


    }, function(error) {

      console.log("Document doesn't make use of encryption.");
      _encryptionHandler = new EncryptionHandler(undefined);

      settingFinishedCallback();
    });
  };

  this.getDecryptionFunctionForRelativePath = function(pathRelativeToRoot) {
    return _encryptionHandler.getDecryptionFunctionForRelativePath(pathRelativeToRoot);
  }
};

module.exports = PublicationFetcher;
},{"./content-document-fetcher":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/content-document-fetcher.js","./encryption-handler":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/encryption-handler.js","./markup-parser":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/markup-parser.js","./plain-resource-fetcher":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/plain-resource-fetcher.js","./resource-cache":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/resource-cache.js","./zip-resource-fetcher":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/zip-resource-fetcher.js","URIjs":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/resource-cache.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

function ResourceCache() {

  var self = this;
  var _resourcesHash = {};

  this.getResourceURL = function(resourceAbsoluteHref) {
    var resourceObjectUrl = _resourcesHash[resourceAbsoluteHref];
    return resourceObjectUrl;
  };

  this.putResourceURL = function(resourceAbsoluteHref, resourceObjectUrl) {
    _resourcesHash[resourceAbsoluteHref] = resourceObjectUrl;
  };
  // TODO: methods to evict resource, destroy cache and release object URLs using window.URL.revokeObjectURL(), automatic
  // cache size accounting and management algorithms like LRU.
};

module.exports = ResourceCache;
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/zip-resource-fetcher.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var _ = require('underscore');
var URI = require('URIjs');
var ContentTypeDiscovery = require('./discover-content-type');

function ZipResourceFetcher(parentFetcher, baseUrl, libDir) {

  var _checkCrc32 = false;
  var _zipFs;

  // INTERNAL FUNCTIONS

  // Description: perform a function with an initialized zip filesystem, making sure that such filesystem is initialized.
  // Note that due to a race condition, more than one zip filesystem may be instantiated.
  // However, the last one to be set on the model object will prevail and others would be garbage collected later.
  function withZipFsPerform(callback, onerror) {

    if (_zipFs) {

      callback(_zipFs, onerror);

    } else {

      zip.workerScriptsPath = libDir;
      _zipFs = new zip.fs.FS();
      _zipFs.importHttpContent(baseUrl, true, function() {

        callback(_zipFs, onerror);

      }, onerror)
    }
  }

  function fetchFileContents(relativePathRelativeToPackageRoot, readCallback, onerror) {

    if (typeof relativePathRelativeToPackageRoot === 'undefined') {
      throw 'Fetched file relative path is undefined!';
    }

    withZipFsPerform(function(zipFs, onerror) {
      var entry = zipFs.find(relativePathRelativeToPackageRoot);
      if (typeof entry === 'undefined' || entry === null) {
        onerror(new Error('Entry ' + relativePathRelativeToPackageRoot + ' not found in zip ' + baseUrl));
      } else {
        if (entry.directory) {
          onerror(new Error('Entry ' + relativePathRelativeToPackageRoot + ' is a directory while a file has been expected'));
        } else {
          readCallback(entry);
        }
      }
    }, onerror);
  }


  // PUBLIC API

  this.getPackageUrl = function() {
    return baseUrl;
  };

  this.fetchFileContentsText = function(relativePathRelativeToPackageRoot, fetchCallback, onerror) {

    fetchFileContents(relativePathRelativeToPackageRoot, function(entry) {
      entry.getText(fetchCallback, undefined, _checkCrc32);
    }, onerror)
  };

  this.fetchFileContentsData64Uri = function(relativePathRelativeToPackageRoot, fetchCallback, onerror) {
    fetchFileContents(relativePathRelativeToPackageRoot, function(entry) {
      entry.getData64URI(ContentTypeDiscovery.identifyContentTypeFromFileName(relativePathRelativeToPackageRoot),
        fetchCallback, undefined, _checkCrc32);
    }, onerror)
  };

  this.fetchFileContentsBlob = function(relativePathRelativeToPackageRoot, fetchCallback, onerror) {
    var decryptionFunction = parentFetcher.getDecryptionFunctionForRelativePath(relativePathRelativeToPackageRoot);
    if (decryptionFunction) {
      var origFetchCallback = fetchCallback;
      fetchCallback = function(unencryptedBlob) {
        decryptionFunction(unencryptedBlob, function(decryptedBlob) {
          origFetchCallback(decryptedBlob);
        });
      };
    }
    fetchFileContents(relativePathRelativeToPackageRoot, function(entry) {
      entry.getBlob(ContentTypeDiscovery.identifyContentTypeFromFileName(relativePathRelativeToPackageRoot), fetchCallback,
        undefined, _checkCrc32);
    }, onerror)
  };

};

module.exports = ZipResourceFetcher;
},{"./discover-content-type":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/discover-content-type.js","URIjs":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/manifest.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var _ = require('underscore')

function Manifest(manifestJson) {

  var _manifestIndexById = {};
  var _navItem;

  this.manifestLength = function() {
    return manifestJson.length;
  };

  this.getManifestItemByIdref = function(idref) {
    return _manifestIndexById[idref];
  };

  /**
   * Iterate over manifest items and apply callback (synchronously) on each one of them.
   * @param iteratorCallback the iterator callback function, will be called once for each manifest item,
   * and the item will be passed as the (one and only) argument.
   * @returns the Manifest object for chaining.
   */
  this.each = function(iteratorCallback) {
    _.each(manifestJson, iteratorCallback);
    return this;
  };

  this.getNavItem = function() {
    return _navItem;
  };

  // Initialize indexes
  this.each(function(manifestItem) {
    _manifestIndexById[manifestItem.id] = manifestItem;

    if (manifestItem.properties && manifestItem.properties.indexOf("nav") !== -1) {
      _navItem = manifestItem;
    }
  });

};

module.exports = Manifest;
},{"underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/metadata.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var _ = require('underscore')

function Metadata() {

  var that = this;

  var _mediaItemIndexByRefinesId = {};

  /**
   * Iterate over media items and apply callback (synchronously) on each one of them.
   * @param iteratorCallback the iterator callback function, will be called once for each media item,
   * and the item will be passed as the (one and only) argument.
   * @returns the Metadata object for chaining.
   */
  this.eachMediaItem = function(iteratorCallback) {
    if (that.mediaItems) {
      _.each(that.mediaItems, iteratorCallback);
    }
    return this;
  };

  this.getMediaItemByRefinesId = function(id) {
    return _mediaItemIndexByRefinesId[id];
  };

  this.setMoMap = function(mediaOverlaysMap) {
    that.media_overlay.smil_models = mediaOverlaysMap;
  };

  // Initialize indexes
  this.eachMediaItem(function(item) {
    var id = item.refines;
    var hash = id.indexOf('#');
    if (hash >= 0) {
      var start = hash + 1;
      var end = id.length - 1;
      id = id.substr(start, end);
    }
    id = id.trim();

    _mediaItemIndexByRefinesId[id] = item;
  });


};
module.exports = Metadata;
},{"underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/package-document-parser.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var Manifest = require('./manifest')
var MarkupParser = require('../epub-fetch/markup-parser')
var Metadata = require('./metadata')
var URI = require('URIjs')
var PackageDocument = require('./package-document')
var SmilDocumentParser = require('./smil-document-parser')

// `PackageDocumentParser` is used to parse the xml of an epub package
// document and build a javascript object. The constructor accepts an
// instance of `URI` that is used to resolve paths during the process
function PackageDocumentParser(bookRoot, publicationFetcher) {

  var _packageFetcher = publicationFetcher;
  var _deferredXmlDom = $.Deferred();
  var _xmlDom;

  function onError(error) {
    if (error) {
      if (error.message) {
        console.error(error.message);
      }
      if (error.stack) {
        console.error(error.stack);
      }
    }
  }

  publicationFetcher.getPackageDom(function(packageDom) {
    _xmlDom = packageDom;
    _deferredXmlDom.resolve(packageDom);
  }, onError);

  function fillSmilData(packageDocument, callback) {

    var smilParser = new SmilDocumentParser(packageDocument, publicationFetcher);

    smilParser.fillSmilData(function() {

      // return the parse result
      callback(packageDocument);
    });

  }

  // Parse an XML package document into a javascript object
  this.parse = function(callback) {

    _deferredXmlDom.done(function(xmlDom) {
      var metadata = getMetadata(xmlDom);

      var spineElem = xmlDom.getElementsByTagNameNS("*", "spine")[0];
      var page_prog_dir = getElemAttr(xmlDom, 'spine', "page-progression-direction");

      // TODO: Bindings are unused
      var bindings = getJsonBindings(xmlDom);

      var manifest = new Manifest(getJsonManifest(xmlDom));
      var spine = getJsonSpine(xmlDom, manifest, metadata);

      // try to find a cover image
      var cover = getCoverHref(xmlDom);
      if (cover) {
        metadata.cover_href = cover;
      }

      $.when(updateMetadataWithIBookProperties(metadata)).then(function() {

        _packageFetcher.setPackageMetadata(metadata, function() {
          var packageDocument = new PackageDocument(publicationFetcher.getPackageUrl(),
            publicationFetcher, metadata, spine, manifest);

          packageDocument.setPageProgressionDirection(page_prog_dir);
          fillSmilData(packageDocument, callback);
        });
      });

    });
  };

  function updateMetadataWithIBookProperties(metadata) {

    var dff = $.Deferred();

    //if layout not set
    if (!metadata.rendition_layout) {
      var pathToIBooksSpecificXml = "/META-INF/com.apple.ibooks.display-options.xml";

      publicationFetcher.relativeToPackageFetchFileContents(pathToIBooksSpecificXml, 'text', function(ibookPropText) {
        if (ibookPropText) {
          var parser = new MarkupParser();
          var propModel = parser.parseXml(ibookPropText);
          var fixLayoutProp = $("option[name=fixed-layout]", propModel)[0];
          if (fixLayoutProp) {
            var fixLayoutVal = $(fixLayoutProp).text();
            if (fixLayoutVal === "true") {
              metadata.rendition_layout = "pre-paginated";
              console.log("using com.apple.ibooks.display-options.xml fixed-layout property");
            }
          }
        }

        dff.resolve();

      }, function(err) {

        console.log("com.apple.ibooks.display-options.xml not found");
        dff.resolve();
      });
    } else {
      dff.resolve();
    }

    return dff.promise();
  }


  function getJsonSpine(xmlDom, manifest, metadata) {

    var $spineElements;
    var jsonSpine = [];

    $spineElements = $(findXmlElemByLocalNameAnyNS(xmlDom, "spine")).children();
    $.each($spineElements, function(spineElementIndex, currSpineElement) {

      var $currSpineElement = $(currSpineElement);
      var idref = $currSpineElement.attr("idref") ? $currSpineElement.attr("idref") : "";
      var manifestItem = manifest.getManifestItemByIdref(idref);

      var id = $currSpineElement.attr("id");
      var viewport = undefined;
      _.each(metadata.rendition_viewports, function(vp) {
        if (vp.refines == id) {
          viewport = vp.viewport;
          return true; // break
        }
      });

      var spineItem = {
        rendition_viewport: viewport,
        idref: idref,
        href: manifestItem.href,
        manifest_id: manifestItem.id,
        media_type: manifestItem.media_type,
        media_overlay_id: manifestItem.media_overlay_id,
        linear: $currSpineElement.attr("linear") ? $currSpineElement.attr("linear") : "",
        properties: $currSpineElement.attr("properties") ? $currSpineElement.attr("properties") : ""
      };

      var parsedProperties = parsePropertiesString(spineItem.properties);
      _.extend(spineItem, parsedProperties);

      jsonSpine.push(spineItem);
    });

    return jsonSpine;
  }

  function findXmlElemByLocalNameAnyNS(rootElement, localName, predicate) {
    var elements = rootElement.getElementsByTagNameNS("*", localName);
    if (predicate) {
      return _.find(elements, predicate);
    } else {
      return elements[0];
    }
  }

  function filterXmlElemsByLocalNameAnyNS(rootElement, localName, predicate) {
    var elements = rootElement.getElementsByTagNameNS("*", localName);
    return _.filter(elements, predicate);
  }

  function getElemText(rootElement, localName, predicate) {
    var foundElement = findXmlElemByLocalNameAnyNS(rootElement, localName, predicate);
    if (foundElement) {
      return foundElement.textContent;
    } else {
      return '';
    }
  }

  function getElemAttr(rootElement, localName, attrName, predicate) {
    var foundElement = findXmlElemByLocalNameAnyNS(rootElement, localName, predicate);
    if (foundElement) {
      return foundElement.getAttribute(attrName);
    } else {
      return '';
    }
  }

  function getMetaElemPropertyText(rootElement, attrPropertyValue) {

    var foundElement = findXmlElemByLocalNameAnyNS(rootElement, "meta", function(element) {
      return element.getAttribute("property") === attrPropertyValue;
    });

    if (foundElement) {
      return foundElement.textContent;
    } else {
      return '';
    }
  }


  function getMetadata(xmlDom) {

    var metadata = new Metadata();
    var metadataElem = findXmlElemByLocalNameAnyNS(xmlDom, "metadata");
    var packageElem = findXmlElemByLocalNameAnyNS(xmlDom, "package");
    var spineElem = findXmlElemByLocalNameAnyNS(xmlDom, "spine");


    metadata.author = getElemText(metadataElem, "creator");
    metadata.description = getElemText(metadataElem, "description");
    metadata.epub_version =
      packageElem.getAttribute("version") ? packageElem.getAttribute("version") : "";
    metadata.id = getElemText(metadataElem, "identifier");
    metadata.language = getElemText(metadataElem, "language");
    metadata.modified_date = getMetaElemPropertyText(metadataElem, "dcterms:modified");
    metadata.ncx = spineElem.getAttribute("toc") ? spineElem.getAttribute("toc") : "";
    metadata.pubdate = getElemText(metadataElem, "date");
    metadata.publisher = getElemText(metadataElem, "publisher");
    metadata.rights = getElemText(metadataElem, "rights");
    metadata.title = getElemText(metadataElem, "title");

    metadata.rendition_orientation = getMetaElemPropertyText(metadataElem, "rendition:orientation");
    metadata.rendition_layout = getMetaElemPropertyText(metadataElem, "rendition:layout");
    metadata.rendition_spread = getMetaElemPropertyText(metadataElem, "rendition:spread");
    metadata.rendition_flow = getMetaElemPropertyText(metadataElem, "rendition:flow");






    //http://www.idpf.org/epub/301/spec/epub-publications.html#fxl-property-viewport

    //metadata.rendition_viewport = getMetaElemPropertyText(metadataElem, "rendition:viewport");
    metadata.rendition_viewport = getElemText(metadataElem, "meta", function(element) {
      return element.getAttribute("property") === "rendition:viewport" && !element.hasAttribute("refines")
    });

    var viewports = [];
    var viewportMetaElems = filterXmlElemsByLocalNameAnyNS(metadataElem, "meta", function(element) {
      return element.getAttribute("property") === "rendition:viewport" && element.hasAttribute("refines");
    });
    _.each(viewportMetaElems, function(currItem) {
      var id = currItem.getAttribute("refines");
      if (id) {
        var hash = id.indexOf('#');
        if (hash >= 0) {
          var start = hash + 1;
          var end = id.length - 1;
          id = id.substr(start, end);
        }
        id = id.trim();
      }

      var vp = {
        refines: id,
        viewport: currItem.textContent
      };
      viewports.push(vp);
    });

    metadata.rendition_viewports = viewports;






    // Media part
    metadata.mediaItems = [];

    var overlayElems = filterXmlElemsByLocalNameAnyNS(metadataElem, "meta", function(element) {
      return element.getAttribute("property") === "media:duration" && element.hasAttribute("refines");
    });

    _.each(overlayElems, function(currItem) {
      metadata.mediaItems.push({
        refines: currItem.getAttribute("refines"),
        duration: SmilDocumentParser.resolveClockValue(currItem.textContent)
      });
    });

    metadata.media_overlay = {
      duration: SmilDocumentParser.resolveClockValue(
        getElemText(metadataElem, "meta", function(element) {
          return element.getAttribute("property") === "media:duration" && !element.hasAttribute("refines")
        })
      ),
      narrator: getMetaElemPropertyText(metadataElem, "media:narrator"),
      activeClass: getMetaElemPropertyText(metadataElem, "media:active-class"),
      playbackActiveClass: getMetaElemPropertyText(metadataElem, "media:playback-active-class"),
      smil_models: [],
      skippables: ["sidebar", "practice", "marginalia", "annotation", "help", "note", "footnote", "rearnote",
        "table", "table-row", "table-cell", "list", "list-item", "pagebreak"
      ],
      escapables: ["sidebar", "bibliography", "toc", "loi", "appendix", "landmarks", "lot", "index",
        "colophon", "epigraph", "conclusion", "afterword", "warning", "epilogue", "foreword",
        "introduction", "prologue", "preface", "preamble", "notice", "errata", "copyright-page",
        "acknowledgments", "other-credits", "titlepage", "imprimatur", "contributors", "halftitlepage",
        "dedication", "help", "annotation", "marginalia", "practice", "note", "footnote", "rearnote",
        "footnotes", "rearnotes", "bridgehead", "page-list", "table", "table-row", "table-cell", "list",
        "list-item", "glossary"
      ]
    };

    return metadata;
  }

  function getJsonManifest(xmlDom) {

    var $manifestItems = $(findXmlElemByLocalNameAnyNS(xmlDom, "manifest")).children();
    var jsonManifest = [];

    $.each($manifestItems, function(manifestElementIndex, currManifestElement) {

      var $currManifestElement = $(currManifestElement);
      var currManifestElementHref = $currManifestElement.attr("href") ? $currManifestElement.attr("href") :
        "";
      var manifestItem = {

        href: currManifestElementHref,
        id: $currManifestElement.attr("id") ? $currManifestElement.attr("id") : "",
        media_overlay_id: $currManifestElement.attr("media-overlay") ?
          $currManifestElement.attr("media-overlay") : "",
        media_type: $currManifestElement.attr("media-type") ? $currManifestElement.attr("media-type") : "",
        properties: $currManifestElement.attr("properties") ? $currManifestElement.attr("properties") : ""
      };
      // console.log('pushing manifest item to JSON manifest. currManifestElementHref: [' + currManifestElementHref + 
      //     '], manifestItem.href: [' + manifestItem.href +
      //     '], manifestItem:');
      // console.log(manifestItem);
      jsonManifest.push(manifestItem);
    });

    return jsonManifest;
  }

  function getJsonBindings(xmlDom) {

    var $bindings = $(findXmlElemByLocalNameAnyNS(xmlDom, "bindings")).children();
    var jsonBindings = [];

    $.each($bindings, function(bindingElementIndex, currBindingElement) {

      var $currBindingElement = $(currBindingElement);
      var binding = {

        handler: $currBindingElement.attr("handler") ? $currBindingElement.attr("handler") : "",
        media_type: $currBindingElement.attr("media-type") ? $currBindingElement.attr("media-type") : ""
      };

      jsonBindings.push(binding);
    });

    return jsonBindings;
  }

  function getCoverHref(xmlDom) {

    var manifest;
    var $imageNode;
    manifest = findXmlElemByLocalNameAnyNS(xmlDom, "manifest");

    // epub3 spec for a cover image is like this:
    /*<item properties="cover-image" id="ci" href="cover.svg" media-type="image/svg+xml" />*/
    $imageNode = $(findXmlElemByLocalNameAnyNS(manifest, "item", function(element) {
      var attr = element.getAttribute("properties");
      return attr && _.contains(attr.split(" "), "cover-image");
    }));
    if ($imageNode.length === 1 && $imageNode.attr("href")) {
      return $imageNode.attr("href");
    }

    // some epub2's cover image is like this:
    /*<meta name="cover" content="cover-image-item-id" />*/
    var metaNode = $(findXmlElemByLocalNameAnyNS(xmlDom, "meta", function(element) {
      return element.getAttribute("name") === "cover";
    }));
    var contentAttr = metaNode.attr("content");
    if (metaNode.length === 1 && contentAttr) {
      $imageNode = $(findXmlElemByLocalNameAnyNS(manifest, "item", function(element) {
        return element.getAttribute("id") === contentAttr;
      }));
      if ($imageNode.length === 1 && $imageNode.attr("href")) {
        return $imageNode.attr("href");
      }
    }

    // that didn't seem to work so, it think epub2 just uses item with id=cover
    $imageNode = $(findXmlElemByLocalNameAnyNS(manifest, "item", function(element) {
      return element.getAttribute("id") === "cover";
    }));
    if ($imageNode.length === 1 && $imageNode.attr("href")) {
      return $imageNode.attr("href");
    }

    // seems like there isn't one, thats ok...
    return null;
  }

  function parsePropertiesString(str) {
    var properties = {};
    var allPropStrs = str.split(" "); // split it on white space
    for (var i = 0; i < allPropStrs.length; i++) {

      //ReadiumSDK.Models.SpineItem.RENDITION_ORIENTATION_LANDSCAPE
      if (allPropStrs[i] === "rendition:orientation-landscape") properties.rendition_orientation = "landscape";

      //ReadiumSDK.Models.SpineItem.RENDITION_ORIENTATION_PORTRAIT
      if (allPropStrs[i] === "rendition:orientation-portrait") properties.rendition_orientation = "portrait";

      //ReadiumSDK.Models.SpineItem.RENDITION_ORIENTATION_AUTO
      if (allPropStrs[i] === "rendition:orientation-auto") properties.rendition_orientation = "auto";


      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_NONE
      if (allPropStrs[i] === "rendition:spread-none") properties.rendition_spread = "none";

      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_LANDSCAPE
      if (allPropStrs[i] === "rendition:spread-landscape") properties.rendition_spread = "landscape";

      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_PORTRAIT
      if (allPropStrs[i] === "rendition:spread-portrait") properties.rendition_spread = "portrait";

      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_BOTH
      if (allPropStrs[i] === "rendition:spread-both") properties.rendition_spread = "both";

      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_AUTO
      if (allPropStrs[i] === "rendition:spread-auto") properties.rendition_spread = "auto";


      //ReadiumSDK.Models.SpineItem.RENDITION_FLOW_PAGINATED
      if (allPropStrs[i] === "rendition:flow-paginated") properties.rendition_flow = "paginated";

      //ReadiumSDK.Models.SpineItem.RENDITION_FLOW_SCROLLED_CONTINUOUS
      if (allPropStrs[i] === "rendition:flow-scrolled-continuous") properties.rendition_flow = "scrolled-continuous";

      //ReadiumSDK.Models.SpineItem.RENDITION_FLOW_SCROLLED_DOC
      if (allPropStrs[i] === "rendition:flow-scrolled-doc") properties.rendition_flow = "scrolled-doc";

      //ReadiumSDK.Models.SpineItem.RENDITION_FLOW_AUTO
      if (allPropStrs[i] === "rendition:flow-auto") properties.rendition_flow = "auto";



      //ReadiumSDK.Models.SpineItem.SPREAD_CENTER
      if (allPropStrs[i] === "rendition:page-spread-center") properties.page_spread = "page-spread-center";

      //ReadiumSDK.Models.SpineItem.SPREAD_LEFT
      if (allPropStrs[i] === "page-spread-left") properties.page_spread = "page-spread-left";

      //ReadiumSDK.Models.SpineItem.SPREAD_RIGHT
      if (allPropStrs[i] === "page-spread-right") properties.page_spread = "page-spread-right";

      //ReadiumSDK.Models.SpineItem.RENDITION_LAYOUT_REFLOWABLE
      if (allPropStrs[i] === "rendition:layout-reflowable") {
        properties.fixed_flow = false; // TODO: only used in spec tests!
        properties.rendition_layout = "reflowable";
      }

      //ReadiumSDK.Models.SpineItem.RENDITION_LAYOUT_PREPAGINATED
      if (allPropStrs[i] === "rendition:layout-pre-paginated") {
        properties.fixed_flow = true; // TODO: only used in spec tests!
        properties.rendition_layout = "pre-paginated";
      }
    }
    return properties;
  }

};

module.exports = PackageDocumentParser;
},{"../epub-fetch/markup-parser":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/markup-parser.js","./manifest":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/manifest.js","./metadata":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/metadata.js","./package-document":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/package-document.js","./smil-document-parser":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/smil-document-parser.js","URIjs":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/package-document.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.


var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var URI = require('URIjs')

// Description: This model provides an interface for navigating an EPUB's package document
function PackageDocument(packageDocumentURL, resourceFetcher, metadata, spine, manifest) {

  var _page_prog_dir;

  this.manifest = manifest;

  this.getSharedJsPackageData = function() {

    var packageDocRoot = packageDocumentURL.substr(0, packageDocumentURL.lastIndexOf("/"));
    return {
      rootUrl: packageDocRoot,
      rendition_viewport: metadata.rendition_viewport,
      rendition_layout: metadata.rendition_layout,
      rendition_orientation: metadata.rendition_orientation,
      rendition_flow: metadata.rendition_flow,
      rendition_spread: metadata.rendition_spread,
      media_overlay: metadata.media_overlay,
      spine: {
        direction: this.getPageProgressionDirection(),
        items: spine
      }
    };
  };

  /**
   * Get spine item data in readium-shared-js accepted format.
   * @param spineIndex the index of the item within the spine
   * @returns Spine item data in readium-shared-js accepted format.
   */
  this.getSpineItem = function(spineIndex) {
    var spineItem = spine[spineIndex];
    return spineItem;
  };

  this.setPageProgressionDirection = function(page_prog_dir) {
    _page_prog_dir = page_prog_dir;
  };


  this.getPageProgressionDirection = function() {
    if (_page_prog_dir === "rtl") {
      return "rtl";
    } else if (_page_prog_dir === "default") {
      return "default";
    } else {
      return "ltr";
    }
  };

  this.spineLength = function() {
    return spine.length;
  };

  this.getMetadata = function() {
    return metadata;
  };

  this.getToc = function() {
    var item = getTocItem();
    if (item) {
      return item.href;
    }
    return null;
  };

  this.getTocText = function(callback) {
    var toc = this.getToc();

    resourceFetcher.relativeToPackageFetchFileContents(toc, 'text', function(tocDocumentText) {
      callback(tocDocumentText)
    }, function(err) {
      console.error('ERROR fetching TOC from [' + toc + ']:');
      console.error(err);
      callback(undefined);
    });
  };

  this.getTocDom = function(callback) {

    this.getTocText(function(tocText) {
      if (typeof tocText === 'string') {
        var tocDom = (new DOMParser()).parseFromString(tocText, "text/xml");
        callback(tocDom);
      } else {
        callback(undefined);
      }
    });
  };

  // Unused?
  this.generateTocListDOM = function(callback) {
    var that = this;
    this.getTocDom(function(tocDom) {
      if (tocDom) {
        if (tocIsNcx()) {
          var $ncxOrderedList;
          $ncxOrderedList = getNcxOrderedList($("navMap", tocDom));
          callback($ncxOrderedList[0]);
        } else {
          var packageDocumentAbsoluteURL = new URI(packageDocumentURL).absoluteTo(document.URL);
          var tocDocumentAbsoluteURL = new URI(that.getToc()).absoluteTo(packageDocumentAbsoluteURL);
          // add a BASE tag to change the TOC document's baseURI.
          var oldBaseTag = $(tocDom).remove('base');
          var newBaseTag = $('<base></base>');
          $(newBaseTag).attr('href', tocDocumentAbsoluteURL);
          $(tocDom).find('head').append(newBaseTag);
          // TODO: fix TOC hrefs both for exploded in zipped EPUBs
          callback(tocDom);
        }
      } else {
        callback(undefined);
      }
    });
  };

  function tocIsNcx() {

    var tocItem = getTocItem();
    var contentDocURI = tocItem.href;
    var fileExtension = contentDocURI.substr(contentDocURI.lastIndexOf('.') + 1);

    return fileExtension.trim().toLowerCase() === "ncx";
  }

  // ----------------------- PRIVATE HELPERS -------------------------------- //

  function getNcxOrderedList($navMapDOM) {

    var $ol = $("<ol></ol>");
    $.each($navMapDOM.children("navPoint"), function(index, navPoint) {
      addNavPointElements($(navPoint), $ol);
    });
    return $ol;
  }

  // Description: Constructs an html representation of NCX navPoints, based on an object of navPoint information
  // Rationale: This is a recursive method, as NCX navPoint elements can nest 0 or more of themselves as children
  function addNavPointElements($navPointDOM, $ol) {

    // Add the current navPoint element to the TOC html
    var navText = $navPointDOM.children("navLabel").text().trim();
    var navHref = $navPointDOM.children("content").attr("src");
    var $navPointLi = $('<li class="nav-elem"></li>').append(
      $('<a></a>', {
        href: navHref,
        text: navText
      })
    );

    // Append nav point info
    $ol.append($navPointLi);

    // Append ordered list of nav points
    if ($navPointDOM.children("navPoint").length > 0) {

      var $newLi = $("<li></li>");
      var $newOl = $("<ol></ol>");
      $.each($navPointDOM.children("navPoint"), function(navIndex, navPoint) {
        $newOl.append(addNavPointElements($(navPoint), $newOl));
      });

      $newLi.append($newOl);
      $ol.append($newLi);
    }
  }

  function getTocItem() {

    var item = manifest.getNavItem();
    if (item) {
      return item;
    }

    var spine_id = metadata.ncx;
    if (spine_id && spine_id.length > 0) {
      return manifest.getManifestItemByIdref(spine_id);
    }

    return null;
  }

};

module.exports = PackageDocument;
},{"URIjs":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/smil-document-parser.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery')
var _ = require('underscore')

// `SmilDocumentParser` is used to parse the xml of an epub package
// document and build a javascript object. The constructor accepts an
// instance of `URI` that is used to resolve paths during the process
function SmilDocumentParser(packageDocument, publicationFetcher) {

  // Parse a media overlay manifest item XML
  this.parse = function(spineItem, manifestItemSMIL, smilJson, deferred, callback, errorCallback) {
    var that = this;
    publicationFetcher.getRelativeXmlFileDom(manifestItemSMIL.href, function(xmlDom) {

      var smil = $("smil", xmlDom)[0];
      smilJson.smilVersion = smil.getAttribute('version');

      //var body = $("body", xmlDom)[0];
      smilJson.children = that.getChildren(smil);
      smilJson.href = manifestItemSMIL.href;
      smilJson.id = manifestItemSMIL.id;
      smilJson.spineItemId = spineItem.idref;

      var mediaItem = packageDocument.getMetadata().getMediaItemByRefinesId(manifestItemSMIL.id);
      if (mediaItem) {
        smilJson.duration = mediaItem.duration;
      }

      callback(deferred, smilJson);
    }, function(fetchError) {
      errorCallback(deferred, fetchError);
    });
  };

  var safeCopyProperty = function(property, fromNode, toItem, isRequired, defaultValue) {
    var propParse = property.split(':');
    var destProperty = propParse[propParse.length - 1];

    if (destProperty === "type") {
      destProperty = "epubtype";
    }

    if (fromNode.getAttribute(property) != undefined) {
      toItem[destProperty] = fromNode.getAttribute(property);
    } else if (isRequired) {
      if (defaultValue !== undefined) {
        toItem[destProperty] = defaultValue;
      } else {
        console.log("Required property " + property + " not found in smil node " + fromNode.nodeName);
      }
    }
  };

  this.getChildren = function(element) {
    var that = this;
    var children = [];

    $.each(element.childNodes, function(elementIndex, currElement) {

      if (currElement.nodeType === 1) { // ELEMENT
        var item = that.createItemFromElement(currElement);
        if (item) {
          children.push(item);
        }
      }
    });

    return children;
  }

  this.createItemFromElement = function(element) {
    var that = this;

    var item = {};
    item.nodeType = element.nodeName;

    var isBody = false;
    if (item.nodeType === "body") {
      isBody = true;
      item.nodeType = "seq";
    }

    if (item.nodeType === "seq") {

      safeCopyProperty("epub:textref", element, item, !isBody);
      safeCopyProperty("id", element, item);
      safeCopyProperty("epub:type", element, item);

      item.children = that.getChildren(element);

    } else if (item.nodeType === "par") {

      safeCopyProperty("id", element, item);
      safeCopyProperty("epub:type", element, item);

      item.children = that.getChildren(element);

    } else if (item.nodeType === "text") {

      safeCopyProperty("src", element, item, true);
      var srcParts = item.src.split('#');
      item.srcFile = srcParts[0];
      item.srcFragmentId = (srcParts.length === 2) ? srcParts[1] : "";
      safeCopyProperty("id", element, item);
      // safeCopyProperty("epub:textref", element, item);

    } else if (item.nodeType === "audio") {
      safeCopyProperty("src", element, item, true);
      safeCopyProperty("id", element, item);
      item.clipBegin = SmilDocumentParser.resolveClockValue(element.getAttribute("clipBegin"));
      item.clipEnd = SmilDocumentParser.resolveClockValue(element.getAttribute("clipEnd"));
    } else {
      return undefined;
    }

    return item;
  }

  function makeFakeSmilJson(spineItem) {
    return {
      id: "",
      href: "",
      spineItemId: spineItem.idref,
      children: [{
        nodeType: 'seq',
        textref: spineItem.href,
        children: [{
          nodeType: 'par',
          children: [{
            nodeType: 'text',
            src: spineItem.href,
            srcFile: spineItem.href,
            srcFragmentId: ""
          }]
        }]
      }]
    };
  }

  this.fillSmilData = function(callback) {
    var that = this;

    if (packageDocument.spineLength() <= 0) {
      callback();
      return;
    }

    var allFakeSmil = true;
    var mo_map = [];
    var parsingDeferreds = [];

    for (var spineIdx = 0; spineIdx < packageDocument.spineLength(); spineIdx++) {
      var spineItem = packageDocument.getSpineItem(spineIdx);

      if (spineItem.media_overlay_id) {
        var manifestItemSMIL = packageDocument.manifest.getManifestItemByIdref(spineItem.media_overlay_id);

        if (!manifestItemSMIL) {
          console.error("Cannot find SMIL manifest item for spine/manifest item?! " + spineItem.media_overlay_id);
          continue;
        }
        //ASSERT manifestItemSMIL.media_type === "application/smil+xml"

        var parsingDeferred = $.Deferred();
        parsingDeferred.media_overlay_id = spineItem.media_overlay_id;
        parsingDeferreds.push(parsingDeferred);
        var smilJson = {};

        // Push the holder object onto the map early so that order isn't disturbed by asynchronicity:
        mo_map.push(smilJson);

        // The local parsingDeferred variable will have its value replaced on next loop iteration.
        // Must pass the parsingDeferred through async calls as an argument and it arrives back as myDeferred.
        that.parse(spineItem, manifestItemSMIL, smilJson, parsingDeferred, function(myDeferred, smilJson) {
          allFakeSmil = false;
          myDeferred.resolve();
        }, function(myDeferred, parseError) {
          console.log('Error when parsing SMIL manifest item ' + manifestItemSMIL.href + ':');
          console.log(parseError);
          myDeferred.resolve();
        });
      } else {
        mo_map.push(makeFakeSmilJson(spineItem));
      }
    }

    $.when.apply($, parsingDeferreds).done(function() {
      packageDocument.getMetadata().setMoMap(mo_map);
      if (allFakeSmil) {
        console.log("No Media Overlays");
        packageDocument.getMetadata().setMoMap([]);
      }
      callback();
    });
  }
};

// parse the timestamp and return the value in seconds
// supports this syntax:
// http://idpf.org/epub/30/spec/epub30-mediaoverlays.html#app-clock-examples
SmilDocumentParser.resolveClockValue = function(value) {
  if (!value) return 0;

  var hours = 0;
  var mins = 0;
  var secs = 0;

  if (value.indexOf("min") != -1) {
    mins = parseFloat(value.substr(0, value.indexOf("min")));
  } else if (value.indexOf("ms") != -1) {
    var ms = parseFloat(value.substr(0, value.indexOf("ms")));
    secs = ms / 1000;
  } else if (value.indexOf("s") != -1) {
    secs = parseFloat(value.substr(0, value.indexOf("s")));
  } else if (value.indexOf("h") != -1) {
    hours = parseFloat(value.substr(0, value.indexOf("h")));
  } else {
    // parse as hh:mm:ss.fraction
    // this also works for seconds-only, e.g. 12.345
    var arr = value.split(":");
    secs = parseFloat(arr.pop());
    if (arr.length > 0) {
      mins = parseFloat(arr.pop());
      if (arr.length > 0) {
        hours = parseFloat(arr.pop());
      }
    }
  }
  var total = hours * 3600 + mins * 60 + secs;
  return total;
}

module.exports = SmilDocumentParser;
},{"jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/index.js":[function(require,module,exports){
module.exports = {
  Reader: require('./reader'),
  SDK: require('./sdk')
}
},{"./reader":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/reader.js","./sdk":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/index.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/reader.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery')
var SDK = require('./sdk')
var PackageParser = require('./epub/package-document-parser')
var PublicationFetcher = require('./epub-fetch/publication-fetcher')

if (window) {
  //polyfill to support Safari 6
  if ('URL' in window === false) {
    if ('webkitURL' in window === false) {
      throw Error('Browser does not support window.URL');
    }

    window.URL = window.webkitURL;
  }
}

function Reader(readiumOptions, readerOptions) {

  var self = this;

  var _currentPublicationFetcher;

  var jsLibRoot = readiumOptions.jsLibRoot;

  if (!readiumOptions.useSimpleLoader) {
    // TODO We're not bundling IframeZipLoader
    readerOptions.iframeLoader = new IframeZipLoader(SDK, function() {
      return _currentPublicationFetcher;
    }, {
      mathJaxUrl: readerOptions.mathJaxUrl
    });;
  } else {
    readerOptions.iframeLoader = new SDK.Views.IFrameLoader();
  }


  this.reader = new SDK.Views.ReaderView(readerOptions);

  this.openPackageDocument = function(bookRoot, callback, openPageRequest) {

    _currentPublicationFetcher = new PublicationFetcher(bookRoot, jsLibRoot);

    _currentPublicationFetcher.initialize(function() {

      var _packageParser = new PackageParser(bookRoot, _currentPublicationFetcher);

      _packageParser.parse(function(packageDocument) {
        var openBookOptions = readiumOptions.openBookOptions || {};
        var openBookData = $.extend(packageDocument.getSharedJsPackageData(), openBookOptions);

        if (openPageRequest) {
          openBookData.openPageRequest = openPageRequest;
        }
        self.reader.openBook(openBookData);

        var options = {
          packageDocumentUrl: _currentPublicationFetcher.getPackageUrl(),
          metadata: packageDocument.getMetadata()
        };

        if (callback) {
          // gives caller access to document metadata like the table of contents
          callback(packageDocument, options);
        }
      });
    });
  }

  //we need global access to the reader object for automation test being able to call it's APIs
  SDK.reader = this.reader;

  SDK.trigger(SDK.Events.READER_INITIALIZED, this.reader);
};

Reader.version = require('../package.json').version;

module.exports = Reader;
},{"../package.json":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/package.json","./epub-fetch/publication-fetcher":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-fetch/publication-fetcher.js","./epub/package-document-parser":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub/package-document-parser.js","./sdk":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/index.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/collections/style.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var Style = require('../models/style')

/**
 *
 * @constructor
 */
function StyleCollection() {

  var _styles = [];

  this.clear = function() {
    _styles.length = 0;

  };

  this.findStyle = function(selector) {

    var count = _styles.length;
    for (var i = 0; i < count; i++) {
      if (_styles[i].selector === selector) {
        return _styles[i];
      }
    }

    return undefined;
  };

  this.addStyle = function(selector, declarations) {

    var style = this.findStyle(selector);

    if (style) {
      style.setDeclarations(declarations);
    } else {
      style = new Style(selector, declarations);
      _styles.push(style);
    }

    return style;
  };

  this.removeStyle = function(selector) {

    var count = _styles.length;

    for (var i = 0; i < count; i++) {

      if (_styles[i].selector === selector) {
        _styles.splice(i, 1);
        return;
      }
    }
  };

  this.getStyles = function() {
    return _styles;
  };

  this.resetStyleValues = function() {

    var count = _styles.length;

    for (var i = 0; i < count; i++) {

      var style = _styles[i];
      var declarations = style.declarations;

      for (var prop in declarations) {
        if (declarations.hasOwnProperty(prop)) {
          declarations[prop] = '';
        }
      }
    }
  }

};

module.exports = StyleCollection
},{"../models/style":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/style.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/events.js":[function(require,module,exports){
module.exports = {
  /**
   * @event
   */
  READER_INITIALIZED: "ReaderInitialized",
  /**
   * This gets triggered on every page turnover. It includes spine information and such.
   * @event
   */
  PAGINATION_CHANGED: "PaginationChanged",
  /**
   * @event
   */
  SETTINGS_APPLIED: "SettingsApplied",
  /**
   * @event
   */
  FXL_VIEW_RESIZED: "FXLViewResized",
  /**
   * @event
   */
  READER_VIEW_CREATED: "ReaderViewCreated",
  /**
   * @event
   */
  READER_VIEW_DESTROYED: "ReaderViewDestroyed",
  /**
   * @event
   */
  CONTENT_DOCUMENT_LOAD_START: "ContentDocumentLoadStart",
  /**
   * @event
   */
  CONTENT_DOCUMENT_LOADED: "ContentDocumentLoaded",
  /**
   * @event
   */
  MEDIA_OVERLAY_STATUS_CHANGED: "MediaOverlayStatusChanged",
  /**
   * @event
   */
  MEDIA_OVERLAY_TTS_SPEAK: "MediaOverlayTTSSpeak",
  /**
   * @event
   */
  MEDIA_OVERLAY_TTS_STOP: "MediaOverlayTTSStop"
}
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/begins-with.js":[function(require,module,exports){
/**
 *
 * @param str
 * @param suffix
 * @returns {boolean}
 * @static
 */
function BeginsWith(str, suffix) {

  return str.indexOf(suffix) === 0;
};

module.exports = BeginsWith
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/css-transform-string.js":[function(require,module,exports){
//scale, left, top, angle, origin
function CSSTransformString(options) {
  var enable3D = options.enable3D ? true : false;

  var translate, scale, rotation,
    origin = options.origin;

  if (options.left || options.top) {
    var left = options.left || 0,
      top = options.top || 0;

    translate = enable3D ? ("translate3D(" + left + "px, " + top + "px, 0)") : ("translate(" + left + "px, " + top + "px)");
  }
  if (options.scale) {
    scale = enable3D ? ("scale3D(" + options.scale + ", " + options.scale + ", 0)") : ("scale(" + options.scale + ")");
  }
  if (options.angle) {
    rotation = enable3D ? ("rotate3D(0,0," + options.angle + "deg)") : ("rotate(" + options.angle + "deg)");
  }

  if (!(translate || scale || rotation)) {
    return {};
  }

  var transformString = (translate && scale) ? (translate + " " + scale) : (translate ? translate : scale); // the order is important!
  if (rotation) {
    transformString = transformString + " " + rotation;
    //transformString = rotation + " " + transformString;
  }

  var css = {};
  css['transform'] = transformString;
  css['transform-origin'] = origin ? origin : (enable3D ? '0 0 0' : '0 0');
  return css;
};

module.exports = CSSTransformString
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/css-transition.js":[function(require,module,exports){
var _ = require('underscore')

function CSSTransition($el, trans) {

  // does not work!
  //$el.css('transition', trans);

  var css = {};
  // empty '' prefix FIRST!
  _.each(['', '-webkit-', '-moz-', '-ms-'], function(prefix) {
    css[prefix + 'transition'] = prefix + trans;
  });
  $el.css(css);
}

module.exports = CSSTransition
},{"underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/deduce-synthetic-spread.js":[function(require,module,exports){
var getOrientation = require('./get-orientation')
var SpineItemConstants = require('../models/spine-item-constants')
var ViewsConstants = require('../views/constants')

/**
 *
 * @param $viewport
 * @param spineItem
 * @param settings
 * @returns {boolean}
 */
//Based on https://docs.google.com/spreadsheet/ccc?key=0AoPMUkQhc4wcdDI0anFvWm96N0xRT184ZE96MXFRdFE&usp=drive_web#gid=0 doc
// Returns falsy and truthy
// true and false mean that the synthetic-spread or single-page is "forced" (to be respected whatever the external conditions)
// 1 and 0 mean that the synthetic-spread or single-page is "not forced" (is allowed to be overriden by external conditions, such as optimum column width / text line number of characters, etc.)
function deduceSyntheticSpread($viewport, spineItem, settings) {

  if (!$viewport || $viewport.length == 0) {
    return 0; // non-forced
  }

  //http://www.idpf.org/epub/fxl/#property-spread-values

  var rendition_spread = spineItem ? spineItem.getRenditionSpread() : undefined;

  if (rendition_spread === SpineItemConstants.RENDITION_SPREAD_NONE) {
    return false; // forced

    //"Reading Systems must not incorporate this spine item in a synthetic spread."
  }

  if (settings.syntheticSpread == "double") {
    return true; // forced
  } else if (settings.syntheticSpread == "single") {
    return false; // forced
  }

  if (!spineItem) {
    return 0; // non-forced
  }

  if (rendition_spread === SpineItemConstants.RENDITION_SPREAD_BOTH) {
    return true; // forced

    //"Reading Systems should incorporate this spine item in a synthetic spread regardless of device orientation."
  }

  var orientation = getOrientation($viewport);

  if (rendition_spread === SpineItemConstants.RENDITION_SPREAD_LANDSCAPE) {
    return orientation === ViewsConstants.ORIENTATION_LANDSCAPE; // forced

    //"Reading Systems should incorporate this spine item in a synthetic spread only when the device is in landscape orientation."
  }

  if (rendition_spread === SpineItemConstants.RENDITION_SPREAD_PORTRAIT) {
    return orientation === ViewsConstants.ORIENTATION_PORTRAIT; // forced

    //"Reading Systems should incorporate this spine item in a synthetic spread only when the device is in portrait orientation."
  }

  if (!rendition_spread || rendition_spread === SpineItemConstants.RENDITION_SPREAD_AUTO) {
    // if no spread set in document and user didn't set in in setting we will do double for landscape
    var landscape = orientation === ViewsConstants.ORIENTATION_LANDSCAPE;
    return landscape ? 1 : 0; // non-forced

    //"Reading Systems may use synthetic spreads in specific or all device orientations as part of a display area utilization optimization process."
  }

  console.warn("Helpers.deduceSyntheticSpread: spread properties?!");
  return 0; // non-forced
};

module.exports = deduceSyntheticSpread
},{"../models/spine-item-constants":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine-item-constants.js","../views/constants":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/constants.js","./get-orientation":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/get-orientation.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/ends-with.js":[function(require,module,exports){
/**
 *
 * @param str
 * @param suffix
 * @returns {boolean}
 * @static
 */
function EndsWith(str, suffix) {
  return str.indexOf(suffix, str.length - suffix.length) !== -1;
};

module.exports = EndsWith
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/escape-jquery-selector.js":[function(require,module,exports){
//TODO: consider using CSSOM escape() or polyfill
//https://github.com/mathiasbynens/CSS.escape/blob/master/css.escape.js
//http://mathiasbynens.be/notes/css-escapes
/**
 *
 * @param sel
 * @returns {string}
 */
function escapeJQuerySelector(sel) {
  //http://api.jquery.com/category/selectors/
  //!"#$%&'()*+,./:;<=>?@[\]^`{|}~
  // double backslash escape

  if (!sel) return undefined;

  var selector = sel.replace(/([;&,\.\+\*\~\?':"\!\^#$%@\[\]\(\)<=>\|\/\\{}`])/g, '\\$1');

  // if (selector !== sel)
  // {
  //     console.debug("---- SELECTOR ESCAPED");
  //     console.debug("1: " + sel);
  //     console.debug("2: " + selector);
  // }
  // else
  // {
  //     console.debug("---- SELECTOR OKAY: " + sel);
  // }

  return selector;
};
// TESTS BELOW ALL WORKING FINE :)
// (RegExp typos are hard to spot!)
// escapeSelector('!');
// escapeSelector('"');
// escapeSelector('#');
// escapeSelector('$');
// escapeSelector('%');
// escapeSelector('&');
// escapeSelector("'");
// escapeSelector('(');
// escapeSelector(')');
// escapeSelector('*');
// escapeSelector('+');
// escapeSelector(',');
// escapeSelector('.');
// escapeSelector('/');
// escapeSelector(':');
// escapeSelector(';');
// escapeSelector('<');
// escapeSelector('=');
// escapeSelector('>');
// escapeSelector('?');
// escapeSelector('@');
// escapeSelector('[');
// escapeSelector('\\');
// escapeSelector(']');
// escapeSelector('^');
// escapeSelector('`');
// escapeSelector('{');
// escapeSelector('|');
// escapeSelector('}');
// escapeSelector('~');

module.exports = escapeJQuerySelector
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/extended-throttle.js":[function(require,module,exports){
function extendedThrottle(startCb, tickCb, endCb, tickRate, waitThreshold, context) {
  if (!tickRate) tickRate = 250;
  if (!waitThreshold) waitThreshold = tickRate;

  var first = true,
    last,
    deferTimer;

  return function() {
    var ctx = context || this,
      now = (Date.now && Date.now()) || new Date().getTime(),
      args = arguments;

    if (!(last && now < last + tickRate)) {
      last = now;
      if (first) {
        startCb.apply(ctx, args);
        first = false;
      } else {
        tickCb.apply(ctx, args);
      }
    }

    clearTimeout(deferTimer);
    deferTimer = setTimeout(function() {
      last = now;
      first = true;
      endCb.apply(ctx, args);
    }, waitThreshold);
  };
};

module.exports = extendedThrottle
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/get-orientation.js":[function(require,module,exports){
var ViewsConstants = require('../views/constants')

/**
 *
 * @param $viewport
 * @returns {ReadiumSDK.Views.ORIENTATION_LANDSCAPE|ReadiumSDK.Views.ORIENTATION_PORTRAIT}
 */
function getOrientation($viewport) {

  var viewportWidth = $viewport.width();
  var viewportHeight = $viewport.height();

  if (!viewportWidth || !viewportHeight) {
    return undefined;
  }

  return viewportWidth >= viewportHeight ? ViewsConstants.ORIENTATION_LANDSCAPE : ViewsConstants.ORIENTATION_PORTRAIT;
};

module.exports = getOrientation
},{"../views/constants":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/constants.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/index.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

module.exports = {
  BeginsWith: require('./begins-with'),
  CSSTransition: require('./css-transition'),
  CSSTransformString: require('./css-transform-string'),
  deduceSyntheticSpread: require('./deduce-synthetic-spread'),
  EndsWith: require('./ends-with'),
  escapeJQuerySelector: require('./escape-jquery-selector'),
  extendedThrottle: require('./extended-throttle'),
  getOrientation: require('./get-orientation'),
  isIframeAlive: require('./is-iframe-alive'),
  isRenditionSpreadPermittedForItem: require('./is-rendition-spread-permitted-for-item'),
  loadTemplate: require('./load-template'),
  Margins: require('./margins'),
  Rect: require('./rect'),
  RemoveFromString: require('./remove-from-string'),
  ResolveContentRef: require('./resolve-content-ref'),
  setStyles: require('./set-styles'),
  triggerLayout: require('./trigger-layout'),
  UpdateHtmlFontSize: require('./update-html-font-size')
}
},{"./begins-with":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/begins-with.js","./css-transform-string":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/css-transform-string.js","./css-transition":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/css-transition.js","./deduce-synthetic-spread":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/deduce-synthetic-spread.js","./ends-with":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/ends-with.js","./escape-jquery-selector":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/escape-jquery-selector.js","./extended-throttle":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/extended-throttle.js","./get-orientation":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/get-orientation.js","./is-iframe-alive":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/is-iframe-alive.js","./is-rendition-spread-permitted-for-item":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/is-rendition-spread-permitted-for-item.js","./load-template":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/load-template.js","./margins":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/margins.js","./rect":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/rect.js","./remove-from-string":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/remove-from-string.js","./resolve-content-ref":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/resolve-content-ref.js","./set-styles":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/set-styles.js","./trigger-layout":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/trigger-layout.js","./update-html-font-size":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/update-html-font-size.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/is-iframe-alive.js":[function(require,module,exports){
/**
 *
 * @param iframe
 * @returns {boolean}
 */
function isIframeAlive(iframe) {
  var w = undefined;
  var d = undefined;
  try {
    w = iframe.contentWindow;
    d = iframe.contentDocument;
  } catch (ex) {
    console.error(ex);
    return false;
  }

  return w && d;
}

module.exports = isIframeAlive
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/is-rendition-spread-permitted-for-item.js":[function(require,module,exports){
var SpineItemConstants = require('../models/spine-item-constants')
var ViewsConstants = require('../views/constants')

/**
 *
 * @param item
 * @param orientation
 * @returns {boolean}
 */
function isRenditionSpreadPermittedForItem(item, orientation) {

  var rendition_spread = item.getRenditionSpread();

  return !rendition_spread || rendition_spread == SpineItemConstants.RENDITION_SPREAD_BOTH || rendition_spread == SpineItemConstants.RENDITION_SPREAD_AUTO || (rendition_spread == SpineItemConstants.RENDITION_SPREAD_LANDSCAPE && orientation == ViewsConstants.ORIENTATION_LANDSCAPE) || (rendition_spread == SpineItemConstants.RENDITION_SPREAD_PORTRAIT && orientation == ViewsConstants.ORIENTATION_PORTRAIT);
};

module.exports = isRenditionSpreadPermittedForItem
},{"../models/spine-item-constants":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine-item-constants.js","../views/constants":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/constants.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/load-template.js":[function(require,module,exports){
/**
 *
 * @param name
 * @param params
 * @returns {Helpers.loadTemplate.cache}
 */
function loadTemplate(name, params) {
  return loadTemplate.cache[name];
};

/**
 *
 * @type {{fixed_book_frame: string, single_page_frame: string, scrolled_book_frame: string, reflowable_book_frame: string, reflowable_book_page_frame: string}}
 */
loadTemplate.cache = {
  "fixed_book_frame": '<div id="fixed-book-frame" class="clearfix book-frame fixed-book-frame"></div>',

  "single_page_frame": '<div><div id="scaler"><iframe scrolling="no" class="iframe-fixed"></iframe></div></div>',
  //"single_page_frame" : '<div><iframe scrolling="no" class="iframe-fixed" id="scaler"></iframe></div>',

  "scrolled_book_frame": '<div id="reflowable-book-frame" class="clearfix book-frame reflowable-book-frame"><div id="scrolled-content-frame"></div></div>',
  "reflowable_book_frame": '<div id="reflowable-book-frame" class="clearfix book-frame reflowable-book-frame"></div>',
  "reflowable_book_page_frame": '<div id="reflowable-content-frame" class="reflowable-content-frame"><iframe scrolling="no" id="epubContentIframe"></iframe></div>'
};

module.exports = loadTemplate;
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/margins.js":[function(require,module,exports){
/**
 *
 * @param margin
 * @param border
 * @param padding
 * @constructor
 */
function Margins(margin, border, padding) {

  this.margin = margin;
  this.border = border;
  this.padding = padding;

  this.left = this.margin.left + this.border.left + this.padding.left;
  this.right = this.margin.right + this.border.right + this.padding.right;
  this.top = this.margin.top + this.border.top + this.padding.top;
  this.bottom = this.margin.bottom + this.border.bottom + this.padding.bottom;

  this.width = function() {
    return this.left + this.right;
  };

  this.height = function() {
    return this.top + this.bottom;
  }
};

/**
 *
 * @param $element
 * @returns {Helpers.Rect}
 */
Margins.fromElement = function($element) {
  return new this($element.margin(), $element.border(), $element.padding());
};

/**
 * @returns {Helpers.Rect}
 */
Margins.empty = function() {

  return new this({
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  }, {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  }, {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  });

};

module.exports = Margins
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/rect.js":[function(require,module,exports){
/**
 *
 * @param left
 * @param top
 * @param width
 * @param height
 * @constructor
 */

var _ = require('underscore');
var jQuery = require('jquery');

function Rect(left, top, width, height) {

  this.left = left;
  this.top = top;
  this.width = width;
  this.height = height;

  this.right = function() {
    return this.left + this.width;
  };

  this.bottom = function() {
    return this.top + this.height;
  };

  this.isOverlap = function(rect, tolerance) {

    if (tolerance == undefined) {
      tolerance = 0;
    }

    return !(rect.right() < this.left + tolerance ||
      rect.left > this.right() - tolerance ||
      rect.bottom() < this.top + tolerance ||
      rect.top > this.bottom() - tolerance);
  }
};

/**
 *
 * @param $element
 * @returns {Helpers.Rect}
 */
//This method treats multicolumn view as one long column and finds the rectangle of the element in this "long" column
//we are not using jQuery Offset() and width()/height() function because for multicolumn rendition_layout it produces rectangle as a bounding box of element that
// reflows between columns this is inconstant and difficult to analyze .
Rect.fromElement = function($element) {

  var e;
  if (_.isArray($element) || $element instanceof jQuery)
    e = $element[0];
  else
    e = $element;
  // TODODM this is somewhat hacky. Text (range?) elements don't have a position so we have to ask the parent.
  if (e.nodeType === 3) {
    e = $element.parent()[0];
  }


  var offsetLeft = e.offsetLeft;
  var offsetTop = e.offsetTop;
  var offsetWidth = e.offsetWidth;
  var offsetHeight = e.offsetHeight;

  while (e = e.offsetParent) {
    offsetLeft += e.offsetLeft;
    offsetTop += e.offsetTop;
  }

  return new Rect(offsetLeft, offsetTop, offsetWidth, offsetHeight);
};

module.exports = Rect

},{"jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/remove-from-string.js":[function(require,module,exports){
/**
 *
 * @param str
 * @param toRemove
 * @returns {string}
 * @static
 */
function RemoveFromString(str, toRemove) {

  var startIx = str.indexOf(toRemove);

  if (startIx == -1) {
    return str;
  }

  return str.substring(0, startIx) + str.substring(startIx + toRemove.length);
};

module.exports = RemoveFromString
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/resolve-content-ref.js":[function(require,module,exports){
/**
 *
 * @param contentRef
 * @param sourceFileHref
 * @returns {string}
 * @constructor
 */
function ResolveContentRef(contentRef, sourceFileHref) {

  if (!sourceFileHref) {
    return contentRef;
  }

  var sourceParts = sourceFileHref.split("/");
  sourceParts.pop(); //remove source file name

  var pathComponents = contentRef.split("/");

  while (sourceParts.length > 0 && pathComponents[0] === "..") {

    sourceParts.pop();
    pathComponents.splice(0, 1);
  }

  var combined = sourceParts.concat(pathComponents);

  return combined.join("/");

};

module.exports = ResolveContentRef

},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/set-styles.js":[function(require,module,exports){
/**
 *
 * @param styles
 * @param $element
 */
function setStyles(styles, $element) {

  var count = styles.length;

  if (!count) {
    return;
  }

  for (var i = 0; i < count; i++) {
    var style = styles[i];
    if (style.selector) {
      $(style.selector, $element).css(style.declarations);
    } else {
      $element.css(style.declarations);
    }
  }

};

module.exports = setStyles
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/trigger-layout.js":[function(require,module,exports){
/**
 *
 * @param $iframe
 */
function triggerLayout($iframe) {

  var doc = $iframe[0].contentDocument;

  if (!doc) {
    return;
  }

  var ss = undefined;
  try {
    ss = doc.styleSheets && doc.styleSheets.length ? doc.styleSheets[0] : undefined;
    if (!ss) {
      var style = doc.createElement('style');
      doc.head.appendChild(style);
      style.appendChild(doc.createTextNode(''));
      ss = style.sheet;
    }

    if (ss)
      ss.insertRule('body:first-child::before {content:\'READIUM\';color: red;font-weight: bold;}', ss.cssRules.length);
  } catch (ex) {
    console.error(ex);
  }

  try {
    var el = doc.createElementNS("http://www.w3.org/1999/xhtml", "style");
    el.appendChild(doc.createTextNode("*{}"));
    doc.body.appendChild(el);
    doc.body.removeChild(el);

    if (ss)
      ss.deleteRule(ss.cssRules.length - 1);
  } catch (ex) {
    console.error(ex);
  }

  if (doc.body) {
    var val = doc.body.offsetTop; // triggers layout
  }

};

module.exports = triggerLayout
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/update-html-font-size.js":[function(require,module,exports){
var $ = require('jquery')
require('../../../lib/jquery-sizes')

function UpdateHtmlFontSize($epubHtml, fontSize) {
  var factor = fontSize / 100;
  var win = $epubHtml[0].ownerDocument.defaultView;
  var $textblocks = $('p, div, span, h1, h2, h3, h4, h5, h6, li, blockquote, td, pre', $epubHtml);
  var originalLineHeight;


  // need to do two passes because it is possible to have nested text blocks. 
  // If you change the font size of the parent this will then create an inaccurate
  // font size for any children. 
  for (var i = 0; i < $textblocks.length; i++) {
    var ele = $textblocks[i],
      fontSizeAttr = ele.getAttribute('data-original-font-size');

    if (!fontSizeAttr) {
      var style = win.getComputedStyle(ele);
      var originalFontSize = parseInt(style.fontSize);
      originalLineHeight = parseInt(style.lineHeight);

      ele.setAttribute('data-original-font-size', originalFontSize);
      // getComputedStyle will not calculate the line-height if the value is 'normal'. In this case parseInt will return NaN
      if (originalLineHeight) {
        ele.setAttribute('data-original-line-height', originalLineHeight);
      }
    }
  }

  // reset variable so the below logic works. All variables in JS are function scoped. 
  originalLineHeight = 0;
  for (var i = 0; i < $textblocks.length; i++) {
    var ele = $textblocks[i],
      fontSizeAttr = ele.getAttribute('data-original-font-size'),
      lineHeightAttr = ele.getAttribute('data-original-line-height'),
      originalFontSize = Number(fontSizeAttr);

    if (lineHeightAttr) {
      originalLineHeight = Number(lineHeightAttr);
    } else {
      originalLineHeight = 0;
    }

    ele.style.fontSize = (originalFontSize * factor) + 'px';
    if (originalLineHeight) {
      ele.style.lineHeight = (originalLineHeight * factor) + 'px';
    }

  }
  $epubHtml.css("font-size", fontSize + "%");
}

module.exports = UpdateHtmlFontSize
},{"../../../lib/jquery-sizes":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/lib/jquery-sizes.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/index.js":[function(require,module,exports){
var _ = require('underscore'),
  Backbone = require('backbone')

var ReadiumSDK = {
  Views: require('./views'),
  Events: require('./events'),
  version: function() {
    return "0.8.0";
  }
}

require('./navigator-shim')

_.extend(ReadiumSDK, Backbone.Events)

module.exports = ReadiumSDK
},{"./events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/events.js","./navigator-shim":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/navigator-shim.js","./views":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/index.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/internal-events.js":[function(require,module,exports){
    /**
     * Internal Events
     *
     * @desc Should not be triggered outside of {@link ReadiumSDK.Views.ReaderView}.
     * @namespace
     */

    module.exports = {
      /**
       * @event
       */
      CURRENT_VIEW_PAGINATION_CHANGED: "CurrentViewPaginationChanged",
    }
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/bookmark-data.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.


/**
 * @class ReadiumSDK.Models.BookmarkData
 */
function BookmarkData(idref, contentCFI) {

  /**
   * spine item idref
   * @property idref
   * @type {string}
   */
  this.idref = idref;

  /**
   * cfi of the first visible element
   * @property contentCFI
   * @type {string}
   */
  this.contentCFI = contentCFI;

  this.toString = function() {
    return JSON.stringify(this);
  }
};

module.exports = BookmarkData
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/current-pages-info.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * Used to report pagination state back to the host application
 *
 * @class ReadiumSDK.Models.CurrentPagesInfo
 *
 * @constructor
 *
 * @param {ReadiumSDK.Models.Spine} spine
 * @param {boolean} isFixedLayout is fixed or reflowable spine item
 */

function CurrentPagesInfo(spine, isFixedLayout) {


  this.isRightToLeft = spine.isRightToLeft();
  this.isFixedLayout = isFixedLayout;
  this.spineItemCount = spine.items.length
  this.openPages = [];

  this.addOpenPage = function(spineItemPageIndex, spineItemPageCount, idref, spineItemIndex) {
    this.openPages.push({
      spineItemPageIndex: spineItemPageIndex,
      spineItemPageCount: spineItemPageCount,
      idref: idref,
      spineItemIndex: spineItemIndex
    });

    this.sort();
  };

  this.canGoLeft = function() {
    return this.isRightToLeft ? this.canGoNext() : this.canGoPrev();
  };

  this.canGoRight = function() {
    return this.isRightToLeft ? this.canGoPrev() : this.canGoNext();
  };

  this.canGoNext = function() {

    if (this.openPages.length == 0)
      return false;

    var lastOpenPage = this.openPages[this.openPages.length - 1];

    // TODO: handling of non-linear spine items ("ancillary" documents), allowing page turn within the reflowable XHTML, but preventing previous/next access to sibling spine items. Also needs "go back" feature to navigate to source hyperlink location that led to the non-linear document.
    // See https://github.com/readium/readium-shared-js/issues/26

    // Removed, needs to be implemented properly as per above.
    // See https://github.com/readium/readium-shared-js/issues/108
    // if(!spine.isValidLinearItem(lastOpenPage.spineItemIndex))
    //     return false;

    return lastOpenPage.spineItemIndex < spine.last().index || lastOpenPage.spineItemPageIndex < lastOpenPage.spineItemPageCount - 1;
  };

  this.canGoPrev = function() {

    if (this.openPages.length == 0)
      return false;

    var firstOpenPage = this.openPages[0];

    // TODO: handling of non-linear spine items ("ancillary" documents), allowing page turn within the reflowable XHTML, but preventing previous/next access to sibling spine items. Also needs "go back" feature to navigate to source hyperlink location that led to the non-linear document.
    // See https://github.com/readium/readium-shared-js/issues/26

    // Removed, needs to be implemented properly as per above.
    // //https://github.com/readium/readium-shared-js/issues/108
    // if(!spine.isValidLinearItem(firstOpenPage.spineItemIndex))
    //     return false;

    return spine.first().index < firstOpenPage.spineItemIndex || 0 < firstOpenPage.spineItemPageIndex;
  };

  this.sort = function() {

    this.openPages.sort(function(a, b) {

      if (a.spineItemIndex != b.spineItemIndex) {
        return a.spineItemIndex - b.spineItemIndex;
      }

      return a.pageIndex - b.pageIndex;

    });

  };

}

module.exports = CurrentPagesInfo
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/media-overlay.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 *
 * @param package
 * @constructor
 */

var SmilModel = require('./smil-model')

var MediaOverlay = function(package) {

  this.package = package;


  this.parallelAt = function(timeMilliseconds) {
    var offset = 0;

    for (var i = 0; i < this.smil_models.length; i++) {
      var smilData = this.smil_models[i];

      var timeAdjusted = timeMilliseconds - offset;

      var para = smilData.parallelAt(timeAdjusted);
      if (para) {
        return para;
      }

      offset += smilData.durationMilliseconds_Calculated();
    }

    return undefined;
  };

  this.percentToPosition = function(percent, smilData, par, milliseconds) {
    if (percent < 0.0 || percent > 100.0) {
      percent = 0.0;
    }

    var total = this.durationMilliseconds_Calculated();

    var timeMs = total * (percent / 100.0);

    par.par = this.parallelAt(timeMs);
    if (!par.par) {
      return;
    }

    var smilDataPar = par.par.getSmil();
    if (!smilDataPar) {
      return;
    }

    var smilDataOffset = 0;

    for (var i = 0; i < this.smil_models.length; i++) {
      smilData.smilData = this.smil_models[i];
      if (smilData.smilData == smilDataPar) {
        break;
      }
      smilDataOffset += smilData.smilData.durationMilliseconds_Calculated();
    }

    milliseconds.milliseconds = timeMs - (smilDataOffset + smilData.smilData.clipOffset(par.par));
  };

  this.durationMilliseconds_Calculated = function() {
    var total = 0;

    for (var i = 0; i < this.smil_models.length; i++) {
      var smilData = this.smil_models[i];

      total += smilData.durationMilliseconds_Calculated();
    }

    return total;
  };

  this.smilAt = function(smilIndex) {
    if (smilIndex < 0 || smilIndex >= this.smil_models.length) {
      return undefined;
    }

    return this.smil_models[smilIndex];
  }

  this.positionToPercent = function(smilIndex, parIndex, milliseconds) {
    // console.log(">>>>>>>>>>");
    // console.log(milliseconds);
    // console.log(smilIndex);
    // console.log(parIndex);
    // console.log("-------");

    if (smilIndex >= this.smil_models.length) {
      return -1.0;
    }

    var smilDataOffset = 0;
    for (var i = 0; i < smilIndex; i++) {
      var sd = this.smil_models[i];
      smilDataOffset += sd.durationMilliseconds_Calculated();
    }

    //console.log(smilDataOffset);

    var smilData = this.smil_models[smilIndex];

    var par = smilData.nthParallel(parIndex);
    if (!par) {
      return -1.0;
    }

    var offset = smilDataOffset + smilData.clipOffset(par) + milliseconds;

    //console.log(offset);

    var total = this.durationMilliseconds_Calculated();

    ///console.log(total);

    var percent = (offset / total) * 100;

    //console.log("<<<<<<<<<<< " + percent);

    return percent;
  };

  this.smil_models = [];

  this.skippables = [];
  this.escapables = [];

  this.duration = undefined;
  this.narrator = undefined;


  this.activeClass = undefined;
  this.playbackActiveClass = undefined;

  this.DEBUG = false;


  this.getSmilBySpineItem = function(spineItem) {
    if (!spineItem) return undefined;

    for (var i = 0, count = this.smil_models.length; i < count; i++) {
      var smil = this.smil_models[i];
      if (smil.spineItemId === spineItem.idref) {
        if (spineItem.media_overlay_id !== smil.id) {
          console.error("SMIL INCORRECT ID?? " + spineItem.media_overlay_id + " /// " + smil.id);
        }
        return smil;
      }
    }

    return undefined;
  };

  /*
  this.getSmilById = function (id) {

      for(var i = 0, count = this.smil_models.length; i < count; i++) {

          var smil = this.smil_models[i];
          if(smil.id === id) {
              return smil;
          }
      }

      return undefined;
  };
  */

  this.getNextSmil = function(smil) {

    var index = this.smil_models.indexOf(smil);
    if (index == -1 || index == this.smil_models.length - 1) {
      return undefined;
    }

    return this.smil_models[index + 1];
  }

  this.getPreviousSmil = function(smil) {

    var index = this.smil_models.indexOf(smil);
    if (index == -1 || index == 0) {
      return undefined;
    }

    return this.smil_models[index - 1];
  }
};

MediaOverlay.fromDTO = function(moDTO, package) {

  var mo = new MediaOverlay(package);
mo.DEBUG = true;
  if (!moDTO) {
    console.debug("No Media Overlay.");
    return mo;
  }

  console.debug("Media Overlay INIT...", moDTO, package);

  if (mo.DEBUG)
    console.debug(JSON.stringify(moDTO));

  mo.duration = moDTO.duration;
  if (mo.duration && mo.duration.length && mo.duration.length > 0) {
    console.error("SMIL total duration is string, parsing float... (" + mo.duration + ")");
    mo.duration = parseFloat(mo.duration);
  }
  if (mo.DEBUG)
    console.debug("Media Overlay Duration (TOTAL): " + mo.duration);

  mo.narrator = moDTO.narrator;
  if (mo.DEBUG)
    console.debug("Media Overlay Narrator: " + mo.narrator);

  mo.activeClass = moDTO.activeClass;
  if (mo.DEBUG)
    console.debug("Media Overlay Active-Class: " + mo.activeClass);

  mo.playbackActiveClass = moDTO.playbackActiveClass;
  if (mo.DEBUG)
    console.debug("Media Overlay Playback-Active-Class: " + mo.playbackActiveClass);

  var count = moDTO.smil_models.length;
  if (mo.DEBUG)
    console.debug("Media Overlay SMIL count: " + count);

  for (var i = 0; i < count; i++) {
    var smilModel = SmilModel.fromSmilDTO(moDTO.smil_models[i], mo);
    mo.smil_models.push(smilModel);

    if (mo.DEBUG)
      console.debug("Media Overlay Duration (SPINE ITEM): " + smilModel.duration);
  }

  count = moDTO.skippables.length;
  if (mo.DEBUG)
    console.debug("Media Overlay SKIPPABLES count: " + count);

  for (var i = 0; i < count; i++) {
    mo.skippables.push(moDTO.skippables[i]);

    //if (mo.DEBUG)
    //    console.debug("Media Overlay SKIPPABLE: " + mo.skippables[i]);
  }

  count = moDTO.escapables.length;
  if (mo.DEBUG)
    console.debug("Media Overlay ESCAPABLES count: " + count);

  for (var i = 0; i < count; i++) {
    mo.escapables.push(moDTO.escapables[i]);

    //if (mo.DEBUG)
    //    console.debug("Media Overlay ESCAPABLE: " + mo.escapables[i]);
  }

  return mo;
};

module.exports = MediaOverlay

},{"./smil-model":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/index.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/package.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var Helpers = require('../helpers')
var MediaOverlay = require('./media-overlay')
var Spine = require('./spine')
var SpineItemConstants = require('./spine-item-constants')

/**
 *
 * @class ReadiumSDK.Models.Package
 * @constructor
 */

var Package = function(packageData) {

  var self = this;

  this.spine = undefined;

  this.rootUrl = undefined;
  this.rootUrlMO = undefined;

  this.media_overlay = undefined;

  this.rendition_viewport = undefined;

  this.rendition_flow = undefined;

  this.rendition_layout = undefined;

  //TODO: unused yet!
  this.rendition_spread = undefined;

  //TODO: unused yet!
  this.rendition_orientation = undefined;

  this.resolveRelativeUrlMO = function(relativeUrl) {

    if (self.rootUrlMO && self.rootUrlMO.length > 0) {

      if (Helpers.EndsWith(self.rootUrlMO, "/")) {
        return self.rootUrlMO + relativeUrl;
      } else {
        return self.rootUrlMO + "/" + relativeUrl;
      }
    }

    return self.resolveRelativeUrl(relativeUrl);
  };

  this.resolveRelativeUrl = function(relativeUrl) {

    if (self.rootUrl) {

      if (Helpers.EndsWith(self.rootUrl, "/")) {
        return self.rootUrl + relativeUrl;
      } else {
        return self.rootUrl + "/" + relativeUrl;
      }
    }

    return relativeUrl;
  };

  this.isFixedLayout = function() {
    return self.rendition_layout === SpineItemConstants.RENDITION_LAYOUT_PREPAGINATED;
  };

  this.isReflowable = function() {
    return !self.isFixedLayout();
  };


  if (packageData) {

    this.rootUrl = packageData.rootUrl;
    this.rootUrlMO = packageData.rootUrlMO;

    this.rendition_viewport = packageData.rendition_viewport;

    this.rendition_layout = packageData.rendition_layout;

    this.rendition_flow = packageData.rendition_flow;
    this.rendition_orientation = packageData.rendition_orientation;
    this.rendition_spread = packageData.rendition_spread;

    this.spine = new Spine(this, packageData.spine);

    this.media_overlay = MediaOverlay.fromDTO(packageData.media_overlay, this);
  }
};

module.exports = Package
},{"../helpers":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/index.js","./media-overlay":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/media-overlay.js","./spine":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine.js","./spine-item-constants":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine-item-constants.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/page-open-request.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * Representation of opening page request
 * Provides the spine item to be opened and one of the following properties:
 *  spineItemPageIndex {Number},
 *  elementId {String},
 *  elementCfi {String},
 *  firstPage {bool},
 *  lastPage {bool}
 *
 * @param {ReadiumSDK.Models.SpineItem} spineItem
 * @param {object} [initiator]
 *
 * @constructor
 */
var PageOpenRequest = function(spineItem, initiator) {

  this.spineItem = spineItem;
  this.spineItemPageIndex = undefined;
  this.elementId = undefined;
  this.elementCfi = undefined;
  this.firstPage = false;
  this.lastPage = false;
  this.initiator = initiator;

  this.reset = function() {
    this.spineItemPageIndex = undefined;
    this.elementId = undefined;
    this.elementCfi = undefined;
    this.firstPage = false;
    this.lastPage = false;
  };

  this.setFirstPage = function() {
    this.reset();
    this.firstPage = true;
  };

  this.setLastPage = function() {
    this.reset();
    this.lastPage = true;
  };

  this.setPageIndex = function(pageIndex) {
    this.reset();
    this.spineItemPageIndex = pageIndex;
  };

  this.setElementId = function(elementId) {
    this.reset();
    this.elementId = elementId;
  };

  this.setElementCfi = function(elementCfi) {

    this.reset();
    this.elementCfi = elementCfi;
  };


};

module.exports = PageOpenRequest
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-iterator.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var escapeJQuerySelector = require('../helpers/escape-jquery-selector')

/**
 *
 * @param smil
 * @constructor
 */

function SmilIterator(smil) {

  this.smil = smil;
  this.currentPar = undefined;

  this.reset = function() {
    this.currentPar = findParNode(0, this.smil, false);
  };

  /*
  this.firstDeep = function(container) {
      var par = container.nodeType === "par" ? container : findParNode(0, container, false);

      return par;
  };
  */
  //
  //    this.ensureNextValidTextElement = function()
  //    {
  //        if (!this.currentPar)
  //        {
  //            console.debug("Par iterator is out of range");
  //            return;
  //        }
  //
  //        while (this.currentPar && !this.currentPar.element)
  //        {
  //            this.next();
  //        }
  //    };

  this.findTextId = function(id) {
    if (!this.currentPar) {
      console.debug("Par iterator is out of range");
      return;
    }

    if (!id) {
      return false;
    }

    while (this.currentPar) {
      if (this.currentPar.element) {
        if (id === this.currentPar.text.srcFragmentId) //this.currentPar.element.id
        {
          return true;
        }

        // OUTER match
        var parent = this.currentPar.element.parentNode;
        while (parent) {
          if (parent.id && parent.id == id) {
            return true;
          }

          parent = parent.parentNode;
        }

        // INNER match
        //var inside = this.currentPar.element.ownerDocument.getElementById(id);
        var inside = $("#" + escapeJQuerySelector(id), this.currentPar.element);
        if (inside && inside.length && inside[0]) {
          return true;
        }
      }

      this.next();
    }

    return false;
  }

  this.next = function() {

    if (!this.currentPar) {
      console.debug("Par iterator is out of range");
      return;
    }

    this.currentPar = findParNode(this.currentPar.index + 1, this.currentPar.parent, false);
  };

  this.previous = function() {

    if (!this.currentPar) {
      console.debug("Par iterator is out of range");
      return;
    }

    this.currentPar = findParNode(this.currentPar.index - 1, this.currentPar.parent, true);
  };

  this.isLast = function() {

    if (!this.currentPar) {
      console.debug("Par iterator is out of range");
      return;
    }

    if (findParNode(this.currentPar.index + 1, this.currentPar.parent, false)) {
      return false;
    }

    return true;
  }

  this.goToPar = function(par) {

    while (this.currentPar) {
      if (this.currentPar == par) {
        break;
      }

      this.next();
    }
  };

  function findParNode(startIndex, container, previous) {

    for (var i = startIndex, count = container.children.length; i >= 0 && i < count; i += (previous ? -1 : 1)) {

      var node = container.children[i];
      if (node.nodeType == "par") {
        return node;
      }

      // assert(node.nodeType == "seq")
      node = findParNode(previous ? node.children.length - 1 : 0, node, previous);

      if (node) {
        return node;
      }
    }

    if (container.parent) {
      return findParNode(container.index + (previous ? -1 : 1), container.parent, previous);
    }

    return undefined;
  }

  this.reset();
};

module.exports = SmilIterator

},{"../helpers/escape-jquery-selector":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/escape-jquery-selector.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/audio-node.js":[function(require,module,exports){
var MediaNode = require('./media-node')

function AudioNode(parent) {

  this.parent = parent;

  this.nodeType = "audio";

  this.clipBegin = 0;

  this.MAX = 1234567890.1; //Number.MAX_VALUE - 0.1; //Infinity;
  this.clipEnd = this.MAX;


  this.clipDurationMilliseconds = function() {
    var _clipBeginMilliseconds = this.clipBegin * 1000;
    var _clipEndMilliseconds = this.clipEnd * 1000;

    if (this.clipEnd >= this.MAX || _clipEndMilliseconds <= _clipBeginMilliseconds) {
      return 0;
    }

    return _clipEndMilliseconds - _clipBeginMilliseconds;
  };
};

AudioNode.prototype = new MediaNode();

module.exports = AudioNode
},{"./media-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/media-node.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/index.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var AudioNode = require('./audio-node')
var TextNode = require('./text-node')
var SeqNode = require('./seq-node')
var ParNode = require('./par-node')

function SmilModel() {

  this.parent = undefined;



  this.children = []; //collection of seq or par smil nodes
  this.id = undefined; //manifest item id
  this.href = undefined; //href of the .smil source file
  this.duration = undefined;
  this.mo = undefined;

  this.parallelAt = function(timeMilliseconds) {
    return this.children[0].parallelAt(timeMilliseconds);
  };

  this.nthParallel = function(index) {
    var count = {
      count: -1
    };
    return this.children[0].nthParallel(index, count);
  };

  this.clipOffset = function(par) {
    var offset = {
      offset: 0
    };
    if (this.children[0].clipOffset(offset, par)) {
      return offset.offset;
    }

    return 0;
  };

  this.durationMilliseconds_Calculated = function() {
    return this.children[0].durationMilliseconds();
  };


  var _epubtypeSyncs = [];
  // 
  // this.clearSyncs = function()
  // {
  //     _epubtypeSyncs = [];
  // };

  this.hasSync = function(epubtype) {
    for (var i = 0; i < _epubtypeSyncs.length; i++) {
      if (_epubtypeSyncs[i] === epubtype) {
        //console.debug("hasSync OK: ["+epubtype+"]");
        return true;
      }
    }

    //console.debug("hasSync??: ["+epubtype+"] " + _epubtypeSyncs);
    return false;
  };

  this.addSync = function(epubtypes) {
    if (!epubtypes) return;

    //console.debug("addSyncs: "+epubtypes);

    var parts = epubtypes.split(' ');
    for (var i = 0; i < parts.length; i++) {
      var epubtype = parts[i].trim();

      if (epubtype.length > 0 && !this.hasSync(epubtype)) {
        _epubtypeSyncs.push(epubtype);

        //console.debug("addSync: "+epubtype);
      }
    }
  };

};

SmilModel.fromSmilDTO = function(smilDTO, mo) {

  if (mo.DEBUG) {
    console.debug("Media Overlay DTO import...");
  }

  var indent = 0;
  var getIndent = function() {
    var str = "";
    for (var i = 0; i < indent; i++) {
      str += "   ";
    }
    return str;
  }

  var smilModel = new SmilModel();
  smilModel.id = smilDTO.id;
  smilModel.spineItemId = smilDTO.spineItemId;
  smilModel.href = smilDTO.href;

  smilModel.smilVersion = smilDTO.smilVersion;

  smilModel.duration = smilDTO.duration;
  if (smilModel.duration && smilModel.duration.length && smilModel.duration.length > 0) {
    console.error("SMIL duration is string, parsing float... (" + smilModel.duration + ")");
    smilModel.duration = parseFloat(smilModel.duration);
  }

  smilModel.mo = mo; //ReadiumSDK.Models.MediaOverlay

  if (smilModel.mo.DEBUG) {
    console.log("JS MO smilVersion=" + smilModel.smilVersion);
    console.log("JS MO id=" + smilModel.id);
    console.log("JS MO spineItemId=" + smilModel.spineItemId);
    console.log("JS MO href=" + smilModel.href);
    console.log("JS MO duration=" + smilModel.duration);
  }

  var safeCopyProperty = function(property, from, to, isRequired) {

    if ((property in from)) { // && from[property] !== ""

      if (!(property in to)) {
        console.debug("property " + property + " not declared in smil node " + to.nodeType);
      }

      to[property] = from[property];

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO: [" + property + "=" + to[property] + "]");
      }
    } else if (isRequired) {
      console.log("Required property " + property + " not found in smil node " + from.nodeType);
    }
  };

  var createNodeFromDTO = function(nodeDTO, parent) {

    var node;

    if (nodeDTO.nodeType == "seq") {

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO seq");
      }

      node = new SeqNode(parent);

      safeCopyProperty("textref", nodeDTO, node, ((parent && parent.parent) ? true : false));
      safeCopyProperty("id", nodeDTO, node);
      safeCopyProperty("epubtype", nodeDTO, node);

      if (node.epubtype) {
        node.getSmil().addSync(node.epubtype);
      }

      indent++;
      copyChildren(nodeDTO, node);
      indent--;
    } else if (nodeDTO.nodeType == "par") {

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO par");
      }

      node = new ParNode(parent);

      safeCopyProperty("id", nodeDTO, node);
      safeCopyProperty("epubtype", nodeDTO, node);

      if (node.epubtype) {
        node.getSmil().addSync(node.epubtype);
      }

      indent++;
      copyChildren(nodeDTO, node);
      indent--;

      for (var i = 0, count = node.children.length; i < count; i++) {
        var child = node.children[i];

        if (child.nodeType == "text") {
          node.text = child;
        } else if (child.nodeType == "audio") {
          node.audio = child;
        } else {
          console.error("Unexpected smil node type: " + child.nodeType);
        }
      }

      ////////////////
      var forceTTS = false; // for testing only!
      ////////////////

      if (forceTTS || !node.audio) {
        // synthetic speech (playback using TTS engine), or embedded media, or blank page
        var fakeAudio = new AudioNode(node);

        fakeAudio.clipBegin = 0;
        fakeAudio.clipEnd = fakeAudio.MAX;
        fakeAudio.src = undefined;

        node.audio = fakeAudio;
      }
    } else if (nodeDTO.nodeType == "text") {

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO text");
      }

      node = new TextNode(parent);

      safeCopyProperty("src", nodeDTO, node, true);
      safeCopyProperty("srcFile", nodeDTO, node, true);
      safeCopyProperty("srcFragmentId", nodeDTO, node, false);
      safeCopyProperty("id", nodeDTO, node);

      node.updateMediaManifestItemId();
    } else if (nodeDTO.nodeType == "audio") {

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO audio");
      }

      node = new AudioNode(parent);

      safeCopyProperty("src", nodeDTO, node, true);
      safeCopyProperty("id", nodeDTO, node);

      safeCopyProperty("clipBegin", nodeDTO, node);
      if (node.clipBegin && node.clipBegin.length && node.clipBegin.length > 0) {
        console.error("SMIL clipBegin is string, parsing float... (" + node.clipBegin + ")");
        node.clipBegin = parseFloat(node.clipBegin);
      }
      if (node.clipBegin < 0) {
        if (smilModel.mo.DEBUG) {
          console.log(getIndent() + "JS MO clipBegin adjusted to ZERO");
        }
        node.clipBegin = 0;
      }

      safeCopyProperty("clipEnd", nodeDTO, node);
      if (node.clipEnd && node.clipEnd.length && node.clipEnd.length > 0) {
        console.error("SMIL clipEnd is string, parsing float... (" + node.clipEnd + ")");
        node.clipEnd = parseFloat(node.clipEnd);
      }
      if (node.clipEnd <= node.clipBegin) {
        if (smilModel.mo.DEBUG) {
          console.log(getIndent() + "JS MO clipEnd adjusted to MAX");
        }
        node.clipEnd = node.MAX;
      }

      //node.updateMediaManifestItemId(); ONLY XHTML SPINE ITEMS 
    } else {
      console.error("Unexpected smil node type: " + nodeDTO.nodeType);
      return undefined;
    }

    return node;

  };

  var copyChildren = function(from, to) {

    var count = from.children.length;

    for (var i = 0; i < count; i++) {
      var node = createNodeFromDTO(from.children[i], to);
      node.index = i;
      to.children.push(node);
    }

  };

  copyChildren(smilDTO, smilModel);

  return smilModel;

};

module.exports = SmilModel
},{"./audio-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/audio-node.js","./par-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/par-node.js","./seq-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/seq-node.js","./text-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/text-node.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/media-node.js":[function(require,module,exports){
var SmilNode = require('./smil-node')

function MediaNode(parent) {

  this.parent = parent;

  this.src = "";
};

MediaNode.prototype = new SmilNode();

module.exports = MediaNode
},{"./smil-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/smil-node.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/par-node.js":[function(require,module,exports){
var TimeContainerNode = require('./time-container-node')

function ParNode(parent) {

  this.parent = parent;

  this.children = [];
  this.nodeType = "par";
  this.text = undefined;
  this.audio = undefined;
  this.element = undefined;


  this.getFirstSeqAncestorWithEpubType = function(epubtype, includeSelf) {
    if (!epubtype) return undefined;

    var parent = includeSelf ? this : this.parent;
    while (parent) {
      if (parent.epubtype && parent.epubtype.indexOf(epubtype) >= 0) {
        return parent; // assert(parent.nodeType === "seq")
      }

      parent = parent.parent;
    }

    return undefined;
  };
};

ParNode.prototype = new TimeContainerNode();

module.exports = ParNode
},{"./time-container-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/time-container-node.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/seq-node.js":[function(require,module,exports){
var TimeContainerNode = require('./time-container-node')

function SeqNode(parent) {

  this.parent = parent;

  this.children = [];
  this.nodeType = "seq";
  this.textref = "";

  this.durationMilliseconds = function() {
    var smilData = this.getSmil();

    var total = 0;

    for (var i = 0; i < this.children.length; i++) {
      var container = this.children[i];
      if (container.nodeType === "par") {
        if (!container.audio) {
          continue;
        }
        if (container.text && (!container.text.manifestItemId || container.text.manifestItemId != smilData.spineItemId)) {
          // console.log(container.text);
          // console.log(smilData.spineItemId);
          continue;
        }

        var clipDur = container.audio.clipDurationMilliseconds();
        total += clipDur;
      } else if (container.nodeType === "seq") {
        total += container.durationMilliseconds();
      }
    }

    return total;
  };

  this.clipOffset = function(offset, par) {
    var smilData = this.getSmil();

    for (var i = 0; i < this.children.length; i++) {
      var container = this.children[i];
      if (container.nodeType === "par") {
        if (container == par) {
          return true;
        }

        if (!container.audio) {
          continue;
        }

        if (container.text && (!container.text.manifestItemId || container.text.manifestItemId != smilData.spineItemId)) {
          continue;
        }

        var clipDur = container.audio.clipDurationMilliseconds();
        offset.offset += clipDur;
      } else if (container.nodeType === "seq") {
        var found = container.clipOffset(offset, par);
        if (found) {
          return true;
        }
      }
    }

    return false;
  };

  this.parallelAt = function(timeMilliseconds) {
    var smilData = this.getSmil();

    var offset = 0;

    for (var i = 0; i < this.children.length; i++) {
      var timeAdjusted = timeMilliseconds - offset;

      var container = this.children[i];

      if (container.nodeType === "par") {
        if (!container.audio) {
          continue;
        }

        if (container.text && (!container.text.manifestItemId || container.text.manifestItemId != smilData.spineItemId)) {
          continue;
        }

        var clipDur = container.audio.clipDurationMilliseconds();

        if (clipDur > 0 && timeAdjusted <= clipDur) {
          return container;
        }

        offset += clipDur;
      } else if (container.nodeType === "seq") {
        var para = container.parallelAt(timeAdjusted);
        if (para) {
          return para;
        }

        offset += container.durationMilliseconds();
      }
    }

    return undefined;
  };

  this.nthParallel = function(index, count) {
    for (var i = 0; i < this.children.length; i++) {
      var container = this.children[i];

      if (container.nodeType === "par") {
        count.count++;

        if (count.count == index) {
          return container;
        }
      } else if (container.nodeType === "seq") {
        var para = container.nthParallel(index, count);
        if (para) {
          return para;
        }
      }
    }

    return undefined;
  };

};

SeqNode.prototype = new TimeContainerNode();

module.exports = TimeContainerNode
},{"./time-container-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/time-container-node.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/smil-node.js":[function(require,module,exports){
function SmilNode(parent) {

  this.parent = parent;

  this.id = "";

  //root node is a smil model
  this.getSmil = function() {

    var node = this;
    while (node.parent) {
      node = node.parent;
    }

    return node;
  };

  this.hasAncestor = function(node) {
    var parent = this.parent;
    while (parent) {
      if (parent == node) {
        return true;
      }

      parent = parent.parent;
    }

    return false;
  };
};

module.exports = SmilNode
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/text-node.js":[function(require,module,exports){
var MediaNode = require('./media-node')
var ResolveContentRef = require('../../helpers/resolve-content-ref')

function TextNode(parent) {

  this.parent = parent;

  this.nodeType = "text";
  this.srcFile = "";
  this.srcFragmentId = "";


  this.manifestItemId = undefined;
  this.updateMediaManifestItemId = function() {
    var smilData = this.getSmil();

    if (!smilData.href || !smilData.href.length) {
      return; // Blank MO page placeholder, no real SMIL
    }

    // var srcParts = item.src.split('#');
    //         item.srcFile = srcParts[0];
    //         item.srcFragmentId = (srcParts.length === 2) ? srcParts[1] : "";

    var src = this.srcFile ? this.srcFile : this.src;
    // console.log("src: " + src);
    // console.log("smilData.href: " + smilData.href);
    var ref = ResolveContentRef(src, smilData.href);
    //console.log("ref: " + ref);
    var full = smilData.mo.package.resolveRelativeUrlMO(ref);
    // console.log("full: " + full);
    // console.log("---");
    for (var j = 0; j < smilData.mo.package.spine.items.length; j++) {
      var item = smilData.mo.package.spine.items[j];
      //console.log("item.href: " + item.href);
      var url = smilData.mo.package.resolveRelativeUrl(item.href);
      //console.log("url: " + url);
      if (url === full) {
        //console.error("FOUND: " + item.idref);
        this.manifestItemId = item.idref;
        return;
      }
    }

    console.error("Cannot set the Media ManifestItemId? " + this.src + " && " + smilData.href);

    //        throw "BREAK";
  };

};

TextNode.prototype = new MediaNode();

module.exports = TextNode
},{"../../helpers/resolve-content-ref":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/resolve-content-ref.js","./media-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/media-node.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/time-container-node.js":[function(require,module,exports){
var SmilNode = require('./smil-node')

function TimeContainerNode(parent) {

  this.parent = parent;

  this.children = typeof this.children === 'undefined' ? [] : this.children;
  this.index = undefined;

  this.epubtype = "";

  this.isEscapable = function(userEscapables) {
    if (this.epubtype === "") {
      return false;
    }

    var smilModel = this.getSmil();
    if (!smilModel.mo) {
      return false;
    }

    var arr = smilModel.mo.escapables;
    if (userEscapables.length > 0) {
      arr = userEscapables;
    }

    for (var i = 0; i < arr.length; i++) {
      if (this.epubtype.indexOf(arr[i]) >= 0) {
        return true;
      }
    }

    return false;
  };

  this.isSkippable = function(userSkippables) {
    if (this.epubtype === "") {
      return false;
    }

    var smilModel = this.getSmil();
    if (!smilModel.mo) {
      return false;
    }

    var arr = smilModel.mo.skippables;
    if (userSkippables.length > 0) {
      arr = userSkippables;
    }

    for (var i = 0; i < arr.length; i++) {
      if (this.epubtype.indexOf(arr[i]) >= 0) {
        return true;
      }
    }

    return false;
  };
};

TimeContainerNode.prototype = new SmilNode()

module.exports = TimeContainerNode
},{"./smil-node":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-model/smil-node.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine-item-constants.js":[function(require,module,exports){
module.exports = {
  RENDITION_LAYOUT_REFLOWABLE: "reflowable",
  RENDITION_LAYOUT_PREPAGINATED: "pre-paginated",

  RENDITION_ORIENTATION_LANDSCAPE: "landscape",
  RENDITION_ORIENTATION_PORTRAIT: "portrait",
  RENDITION_ORIENTATION_AUTO: "auto",

  SPREAD_LEFT: "page-spread-left",
  SPREAD_RIGHT: "page-spread-right",
  SPREAD_CENTER: "page-spread-center",

  RENDITION_SPREAD_NONE: "none",
  RENDITION_SPREAD_LANDSCAPE: "landscape",
  RENDITION_SPREAD_PORTRAIT: "portrait",
  RENDITION_SPREAD_BOTH: "both",
  RENDITION_SPREAD_AUTO: "auto",

  RENDITION_FLOW_PAGINATED: "paginated",
  RENDITION_FLOW_SCROLLED_CONTINUOUS: "scrolled-continuous",
  RENDITION_FLOW_SCROLLED_DOC: "scrolled-doc",
  RENDITION_FLOW_AUTO: "auto"
}
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine-item.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var Constants = require('./spine-item-constants')

/**
 * Wrapper of the SpineItem object received from the host application
 *
 * @class SpineItem
 *
 * @param itemData spine item properties container
 * @param {Number} index
 * @param {Spine} spine
 *
 */
var SpineItem = function(itemData, index, spine) {

  var self = this;

  this.idref = itemData.idref;
  this.href = itemData.href;

  this.linear = itemData.linear ? itemData.linear.toLowerCase() : itemData.linear;

  this.page_spread = itemData.page_spread;

  this.rendition_viewport = itemData.rendition_viewport;

  this.rendition_spread = itemData.rendition_spread;

  //TODO: unused yet!
  this.rendition_orientation = itemData.rendition_orientation;

  this.rendition_layout = itemData.rendition_layout;

  this.rendition_flow = itemData.rendition_flow;



  this.media_overlay_id = itemData.media_overlay_id;

  this.media_type = itemData.media_type;

  this.index = index;
  this.spine = spine;

  validateSpread();

  this.setSpread = function(spread) {
    this.page_spread = spread;

    validateSpread();
  };

  this.isRenditionSpreadAllowed = function() {

    var rendition_spread = self.getRenditionSpread();
    return !rendition_spread || rendition_spread != Constants.RENDITION_SPREAD_NONE;
  };

  function validateSpread() {

    if (!self.page_spread) {
      return;
    }

    if (self.page_spread != Constants.SPREAD_LEFT &&
      self.page_spread != Constants.SPREAD_RIGHT &&
      self.page_spread != Constants.SPREAD_CENTER) {

      console.error(self.page_spread + " is not a recognized spread type");
    }

  }

  this.isLeftPage = function() {
    return self.page_spread == Constants.SPREAD_LEFT;
  };

  this.isRightPage = function() {
    return self.page_spread == Constants.SPREAD_RIGHT;
  };

  this.isCenterPage = function() {
    return self.page_spread == Constants.SPREAD_CENTER;
  };

  this.isReflowable = function() {
    return !self.isFixedLayout();
  };

  this.isFixedLayout = function() {

    // cannot use isPropertyValueSetForItemOrPackage() here!

    var isLayoutExplicitlyDefined = self.getRenditionLayout();

    if (isLayoutExplicitlyDefined) {

      if (self.rendition_layout) {
        if (self.rendition_layout === Constants.RENDITION_LAYOUT_PREPAGINATED) return true;
        if (self.rendition_layout === Constants.RENDITION_LAYOUT_REFLOWABLE) return false;
      }

      return self.spine.package.isFixedLayout();
    }

    // if image or svg use fixed layout
    return self.media_type.indexOf("image/") >= 0;

  };

  this.getRenditionFlow = function() {

    if (self.rendition_flow) {
      return self.rendition_flow;
    }

    return self.spine.package.rendition_flow;
  };

  this.getRenditionViewport = function() {

    if (self.rendition_viewport) {
      return self.rendition_viewport;
    }

    return self.spine.package.rendition_viewport;
  };

  this.getRenditionSpread = function() {

    if (self.rendition_spread) {
      return self.rendition_spread;
    }

    return self.spine.package.rendition_spread;
  };

  this.getRenditionOrientation = function() {

    if (self.rendition_orientation) {
      return self.rendition_orientation;
    }

    return self.spine.package.rendition_orientation;
  };

  this.getRenditionLayout = function() {

    if (self.rendition_layout) {
      return self.rendition_layout;
    }

    return self.spine.package.rendition_layout;
  };

  function isPropertyValueSetForItemOrPackage(propName, propValue) {

    if (self[propName]) {
      return self[propName] === propValue;
    }

    if (self.spine.package[propName]) {
      return self.spine.package[propName] === propValue;
    }

    return false;
  }

  this.isFlowScrolledContinuous = function() {

    return isPropertyValueSetForItemOrPackage("rendition_flow", Constants.RENDITION_FLOW_SCROLLED_CONTINUOUS);
  };

  this.isFlowScrolledDoc = function() {

    return isPropertyValueSetForItemOrPackage("rendition_flow", Constants.RENDITION_FLOW_SCROLLED_DOC);
  };
};

SpineItem.alternateSpread = function(spread) {

  if (spread === Constants.SPREAD_LEFT) {
    return Constants.SPREAD_RIGHT;
  }

  if (spread === Constants.SPREAD_RIGHT) {
    return Constants.SPREAD_LEFT;
  }

  return spread;

};

module.exports = SpineItem
},{"./spine-item-constants":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine-item-constants.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 *  Wrapper of the spine object received from hosting application
 *
 *  @class  ReadiumSDK.Models.Spine
 */

var SpineItem = require('./spine-item')
var SpineItemConstants = require('./spine-item-constants')

function Spine(epubPackage, spineDTO) {

  var self = this;

  /*
   * Collection of spine items
   * @property items
   * @type {Array}
   */
  this.items = [];

  /*
   * Page progression direction ltr|rtl|default
   * @property direction
   * @type {string}
   */
  this.direction = "ltr";

  /*
   * @property package
   * @type {ReadiumSDK.Models.Package}
   *
   */
  this.package = epubPackage;

  var _handleLinear = false;

  this.handleLinear = function(handleLinear) {
    _handleLinear = handleLinear;
  };

  function isValidLinearItem(item) {
    return !_handleLinear || item.linear !== "no";
  }


  this.isValidLinearItem = function(index) {

    if (!isValidIndex(index)) {
      return undefined;
    }

    return isValidLinearItem(this.item(index));
  };

  this.prevItem = function(item) {

    return lookForPrevValidItem(item.index - 1);
  };

  function lookForNextValidItem(ix) {

    if (!isValidIndex(ix)) {
      return undefined;
    }

    var item = self.items[ix];

    if (isValidLinearItem(item)) {
      return item;
    }

    return lookForNextValidItem(item.index + 1);
  }

  function lookForPrevValidItem(ix) {

    if (!isValidIndex(ix)) {
      return undefined;
    }

    var item = self.items[ix];

    if (isValidLinearItem(item)) {
      return item;
    }

    return lookForPrevValidItem(item.index - 1);
  }

  this.nextItem = function(item) {

    return lookForNextValidItem(item.index + 1);
  };

  this.getItemUrl = function(item) {

    return self.package.resolveRelativeUrl(item.href);

  };

  function isValidIndex(index) {

    return index >= 0 && index < self.items.length;
  }

  this.first = function() {

    return lookForNextValidItem(0);
  };

  this.last = function() {

    return lookForPrevValidItem(this.items.length - 1);
  };

  this.isFirstItem = function(item) {

    return self.first() === item;
  };

  this.isLastItem = function(item) {

    return self.last() === item;
  };

  this.item = function(index) {

    if (isValidIndex(index))
      return self.items[index];

    return undefined;
  };

  this.isRightToLeft = function() {

    return self.direction == "rtl";
  };

  this.isLeftToRight = function() {

    return !self.isRightToLeft();
  };

  this.getItemById = function(idref) {

    var length = self.items.length;

    for (var i = 0; i < length; i++) {
      if (self.items[i].idref == idref) {

        return self.items[i];
      }
    }

    return undefined;
  };

  this.getItemByHref = function(href) {

    var length = self.items.length;

    for (var i = 0; i < length; i++) {
      if (self.items[i].href == href) {

        return self.items[i];
      }
    }

    return undefined;
  };

  function updateSpineItemsSpread() {

    var len = self.items.length;

    var isFirstPageInSpread = false;
    var baseSide = self.isLeftToRight() ? SpineItemConstants.SPREAD_LEFT : SpineItemConstants.SPREAD_RIGHT;

    for (var i = 0; i < len; i++) {

      var spineItem = self.items[i];
      if (!spineItem.page_spread) {

        var spread = spineItem.isRenditionSpreadAllowed() ? (isFirstPageInSpread ? baseSide : SpineItem.alternateSpread(baseSide)) : SpineItemConstants.SPREAD_CENTER;
        spineItem.setSpread(spread);
      }

      isFirstPageInSpread = !spineItem.isRenditionSpreadAllowed() || spineItem.page_spread != baseSide;
    }
  }

  if (spineDTO) {

    if (spineDTO.direction) {
      this.direction = spineDTO.direction;
    }

    var length = spineDTO.items.length;
    for (var i = 0; i < length; i++) {
      var item = new SpineItem(spineDTO.items[i], i, this);
      this.items.push(item);
    }

    updateSpineItemsSpread();
  }

};

module.exports = Spine
},{"./spine-item":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine-item.js","./spine-item-constants":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spine-item-constants.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spread.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

// This file was readium-js-shared/js/models/fixed_page_spread.js

var POSITION_LEFT = "left";
var POSITION_RIGHT = "right";
var POSITION_CENTER = "center";

/**
 *
 *
 *
 * @param {ReadiumSDK.Models.Spine} spine
 * @constructor
 */

var Spread = function(spine, isSyntheticSpread) {

  var self = this;

  this.spine = spine;

  this.leftItem = undefined;
  this.rightItem = undefined;
  this.centerItem = undefined;

  var _isSyntheticSpread = isSyntheticSpread;

  this.setSyntheticSpread = function(isSyntheticSpread) {
    _isSyntheticSpread = isSyntheticSpread;
  };

  this.isSyntheticSpread = function() {
    return _isSyntheticSpread;
  };

  this.openFirst = function() {

    if (this.spine.items.length == 0) {
      resetItems();
    } else {
      this.openItem(this.spine.first());
    }
  };

  this.openLast = function() {

    if (this.spine.items.length == 0) {
      resetItems();
    } else {
      this.openItem(this.spine.last());
    }
  };

  this.openItem = function(item) {

    resetItems();

    var position = getItemPosition(item);
    setItemToPosition(item, position);

    if (position != POSITION_CENTER && this.spine.isValidLinearItem(item.index)) { // && item.isRenditionSpreadAllowed() not necessary, see getItemPosition() below
      var neighbour = getNeighbourItem(item);
      if (neighbour) {
        var neighbourPos = getItemPosition(neighbour);
        if (neighbourPos != position && neighbourPos != POSITION_CENTER && !neighbour.isReflowable() && neighbour.isRenditionSpreadAllowed()) {
          setItemToPosition(neighbour, neighbourPos);
        }
      }
    }
  };

  function resetItems() {

    self.leftItem = undefined;
    self.rightItem = undefined;
    self.centerItem = undefined;
  }

  function setItemToPosition(item, position) {

    if (position == POSITION_LEFT) {
      self.leftItem = item;
    } else if (position == POSITION_RIGHT) {
      self.rightItem = item;
    } else {

      if (position != POSITION_CENTER) {
        console.error("Unrecognized position value");
      }

      self.centerItem = item;
    }
  }

  function getItemPosition(item) {

    // includes !item.isRenditionSpreadAllowed() ("rendition:spread-none") ==> force center position
    if (!_isSyntheticSpread) {
      return POSITION_CENTER;
    }

    if (item.isLeftPage()) {
      return POSITION_LEFT;
    }

    if (item.isRightPage()) {
      return POSITION_RIGHT;
    }

    return POSITION_CENTER;
  }

  this.openNext = function() {

    var items = this.validItems();

    if (items.length == 0) {

      this.openFirst();
    } else {

      var nextItem = this.spine.nextItem(items[items.length - 1]);
      if (nextItem) {

        this.openItem(nextItem);
      }
    }
  };

  this.openPrev = function() {

    var items = this.validItems();

    if (items.length == 0) {
      this.openLast();
    } else {

      var prevItem = this.spine.prevItem(items[0]);
      if (prevItem) {

        this.openItem(prevItem);

      }
    }
  };

  this.validItems = function() {

    var arr = [];

    if (this.leftItem) arr.push(this.leftItem);
    if (this.rightItem) arr.push(this.rightItem);
    if (this.centerItem) arr.push(this.centerItem);

    arr.sort(function(a, b) {
      return a.index - b.index;
    });

    return arr;
  };

  function getNeighbourItem(item) {

    if (item.isLeftPage()) {
      return self.spine.isRightToLeft() ? self.spine.prevItem(item) : self.spine.nextItem(item);
    }

    if (item.isRightPage()) {
      return self.spine.isRightToLeft() ? self.spine.nextItem(item) : self.spine.prevItem(item);
    }

    return undefined;
  }

};

module.exports = Spread
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/style.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 *
 * @param selector
 * @param declarations
 * @constructor
 */
var Style = function(selector, declarations) {

  this.selector = selector;
  this.declarations = declarations;

  this.setDeclarations = function(declarations) {

    for (var prop in declarations) {
      if (declarations.hasOwnProperty(prop)) {
        this.declarations[prop] = declarations[prop];
      }
    }

  }
};

module.exports = Style
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/switches.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')

// Description: Parse the epub "switch" tags and hide
// cases that are not supported
function apply(dom) {


  // helper method, returns true if a given case node
  // is supported, false otherwise
  function isSupported(caseNode) {

    var ns = caseNode.attributes["required-namespace"];
    if (!ns) {
      // the namespace was not specified, that should
      // never happen, we don't support it then
      console.log("Encountered a case statement with no required-namespace");
      return false;
    }
    // all the xmlns that readium is known to support
    // TODO this is going to require maintenance
    var supportedNamespaces = ["http://www.w3.org/1998/Math/MathML"];
    return _.include(supportedNamespaces, ns);
  }

  $('switch', dom).each(function() {

    // keep track of whether or now we found one
    var found = false;

    $('case', this).each(function() {

      if (!found && isSupported(this)) {
        found = true; // we found the node, don't remove it
      } else {
        $(this).remove(); // remove the node from the dom
        //                    $(this).prop("hidden", true);
      }
    });

    if (found) {
      // if we found a supported case, remove the default
      $('default', this).remove();
      //                $('default', this).prop("hidden", true);
    }
  })
};

module.exports = {
  apply: apply
}
},{"jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/trigger.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')
var escapeJQuerySelector = require('../helpers/escape-jquery-selector')
var Trigger = require('./trigger')

/**
 * Setter fot epub Triggers
 *
 *
 * @param domNode
 */

var Trigger = function(domNode) {
  var $el = $(domNode);
  this.action = $el.attr("action");
  this.ref = $el.attr("ref");
  this.event = $el.attr("ev:event");
  this.observer = $el.attr("ev:observer");
  this.ref = $el.attr("ref");
};

Trigger.register = function(dom) {
  $('trigger', dom).each(function() {
    var trigger = new Trigger(this);
    trigger.subscribe(dom);
  });
};

Trigger.prototype.subscribe = function(dom) {
  var selector = "#" + this.observer;
  var that = this;
  $(selector, dom).on(this.event, function() {
    that.execute(dom);
  });
};

Trigger.prototype.execute = function(dom) {
  var $target = $("#" + escapeJQuerySelector(this.ref), dom);
  switch (this.action) {
    case "show":
      $target.css("visibility", "visible");
      break;
    case "hide":
      $target.css("visibility", "hidden");
      break;
    case "play":
      $target[0].currentTime = 0;
      $target[0].play();
      break;
    case "pause":
      $target[0].pause();
      break;
    case "resume":
      $target[0].play();
      break;
    case "mute":
      $target[0].muted = true;
      break;
    case "unmute":
      $target[0].muted = false;
      break;
    default:
      console.log("do not no how to handle trigger " + this.action);
  }
};

module.exports = Trigger
},{"../helpers/escape-jquery-selector":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/escape-jquery-selector.js","./trigger":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/trigger.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/viewer-settings.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 *
 * @param settingsData
 * @constructor
 */
var ViewerSettings = function(settingsData) {

  var self = this;

  this.syntheticSpread = "auto";
  this.fontSize = 100;
  this.columnGap = 20;

  this.mediaOverlaysPreservePlaybackWhenScroll = false;

  this.mediaOverlaysSkipSkippables = false;
  this.mediaOverlaysEscapeEscapables = true;

  this.mediaOverlaysSkippables = [];
  this.mediaOverlaysEscapables = [];

  this.mediaOverlaysEnableClick = true;
  this.mediaOverlaysRate = 1;
  this.mediaOverlaysVolume = 100;

  this.mediaOverlaysSynchronizationGranularity = "";

  this.mediaOverlaysAutomaticPageTurn = true;

  this.enableGPUHardwareAccelerationCSS3D = false;

  // -1 ==> disable
  // [0...n] ==> index of transition in pre-defined array
  this.pageTransition = -1;

  this.scroll = "auto";

  function buildArray(str) {
    var retArr = [];
    var arr = str.split(/[\s,;]+/); //','
    for (var i = 0; i < arr.length; i++) {
      var item = arr[i].trim();
      if (item !== "") {
        retArr.push(item);
      }
    }
    return retArr;
  }

  function mapProperty(propName, settingsData, functionToApply) {

    if (settingsData[propName] !== undefined) {
      if (functionToApply) {

        self[propName] = functionToApply(settingsData[propName]);
      } else {
        self[propName] = settingsData[propName];
      }
    }

  }

  this.update = function(settingsData) {

    mapProperty("columnGap", settingsData);
    mapProperty("fontSize", settingsData);
    mapProperty("mediaOverlaysPreservePlaybackWhenScroll", settingsData);
    mapProperty("mediaOverlaysSkipSkippables", settingsData);
    mapProperty("mediaOverlaysEscapeEscapables", settingsData);
    mapProperty("mediaOverlaysSkippables", settingsData, buildArray);
    mapProperty("mediaOverlaysEscapables", settingsData, buildArray);
    mapProperty("mediaOverlaysEnableClick", settingsData);
    mapProperty("mediaOverlaysRate", settingsData);
    mapProperty("mediaOverlaysVolume", settingsData);
    mapProperty("mediaOverlaysSynchronizationGranularity", settingsData);
    mapProperty("mediaOverlaysAutomaticPageTurn", settingsData);
    mapProperty("scroll", settingsData);
    mapProperty("syntheticSpread", settingsData);
    mapProperty("pageTransition", settingsData);
    mapProperty("enableGPUHardwareAccelerationCSS3D", settingsData);
  };

  this.update(settingsData);
};

module.exports = ViewerSettings;
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/navigator-shim.js":[function(require,module,exports){
if (navigator) {
  //This is default implementation of reading system object that will be available for the publication's javascript to analyze at runtime
  //To extend/modify/replace this object reading system should subscribe ReadiumSDK.Events.READER_INITIALIZED and apply changes in reaction to this event
  navigator.epubReadingSystem = {
    name: "",
    version: "0.0.0",
    layoutStyle: "paginated",

    hasFeature: function(feature, version) {

      // for now all features must be version 1.0 so fail fast if the user has asked for something else
      if (version && version !== "1.0") {
        return false;
      }

      if (feature === "dom-manipulation") {
        // Scripts may make structural changes to the document???s DOM (applies to spine-level scripting only).
        return true;
      }
      if (feature === "layout-changes") {
        // Scripts may modify attributes and CSS styles that affect content layout (applies to spine-level scripting only).
        return true;
      }
      if (feature === "touch-events") {
        // The device supports touch events and the Reading System passes touch events to the content.
        return false;
      }
      if (feature === "mouse-events") {
        // The device supports mouse events and the Reading System passes mouse events to the content.
        return true;
      }
      if (feature === "keyboard-events") {
        // The device supports keyboard events and the Reading System passes keyboard events to the content.
        return true;
      }

      if (feature === "spine-scripting") {
        //Spine-level scripting is supported.
        return true;
      }

      return false;
    }
  };
}
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/annotations-manager.js":[function(require,module,exports){
//  Created by Dmitry Markushevich (dmitrym@evidentpoint.com)
// 
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/*



# Highlighting in Readium - A primer

Please note:

- only simple text highlighting is currently supported
- it's the job of the reading system to keep track of annotations. readium-js simply displays your annotations.
- full CFIs for annotations are not currently available. We use so called "partial CFI"s, a tuple containing idref of the spine item and the CFI definition relative to the root of the spine item.

Currently, the API exposed via `ReaderView` exposes 4 functions and 1 even which should be sufficient for a simple highlighting workflow.


# API

For the purposes of the examples below, `RReader` is a previously instantiated `ReaderView` instance.


## Is anything selected (getCurrentSelectionCfi())

Before proceeding with the highlighting workflow it is sometimes necessary to determine whether the user has in fact selected anything. This can be accomplished with the following:


	> RReader.getCurrentSelectionCfi()
	Object {idref: "id-id2604743", cfi: "/4/2/6,/1:74,/1:129"}

The response contains a partial CFI that is sufficient to create a highlight based on selection. If nothing is selected *undefined* is returned. 

You can also use partial Cfi with `openSpineItemElementCfi()` to navigate to where this selection is later.

## Highlighting (addHighlight and addSelectionHighlight)

Once we've determined what needs to be highlighted (by generating a partial CFI from a selection, or having an existing partial CFI stored externally) we can add it to the reader by calling `addHighlight()`:

	> RReader.addHighlight('id-id2604743', "/4/2/6,/1:74,/1:129", 123, "highlight")
	Object {CFI: "/4/2/6,/1:74,/1:129", selectedElements: Array[1], idref: "id-id2604743"}

*addHighligh*t takes the following parameters:

- *id-id2604743* - `idref` is the idref value from `getCurrentSelectionCfi()
- * /4/2/6,/1:74,/1:129* - `cfi` is the cfi value from `getCurrentSelectionCfi()
- *123* - `id` is the unique id that defines this annotation
- *highlight* - 'type' of annotation. only 'highlight' is currently supported.

### addSelectioHighlight

Alternatively, you can call addSelectionHighlight(). It combines both getCurrentSelectionCfi() and addHighlight into one call:

	> RReader.addSelectionHighlight(124, "highlight")
	Object {CFI: "/4/2/4,/1:437,/1:503", selectedElements: Array[1], idref: "id-id2604743"}

Note that it provides no validation. If nothing is selected, `undefined` is returned.


## Removing highlights 

To remove the highlight, call `removeHighlight`:

	> RReader.removeHighlight(123)
	undefined


# Handling annotation click events

When a user clicks on a highlight `annotationClicked` event is dispatched with the following arguments:

- type of annotation
- idref of the spine item
- partial Cfi of the annotation
- annotationdId


	> RReader.on('annotationClicked', function(type, idref, cfi, annotationId) { console.log (type, idref, cfi, annotationId)});
	ReadiumSDK.Views.ReaderView {on: function, once: function, off: function, trigger: function, listenTo: function???}
	
Then when the user clicks on the highlight the following will show up in the console:

	highlight id-id2604743 /4/2/6,/1:74,/1:129 123 
	

*/

var _ = require('underscore')
var Backbone = require('backbone')
var EpubAnnotations = require('../../epub-annotations')

/**
 *
 * @param proxyObj
 * @param options
 * @constructor
 */
function AnnotationsManager(proxyObj, options) {

  var self = this;
  var liveAnnotations = {};
  var spines = {};
  var proxy = proxyObj;
  var annotationCSSUrl = options.annotationCSSUrl;

  if (!annotationCSSUrl) {
    console.warn("WARNING! Annotations CSS not supplied. Highlighting is not going to work.");
  }

  _.extend(self, Backbone.Events);

  // we want to bubble up all of the events that annotations module may trigger up.
  this.on("all", function(eventName) {
    var args = Array.prototype.slice.call(arguments);
    // mangle annotationClicked event. What really needs to happen is, the annotation_module needs to return a 
    // bare Cfi, and this class should append the idref.
    var annotationClickedEvent = 'annotationClicked';
    if (args.length && args[0] === annotationClickedEvent) {
      for (var spineIndex in liveAnnotations) {
        var jQueryEvent = args[4];
        var annotationId = args[3];
        var fullFakeCfi = args[2];
        var type = args[1];
        if (liveAnnotations[spineIndex].getHighlight(annotationId)) {
          var idref = spines[spineIndex].idref;
          var partialCfi = getPartialCfi(fullFakeCfi);
          args = [annotationClickedEvent, type, idref, partialCfi, annotationId, jQueryEvent];
        }
      }
    }
    self['trigger'].apply(proxy, args);
  });

  this.attachAnnotations = function($iframe, spineItem) {
    var epubDocument = $iframe[0].contentDocument;
    liveAnnotations[spineItem.index] = new EpubAnnotations(epubDocument, self, annotationCSSUrl);
    spines[spineItem.index] = spineItem;

    // check to see which spine indecies can be culled depending on the distance from current spine item
    for (var spineIndex in liveAnnotations) {
      if (Math.abs(spineIndex - spineIndex.index) > 3) {
        delete liveAnnotations[spineIndex];
      }
    }
  };


  this.getCurrentSelectionCfi = function() {
    for (var spine in liveAnnotations) {
      var annotationsForView = liveAnnotations[spine];
      var partialCfi = annotationsForView.getCurrentSelectionCFI();
      if (partialCfi) {
        return {
          "idref": spines[spine].idref,
          "cfi": partialCfi
        };
      }
    }
    return undefined;
  };

  this.addSelectionHighlight = function(id, type) {
    for (spine in liveAnnotations) {
      var annotationsForView = liveAnnotations[spine];
      if (annotationsForView.getCurrentSelectionCFI()) {
        var annotation = annotationsForView.addSelectionHighlight(id, type);
        annotation.idref = spines[spine].idref;
        return annotation;
      }
    }
    return undefined;
  };

  this.addHighlight = function(spineIdRef, partialCfi, id, type, styles) {
    for (var spine in liveAnnotations) {
      if (spines[spine].idref === spineIdRef) {
        var fakeCfi = "epubcfi(/99!" + partialCfi + ")";
        var annotationsForView = liveAnnotations[spine];
        var annotation = annotationsForView.addHighlight(fakeCfi, id, type, styles);
        annotation.idref = spineIdRef;
        annotation.CFI = getPartialCfi(annotation.CFI);
        return annotation;
      }
    }
    return undefined;
  };

  this.removeHighlight = function(id) {
    var result = undefined;
    for (var spine in liveAnnotations) {
      var annotationsForView = liveAnnotations[spine];
      result = annotationsForView.removeHighlight(id);
    }
    return result;
  };



  function getPartialCfi(CFI) {
    var cfiWrapperPattern = new RegExp("^.*!")
      // remove epubcfi( and indirection step
    var partiallyNakedCfi = CFI.replace(cfiWrapperPattern, "");
    // remove last paren
    var nakedCfi = partiallyNakedCfi.substring(0, partiallyNakedCfi.length - 1);
    return nakedCfi;
  }


};

module.exports = AnnotationsManager
},{"../../epub-annotations":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/epub-annotations/index.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/audio-player.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck, Andrey Kavarma
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.


var _iOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false;
var _Android = navigator.userAgent.toLowerCase().indexOf('android') > -1;
var _isMobile = _iOS || _Android;

//var _isReadiumJS = typeof window.requirejs !== "undefined";

var DEBUG = false;

var _audioElement = new Audio();

if (DEBUG) {
  _audioElement.addEventListener("load", function() {
    console.debug("0) load");
  });

  _audioElement.addEventListener("loadstart", function() {
    console.debug("1) loadstart");
  });

  _audioElement.addEventListener("durationchange", function() {
    console.debug("2) durationchange");
  });

  _audioElement.addEventListener("loadedmetadata", function() {
    console.debug("3) loadedmetadata");
  });

  _audioElement.addEventListener("loadeddata", function() {
    console.debug("4) loadeddata");
  });

  _audioElement.addEventListener("progress", function() {
    console.debug("5) progress");
  });

  _audioElement.addEventListener("canplay", function() {
    console.debug("6) canplay");
  });

  _audioElement.addEventListener("canplaythrough", function() {
    console.debug("7) canplaythrough");
  });

  _audioElement.addEventListener("play", function() {
    console.debug("8) play");
  });

  _audioElement.addEventListener("pause", function() {
    console.debug("9) pause");
  });

  _audioElement.addEventListener("ended", function() {
    console.debug("10) ended");
  });

  _audioElement.addEventListener("seeked", function() {
    console.debug("X) seeked");
  });

  _audioElement.addEventListener("timeupdate", function() {
    console.debug("Y) timeupdate");
  });

  _audioElement.addEventListener("seeking", function() {
    console.debug("Z) seeking");
  });
}

/**
 *
 * @param onStatusChanged
 * @param onPositionChanged
 * @param onAudioEnded
 * @param onAudioPlay
 * @param onAudioPause
 * @constructor
 */
function AudioPlayer(onStatusChanged, onPositionChanged, onAudioEnded, onAudioPlay, onAudioPause) {
  var self = this;

  //_audioElement.setAttribute("preload", "auto");

  var _currentEpubSrc = undefined;

  var _currentSmilSrc = undefined;
  this.currentSmilSrc = function() {
    return _currentSmilSrc;
  };

  var _rate = 1.0;
  this.setRate = function(rate) {
    _rate = rate;
    if (_rate < 0.5) {
      _rate = 0.5;
    }
    if (_rate > 4.0) {
      _rate = 4.0;
    }

    _audioElement.playbackRate = _rate;
  }
  self.setRate(_rate);
  this.getRate = function() {
    return _rate;
  }


  var _volume = 100.0;
  this.setVolume = function(volume) {
    _volume = volume;
    if (_volume < 0.0) {
      _volume = 0.0;
    }
    if (_volume > 1.0) {
      _volume = 1.0;
    }
    _audioElement.volume = _volume;
  }
  self.setVolume(_volume);
  this.getVolume = function() {
    return _volume;
  }

  this.play = function() {
    if (DEBUG) {
      console.error("this.play()");
    }

    if (!_currentEpubSrc) {
      return false;
    }

    startTimer();

    self.setVolume(_volume);
    self.setRate(_rate);

    _audioElement.play();

    return true;
  };

  this.pause = function() {
    if (DEBUG) {
      console.error("this.pause()");
    }

    stopTimer();

    _audioElement.pause();
  };

  _audioElement.addEventListener('play', onPlay, false);
  _audioElement.addEventListener('pause', onPause, false);
  _audioElement.addEventListener('ended', onEnded, false);

  function onPlay() {
    onStatusChanged({
      isPlaying: true
    });
    onAudioPlay();
  }

  function onPause() {
    onAudioPause();
    onStatusChanged({
      isPlaying: false
    });
  }

  function onEnded() {
    if (_audioElement.moSeeking) {
      if (DEBUG) {
        console.debug("onEnded() skipped (still seeking...)");
      }

      return;
    }

    stopTimer();

    onAudioEnded();
    onStatusChanged({
      isPlaying: false
    });
  }

  var _intervalTimerSkips = 0;

  var _intervalTimer = undefined;

  function startTimer() {
    if (_intervalTimer) {
      return;
    }

    _intervalTimer = setInterval(
      function() {
        if (_audioElement.moSeeking) {
          if (DEBUG) {
            //console.debug("interval timer skipped (still seeking...)");
          }

          _intervalTimerSkips++;
          if (_intervalTimerSkips > 1000) {
            _intervalTimerSkips = 0;
            stopTimer();
          }
          return;
        }

        var currentTime = undefined;
        try {
          currentTime = _audioElement.currentTime;
        } catch (ex) {
          console.error(ex.message);
        }

        //                if (DEBUG)
        //                {
        //                    console.debug("currentTime: " + currentTime);
        //                }

        if (currentTime) {
          onPositionChanged(currentTime, 1);
        }
      }, 20);
  }

  function stopTimer() {
    if (_intervalTimer) {
      clearInterval(_intervalTimer);
    }
    _intervalTimer = undefined;
  }

  this.isPlaying = function() {
    return _intervalTimer !== undefined;
  };

  this.reset = function() {
    if (DEBUG) {
      console.error("this.reset()");
    }

    this.pause();

    _audioElement.moSeeking = undefined;

    _currentSmilSrc = undefined;
    _currentEpubSrc = undefined;

    setTimeout(function() {
      _audioElement.setAttribute("src", "");
    }, 1);
  };


  _audioElement.addEventListener("loadstart", function() {
    _touchInited = true;
  });
  var _touchInited = false;
  this.touchInit = function() {
    if (!_iOS) {
      return false;
    }

    if (_touchInited) {
      return false;
    }

    _touchInited = true;

    _audioElement.setAttribute("src", "touch/init/html5/audio.mp3");
    _audioElement.load();

    return true;
  }

  var _playId = 0;

  var _seekQueuing = 0;

  this.playFile = function(smilSrc, epubSrc, seekBegin) //element
    {
      _playId++;
      if (_playId > 99999) {
        _playId = 0;
      }

      var playId = _playId;

      if (_audioElement.moSeeking) {
        _seekQueuing++;
        if (_seekQueuing > MAX_SEEK_RETRIES) {
          _seekQueuing = 0;
          return;
        }

        if (DEBUG) {
          console.debug("this.playFile(" + epubSrc + ")" + " @" + seekBegin + " (POSTPONE, SEEKING...)");
        }

        setTimeout(function() {
          self.playFile(smilSrc, epubSrc, seekBegin);
        }, 20);

        return;
      }

      _audioElement.moSeeking = {};

      if (DEBUG) {
        console.debug("this.playFile(" + epubSrc + ")" + " @" + seekBegin + " #" + playId);
      }

      var audioNeedsNewSrc = !_currentEpubSrc || _currentEpubSrc !== epubSrc;

      if (!audioNeedsNewSrc) {
        if (DEBUG) {
          console.debug("this.playFile() SAME SRC");
        }

        this.pause();

        _currentSmilSrc = smilSrc;
        _currentEpubSrc = epubSrc;

        playSeekCurrentTime(seekBegin, playId, false);

        return;
      }

      if (DEBUG) {
        console.debug("this.playFile() NEW SRC");
        console.debug("_currentEpubSrc: " + _currentEpubSrc);
        console.debug("epubSrc: " + epubSrc);
      }

      this.reset();
      _audioElement.moSeeking = {};

      _currentSmilSrc = smilSrc;
      _currentEpubSrc = epubSrc;

      //element.parentNode.insertBefore(_audioElement, element); //element.parentNode.childNodes[0]);

      if (!_Android) {
        _audioElement.addEventListener('play', onPlayToForcePreload, false);
      }

      $(_audioElement).on(_readyEvent, {
        seekBegin: seekBegin,
        playId: playId
      }, onReadyToSeek);

      setTimeout(function() {
        _audioElement.setAttribute("src", _currentEpubSrc);
        // _audioElement.src = _currentEpubSrc;
        // $(_audioElement).attr("src", _currentEpubSrc);

        // if (_Android)
        // {
        //     _audioElement.addEventListener('loadstart', onReadyToPlayToForcePreload, false);
        // }

        _audioElement.load();

        if (!_Android) {
          playToForcePreload();
        }
      }, 1);
    };

  // var onReadyToPlayToForcePreload = function ()
  // {
  //     _audioElement.removeEventListener('loadstart', onReadyToPlayToForcePreload, false);
  //     
  //     if (DEBUG)
  //     {
  //         console.debug("onReadyToPlayToForcePreload");
  //     }
  //     
  //     playToForcePreload();
  // };

  var playToForcePreload = function() {
    if (DEBUG) {
      console.debug("playToForcePreload");
    }

    //_audioElement.volume = 0;
    //_audioElement.play();
    var vol = _volume;
    _volume = 0;
    self.play();
    _volume = vol;
  };

  var onPlayToForcePreload = function() {
    _audioElement.removeEventListener('play', onPlayToForcePreload, false);

    if (DEBUG) {
      console.debug("onPlayToForcePreload");
    }
    _audioElement.pause(); // note: interval timer continues (immediately follows self.play())
  };

  var _readyEvent = _Android ? "canplaythrough" : "canplay";

  function onReadyToSeek_(event) {
    if (DEBUG) {
      console.debug("onReadyToSeek #" + event.data.playId);
    }
    playSeekCurrentTime(event.data.seekBegin, event.data.playId, true);
  }

  function onReadyToSeek(event) {
    $(_audioElement).off(_readyEvent, onReadyToSeek);

    if (!_Android) {
      onReadyToSeek_(event);
    } else {
      if (DEBUG) {
        console.debug("onReadyToSeek ANDROID ... waiting a bit ... #" + event.data.playId);
      }

      //self.play();
      playToForcePreload();

      setTimeout(function() {
        onReadyToSeek_(event);
      }, 1000);
    }
  }

  function playSeekCurrentTime(newCurrentTime, playId, isNewSrc) {
    if (DEBUG) {
      console.debug("playSeekCurrentTime() #" + playId);
    }

    if (newCurrentTime == 0) {
      newCurrentTime = 0.01;
    }

    if (Math.abs(newCurrentTime - _audioElement.currentTime) < 0.3) {
      if (DEBUG) {
        console.debug("playSeekCurrentTime() CONTINUE");
      }

      _audioElement.moSeeking = undefined;
      self.play();
      return;
    }

    var ev = isNewSrc ? _seekedEvent1 : _seekedEvent2;

    if (DEBUG) {
      console.debug("playSeekCurrentTime() NEED SEEK, EV: " + ev);
    }

    self.pause();

    $(_audioElement).on(ev, {
      newCurrentTime: newCurrentTime,
      playId: playId,
      isNewSrc: isNewSrc
    }, onSeeked);

    try {
      _audioElement.currentTime = newCurrentTime;
    } catch (ex) {
      console.error(ex.message);

      setTimeout(function() {
        try {
          _audioElement.currentTime = newCurrentTime;
        } catch (ex) {
          console.error(ex.message);
        }
      }, 5);
    }
  }

  var MAX_SEEK_RETRIES = 10;
  var _seekedEvent1 = _iOS ? "canplaythrough" : "seeked"; //"progress"
  var _seekedEvent2 = _iOS ? "timeupdate" : "seeked";

  function onSeeked(event) {
    var ev = event.data.isNewSrc ? _seekedEvent1 : _seekedEvent2;

    var notRetry = event.data.seekRetries == undefined;

    if (notRetry || event.data.seekRetries == MAX_SEEK_RETRIES) // first retry
    {
      $(_audioElement).off(ev, onSeeked);
    }

    if (DEBUG) {
      console.debug("onSeeked() #" + event.data.playId + " FIRST? " + notRetry + " EV: " + ev);
    }

    var curTime = _audioElement.currentTime;
    var diff = Math.abs(event.data.newCurrentTime - curTime);

    if ((notRetry || event.data.seekRetries >= 0) &&
      diff >= 1) {
      if (DEBUG) {
        console.debug("onSeeked() time diff: " + event.data.newCurrentTime + " vs. " + curTime + " (" + diff + ")");
      }

      if (notRetry) {
        event.data.seekRetries = MAX_SEEK_RETRIES;

        // if (DEBUG)
        // {
        //     console.debug("onSeeked() fail => first retry, EV: " + _seekedEvent2);
        // }

        event.data.isNewSrc = false;
        //$(_audioElement).on(_seekedEvent2, event.data, onSeeked);
      }

      //else
      {
        event.data.seekRetries--;

        if (DEBUG) {
          console.debug("onSeeked() FAIL => retry again (timeout)");
        }

        setTimeout(function() {
          onSeeked(event);
        }, _Android ? 1000 : 200);
      }

      setTimeout(function() {
        _audioElement.pause();
        try {
          _audioElement.currentTime = event.data.newCurrentTime;
        } catch (ex) {
          console.error(ex.message);

          setTimeout(function() {
            try {
              _audioElement.currentTime = event.data.newCurrentTime;
            } catch (ex) {
              console.error(ex.message);
            }
          }, 4);
        }
      }, 5);
    } else {
      if (DEBUG) {
        console.debug("onSeeked() STATE:");
        console.debug(notRetry);
        console.debug(event.data.seekRetries);
        console.debug(diff);
      }

      if (diff >= 1) {
        if (DEBUG) {
          console.debug("onSeeked() ABORT, TRY AGAIN FROM SCRATCH!");
        }

        var smilSrc = _currentSmilSrc;
        var epubSrc = _currentEpubSrc;
        var seekBegin = event.data.newCurrentTime;

        self.reset();

        setTimeout(function() {
          self.playFile(smilSrc, epubSrc, seekBegin);
        }, 10);

        return;
      }

      if (DEBUG) {
        console.debug("onSeeked() OKAY => play!");
      }

      event.data.seekRetries = undefined;

      self.play();

      _audioElement.moSeeking = undefined;
    }
  }
};

module.exports = AudioPlayer
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/cfi-navigation-logic.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.


var _ = require('underscore')
var $ = require('jquery')
var Rect = require('../helpers/rect')

/**
 * CFI navigation helper class
 *
 * @param $viewport
 * @param $iframe
 * @param options Additional settings for NavigationLogic object
 *      - rectangleBased    If truthy, clientRect-based geometry will be used
 *      - paginationInfo    Layout details, used by clientRect-based geometry
 * @constructor
 */

function CfiNavigationLogic($viewport, $iframe, options) {

  options = options || {};

  this.getRootElement = function() {

    return $iframe[0].contentDocument.documentElement;
  };

  // FIXED LAYOUT if (!options.rectangleBased) alert("!!!options.rectangleBased");

  var visibilityCheckerFunc = options.rectangleBased ? checkVisibilityByRectangles : checkVisibilityByVerticalOffsets;

  /**
   * @private
   * Checks whether or not pages are rendered right-to-left
   *
   * @returns {boolean}
   */
  function isPageProgressionRightToLeft() {
    return options.paginationInfo && !!options.paginationInfo.rightToLeft;
  }

  /**
   * @private
   * Checks whether or not pages are rendered with vertical writing mode
   *
   * @returns {boolean}
   */
  function isVerticalWritingMode() {
    return options.paginationInfo && !!options.paginationInfo.isVerticalWritingMode;
  }


  /**
   * @private
   * Checks whether or not a (fully adjusted) rectangle is at least partly visible
   *
   * @param {Object} rect
   * @param {Object} frameDimensions
   * @param {boolean} [isVwm]           isVerticalWritingMode
   * @returns {boolean}
   */
  function isRectVisible(rect, frameDimensions, isVwm) {
    if (isVwm) {
      return rect.top >= 0 && rect.top < frameDimensions.height;
    }
    return rect.left >= 0 && rect.left < frameDimensions.width;
  }

  /**
   * @private
   * Retrieves _current_ full width of a column (including its gap)
   *
   * @returns {number} Full width of a column in pixels
   */
  function getColumnFullWidth() {

    if (!options.paginationInfo || isVerticalWritingMode()) {
      return $iframe.width();
    }

    return options.paginationInfo.columnWidth + options.paginationInfo.columnGap;
  }

  /**
   * @private
   *
   * Retrieves _current_ offset of a viewport
   * (related to the beginning of the chapter)
   *
   * @returns {Object}
   */
  function getVisibleContentOffsets() {
    if (isVerticalWritingMode()) {
      return {
        top: (options.paginationInfo ? options.paginationInfo.pageOffset : 0)
      };
    }
    return {
      left: (options.paginationInfo ? options.paginationInfo.pageOffset : 0) * (isPageProgressionRightToLeft() ? -1 : 1)
    };
  }

  // Old (offsetTop-based) algorithm, useful in top-to-bottom layouts
  function checkVisibilityByVerticalOffsets(
    $element, visibleContentOffsets, shouldCalculateVisibilityOffset) {

    var elementRect = Rect.fromElement($element);
    if (_.isNaN(elementRect.left)) {
      // this is actually a point element, doesnt have a bounding rectangle
      elementRect = new Rect(
        $element.position().top, $element.position().left, 0, 0);
    }
    var topOffset = visibleContentOffsets.top || 0;
    var isBelowVisibleTop = elementRect.bottom() > topOffset;
    var isAboveVisibleBottom = visibleContentOffsets.bottom !== undefined ? elementRect.top < visibleContentOffsets.bottom : true; //this check always passed, if corresponding offset isn't set

    var percentOfElementHeight = 0;
    if (isBelowVisibleTop && isAboveVisibleBottom) { // element is visible
      if (!shouldCalculateVisibilityOffset) {
        return 100;
      } else if (elementRect.top <= topOffset) {
        percentOfElementHeight = Math.ceil(
          100 * (topOffset - elementRect.top) / elementRect.height
        );

        // below goes another algorithm, which has been used in getVisibleElements pattern,
        // but it seems to be a bit incorrect
        // (as spatial offset should be measured at the first visible point of the element):
        //
        // var visibleTop = Math.max(elementRect.top, visibleContentOffsets.top);
        // var visibleBottom = Math.min(elementRect.bottom(), visibleContentOffsets.bottom);
        // var visibleHeight = visibleBottom - visibleTop;
        // var percentVisible = Math.round((visibleHeight / elementRect.height) * 100);
      }
      return 100 - percentOfElementHeight;
    }
    return 0; // element isn't visible
  }

  /**
   * New (rectangle-based) algorithm, useful in multi-column layouts
   *
   * Note: the second param (props) is ignored intentionally
   * (no need to use those in normalization)
   *
   * @param {jQuery} $element
   * @param {Object} _props
   * @param {boolean} shouldCalculateVisibilityPercentage
   * @returns {number|null}
   *      0 for non-visible elements,
   *      0 < n <= 100 for visible elements
   *      (will just give 100, if `shouldCalculateVisibilityPercentage` => false)
   *      null for elements with display:none
   */
  function checkVisibilityByRectangles(
    $element, _props, shouldCalculateVisibilityPercentage) {

    var elementRectangles = getNormalizedRectangles($element);
    var clientRectangles = elementRectangles.clientRectangles;
    if (clientRectangles.length === 0) { // elements with display:none, etc.
      return null;
    }

    var isRtl = isPageProgressionRightToLeft();
    var isVwm = isVerticalWritingMode();
    var columnFullWidth = getColumnFullWidth();
    var frameDimensions = {
      width: $iframe.width(),
      height: $iframe.height()
    };

    if (clientRectangles.length === 1) {
      // because of webkit inconsistency, that single rectangle should be adjusted
      // until it hits the end OR will be based on the FIRST column that is visible
      adjustRectangle(clientRectangles[0], frameDimensions, columnFullWidth,
        isRtl, isVwm, true);
    }

    // for an element split between several CSS columns,
    // both Firefox and IE produce as many client rectangles;
    // each of those should be checked
    var visibilityPercentage = 0;
    for (var i = 0, l = clientRectangles.length; i < l; ++i) {
      if (isRectVisible(clientRectangles[i], frameDimensions, isVwm)) {
        visibilityPercentage = shouldCalculateVisibilityPercentage ? measureVisibilityPercentageByRectangles(clientRectangles, i) : 100;
        break;
      }
    }
    return visibilityPercentage;
  }

  /**
   * Finds a page index (0-based) for a specific element.
   * Calculations are based on rectangles retrieved with getClientRects() method.
   *
   * @param {jQuery} $element
   * @param {number} spatialVerticalOffset
   * @returns {number|null}
   */
  function findPageByRectangles($element, spatialVerticalOffset) {
    var visibleContentOffsets = getVisibleContentOffsets();
    var elementRectangles = getNormalizedRectangles($element, visibleContentOffsets);
    var clientRectangles = elementRectangles.clientRectangles;
    if (clientRectangles.length === 0) { // elements with display:none, etc.
      return null;
    }

    var isRtl = isPageProgressionRightToLeft();
    var isVwm = isVerticalWritingMode();
    var columnFullWidth = getColumnFullWidth();

    var frameHeight = $iframe.height();
    var frameWidth = $iframe.width();

    if (spatialVerticalOffset) {
      trimRectanglesByVertOffset(clientRectangles, spatialVerticalOffset,
        frameHeight, columnFullWidth, isRtl, isVwm);
    }

    var firstRectangle = _.first(clientRectangles);
    if (clientRectangles.length === 1) {
      adjustRectangle(firstRectangle, {
        height: frameHeight,
        width: frameWidth
      }, columnFullWidth, isRtl, isVwm);
    }

    var pageIndex;

    if (isVwm) {
      var topOffset = firstRectangle.top;
      pageIndex = Math.floor(topOffset / frameHeight);
    } else {
      var leftOffset = firstRectangle.left;
      if (isRtl) {
        leftOffset = (columnFullWidth * (options.paginationInfo ? options.paginationInfo.visibleColumnCount : 1)) - leftOffset;
      }
      pageIndex = Math.floor(leftOffset / columnFullWidth);
    }

    if (pageIndex < 0) {
      pageIndex = 0;
    } else if (pageIndex >= (options.paginationInfo ? options.paginationInfo.columnCount : 1)) {
      pageIndex = (options.paginationInfo ? (options.paginationInfo.columnCount - 1) : 0);
    }

    return pageIndex;
  }

  /**
   * @private
   * Calculates the visibility offset percentage based on ClientRect dimensions
   *
   * @param {Array} clientRectangles (should already be normalized)
   * @param {number} firstVisibleRectIndex
   * @returns {number} - visibility percentage (0 < n <= 100)
   */
  function measureVisibilityPercentageByRectangles(
    clientRectangles, firstVisibleRectIndex) {

    var heightTotal = 0;
    var heightVisible = 0;

    if (clientRectangles.length > 1) {
      _.each(clientRectangles, function(rect, index) {
        heightTotal += rect.height;
        if (index >= firstVisibleRectIndex) {
          // in this case, all the rectangles after the first visible
          // should be counted as visible
          heightVisible += rect.height;
        }
      });
    } else {
      // should already be normalized and adjusted
      heightTotal = clientRectangles[0].height;
      heightVisible = clientRectangles[0].height - Math.max(
        0, -clientRectangles[0].top);
    }
    return heightVisible === heightTotal ? 100 // trivial case: element is 100% visible
      : Math.floor(100 * heightVisible / heightTotal);
  }

  /**
   * @private
   * Retrieves the position of $element in multi-column layout
   *
   * @param {jQuery} $el
   * @param {Object} [visibleContentOffsets]
   * @returns {Object}
   */
  function getNormalizedRectangles($el, visibleContentOffsets) {

    visibleContentOffsets = visibleContentOffsets || {};
    var leftOffset = visibleContentOffsets.left || 0;
    var topOffset = visibleContentOffsets.top || 0;

    // union of all rectangles wrapping the element
    var wrapperRectangle = normalizeRectangle(
      $el[0].getBoundingClientRect(), leftOffset, topOffset);

    // all the separate rectangles (for detecting position of the element
    // split between several columns)
    var clientRectangles = [];
    var clientRectList = $el[0].getClientRects();
    for (var i = 0, l = clientRectList.length; i < l; ++i) {
      if (clientRectList[i].height > 0) {
        // Firefox sometimes gets it wrong,
        // adding literally empty (height = 0) client rectangle preceding the real one,
        // that empty client rectanle shouldn't be retrieved
        clientRectangles.push(
          normalizeRectangle(clientRectList[i], leftOffset, topOffset));
      }
    }

    if (clientRectangles.length === 0) {
      // sometimes an element is either hidden or empty, and that means
      // Webkit-based browsers fail to assign proper clientRects to it
      // in this case we need to go for its sibling (if it exists)
      $el = $el.next();
      if ($el.length) {
        return getNormalizedRectangles($el, visibleContentOffsets);
      }
    }

    return {
      wrapperRectangle: wrapperRectangle,
      clientRectangles: clientRectangles
    };
  }

  /**
   * @private
   * Converts TextRectangle object into a plain object,
   * taking content offsets (=scrolls, position shifts etc.) into account
   *
   * @param {TextRectangle} textRect
   * @param {number} leftOffset
   * @param {number} topOffset
   * @returns {Object}
   */
  function normalizeRectangle(textRect, leftOffset, topOffset) {

    var plainRectObject = {
      left: textRect.left,
      right: textRect.right,
      top: textRect.top,
      bottom: textRect.bottom,
      width: textRect.right - textRect.left,
      height: textRect.bottom - textRect.top
    };
    offsetRectangle(plainRectObject, leftOffset, topOffset);
    return plainRectObject;
  }

  /**
   * @private
   * Offsets plain object (which represents a TextRectangle).
   *
   * @param {Object} rect
   * @param {number} leftOffset
   * @param {number} topOffset
   */
  function offsetRectangle(rect, leftOffset, topOffset) {

    rect.left += leftOffset;
    rect.right += leftOffset;
    rect.top += topOffset;
    rect.bottom += topOffset;
  }

  /**
   * @private
   *
   * When element is spilled over two or more columns,
   * most of the time Webkit-based browsers
   * still assign a single clientRectangle to it, setting its `top` property to negative value
   * (so it looks like it's rendered based on the second column)
   * Alas, sometimes they decide to continue the leftmost column - from _below_ its real height.
   * In this case, `bottom` property is actually greater than element's height and had to be adjusted accordingly.
   *
   * Ugh.
   *
   * @param {Object} rect
   * @param {Object} frameDimensions
   * @param {number} columnFullWidth
   * @param {boolean} isRtl
   * @param {boolean} isVwm               isVerticalWritingMode
   * @param {boolean} shouldLookForFirstVisibleColumn
   *      If set, there'll be two-phase adjustment
   *      (to align a rectangle with a viewport)

   */
  function adjustRectangle(rect, frameDimensions, columnFullWidth, isRtl, isVwm,
    shouldLookForFirstVisibleColumn) {

    // Rectangle adjustment is not needed in VWM since it does not deal with columns
    if (isVwm) {
      return;
    }

    if (isRtl) {
      columnFullWidth *= -1; // horizontal shifts are reverted in RTL mode
    }

    // first we go left/right (rebasing onto the very first column available)
    while (rect.top < 0) {
      offsetRectangle(rect, -columnFullWidth, frameDimensions.height);
    }

    // ... then, if necessary (for visibility offset checks),
    // each column is tried again (now in reverse order)
    // the loop will be stopped when the column is aligned with a viewport
    // (i.e., is the first visible one).
    if (shouldLookForFirstVisibleColumn) {
      while (rect.bottom >= frameDimensions.height) {
        if (isRectVisible(rect, frameDimensions, isVwm)) {
          break;
        }
        offsetRectangle(rect, columnFullWidth, -frameDimensions.height);
      }
    }
  }

  /**
   * @private
   * Trims the rectangle(s) representing the given element.
   *
   * @param {Array} rects
   * @param {number} verticalOffset
   * @param {number} frameHeight
   * @param {number} columnFullWidth
   * @param {boolean} isRtl
   * @param {boolean} isVwm               isVerticalWritingMode
   */
  function trimRectanglesByVertOffset(
    rects, verticalOffset, frameHeight, columnFullWidth, isRtl, isVwm) {

    //TODO: Support vertical writing mode
    if (isVwm) {
      return;
    }

    var totalHeight = _.reduce(rects, function(prev, cur) {
      return prev + cur.height;
    }, 0);

    var heightToHide = totalHeight * verticalOffset / 100;
    if (rects.length > 1) {
      var heightAccum = 0;
      do {
        heightAccum += rects[0].height;
        if (heightAccum > heightToHide) {
          break;
        }
        rects.shift();
      } while (rects.length > 1);
    } else {
      // rebase to the last possible column
      // (so that adding to top will be properly processed later)
      if (isRtl) {
        columnFullWidth *= -1;
      }
      while (rects[0].bottom >= frameHeight) {
        offsetRectangle(rects[0], columnFullWidth, -frameHeight);
      }

      rects[0].top += heightToHide;
      rects[0].height -= heightToHide;
    }
  }

  //we look for text and images
  this.findFirstVisibleElement = function(props) {

    if (typeof props !== 'object') {
      // compatibility with legacy code, `props` is `topOffset` actually
      props = {
        top: props
      };
    }

    var $elements;
    var $firstVisibleTextNode = null;
    var percentOfElementHeight = 0;

    $elements = $("body", this.getRootElement()).find(":not(iframe)").contents().filter(function() {
      return isValidTextNode(this) || this.nodeName.toLowerCase() === 'img';
    });

    // Find the first visible text node
    $.each($elements, function() {

      var $element;

      if (this.nodeType === Node.TEXT_NODE) { //text node
        $element = $(this).parent();
      } else {
        $element = $(this); //image
      }

      var visibilityResult = visibilityCheckerFunc($element, props, true);
      if (visibilityResult) {
        $firstVisibleTextNode = $element;
        percentOfElementHeight = 100 - visibilityResult;
        return false;
      }
      return true;
    });

    return {
      $element: $firstVisibleTextNode,
      percentY: percentOfElementHeight
    };
  };

  this.getFirstVisibleElementCfi = function(topOffset) {

    var foundElement = this.findFirstVisibleElement(topOffset);

    if (!foundElement.$element) {
      console.log("Could not generate CFI no visible element on page");
      return undefined;
    }

    //noinspection JSUnresolvedVariable
    var cfi = EPUBcfi.Generator.generateElementCFIComponent(foundElement.$element[0]);

    if (cfi[0] == "!") {
      cfi = cfi.substring(1);
    }

    return cfi + "@0:" + foundElement.percentY;
  };

  this.getPageForElementCfi = function(cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var cfiParts = splitCfi(cfi);

    var $element = getElementByPartialCfi(cfiParts.cfi, classBlacklist, elementBlacklist, idBlacklist);

    if (!$element) {
      return -1;
    }

    return this.getPageForPointOnElement($element, cfiParts.x, cfiParts.y);
  };

  function getElementByPartialCfi(cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var contentDoc = $iframe[0].contentDocument;

    var wrappedCfi = "epubcfi(" + cfi + ")";
    //noinspection JSUnresolvedVariable
    var $element = EPUBcfi.getTargetElementWithPartialCFI(wrappedCfi, contentDoc, classBlacklist, elementBlacklist, idBlacklist);

    if (!$element || $element.length == 0) {
      console.log("Can't find element for CFI: " + cfi);
      return undefined;
    }

    return $element;
  }

  this.getElementByCfi = function(cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var cfiParts = splitCfi(cfi);
    return getElementByPartialCfi(cfiParts.cfi, classBlacklist, elementBlacklist, idBlacklist);
  };

  this.getPageForElement = function($element) {

    return this.getPageForPointOnElement($element, 0, 0);
  };

  this.getPageForPointOnElement = function($element, x, y) {

    var pageIndex;
    if (options.rectangleBased) {
      pageIndex = findPageByRectangles($element, y);
      if (pageIndex === null) {
        console.warn('Impossible to locate a hidden element: ', $element);
        return 0;
      }
      return pageIndex;
    }

    var posInElement = this.getVerticalOffsetForPointOnElement($element, x, y);
    return Math.floor(posInElement / $viewport.height());
  };

  this.getVerticalOffsetForElement = function($element) {

    return this.getVerticalOffsetForPointOnElement($element, 0, 0);
  };

  this.getVerticalOffsetForPointOnElement = function($element, x, y) {

    var elementRect = Rect.fromElement($element);
    return Math.ceil(elementRect.top + y * elementRect.height / 100);
  };

  this.getElementById = function(id) {

    var contentDoc = $iframe[0].contentDocument;

    var $element = $(contentDoc.getElementById(id));
    //$("#" + Helpers.escapeJQuerySelector(id), contentDoc);

    if ($element.length == 0) {
      return undefined;
    }

    return $element;
  };

  this.getPageForElementId = function(id) {

    var $element = this.getElementById(id);
    if (!$element) {
      return -1;
    }

    return this.getPageForElement($element);
  };

  function splitCfi(cfi) {

    var ret = {
      cfi: "",
      x: 0,
      y: 0
    };

    var ix = cfi.indexOf("@");

    if (ix != -1) {
      var terminus = cfi.substring(ix + 1);

      var colIx = terminus.indexOf(":");
      if (colIx != -1) {
        ret.x = parseInt(terminus.substr(0, colIx));
        ret.y = parseInt(terminus.substr(colIx + 1));
      } else {
        console.log("Unexpected terminating step format");
      }

      ret.cfi = cfi.substring(0, ix);
    } else {

      ret.cfi = cfi;
    }

    return ret;
  }

  // returns raw DOM element (not $ jQuery-wrapped)
  this.getFirstVisibleMediaOverlayElement = function(visibleContentOffsets) {
    var docElement = this.getRootElement();
    if (!docElement) return undefined;

    var $root = $("body", docElement);
    if (!$root || !$root.length || !$root[0]) return undefined;

    var that = this;

    var firstPartial = undefined;

    function traverseArray(arr) {
      if (!arr || !arr.length) return undefined;

      for (var i = 0, count = arr.length; i < count; i++) {
        var item = arr[i];
        if (!item) continue;

        var $item = $(item);

        if ($item.data("mediaOverlayData")) {
          var visible = that.getElementVisibility($item, visibleContentOffsets);
          if (visible) {
            if (!firstPartial) firstPartial = item;

            if (visible == 100) return item;
          }
        } else {
          var elem = traverseArray(item.children);
          if (elem) return elem;
        }
      }

      return undefined;
    }

    var el = traverseArray([$root[0]]);
    if (!el) el = firstPartial;
    return el;

    // var $elements = this.getMediaOverlayElements($root);
    // return this.getVisibleElements($elements, visibleContentOffsets);
  };

  this.getElementVisibility = function($element, visibleContentOffsets) {
    return visibilityCheckerFunc($element, visibleContentOffsets, true);
  };

  // /**
  //  * @deprecated
  //  */
  // this.getVisibleMediaOverlayElements = function(visibleContentOffsets) {
  // 
  //     var $elements = this.getMediaOverlayElements($("body", this.getRootElement()));
  //     return this.getVisibleElements($elements, visibleContentOffsets);
  // 
  // };

  this.isElementVisible = visibilityCheckerFunc;

  this.getAllVisibleElementsWithSelector = function(selector, visibleContentOffset) {
    var elements = $(selector, this.getRootElement()).filter(function(e) {
      return true;
    });
    var $newElements = [];
    $.each(elements, function() {
      $newElements.push($(this));
    });
    var visibleDivs = this.getVisibleElements($newElements, visibleContentOffset);
    return visibleDivs;

  };

  this.getVisibleElements = function($elements, visibleContentOffsets) {

    var visibleElements = [];

    // Find the first visible text node
    $.each($elements, function() {
      var $element = this;
      var visibilityPercentage = visibilityCheckerFunc(
        $element, visibleContentOffsets, true);

      if (visibilityPercentage) {
        var $visibleElement = $element;
        visibleElements.push({
          element: $visibleElement[0], // DOM Element is pushed
          percentVisible: visibilityPercentage
        });
        return true;
      }

      // if element's position cannot be determined, just go to next one
      if (visibilityPercentage === null) {
        return true;
      }

      // continue if no visibleElements have been found yet,
      // stop otherwise
      return visibleElements.length === 0;
    });

    return visibleElements;
  };

  this.getVisibleTextElements = function(visibleContentOffsets) {

    var $elements = this.getTextElements($("body", this.getRootElement()));

    return this.getVisibleElements($elements, visibleContentOffsets);
  };

  /**
   * @deprecated
   */
  this.getMediaOverlayElements = function($root) {

    var $elements = [];

    function traverseCollection(elements) {

      if (elements == undefined) return;

      for (var i = 0, count = elements.length; i < count; i++) {

        var $element = $(elements[i]);

        if ($element.data("mediaOverlayData")) {
          $elements.push($element);
        } else {
          traverseCollection($element[0].children);
        }

      }
    }

    traverseCollection([$root[0]]);

    return $elements;
  };

  this.getTextElements = function($root) {

    var $textElements = [];

    $root.find(":not(iframe)").contents().each(function() {

      if (isValidTextNode(this)) {
        $textElements.push($(this).parent());
      }

    });

    return $textElements;

  };

  function isValidTextNode(node) {

    if (node.nodeType === Node.TEXT_NODE) {

      // Heuristic to find a text node with actual text
      var nodeText = node.nodeValue.replace(/\n/g, "");
      nodeText = nodeText.replace(/ /g, "");

      return nodeText.length > 0;
    }

    return false;

  }

  this.getElement = function(selector) {

    var $element = $(selector, this.getRootElement());

    if ($element.length > 0) {
      return $element;
    }

    return undefined;
  };

};

module.exports = CfiNavigationLogic

},{"../helpers/rect":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/rect.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/constants.js":[function(require,module,exports){
module.exports = {
  ORIENTATION_LANDSCAPE: "orientation_landscape",
  ORIENTATION_PORTRAIT: "orientation_portrait"
}
},{}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/fixed-view.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var _ = require('underscore')
var $ = require('jquery')
var Backbone = require('backbone')
var BookmarkData = require('../models/bookmark-data')
var CurrentPagesInfo = require('../models/current-pages-info')
var CSSTransition = require('../helpers/css-transition')
var deduceSyntheticSpread = require('../helpers/deduce-synthetic-spread')
var Events = require('../events')
var InternalEvents = require('../internal-events')
var loadTemplate = require('../helpers/load-template')
var Margins = require('../helpers/margins')
var OnePageView = require('./one-page-view')
var PageOpenRequest = require('../models/page-open-request')
var setStyles = require('../helpers/set-styles')
var Spread = require('../models/spread')

/**
 * View for rendering fixed layout page spread
 * @param options
 * @param reader
 * @constructor
 */
function FixedView(options, reader) {

  _.extend(this, Backbone.Events);

  var self = this;

  var _$el;
  var _$viewport = options.$viewport;
  var _spine = options.spine;
  var _userStyles = options.userStyles;
  var _bookStyles = options.bookStyles;
  var _zoom = options.zoom || {
    style: 'default'
  };
  var _currentScale;
  var _iframeLoader = options.iframeLoader;
  var _viewSettings = undefined;

  var _leftPageView = createOnePageView("fixed-page-frame-left");
  var _rightPageView = createOnePageView("fixed-page-frame-right");
  var _centerPageView = createOnePageView("fixed-page-frame-center");

  var _pageViews = [];
  _pageViews.push(_leftPageView);
  _pageViews.push(_rightPageView);
  _pageViews.push(_centerPageView);

  var _spread = new Spread(_spine, false);
  var _bookMargins;
  var _contentMetaSize;
  var _isRedrowing = false;
  var _redrawRequest = false;

  function createOnePageView(elementClass) {

    var pageView = new OnePageView(options, [elementClass],
      false, //enableBookStyleOverrides
      reader
    );

    pageView.on(OnePageView.SPINE_ITEM_OPEN_START, function($iframe, spineItem) {

      self.trigger(Events.CONTENT_DOCUMENT_LOAD_START, $iframe, spineItem);
    });

    return pageView;
  }

  this.isReflowable = function() {
    return false;
  };

  this.setZoom = function(zoom) {
    _zoom = zoom;

    resizeBook(false);
  }

  this.render = function() {

    var template = loadTemplate("fixed_book_frame", {});

    _$el = $(template);

    CSSTransition(_$el, "all 0 ease 0");

    _$el.css("overflow", "hidden");

    // Removed, see one_page_view@render()
    // var settings = reader.viewerSettings();
    // if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined")
    // {
    //     //defaults
    //     settings = new ViewerSettings({});
    // }
    // if (settings.enableGPUHardwareAccelerationCSS3D) {
    //
    //     // This fixes rendering issues with WebView (native apps), which crops content embedded in iframes unless GPU hardware acceleration is enabled for CSS rendering.
    //     _$el.css("transform", "translateZ(0)");
    // }

    _$viewport.append(_$el);

    self.applyStyles();

    return this;
  };

  this.remove = function() {

    _$el.remove();
  };


  this.setViewSettings = function(settings) {

    _viewSettings = settings;

    _spread.setSyntheticSpread(deduceSyntheticSpread(_$viewport, getFirstVisibleItem(), _viewSettings) == true); // force boolean value (from truthy/falsey return value)

    var views = getDisplayingViews();
    for (var i = 0, count = views.length; i < count; i++) {
      views[i].setViewSettings(settings);
    }
  };

  function getFirstVisibleItem() {

    var visibleItems = _spread.validItems();
    return visibleItems[0];
  }

  function redraw(initiator, paginationRequest) {

    if (_isRedrowing) {
      _redrawRequest = {
        initiator: initiator,
        paginationRequest: paginationRequest
      };
      return;
    }

    _isRedrowing = true;

    var context = {
      isElementAdded: false
    };

    var pageLoadDeferrals = createPageLoadDeferrals([{
      pageView: _leftPageView,
      spineItem: _spread.leftItem,
      context: context
    }, {
      pageView: _rightPageView,
      spineItem: _spread.rightItem,
      context: context
    }, {
      pageView: _centerPageView,
      spineItem: _spread.centerItem,
      context: context
    }]);

    $.when.apply($, pageLoadDeferrals).done(function() {
      _isRedrowing = false;

      if (_redrawRequest) {
        var p1 = _redrawRequest.initiator;
        var p2 = _redrawRequest.paginationRequest;
        _redrawRequest = undefined;
        redraw(p1, p2);
      } else {
        if (context.isElementAdded) {
          self.applyStyles();
        }

        if (paginationRequest) {
          onPagesLoaded(initiator, paginationRequest.spineItem, paginationRequest.elementId)
        } else {
          onPagesLoaded(initiator);
        }
      }

    });

  }

  // dir: 0 => new or same page, 1 => previous, 2 => next
  var updatePageSwitchDir = function(dir, hasChanged) {
    // irrespective of display state
    if (_leftPageView) _leftPageView.updatePageSwitchDir(dir, hasChanged);
    if (_rightPageView) _rightPageView.updatePageSwitchDir(dir, hasChanged);
    if (_centerPageView) _centerPageView.updatePageSwitchDir(dir, hasChanged);

    // var views = getDisplayingViews();
    // for(var i = 0, count = views.length; i < count; i++) {
    //     views[i].updatePageSwitchDir(dir, hasChanged);
    // }
  };


  this.applyStyles = function() {

    setStyles(_userStyles.getStyles(), _$el.parent());

    updateBookMargins();
    updateContentMetaSize();

    resizeBook();
  };

  this.applyBookStyles = function() {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {
      views[i].applyBookStyles();
    }
  };

  function createPageLoadDeferrals(viewItemPairs) {

    var pageLoadDeferrals = [];

    for (var i = 0; i < viewItemPairs.length; i++) {

      var dfd = updatePageViewForItem(viewItemPairs[i].pageView, viewItemPairs[i].spineItem, viewItemPairs[i].context);
      pageLoadDeferrals.push(dfd);
    }

    return pageLoadDeferrals;

  }

  function onPagesLoaded(initiator, paginationRequest_spineItem, paginationRequest_elementId) {

    updateContentMetaSize();
    resizeBook();

    self.trigger(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED, {
      paginationInfo: self.getPaginationInfo(),
      initiator: initiator,
      spineItem: paginationRequest_spineItem,
      elementId: paginationRequest_elementId
    });
  }

  this.onViewportResize = function() {

    //because change of the viewport orientation can alter pagination behaviour we have to check if
    //visible content stays same

    var firstVisibleItem = getFirstVisibleItem();
    if (!firstVisibleItem) {
      return;
    }

    var isSyntheticSpread = deduceSyntheticSpread(_$viewport, firstVisibleItem, _viewSettings) == true; // force boolean value (from truthy/falsey return value)

    if (isSpreadChanged(firstVisibleItem, isSyntheticSpread)) {
      _spread.setSyntheticSpread(isSyntheticSpread);
      var paginationRequest = new PageOpenRequest(firstVisibleItem, self);
      self.openPage(paginationRequest);
    } else {
      resizeBook(true);
    }
  };

  function isSpreadChanged(firstVisibleItem, isSyntheticSpread) {

    var tmpSpread = new Spread(_spine, isSyntheticSpread);
    tmpSpread.openItem(firstVisibleItem);

    return _spread.leftItem != tmpSpread.leftItem || _spread.rightItem != tmpSpread.rightItem || _spread.centerItem != tmpSpread.centerItem;
  }

  this.getViewScale = function() {
    return _currentScale;
  };

  function isContentRendered() {

    if (!_contentMetaSize || !_bookMargins) {
      return false;
    }

    var viewportWidth = _$viewport.width();
    var viewportHeight = _$viewport.height();

    return viewportWidth && viewportHeight;
  }

  function resizeBook(viewportIsResizing) {

    updatePageSwitchDir(0, false);

    if (!isContentRendered()) {
      return;
    }

    var viewportWidth = _$viewport.width();
    var viewportHeight = _$viewport.height();

    var leftPageMargins = _leftPageView.isDisplaying() ? Margins.fromElement(_leftPageView.element()) : Margins.empty();
    var rightPageMargins = _rightPageView.isDisplaying() ? Margins.fromElement(_rightPageView.element()) : Margins.empty();
    var centerPageMargins = _centerPageView.isDisplaying() ? Margins.fromElement(_centerPageView.element()) : Margins.empty();

    var pageMargins = getMaxPageMargins(leftPageMargins, rightPageMargins, centerPageMargins);

    var potentialTargetElementSize = {
      width: viewportWidth - _bookMargins.width(),
      height: viewportHeight - _bookMargins.height()
    };

    var potentialContentSize = {
      width: potentialTargetElementSize.width - pageMargins.width(),
      height: potentialTargetElementSize.height - pageMargins.height()
    };

    if (potentialTargetElementSize.width <= 0 || potentialTargetElementSize.height <= 0) {
      return;
    }

    var horScale = potentialContentSize.width / _contentMetaSize.width;
    var verScale = potentialContentSize.height / _contentMetaSize.height;

    _$viewport.css("overflow", "auto");

    var scale;
    if (_zoom.style == 'fit-width') {
      scale = horScale;
    } else if (_zoom.style == 'fit-height') {
      scale = verScale;
    } else if (_zoom.style == 'user') {
      scale = _zoom.scale;
    } else {
      scale = Math.min(horScale, verScale);

      // no need for pan during "viewport fit" zoom
      _$viewport.css("overflow", "hidden");
    }

    _currentScale = scale;

    var contentSize = {
      width: _contentMetaSize.width * scale,
      height: _contentMetaSize.height * scale
    };

    var targetElementSize = {
      width: contentSize.width + pageMargins.width(),
      height: contentSize.height + pageMargins.height()
    };

    var bookSize = {
      width: targetElementSize.width + _bookMargins.width(),
      height: targetElementSize.height + _bookMargins.height()
    };


    var bookLeft = Math.floor((viewportWidth - bookSize.width) / 2);
    var bookTop = Math.floor((viewportHeight - bookSize.height) / 2);

    if (bookLeft < 0) bookLeft = 0;
    if (bookTop < 0) bookTop = 0;

    _$el.css("left", bookLeft + "px");
    _$el.css("top", bookTop + "px");
    _$el.css("width", targetElementSize.width + "px");
    _$el.css("height", targetElementSize.height + "px");

    var left = _bookMargins.padding.left;
    var top = _bookMargins.padding.top;

    var transFunc = viewportIsResizing ? "transformContentImmediate" : "transformContent";

    if (_leftPageView.isDisplaying()) {

      _leftPageView[transFunc](scale, left, top);
    }

    if (_rightPageView.isDisplaying()) {

      left += _contentMetaSize.separatorPosition * scale;

      if (_leftPageView.isDisplaying()) {
        left += leftPageMargins.left;
      }

      _rightPageView[transFunc](scale, left, top);
    }

    if (_centerPageView.isDisplaying()) {

      _centerPageView[transFunc](scale, left, top);
    }

    self.trigger(Events.FXL_VIEW_RESIZED);
  }

  function getMaxPageMargins(leftPageMargins, rightPageMargins, centerPageMargins) {

    var sumMargin = {
      left: Math.max(leftPageMargins.margin.left, rightPageMargins.margin.left, centerPageMargins.margin.left),
      right: Math.max(leftPageMargins.margin.right, rightPageMargins.margin.right, centerPageMargins.margin.right),
      top: Math.max(leftPageMargins.margin.top, rightPageMargins.margin.top, centerPageMargins.margin.top),
      bottom: Math.max(leftPageMargins.margin.bottom, rightPageMargins.margin.bottom, centerPageMargins.margin.bottom)
    };

    var sumBorder = {
      left: Math.max(leftPageMargins.border.left, rightPageMargins.border.left, centerPageMargins.border.left),
      right: Math.max(leftPageMargins.border.right, rightPageMargins.border.right, centerPageMargins.border.right),
      top: Math.max(leftPageMargins.border.top, rightPageMargins.border.top, centerPageMargins.border.top),
      bottom: Math.max(leftPageMargins.border.bottom, rightPageMargins.border.bottom, centerPageMargins.border.bottom)
    };

    var sumPAdding = {
      left: Math.max(leftPageMargins.padding.left, rightPageMargins.padding.left, centerPageMargins.padding.left),
      right: Math.max(leftPageMargins.padding.right, rightPageMargins.padding.right, centerPageMargins.padding.right),
      top: Math.max(leftPageMargins.padding.top, rightPageMargins.padding.top, centerPageMargins.padding.top),
      bottom: Math.max(leftPageMargins.padding.bottom, rightPageMargins.padding.bottom, centerPageMargins.padding.bottom)
    };

    return new Margins(sumMargin, sumBorder, sumPAdding);

  }

  function updateContentMetaSize() {

    _contentMetaSize = {};

    if (_centerPageView.isDisplaying()) {
      _contentMetaSize.width = _centerPageView.meta_width();
      _contentMetaSize.height = _centerPageView.meta_height();
      _contentMetaSize.separatorPosition = 0;
    } else if (_leftPageView.isDisplaying() && _rightPageView.isDisplaying()) {
      if (_leftPageView.meta_height() == _rightPageView.meta_height()) {
        _contentMetaSize.width = _leftPageView.meta_width() + _rightPageView.meta_width();
        _contentMetaSize.height = _leftPageView.meta_height();
        _contentMetaSize.separatorPosition = _leftPageView.meta_width();
      } else {
        //normalize by height
        _contentMetaSize.width = _leftPageView.meta_width() + _rightPageView.meta_width() * (_leftPageView.meta_height() / _rightPageView.meta_height());
        _contentMetaSize.height = _leftPageView.meta_height();
        _contentMetaSize.separatorPosition = _leftPageView.meta_width();
      }
    } else if (_leftPageView.isDisplaying()) {
      _contentMetaSize.width = _leftPageView.meta_width() * 2;
      _contentMetaSize.height = _leftPageView.meta_height();
      _contentMetaSize.separatorPosition = _leftPageView.meta_width();
    } else if (_rightPageView.isDisplaying()) {
      _contentMetaSize.width = _rightPageView.meta_width() * 2;
      _contentMetaSize.height = _rightPageView.meta_height();
      _contentMetaSize.separatorPosition = _rightPageView.meta_width();
    } else {
      _contentMetaSize = undefined;
    }

  }

  function updateBookMargins() {
    _bookMargins = Margins.fromElement(_$el);
  }

  // dir: 0 => new or same page, 1 => previous, 2 => next
  this.openPage = function(paginationRequest, dir) {

    if (!paginationRequest.spineItem) {
      return;
    }

    var leftItem = _spread.leftItem;
    var rightItem = _spread.rightItem;
    var centerItem = _spread.centerItem;

    var isSyntheticSpread = deduceSyntheticSpread(_$viewport, paginationRequest.spineItem, _viewSettings) == true; // force boolean value (from truthy/falsey return value)
    _spread.setSyntheticSpread(isSyntheticSpread);
    _spread.openItem(paginationRequest.spineItem);

    var hasChanged = leftItem !== _spread.leftItem || rightItem !== _spread.rightItem || centerItem !== _spread.centerItem;

    if (dir === null || typeof dir === "undefined") dir = 0;

    updatePageSwitchDir(dir === 0 ? 0 : (_spread.spine.isRightToLeft() ? (dir === 1 ? 2 : 1) : dir), hasChanged);

    redraw(paginationRequest.initiator, paginationRequest);
  };


  this.openPagePrev = function(initiator) {

    _spread.openPrev();

    updatePageSwitchDir(_spread.spine.isRightToLeft() ? 2 : 1, true);

    redraw(initiator, undefined);
  };

  this.openPageNext = function(initiator) {

    _spread.openNext();

    updatePageSwitchDir(_spread.spine.isRightToLeft() ? 1 : 2, true);

    redraw(initiator, undefined);
  };

  function updatePageViewForItem(pageView, item, context) {

    var dfd = $.Deferred();

    if (!item) {
      if (pageView.isDisplaying()) {
        pageView.remove();
      }

      dfd.resolve();
    } else {

      if (!pageView.isDisplaying()) {

        _$el.append(pageView.render().element());

        context.isElementAdded = true;
      }

      pageView.loadSpineItem(item, function(success, $iframe, spineItem, isNewContentDocumentLoaded, context) {

        if (success && isNewContentDocumentLoaded) {

          //if we a re loading fixed view meta size should be defined
          if (!pageView.meta_height() || !pageView.meta_width()) {
            console.error("Invalid document " + spineItem.href + ": viewport is not specified!");
          }

          self.trigger(Events.CONTENT_DOCUMENT_LOADED, $iframe, spineItem);
        }

        dfd.resolve();

      }, context);
    }

    return dfd.promise();
  }

  this.getPaginationInfo = function() {

    var paginationInfo = new CurrentPagesInfo(_spine, true);

    var spreadItems = [_spread.leftItem, _spread.rightItem, _spread.centerItem];

    for (var i = 0; i < spreadItems.length; i++) {

      var spreadItem = spreadItems[i];

      if (spreadItem) {
        paginationInfo.addOpenPage(0, 1, spreadItem.idref, spreadItem.index);
      }
    }

    return paginationInfo;
  };

  this.bookmarkCurrentPage = function() {

    var views = getDisplayingViews();

    if (views.length > 0) {

      var idref = views[0].currentSpineItem().idref;
      var cfi = views[0].getFirstVisibleElementCfi();

      if (cfi == undefined) {
        cfi = "";
      }

      return new BookmarkData(idref, cfi);
    }

    return new BookmarkData("", "");
  };

  function getDisplayingViews() {

    var viewsToCheck = [];

    if (_spine.isLeftToRight()) {
      viewsToCheck = [_leftPageView, _centerPageView, _rightPageView];
    } else {
      viewsToCheck = [_rightPageView, _centerPageView, _leftPageView];
    }

    var views = [];

    for (var i = 0, count = viewsToCheck.length; i < count; i++) {
      if (viewsToCheck[i].isDisplaying()) {
        views.push(viewsToCheck[i]);
      }
    }

    return views;
  }

  this.getLoadedSpineItems = function() {

    return _spread.validItems();
  };

  this.getElement = function(spineItem, selector) {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {

      var view = views[i];
      if (view.currentSpineItem() == spineItem) {
        return view.getElement(spineItem, selector);
      }
    }

    console.error("spine item is not loaded");
    return undefined;
  };

  this.getElementById = function(spineItem, id) {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {

      var view = views[i];
      if (view.currentSpineItem() == spineItem) {
        return view.getElementById(spineItem, id);
      }
    }

    console.error("spine item is not loaded");
    return undefined;
  };

  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {

      var view = views[i];
      if (view.currentSpineItem() == spineItem) {
        return view.getElementByCfi(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist);
      }
    }

    console.error("spine item is not loaded");
    return undefined;
  };

  this.getFirstVisibleMediaOverlayElement = function() {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {
      var el = views[i].getFirstVisibleMediaOverlayElement();
      if (el) return el;
    }

    return undefined;
  };

  this.insureElementVisibility = function(spineItemId, element, initiator) {

    //TODO: during zoom+pan, playing element might not actualy be visible

  }
}

module.exports = FixedView
},{"../events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/events.js","../helpers/css-transition":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/css-transition.js","../helpers/deduce-synthetic-spread":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/deduce-synthetic-spread.js","../helpers/load-template":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/load-template.js","../helpers/margins":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/margins.js","../helpers/set-styles":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/set-styles.js","../internal-events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/internal-events.js","../models/bookmark-data":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/bookmark-data.js","../models/current-pages-info":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/current-pages-info.js","../models/page-open-request":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/page-open-request.js","../models/spread":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/spread.js","./one-page-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/one-page-view.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/iframe-loader.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var URI = require('URIjs')

function IFrameLoader() {

  var self = this;
  var eventListeners = {};


  this.addIFrameEventListener = function(eventName, callback, context) {

    if (eventListeners[eventName] == undefined) {
      eventListeners[eventName] = [];
    }

    eventListeners[eventName].push({
      callback: callback,
      context: context
    });
  };

  this.updateIframeEvents = function(iframe) {

    _.each(eventListeners, function(value, key) {
      for (var i = 0, count = value.length; i < count; i++) {
        $(iframe.contentWindow).off(key);
        $(iframe.contentWindow).on(key, value[i].callback, value[i].context);
      }
    });
  };

  this.loadIframe = function(iframe, src, callback, context, attachedData) {

    iframe.setAttribute("data-baseUri", iframe.baseURI);
    iframe.setAttribute("data-src", src);

    var loadedDocumentUri = new URI(src).absoluteTo(iframe.baseURI).toString();

    self._loadIframeWithUri(iframe, attachedData, loadedDocumentUri, function() {
      var doc = iframe.contentDocument || iframe.contentWindow.document;
      $('svg', doc).load(function() {
        console.log('loaded');
      });
      callback.call(context, true, attachedData);
    });
  };

  this._loadIframeWithUri = function(iframe, attachedData, contentUri, callback) {

    iframe.onload = function() {

      self.updateIframeEvents(iframe);

      var mathJax = iframe.contentWindow.MathJax;
      if (mathJax) {
        // If MathJax is being used, delay the callback until it has completed rendering
        var mathJaxCallback = _.once(callback);
        try {
          mathJax.Hub.Queue(mathJaxCallback);
        } catch (err) {
          console.error("MathJax fail!");
          callback();
        }
        // Or at an 8 second timeout, which ever comes first
        //window.setTimeout(mathJaxCallback, 8000);
      } else {
        callback();
      }
    };

    iframe.setAttribute("src", contentUri);

  };



}

module.exports = IFrameLoader
},{"URIjs":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/index.js":[function(require,module,exports){
// TODO Remove when all underscore deps are gone
var _ = require('underscore')

var Views = {
  IFrameLoader: require('./iframe-loader'),
  ReaderView: require('./reader-view')
}

var ViewsConstants = require('./constants')

_.extend(Views, ViewsConstants)

module.exports = Views
},{"./constants":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/constants.js","./iframe-loader":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/iframe-loader.js","./reader-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/reader-view.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/internal-links-support.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')
var Interpreter = require('epub-cfi').Interpreter
var URI = require('URIjs')

/**
 *
 * @param reader
 * @constructor
 */
function InternalLinksSupport(reader) {

  var self = this;

  function splitCfi(fullCfi) {

    var startIx = fullCfi.indexOf("(");
    var bungIx = fullCfi.indexOf("!");
    var endIx = fullCfi.indexOf(")");

    if (bungIx == -1) {
      return undefined;
    }

    if (endIx == -1) {
      endIx = fullCfi.length;
    }

    return {

      spineItemCfi: fullCfi.substring(startIx + 1, bungIx),
      elementCfi: fullCfi.substring(bungIx + 1, endIx)
    }
  }

  function getAbsoluteUriRelativeToSpineItem(hrefUri, spineItem) {

    var fullPath = reader.package().resolveRelativeUrl(spineItem.href);

    var absUrl = hrefUri.absoluteTo(fullPath);

    return absUrl;
  }

  function processDeepLink(hrefUri, spineItem) {

    var absoluteOpfUri = getAbsoluteUriRelativeToSpineItem(hrefUri, spineItem);

    if (!absoluteOpfUri) {
      console.error("Unable to resolve " + hrefUri.href())
      return;
    }

    var fullCfi = hrefUri.fragment();

    var absPath = absoluteOpfUri.toString();

    absPath = RemoveFromString(absPath, "#" + fullCfi);

    readOpfFile(absPath, function(opfText) {

      if (!opfText) {
        return;
      }

      var parser = new window.DOMParser;
      var packageDom = parser.parseFromString(opfText, 'text/xml');
      var cfi = splitCfi(fullCfi);

      if (!cfi) {
        console.warn("Unable to split cfi:" + fullCfi);
        return;
      }

      var contentDocRef = Interpreter.getContentDocHref("epubcfi(" + cfi.spineItemCfi + ")", packageDom);

      if (contentDocRef) {

        var newSpineItem = reader.spine().getItemByHref(contentDocRef);
        if (newSpineItem) {

          reader.openSpineItemElementCfi(newSpineItem.idref, cfi.elementCfi, self);
        } else {
          console.warn("Unable to find spineItem with href=" + contentDocRef);
        }

      } else {
        console.warn("Unable to find document ref from " + fullCfi + " cfi");
      }

    });

  }

  function readOpfFile(path, callback) {

    $.ajax({
      // encoding: "UTF-8",
      // mimeType: "text/plain; charset=UTF-8",
      // beforeSend: function( xhr ) {
      //     xhr.overrideMimeType("text/plain; charset=UTF-8");
      // },
      isLocal: path.indexOf("http") === 0 ? false : true,
      url: path,
      dataType: 'text',
      async: true,
      success: function(result) {
        callback(result);
      },
      error: function(xhr, status, errorThrown) {
        console.error('Error when AJAX fetching ' + path);
        console.error(status);
        console.error(errorThrown);
        callback();
      }
    });
  }

  //checks if href includes path to opf file and full cfi
  function isDeepLikHref(uri) {

    var fileName = uri.filename();
    return fileName && EndsWith(fileName, ".opf");
  }

  function processLinkWithHash(hrefUri, spineItem) {

    var fileName = hrefUri.filename();

    var idref;

    //reference to another file
    if (fileName) {
      var normalizedUri = new URI(hrefUri, spineItem.href);

      var pathname = decodeURIComponent(normalizedUri.pathname());

      var newSpineItem = reader.spine().getItemByHref(pathname);

      if (!newSpineItem) {
        console.error("spine item with href=" + pathname + " not found");
        return;
      }

      idref = newSpineItem.idref;
    } else { //hush in the same file
      idref = spineItem.idref;
    }

    var hashFrag = hrefUri.fragment();

    reader.openSpineItemElementId(idref, hashFrag, self);

  }

  this.processLinkElements = function($iframe, spineItem) {

    var epubContentDocument = $iframe[0].contentDocument;

    $('a', epubContentDocument).click(function(clickEvent) {
      // Check for both href and xlink:href attribute and get value
      var href;
      if (clickEvent.currentTarget.attributes["xlink:href"]) {

        href = clickEvent.currentTarget.attributes["xlink:href"].value;
      } else {
        href = clickEvent.currentTarget.attributes["href"].value;
      }

      var overrideClickEvent = false;
      var hrefUri = new URI(href);
      var hrefIsRelative = hrefUri.is('relative');

      if (hrefIsRelative) {

        if (isDeepLikHref(hrefUri)) {
          processDeepLink(hrefUri, spineItem);
          overrideClickEvent = true;
        } else {
          processLinkWithHash(hrefUri, spineItem);
          overrideClickEvent = true;
        }

      } else {
        // It's an absolute URL to a remote site - open it in a separate window outside the reader
        window.open(href, '_blank');
        overrideClickEvent = true;
      }

      if (overrideClickEvent) {
        clickEvent.preventDefault();
        clickEvent.stopPropagation();
      }
    });

  }

}

module.exports = InternalLinksSupport
},{"URIjs":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/URIjs/src/URI.js","epub-cfi":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/index.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/media-overlay-data-injector.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')
var EPUBcfi = require('epub-cfi')
var SmilIterator = require('../models/smil-iterator');
var ResolveContentRef = require('../helpers/resolve-content-ref')


/**
 *
 * @param mediaOverlay
 * @param mediaOverlayPlayer
 * @constructor
 */
function MediaOverlayDataInjector(mediaOverlay, mediaOverlayPlayer) {

  this.attachMediaOverlayData = function($iframe, spineItem, mediaOverlaySettings) {

    var contentDocElement = $iframe[0].contentDocument.documentElement;

    if (!spineItem.media_overlay_id && mediaOverlay.smil_models.length === 0) {
      return;
    }

    var $body = $("body", contentDocElement);
    if ($body.length == 0) {
      console.error("! BODY ???");
    } else {
      var click = $body.data("mediaOverlayClick");
      if (click) {
        console.error("[WARN] already mediaOverlayClick");
      } else {
        $body.data("mediaOverlayClick", {
          ping: "pong"
        });

        var clickEvent = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click';
        $body.bind(clickEvent, function(event) {
          var elem = $(this)[0]; // body
          elem = event.target; // body descendant

          if (!elem) {
            mediaOverlayPlayer.touchInit();
            return true;
          }

          //console.debug("MO CLICK: " + elem.id);

          var data = undefined;
          var el = elem;

          var inLink = false;
          if (el.nodeName.toLowerCase() === "a") {
            inLink = true;
          }

          while (!(data = $(el).data("mediaOverlayData"))) {
            if (el.nodeName.toLowerCase() === "a") {
              inLink = true;
            }
            el = el.parentNode;
            if (!el) {
              break;
            }
          }

          if (data && (data.par || data.pars)) {
            if (el !== elem) {
              //console.log("MO CLICK REDIRECT: " + el.id);
            }

            if (!mediaOverlaySettings.mediaOverlaysEnableClick) {
              console.log("MO CLICK DISABLED");
              mediaOverlayPlayer.touchInit();
              return true;
            }

            if (inLink) {
              console.log("MO CLICKED LINK");
              mediaOverlayPlayer.touchInit();
              return true;
            }

            var par = data.par ? data.par : data.pars[0];

            if (data.pars && (typeof rangy !== "undefined")) {
              var wasPaused = false;

              // To remove highlight which may have altered DOM (and break CFI expressions)
              if (mediaOverlayPlayer.isPlayingCfi()) {
                wasPaused = true;
                mediaOverlayPlayer.pause();
              }

              // /////////////////////
              // 
              // var p = {x: event.pageX, y: event.pageY};
              // if (webkitConvertPointFromPageToNode)
              // {
              //     p = webkitConvertPointFromPageToNode(elem.ownerDocument.body, new WebKitPoint(event.pageX, event.pageY));
              // }
              // 
              // var div = elem.ownerDocument.getElementById("CLICKED");
              // if (div)
              // {
              //     div.parentNode.removeChild(div);
              // }
              // 
              // div = elem.ownerDocument.createElementNS("http://www.w3.org/1999/xhtml", 'div');
              // div.setAttribute("style", "background-color: red; position: absolute; z-index: 999; width: 50px; height: 50px; left: " + p.x + "px; top: " + p.y + "px;");
              // div.id = "CLICKED";
              // div.setAttribute("id", div.id);
              // var divTxt = elem.ownerDocument.createTextNode(" ");
              // div.appendChild(divTxt);
              // elem.ownerDocument.body.appendChild(div);
              //                          
              // /////////////////////


              //rangy.init();
              try {
                // THIS WORKS (same as Rangy's method below)
                //                                 var r;
                //                                 if (elem.ownerDocument.caretRangeFromPoint)
                //                                 {
                //                                     r = elem.ownerDocument.caretRangeFromPoint(event.pageX, event.pageY);
                //                                 }
                //                                 else if (event.rangeParent)
                //                                 {
                //                                     r = elem.ownerDocument.createRange();
                //                                     range.setStart(event.rangeParent, event.rangeOffset);
                //                                 }
                //                                 
                // console.log("------ 1");
                // console.log(elem.ownerDocument);
                // console.log(event.pageX);
                // console.log(event.pageY);
                // console.log(r.startContainer);
                // console.log(r.startOffset);
                // console.log("------");

                var pos = rangy.positionFromPoint(event.pageX, event.pageY, elem.ownerDocument);
                // console.log("------ 2");
                // console.log(pos.node.textContent);
                // console.log(pos.offset);
                // console.log("------");

                par = undefined;

                for (var iPar = 0; iPar < data.pars.length; iPar++) {
                  var p = data.pars[iPar];

                  var startCFI = "epubcfi(" + p.cfi.partialStartCfi + ")";
                  var infoStart = EPUBcfi.getTextTerminusInfoWithPartialCFI(startCFI, elem.ownerDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                  //console.log(infoStart);

                  var endCFI = "epubcfi(" + p.cfi.partialEndCfi + ")";
                  var infoEnd = EPUBcfi.getTextTerminusInfoWithPartialCFI(endCFI, elem.ownerDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                  //console.log(infoEnd);

                  var range = rangy.createRange(elem.ownerDocument); //createNativeRange
                  range.setStartAndEnd(
                    infoStart.textNode[0], infoStart.textOffset,
                    infoEnd.textNode[0], infoEnd.textOffset
                  );

                  if (range.isPointInRange(pos.node, pos.offset)) {
                    // console.log(p.cfi.partialStartCfi);
                    // console.log(p.cfi.partialEndCfi);
                    // DOUBLE CHECK WITH getClientRects ??

                    par = p;
                    break;
                  }
                }
              } catch (e) {
                console.error(e);
              }

              if (!par) {
                if (wasPaused) {
                  mediaOverlayPlayer.toggleMediaOverlay();
                }
                return true;
              }
            }


            if (el && el != elem && el.nodeName.toLowerCase() === "body" && par && !par.getSmil().id) {
              //console.debug("MO CLICKED BLANK BODY");
              mediaOverlayPlayer.touchInit();
              return true;
            }

            mediaOverlayPlayer.playUserPar(par);
            return true;
          } else {
            var readaloud = $(elem).attr("ibooks:readaloud");
            if (!readaloud) {
              readaloud = $(elem).attr("epub:readaloud");
            }
            if (readaloud) {
              console.debug("MO readaloud attr: " + readaloud);

              var isPlaying = mediaOverlayPlayer.isPlaying();
              if (readaloud === "start" && !isPlaying ||
                readaloud === "stop" && isPlaying ||
                readaloud === "startstop") {
                mediaOverlayPlayer.toggleMediaOverlay();
                return true;
              }
            }
          }

          mediaOverlayPlayer.touchInit();
          return true;
        });
      }
    }

    var smil = mediaOverlay.getSmilBySpineItem(spineItem);
    if (!smil) {
      console.error("NO SMIL?? " + spineItem.idref + " /// " + spineItem.media_overlay_id);
      return;
    }

    var traverseSmilSeqs = function(root) {
      if (!root) return;

      if (root.nodeType && root.nodeType === "seq") {
        // if (root.element)
        // {
        //     console.error("WARN: seq.element already set: " + root.textref);
        // }

        if (root.textref) {
          var parts = root.textref.split('#');
          var file = parts[0];
          var fragmentId = (parts.length === 2) ? parts[1] : "";
          // 
          // console.debug(root.textref);
          // console.debug(fragmentId);
          // console.log("---- SHOULD BE EQUAL:");
          // console.debug(file);
          // console.debug(par.text.srcFile);
          // 
          // if (file !== par.text.srcFile)
          // {
          //     console.error("adjustParToSeqSyncGranularity textref.file !== par.text.srcFile ???");
          //     return par;
          // }
          // 
          // if (!fragmentId)
          // {
          //     console.error("adjustParToSeqSyncGranularity !fragmentId ???");
          //     return par;
          // }

          if (file && fragmentId) {
            var textRelativeRef = ResolveContentRef(file, smil.href);
            var same = textRelativeRef === spineItem.href;
            if (same) {
              root.element = $iframe[0].contentDocument.getElementById(fragmentId);

              if (!root.element) {
                console.error("seq.textref !element? " + root.textref);
              }

              // var selector = "#" + ReadiumSDK.Helpers.escapeJQuerySelector(fragmentId);
              // var $element = $(selector, element.ownerDocument.documentElement);
              // if ($element)
              // {
              //     seq.element = $element[0];
              // }
            }
          }
        }
      }

      if (root.children && root.children.length) {
        for (var i = 0; i < root.children.length; i++) {
          var child = root.children[i];
          traverseSmilSeqs(child);
        }
      }
    };
    traverseSmilSeqs(smil);

    //console.debug("[[MO ATTACH]] " + spineItem.idref + " /// " + spineItem.media_overlay_id + " === " + smil.id);

    var iter = new SmilIterator(smil);

    var fakeOpfRoot = "/99!";
    var epubCfiPrefix = "epubcfi";

    while (iter.currentPar) {
      iter.currentPar.element = undefined;
      iter.currentPar.cfi = undefined;

      if (true) { //iter.currentPar.text.srcFragmentId (includes empty frag ID)

        var textRelativeRef = ResolveContentRef(iter.currentPar.text.srcFile, iter.smil.href);

        var same = textRelativeRef === spineItem.href;
        if (same) {
          var selectBody = !iter.currentPar.text.srcFragmentId || iter.currentPar.text.srcFragmentId.length == 0;
          var selectId = iter.currentPar.text.srcFragmentId.indexOf(epubCfiPrefix) == 0 ? undefined : iter.currentPar.text.srcFragmentId;

          var $element = undefined;
          var isCfiTextRange = false;
          if (!selectBody && !selectId) {
            if (iter.currentPar.text.srcFragmentId.indexOf(epubCfiPrefix) === 0) {
              var partial = iter.currentPar.text.srcFragmentId.substr(epubCfiPrefix.length + 1, iter.currentPar.text.srcFragmentId.length - epubCfiPrefix.length - 2);

              if (partial.indexOf(fakeOpfRoot) === 0) {
                partial = partial.substr(fakeOpfRoot.length, partial.length - fakeOpfRoot.length);
              }
              //console.log(partial);
              var parts = partial.split(",");
              if (parts && parts.length === 3) {
                try {
                  var partialStartCfi = parts[0] + parts[1];
                  var startCFI = "epubcfi(" + partialStartCfi + ")";
                  var infoStart = EPUBcfi.getTextTerminusInfoWithPartialCFI(startCFI, $iframe[0].contentDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                  //console.log(infoStart);

                  var partialEndCfi = parts[0] + parts[2];
                  var endCFI = "epubcfi(" + partialEndCfi + ")";
                  var infoEnd = EPUBcfi.getTextTerminusInfoWithPartialCFI(endCFI, $iframe[0].contentDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                  //console.log(infoEnd);

                  var cfiTextParent = infoStart.textNode[0].parentNode;

                  iter.currentPar.cfi = {
                    smilTextSrcCfi: iter.currentPar.text.srcFragmentId,
                    partialRangeCfi: partial,
                    partialStartCfi: partialStartCfi,
                    partialEndCfi: partialEndCfi,

                    cfiTextParent: cfiTextParent

                    // textNode becomes invalid after highlighting! (dynamic span insertion/removal changes DOM)
                    // cfiRangeStart: infoStart,
                    // cfiRangeEnd: infoEnd
                  };

                  // TODO: not just start textNode, but all of them between start and end...
                  // ...that being said, CFI text ranges likely to be used only within a single common parent,
                  // so this is an acceptable implementation shortcut for this CFI experimentation (word-level text/audio synchronisation).
                  isCfiTextRange = true;
                  $element = $(cfiTextParent);
                  var modata = $element.data("mediaOverlayData");
                  if (!modata) {
                    modata = {
                      pars: [iter.currentPar]
                    };
                    $element.data("mediaOverlayData", modata);
                  } else {
                    if (modata.par) {
                      console.error("[WARN] non-CFI MO DATA already exists!");
                      modata.par = undefined;
                    }

                    var found = false;
                    if (modata.pars) {
                      for (var iPars = 0; iPars < modata.pars.length; iPars++) {
                        var par = modata.pars[iPars];

                        if (par === iter.currentPar) {
                          found = true;
                          console.error("[WARN] mediaOverlayData CFI PAR already registered!");
                        }
                      }
                    } else {
                      modata.pars = [];
                    }

                    if (!found) {
                      modata.pars.push(iter.currentPar);
                    }
                  }

                } catch (error) {
                  console.error(error);
                }
              } else {
                try {
                  var cfi = "epubcfi(" + partial + ")";
                  $element = EPUBcfi.getTargetElementWithPartialCFI(cfi, $iframe[0].contentDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                } catch (error) {
                  console.error(error);
                }
              }
            } else {
              console.error("SMIL text@src CFI fragment identifier scheme not supported: " + iter.currentPar.text.srcFragmentId);
            }
          } else {
            if (selectBody) {
              $element = $body; //$("body", contentDocElement);
            } else {
              $element = $($iframe[0].contentDocument.getElementById(selectId));
              //$element = $("#" + ReadiumSDK.Helpers.escapeJQuerySelector(iter.currentPar.text.srcFragmentId), contentDocElement);
            }
          }

          if ($element && $element.length > 0) {

            if (!isCfiTextRange) {
              if (iter.currentPar.element && iter.currentPar.element !== $element[0]) {
                console.error("DIFFERENT ELEMENTS??! " + iter.currentPar.text.srcFragmentId + " /// " + iter.currentPar.element.id);
              }

              var name = $element[0].nodeName ? $element[0].nodeName.toLowerCase() : undefined;
              if (name === "audio" || name === "video") {
                $element.attr("preload", "auto");
              }

              iter.currentPar.element = $element[0];

              var modata = $element.data("mediaOverlayData");
              if (modata) {
                console.error("[WARN] MO DATA already exists.");

                if (modata.par && modata.par !== iter.currentPar) {
                  console.error("DIFFERENT PARS??!");
                }
              }

              $element.data("mediaOverlayData", {
                par: iter.currentPar
              });

              /*
               $element.click(function() {
               var elem = $(this)[0];
               console.debug("MO CLICK (ELEM): " + elem.id);

               var par = $(this).data("mediaOverlayData").par;
               mediaOverlayPlayer.playUserPar(par);
               });
               */
            }
          } else {
            console.error("!! CANNOT FIND ELEMENT: " + iter.currentPar.text.srcFragmentId + " == " + iter.currentPar.text.srcFile + " /// " + spineItem.href);
          }
        } else {
          //console.debug("[INFO] " + spineItem.href + " != " + textRelativeRef + " # " + iter.currentPar.text.srcFragmentId);
        }
      }

      iter.next();
    }
  }
};

module.exports = MediaOverlayDataInjector

},{"../helpers/resolve-content-ref":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/resolve-content-ref.js","../models/smil-iterator":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-iterator.js","epub-cfi":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/epub-cfi/src/index.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/media-overlay-element-highlighter.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')
var rangy = require('rangy')

/**
 *
 * @param reader
 * @constructor
 */
function MediaOverlayElementHighlighter(reader) {

  this.includeParWhenAdjustingToSeqSyncGranularity = true;

  var DEFAULT_MO_ACTIVE_CLASS = "mo-active-default";
  var DEFAULT_MO_SUB_SYNC_CLASS = "mo-sub-sync";

  //var BACK_COLOR = "#99CCCC";

  var _highlightedElementPar = undefined;
  this.isElementHighlighted = function(par) {
    return _highlightedElementPar && par === _highlightedElementPar;
  };

  var _highlightedCfiPar = undefined;
  this.isCfiHighlighted = function(par) {
    return _highlightedCfiPar && par === _highlightedCfiPar;
  };

  var _activeClass = "";
  var _playbackActiveClass = "";

  var _reader = reader;

  var USE_RANGY = true && (typeof rangy !== "undefined");
  var _rangyCSS = undefined;
  var _rangyRange = undefined;

  var HIGHLIGHT_ID = "MO_SPEAK";

  var self = this;

  var $userStyle = undefined;

  this.reDo = function() {
    //this.reset();

    if ($userStyle) {
      $userStyle.remove();
    }
    $userStyle = undefined;

    var he = _highlightedElementPar;
    var hc = _highlightedCfiPar;
    var c1 = _activeClass;
    var c2 = _playbackActiveClass;

    if (_highlightedElementPar) {
      this.reset();

      this.highlightElement(he, c1, c2);
    } else if (_highlightedCfiPar) {
      this.reset();

      this.highlightCfi(hc, c1, c2);
    }
  };

  function ensureUserStyle($element, hasAuthorStyle, overrideWithUserStyle) {
    if ($userStyle) {
      try {
        if ($userStyle[0].ownerDocument === $element[0].ownerDocument) {
          return;
        }
      } catch (e) {

      }
    }


    $head = $("head", $element[0].ownerDocument.documentElement);

    $userStyle = $("<style type='text/css'> </style>");

    $userStyle.append("." + DEFAULT_MO_ACTIVE_CLASS + " {");

    var fallbackUserStyle = "background-color: yellow !important; color: black !important; border-radius: 0.4em;";

    var style = overrideWithUserStyle; //_reader.userStyles().findStyle("." + DEFAULT_MO_ACTIVE_CLASS);
    if (style) {
      var atLeastOne = false;
      for (var prop in style.declarations) {
        if (!style.declarations.hasOwnProperty(prop)) {
          continue;
        }

        atLeastOne = true;
        $userStyle.append(prop + ": " + style.declarations[prop] + "; ");
      }

      if (!atLeastOne && !hasAuthorStyle) {
        $userStyle.append(fallbackUserStyle);
      }
    } else if (!hasAuthorStyle) {
      $userStyle.append(fallbackUserStyle);
    }

    $userStyle.append("}");


    // ---- CFI
    //$userStyle.append(" .highlight {background-color: blue; border: 2x solid green;}"); //.hover-highlight


    $userStyle.appendTo($head);

    //console.debug($userStyle[0].textContent);
  };

  this.highlightElement = function(par, activeClass, playbackActiveClass) {

    if (!par || par === _highlightedElementPar) {
      return;
    }

    this.reset();

    _highlightedElementPar = par;
    _highlightedCfiPar = undefined;

    _activeClass = activeClass;
    _playbackActiveClass = playbackActiveClass;

    var seq = this.adjustParToSeqSyncGranularity(_highlightedElementPar);
    var element = seq.element;

    if (_playbackActiveClass && _playbackActiveClass !== "") {
      //console.debug("MO playbackActiveClass: " + _playbackActiveClass);
      $(element.ownerDocument.documentElement).addClass(_playbackActiveClass);
      //console.debug("MO playbackActiveClass 2: " + element.ownerDocument.documentElement.classList);
    }

    var $hel = $(element);

    var hasAuthorStyle = _activeClass && _activeClass !== "";
    var overrideWithUserStyle = _reader.userStyles().findStyle("." + DEFAULT_MO_ACTIVE_CLASS);

    ensureUserStyle($hel, hasAuthorStyle, overrideWithUserStyle);

    if (overrideWithUserStyle || !hasAuthorStyle) {
      //console.debug("MO active NO CLASS: " + _activeClass);

      if (hasAuthorStyle) {
        $hel.addClass(_activeClass);
      }

      $hel.addClass(DEFAULT_MO_ACTIVE_CLASS);

      //$(element).css("background", BACK_COLOR);
    } else {
      //console.debug("MO activeClass: " + _activeClass);
      $hel.addClass(_activeClass);
    }

    if (this.includeParWhenAdjustingToSeqSyncGranularity || _highlightedElementPar !== seq) {
      $(_highlightedElementPar.element).addClass(DEFAULT_MO_SUB_SYNC_CLASS);
    }

    // ---- CFI
    //         try
    //         {
    //             // //noinspection JSUnresolvedVariable
    //             // var cfi = EPUBcfi.Generator.generateElementCFIComponent(element); //$hel[0]
    //             // if(cfi[0] == "!") {
    //             //     cfi = cfi.substring(1);
    //             // }
    // 
    // //console.log(element);
    //         
    //             var firstTextNode = getFirstTextNode(element);
    //             var txtFirst = firstTextNode.textContent;
    // //console.log(txtFirst);
    // 
    //             var lastTextNode = getLastTextNode(element);
    //             var txtLast = lastTextNode.textContent;
    // //console.log(txtLast);
    //         
    //             var cfi = EPUBcfi.Generator.generateCharOffsetRangeComponent(
    //                     firstTextNode, 
    //                     0, 
    //                     lastTextNode, 
    //                     txtLast.length,
    //                     ["cfi-marker"],
    //                     [],
    //                     ["MathJax_Message"]
    //                     );
    //             
    //             var id = $hel.data("mediaOverlayData").par.getSmil().spineItemId;
    //             _reader.addHighlight(id, cfi, HIGHLIGHT_ID,
    //             "highlight", //"underline"
    //             undefined // styles
    //                         );
    //         }
    //         catch(error)
    //         {
    //             console.error(error);
    //         
    //             removeHighlight();
    //         }
  };

  this.highlightCfi = function(par, activeClass, playbackActiveClass) {

    if (!par || par === _highlightedCfiPar) {
      return;
    }

    this.reset();

    _highlightedElementPar = undefined;
    _highlightedCfiPar = par;

    _activeClass = activeClass;
    _playbackActiveClass = playbackActiveClass;

    var $hel = $(_highlightedCfiPar.cfi.cfiTextParent);

    var hasAuthorStyle = _activeClass && _activeClass !== "";
    var overrideWithUserStyle = _reader.userStyles().findStyle("." + DEFAULT_MO_ACTIVE_CLASS); // TODO: performance issue?

    ensureUserStyle($hel, hasAuthorStyle, overrideWithUserStyle);

    var clazz = (overrideWithUserStyle || !hasAuthorStyle) ? ((hasAuthorStyle ? (_activeClass + " ") : "") + DEFAULT_MO_ACTIVE_CLASS) : _activeClass;

    if (USE_RANGY) {
      var doc = _highlightedCfiPar.cfi.cfiTextParent.ownerDocument;

      _rangyRange = rangy.createRange(doc); //createNativeRange

      var startCFI = "epubcfi(" + _highlightedCfiPar.cfi.partialStartCfi + ")";
      var infoStart = EPUBcfi.getTextTerminusInfoWithPartialCFI(startCFI, doc, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
      //console.log(infoStart);

      var endCFI = "epubcfi(" + _highlightedCfiPar.cfi.partialEndCfi + ")";
      var infoEnd = EPUBcfi.getTextTerminusInfoWithPartialCFI(endCFI, doc, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
      //console.log(infoEnd);

      _rangyRange.setStartAndEnd(
        infoStart.textNode[0], infoStart.textOffset,
        infoEnd.textNode[0], infoEnd.textOffset
      );

      if (false && // we use CssClassApplier instead, because surroundContents() has no trivial undoSurroundContents() function (inc. text nodes normalisation, etc.)
        _rangyRange.canSurroundContents()) {
        _rangyRange.MO_createCssClassApplier = false;

        var span = doc.createElementNS("http://www.w3.org/1999/xhtml", 'span');
        span.id = HIGHLIGHT_ID;
        span.setAttribute("id", span.id);
        span.setAttribute("class", clazz + " mo-cfi-highlight");

        _rangyRange.surroundContents(span);
      } else {
        _rangyRange.MO_createCssClassApplier = true;

        if (!_rangyCSS || _rangyCSS.cssClass !== clazz) {
          _rangyCSS = rangy.createCssClassApplier(clazz, {
            elementTagName: "span",
            elementProperties: {
              className: "mo-cfi-highlight"
            },
            ignoreWhiteSpace: true,
            applyToEditableOnly: false,
            normalize: true
          }, ["span"]);
        }

        _rangyCSS.applyToRange(_rangyRange);
      }
    } else {
      try {
        //var id = $hel.data("mediaOverlayData").par.getSmil().spineItemId;
        var id = par.getSmil().spineItemId;
        _reader.addHighlight(id, par.cfi.partialRangeCfi, HIGHLIGHT_ID,
          "highlight", //"underline"
          undefined // styles
        );
      } catch (error) {
        console.error(error);
      }
    }
  };

  // ---- CFI
  //     
  //     function getFirstTextNode(node)
  //     {
  //         if (node.nodeType === Node.TEXT_NODE)
  //         {
  //             if (node.textContent.trim().length > 0)
  //                 return node;
  //         }
  //         
  //         for (var i = 0; i < node.childNodes.length; i++)
  //         {
  //             var child = node.childNodes[i];
  //             var first = getFirstTextNode(child);
  //             if (first)
  //             {
  //                 return first;
  //             }
  //         }
  //         
  //         return undefined;
  //     }
  //     
  //     function getLastTextNode(node)
  //     {
  //         if (node.nodeType === Node.TEXT_NODE)
  //         {
  //             if (node.textContent.trim().length > 0)
  //                 return node;
  //         }
  //         
  //         for (var i = node.childNodes.length-1; i >= 0; i--)
  //         {
  //             var child = node.childNodes[i];
  //             var last = getLastTextNode(child);
  //             if (last)
  //             {
  //                 return last;
  //             }
  //         }
  //         
  //         return undefined;
  //     }
  //     

  this.reset = function() {

    if (_highlightedCfiPar) {
      var doc = _highlightedCfiPar.cfi.cfiTextParent.ownerDocument;
      if (USE_RANGY) {
        if (_rangyCSS && _rangyRange.MO_createCssClassApplier) {
          _rangyCSS.undoToRange(_rangyRange);
        } else {
          var toRemove = undefined;
          while ((toRemove = doc.getElementById(HIGHLIGHT_ID)) !== null) {
            var txt = toRemove.textContent; // TODO: innerHTML? or better: hasChildNodes loop + detach and re-attach
            var txtNode = doc.createTextNode(txt);

            toRemove.parentNode.replaceChild(txtNode, toRemove);
            txtNode.parentNode.normalize();
          }
        }

        //_rangyCSS = undefined;
        _rangyRange = undefined;
      } else {
        try {
          _reader.removeHighlight(HIGHLIGHT_ID);

          var toRemove = undefined;
          while ((toRemove = doc.getElementById("start-" + HIGHLIGHT_ID)) !== null) {
            console.log("toRemove START");
            console.log(toRemove);
            toRemove.parentNode.removeChild(toRemove);
          }
          while ((toRemove = doc.getElementById("end-" + HIGHLIGHT_ID)) !== null) {
            console.log("toRemove END");
            console.log(toRemove);
            toRemove.parentNode.removeChild(toRemove);
          }
        } catch (error) {
          console.error(error);
        }
      }

      _highlightedCfiPar = undefined;
    }




    if (_highlightedElementPar) {

      var seq = this.adjustParToSeqSyncGranularity(_highlightedElementPar);
      var element = seq.element;
      if (this.includeParWhenAdjustingToSeqSyncGranularity || _highlightedElementPar !== seq) {
        $(_highlightedElementPar.element).removeClass(DEFAULT_MO_SUB_SYNC_CLASS);
      }

      if (_playbackActiveClass && _playbackActiveClass !== "") {
        //console.debug("MO RESET playbackActiveClass: " + _playbackActiveClass);
        $(element.ownerDocument.documentElement).removeClass(_playbackActiveClass);
      }

      if (_activeClass && _activeClass !== "") {
        //console.debug("MO RESET activeClass: " + _activeClass);
        $(element).removeClass(_activeClass);
      }
      //else
      //{
      //console.debug("MO RESET active NO CLASS: " + _activeClass);
      $(element).removeClass(DEFAULT_MO_ACTIVE_CLASS);
      //$(element).css("background", '');
      //}

      _highlightedElementPar = undefined;
    }

    _activeClass = "";
    _playbackActiveClass = "";
  };

  this.adjustParToSeqSyncGranularity = function(par) {
    if (!par) return undefined;

    var sync = _reader.viewerSettings().mediaOverlaysSynchronizationGranularity;
    if (sync && sync.length > 0) {
      var element = par.element || (par.cfi ? par.cfi.cfiTextParent : undefined);
      if (!element) {
        console.error("adjustParToSeqSyncGranularity !element ???");
        return par; // should never happen!
      }

      var seq = par.getFirstSeqAncestorWithEpubType(sync, this.includeParWhenAdjustingToSeqSyncGranularity);
      if (seq && seq.element) {
        return seq;
      }
    }

    return par;
  };
};

module.exports = MediaOverlayElementHighlighter
},{"jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","rangy":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/rangy/lib/rangy-core.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/media-overlay-player.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var AudioPlayer = require('./audio-player')
var Events = require('../events')
var MediaOverlayElementHighlighter = require('./media-overlay-element-highlighter')
var ResolveContentRef = require('../helpers/resolve-content-ref')
var ScrollView = require('./scroll-view')
var SmilIterator = require('../models/smil-iterator')

/**
 *
 * @param reader
 * @param onStatusChanged
 * @constructor
 */
function MediaOverlayPlayer(reader, onStatusChanged) {


  var _smilIterator = undefined;

  var _audioPlayer = new AudioPlayer(onStatusChanged, onAudioPositionChanged, onAudioEnded, onPlay, onPause);

  var _ttsIsPlaying = false;
  var _currentTTS = undefined;
  var _enableHTMLSpeech = true && typeof window.speechSynthesis !== "undefined" && speechSynthesis != null; // set to false to force "native" platform TTS engine, rather than HTML Speech API

  var _SpeechSynthesisUtterance = undefined;
  //var _skipTTSEndEvent = false;
  var TOKENIZE_TTS = false;

  var _embeddedIsPlaying = false;
  var _currentEmbedded = undefined;


  this.isPlaying = function() {
    return _audioPlayer.isPlaying() || _ttsIsPlaying || _embeddedIsPlaying || _blankPagePlayer;
  }

  //var _currentPagination = undefined;
  var _package = reader.package();
  var _settings = reader.viewerSettings();
  var self = this;
  var _elementHighlighter = new MediaOverlayElementHighlighter(reader);

  reader.on(Events.READER_VIEW_DESTROYED, function() {

    self.reset();

  });


  this.applyStyles = function() {
    _elementHighlighter.reDo();
  };

  //
  // should use this.onSettingsApplied() instead!
  //    this.setRate = function(rate) {
  //        _audioPlayer.setRate(rate);
  //    };
  //    this.setVolume = function(volume) {
  //        _audioPlayer.setVolume(volume);
  //    };


  this.onSettingsApplied = function() {
    //console.debug(_settings);
    _audioPlayer.setRate(_settings.mediaOverlaysRate);
    _audioPlayer.setVolume(_settings.mediaOverlaysVolume / 100.0);
  };
  self.onSettingsApplied();
  //ReadiumSDK.
  reader.on(Events.SETTINGS_APPLIED, this.onSettingsApplied, this);

  /*
  var lastElement = undefined;
  var lastElementColor = "";
  */

  var _wasPlayingAtDocLoadStart = false;
  this.onDocLoadStart = function() {
    // 1) ReadiumSDK.Events.CONTENT_DOCUMENT_LOAD_START
    // (maybe 2-page fixed-layout or reflowable spread == 2 documents == 2x events)
    // MOPLayer.onDocLoad()

    // 2) ReadiumSDK.Events.CONTENT_DOCUMENT_LOADED
    // (maybe 2-page fixed-layout or reflowable spread == 2 documents == 2x events)
    //_mediaOverlayDataInjector.attachMediaOverlayData($iframe, spineItem, _viewerSettings);

    // 3) ReadiumSDK.Events.PAGINATION_CHANGED (layout finished, notified before rest of app, just once)
    // MOPLayer.onPageChanged()

    var wasPlaying = self.isPlaying();
    if (wasPlaying) {
      _wasPlayingAtDocLoadStart = true;
      self.pause();
    }
  };

  var _lastPaginationData = undefined;

  this.onPageChanged = function(paginationData) {

    _lastPaginationData = paginationData;

    var wasPausedBecauseNoAutoNextSmil = _wasPausedBecauseNoAutoNextSmil;
    _wasPausedBecauseNoAutoNextSmil = false;

    var wasPlayingAtDocLoadStart = _wasPlayingAtDocLoadStart;
    _wasPlayingAtDocLoadStart = false;

    if (!paginationData) {
      self.reset();
      return;
    }

    //        if (paginationData.paginationInfo)
    //        {
    //            _currentPagination = paginationData.paginationInfo;
    //        }

    /*
    if (lastElement)
    {
        $(lastElement).css("background-color", lastElementColor);
        lastElement = undefined;
    }
    */

    var element = undefined;
    var isCfiTextRange = false;

    var fakeOpfRoot = "/99!";
    var epubCfiPrefix = "epubcfi";

    if (paginationData.elementId || paginationData.initiator == self) {
      var spineItems = reader.getLoadedSpineItems();

      var rtl = reader.spine().isRightToLeft();

      for (var i = (rtl ? (spineItems.length - 1) : 0); rtl && i >= 0 || !rtl && i < spineItems.length; i += (rtl ? -1 : 1)) {
        var spineItem = spineItems[i];
        if (paginationData.spineItem && paginationData.spineItem != spineItem) {
          continue;
        }

        if (paginationData.elementId && paginationData.elementId.indexOf(epubCfiPrefix) === 0) {
          _elementHighlighter.reset(); // ensure clean DOM (no CFI span markers)

          var partial = paginationData.elementId.substr(epubCfiPrefix.length + 1, paginationData.elementId.length - epubCfiPrefix.length - 2);

          if (partial.indexOf(fakeOpfRoot) === 0) {
            partial = partial.substr(fakeOpfRoot.length, partial.length - fakeOpfRoot.length);
          }
          //console.log(partial);
          var parts = partial.split(",");
          if (parts && parts.length === 3) {
            try {
              var cfi = parts[0] + parts[1];
              var $element = reader.getElementByCfi(spineItem, cfi, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);

              element = ($element && $element.length > 0) ? $element[0] : undefined;
              if (element) {
                if (element.nodeType === Node.TEXT_NODE) {
                  element = element.parentNode;
                }
                break;
              }
            } catch (error) {
              console.error(error);
            }
          } else {
            try {
              //var cfi = "epubcfi(" + partial + ")";
              //var $element = EPUBcfi.getTargetElementWithPartialCFI(cfi, DOC);
              var $element = reader.getElementByCfi(spineItem, partial, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);

              element = ($element && $element.length > 0) ? $element[0] : undefined;
              if (element) {
                if (element.nodeType === Node.TEXT_NODE) {
                  element = element.parentNode;
                }
                break;
              }
            } catch (error) {
              console.error(error);
            }
          }
        }

        if (!element) {
          if (paginationData.initiator == self && !paginationData.elementId) {
            var $element = reader.getElement(spineItem, "body");
            element = ($element && $element.length > 0) ? $element[0] : undefined;
          } else {
            var $element = reader.getElementById(spineItem, paginationData.elementId);
            element = ($element && $element.length > 0) ? $element[0] : undefined;
            //("#" + ReadiumSDK.Helpers.escapeJQuerySelector(paginationData.elementId))
          }

          if (element) {
            /*
            console.error("GREEN: " + paginationData.elementId);
            lastElement = element;
            lastElementColor = $(element).css("background-color");
            $(element).css("background-color", "green");
             */
            break;
          }
        }
      }

      if (!element) {
        console.error("paginationData.elementId BUT !element: " + paginationData.elementId);
      }
    }

    var wasPlaying = self.isPlaying() || wasPlayingAtDocLoadStart;

    if (!_smilIterator || !_smilIterator.currentPar) {
      if (paginationData.initiator !== self) {
        clipBeginOffset = 0.0;
        self.reset();

        if (paginationData.elementId && element) {
          if (wasPlaying || wasPausedBecauseNoAutoNextSmil) {
            paginationData.elementIdResolved = element;
            self.toggleMediaOverlayRefresh(paginationData);
          }
        } else if (wasPlaying || wasPausedBecauseNoAutoNextSmil) {
          self.toggleMediaOverlay();
        }
        return;
      }

      //paginationData.initiator === self
      //
      //            if (!paginationData.elementId)
      //            {
      //                console.error("!paginationData.elementId");
      //                clipBeginOffset = 0.0;
      //                return;
      //            }

      if (!element) {
        console.error("!element: " + paginationData.elementId);
        clipBeginOffset = 0.0;
        return;
      }

      var moData = $(element).data("mediaOverlayData");
      if (!moData) {
        console.error("!moData: " + paginationData.elementId);
        clipBeginOffset = 0.0;
        return;
      }

      var parToPlay = moData.par ? moData.par : moData.pars[0];

      if (moData.pars) {
        for (var iPar = 0; iPar < moData.pars.length; iPar++) {
          var p = moData.pars[iPar];

          if (paginationData.elementId === p.cfi.smilTextSrcCfi) {
            parToPlay = p;
            break;
          }
        }
      }

      playPar(parToPlay);
      return;
    }

    var noReverseData = !_smilIterator.currentPar.element && !_smilIterator.currentPar.cfi;
    if (noReverseData) {
      console.error("!! _smilIterator.currentPar.element ??");
    }

    //console.debug("+++> paginationData.elementId: " + paginationData.elementId + " /// " + _smilIterator.currentPar.text.srcFile + " # " + _smilIterator.currentPar.text.srcFragmentId); //PageOpenRequest.elementId


    if (paginationData.initiator == self) {
      var notSameTargetID = paginationData.elementId && paginationData.elementId !== _smilIterator.currentPar.text.srcFragmentId;

      if (notSameTargetID) {
        console.error("!! paginationData.elementId !== _smilIterator.currentPar.text.srcFragmentId");
      }

      if (notSameTargetID || noReverseData) {
        clipBeginOffset = 0.0;
        return;
      }

      if (wasPlaying) {
        highlightCurrentElement();
      } else {
        playCurrentPar();
      }
    } else {
      if (!wasPlaying && !wasPausedBecauseNoAutoNextSmil) {
        self.reset();
        return;
      }

      if (!paginationData.elementId) {
        //self.reset();
      }

      if (paginationData.elementId && !element) {
        //self.reset();
        return;
      }

      if (paginationData.elementId) {
        paginationData.elementIdResolved = element;
      }

      self.toggleMediaOverlayRefresh(paginationData);
    }
  };

  function playPar(par) {

    var parSmil = par.getSmil();
    if (!_smilIterator || _smilIterator.smil != parSmil) {
      _smilIterator = new SmilIterator(parSmil);
    } else {
      _smilIterator.reset();
    }

    _smilIterator.goToPar(par);

    if (!_smilIterator.currentPar) {
      console.error("playPar !_smilIterator.currentPar");
      return;
    }

    playCurrentPar();
  }

  var clipBeginOffset = 0.0;

  var _blankPagePlayer = undefined;

  function initBlankPagePlayer() {
    self.resetBlankPage();

    _blankPagePlayer = setTimeout(function() {

      if (!_blankPagePlayer) {
        return;
      }

      self.resetBlankPage();

      if (!_smilIterator || !_smilIterator.currentPar) {
        self.reset();
        return;
      }

      audioCurrentTime = 0.0;
      //console.log("BLANK END.");
      //nextSmil(true);
      onAudioPositionChanged(_smilIterator.currentPar.audio.clipEnd + 0.1, 2);

    }, 2000);

    onStatusChanged({
      isPlaying: true
    });
  }

  function playCurrentPar() {
    _wasPlayingScrolling = false;

    if (!_smilIterator || !_smilIterator.currentPar) {
      console.error("playCurrentPar !_smilIterator || !_smilIterator.currentPar ???");
      return;
    }

    if (!_smilIterator.smil.id) {
      _audioPlayer.reset();

      self.resetTTS();
      self.resetEmbedded();

      setTimeout(function() {
        initBlankPagePlayer();
      }, 100);

      return;
    } else if (!_smilIterator.currentPar.audio.src) {
      clipBeginOffset = 0.0;

      //            if (_currentTTS)
      //            {
      //                _skipTTSEnded = true;
      //            }

      _audioPlayer.reset();

      var element = _smilIterator.currentPar.element;
      if (element) {
        audioCurrentTime = 0.0;

        var name = element.nodeName ? element.nodeName.toLowerCase() : undefined;

        if (name === "audio" || name === "video") {
          self.resetTTS();
          self.resetBlankPage();

          if (_currentEmbedded) {
            self.resetEmbedded();
          }

          _currentEmbedded = element;

          _currentEmbedded.pause();

          // DONE at reader_view.attachMO()
          //$(_currentEmbedded).attr("preload", "auto");

          _currentEmbedded.currentTime = 0;

          _currentEmbedded.play();

          $(_currentEmbedded).on("ended", self.onEmbeddedEnd);

          _embeddedIsPlaying = true;

          // gives the audio player some dispatcher time to raise the onPause event
          setTimeout(function() {
            onStatusChanged({
              isPlaying: true
            });
          }, 80);

          //                    $(element).on("seeked", function()
          //                    {
          //                        $(element).off("seeked", onSeeked);
          //                    });
        } else {
          self.resetEmbedded();
          self.resetBlankPage();

          _currentTTS = element.textContent; //.innerText (CSS display sensitive + script + style tags)
          if (!_currentTTS || _currentTTS == "") {
            _currentTTS = undefined;
          } else {
            speakStart(_currentTTS);
          }
        }
      }

      var cfi = _smilIterator.currentPar.cfi;
      if (cfi) {
        audioCurrentTime = 0.0;
        self.resetEmbedded();
        self.resetBlankPage();

        _elementHighlighter.reset(); // ensure clean DOM (no CFI span markers)

        var doc = cfi.cfiTextParent.ownerDocument;

        var startCFI = "epubcfi(" + cfi.partialStartCfi + ")";
        var infoStart = EPUBcfi.getTextTerminusInfoWithPartialCFI(startCFI, doc, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
        //console.log(infoStart);

        var endCFI = "epubcfi(" + cfi.partialEndCfi + ")";
        var infoEnd = EPUBcfi.getTextTerminusInfoWithPartialCFI(endCFI, doc, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
        //console.log(infoEnd);

        if (rangy) {
          //infoStart.textNode[0].parentNode.ownerDocument
          var range = rangy.createRange(doc); //createNativeRange
          range.setStartAndEnd(
            infoStart.textNode[0], infoStart.textOffset,
            infoEnd.textNode[0], infoEnd.textOffset
          );
          _currentTTS = range.toString(); //.text()
        } else {
          _currentTTS = undefined;
        }

        if (!_currentTTS || _currentTTS == "") {
          _currentTTS = undefined;
        } else {
          speakStart(_currentTTS);
        }
      }
    } else {
      self.resetTTS();
      self.resetEmbedded();
      self.resetBlankPage();

      var dur = _smilIterator.currentPar.audio.clipEnd - _smilIterator.currentPar.audio.clipBegin;
      if (dur <= 0 || clipBeginOffset > dur) {
        console.error("### MO XXX PAR OFFSET: " + clipBeginOffset + " / " + dur);
        clipBeginOffset = 0.0;
      } else {
        //console.debug("### MO PAR OFFSET: " + clipBeginOffset);
      }

      var audioContentRef = ResolveContentRef(_smilIterator.currentPar.audio.src, _smilIterator.smil.href);

      var audioSource = _package.resolveRelativeUrlMO(audioContentRef);

      var startTime = _smilIterator.currentPar.audio.clipBegin + clipBeginOffset;

      //console.debug("PLAY START TIME: " + startTime + "("+_smilIterator.currentPar.audio.clipBegin+" + "+clipBeginOffset+")");

      _audioPlayer.playFile(_smilIterator.currentPar.audio.src, audioSource, startTime); //_smilIterator.currentPar.element ? _smilIterator.currentPar.element : _smilIterator.currentPar.cfi.cfiTextParent
    }

    clipBeginOffset = 0.0;

    highlightCurrentElement();
  }

  function nextSmil(goNext) {
    self.pause();

    //console.debug("current Smil: " + _smilIterator.smil.href + " /// " + _smilIterator.smil.id);

    var nextSmil = goNext ? _package.media_overlay.getNextSmil(_smilIterator.smil) : _package.media_overlay.getPreviousSmil(_smilIterator.smil);
    if (nextSmil) {

      //console.debug("nextSmil: " + nextSmil.href + " /// " + nextSmil.id);

      _smilIterator = new SmilIterator(nextSmil);
      if (_smilIterator.currentPar) {
        if (!goNext) {
          while (!_smilIterator.isLast()) {
            _smilIterator.next();
          }
        }

        //console.debug("openContentUrl (nextSmil): " + _smilIterator.currentPar.text.src + " -- " + _smilIterator.smil.href);

        reader.openContentUrl(_smilIterator.currentPar.text.src, _smilIterator.smil.href, self);
      }
    } else {
      console.log("No more SMIL");
      self.reset();
    }
  }


  var _skipAudioEnded = false;
  //    var _skipTTSEnded = false;

  var audioCurrentTime = 0.0;

  var DIRECTION_MARK = -999;

  //    var _letPlay = false;

  //from
  //1 = audio player
  //2 = blank page
  //3 = video/audio embbeded
  //4 = TTS
  //5 = audio end
  //6 = user previous/next/escape
  function onAudioPositionChanged(position, from, skipping) { //noLetPlay

    audioCurrentTime = position;

    //        if (_letPlay)
    //        {
    //            return;
    //        }

    _skipAudioEnded = false;
    //        _skipTTSEnded = false;

    if (!_smilIterator || !_smilIterator.currentPar) {
      return;
    }

    var parFrom = _smilIterator.currentPar;

    var audio = _smilIterator.currentPar.audio;

    //var TOLERANCE = 0.05;
    if (
      //position >= (audio.clipBegin - TOLERANCE) &&
      position > DIRECTION_MARK &&
      position <= audio.clipEnd) {

      //console.debug("onAudioPositionChanged: " + position);
      return;
    }

    _skipAudioEnded = true;

    //console.debug("PLAY NEXT: " + "(" + audio.clipBegin + " -- " + audio.clipEnd + ") [" + from + "] " +  position);
    //console.debug(_smilIterator.currentPar.text.srcFragmentId);

    var isPlaying = _audioPlayer.isPlaying();
    if (isPlaying && from === 6) {
      console.debug("from userNav _audioPlayer.isPlaying() ???");
    }

    var goNext = position > audio.clipEnd;

    var doNotNextSmil = !_autoNextSmil && from !== 6 && goNext;

    var spineItemIdRef = (_smilIterator && _smilIterator.smil && _smilIterator.smil.spineItemId) ? _smilIterator.smil.spineItemId : ((_lastPaginationData && _lastPaginationData.spineItem && _lastPaginationData.spineItem.idref) ? _lastPaginationData.spineItem.idref : undefined);
    if (doNotNextSmil && spineItemIdRef && _lastPaginationData && _lastPaginationData.paginationInfo && _lastPaginationData.paginationInfo.openPages && _lastPaginationData.paginationInfo.openPages.length > 1) {
      //var iPage = _lastPaginationData.paginationInfo.isRightToLeft ? _lastPaginationData.paginationInfo.openPages.length - 1 : 0;
      var iPage = 0;

      var openPage = _lastPaginationData.paginationInfo.openPages[iPage];
      if (spineItemIdRef === openPage.idref) {
        doNotNextSmil = false;
      }
    }

    if (goNext) {
      _smilIterator.next();
    } else //position <= DIRECTION_MARK
    {
      _smilIterator.previous();
    }

    if (!_smilIterator.currentPar) {
      //
      //        if (!noLetPlay)
      //        {
      //            _letPlay = true;
      //            setTimeout(function()
      //            {
      //                _letPlay = false;
      //                nextSmil(goNext);
      //            }, 200);
      //        }
      //        else
      //        {
      //            nextSmil(goNext);
      //        }

      //console.debug("NEXT SMIL ON AUDIO POS");

      if (doNotNextSmil) {
        _wasPausedBecauseNoAutoNextSmil = true;
        self.reset();
        //self.pause();
      } else {
        nextSmil(goNext);
      }
      return;
    }

    //console.debug("ITER: " + _smilIterator.currentPar.text.srcFragmentId);

    if (!_smilIterator.currentPar.audio) {
      self.pause();
      return;
    }

    if (_settings.mediaOverlaysSkipSkippables) {
      var skip = false;
      var parent = _smilIterator.currentPar;
      while (parent) {
        if (parent.isSkippable && parent.isSkippable(_settings.mediaOverlaysSkippables)) {
          skip = true;
          break;
        }
        parent = parent.parent;
      }

      if (skip) {
        console.log("MO SKIP: " + parent.epubtype);

        self.pause();

        var pos = goNext ? _smilIterator.currentPar.audio.clipEnd + 0.1 : DIRECTION_MARK - 1;

        onAudioPositionChanged(pos, from, true); //noLetPlay
        return;
      }
    }

    // _settings.mediaOverlaysSynchronizationGranularity
    if (!isPlaying && (_smilIterator.currentPar.element || _smilIterator.currentPar.cfi && _smilIterator.currentPar.cfi.cfiTextParent)) {
      var scopeTo = _elementHighlighter.adjustParToSeqSyncGranularity(_smilIterator.currentPar);
      if (scopeTo && scopeTo !== _smilIterator.currentPar) {
        var scopeFrom = _elementHighlighter.adjustParToSeqSyncGranularity(parFrom);
        if (scopeFrom && (scopeFrom === scopeTo || !goNext)) {
          if (scopeFrom === scopeTo) {
            do {
              if (goNext) _smilIterator.next();
              else _smilIterator.previous();
            } while (_smilIterator.currentPar && _smilIterator.currentPar.hasAncestor(scopeFrom));

            if (!_smilIterator.currentPar) {
              //console.debug("adjustParToSeqSyncGranularity nextSmil(goNext)");

              if (doNotNextSmil) {
                _wasPausedBecauseNoAutoNextSmil = true;
                self.reset();
                //self.pause();
              } else {
                nextSmil(goNext);
              }

              return;
            }
          }

          //console.debug("ADJUSTED: " + _smilIterator.currentPar.text.srcFragmentId);
          if (!goNext) {
            var landed = _elementHighlighter.adjustParToSeqSyncGranularity(_smilIterator.currentPar);
            if (landed && landed !== _smilIterator.currentPar) {
              var backup = _smilIterator.currentPar;

              var innerPar = undefined;
              do {
                innerPar = _smilIterator.currentPar;
                _smilIterator.previous();
              }
              while (_smilIterator.currentPar && _smilIterator.currentPar.hasAncestor(landed));

              if (_smilIterator.currentPar) {
                _smilIterator.next();

                if (!_smilIterator.currentPar.hasAncestor(landed)) {
                  console.error("adjustParToSeqSyncGranularity !_smilIterator.currentPar.hasAncestor(landed) ???");
                }
                //assert 
              } else {
                //console.debug("adjustParToSeqSyncGranularity reached begin");

                _smilIterator.reset();

                if (_smilIterator.currentPar !== innerPar) {
                  console.error("adjustParToSeqSyncGranularity _smilIterator.currentPar !=== innerPar???");
                }
              }

              if (!_smilIterator.currentPar) {
                console.error("adjustParToSeqSyncGranularity !_smilIterator.currentPar ?????");
                _smilIterator.goToPar(backup);
              }

              //console.debug("ADJUSTED PREV: " + _smilIterator.currentPar.text.srcFragmentId);
            }
          }
        }
      }
    }

    if (_audioPlayer.isPlaying() && _smilIterator.currentPar.audio.src && _smilIterator.currentPar.audio.src == _audioPlayer.currentSmilSrc() && position >= _smilIterator.currentPar.audio.clipBegin && position <= _smilIterator.currentPar.audio.clipEnd) {
      //console.debug("ONLY highlightCurrentElement");
      highlightCurrentElement();
      return;
    }

    //position <= DIRECTION_MARK goes here (goto previous):

    //            if (!noLetPlay && position > DIRECTION_MARK
    //                && _audioPlayer.isPlaying() && _audioPlayer.srcRef() != _smilIterator.currentPar.audio.src)
    //            {
    //                _letPlay = true;
    //                setTimeout(function()
    //                {
    //                    _letPlay = false;
    //                    playCurrentPar();
    //                }, 100);
    //
    //                playCurrentPar();
    //
    //                return;
    //            }

    playCurrentPar();
  }

  this.touchInit = function() {
    var todo = _audioPlayer.touchInit();
    if (todo) {
      if (_enableHTMLSpeech) {
        speakStart("o", 0);
      }
    }
  };

  var tokeniseTTS = function(element) {
    var BLOCK_DELIMITERS = ['p', 'div', 'pagenum', 'td', 'table', 'li', 'ul', 'ol'];
    var BOUNDARY_PUNCTUATION = [',', ';', '.', '-', '??', '??', '?', '!'];
    var IGNORABLE_PUNCTUATION = ['"', '\'', '??', '??', '??', '??'];

    var flush = function(t, r) {
      if (t.word.length <= 0) {
        return;
      }

      var pos = t.text.length;
      r.spanMap[pos] = t.counter;
      t.text += t.word;
      t.markup += t.html.substring(0, t.wordStart) +
        '<span class="tts_off" id="tts_' + t.counter + '">' +
        t.html.substring(t.wordStart, t.wordEnd) +
        '</span>' + t.html.substring(t.wordEnd, t.html.length);
      t.word = "";
      t.html = "";
      t.wordStart = -1;
      t.wordEnd = -1;
      t.counter++;
    };

    var r = {
      element: element,
      innerHTML_tts: "",
      spanMap: {},
      text: "",
      lastCharIndex: undefined
    };
    r.element.innerHTML_original = element.innerHTML;

    var t = {
      inTag: false,
      counter: 0,
      wordStart: -1,
      wordEnd: -1,
      text: '',
      markup: '',
      word: '',
      html: ''
    };

    var limit = r.element.innerHTML_original.length;
    var i = 0;
    while (i <= limit) {
      if (t.inTag) {
        t.html += r.element.innerHTML_original[i];
        if (r.element.innerHTML_original[i] == ">") {
          t.inTag = false;
          // if it's a block element delimiter, flush
          var blockCheck = t.html.match(/<\/(.*?)>$/);
          if (blockCheck && BLOCK_DELIMITERS.indexOf(blockCheck[1]) > -1) {
            flush(t, r);
            t.text += ' ';
          }
        }
      } else {
        if (i == limit || r.element.innerHTML_original[i].match(/\s/)) {
          flush(t, r);

          // append the captured whitespace
          if (i < limit) {
            t.text += r.element.innerHTML_original[i];
            t.markup += r.element.innerHTML_original[i];
          }
        } else if (BOUNDARY_PUNCTUATION.indexOf(r.element.innerHTML_original[i]) > -1) {
          flush(t, r);

          t.wordStart = t.html.length;
          t.wordEnd = t.html.length + 1;
          t.word += r.element.innerHTML_original[i];
          t.html += r.element.innerHTML_original[i];

          flush(t, r);
        } else if (r.element.innerHTML_original[i] == "<") {
          t.inTag = true;
          t.html += r.element.innerHTML_original[i];
        } else {
          if (t.word.length == 0) {
            t.wordStart = t.html.length;
          }
          t.wordEnd = t.html.length + 1;
          t.word += r.element.innerHTML_original[i];
          t.html += r.element.innerHTML_original[i];
        }
      }
      i++;
    }
    //
    //console.debug(t.text);
    //        console.debug("----");
    //console.debug(t.markup);

    r.text = t.text;
    r.innerHTML_tts = t.markup;
    r.element.innerHTML = r.innerHTML_tts;

    return r;
  };

  var $ttsStyle = undefined;

  function ensureTTSStyle($element) {
    if ($ttsStyle && $ttsStyle[0].ownerDocument === $element[0].ownerDocument) {
      return;
    }

    var style = ".tts_on{background-color:red;color:white;} .tts_off{}";

    $head = $("head", $element[0].ownerDocument.documentElement);

    $ttsStyle = $("<style type='text/css'> </style>").appendTo($head);

    $ttsStyle.append(style);
  }

  var speakStart = function(txt, volume) {
    var tokenData = undefined;
    var curPar = (_smilIterator && _smilIterator.currentPar) ? _smilIterator.currentPar : undefined;
    var element = curPar ? curPar.element : undefined;
    var cfi = curPar ? curPar.cfi : undefined;

    if (!volume || volume > 0) {
      // gives the audio player some dispatcher time to raise the onPause event
      setTimeout(function() {
        onStatusChanged({
          isPlaying: true
        });
      }, 80);

      _ttsIsPlaying = true;

      if (TOKENIZE_TTS && element) {
        var $el = $(element);
        ensureTTSStyle($el);


        if (element.innerHTML_original) {
          element.innerHTML = element.innerHTML_original;
          element.innerHTML_original = undefined;
        }
        tokenData = tokeniseTTS(element);
      }
    }

    if (!_enableHTMLSpeech) {
      reader.trigger(Events.MEDIA_OVERLAY_TTS_SPEAK, {
        tts: txt
      }); // resume if txt == undefined
      return;
    }

    if (!txt && window.speechSynthesis.paused) {
      //console.debug("TTS resume");
      window.speechSynthesis.resume();

      return;
    }

    var text = txt || _currentTTS;

    if (text) {
      if (_SpeechSynthesisUtterance) {
        //console.debug("_SpeechSynthesisUtterance nullify");

        if (TOKENIZE_TTS) {
          if (_SpeechSynthesisUtterance.onend) {
            _SpeechSynthesisUtterance.onend({
              forceSkipEnd: true,
              target: _SpeechSynthesisUtterance
            });
          }

          _SpeechSynthesisUtterance.tokenData = undefined;

          _SpeechSynthesisUtterance.onboundary = undefined;
          //                 _SpeechSynthesisUtterance.onboundary = function(event)
          //                 {
          // console.debug("OLD TTS boundary");
          //                 
          //                         event.target.tokenData = undefined;
          //  
          //                 };
        }

        _SpeechSynthesisUtterance.onend = undefined;
        //                 _SpeechSynthesisUtterance.onend = function(event)
        //                 {
        // console.debug("OLD TTS ended");
        //                     if (TOKENIZE_TTS)
        //                     {
        //                         event.target.tokenData = undefined;
        //                     }
        //                 };

        _SpeechSynthesisUtterance.onerror = undefined;
        //                 _SpeechSynthesisUtterance.onerror = function(event)
        //                 {
        // console.debug("OLD TTS error");
        // //console.debug(event);
        //                     if (TOKENIZE_TTS)
        //                     {
        //                         event.target.tokenData = undefined;
        //                     }
        //                 };

        _SpeechSynthesisUtterance = undefined;
      }
      //
      //            if (window.speechSynthesis.pending ||
      //                window.speechSynthesis.speaking)
      //            {
      //                _skipTTSEndEvent = true;
      //            }

      console.debug("paused: " + window.speechSynthesis.paused);
      console.debug("speaking: " + window.speechSynthesis.speaking);
      console.debug("pending: " + window.speechSynthesis.pending);

      //             if (!window.speechSynthesis.paused)
      //             {
      // console.debug("TTS pause before speak");
      //                 window.speechSynthesis.pause();
      //             }

      function cancelTTS(first) {
        if (first || window.speechSynthesis.pending) {
          console.debug("TTS cancel before speak");
          window.speechSynthesis.cancel();

          setTimeout(function() {
            cancelTTS(false);
          }, 5);
        } else {
          updateTTS();
        }
      }
      cancelTTS(true);

      function updateTTS() {
        // setTimeout(function()
        // {

        _SpeechSynthesisUtterance = new SpeechSynthesisUtterance();

        if (TOKENIZE_TTS && tokenData) {
          _SpeechSynthesisUtterance.tokenData = tokenData;

          _SpeechSynthesisUtterance.onboundary = function(event)
            //_SpeechSynthesisUtterance.addEventListener("boundary", function(event)
            {
              if (!_SpeechSynthesisUtterance) {
                return;
              }

              console.debug("TTS boundary: " + event.name + " / " + event.charIndex);
              //console.debug(event);

              var tokenised = event.target.tokenData;
              if (!tokenised || !tokenised.spanMap.hasOwnProperty(event.charIndex)) {
                return;
              }

              if (false && tokenised.lastCharIndex) {
                //console.debug("TTS lastCharIndex: " + tokenised.lastCharIndex);
                var id = 'tts_' + tokenised.spanMap[tokenised.lastCharIndex];
                //console.debug("TTS lastCharIndex ID: " + id);
                var spanPrevious = tokenised.element.querySelector("#" + id);
                if (spanPrevious) {
                  //console.debug("TTS OFF");
                  spanPrevious.className = 'tts_off';
                  //spanPrevious.style.backgroundColor = "white";
                }
              } else {
                [].forEach.call(
                  tokenised.element.querySelectorAll(".tts_on"),
                  function(el) {
                    console.debug("TTS OFF " + el.id);
                    el.className = 'tts_off';
                  }
                );
              }

              var id = 'tts_' + tokenised.spanMap[event.charIndex];
              console.debug("TTS charIndex ID: " + id);
              var spanNew = tokenised.element.querySelector("#" + id);
              if (spanNew) {
                console.debug("TTS ON");
                spanNew.className = 'tts_on';
                //spanNew.style.backgroundColor = "transparent";
              }

              tokenised.lastCharIndex = event.charIndex;
            };
        }

        _SpeechSynthesisUtterance.onend = function(event)
          //_SpeechSynthesisUtterance.addEventListener("end", function(event)
          {
            if (!_SpeechSynthesisUtterance) {
              //_skipTTSEndEvent = false;
              return;
            }
            //
            //                if (_skipTTSEndEvent)
            //                {
            //                    _skipTTSEndEvent = false;
            //                    return;
            //                }

            console.debug("TTS ended");
            //console.debug(event);

            if (TOKENIZE_TTS) {
              var tokenised = event.target.tokenData;

              var doEnd = !event.forceSkipEnd && (_SpeechSynthesisUtterance === event.target) && (!tokenised || tokenised.element.innerHTML_original);

              if (tokenised) {
                if (tokenised.element.innerHTML_original) {
                  tokenised.element.innerHTML = tokenised.element.innerHTML_original;
                } else {
                  [].forEach.call(
                    tokenised.element.querySelectorAll(".tts_on"),
                    function(el) {
                      console.debug("TTS OFF (end)" + el.id);
                      el.className = 'tts_off';
                    }
                  );
                }

                tokenised.element.innerHTML_original = undefined;
              }


              if (doEnd) {
                self.onTTSEnd();
              } else {
                console.debug("TTS end SKIPPED");
              }
            } else {
              self.onTTSEnd();
            }
          };

        _SpeechSynthesisUtterance.onerror = function(event)
          //_SpeechSynthesisUtterance.addEventListener("error", function(event)
          {
            if (!_SpeechSynthesisUtterance) {
              return;
            }

            console.error("TTS error");
            //console.debug(event);
            console.debug(_SpeechSynthesisUtterance.text);
            console.debug(window.speechSynthesis.paused);
            console.debug(window.speechSynthesis.pending);
            console.debug(window.speechSynthesis.speaking);

            if (TOKENIZE_TTS) {
              var tokenised = event.target.tokenData;
              if (tokenised) {
                if (tokenised.element.innerHTML_original) {
                  tokenised.element.innerHTML = tokenised.element.innerHTML_original;
                } else {
                  [].forEach.call(
                    tokenised.element.ownerDocument.querySelectorAll(".tts_on"),
                    function(el) {
                      console.debug("TTS OFF (error)" + el.id);
                      el.className = 'tts_off';
                    }
                  );
                }
                tokenised.element.innerHTML_original = undefined;
              }
            }
          };

        var vol = volume || _audioPlayer.getVolume();
        _SpeechSynthesisUtterance.volume = vol;

        _SpeechSynthesisUtterance.rate = _audioPlayer.getRate();
        _SpeechSynthesisUtterance.pitch = 1;

        //_SpeechSynthesisUtterance.lang = "en-US";

        _SpeechSynthesisUtterance.text = text;

        //console.debug("TTS speak: " + text);
        window.speechSynthesis.speak(_SpeechSynthesisUtterance);

        if (window.speechSynthesis.paused) {
          console.debug("TTS resume");
          window.speechSynthesis.resume();
        }

        //}, 5);
      }
    }
  };

  var speakStop = function() {
    onStatusChanged({
      isPlaying: false
    });
    _ttsIsPlaying = false;

    if (!_enableHTMLSpeech) {
      reader.trigger(Events.MEDIA_OVERLAY_TTS_STOP, undefined);
      return;
    }

    //console.debug("TTS pause");
    window.speechSynthesis.pause();
  };

  var _timerTick = undefined;

  function onPlay() {
    onPause();

    var func = function() {

      if (!_smilIterator || !_smilIterator.currentPar) {
        return;
      }

      var smil = _smilIterator.smil; //currentPar.getSmil();
      if (!smil.mo) {
        return;
      }

      //            if (!_smilIterator.currentPar.audio.src)
      //            {
      //                return;
      //            }

      var playPosition = audioCurrentTime - _smilIterator.currentPar.audio.clipBegin;
      if (playPosition <= 0) {
        return;
      }

      var smilIndex = smil.mo.smil_models.indexOf(smil);

      var smilIterator = new SmilIterator(smil);
      var parIndex = -1;
      while (smilIterator.currentPar) {
        parIndex++;
        if (smilIterator.currentPar == _smilIterator.currentPar) {
          break;
        }
        smilIterator.next();
      }

      onStatusChanged({
        playPosition: playPosition,
        smilIndex: smilIndex,
        parIndex: parIndex
      });
    };

    setTimeout(func, 500);

    _timerTick = setInterval(func, 1500);
  }

  function onPause() {

    audioCurrentTime = 0.0;
    if (_timerTick !== undefined) {
      clearInterval(_timerTick);
    }
    _timerTick = undefined;
  }


  this.onEmbeddedEnd = function() {
    audioCurrentTime = 0.0;

    _embeddedIsPlaying = false;
    //_currentEmbedded = undefined;

    if (!_smilIterator || !_smilIterator.currentPar) {
      self.reset();
      return;
    }

    onAudioPositionChanged(_smilIterator.currentPar.audio.clipEnd + 0.1, 3);
  };

  this.onTTSEnd = function() {
    audioCurrentTime = 0.0;

    _ttsIsPlaying = false;
    //_currentTTS = undefined;

    //        if(_skipTTSEnded)
    //        {
    //            _skipTTSEnded = false;
    //            return;
    //        }

    if (!_smilIterator || !_smilIterator.currentPar) {
      self.reset();
      return;
    }

    onAudioPositionChanged(_smilIterator.currentPar.audio.clipEnd + 0.1, 4);
  };

  function onAudioEnded() {

    onPause();
    //
    //        if (_letPlay)
    //        {
    //            return;
    //        }

    if (_skipAudioEnded) {
      _skipAudioEnded = false;
      return;
    }

    if (!_smilIterator || !_smilIterator.currentPar) {
      self.reset();
      return;
    }

    onAudioPositionChanged(_smilIterator.currentPar.audio.clipEnd + 0.1, 5);
  }

  function highlightCurrentElement() {

    if (!_smilIterator) {
      return;
    }

    if (!_smilIterator.currentPar) {
      return;
    }

    if (_smilIterator.currentPar.text.srcFragmentId && _smilIterator.currentPar.text.srcFragmentId.length > 0) {
      if (_smilIterator.currentPar.element) {
        //console.error(_smilIterator.currentPar.element.id + ": " + _smilIterator.currentPar.audio.clipBegin + " / " + _smilIterator.currentPar.audio.clipEnd);

        if (!_elementHighlighter.isElementHighlighted(_smilIterator.currentPar)) {
          _elementHighlighter.highlightElement(_smilIterator.currentPar, _package.media_overlay.activeClass, _package.media_overlay.playbackActiveClass);

          if (!_wasPlayingScrolling) {
            reader.insureElementVisibility(_smilIterator.currentPar.getSmil().spineItemId, _smilIterator.currentPar.element, self);
          }
        }

        return;

      } else if (_smilIterator.currentPar.cfi) {

        if (!_elementHighlighter.isCfiHighlighted(_smilIterator.currentPar)) {
          _elementHighlighter.highlightCfi(_smilIterator.currentPar, _package.media_overlay.activeClass, _package.media_overlay.playbackActiveClass);

          if (!_wasPlayingScrolling) {
            reader.insureElementVisibility(_smilIterator.currentPar.getSmil().spineItemId, _smilIterator.currentPar.cfi.cfiTextParent, self);
          }
        }

        return;
      }
    }

    // body (not FRAG ID)
    if (_smilIterator.currentPar.element) {
      return;
    }

    //else: single SMIL per multiple XHTML? ==> open new spine item

    /*
        var textRelativeRef = ReadiumSDK.Helpers.ResolveContentRef(_smilIterator.currentPar.text.srcFile, _smilIterator.smil.href);
console.debug("textRelativeRef: " + textRelativeRef);
        if (textRelativeRef)
        {
            var textAbsoluteRef = _package.resolveRelativeUrl(textRelativeRef);
console.debug("textAbsoluteRef: " + textAbsoluteRef);
        }
        */

    var src = _smilIterator.currentPar.text.src;
    var base = _smilIterator.smil.href;

    //self.pause();
    //self.reset();
    _smilIterator = undefined;

    reader.openContentUrl(src, base, self);
  }

  this.escape = function() {

    if (!_smilIterator || !_smilIterator.currentPar) {

      this.toggleMediaOverlay();
      return;
    }

    if (!self.isPlaying()) {
      //playCurrentPar();
      self.play();
      return;
    }

    if (_settings.mediaOverlaysEscapeEscapables) {
      var parent = _smilIterator.currentPar;
      while (parent) {
        if (parent.isEscapable && parent.isEscapable(_settings.mediaOverlaysEscapables)) {
          do {
            _smilIterator.next();
          } while (_smilIterator.currentPar && _smilIterator.currentPar.hasAncestor(parent));

          if (!_smilIterator.currentPar) {
            nextSmil(true);
            return;
          }

          //_smilIterator.goToPar(_smilIterator.currentPar);
          playCurrentPar();
          return;
        }

        parent = parent.parent;
      }
    }

    this.nextMediaOverlay(true);
  };


  this.playUserPar = function(par) {
    if (self.isPlaying()) {
      self.pause();
    }

    if (par.element || par.cfi && par.cfi.cfiTextParent) {
      var seq = _elementHighlighter.adjustParToSeqSyncGranularity(par);
      if (seq && seq !== par) {
        var findFirstPar = function(smilNode) {
          if (smilNode.nodeType && smilNode.nodeType === "par") return smilNode;

          if (!smilNode.children || smilNode.children.length <= 0) return undefined;

          for (var i = 0; i < smilNode.children.length; i++) {
            var child = smilNode.children[i];
            var inPar = findFirstPar(child);
            if (inPar) return inPar;
          }
        };
        var firstPar = findFirstPar(seq);
        if (firstPar) par = firstPar;
      }
    }

    playPar(par);
  };

  this.resetTTS = function() {
    _currentTTS = undefined;
    //        _skipTTSEnded = false;
    speakStop();
  };

  this.resetBlankPage = function() {
    if (_blankPagePlayer) {
      var timer = _blankPagePlayer;
      _blankPagePlayer = undefined;
      clearTimeout(timer);
    }
    _blankPagePlayer = undefined;

    onStatusChanged({
      isPlaying: false
    });
  };

  this.resetEmbedded = function() {
    if (_currentEmbedded) {
      $(_currentEmbedded).off("ended", self.onEmbeddedEnd);
      _currentEmbedded.pause();
    }
    _currentEmbedded = undefined;
    onStatusChanged({
      isPlaying: false
    });
    _embeddedIsPlaying = false;
  };

  this.reset = function() {
    clipBeginOffset = 0.0;
    _audioPlayer.reset();
    self.resetTTS();
    self.resetEmbedded();
    self.resetBlankPage();
    _elementHighlighter.reset();
    _smilIterator = undefined;
    _skipAudioEnded = false;
  };

  this.play = function() {
    if (_smilIterator && _smilIterator.smil && !_smilIterator.smil.id) {
      initBlankPagePlayer();
      return;
    } else if (_currentEmbedded) {
      _embeddedIsPlaying = true;
      _currentEmbedded.play();
      onStatusChanged({
        isPlaying: true
      });
    } else if (_currentTTS) {
      speakStart(undefined);
    } else {
      if (!_audioPlayer.play()) {
        console.log("Audio player was dead, reactivating...");

        this.reset();
        this.toggleMediaOverlay();
        return;
      }
    }

    highlightCurrentElement();
  }

  this.pause = function() {
    _wasPlayingScrolling = false;

    if (_blankPagePlayer) {
      this.resetBlankPage();
    } else if (_embeddedIsPlaying) {
      _embeddedIsPlaying = false;
      if (_currentEmbedded) {
        _currentEmbedded.pause();
      }
      onStatusChanged({
        isPlaying: false
      });
    } else if (_ttsIsPlaying) {
      speakStop();
    } else {
      _audioPlayer.pause();
    }

    _elementHighlighter.reset();
  }

  this.isMediaOverlayAvailable = function() {

    //        console.debug("isMediaOverlayAvailable()");
    //
    //        var now1 = window.performance && window.performance.now ? window.performance.now() : Date.now();
    //
    //        if (console.time)
    //        {
    //            console.time("MO");
    //        }

    var visibleMediaElement = reader.getFirstVisibleMediaOverlayElement();

    //        if (console.timeEnd)
    //        {
    //            console.timeEnd("MO");
    //        }
    //
    //        var now2 = window.performance && window.performance.now ? window.performance.now() : Date.now();
    //
    //        console.debug(now2 - now1);

    return typeof visibleMediaElement !== "undefined";
  };

  this.nextOrPreviousMediaOverlay = function(previous) {
    if (self.isPlaying()) {
      self.pause();
    } else {
      if (_smilIterator && _smilIterator.currentPar) {
        //playCurrentPar();
        self.play();
        return;
      }
    }

    if (!_smilIterator) {
      this.toggleMediaOverlay();
      return;
    }

    var position = previous ? DIRECTION_MARK - 1 : _smilIterator.currentPar.audio.clipEnd + 0.1;

    onAudioPositionChanged(position, 6);
    // setTimeout(function(){
    //     
    // }, 1);

    //self.play();
    //playCurrentPar();
  };

  this.nextMediaOverlay = function() {
    this.nextOrPreviousMediaOverlay(false);
  };

  this.previousMediaOverlay = function() {
    this.nextOrPreviousMediaOverlay(true);
  };

  /*
  this.setMediaOverlaySkippables = function(items) {

  };

  this.setMediaOverlayEscapables = function(items) {

  };
  */

  this.mediaOverlaysOpenContentUrl = function(contentRefUrl, sourceFileHref, offset) {
    clipBeginOffset = offset;

    //self.pause();
    //self.reset();
    _smilIterator = undefined;

    reader.openContentUrl(contentRefUrl, sourceFileHref, self);

    /*
    if (_currentPagination && _currentPagination.isFixedLayout && _currentPagination.openPages && _currentPagination.openPages.length > 0)
    {
        var combinedPath = ReadiumSDK.Helpers.ResolveContentRef(contentRefUrl, sourceFileHref);

        var hashIndex = combinedPath.indexOf("#");
        var hrefPart;
        var elementId;
        if(hashIndex >= 0) {
            hrefPart = combinedPath.substr(0, hashIndex);
            elementId = combinedPath.substr(hashIndex + 1);
        }
        else {
            hrefPart = combinedPath;
            elementId = undefined;
        }

        var spineItem = reader.spine.getItemByHref(hrefPart);
        var spineItemIndex = _currentPagination.openPages[0].spineItemIndex;

        //var idref = _currentPagination.openPages[0].idref;
        //spineItem.idref === idref
        //var currentSpineItem = reader.spine.getItemById(idref);
        //currentSpineItem == spineItem
        if (spineItem.index === spineItemIndex)
        {
            self.onPageChanged({
                paginationInfo: _currentPagination,
                elementId: elementId,
                initiator: self
            });
        }
    }
    */
  };

  this.toggleMediaOverlay = function() {
    if (self.isPlaying()) {
      self.pause();
      return;
    }

    //if we have position to continue from (reset wasn't called)
    if (_smilIterator) {
      self.play();
      return;
    }

    this.toggleMediaOverlayRefresh(undefined);
  };

  var _wasPlayingScrolling = false;

  this.toggleMediaOverlayRefresh = function(paginationData) {
    //console.debug("moData SMIL: " + moData.par.getSmil().href + " // " + + moData.par.getSmil().id);

    var spineItems = reader.getLoadedSpineItems();

    //paginationData.isRightToLeft
    var rtl = reader.spine().isRightToLeft();

    //paginationData.spineItemCount
    //paginationData.openPages
    //{spineItemPageIndex: , spineItemPageCount: , idref: , spineItemIndex: }

    var playingPar = undefined;
    var wasPlaying = self.isPlaying();
    if (wasPlaying && _smilIterator) {
      var isScrollView = paginationData.initiator && paginationData.initiator instanceof ScrollView;
      if (isScrollView && _settings.mediaOverlaysPreservePlaybackWhenScroll) {
        _wasPlayingScrolling = true;
        return;
      }

      playingPar = _smilIterator.currentPar;
      self.pause();
    }

    _wasPlayingScrolling = false;

    //paginationData && paginationData.elementId
    //paginationData.initiator != self

    //_package.isFixedLayout()

    var element = (paginationData && paginationData.elementIdResolved) ? paginationData.elementIdResolved : undefined;

    var id = (paginationData && paginationData.elementId) ? paginationData.elementId : undefined;

    if (!element) {
      if (id) {
        console.error("[WARN] id did not resolve to element?");
      }

      for (var i = (rtl ? (spineItems.length - 1) : 0);
        (rtl && i >= 0) || (!rtl && i < spineItems.length); i += (rtl ? -1 : 1)) {
        var spineItem = spineItems[i];
        if (!spineItem) {
          console.error("spineItems[i] is undefined??");
          continue;
        }

        if (paginationData && paginationData.spineItem && paginationData.spineItem != spineItem) {
          continue;
        }

        if (id) {
          var $element = reader.getElementById(spineItem, id);
          //var $element = reader.getElement(spineItem, "#" + ReadiumSDK.Helpers.escapeJQuerySelector(id));
          element = ($element && $element.length > 0) ? $element[0] : undefined;
        } else if (spineItem.isFixedLayout()) {
          if (paginationData && paginationData.paginationInfo && paginationData.paginationInfo.openPages) {
            // openPages are sorted by spineItem index, so the smallest index on display is the one we need to play (page on the left in LTR, or page on the right in RTL progression)
            var index = 0; // !paginationData.paginationInfo.isRightToLeft ? 0 : paginationData.paginationInfo.openPages.length - 1;

            if (paginationData.paginationInfo.openPages[index] && paginationData.paginationInfo.openPages[index].idref && paginationData.paginationInfo.openPages[index].idref === spineItem.idref) {
              var $element = reader.getElement(spineItem, "body");
              element = ($element && $element.length > 0) ? $element[0] : undefined;
            }
          }
        }

        if (element) {
          break;
        }
      }
    }

    if (!element) {
      element = reader.getFirstVisibleMediaOverlayElement();
    }

    if (!element) {
      self.reset();
      return;
    }

    var moData = $(element).data("mediaOverlayData");

    if (!moData) {
      var foundMe = false;
      var depthFirstTraversal = function(elements) {
        if (!elements) {
          return false;
        }

        for (var i = 0; i < elements.length; i++) {
          if (element === elements[i]) foundMe = true;

          if (foundMe) {
            var d = $(elements[i]).data("mediaOverlayData");
            if (d) {
              moData = d;
              return true;
            }
          }

          var found = depthFirstTraversal(elements[i].children);
          if (found) {
            return true;
          }
        }

        return false;
      }

      var root = element;
      while (root && root.nodeName.toLowerCase() !== "body") {
        root = root.parentNode;
      }

      if (!root) {
        self.reset();
        return;
      }

      depthFirstTraversal([root]);
    }

    if (!moData) {
      self.reset();
      return;
    }

    var zPar = moData.par ? moData.par : moData.pars[0];
    var parSmil = zPar.getSmil();
    if (!_smilIterator || _smilIterator.smil != parSmil) {
      _smilIterator = new SmilIterator(parSmil);
    } else {
      _smilIterator.reset();
    }

    _smilIterator.goToPar(zPar);

    if (!_smilIterator.currentPar && id) {
      _smilIterator.reset();
      _smilIterator.findTextId(id);
    }

    if (!_smilIterator.currentPar) {
      self.reset();
      return;
    }

    if (wasPlaying && playingPar && playingPar === _smilIterator.currentPar) {
      self.play();
    } else {
      playCurrentPar();
      //playPar(zPar);
    }
  };

  this.isPlayingCfi = function() {
    return _smilIterator && _smilIterator.currentPar && _smilIterator.currentPar.cfi;
  };

  var _wasPausedBecauseNoAutoNextSmil = false;
  var _autoNextSmil = true;
  this.setAutomaticNextSmil = function(autoNext) {
    _autoNextSmil = autoNext;
  };
};

module.exports = MediaOverlayPlayer

},{"../events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/events.js","../helpers/resolve-content-ref":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/resolve-content-ref.js","../models/smil-iterator":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/smil-iterator.js","./audio-player":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/audio-player.js","./media-overlay-element-highlighter":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/media-overlay-element-highlighter.js","./scroll-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/scroll-view.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/one-page-view.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery');
var _ = require('underscore')
var Backbone = require('backbone')
var CfiNavigationLogic = require('./cfi-navigation-logic')
var CSSTransition = require('../helpers/css-transition')
var CSSTransformString = require('../helpers/css-transform-string')
var isIFrameAlive = require('../helpers/is-iframe-alive')
var loadTemplate = require('../helpers/load-template')
var setStyles = require('../helpers/set-styles')
var UpdateHtmlFontSize = require('../helpers/update-html-font-size')
var ViewerSettings = require('../models/viewer-settings')

/**
 * Renders one page of fixed layout spread
 *
 * @param options
 * @param classes
 * @param enableBookStyleOverrides
 * @constructor
 */
function OnePageView(options, classes, enableBookStyleOverrides, reader) {

  _.extend(this, Backbone.Events);

  var self = this;

  var _$epubHtml;
  var _$el;
  var _$iframe;
  var _currentSpineItem;
  var _spine = options.spine;
  var _iframeLoader = options.iframeLoader;
  var _bookStyles = options.bookStyles;

  var _$viewport = options.$viewport;

  var _isIframeLoaded = false;

  var _$scaler;

  var PageTransitionHandler = function(opts) {
    var PageTransition = function(begin, end) {
      this.begin = begin;
      this.end = end;
    };

    var _pageTransition_OPACITY = new PageTransition(
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "0");
      },
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("transform", "none");

        CSSTransition($el, "opacity 150ms ease-out");

        $el.css("opacity", "1");
      }
    );

    var _pageTransition_TRANSLATE = new PageTransition(
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "0");

        var elWidth = Math.ceil(meta_width * scale);

        var initialLeft = elWidth * 0.8 * (pageSwitchDir === 2 ? 1 : -1);
        var move = CSSTransformString({
          left: Math.round(initialLeft),
          origin: "50% 50% 0",
          enable3D: _enable3D
        });
        $el.css(move);
      },
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "1");

        CSSTransition($el, "transform 150ms ease-out");

        $el.css("transform", "none");
      }
    );

    var _pageTransition_ROTATE = new PageTransition(
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "0");

        var elWidth = Math.ceil(meta_width * scale);

        var initialLeft = elWidth * 1.7 * (pageSwitchDir === 2 ? 1 : -1);
        var trans = CSSTransformString({
          left: Math.round(initialLeft),
          angle: (pageSwitchDir === 2 ? -1 : 1) * 30,
          origin: "50% 50% 0",
          enable3D: _enable3D
        }); //(pageSwitchDir === 2 ? '0% 0%' : '100% 0%')
        $el.css(trans);
      },
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "1");

        CSSTransition($el, "transform 300ms ease-in-out");

        $el.css("transform", "none");
      }
    );

    var _pageTransition_SWING = new PageTransition(
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "0");

        // SUPER HACKY!! (just for demo)
        var isLeft = false;
        var isCenter = false;
        var isRight = false;
        for (var i = 0; i < classes.length; i++) {
          var c = classes[i].toLowerCase();
          if (c.indexOf("left") >= 0) {
            isLeft = true;
            break;
          }
          if (c.indexOf("right") >= 0) {
            isRight = true;
            break;
          }
          if (c.indexOf("center") >= 0) {
            isCenter = true;
            break;
          }
        }

        var elWidth = Math.ceil(meta_width * scale);

        var initialLeft = elWidth * 0.5 * ((isLeft || isCenter && pageSwitchDir === 1) ? 1 : -1);
        var trans = CSSTransformString({
          scale: 0.2,
          left: Math.round(initialLeft),
          angle: ((isLeft || isCenter && pageSwitchDir === 1) ? 1 : -1) * 30,
          origin: '50% 50% 0',
          enable3D: _enable3D
        });
        $el.css(trans);
      },
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "1");

        CSSTransition($el, "transform 400ms ease-out");

        $el.css("transform", "none");
      }
    );

    var _pageTransitions = [];
    _pageTransitions.push(_pageTransition_OPACITY); // 0
    _pageTransitions.push(_pageTransition_TRANSLATE); // 1
    _pageTransitions.push(_pageTransition_ROTATE); // 2
    _pageTransitions.push(_pageTransition_SWING); // 3

    var _disablePageTransitions = opts.disablePageTransitions || false;

    var _pageTransition = -1;

    var _enable3D = new ViewerSettings({}).enableGPUHardwareAccelerationCSS3D;

    var _viewerSettings = undefined;
    this.updateOptions = function(o) {
      _viewerSettings = o;

      var settings = _viewerSettings;
      if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
        //defaults
        settings = new ViewerSettings({});
      }
      if (settings.enableGPUHardwareAccelerationCSS3D) {
        _enable3D = true;
      }

      if (o.pageTransition !== null && typeof o.pageTransition !== "undefined") {
        _pageTransition = o.pageTransition;
      }
    };
    this.updateOptions(opts);

    var _pageSwitchDir = 0;
    var _pageSwitchActuallyChanged = false;
    var _pageSwitchActuallyChanged_IFRAME_LOAD = false;

    // dir: 0 => new or same page, 1 => previous, 2 => next
    this.updatePageSwitchDir = function(dir, hasChanged) {
      if (_pageSwitchActuallyChanged_IFRAME_LOAD) {
        return;
      }

      _pageSwitchDir = dir;
      _pageSwitchActuallyChanged = hasChanged;
    };

    this.onIFrameLoad = function() {
      _pageSwitchActuallyChanged_IFRAME_LOAD = true; // second pass, but initial display for transition
    };

    this.transformContentImmediate_BEGIN = function($el, scale, left, top) {
      var pageSwitchActuallyChanged = _pageSwitchActuallyChanged || _pageSwitchActuallyChanged_IFRAME_LOAD;
      _pageSwitchActuallyChanged_IFRAME_LOAD = false;

      if (_disablePageTransitions || _pageTransition === -1) return;

      CSSTransition($el, "all 0 ease 0");

      if (!pageSwitchActuallyChanged) return;

      var pageTransition = (_pageTransition >= 0 && _pageTransition < _pageTransitions.length) ? _pageTransitions[_pageTransition] : undefined;

      if (_pageSwitchDir === 0 || !pageTransition) {
        $el.css("opacity", "0");
      } else {
        pageTransition.begin(scale, left, top, $el, self.meta_width(), self.meta_height(), _pageSwitchDir);
      }
    };

    this.transformContentImmediate_END = function($el, scale, left, top) {
      if (_disablePageTransitions || _pageTransition === -1) {
        $el.css("transform", "none");
        return;
      }

      setTimeout(function() {
        var pageTransition = (_pageTransition >= 0 && _pageTransition < _pageTransitions.length) ? _pageTransitions[_pageTransition] : undefined;

        if (_pageSwitchDir === 0 || !pageTransition) {
          $el.css("transform", "none");

          CSSTransition($el, "opacity 250ms linear");

          $el.css("opacity", "1");
        } else {
          pageTransition.end(scale, left, top, $el, self.meta_width(), self.meta_height(), _pageSwitchDir);
        }

      }, 10);
    };
  };
  var _pageTransitionHandler = new PageTransitionHandler(options);


  // fixed layout does not apply user styles to publisher content, but reflowable scroll view does
  var _enableBookStyleOverrides = enableBookStyleOverrides || false;

  var _meta_size = {
    width: 0,
    height: 0
  };

  this.element = function() {
    return _$el;
  };

  this.meta_height = function() {
    return _meta_size.height;
  };

  this.meta_width = function() {
    return _meta_size.width;
  };

  this.isDisplaying = function() {

    return _isIframeLoaded;
  };

  this.render = function() {

    var template = loadTemplate("single_page_frame", {});

    _$el = $(template);

    _$scaler = $("#scaler", _$el);

    CSSTransition(_$el, "all 0 ease 0");

    _$el.css("transform", "none");

    var settings = reader.viewerSettings();
    if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
      //defaults
      settings = new ViewerSettings({});
    }
    if (settings.enableGPUHardwareAccelerationCSS3D) {

      // This fixes rendering issues with WebView (native apps), which crops content embedded in iframes unless GPU hardware acceleration is enabled for CSS rendering.
      _$el.css("transform", "translateZ(0)");
    }

    _$el.css("height", "100%");
    _$el.css("width", "100%");

    for (var i = 0, count = classes.length; i < count; i++) {
      _$el.addClass(classes[i]);
    }

    _$iframe = $("iframe", _$el);

    return this;
  };


  this.decorateIframe = function() {
    if (!_$iframe || !_$iframe.length) return;

    _$iframe.css("border-bottom", "1px dashed silver");
    _$iframe.css("border-top", "1px dashed silver");
  }

  this.remove = function() {
    _isIframeLoaded = false;
    _currentSpineItem = undefined;
    _$el.remove();
  };

  this.clear = function() {
    _isIframeLoaded = false;
    _$iframe[0].src = "";
  };

  this.currentSpineItem = function() {

    return _currentSpineItem;
  };

  function onIFrameLoad(success) {

    if (success) {
      _isIframeLoaded = true;
      var epubContentDocument = _$iframe[0].contentDocument;
      _$epubHtml = $("html", epubContentDocument);
      if (!_$epubHtml || _$epubHtml.length == 0) {
        _$epubHtml = $("svg", epubContentDocument);
      }

      //_$epubHtml.css("overflow", "hidden");

      if (_enableBookStyleOverrides) {
        self.applyBookStyles();
      }

      updateMetaSize();

      _pageTransitionHandler.onIFrameLoad();
    }
  }

  var _viewSettings = undefined;
  this.setViewSettings = function(settings) {

    _viewSettings = settings;

    if (_enableBookStyleOverrides) {
      self.applyBookStyles();
    }

    updateMetaSize();

    _pageTransitionHandler.updateOptions(settings);
  };

  function updateHtmlFontSize() {

    if (!_enableBookStyleOverrides) return;

    if (_$epubHtml && _viewSettings) {
      UpdateHtmlFontSize(_$epubHtml, _viewSettings.fontSize);
    }
  }

  this.applyBookStyles = function() {

    if (!_enableBookStyleOverrides) return;

    if (_$epubHtml) {
      setStyles(_bookStyles.getStyles(), _$epubHtml);
      updateHtmlFontSize();
    }
  };

  //this is called by scroll_view for fixed spine item
  this.scaleToWidth = function(width) {

    if (_meta_size.width <= 0) return; // resize event too early!

    var scale = width / _meta_size.width;
    self.transformContentImmediate(scale, 0, 0);
  };

  //this is called by scroll_view for reflowable spine item
  this.resizeIFrameToContent = function() {
    var contHeight = getContentDocHeight();
    //console.log("resizeIFrameToContent: " + contHeight);

    self.setHeight(contHeight);

    self.showIFrame();
  };

  this.setHeight = function(height) {

    _$scaler.css("height", height + "px");
    _$el.css("height", height + "px");

    //        _$iframe.css("height", height + "px");
  };

  var _useCSSTransformToHideIframe = true;

  this.showIFrame = function() {

    _$iframe.css("visibility", "visible");

    if (_useCSSTransformToHideIframe) {
      _$iframe.css("transform", "none");

      var enable3D = false;
      var settings = _viewSettings;
      if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
        //defaults
        settings = new ViewerSettings({});
      }
      if (settings.enableGPUHardwareAccelerationCSS3D) {
        enable3D = true;
        _$iframe.css("transform", "translateZ(0)");
      }
    } else {
      _$iframe.css({
        left: "0px",
        top: "0px"
      });
    }
  };

  this.hideIFrame = function() {

    _$iframe.css("visibility", "hidden");

    // With some books, despite the iframe and its containing div wrapper being hidden,
    // the iframe's contentWindow / contentDocument is still visible!
    // Thus why we translate the iframe out of view instead.

    if (_useCSSTransformToHideIframe) {
      var enable3D = false;
      var settings = _viewSettings;
      if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
        //defaults
        settings = new ViewerSettings({});
      }
      if (settings.enableGPUHardwareAccelerationCSS3D) {
        enable3D = true;
      }

      var css = CSSTransformString({
        left: "10000",
        top: "10000",
        enable3D: enable3D
      });
      _$iframe.css(css);
    } else {
      _$iframe.css({
        left: "10000px",
        top: "10000px"
      });
    }
  };

  function getContentDocHeight() {

    if (!_$iframe || !_$iframe.length) {
      return 0;
    }

    if (isIframeAlive(_$iframe[0])) {
      var win = _$iframe[0].contentWindow;
      var doc = _$iframe[0].contentDocument;

      var height = Math.round(parseFloat(win.getComputedStyle(doc.documentElement).height)); //body can be shorter!
      return height;
    } else if (_$epubHtml) {
      console.error("getContentDocHeight ??");

      var jqueryHeight = _$epubHtml.height();
      return jqueryHeight;
    }

    return 0;
  }

  // dir: 0 => new or same page, 1 => previous, 2 => next
  this.updatePageSwitchDir = function(dir, hasChanged) {
    _pageTransitionHandler.updatePageSwitchDir(dir, hasChanged);
  };


  this.transformContentImmediate = function(scale, left, top) {

    var elWidth = Math.ceil(_meta_size.width * scale);
    var elHeight = Math.floor(_meta_size.height * scale);

    _pageTransitionHandler.transformContentImmediate_BEGIN(_$el, scale, left, top);

    _$el.css("left", left + "px");
    _$el.css("top", top + "px");
    _$el.css("width", elWidth + "px");
    _$el.css("height", elHeight + "px");

    if (!_$epubHtml) {
      //            debugger;
      return;
    }

    var enable3D = false;
    var settings = _viewSettings;
    if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
      //defaults
      settings = new ViewerSettings({});
    }
    if (settings.enableGPUHardwareAccelerationCSS3D) {
      enable3D = true;
    }

    if (reader.needsFixedLayoutScalerWorkAround()) {
      var css1 = CSSTransformString({
        scale: scale,
        enable3D: enable3D
      });
      _$epubHtml.css(css1);

      var css2 = CSSTransformString({
        scale: 1,
        enable3D: enable3D
      });
      css2["width"] = _meta_size.width;
      css2["height"] = _meta_size.height;
      _$scaler.css(css2);
    } else {
      var css = CSSTransformString({
        scale: scale,
        enable3D: enable3D
      });
      css["width"] = _meta_size.width;
      css["height"] = _meta_size.height;
      _$scaler.css(css);
    }

    // Chrome workaround: otherwise text is sometimes invisible (probably a rendering glitch due to the 3D transform graphics backend?)
    //_$epubHtml.css("visibility", "hidden"); // "flashing" in two-page spread mode is annoying :(
    _$epubHtml.css("opacity", "0.999");

    self.showIFrame();

    setTimeout(function() {
      //_$epubHtml.css("visibility", "visible");
      _$epubHtml.css("opacity", "1");
    }, 0);

    _pageTransitionHandler.transformContentImmediate_END(_$el, scale, left, top);
  };

  this.getCalculatedPageHeight = function() {
    return _$el.height();
  };

  this.transformContent = _.bind(_.debounce(this.transformContentImmediate, 50), self);

  function updateMetaSize() {

    _meta_size.width = 0;
    _meta_size.height = 0;

    var size = undefined;

    var contentDocument = _$iframe[0].contentDocument;

    // first try to read viewport size
    var content = $('meta[name=viewport]', contentDocument).attr("content");

    // if not found try viewbox (used for SVG)
    if (!content) {
      content = $('meta[name=viewbox]', contentDocument).attr("content");
    }

    if (content) {
      size = parseMetaSize(content);
    }

    if (!size) {
      // TODO: the picked SVG element may be the root...may be deep inside the markup!
      var $svg = $(contentDocument).find('svg');
      //var $svg = $(contentDocument.documentElement);
      // contentDocument.documentElement.nodeName == "svg"
      if ($svg.length > 0) {

        var width = undefined;
        var height = undefined;

        var wAttr = $svg[0].getAttribute("width");
        if (wAttr) {
          try {
            width = parseInt(wAttr, 10);
          } catch (err) {}
        }
        var hAttr = $svg[0].getAttribute("height");
        if (hAttr) {
          try {
            height = parseInt(hAttr, 10);
          } catch (err) {}
        }

        if (width && height) {
          size = {
            width: width,
            height: height
          }
        } else {
          /// DISABLED (not a satisfactory fallback)
          // content = $svg.attr('viewBox');
          // if(content) {
          //     size = parseViewBoxSize(content);
          // }
          //
          // if (size) {
          //     console.warn("Viewport SVG: using viewbox!");
          // }
        }
      }
    }

    if (!size && _currentSpineItem) {
      content = _currentSpineItem.getRenditionViewport();

      if (content) {
        size = parseMetaSize(content);
        if (size) {
          console.log("Viewport: using rendition:viewport dimensions");
        }
      }
    }

    if (!size) {
      // Image fallback (auto-generated HTML template when WebView / iFrame is fed with image media type)
      var $img = $(contentDocument).find('img');
      if ($img.length > 0) {
        size = {
            width: $img.width(),
            height: $img.height()
          }
          // if (contentDocument && contentDocument.documentElement && contentDocument.documentElement.nodeName && contentDocument.documentElement.nodeName.toLowerCase() == "svg") {
          //     contentDocument.documentElement.setAttribute("width", size.width);
          //     contentDocument.documentElement.setAttribute("height", size.height);
          // }

        var isImage = _currentSpineItem && _currentSpineItem.media_type && _currentSpineItem.media_type.length && _currentSpineItem.media_type.indexOf("image/") == 0;
        if (!isImage) {
          console.warn("Viewport: using img dimensions!");
        }
      } else {
        $img = $(contentDocument).find('image');
        if ($img.length > 0) {
          var width = undefined;
          var height = undefined;

          var wAttr = $img[0].getAttribute("width");
          if (wAttr) {
            try {
              width = parseInt(wAttr, 10);
            } catch (err) {}
          }
          var hAttr = $img[0].getAttribute("height");
          if (hAttr) {
            try {
              height = parseInt(hAttr, 10);
            } catch (err) {}
          }

          if (width && height) {
            size = {
              width: width,
              height: height
            }

            // if (contentDocument && contentDocument.documentElement && contentDocument.documentElement.nodeName && contentDocument.documentElement.nodeName.toLowerCase() == "svg") {
            //     contentDocument.documentElement.setAttribute("width", size.width);
            //     contentDocument.documentElement.setAttribute("height", size.height);
            // }

            console.warn("Viewport: using image dimensions!");
          }
        }
      }
    }

    if (!size) {
      // Not a great fallback, as it has the aspect ratio of the full window, but it is better than no display at all.
      width = _$viewport.width();
      height = _$viewport.height();
      size = {
        width: width,
        height: height
      }

      console.warn("Viewport: using browser / e-reader viewport dimensions!");
    }

    if (size) {
      _meta_size.width = size.width;
      _meta_size.height = size.height;
    }
  }

  //expected callback signature: function(success, $iframe, spineItem, isNewlyLoaded, context)
  this.loadSpineItem = function(spineItem, callback, context) {

    if (_currentSpineItem != spineItem) {

      _currentSpineItem = spineItem;
      var src = _spine.package.resolveRelativeUrl(spineItem.href);

      //if (spineItem && spineItem.isFixedLayout())
      if (true) // both fixed layout and reflowable documents need hiding due to flashing during layout/rendering
      {
        //hide iframe until content is scaled
        self.hideIFrame();
      }

      self.trigger(OnePageView.SPINE_ITEM_OPEN_START, _$iframe, _currentSpineItem);
      _iframeLoader.loadIframe(_$iframe[0], src, function(success) {

        if (success && callback) {
          var func = function() {
            callback(success, _$iframe, _currentSpineItem, true, context);
          };

          if (isIFrameAlive(_$iframe[0])) {
            onIFrameLoad(success); // applies styles

            func();
          } else {
            console.error("onIFrameLoad !! doc && win + TIMEOUT");
            console.debug(spineItem.href);

            onIFrameLoad(success);

            setTimeout(func, 500);
          }
        } else {
          onIFrameLoad(success);
        }

      }, self, {
        spineItem: _currentSpineItem
      });
    } else {
      if (callback) {
        callback(true, _$iframe, _currentSpineItem, false, context);
      }
    }
  };
  //
  // function parseViewBoxSize(viewBoxString) {
  //
  //     var parts = viewBoxString.split(' ');
  //
  //     if(parts.length < 4) {
  //         console.warn(viewBoxString + " value is not valid viewBox size")
  //         return undefined;
  //     }
  //
  //     var width = parseInt(parts[2]);
  //     var height = parseInt(parts[3]);
  //
  //     if(!isNaN(width) && !isNaN(height)) {
  //         return { width: width, height: height} ;
  //     }
  //
  //     return undefined;
  // }

  function parseMetaSize(content) {

    var pairs = content.replace(/\s/g, '').split(",");

    var dict = {};

    for (var i = 0; i < pairs.length; i++) {
      var nameVal = pairs[i].split("=");
      if (nameVal.length == 2) {

        dict[nameVal[0]] = nameVal[1];
      }
    }

    var width = Number.NaN;
    var height = Number.NaN;

    if (dict["width"]) {
      width = parseInt(dict["width"]);
    }

    if (dict["height"]) {
      height = parseInt(dict["height"]);
    }

    if (!isNaN(width) && !isNaN(height)) {
      return {
        width: width,
        height: height
      };
    }

    return undefined;
  }

  this.getFirstVisibleElementCfi = function() {

    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getFirstVisibleElementCfi(0);

  };

  this.getNavigator = function() {

    return new CfiNavigationLogic(_$el, _$iframe);
  };

  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getElementByCfi(cfi, classBlacklist, elementBlacklist, idBlacklist);
  };

  this.getElementById = function(spineItem, id) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getElementById(id);
  };

  this.getElement = function(spineItem, selector) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getElement(selector);
  };

  this.getFirstVisibleMediaOverlayElement = function() {
    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getFirstVisibleMediaOverlayElement({
      top: 0,
      bottom: _$iframe.height()
    });
  };

  this.offset = function() {
    if (_$iframe) {
      return _$iframe.offset();
    }
    return undefined;
  }
}

OnePageView.SPINE_ITEM_OPEN_START = "SpineItemOpenStart";

module.exports = OnePageView

},{"../helpers/css-transform-string":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/css-transform-string.js","../helpers/css-transition":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/css-transition.js","../helpers/is-iframe-alive":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/is-iframe-alive.js","../helpers/load-template":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/load-template.js","../helpers/set-styles":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/set-styles.js","../helpers/update-html-font-size":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/update-html-font-size.js","../models/viewer-settings":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/viewer-settings.js","./cfi-navigation-logic":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/cfi-navigation-logic.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/reader-view.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * Options passed on the reader from the readium loader/initializer
 *
 * @typedef {object} ReadiumSDK.Views.ReaderView.ReaderOptions
 * @property {jQueryElement|string} el   The element the reader view should create itself in. Can be a jquery wrapped element or a query selector.
 * @property {ReadiumSDK.Views.IFrameLoader} iframeLoader   An instance of an iframe loader or one expanding it.
 * @property {boolean} needsFixedLayoutScalerWorkAround
 */

var _ = require('underscore')
var $ = require('jquery')
var AnnotationsManager = require('./annotations-manager')
var Backbone = require('backbone')
var Events = require('../events')
var extendedThrottle = require('../helpers/extended-throttle')
var FixedView = require('./fixed-view')
var IFrameLoader = require('./iframe-loader')
var InternalEvents = require('../internal-events')
var InternalLinksSupport = require('./internal-links-support')
var isIframeAlive = require('../helpers/is-iframe-alive')
var MediaOverlayDataInjector = require('./media-overlay-data-injector')
var MediaOverlayPlayer = require('./media-overlay-player')
var Package = require('../models/package')
var PageOpenRequest = require('../models/page-open-request')
var ReflowableView = require('./reflowable-view')
var ResolveContentRef = require('../helpers/resolve-content-ref')
var ScrollView = require('./scroll-view')
var setStyles = require('../helpers/set-styles')
var StyleCollection = require('../collections/style')
var Switches = require('../models/switches')
var Trigger = require('../models/trigger')
var ViewerSettings = require('../models/viewer-settings')

/**
 * View Type
 * @typedef {object} ReadiumSDK.Views.ReaderView.ViewType
 * @property {number} VIEW_TYPE_COLUMNIZED          Reflowable document view
 * @property {number} VIEW_TYPE_FIXED               Fixed layout document view
 * @property {number} VIEW_TYPE_SCROLLED_DOC        Scrollable document view
 * @property {number} VIEW_TYPE_SCROLLED_CONTINUOUS Continuous scrollable document view
 */
var VIEW_TYPE_COLUMNIZED = 1;
var VIEW_TYPE_FIXED = 2;
var VIEW_TYPE_SCROLLED_DOC = 3;
var VIEW_TYPE_SCROLLED_CONTINUOUS = 4;


/**
 * Top level View object. Interface for view manipulation public APIs
 * @param {ReadiumSDK.Views.ReaderView.ReaderOptions} options
 * @constructor
 */
function ReaderView(options) {

  _.extend(this, Backbone.Events);

  var self = this;
  var _currentView = undefined;
  var _package = undefined;
  var _spine = undefined;
  var _viewerSettings = new ViewerSettings({});
  //styles applied to the container divs
  var _userStyles = new StyleCollection();
  //styles applied to the content documents
  var _bookStyles = new StyleCollection();
  var _internalLinksSupport = new InternalLinksSupport(this);
  var _mediaOverlayPlayer;
  var _mediaOverlayDataInjector;
  var _iframeLoader;
  var _$el;
  var _annotationsManager = new AnnotationsManager(self, options);

  //We will call onViewportResize after user stopped resizing window
  var lazyResize = extendedThrottle(
    handleViewportResizeStart,
    handleViewportResizeTick,
    handleViewportResizeEnd, 250, 1000, self);

  $(window).on("resize.ReadiumSDK.readerView", lazyResize);

  if (options.el instanceof $) {
    _$el = options.el;
    console.log("** EL is a jQuery selector:" + options.el.attr('id'));
  } else {
    _$el = $(options.el);
    console.log("** EL is a string:" + _$el.attr('id'));
  }

  if (options.iframeLoader) {
    _iframeLoader = options.iframeLoader;
  } else {
    _iframeLoader = new IFrameLoader({
      mathJaxUrl: options.mathJaxUrl
    });
  }


  _needsFixedLayoutScalerWorkAround = options.needsFixedLayoutScalerWorkAround;
  /**
   * @returns {boolean}
   */
  this.needsFixedLayoutScalerWorkAround = function() {
    return _needsFixedLayoutScalerWorkAround;
  }

  /**
   * Create a view based on the given view type.
   * @param {ReadiumSDK.Views.ReaderView.ViewType} viewType
   * @param {ReadiumSDK.Views.ReaderView.ViewCreationOptions} options
   * @returns {*}
   */
  this.createViewForType = function(viewType, options) {
    var createdView;

    // NOTE: _$el == options.$viewport
    _$el.css("overflow", "hidden");

    switch (viewType) {
      case VIEW_TYPE_FIXED:

        _$el.css("overflow", "auto"); // for content pan, see self.setZoom()

        createdView = new FixedView(options, self);
        break;
      case VIEW_TYPE_SCROLLED_DOC:
        createdView = new ScrollView(options, false, self);
        break;
      case VIEW_TYPE_SCROLLED_CONTINUOUS:
        createdView = new ScrollView(options, true, self);
        break;
      default:
        createdView = new ReflowableView(options, self);
        break;
    }

    return createdView;
  };

  /**
   * Returns the current view type of the reader view
   * @returns {ReaderView.ViewType}
   */
  this.getCurrentViewType = function() {

    if (!_currentView) {
      return undefined;
    }

    if (_currentView instanceof ReflowableView) {
      return VIEW_TYPE_COLUMNIZED;
    }

    if (_currentView instanceof FixedView) {
      return VIEW_TYPE_FIXED;
    }

    if (_currentView instanceof ScrollView) {
      if (_currentView.isContinuousScroll()) {
        return VIEW_TYPE_SCROLLED_CONTINUOUS;
      }

      return VIEW_TYPE_SCROLLED_DOC;
    }

    console.error("Unrecognized view type");
    return undefined;
  };

  //based on https://docs.google.com/spreadsheet/ccc?key=0AoPMUkQhc4wcdDI0anFvWm96N0xRT184ZE96MXFRdFE&usp=drive_web#gid=0 document
  function deduceDesiredViewType(spineItem) {

    //check settings
    if (_viewerSettings.scroll == "scroll-doc") {
      return VIEW_TYPE_SCROLLED_DOC;
    }

    if (_viewerSettings.scroll == "scroll-continuous") {
      return VIEW_TYPE_SCROLLED_CONTINUOUS;
    }

    //is fixed layout ignore flow
    if (spineItem.isFixedLayout()) {
      return VIEW_TYPE_FIXED;
    }

    //flow
    if (spineItem.isFlowScrolledDoc()) {
      return VIEW_TYPE_SCROLLED_DOC;
    }

    if (spineItem.isFlowScrolledContinuous()) {
      return VIEW_TYPE_SCROLLED_CONTINUOUS;
    }

    return VIEW_TYPE_COLUMNIZED;
  }

  // returns true is view changed
  function initViewForItem(spineItem, callback) {

    var desiredViewType = deduceDesiredViewType(spineItem);

    if (_currentView) {

      if (self.getCurrentViewType() == desiredViewType) {
        callback(false);
        return;
      }

      resetCurrentView();
    }

    /**
     * View creation options
     * @typedef {object} ReadiumSDK.Views.ReaderView.ViewCreationOptions
     * @property {jQueryElement} $viewport  The view port element the reader view has created.
     * @property {Models.Spine} spine The spine item collection object
     * @property {ReadiumSDK.Collections.StyleCollection} userStyles User styles
     * @property {ReadiumSDK.Collections.StyleCollection} bookStyles Book styles
     * @property {ReadiumSDK.Views.IFrameLoader} iframeLoader   An instance of an iframe loader or one expanding it.
     */
    var viewCreationParams = {
      $viewport: _$el,
      spine: _spine,
      userStyles: _userStyles,
      bookStyles: _bookStyles,
      iframeLoader: _iframeLoader
    };


    _currentView = self.createViewForType(desiredViewType, viewCreationParams);
    self.trigger(Events.READER_VIEW_CREATED, desiredViewType);

    _currentView.on(Events.CONTENT_DOCUMENT_LOADED, function($iframe, spineItem) {

      if (!isIframeAlive($iframe[0])) return;

      // performance degrades with large DOM (e.g. word-level text-audio sync)
      _mediaOverlayDataInjector.attachMediaOverlayData($iframe, spineItem, _viewerSettings);

      _internalLinksSupport.processLinkElements($iframe, spineItem);
      _annotationsManager.attachAnnotations($iframe, spineItem);

      var contentDoc = $iframe[0].contentDocument;
      Trigger.register(contentDoc);
      Switches.apply(contentDoc);

      self.trigger(Events.CONTENT_DOCUMENT_LOADED, $iframe, spineItem);
    });

    _currentView.on(Events.CONTENT_DOCUMENT_LOAD_START, function($iframe, spineItem) {
      self.trigger(Events.CONTENT_DOCUMENT_LOAD_START, $iframe, spineItem);
    });

    _currentView.on(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED, function(pageChangeData) {

      //we call on onPageChanged explicitly instead of subscribing to the ReadiumSDK.Events.PAGINATION_CHANGED by
      //mediaOverlayPlayer because we hve to guarantee that mediaOverlayPlayer will be updated before the host
      //application will be notified by the same ReadiumSDK.Events.PAGINATION_CHANGED event
      _mediaOverlayPlayer.onPageChanged(pageChangeData);

      self.trigger(Events.PAGINATION_CHANGED, pageChangeData);
    });

    _currentView.on(Events.FXL_VIEW_RESIZED, function() {
      self.trigger(Events.FXL_VIEW_RESIZED);
    })

    _currentView.render();
    _currentView.setViewSettings(_viewerSettings);

    // we do this to wait until elements are rendered otherwise book is not able to determine view size.
    setTimeout(function() {

      callback(true);

    }, 50);

  }

  /**
   * Returns a list of the currently active spine items
   *
   * @returns {Models.SpineItem[]}
   */
  this.getLoadedSpineItems = function() {

    if (_currentView) {
      return _currentView.getLoadedSpineItems();
    }

    return [];
  };

  function resetCurrentView() {

    if (!_currentView) {
      return;
    }

    self.trigger(Events.READER_VIEW_DESTROYED);

    _currentView.off(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED);
    _currentView.remove();
    _currentView = undefined;
  }

  /**
   * Returns the currently instanced viewer settings
   *
   * @returns {Models.ViewerSettings}
   */
  this.viewerSettings = function() {
    return _viewerSettings;
  };

  /**
   * Returns a data object based on the package document
   *
   * @returns {Models.Package}
   */
  this.package = function() {
    return _package;
  };

  /**
   * Returns a representation of the spine as a data object, also acts as list of spine items
   *
   * @returns {Models.Spine}
   */
  this.spine = function() {
    return _spine;
  };

  /**
   * Returns the user CSS styles collection
   *
   * @returns {ReadiumSDK.Collections.StyleCollection}
   */
  this.userStyles = function() {
    return _userStyles;
  };

  /**
   * Open Book Data
   *
   * @typedef {object} ReadiumSDK.Views.ReaderView.OpenBookData
   * @property {Models.Package} package - packageData (required)
   * @property {Models.PageOpenRequest} openPageRequest - openPageRequestData, (optional) data related to open page request
   * @property {ReadiumSDK.Views.ReaderView.SettingsData} [settings]
   * @property {ReadiumSDK.Collections.StyleCollection} styles: [cssStyles]
   * @todo Define missing types
   */

  /**
   * Triggers the process of opening the book and requesting resources specified in the packageData
   *
   * @param {ReadiumSDK.Views.ReaderView.OpenBookData} openBookData - object with open book data
   */
  this.openBook = function(openBookData) {

    var packageData = openBookData.package ? openBookData.package : openBookData;

    _package = new Package(packageData);

    _spine = _package.spine;
    _spine.handleLinear(true);

    if (_mediaOverlayPlayer) {
      _mediaOverlayPlayer.reset();
    }

    _mediaOverlayPlayer = new MediaOverlayPlayer(self, $.proxy(onMediaPlayerStatusChanged, self));
    _mediaOverlayPlayer.setAutomaticNextSmil(_viewerSettings.mediaOverlaysAutomaticPageTurn ? true : false); // just to ensure the internal var is set to the default settings (user settings are applied below at self.updateSettings(openBookData.settings);)

    _mediaOverlayDataInjector = new MediaOverlayDataInjector(_package.media_overlay, _mediaOverlayPlayer);


    resetCurrentView();

    if (openBookData.settings) {
      self.updateSettings(openBookData.settings);
    }

    if (openBookData.styles) {
      self.setStyles(openBookData.styles);
    }

    var pageRequestData = undefined;

    if (openBookData.openPageRequest) {

      if (openBookData.openPageRequest.idref || (openBookData.openPageRequest.contentRefUrl && openBookData.openPageRequest.sourceFileHref)) {
        pageRequestData = openBookData.openPageRequest;
      } else {
        console.log("Invalid page request data: idref required!");
      }
    }

    var fallback = false;
    if (pageRequestData) {

      pageRequestData = openBookData.openPageRequest;

      try {
        if (pageRequestData.idref) {

          if (pageRequestData.spineItemPageIndex) {
            fallback = !self.openSpineItemPage(pageRequestData.idref, pageRequestData.spineItemPageIndex, self);
          } else if (pageRequestData.elementCfi) {
            fallback = !self.openSpineItemElementCfi(pageRequestData.idref, pageRequestData.elementCfi, self);
          } else {
            fallback = !self.openSpineItemPage(pageRequestData.idref, 0, self);
          }
        } else {
          fallback = !self.openContentUrl(pageRequestData.contentRefUrl, pageRequestData.sourceFileHref, self);
        }
      } catch (err) {
        console.error("openPageRequest fail: fallback to first page!")
        console.log(err);
        fallback = true;
      }
    } else {
      fallback = true;
    }

    if (fallback) { // if we where not asked to open specific page we will open the first one

      var spineItem = _spine.first();
      if (spineItem) {
        var pageOpenRequest = new PageOpenRequest(spineItem, self);
        pageOpenRequest.setFirstPage();
        openPage(pageOpenRequest, 0);
      }

    }

  };

  function onMediaPlayerStatusChanged(status) {
    self.trigger(Events.MEDIA_OVERLAY_STATUS_CHANGED, status);
  }

  /**
   * Flips the page from left to right.
   * Takes to account the page progression direction to decide to flip to prev or next page.
   */
  this.openPageLeft = function() {

    if (_package.spine.isLeftToRight()) {
      self.openPagePrev();
    } else {
      self.openPageNext();
    }
  };

  /**
   * Flips the page from right to left.
   * Takes to account the page progression direction to decide to flip to prev or next page.
   */
  this.openPageRight = function() {

    if (_package.spine.isLeftToRight()) {
      self.openPageNext();
    } else {
      self.openPagePrev();
    }

  };

  /**
   * Returns if the current child view is an instance of a fixed page view
   *
   * @returns {boolean}
   */
  this.isCurrentViewFixedLayout = function() {
    return _currentView instanceof FixedView;
  };

  /**
   * Zoom options
   *
   * @typedef {object} ReadiumSDK.Views.ReaderView.ZoomOptions
   * @property {string} style - "user"|"fit-screen"|"fit-width"
   * @property {number} scale - 0.0 to 1.0
   */

  /**
   * Set the zoom options.
   *
   * @param {ReadiumSDK.Views.ReaderView.ZoomOptions} zoom Zoom options
   */
  this.setZoom = function(zoom) {
    // zoom only handled by fixed layout views 
    if (self.isCurrentViewFixedLayout()) {
      _currentView.setZoom(zoom);
    }
  };

  /**
   * Returns the current view scale as a percentage
   *
   * @returns {number}
   */
  this.getViewScale = function() {
    if (self.isCurrentViewFixedLayout()) {
      return 100 * _currentView.getViewScale();
    } else {
      return 100;
    }
  };

  /**
   * Settings Data
   *
   * @typedef {object} ReadiumSDK.Views.ReaderView.SettingsData
   * @property {number} fontSize - Font size as percentage
   * @property {(string|boolean)} syntheticSpread - "auto"|true|false
   * @property {(string|boolean)} scroll - "auto"|true|false
   * @property {boolean} doNotUpdateView - Indicates whether the view should be updated after the settings are applied
   * @property {boolean} mediaOverlaysEnableClick - Indicates whether media overlays are interactive on mouse clicks
   */

  /**
   * Updates reader view based on the settings specified in settingsData object
   *
   * @param {ReadiumSDK.Views.ReaderView.SettingsData} settingsData Settings data
   * @fires ReadiumSDK.Events.SETTINGS_APPLIED
   */
  this.updateSettings = function(settingsData) {

    //console.debug("UpdateSettings: " + JSON.stringify(settingsData));

    _viewerSettings.update(settingsData);

    if (_mediaOverlayPlayer) {
      _mediaOverlayPlayer.setAutomaticNextSmil(_viewerSettings.mediaOverlaysAutomaticPageTurn ? true : false);
    }

    if (_currentView && !settingsData.doNotUpdateView) {

      var bookMark = _currentView.bookmarkCurrentPage();

      if (bookMark && bookMark.idref) {

        var wasPlaying = false;
        if (_currentView.isReflowable && _currentView.isReflowable()) {
          wasPlaying = self.isPlayingMediaOverlay();
          if (wasPlaying) {
            self.pauseMediaOverlay();
          }
        }

        var spineItem = _spine.getItemById(bookMark.idref);

        initViewForItem(spineItem, function(isViewChanged) {

          if (!isViewChanged) {
            _currentView.setViewSettings(_viewerSettings);
          }

          self.openSpineItemElementCfi(bookMark.idref, bookMark.contentCFI, self);

          if (wasPlaying) {
            self.playMediaOverlay();
            // setTimeout(function()
            // {
            // }, 60);
          }

          self.trigger(Events.SETTINGS_APPLIED);
          return;
        });
      }
    }

    self.trigger(Events.SETTINGS_APPLIED);
  };

  /**
   * Opens the next page.
   */
  this.openPageNext = function() {

    if (self.getCurrentViewType() === VIEW_TYPE_SCROLLED_CONTINUOUS) {
      _currentView.openPageNext(self);
      return;
    }

    var paginationInfo = _currentView.getPaginationInfo();

    if (paginationInfo.openPages.length == 0) {
      return;
    }

    var lastOpenPage = paginationInfo.openPages[paginationInfo.openPages.length - 1];

    if (lastOpenPage.spineItemPageIndex < lastOpenPage.spineItemPageCount - 1) {
      _currentView.openPageNext(self);
      return;
    }

    var currentSpineItem = _spine.getItemById(lastOpenPage.idref);

    var nextSpineItem = _spine.nextItem(currentSpineItem);

    if (!nextSpineItem) {
      return;
    }

    var openPageRequest = new PageOpenRequest(nextSpineItem, self);
    openPageRequest.setFirstPage();

    openPage(openPageRequest, 2);
  };

  /**
   * Opens the previous page.
   */
  this.openPagePrev = function() {

    if (self.getCurrentViewType() === VIEW_TYPE_SCROLLED_CONTINUOUS) {
      _currentView.openPagePrev(self);
      return;
    }

    var paginationInfo = _currentView.getPaginationInfo();

    if (paginationInfo.openPages.length == 0) {
      return;
    }

    var firstOpenPage = paginationInfo.openPages[0];

    if (firstOpenPage.spineItemPageIndex > 0) {
      _currentView.openPagePrev(self);
      return;
    }

    var currentSpineItem = _spine.getItemById(firstOpenPage.idref);

    var prevSpineItem = _spine.prevItem(currentSpineItem);

    if (!prevSpineItem) {
      return;
    }

    var openPageRequest = new PageOpenRequest(prevSpineItem, self);
    openPageRequest.setLastPage();

    openPage(openPageRequest, 1);
  };

  function getSpineItem(idref) {

    if (!idref) {

      console.log("idref parameter value missing!");
      return undefined;
    }

    var spineItem = _spine.getItemById(idref);
    if (!spineItem) {
      console.log("Spine item with id " + idref + " not found!");
      return undefined;
    }

    return spineItem;

  }

  /**
   * Opens the page of the spine item with element with provided cfi
   *
   * @param {string} idref Id of the spine item
   * @param {string} elementCfi CFI of the element to be shown
   * @param {object} initiator optional
   */
  this.openSpineItemElementCfi = function(idref, elementCfi, initiator) {

    var spineItem = getSpineItem(idref);

    if (!spineItem) {
      return false;
    }

    var pageData = new PageOpenRequest(spineItem, initiator);
    if (elementCfi) {
      pageData.setElementCfi(elementCfi);
    }

    openPage(pageData, 0);

    return true;
  };

  /**
   * Opens specified page index of the current spine item
   *
   * @param {number} pageIndex Zero based index of the page in the current spine item
   * @param {object} initiator optional
   */
  this.openPageIndex = function(pageIndex, initiator) {

    if (!_currentView) {
      return false;
    }

    var pageRequest;

    if (_package.isFixedLayout()) {
      var spineItem = _spine.items[pageIndex];
      if (!spineItem) {
        return false;
      }

      pageRequest = new PageOpenRequest(spineItem, initiator);
      pageRequest.setPageIndex(0);
    } else {

      var spineItems = this.getLoadedSpineItems();
      if (spineItems.length > 0) {
        pageRequest = new PageOpenRequest(spineItems[0], initiator);
        pageRequest.setPageIndex(pageIndex);
      }
    }

    openPage(pageRequest, 0);

    return true;
  };

  // dir: 0 => new or same page, 1 => previous, 2 => next
  function openPage(pageRequest, dir) {

    initViewForItem(pageRequest.spineItem, function(isViewChanged) {

      if (!isViewChanged) {
        _currentView.setViewSettings(_viewerSettings);
      }

      _currentView.openPage(pageRequest, dir);
    });
  }


  /**
   * Opens page index of the spine item with idref provided
   *
   * @param {string} idref Id of the spine item
   * @param {number} pageIndex Zero based index of the page in the spine item
   * @param {object} initiator optional
   */
  this.openSpineItemPage = function(idref, pageIndex, initiator) {

    var spineItem = getSpineItem(idref);

    if (!spineItem) {
      return false;
    }

    var pageData = new PageOpenRequest(spineItem, initiator);
    if (pageIndex) {
      pageData.setPageIndex(pageIndex);
    }

    openPage(pageData, 0);

    return true;
  };

  /**
   * Set CSS Styles to the reader container
   *
   * @param {ReadiumSDK.Collections.StyleCollection} styles   Style collection containing selector property and declarations object
   * @param {boolean} doNotUpdateView                         Whether to update the view after the styles are applied.
   */
  this.setStyles = function(styles, doNotUpdateView) {

    var count = styles.length;

    for (var i = 0; i < count; i++) {
      if (styles[i].declarations) {
        _userStyles.addStyle(styles[i].selector, styles[i].declarations);
      } else {
        _userStyles.removeStyle(styles[i].selector);
      }
    }

    applyStyles(doNotUpdateView);

  };

  /**
   * Set CSS Styles to the content documents
   *
   * @param {ReadiumSDK.Collections.StyleCollection} styles    Style collection containing selector property and declarations object
   */
  this.setBookStyles = function(styles) {

    var count = styles.length;

    for (var i = 0; i < count; i++) {
      _bookStyles.addStyle(styles[i].selector, styles[i].declarations);
    }

    if (_currentView) {
      _currentView.applyBookStyles();
    }

  };

  /**
   * Gets an element from active content documents based on a query selector.
   *
   * @param {Models.SpineItem} spineItem       The spine item object associated with an active content document
   * @param {string} selector                      The query selector
   * @returns {HTMLElement|undefined}
   */
  this.getElement = function(spineItem, selector) {

    if (_currentView) {
      return _currentView.getElement(spineItem, selector);
    }

    return undefined;
  };

  /**
   * Gets an element from active content documents based on an element id.
   *
   * @param {Models.SpineItem} spineItem      The spine item object associated with an active content document
   * @param {string} id                                  The element id
   * @returns {HTMLElement|undefined}
   */
  this.getElementById = function(spineItem, id) {

    if (_currentView) {
      return _currentView.getElementById(spineItem, id);
    }

    return undefined;
  };

  /**
   * Gets an element from active content documents based on a content CFI.
   *
   * @param {Models.SpineItem} spineItem     The spine item idref associated with an active content document
   * @param {string} cfi                                The partial content CFI
   * @param {string[]} [classBlacklist]
   * @param {string[]} [elementBlacklist]
   * @param {string[]} [idBlacklist]
   * @returns {HTMLElement|undefined}
   */
  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    if (_currentView) {
      return _currentView.getElementByCfi(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist);
    }

    return undefined;

  };

  function applyStyles(doNotUpdateView) {

    setStyles(_userStyles.getStyles(), _$el);

    if (_mediaOverlayPlayer)
      _mediaOverlayPlayer.applyStyles();

    if (doNotUpdateView) return;

    if (_currentView) {
      _currentView.applyStyles();
    }
  }

  /**
   * Opens a content url from a media player context
   *
   * @param {string} contentRefUrl
   * @param {string} sourceFileHref
   * @param offset
   */
  this.mediaOverlaysOpenContentUrl = function(contentRefUrl, sourceFileHref, offset) {
    _mediaOverlayPlayer.mediaOverlaysOpenContentUrl(contentRefUrl, sourceFileHref, offset);
  };



  /**
   * Opens the content document specified by the url
   *
   * @param {string} contentRefUrl Url of the content document
   * @param {string | undefined} sourceFileHref Url to the file that contentRefUrl is relative to. If contentRefUrl is
   * relative ot the source file that contains it instead of the package file (ex. TOC file) We have to know the
   * sourceFileHref to resolve contentUrl relative to the package file.
   * @param {object} initiator optional
   */
  this.openContentUrl = function(contentRefUrl, sourceFileHref, initiator) {

    var combinedPath = ResolveContentRef(contentRefUrl, sourceFileHref);

    var hashIndex = combinedPath.indexOf("#");
    var hrefPart;
    var elementId;
    if (hashIndex >= 0) {
      hrefPart = combinedPath.substr(0, hashIndex);
      elementId = combinedPath.substr(hashIndex + 1);
    } else {
      hrefPart = combinedPath;
      elementId = undefined;
    }

    var spineItem = _spine.getItemByHref(hrefPart);
    if (!spineItem) {
      console.warn('spineItem ' + hrefPart + ' not found');
      // sometimes that happens because spine item's URI gets encoded,
      // yet it's compared with raw strings by `getItemByHref()` -
      // so we try to search with decoded link as well
      var decodedHrefPart = decodeURIComponent(hrefPart);
      spineItem = _spine.getItemByHref(decodedHrefPart);
      if (!spineItem) {
        console.warn('decoded spineItem ' + decodedHrefPart + ' missing as well');
        return false;
      }
    }

    return self.openSpineItemElementId(spineItem.idref, elementId, initiator);
  };

  /**
   * Opens the page of the spine item with element with provided cfi
   *
   * @param {string} idref Id of the spine item
   * @param {string} elementId id of the element to be shown
   * @param {object} initiator optional
   */
  this.openSpineItemElementId = function(idref, elementId, initiator) {

    var spineItem = _spine.getItemById(idref);
    if (!spineItem) {
      return false;
    }

    var pageData = new PageOpenRequest(spineItem, initiator);

    if (elementId) {
      pageData.setElementId(elementId);
    }


    openPage(pageData, 0);

    return true;
  };

  /**
   * Returns the bookmark associated with currently opened page.
   *
   * @returns {string} Serialized Models.BookmarkData object as JSON string.
   */
  this.bookmarkCurrentPage = function() {
    return JSON.stringify(_currentView.bookmarkCurrentPage());
  };

  /**
   * Resets all the custom styles set by setStyle callers at runtime
   */
  this.clearStyles = function() {

    _userStyles.resetStyleValues();
    applyStyles();
    _userStyles.clear();
  };

  /**
   * Resets all the custom styles set by setBookStyle callers at runtime
   */
  this.clearBookStyles = function() {

    if (_currentView) {

      _bookStyles.resetStyleValues();
      _currentView.applyBookStyles();
    }

    _bookStyles.clear();
  };

  /**
   * Returns true if media overlay available for one of the open pages.
   *
   * @returns {boolean}
   */
  this.isMediaOverlayAvailable = function() {

    if (!_mediaOverlayPlayer) return false;

    return _mediaOverlayPlayer.isMediaOverlayAvailable();
  };

  /*
      this.setMediaOverlaySkippables = function(items) {

          _mediaOverlayPlayer.setMediaOverlaySkippables(items);
      };

      this.setMediaOverlayEscapables = function(items) {

          _mediaOverlayPlayer.setMediaOverlayEscapables(items);
      };
  */

  /**
   * Starts/Stop playing media overlay on current page
   */
  this.toggleMediaOverlay = function() {

    _mediaOverlayPlayer.toggleMediaOverlay();
  };


  /**
   * Plays next fragment media overlay
   */
  this.nextMediaOverlay = function() {

    _mediaOverlayPlayer.nextMediaOverlay();

  };

  /**
   * Plays previous fragment media overlay
   */
  this.previousMediaOverlay = function() {

    _mediaOverlayPlayer.previousMediaOverlay();

  };

  /**
   * Plays next available fragment media overlay that is outside of the current escapable scope
   */
  this.escapeMediaOverlay = function() {

    _mediaOverlayPlayer.escape();
  };

  /**
   * End media overlay TTS
   * @todo Clarify what this does with Daniel.
   */
  this.ttsEndedMediaOverlay = function() {

    _mediaOverlayPlayer.onTTSEnd();
  };

  /**
   * Pause currently playing media overlays.
   */
  this.pauseMediaOverlay = function() {

    _mediaOverlayPlayer.pause();
  };

  /**
   * Start/Resume playback of media overlays.
   */
  this.playMediaOverlay = function() {

    _mediaOverlayPlayer.play();
  };

  /**
   * Determine if media overlays are currently playing.
   * @returns {boolean}
   */
  this.isPlayingMediaOverlay = function() {

    return _mediaOverlayPlayer.isPlaying();
  };

  //
  // should use ReadiumSDK.Events.SETTINGS_APPLIED instead!
  //    this.setRateMediaOverlay = function(rate) {
  //
  //        _mediaOverlayPlayer.setRate(rate);
  //    };
  //    this.setVolumeMediaOverlay = function(volume){
  //
  //        _mediaOverlayPlayer.setVolume(volume);
  //    };

  /**
   * Get the first visible media overlay element from the currently active content document(s)
   * @returns {HTMLElement|undefined}
   */
  this.getFirstVisibleMediaOverlayElement = function() {

    if (_currentView) {
      return _currentView.getFirstVisibleMediaOverlayElement();
    }

    return undefined;
  };

  /**
   * Used to jump to an element to make sure it is visible when a content document is paginated
   * @param {string}      spineItemId   The spine item idref associated with an active content document
   * @param {HTMLElement} element       The element to make visible
   * @param [initiator]
   */
  this.insureElementVisibility = function(spineItemId, element, initiator) {

    if (_currentView) {
      _currentView.insureElementVisibility(spineItemId, element, initiator);
    }
  };

  var _resizeBookmark = null;
  var _resizeMOWasPlaying = false;

  function handleViewportResizeStart() {

    _resizeBookmark = null;
    _resizeMOWasPlaying = false;

    if (_currentView) {

      if (_currentView.isReflowable && _currentView.isReflowable()) {
        _resizeMOWasPlaying = self.isPlayingMediaOverlay();
        if (_resizeMOWasPlaying) {
          self.pauseMediaOverlay();
        }
      }

      _resizeBookmark = _currentView.bookmarkCurrentPage(); // not self! (JSON string)
    }
  }

  function handleViewportResizeTick() {
    if (_currentView) {
      self.handleViewportResize(_resizeBookmark);
    }
  }

  function handleViewportResizeEnd() {
    //same as doing one final tick for now
    handleViewportResizeTick();

    if (_resizeMOWasPlaying) self.playMediaOverlay();
  }

  this.handleViewportResize = function(bookmarkToRestore) {
    if (!_currentView) return;

    var bookMark = bookmarkToRestore || _currentView.bookmarkCurrentPage(); // not self! (JSON string)

    if (_currentView.isReflowable && _currentView.isReflowable() && bookMark && bookMark.idref) {
      var spineItem = _spine.getItemById(bookMark.idref);

      initViewForItem(spineItem, function(isViewChanged) {
        self.openSpineItemElementCfi(bookMark.idref, bookMark.contentCFI, self);
        return;
      });
    } else {
      _currentView.onViewportResize();
    }
  };

  /**
   * Returns current selection partial Cfi, useful for workflows that need to check whether the user has selected something.
   *
   * @returns {object | undefined} partial cfi object or undefined if nothing is selected
   */
  this.getCurrentSelectionCfi = function() {
    return _annotationsManager.getCurrentSelectionCfi();
  };

  /**
   * Creates a higlight based on given parameters
   *
   * @param {string} spineIdRef    spine idref that defines the partial Cfi
   * @param {string} cfi           partial CFI (withouth the indirection step) relative to the spine index
   * @param {string} id            id of the highlight. must be unique
   * @param {string} type          currently "highlight" only
   *
   * @returns {object | undefined} partial cfi object of the created highlight
   */
  this.addHighlight = function(spineIdRef, Cfi, id, type, styles) {
    return _annotationsManager.addHighlight(spineIdRef, Cfi, id, type, styles);
  };


  /**
   * Creates a higlight based on the current selection
   *
   * @param {string} id id of the highlight. must be unique
   * @param {string} type currently "highlight" only
   *
   * @returns {object | undefined} partial cfi object of the created highlight
   */
  this.addSelectionHighlight = function(id, type) {
    return _annotationsManager.addSelectionHighlight(id, type);
  };

  /**
   * Removes A given highlight
   *
   * @param {string} id  The id associated with the highlight.
   *
   * @returns {undefined}
   *
   */
  this.removeHighlight = function(id) {
    return _annotationsManager.removeHighlight(id);
  };

  /**
   *
   * @param {string} eventName              Event name.
   * @param {function} callback             Callback function.
   * @param {object} context                User specified data passed to the callback function.
   * @returns {undefined}
   */
  this.addIFrameEventListener = function(eventName, callback, context) {
    _iframeLoader.addIFrameEventListener(eventName, callback, context);
  };

  // TODO Extract
  var BackgroundAudioTrackManager = function() {
    var _spineItemIframeMap = {};
    var _wasPlaying = false;

    var _callback_playPause = undefined;
    this.setCallback_PlayPause = function(callback) {
      _callback_playPause = callback;
    };

    var _callback_isAvailable = undefined;
    this.setCallback_IsAvailable = function(callback) {
      _callback_isAvailable = callback;
    };

    this.playPause = function(doPlay) {
      _playPause(doPlay);
    };

    var _playPause = function(doPlay) {
      if (_callback_playPause) {
        _callback_playPause(doPlay);
      }

      try {
        var $iframe = undefined;

        for (var prop in _spineItemIframeMap) {
          if (!_spineItemIframeMap.hasOwnProperty(prop)) continue;

          var data = _spineItemIframeMap[prop];
          if (!data || !data.active) continue;

          if ($iframe) console.error("More than one active iframe?? (pagination)");

          $iframe = data["$iframe"];
          if (!$iframe) continue;

          var $audios = $("audio", $iframe[0].contentDocument);

          $.each($audios, function() {

            var attr = this.getAttribute("epub:type") || this.getAttribute("type");

            if (!attr) return true; // continue

            if (attr.indexOf("ibooks:soundtrack") < 0 && attr.indexOf("media:soundtrack") < 0 && attr.indexOf("media:background") < 0) return true; // continue

            if (doPlay && this.play) {
              this.play();
            } else if (this.pause) {
              this.pause();
            }

            return true; // continue (more than one track?)
          });
        }
      } catch (err) {
        console.error(err);
      }
    };

    this.setPlayState = function(wasPlaying) {
      _wasPlaying = wasPlaying;
    };

    self.on(Events.CONTENT_DOCUMENT_LOADED, function($iframe, spineItem) {
      try {
        if (spineItem && spineItem.idref && $iframe && $iframe[0]) {
          // console.log("CONTENT_DOCUMENT_LOADED");
          // console.debug(spineItem.href);
          // console.debug(spineItem.idref);

          _spineItemIframeMap[spineItem.idref] = {
            "$iframe": $iframe,
            href: spineItem.href
          };
        }
      } catch (err) {
        console.error(err);
      }
    });

    self.on(Events.PAGINATION_CHANGED, function(pageChangeData) {
      // console.log("PAGINATION_CHANGED");
      // console.debug(pageChangeData);
      // 
      // if (pageChangeData.spineItem)
      // {
      //     console.debug(pageChangeData.spineItem.href);
      //     console.debug(pageChangeData.spineItem.idref);
      // }
      // else
      // {
      //     //console.error(pageChangeData);
      // }
      // 
      // if (pageChangeData.paginationInfo && pageChangeData.paginationInfo.openPages && pageChangeData.paginationInfo.openPages.length)
      // {
      //     for (var i = 0; i < pageChangeData.paginationInfo.openPages.length; i++)
      //     {
      //         console.log(pageChangeData.paginationInfo.openPages[i].idref);
      //     }
      // }

      var atLeastOne = false;

      try {
        for (var prop in _spineItemIframeMap) {
          if (!_spineItemIframeMap.hasOwnProperty(prop)) continue;

          var isActive = pageChangeData.spineItem && pageChangeData.spineItem.idref === prop;

          var isDisplayed = false;

          if (pageChangeData.paginationInfo && pageChangeData.paginationInfo.openPages.length) {
            var allSame = true;

            for (var i = 0; i < pageChangeData.paginationInfo.openPages.length; i++) {
              if (pageChangeData.paginationInfo.openPages[i].idref === prop) {
                isDisplayed = true;
              } else {
                allSame = false;
              }
            }

            if (!isActive && allSame) isActive = true;
          }

          if (isActive || isDisplayed) {
            var data = _spineItemIframeMap[prop];
            if (!data) continue;

            _spineItemIframeMap[prop]["active"] = isActive;

            var $iframe = data["$iframe"];
            var href = data.href;

            var $audios = $("audio", $iframe[0].contentDocument);
            $.each($audios, function() {

              var attr = this.getAttribute("epub:type") || this.getAttribute("type");

              if (!attr) return true; // continue

              if (attr.indexOf("ibooks:soundtrack") < 0 && attr.indexOf("media:soundtrack") < 0 && attr.indexOf("media:background") < 0) return true; // continue

              this.setAttribute("loop", "loop");
              this.removeAttribute("autoplay");

              // DEBUG!
              //this.setAttribute("controls", "controls");

              if (isActive) {
                // DEBUG!
                //$(this).css({border:"2px solid green"});
              } else {
                if (this.pause) this.pause();

                // DEBUG!
                //$(this).css({border:"2px solid red"});
              }

              atLeastOne = true;

              return true; // continue (more than one track?)
            });

            continue;
          } else {
            if (_spineItemIframeMap[prop]) _spineItemIframeMap[prop]["$iframe"] = undefined;
            _spineItemIframeMap[prop] = undefined;
          }
        }
      } catch (err) {
        console.error(err);
      }

      if (_callback_isAvailable) {
        _callback_isAvailable(atLeastOne);
      }

      if (atLeastOne) {
        if (_wasPlaying) {
          _playPause(true);
        } else {
          _playPause(false); // ensure correct paused state
        }
      } else {
        _playPause(false); // ensure correct paused state
      }
    });

    self.on(Events.MEDIA_OVERLAY_STATUS_CHANGED, function(value) {
      if (!value.smilIndex) return;
      var package = self.package();
      var smil = package.media_overlay.smilAt(value.smilIndex);
      if (!smil || !smil.spineItemId) return;

      var needUpdate = false;
      for (var prop in _spineItemIframeMap) {
        if (!_spineItemIframeMap.hasOwnProperty(prop)) continue;

        var data = _spineItemIframeMap[prop];
        if (!data) continue;

        if (data.active) {
          if (prop !== smil.spineItemId) {
            _playPause(false); // ensure correct paused state
            data.active = false;
            needUpdate = true;
          }
        }
      }

      if (needUpdate) {
        for (var prop in _spineItemIframeMap) {
          if (!_spineItemIframeMap.hasOwnProperty(prop)) continue;

          var data = _spineItemIframeMap[prop];
          if (!data) continue;

          if (!data.active) {
            if (prop === smil.spineItemId) {
              data.active = true;
            }
          }
        }

        if (_wasPlaying) {
          _playPause(true);
        }
      }
    });
  };
  this.backgroundAudioTrackManager = new BackgroundAudioTrackManager();
};

module.exports = ReaderView;
},{"../collections/style":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/collections/style.js","../events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/events.js","../helpers/extended-throttle":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/extended-throttle.js","../helpers/is-iframe-alive":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/is-iframe-alive.js","../helpers/resolve-content-ref":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/resolve-content-ref.js","../helpers/set-styles":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/set-styles.js","../internal-events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/internal-events.js","../models/package":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/package.js","../models/page-open-request":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/page-open-request.js","../models/switches":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/switches.js","../models/trigger":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/trigger.js","../models/viewer-settings":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/viewer-settings.js","./annotations-manager":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/annotations-manager.js","./fixed-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/fixed-view.js","./iframe-loader":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/iframe-loader.js","./internal-links-support":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/internal-links-support.js","./media-overlay-data-injector":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/media-overlay-data-injector.js","./media-overlay-player":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/media-overlay-player.js","./reflowable-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/reflowable-view.js","./scroll-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/scroll-view.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/reflowable-view.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var _ = require('underscore')
var $ = require('jquery')
var Backbone = require('backbone')
var BookmarkData = require('../models/bookmark-data')
var CfiNavigationLogic = require('./cfi-navigation-logic')
var CurrentPagesInfo = require('../models/current-pages-info')
var Events = require('../events')
var deduceSyntheticSpread = require('../helpers/deduce-synthetic-spread')
var InternalEvents = require('../internal-events')
var loadTemplate = require('../helpers/load-template')
var Margins = require('../helpers/margins')
var PageOpenRequest = require('../models/page-open-request')
var triggerLayout = require('../helpers/trigger-layout')
var setStyles = require('../helpers/set-styles')
var UpdateHtmlFontSize = require('../helpers/update-html-font-size')
var ViewerSettings = require('../models/viewer-settings')

/**
 * Renders reflowable content using CSS columns
 * @param options
 * @constructor
 */
function ReflowableView(options, reader) {

  _.extend(this, Backbone.Events);

  var self = this;

  var _$viewport = options.$viewport;
  var _spine = options.spine;
  var _userStyles = options.userStyles;
  var _bookStyles = options.bookStyles;
  var _iframeLoader = options.iframeLoader;

  var _currentSpineItem;
  var _isWaitingFrameRender = false;
  var _deferredPageRequest;
  var _fontSize = 100;
  var _$contentFrame;
  var _navigationLogic;
  var _$el;
  var _$iframe;
  var _$epubHtml;

  var _$htmlBody;

  var _htmlBodyIsVerticalWritingMode;
  var _htmlBodyIsLTRDirection;
  var _htmlBodyIsLTRWritingMode;


  var _currentOpacity = -1;

  var _lastViewPortSize = {
    width: undefined,
    height: undefined
  };

  var _paginationInfo = {

    visibleColumnCount: 2,
    columnGap: 20,
    spreadCount: 0,
    currentSpreadIndex: 0,
    columnWidth: undefined,
    pageOffset: 0,
    columnCount: 0
  };

  this.render = function() {

    var template = loadTemplate("reflowable_book_frame", {});

    _$el = $(template);
    _$viewport.append(_$el);

    var settings = reader.viewerSettings();
    if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
      //defaults
      settings = new ViewerSettings({});
    }
    if (settings.enableGPUHardwareAccelerationCSS3D) {
      // This fixes rendering issues with WebView (native apps), which clips content embedded in iframes unless GPU hardware acceleration is enabled for CSS rendering.
      _$el.css("transform", "translateZ(0)");
    }

    // See ReaderView.handleViewportResize
    // var lazyResize = _.debounce(self.onViewportResize, 100);
    // $(window).on("resize.ReadiumSDK.reflowableView", _.bind(lazyResize, self));
    renderIframe();

    return self;
  };

  function setFrameSizesToRectangle(rectangle) {
    _$contentFrame.css("left", rectangle.left + "px");
    _$contentFrame.css("top", rectangle.top + "px");
    _$contentFrame.css("right", rectangle.right + "px");
    _$contentFrame.css("bottom", rectangle.bottom + "px");

  }

  this.remove = function() {

    //$(window).off("resize.ReadiumSDK.reflowableView");
    _$el.remove();

  };

  this.isReflowable = function() {
    return true;
  };

  this.onViewportResize = function() {

    if (updateViewportSize()) {
      updatePagination();
    }
  };

  var _viewSettings = undefined;
  this.setViewSettings = function(settings) {

    _viewSettings = settings;

    _paginationInfo.columnGap = settings.columnGap;
    _fontSize = settings.fontSize;

    updateHtmlFontSize();
    updateColumnGap();

    updateViewportSize();
    updatePagination();
  };

  function renderIframe() {
    if (_$contentFrame) {
      //destroy old contentFrame
      _$contentFrame.remove();
    }

    var template = loadTemplate("reflowable_book_page_frame", {});
    var $bookFrame = $(template);
    $bookFrame = _$el.append($bookFrame);

    _$contentFrame = $("#reflowable-content-frame", $bookFrame);

    _$iframe = $("#epubContentIframe", $bookFrame);

    _$iframe.css("left", "");
    _$iframe.css("right", "");
    _$iframe.css("position", "relative");
    //_$iframe.css(_spine.isLeftToRight() ? "left" : "right", "0px");
    _$iframe.css("overflow", "hidden");

    _navigationLogic = new CfiNavigationLogic(
      _$contentFrame, _$iframe, {
        rectangleBased: true,
        paginationInfo: _paginationInfo
      });
  }

  function loadSpineItem(spineItem) {

    if (_currentSpineItem != spineItem) {

      //create & append iframe to container frame
      renderIframe();

      _paginationInfo.pageOffset = 0;
      _paginationInfo.currentSpreadIndex = 0;
      _currentSpineItem = spineItem;
      _isWaitingFrameRender = true;

      var src = _spine.package.resolveRelativeUrl(spineItem.href);
      self.trigger(Events.CONTENT_DOCUMENT_LOAD_START, _$iframe, spineItem);

      _$iframe.css("opacity", "0.01");

      _iframeLoader.loadIframe(_$iframe[0], src, onIFrameLoad, self, {
        spineItem: spineItem
      });
    }
  }

  function updateHtmlFontSize() {

    if (_$epubHtml) {
      UpdateHtmlFontSize(_$epubHtml, _fontSize);
    }
  }

  function updateColumnGap() {

    if (_$epubHtml) {

      _$epubHtml.css("column-gap", _paginationInfo.columnGap + "px");
    }
  }

  function onIFrameLoad(success) {

    _isWaitingFrameRender = false;

    //while we where loading frame new request came
    if (_deferredPageRequest && _deferredPageRequest.spineItem != _currentSpineItem) {
      loadSpineItem(_deferredPageRequest.spineItem);
      return;
    }

    if (!success) {
      _$iframe.css("opacity", "1");
      _deferredPageRequest = undefined;
      return;
    }

    self.trigger(Events.CONTENT_DOCUMENT_LOADED, _$iframe, _currentSpineItem);

    var epubContentDocument = _$iframe[0].contentDocument;
    _$epubHtml = $("html", epubContentDocument);
    _$htmlBody = $("body", _$epubHtml);

    // Video surface sometimes (depends on the video codec) disappears from CSS column (i.e. reflow page) during playback (audio continues to play normally, but video canvas is invisible).
    // Enabling CSS3D fixes this Chrome-specific rendering bug.
    if (window.chrome && window.navigator.vendor === "Google Inc.") // TODO: Opera (WebKit) sometimes suffers from this rendering bug too (depends on the video codec), but unfortunately GPU-accelerated rendering makes the video controls unresponsive!!
    {
      $("video", _$htmlBody).css("transform", "translateZ(0)");
    }

    _htmlBodyIsVerticalWritingMode = false;
    _htmlBodyIsLTRDirection = true;
    _htmlBodyIsLTRWritingMode = undefined;

    var win = _$iframe[0].contentDocument.defaultView || _$iframe[0].contentWindow;

    //Helpers.isIframeAlive
    var htmlBodyComputedStyle = win.getComputedStyle(_$htmlBody[0], null);
    if (htmlBodyComputedStyle) {
      _htmlBodyIsLTRDirection = htmlBodyComputedStyle.direction === "ltr";

      var writingMode = undefined;
      if (htmlBodyComputedStyle.getPropertyValue) {
        writingMode = htmlBodyComputedStyle.getPropertyValue("-webkit-writing-mode") || htmlBodyComputedStyle.getPropertyValue("-moz-writing-mode") || htmlBodyComputedStyle.getPropertyValue("-ms-writing-mode") || htmlBodyComputedStyle.getPropertyValue("-o-writing-mode") || htmlBodyComputedStyle.getPropertyValue("-epub-writing-mode") || htmlBodyComputedStyle.getPropertyValue("writing-mode");
      } else {
        writingMode = htmlBodyComputedStyle.webkitWritingMode || htmlBodyComputedStyle.mozWritingMode || htmlBodyComputedStyle.msWritingMode || htmlBodyComputedStyle.oWritingMode || htmlBodyComputedStyle.epubWritingMode || htmlBodyComputedStyle.writingMode;
      }

      if (writingMode) {
        _htmlBodyIsLTRWritingMode = writingMode.indexOf("-lr") >= 0; // || writingMode.indexOf("horizontal-") >= 0; we need explicit!

        if (writingMode.indexOf("vertical") >= 0 || writingMode.indexOf("tb-") >= 0 || writingMode.indexOf("bt-") >= 0) {
          _htmlBodyIsVerticalWritingMode = true;
        }
      }
    }

    if (_htmlBodyIsLTRDirection) {
      if (_$htmlBody[0].getAttribute("dir") === "rtl" || _$epubHtml[0].getAttribute("dir") === "rtl") {
        _htmlBodyIsLTRDirection = false;
      }
    }

    // Some EPUBs may not have explicit RTL content direction (via CSS "direction" property or @dir attribute) despite having a RTL page progression direction. Readium consequently tweaks the HTML in order to restore the correct block flow in the browser renderer, resulting in the appropriate CSS columnisation (which is used to emulate pagination).
    if (!_spine.isLeftToRight() && _htmlBodyIsLTRDirection && !_htmlBodyIsVerticalWritingMode) {
      _$htmlBody[0].setAttribute("dir", "rtl");
      _htmlBodyIsLTRDirection = false;
      _htmlBodyIsLTRWritingMode = false;
    }

    _paginationInfo.isVerticalWritingMode = _htmlBodyIsVerticalWritingMode;

    hideBook();
    _$iframe.css("opacity", "1");

    updateViewportSize();
    _$epubHtml.css("height", _lastViewPortSize.height + "px");

    _$epubHtml.css("position", "relative");
    _$epubHtml.css("margin", "0");
    _$epubHtml.css("padding", "0");

    _$epubHtml.css("column-axis", (_htmlBodyIsVerticalWritingMode ? "vertical" : "horizontal"));

    //
    // /////////
    // //Columns Debugging
    //
    //     _$epubHtml.css("column-rule-color", "red");
    //     _$epubHtml.css("column-rule-style", "dashed");
    //     _$epubHtml.css("column-rule-width", "1px");
    // _$epubHtml.css("background-color", '#b0c4de');
    //
    // ////

    self.applyBookStyles();
    resizeImages();

    updateHtmlFontSize();
    updateColumnGap();


    self.applyStyles();
  }

  this.applyStyles = function() {

    setStyles(_userStyles.getStyles(), _$el.parent());

    //because left, top, bottom, right setting ignores padding of parent container
    //we have to take it to account manually
    var elementMargins = Margins.fromElement(_$el);
    setFrameSizesToRectangle(elementMargins.padding);


    updateViewportSize();
    updatePagination();
  };

  this.applyBookStyles = function() {

    if (_$epubHtml) {
      setStyles(_bookStyles.getStyles(), _$epubHtml);
    }
  };

  function openDeferredElement() {

    if (!_deferredPageRequest) {
      return;
    }

    var deferredData = _deferredPageRequest;
    _deferredPageRequest = undefined;
    self.openPage(deferredData);

  }

  this.openPage = function(pageRequest) {

    if (_isWaitingFrameRender) {
      _deferredPageRequest = pageRequest;
      return;
    }

    // if no spine item specified we are talking about current spine item
    if (pageRequest.spineItem && pageRequest.spineItem != _currentSpineItem) {
      _deferredPageRequest = pageRequest;
      loadSpineItem(pageRequest.spineItem);
      return;
    }

    var pageIndex = undefined;


    if (pageRequest.spineItemPageIndex !== undefined) {
      pageIndex = pageRequest.spineItemPageIndex;
    } else if (pageRequest.elementId) {
      pageIndex = _navigationLogic.getPageForElementId(pageRequest.elementId);
    } else if (pageRequest.elementCfi) {
      try {
        pageIndex = _navigationLogic.getPageForElementCfi(pageRequest.elementCfi, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
      } catch (e) {
        pageIndex = 0;
        console.error(e);
      }
    } else if (pageRequest.firstPage) {
      pageIndex = 0;
    } else if (pageRequest.lastPage) {
      pageIndex = _paginationInfo.columnCount - 1;
    } else {
      console.debug("No criteria in pageRequest");
      pageIndex = 0;
    }

    if (pageIndex >= 0 && pageIndex < _paginationInfo.columnCount) {
      _paginationInfo.currentSpreadIndex = Math.floor(pageIndex / _paginationInfo.visibleColumnCount);
      onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
    } else {
      console.log('Illegal pageIndex value: ', pageIndex, 'column count is ', _paginationInfo.columnCount);
    }
  };

  function redraw() {

    var offsetVal = -_paginationInfo.pageOffset + "px";

    if (_htmlBodyIsVerticalWritingMode) {
      _$epubHtml.css("top", offsetVal);
    } else {
      var ltr = _htmlBodyIsLTRDirection || _htmlBodyIsLTRWritingMode;

      _$epubHtml.css("left", ltr ? offsetVal : "");
      _$epubHtml.css("right", !ltr ? offsetVal : "");
    }

    showBook(); // as it's no longer hidden by shifting the position
  }

  function updateViewportSize() {

    var newWidth = _$contentFrame.width();
    var newHeight = _$contentFrame.height();

    if (_lastViewPortSize.width !== newWidth || _lastViewPortSize.height !== newHeight) {

      _lastViewPortSize.width = newWidth;
      _lastViewPortSize.height = newHeight;
      return true;
    }

    return false;
  }

  function onPaginationChanged(initiator, paginationRequest_spineItem, paginationRequest_elementId) {

    _paginationInfo.pageOffset = (_paginationInfo.columnWidth + _paginationInfo.columnGap) * _paginationInfo.visibleColumnCount * _paginationInfo.currentSpreadIndex;

    redraw();
    self.trigger(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED, {
      paginationInfo: self.getPaginationInfo(),
      initiator: initiator,
      spineItem: paginationRequest_spineItem,
      elementId: paginationRequest_elementId
    });
  }

  this.openPagePrev = function(initiator) {

    if (!_currentSpineItem) {
      return;
    }

    if (_paginationInfo.currentSpreadIndex > 0) {
      _paginationInfo.currentSpreadIndex--;
      onPaginationChanged(initiator);
    } else {

      var prevSpineItem = _spine.prevItem(_currentSpineItem, true);
      if (prevSpineItem) {

        var pageRequest = new PageOpenRequest(prevSpineItem, initiator);
        pageRequest.setLastPage();
        self.openPage(pageRequest);
      }
    }
  };

  this.openPageNext = function(initiator) {

    if (!_currentSpineItem) {
      return;
    }

    if (_paginationInfo.currentSpreadIndex < _paginationInfo.spreadCount - 1) {
      _paginationInfo.currentSpreadIndex++;
      onPaginationChanged(initiator);
    } else {

      var nextSpineItem = _spine.nextItem(_currentSpineItem, true);
      if (nextSpineItem) {

        var pageRequest = new PageOpenRequest(nextSpineItem, initiator);
        pageRequest.setFirstPage();
        self.openPage(pageRequest);
      }
    }
  };


  function updatePagination() {

    // At 100% font-size = 16px (on HTML, not body or descendant markup!)
    var MAXW = 550; //TODO user/vendor-configurable?
    var MINW = 400;

    var isDoublePageSyntheticSpread = deduceSyntheticSpread(_$viewport, _currentSpineItem, _viewSettings);

    var forced = (isDoublePageSyntheticSpread === false) || (isDoublePageSyntheticSpread === true);
    // excludes 0 and 1 falsy/truthy values which denote non-forced result

    // console.debug("isDoublePageSyntheticSpread: " + isDoublePageSyntheticSpread);
    // console.debug("forced: " + forced);
    //
    if (isDoublePageSyntheticSpread === 0) {
      isDoublePageSyntheticSpread = 1; // try double page, will shrink if doesn't fit
      // console.debug("TRYING SPREAD INSTEAD OF SINGLE...");
    }

    _paginationInfo.visibleColumnCount = isDoublePageSyntheticSpread ? 2 : 1;

    if (_htmlBodyIsVerticalWritingMode) {
      MAXW *= 2;
      isDoublePageSyntheticSpread = false;
      forced = true;
      _paginationInfo.visibleColumnCount = 1;
      // console.debug("Vertical Writing Mode => single CSS column, but behaves as if two-page spread");
    }

    if (!_$epubHtml) {
      return;
    }

    hideBook(); // shiftBookOfScreen();

    var borderLeft = parseInt(_$viewport.css("border-left-width"));
    var borderRight = parseInt(_$viewport.css("border-right-width"));
    var adjustedGapLeft = _paginationInfo.columnGap / 2;
    adjustedGapLeft = Math.max(0, adjustedGapLeft - borderLeft)
    var adjustedGapRight = _paginationInfo.columnGap / 2;
    adjustedGapRight = Math.max(0, adjustedGapRight - borderRight)

    var filler = 0;

    //         var win = _$iframe[0].contentDocument.defaultView || _$iframe[0].contentWindow;
    //         var htmlBodyComputedStyle = win.getComputedStyle(_$htmlBody[0], null);
    //         if (htmlBodyComputedStyle)
    //         {
    //             var fontSize = undefined;
    //             if (htmlBodyComputedStyle.getPropertyValue)
    //             {
    //                 fontSize = htmlBodyComputedStyle.getPropertyValue("font-size");
    //             }
    //             else
    //             {
    //                 fontSize = htmlBodyComputedStyle.fontSize;
    //             }
    // console.debug(fontSize);
    //         }

    if (_viewSettings.fontSize) {
      var fontSizeAdjust = (_viewSettings.fontSize * 0.8) / 100;
      MAXW = Math.floor(MAXW * fontSizeAdjust);
      MINW = Math.floor(MINW * fontSizeAdjust);
    }

    var availableWidth = _$viewport.width();
    var textWidth = availableWidth - borderLeft - borderRight - adjustedGapLeft - adjustedGapRight;
    if (isDoublePageSyntheticSpread) {
      textWidth = (textWidth - _paginationInfo.columnGap) * 0.5;
    }

    if (textWidth > MAXW) {
      // console.debug("LIMITING WIDTH");
      filler = Math.floor((textWidth - MAXW) * (isDoublePageSyntheticSpread ? 1 : 0.5));
    } else if (!forced && textWidth < MINW && isDoublePageSyntheticSpread) {
      //console.debug("REDUCING SPREAD TO SINGLE");
      isDoublePageSyntheticSpread = false;
      _paginationInfo.visibleColumnCount = 1;

      textWidth = availableWidth - borderLeft - borderRight - adjustedGapLeft - adjustedGapRight;
      if (textWidth > MAXW) {
        filler = Math.floor((textWidth - MAXW) * 0.5);
      }
    }

    _$el.css({
      "left": (filler + adjustedGapLeft + "px"),
      "right": (filler + adjustedGapRight + "px")
    });
    updateViewportSize(); //_$contentFrame ==> _lastViewPortSize


    _$iframe.css("width", _lastViewPortSize.width + "px");
    _$iframe.css("height", _lastViewPortSize.height + "px");

    _$epubHtml.css("height", _lastViewPortSize.height + "px");

    // below min- max- are required in vertical writing mode (height is not enough, in some cases...weird!)
    _$epubHtml.css("min-height", _lastViewPortSize.height + "px");
    _$epubHtml.css("max-height", _lastViewPortSize.height + "px");

    //normalise spacing to avoid interference with column-isation
    _$epubHtml.css('margin', 0);
    _$epubHtml.css('padding', 0);
    _$epubHtml.css('border', 0);
    _$htmlBody.css('margin', 0);
    _$htmlBody.css('padding', 0);

    var spacing = 0;
    try {
      spacing = parseInt(_$htmlBody.css('padding-top')) + parseInt(_$htmlBody.css('border-top-width')) + parseInt(_$htmlBody.css('border-bottom-width'));
    } catch (err) {

    }
    // Needed for Firefox, otherwise content shrinks vertically, resulting in scrollWidth accomodating more columns than necessary
    //_$htmlBody.css("min-height", _lastViewPortSize.height-spacing-9 + "px");
    _$htmlBody.css("min-height", "50%");
    _$htmlBody.css("max-height", _lastViewPortSize.height - spacing + "px");

    _paginationInfo.rightToLeft = _spine.isRightToLeft();

    _paginationInfo.columnWidth = Math.round(((_htmlBodyIsVerticalWritingMode ? _lastViewPortSize.height : _lastViewPortSize.width) - _paginationInfo.columnGap * (_paginationInfo.visibleColumnCount - 1)) / _paginationInfo.visibleColumnCount);

    _$epubHtml.css("width", (_htmlBodyIsVerticalWritingMode ? _lastViewPortSize.width : _paginationInfo.columnWidth) + "px");

    _$epubHtml.css("column-width", _paginationInfo.columnWidth + "px");

    _$epubHtml.css({
      left: "0",
      right: "0",
      top: "0"
    });

    triggerLayout(_$iframe);

    _paginationInfo.columnCount = ((_htmlBodyIsVerticalWritingMode ? _$epubHtml[0].scrollHeight : _$epubHtml[0].scrollWidth) + _paginationInfo.columnGap) / (_paginationInfo.columnWidth + _paginationInfo.columnGap);
    _paginationInfo.columnCount = Math.round(_paginationInfo.columnCount);

    var totalGaps = (_paginationInfo.columnCount - 1) * _paginationInfo.columnGap;
    var colWidthCheck = ((_htmlBodyIsVerticalWritingMode ? _$epubHtml[0].scrollHeight : _$epubHtml[0].scrollWidth) - totalGaps) / _paginationInfo.columnCount;
    colWidthCheck = Math.round(colWidthCheck);

    if (colWidthCheck > _paginationInfo.columnWidth) {
      console.debug("ADJUST COLUMN");
      console.log(_paginationInfo.columnWidth);
      console.log(colWidthCheck);

      _paginationInfo.columnWidth = colWidthCheck;
    }

    _paginationInfo.spreadCount = Math.ceil(_paginationInfo.columnCount / _paginationInfo.visibleColumnCount);

    if (_paginationInfo.currentSpreadIndex >= _paginationInfo.spreadCount) {
      _paginationInfo.currentSpreadIndex = _paginationInfo.spreadCount - 1;
    }

    if (_deferredPageRequest) {

      //if there is a request for specific page we get here
      openDeferredElement();
    } else {

      //we get here on resizing the viewport

      onPaginationChanged(self); // => redraw() => showBook(), so the trick below is not needed

      // //We do this to force re-rendering of the document in the iframe.
      // //There is a bug in WebView control with right to left columns layout - after resizing the window html document
      // //is shifted in side the containing div. Hiding and showing the html element puts document in place.
      // _$epubHtml.hide();
      // setTimeout(function() {
      //     _$epubHtml.show();
      //     onPaginationChanged(self); // => redraw() => showBook()
      // }, 50);

    }
  }

  //    function shiftBookOfScreen() {
  //
  //        if(_spine.isLeftToRight()) {
  //            _$epubHtml.css("left", (_lastViewPortSize.width + 1000) + "px");
  //        }
  //        else {
  //            _$epubHtml.css("right", (_lastViewPortSize.width + 1000) + "px");
  //        }
  //    }

  function hideBook() {
    if (_currentOpacity != -1) return; // already hidden

    _currentOpacity = _$epubHtml.css('opacity');
    _$epubHtml.css('opacity', "0");
  }

  function showBook() {
    if (_currentOpacity != -1) {
      _$epubHtml.css('opacity', _currentOpacity);
    }
    _currentOpacity = -1;
  }

  this.getFirstVisibleElementCfi = function() {

    var contentOffsets = getVisibleContentOffsets();
    return _navigationLogic.getFirstVisibleElementCfi(contentOffsets);
  };

  this.getPaginationInfo = function() {

    var paginationInfo = new CurrentPagesInfo(_spine, false);

    if (!_currentSpineItem) {
      return paginationInfo;
    }

    var pageIndexes = getOpenPageIndexes();

    for (var i = 0, count = pageIndexes.length; i < count; i++) {

      paginationInfo.addOpenPage(pageIndexes[i], _paginationInfo.columnCount, _currentSpineItem.idref, _currentSpineItem.index);
    }

    return paginationInfo;

  };

  function getOpenPageIndexes() {

    var indexes = [];

    var currentPage = _paginationInfo.currentSpreadIndex * _paginationInfo.visibleColumnCount;

    for (var i = 0; i < _paginationInfo.visibleColumnCount && (currentPage + i) < _paginationInfo.columnCount; i++) {

      indexes.push(currentPage + i);
    }

    return indexes;

  }

  //we need this styles for css columnizer not to chop big images
  function resizeImages() {

    if (!_$epubHtml) {
      return;
    }

    var $elem;
    var height;
    var width;

    $('img, svg', _$epubHtml).each(function() {

      $elem = $(this);

      // if we set max-width/max-height to 100% columnizing engine chops images embedded in the text
      // (but not if we set it to 99-98%) go figure.
      // TODO: CSS min-w/h is content-box, not border-box (does not take into account padding + border)? => images may still overrun?
      $elem.css('max-width', '98%');
      $elem.css('max-height', '98%');

      if (!$elem.css('height')) {
        $elem.css('height', 'auto');
      }

      if (!$elem.css('width')) {
        $elem.css('width', 'auto');
      }

    });
  }

  this.bookmarkCurrentPage = function() {

    if (!_currentSpineItem) {

      return new BookmarkData("", "");
    }

    return new BookmarkData(_currentSpineItem.idref, self.getFirstVisibleElementCfi());
  };

  function getVisibleContentOffsets() {
    //TODO: _htmlBodyIsVerticalWritingMode ? (_lastViewPortSize.height * _paginationInfo.currentSpreadIndex)
    // NOT used with options.rectangleBased anyway (see CfiNavigationLogic constructor call, here in this reflow engine class)
    var columnsLeftOfViewport = Math.round(_paginationInfo.pageOffset / (_paginationInfo.columnWidth + _paginationInfo.columnGap));

    var topOffset = columnsLeftOfViewport * _$contentFrame.height();
    var bottomOffset = topOffset + _paginationInfo.visibleColumnCount * _$contentFrame.height();

    return {
      top: topOffset,
      bottom: bottomOffset
    };
  }

  this.getLoadedSpineItems = function() {
    return [_currentSpineItem];
  };

  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return _navigationLogic.getElementByCfi(cfi, classBlacklist, elementBlacklist, idBlacklist);
  };

  this.getElementById = function(spineItem, id) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return _navigationLogic.getElementById(id);
  };

  this.getElement = function(spineItem, selector) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return _navigationLogic.getElement(selector);
  };

  this.getFirstVisibleMediaOverlayElement = function() {

    var visibleContentOffsets = getVisibleContentOffsets();
    return _navigationLogic.getFirstVisibleMediaOverlayElement(visibleContentOffsets);
  };

  // /**
  //  * @deprecated
  //  */
  // this.getVisibleMediaOverlayElements = function() {
  // 
  //     var visibleContentOffsets = getVisibleContentOffsets();
  //     return _navigationLogic.getVisibleMediaOverlayElements(visibleContentOffsets);
  // };

  this.insureElementVisibility = function(spineItemId, element, initiator) {

    var $element = $(element);
    if (_navigationLogic.isElementVisible($element, getVisibleContentOffsets())) {
      return;
    }

    var page = _navigationLogic.getPageForElement($element);

    if (page == -1) {
      return;
    }

    var openPageRequest = new PageOpenRequest(_currentSpineItem, initiator);
    openPageRequest.setPageIndex(page);

    var id = element.id;
    if (!id) {
      id = element.getAttribute("id");
    }

    if (id) {
      openPageRequest.setElementId(id);
    }

    self.openPage(openPageRequest);
  }

}

module.exports = ReflowableView
},{"../events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/events.js","../helpers/deduce-synthetic-spread":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/deduce-synthetic-spread.js","../helpers/load-template":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/load-template.js","../helpers/margins":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/margins.js","../helpers/set-styles":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/set-styles.js","../helpers/trigger-layout":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/trigger-layout.js","../helpers/update-html-font-size":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/update-html-font-size.js","../internal-events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/internal-events.js","../models/bookmark-data":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/bookmark-data.js","../models/current-pages-info":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/current-pages-info.js","../models/page-open-request":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/page-open-request.js","../models/viewer-settings":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/viewer-settings.js","./cfi-navigation-logic":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/cfi-navigation-logic.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}],"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/scroll-view.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var _ = require('underscore')
var $ = require('jquery')
var Backbone = require('backbone')
var BookmarkData = require('../models/bookmark-data')
var CurrentPagesInfo = require('../models/current-pages-info')
var Events = require('../events')
var InternalEvents = require('../internal-events')
var isIFrameAlive = require('../helpers/is-iframe-alive')
var loadTemplate = require('../helpers/load-template')
var Margins = require('../helpers/margins')
var OnePageView = require('./one-page-view')
var PageOpenRequest = require('../models/page-open-request')
var setStyles = require('../helpers/set-styles')
var ViewerSettings = require('../models/viewer-settings')

/**
 * Renders content inside a scrollable view port
 * @param options
 * @param isContinuousScroll
 * @param reader
 * @constructor
 */
function ScrollView(options, isContinuousScroll, reader) {

  var _DEBUG = false;

  _.extend(this, Backbone.Events);

  var SCROLL_MARGIN_TO_SHOW_LAST_VISBLE_LINE = 5;
  var ITEM_LOAD_SCROLL_BUFFER = 2000;
  var ON_SCROLL_TIME_DALAY = 300;

  var self = this;

  var _$viewport = options.$viewport;
  var _spine = options.spine;
  var _userStyles = options.userStyles;
  var _deferredPageRequest;
  var _$contentFrame;
  var _$el;

  var _stopTransientViewUpdate = false;

  //this flags used to prevent onScroll event triggering pagination changed when internal layout modifications happens
  //if we trigger pagination change without reference to the original request that started the change - we brake the
  //Media Overlay bechaviyour
  //We can't reuse same flag for all of this action because this actions mey happen in parallel
  var _isPerformingLayoutModifications = false; //performing asynch  actions that may trigger onScroll;
  var _isSettingScrollPosition = false; //this happens when we set scroll position based on open element request
  var _isLoadingNewSpineItemOnPageRequest = false; //

  this.isContinuousScroll = function() {
    return isContinuousScroll;
  };

  this.render = function() {

    var template = loadTemplate("scrolled_book_frame", {});

    _$el = $(template);
    _$viewport.append(_$el);

    _$contentFrame = $("#scrolled-content-frame", _$el);
    _$contentFrame.css("overflow", "");
    _$contentFrame.css("overflow-y", "auto");
    _$contentFrame.css("overflow-x", "hidden");
    _$contentFrame.css("-webkit-overflow-scrolling", "touch");
    _$contentFrame.css("width", "100%");
    _$contentFrame.css("height", "100%");
    _$contentFrame.css("position", "relative");

    var settings = reader.viewerSettings();
    if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
      //defaults
      settings = new ViewerSettings({});
    }
    if (settings.enableGPUHardwareAccelerationCSS3D) {
      // This is a necessary counterpart for the same CSS GPU hardware acceleration trick in one_page_view.js
      // This affects the stacking order and re-enables the scrollbar in Safari (works fine in Chrome otherwise)
      _$contentFrame.css("transform", "translateZ(0)");
    }

    // _$contentFrame.css("box-sizing", "border-box");
    // _$contentFrame.css("border", "20px solid red");

    self.applyStyles();

    var lazyScroll = _.debounce(onScroll, ON_SCROLL_TIME_DALAY);

    _$contentFrame.on('scroll', function(e) {
      lazyScroll(e);
      onScrollDirect();
    });

    return self;
  };

  function updateLoadedViewsTop(callback, assertScrollPosition) {

    if (_stopTransientViewUpdate) {
      callback();
      return;
    }

    var viewPage = firstLoadedView();
    if (!viewPage) {
      callback();
      return;
    }

    var viewPortRange = getVisibleRange(0);
    var firstViewRange = getPageViewRange(viewPage);

    if ((viewPortRange.top - firstViewRange.bottom) > ITEM_LOAD_SCROLL_BUFFER) {
      var scrollPos = scrollTop();
      removePageView(viewPage);
      scrollTo(scrollPos - (firstViewRange.bottom - firstViewRange.top), undefined);
      assertScrollPosition("updateLoadedViewsTop 1");
      updateLoadedViewsTop(callback, assertScrollPosition); //recursion
    } else if ((viewPortRange.top - firstViewRange.top) < ITEM_LOAD_SCROLL_BUFFER) {
      addToTopOf(viewPage, function(isElementAdded) {
        if (isElementAdded) {
          assertScrollPosition("updateLoadedViewsTop 2");
          updateLoadedViewsTop(callback, assertScrollPosition); //recursion
        } else {
          callback();
        }
      });
    } else {
      callback();
    }

  }

  function updateLoadedViewsBottom(callback, assertScrollPosition) {

    if (_stopTransientViewUpdate) {
      callback();
      return;
    }

    var viewPage = lastLoadedView();
    if (!viewPage) {
      callback();
      return;
    }

    var viewPortRange = getVisibleRange(0);
    var lastViewRange = getPageViewRange(viewPage);

    if ((lastViewRange.top - viewPortRange.bottom) > ITEM_LOAD_SCROLL_BUFFER) {
      removePageView(viewPage);
      assertScrollPosition("updateLoadedViewsBottom 1");
      updateLoadedViewsBottom(callback, assertScrollPosition); //recursion
    } else if ((lastViewRange.bottom - viewPortRange.bottom) < ITEM_LOAD_SCROLL_BUFFER) {
      addToBottomOf(viewPage, function(newPageLoaded) {
        assertScrollPosition("updateLoadedViewsBottom 2");
        if (newPageLoaded) {
          updateLoadedViewsBottom(callback, assertScrollPosition); //recursion
        } else {
          callback();
        }
      });
    } else {
      callback();
    }

  }

  function updateTransientViews(pageView) {

    if (!isContinuousScroll) {
      return;
    }

    var scrollPosBefore = undefined;
    if (_DEBUG) {
      if (pageView) {
        var offset = pageView.offset();
        if (offset) scrollPosBefore = offset.top;
      }
    }

    // This function double-checks whether the browser has shifted the scroll position because of unforeseen rendering issues.
    // (this should never happen because we handle scroll adjustments during iframe height resizes explicitely in this code)
    var assertScrollPosition = function(msg) {
      if (_DEBUG) {
        if (!scrollPosBefore) return;
        var scrollPosAfter = undefined;

        var offset = pageView.offset();
        if (offset) scrollPosAfter = offset.top;

        if (!scrollPosAfter) return;

        var diff = scrollPosAfter - scrollPosBefore;
        if (Math.abs(diff) > 1) {
          console.debug("@@@@@@@@@@@@@@@ SCROLL ADJUST (" + msg + ") " + diff + " -- " + pageView.currentSpineItem().href);
          //_$contentFrame[0].scrollTop = _$contentFrame[0].scrollTop + diff;
        }
      }
    };

    _isPerformingLayoutModifications = true;
    updateLoadedViewsBottom(function() {
      updateLoadedViewsTop(function() {
        setTimeout(function() {
          _isPerformingLayoutModifications = false;
        }, ON_SCROLL_TIME_DALAY + 100);
      }, assertScrollPosition);
    }, assertScrollPosition);
  }

  var _mediaOverlaysWasPlayingLastTimeScrollStarted = false;

  function onScrollDirect(e) {
    var settings = reader.viewerSettings();
    if (!settings.mediaOverlaysPreservePlaybackWhenScroll) {
      if (!_mediaOverlaysWasPlayingLastTimeScrollStarted && reader.isMediaOverlayAvailable()) {
        _mediaOverlaysWasPlayingLastTimeScrollStarted = reader.isPlayingMediaOverlay();
        if (_mediaOverlaysWasPlayingLastTimeScrollStarted) {
          reader.pauseMediaOverlay();
        }
      }
    }
  }

  function onScroll(e) {
    if (!_isPerformingLayoutModifications && !_isSettingScrollPosition && !_isLoadingNewSpineItemOnPageRequest) {

      updateTransientViews();
      onPaginationChanged(self);

      var settings = reader.viewerSettings();
      if (!settings.mediaOverlaysPreservePlaybackWhenScroll) {
        if (_mediaOverlaysWasPlayingLastTimeScrollStarted) {
          setTimeout(function() {
            reader.playMediaOverlay();
            _mediaOverlaysWasPlayingLastTimeScrollStarted = false;
          }, 100);
        }
      }
    }
  }

  function scrollTo(offset, pageRequest) {

    _$contentFrame[0].scrollTop = offset;

    if (pageRequest) {
      onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
    }
  }

  function updatePageViewSizeAndAdjustScroll(pageView) {
    var scrollPos = scrollTop();
    var rangeBeforeResize = getPageViewRange(pageView);

    updatePageViewSize(pageView);

    var rangeAfterResize = getPageViewRange(pageView);

    var heightAfter = rangeAfterResize.bottom - rangeAfterResize.top;
    var heightBefore = rangeBeforeResize.bottom - rangeBeforeResize.top;

    var delta = heightAfter - heightBefore;

    if (Math.abs(delta) > 0) {
      if (_DEBUG) {
        console.debug("IMMEDIATE SCROLL ADJUST: " + pageView.currentSpineItem().href + " == " + delta);
      }
      scrollTo(scrollPos + delta);
    }
  }

  function reachStableContentHeight(updateScroll, pageView, iframe, href, fixedLayout, metaWidth, msg, callback) {
    if (!isIframeAlive(iframe)) {
      if (_DEBUG) {
        console.log("reachStableContentHeight ! win && doc (iFrame disposed?)");
      }

      if (callback) callback(false);
      return;
    }

    var MAX_ATTEMPTS = 10;
    var TIME_MS = 300;

    var w = iframe.contentWindow;
    var d = iframe.contentDocument;

    var previousPolledContentHeight = parseInt(Math.round(parseFloat(w.getComputedStyle(d.documentElement).height))); //body can be shorter!;

    var initialContentHeight = previousPolledContentHeight;

    if (updateScroll === 0) {
      updatePageViewSizeAndAdjustScroll(pageView);
    } else {
      updatePageViewSize(pageView);
    }

    var tryAgainFunc = function(tryAgain) {
      if (_DEBUG && tryAgain !== MAX_ATTEMPTS) {
        console.log("tryAgainFunc - " + tryAgain + ": " + href + "  <" + initialContentHeight + " -- " + previousPolledContentHeight + ">");
      }

      tryAgain--;
      if (tryAgain < 0) {
        if (_DEBUG) {
          console.error("tryAgainFunc abort: " + href);
        }

        if (callback) callback(true);
        return;
      }

      setTimeout(function() {
        try {
          if (isIframeAlive(iframe)) {
            var win = iframe.contentWindow;
            var doc = iframe.contentDocument;

            var iframeHeight = parseInt(Math.round(parseFloat(window.getComputedStyle(iframe).height)));

            var docHeight = parseInt(Math.round(parseFloat(win.getComputedStyle(doc.documentElement).height))); //body can be shorter!

            if (previousPolledContentHeight !== docHeight) {
              previousPolledContentHeight = docHeight;

              tryAgainFunc(tryAgain);
              return;
            }

            // CONTENT HEIGHT IS NOW STABILISED

            var diff = iframeHeight - docHeight;
            if (Math.abs(diff) > 4) {
              if (_DEBUG) {
                console.log("$$$ IFRAME HEIGHT ADJUST: " + href + "  [" + diff + "]<" + initialContentHeight + " -- " + previousPolledContentHeight + ">");
                console.log(msg);
              }

              if (updateScroll === 0) {
                updatePageViewSizeAndAdjustScroll(pageView);
              } else {
                updatePageViewSize(pageView);
              }

              if (isIframeAlive(iframe)) {
                var win = iframe.contentWindow;
                var doc = iframe.contentDocument;

                var docHeightAfter = parseInt(Math.round(parseFloat(win.getComputedStyle(doc.documentElement).height))); //body can be shorter!
                var iframeHeightAfter = parseInt(Math.round(parseFloat(window.getComputedStyle(iframe).height)));

                var newdiff = iframeHeightAfter - docHeightAfter;
                if (Math.abs(newdiff) > 4) {
                  if (_DEBUG) {
                    console.error("## IFRAME HEIGHT ADJUST: " + href + "  [" + newdiff + "]<" + initialContentHeight + " -- " + previousPolledContentHeight + ">");
                    console.log(msg);
                  }

                  tryAgainFunc(tryAgain);
                  return;
                } else {
                  if (_DEBUG) {
                    console.log(">> IFRAME HEIGHT ADJUSTED OKAY: " + href + "  [" + diff + "]<" + initialContentHeight + " -- " + previousPolledContentHeight + ">");
                    // console.log(msg);
                  }
                }
              } else {
                if (_DEBUG) {
                  console.log("tryAgainFunc ! win && doc (iFrame disposed?)");
                }

                if (callback) callback(false);
                return;
              }
            } else {
              //if (_DEBUG)
              // console.debug("IFRAME HEIGHT NO NEED ADJUST: " + href);
              // console.log(msg);
            }
          } else {
            if (_DEBUG) {
              console.log("tryAgainFunc ! win && doc (iFrame disposed?)");
            }

            if (callback) callback(false);
            return;
          }
        } catch (ex) {
          console.error(ex);

          if (callback) callback(false);
          return;
        }

        if (callback) callback(true);

      }, TIME_MS);
    };

    tryAgainFunc(MAX_ATTEMPTS);
  }


  function addToTopOf(topView, callback) {

    var prevSpineItem = _spine.prevItem(topView.currentSpineItem(), true);
    if (!prevSpineItem) {
      callback(false);
      return;
    }

    var tmpView = createPageViewForSpineItem(true);

    // add to the end first to avoid scrolling during load
    var lastView = lastLoadedView();
    tmpView.element().insertAfter(lastView.element());

    tmpView.loadSpineItem(prevSpineItem, function(success, $iframe, spineItem, isNewlyLoaded, context) {
      if (success) {

        updatePageViewSize(tmpView);
        var range = getPageViewRange(tmpView);

        removePageView(tmpView);


        var scrollPos = scrollTop();

        var newView = createPageViewForSpineItem();
        var originalHeight = range.bottom - range.top;


        newView.setHeight(originalHeight);
        // iframe is loaded hidden here
        //this.showIFrame();
        //===> not necessary here (temporary iframe)

        newView.element().insertBefore(topView.element());

        scrollPos = scrollPos + originalHeight;

        scrollTo(scrollPos, undefined);

        newView.loadSpineItem(prevSpineItem, function(success, $iframe, spineItem, isNewlyLoaded, context) {
          if (success) {

            var continueCallback = function(successFlag) {
              onPageViewLoaded(newView, success, $iframe, spineItem, isNewlyLoaded, context);

              callback(successFlag);
            };

            reachStableContentHeight(0, newView, $iframe[0], spineItem.href, spineItem.isFixedLayout(), spineItem.isFixedLayout() ? newView.meta_width() : 0, "addToTopOf", continueCallback); // //onIFrameLoad called before this callback, so okay.
          } else {
            console.error("Unable to open 2 " + prevSpineItem.href);
            removePageView(newView);
            callback(false);
          }

        });
      } else {
        console.error("Unable to open 1 " + prevSpineItem.href);
        removePageView(tmpView);
        callback(false);
      }

    });
  }

  function updatePageViewSize(pageView) {

    if (pageView.currentSpineItem().isFixedLayout()) {
      pageView.scaleToWidth(_$contentFrame.width());
    } else {
      pageView.resizeIFrameToContent();
    }
  }

  function addToBottomOf(bottomView, callback) {

    var nexSpineItem = _spine.nextItem(bottomView.currentSpineItem(), true);
    if (!nexSpineItem) {
      callback(false);
      return;
    }

    var scrollPos = scrollTop();

    var newView = createPageViewForSpineItem();
    newView.element().insertAfter(bottomView.element());

    newView.loadSpineItem(nexSpineItem, function(success, $iframe, spineItem, isNewlyLoaded, context) {
      if (success) {

        var continueCallback = function(successFlag) {
          onPageViewLoaded(newView, success, $iframe, spineItem, isNewlyLoaded, context);

          callback(successFlag);
        };

        reachStableContentHeight(2, newView, $iframe[0], spineItem.href, spineItem.isFixedLayout(), spineItem.isFixedLayout() ? newView.meta_width() : 0, "addToBottomOf", continueCallback); // //onIFrameLoad called before this callback, so okay.
      } else {
        console.error("Unable to load " + nexSpineItem.href);
        callback(false);
      }

    });
  }

  function removeLoadedItems() {

    var loadedPageViews = [];

    forEachItemView(function(pageView) {
      loadedPageViews.push(pageView);
    }, false);

    for (var i = 0, count = loadedPageViews.length; i < count; i++) {
      removePageView(loadedPageViews[i]);
    }
  }

  function removePageView(pageView) {

    pageView.element().remove();

  }


  function setFrameSizesToRectangle(rectangle) {

    _$contentFrame.css("left", rectangle.left);
    _$contentFrame.css("top", rectangle.top);
    _$contentFrame.css("right", rectangle.right);
    _$contentFrame.css("bottom", rectangle.bottom);

  }

  this.remove = function() {
    _$el.remove();
  };

  this.onViewportResize = function() {

    if (!_$contentFrame) {
      return;
    }

    forEachItemView(function(pageView) {

      updatePageViewSize(pageView);
    }, false);

    onPaginationChanged(self);

    updateTransientViews();
  };

  var _viewSettings = undefined;
  this.setViewSettings = function(settings) {

    _viewSettings = settings;

    forEachItemView(function(pageView) {

      pageView.setViewSettings(settings);

    }, false);
  };

  function createPageViewForSpineItem(isTemporaryView) {

    options.disablePageTransitions = true; // force

    var pageView = new OnePageView(
      options, ["content-doc-frame"],
      true, //enableBookStyleOverrides
      reader);

    pageView.render();
    if (_viewSettings) pageView.setViewSettings(_viewSettings);

    if (!isTemporaryView) {
      pageView.element().data("pageView", pageView);
    }


    if (isContinuousScroll) {
      pageView.decorateIframe();
    }

    return pageView;
  }

  function findPageViewForSpineItem(spineItem, reverse) {

    var retView = undefined;

    forEachItemView(function(pageView) {
      if (pageView.currentSpineItem() == spineItem) {
        retView = pageView;
        //brake the iteration
        return false;
      } else {
        return true;
      }

    }, reverse);

    return retView;
  }

  function forEachItemView(func, reverse) {

    var pageNodes = _$contentFrame.children();

    var count = pageNodes.length;
    var iter = reverse ? function(ix) {
      return ix - 1
    } : function(ix) {
      return ix + 1
    };

    var compare = reverse ? function(ix) {
      return ix >= 0
    } : function(ix) {
      return ix < count
    };

    var start = reverse ? count - 1 : 0;

    for (var i = start; compare(i); i = iter(i)) {

      var $element = pageNodes.eq(i);
      var curView = $element.data("pageView");

      if (curView) {

        if (func(curView) === false) {
          return;
        }
      }
    }
  }

  function firstLoadedView() {

    var firstView = undefined;

    forEachItemView(function(pageView) {

      firstView = pageView;
      return false;

    }, false);

    return firstView;
  }

  function lastLoadedView() {

    var lastView = undefined;

    forEachItemView(function(pageView) {
      lastView = pageView;
      return false;

    }, true);

    return lastView;
  }

  function onPageViewLoaded(pageView, success, $iframe, spineItem, isNewlyLoaded, context) {

    if (success && isNewlyLoaded) {
      self.trigger(Events.CONTENT_DOCUMENT_LOADED, $iframe, spineItem);
    }

  }

  function loadSpineItem(spineItem, callback) {

    removeLoadedItems();

    var scrollPos = scrollTop();

    var loadedView = createPageViewForSpineItem();

    _$contentFrame.append(loadedView.element());

    loadedView.loadSpineItem(spineItem, function(success, $iframe, spineItem, isNewlyLoaded, context) {

      if (success) {

        var continueCallback = function(successFlag) {
          onPageViewLoaded(loadedView, success, $iframe, spineItem, isNewlyLoaded, context);

          callback(loadedView);

          //successFlag should always be true as loadedView iFrame cannot be dead at this stage.
        };

        reachStableContentHeight(1, loadedView, $iframe[0], spineItem.href, spineItem.isFixedLayout(), spineItem.isFixedLayout() ? loadedView.meta_width() : 0, "openPage", continueCallback); // //onIFrameLoad called before this callback, so okay.
      } else {
        console.error("Unable to load " + spineItem.href);

        removePageView(loadedView);
        loadedView = undefined;
      }

      callback(loadedView);

    });

  }

  this.applyStyles = function() {

    setStyles(_userStyles.getStyles(), _$el.parent());

    //because left, top, bottom, right setting ignores padding of parent container
    //we have to take it to account manually
    var elementMargins = Margins.fromElement(_$el);

    setFrameSizesToRectangle(elementMargins.padding);

  };

  this.applyBookStyles = function() {

    forEachItemView(function(pageView) {
      pageView.applyBookStyles();
    }, false);
  };


  this.openPage = function(pageRequest) {

    _stopTransientViewUpdate = true;

    //local helper function
    var doneLoadingSpineItem = function(pageView, pageRequest) {

      _deferredPageRequest = undefined;
      openPageViewElement(pageView, pageRequest);
      _stopTransientViewUpdate = false;
      updateTransientViews(pageView);
    };

    if (pageRequest.spineItem) {

      var pageView = findPageViewForSpineItem(pageRequest.spineItem);
      if (pageView) {
        doneLoadingSpineItem(pageView, pageRequest);
      } else {
        _deferredPageRequest = pageRequest;
        _isLoadingNewSpineItemOnPageRequest = true;

        loadSpineItem(pageRequest.spineItem, function(pageView) {

          setTimeout(function() {
            _isLoadingNewSpineItemOnPageRequest = false;
          }, ON_SCROLL_TIME_DALAY + 100);

          if (pageView && _deferredPageRequest) {
            if (pageView.currentSpineItem() === _deferredPageRequest.spineItem) {
              doneLoadingSpineItem(pageView, _deferredPageRequest);
            } else { //while we where waiting for load new request come
              self.openPage(_deferredPageRequest); //recursion
            }
          } else {
            onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
          }

        });
      }
    } else {
      doneLoadingSpineItem(undefined, pageRequest);
    }
  };

  function openPageViewElement(pageView, pageRequest) {

    var topOffset = 0;
    var pageCount;
    var $element;
    var sfiNav;
    var pageRange;

    if (pageRequest.scrollTop !== undefined) {

      topOffset = pageRequest.scrollTop;
    } else if (pageRequest.spineItemPageIndex !== undefined) {

      var pageIndex;
      pageCount = calculatePageCount();
      if (pageRequest.spineItemPageIndex < 0) {
        pageIndex = 0;
      } else if (pageRequest.spineItemPageIndex >= pageCount) {
        pageIndex = pageCount - 1;
      } else {
        pageIndex = pageRequest.spineItemPageIndex;
      }

      topOffset = pageIndex * viewHeight();
    } else if (pageView && pageRequest.elementId) {

      pageRange = getPageViewRange(pageView);
      sfiNav = pageView.getNavigator();
      $element = sfiNav.getElementById(pageRequest.elementId);

      if (!$element || !$element.length) {
        console.warn("Element id=" + pageRequest.elementId + " not found!");
        return;
      }

      if (isElementVisibleOnScreen(pageView, $element, 60)) {
        //TODO refactoring required
        // this is artificial call because MO player waits for this event to continue playing.
        onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
        return;
      }

      topOffset = sfiNav.getVerticalOffsetForElement($element) + pageRange.top;

    } else if (pageView && pageRequest.elementCfi) {

      pageRange = getPageViewRange(pageView);
      sfiNav = pageView.getNavigator();
      $element = sfiNav.getElementByCfi(pageRequest.elementCfi);

      if (!$element || !$element.length) {
        console.warn("Element cfi=" + pageRequest.elementCfi + " not found!");
        return;
      }

      if (isElementVisibleOnScreen(pageView, $element, 60)) {
        //TODO refactoring required
        // this is artificial call because MO player waits for this event to continue playing.
        onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
        return;
      }

      topOffset = sfiNav.getVerticalOffsetForElement($element) + pageRange.top;

    } else if (pageRequest.firstPage) {

      topOffset = 0;
    } else if (pageRequest.lastPage) {
      pageCount = calculatePageCount();

      if (pageCount === 0) {
        return;
      }

      topOffset = scrollHeight() - viewHeight() - 5;
    } else if (pageView) {

      pageRange = getPageViewRange(pageView);
      topOffset = pageRange.top;
    } else {
      topOffset = 0;
    }

    if (scrollTop() != topOffset) {

      _isSettingScrollPosition = true;
      scrollTo(topOffset, pageRequest);

      setTimeout(function() {
        _isSettingScrollPosition = false;
      }, ON_SCROLL_TIME_DALAY + 100); //we have to wait more than scroll delay to make sure that we don't react on onScroll

    } else {
      onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
    }
  }

  function calculatePageCount() {

    return Math.ceil(scrollHeight() / viewHeight());
  }

  function onPaginationChanged(initiator, paginationRequest_spineItem, paginationRequest_elementId) {
    self.trigger(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED, {
      paginationInfo: self.getPaginationInfo(),
      initiator: initiator,
      spineItem: paginationRequest_spineItem,
      elementId: paginationRequest_elementId
    });
  }

  function scrollTop() {
    return _$contentFrame[0].scrollTop;
  }

  function scrollBottom() {
    return scrollHeight() - (scrollTop() + viewHeight());
  }

  function viewHeight() {
    return _$contentFrame.height();
  }

  function scrollHeight() {
    return _$contentFrame[0].scrollHeight;
  }

  this.openPageNext = function(initiator) {

    var pageRequest;

    if (scrollBottom() > 0) {

      pageRequest = new PageOpenRequest(undefined, initiator);
      pageRequest.scrollTop = scrollTop() + Math.min(scrollBottom(), viewHeight() - SCROLL_MARGIN_TO_SHOW_LAST_VISBLE_LINE);
      openPageViewElement(undefined, pageRequest);
    }

  };

  this.openPagePrev = function(initiator) {

    var pageRequest;

    if (scrollTop() > 0) {

      pageRequest = new PageOpenRequest(undefined, initiator);
      pageRequest.scrollTop = scrollTop() - (viewHeight() - SCROLL_MARGIN_TO_SHOW_LAST_VISBLE_LINE);
      if (pageRequest.scrollTop < 0) {
        pageRequest.scrollTop = 0;
      }

      openPageViewElement(undefined, pageRequest);
    }
  };

  function getVisiblePageViews() {

    var views = [];

    var range = getVisibleRange(-SCROLL_MARGIN_TO_SHOW_LAST_VISBLE_LINE);

    forEachItemView(function(pageView) {

      if (isPageViewVisibleInRange(pageView, range)) {

        views.push(pageView);
      } else if (views.length > 0) {

        return false;
      }

      return true;

    }, false);

    return views;

  }


  function getFirstVisiblePageView() {

    var visibleViews = getVisiblePageViews();

    return visibleViews[0];
  }

  function isPageViewVisibleInRange(pageView, range) {
    var pageViewRange = getPageViewRange(pageView);
    return rangeLength(intersectRanges(pageViewRange, range)) > 0;
  }

  function getPageViewRange(pageView) {
    var range = {
      top: 0,
      bottom: 0
    };

    range.top = pageView.element().position().top + scrollTop();
    range.bottom = range.top + pageView.getCalculatedPageHeight();

    return range;
  }

  this.getFirstVisibleElementCfi = function() {
    var visibleViewPage = getFirstVisiblePageView();
    if (visibleViewPage) {
      return visibleViewPage.getNavigator().getFirstVisibleElementCfi(scrollTop());
    }

    return undefined;
  };

  this.getPaginationInfo = function() {
    var spineItem;
    var pageCount;
    var pageView;
    var pageViewRange;
    var heightAboveViewport;
    var heightBelowViewport;
    var pageCountAbove;
    var pageCountBelow;

    var viewPortRange = getVisibleRange();
    var viewPortHeight = viewPortRange.bottom - viewPortRange.top;

    var paginationInfo = new CurrentPagesInfo(_spine, false);

    var visibleViews = getVisiblePageViews();

    for (var i = 0, count = visibleViews.length; i < count; i++) {

      pageView = visibleViews[i];
      spineItem = pageView.currentSpineItem();
      pageViewRange = getPageViewRange(pageView);

      heightAboveViewport = Math.max(viewPortRange.top - pageViewRange.top, 0);
      heightBelowViewport = Math.max(pageViewRange.bottom - viewPortRange.bottom, 0);

      pageCountAbove = Math.ceil(heightAboveViewport / viewPortHeight);
      pageCountBelow = Math.ceil(heightBelowViewport / viewPortHeight);
      pageCount = pageCountAbove + pageCountBelow + 1;

      paginationInfo.addOpenPage(pageCountAbove, pageCount, spineItem.idref, spineItem.index);
    }

    return paginationInfo;
  };

  this.bookmarkCurrentPage = function() {
    var pageView = getFirstVisiblePageView();

    if (!pageView) {

      return new BookmarkData("", "");
    }

    return new BookmarkData(pageView.currentSpineItem().idref, self.getFirstVisibleElementCfi());
  };


  this.getLoadedSpineItems = function() {
    var spineItems = [];

    forEachItemView(function(pageView) {
      spineItems.push(pageView.currentSpineItem());
    }, false);

    return spineItems;
  };

  this.getElement = function(spineItem, selector) {
    var element = undefined;

    forEachItemView(function(pageView) {
      if (pageView.currentSpineItem() == spineItem) {

        element = pageView.getNavigator().getElement(selector);

        return false;
      }

      return true;

    }, false);

    return element;
  };

  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var found = undefined;

    forEachItemView(function(pageView) {
      if (pageView.currentSpineItem() == spineItem) {

        found = pageView.getElementByCfi(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist);
        return false;
      }

      return true;

    }, false);

    if (!found) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return found;
  };

  this.getElementById = function(spineItem, id) {

    var found = undefined;

    forEachItemView(function(pageView) {
      if (pageView.currentSpineItem() == spineItem) {

        found = pageView.getNavigator().getElementById(id);
        return false;
      }

      return true;

    }, false);

    if (!found) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return found;
  };

  this.getFirstVisibleMediaOverlayElement = function() {
    var viewPortRange = getVisibleRange();

    var moElement = undefined;
    var normalizedRange = {
      top: 0,
      bottom: 0
    };
    var pageViewRange;

    var steppedToVisiblePage = false;

    forEachItemView(function(pageView) {
      pageViewRange = getPageViewRange(pageView);

      normalizedRange.top = Math.max(pageViewRange.top, viewPortRange.top) - pageViewRange.top;
      normalizedRange.bottom = Math.min(pageViewRange.bottom, viewPortRange.bottom) - pageViewRange.top;

      if (rangeLength(normalizedRange) > 0) {
        steppedToVisiblePage = true;

        moElement = pageView.getNavigator().getFirstVisibleMediaOverlayElement(normalizedRange);
        if (moElement) {
          return false;
        }
      } else if (steppedToVisiblePage) {
        return false;
      }

      return true; //continue iteration

    }, false);

    return moElement;
  };

  // /**
  //  * @deprecated
  //  */
  // this.getVisibleMediaOverlayElements = function() {
  //     var viewPortRange = getVisibleRange();
  // 
  //     var pageMoElements;
  //     var moElements = [];
  //     var normalizedRange = {top: 0, bottom: 0};
  //     var pageViewRange;
  // 
  //     forEachItemView(function(pageView){
  //         pageViewRange = getPageViewRange(pageView);
  // 
  //         normalizedRange.top = Math.max(pageViewRange.top, viewPortRange.top) - pageViewRange.top;
  //         normalizedRange.bottom = Math.min(pageViewRange.bottom, viewPortRange.bottom) - pageViewRange.top;
  // 
  //         if(rangeLength(normalizedRange) > 0) {
  //             pageMoElements = pageView.getNavigator().getVisibleMediaOverlayElements(normalizedRange);
  //             moElements.push.apply(moElements, pageMoElements);
  //         }
  //     }, false);
  // 
  //     return moElements;
  // };

  function getVisibleRange(expand) {
    if (expand !== 0 && !expand) {
      expand = 0;
    }

    var range = {

      top: scrollTop() - expand,
      bottom: scrollTop() + viewHeight() + expand
    };

    if (range.top < 0) {
      range.top = 0;
    }

    if (range.bottom > scrollHeight()) {
      range.bottom = scrollHeight();
    }

    return range;

  }

  function intersectRanges(r1, r2) {
    return {

      top: Math.max(r1.top, r2.top),
      bottom: Math.min(r1.bottom, r2.bottom)
    };
  }

  function rangeLength(range) {
    if (range.bottom < range.top) {
      return 0;
    }

    return range.bottom - range.top;
  }

  function isElementVisibleOnScreen(pageView, $element, percentVisible) {

    var elementRange = getElementRange(pageView, $element);

    return isRangeIsVisibleOnScreen(elementRange, percentVisible);
  }

  function isRangeIsVisibleOnScreen(range, percentVisible) {

    var visibleRange = getVisibleRange();

    var smallestVisibleLength = Math.min(rangeLength(visibleRange), rangeLength(range));
    if (smallestVisibleLength === 0) {
      smallestVisibleLength = 5; // if element is 0 height we will set it to arbitrary 5 pixels - not to divide by 0
    }

    var intersectionRange = intersectRanges(visibleRange, range);

    var visiblePercent = (rangeLength(intersectionRange) / smallestVisibleLength) * 100;

    return visiblePercent >= percentVisible;
  }

  function getElementRange(pageView, $element) {

    var pageRange = getPageViewRange(pageView);

    var elementRange = {
      top: 0,
      bottom: 0
    };
    elementRange.top = $element.offset().top + pageRange.top;
    elementRange.bottom = elementRange.top + $element.height();

    return elementRange;
  }

  this.insureElementVisibility = function(spineItemId, element, initiator) {
    var pageView = undefined;

    forEachItemView(function(pv) {
      if (pv.currentSpineItem().idref === spineItemId) {

        pageView = pv;
        return false;
      }

      return true;
    }, false);

    if (!pageView) {
      console.warn("Page for element " + element + " not found");
      return;
    }

    var $element = $(element);

    var elementRange = getElementRange(pageView, $element);

    if (!isRangeIsVisibleOnScreen(elementRange, 60)) {

      var spineItem = _spine.getItemById(spineItemId);
      var openPageRequest = new PageOpenRequest(spineItem, initiator);
      openPageRequest.scrollTop = elementRange.top;

      self.openPage(openPageRequest);
    }

  }
}

module.exports = ScrollView
},{"../events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/events.js","../helpers/is-iframe-alive":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/is-iframe-alive.js","../helpers/load-template":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/load-template.js","../helpers/margins":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/margins.js","../helpers/set-styles":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/helpers/set-styles.js","../internal-events":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/internal-events.js","../models/bookmark-data":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/bookmark-data.js","../models/current-pages-info":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/current-pages-info.js","../models/page-open-request":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/page-open-request.js","../models/viewer-settings":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/models/viewer-settings.js","./one-page-view":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/sdk/views/one-page-view.js","backbone":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/backbone/backbone.js","jquery":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/jquery/dist/jquery.js","underscore":"/Applications/XAMPP/xamppfiles/htdocs/readium_pg/node_modules/underscore/underscore.js"}]},{},["/Applications/XAMPP/xamppfiles/htdocs/readium_pg/src/app.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWIvanF1ZXJ5LXNpemVzLmpzIiwibm9kZV9tb2R1bGVzL0JhY2tib25lL2JhY2tib25lLmpzIiwibm9kZV9tb2R1bGVzL1VSSWpzL3NyYy9JUHY2LmpzIiwibm9kZV9tb2R1bGVzL1VSSWpzL3NyYy9TZWNvbmRMZXZlbERvbWFpbnMuanMiLCJub2RlX21vZHVsZXMvVVJJanMvc3JjL1VSSS5qcyIsIm5vZGVfbW9kdWxlcy9VUklqcy9zcmMvcHVueWNvZGUuanMiLCJub2RlX21vZHVsZXMvYmFja2JvbmUvYmFja2JvbmUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2VwdWItY2ZpL3BhcnNlci9lcHViLWNmaS5qcyIsIm5vZGVfbW9kdWxlcy9lcHViLWNmaS9zcmMvZXJyb3JzL2NmaS1hc3NlcnRpb24uanMiLCJub2RlX21vZHVsZXMvZXB1Yi1jZmkvc3JjL2Vycm9ycy9ub2RlLXR5cGUuanMiLCJub2RlX21vZHVsZXMvZXB1Yi1jZmkvc3JjL2Vycm9ycy9vdXQtb2YtcmFuZ2UuanMiLCJub2RlX21vZHVsZXMvZXB1Yi1jZmkvc3JjL2Vycm9ycy90ZXJtaW51cy5qcyIsIm5vZGVfbW9kdWxlcy9lcHViLWNmaS9zcmMvZ2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2VwdWItY2ZpL3NyYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lcHViLWNmaS9zcmMvaW5zdHJ1Y3Rpb25zLmpzIiwibm9kZV9tb2R1bGVzL2VwdWItY2ZpL3NyYy9pbnRlcnByZXRlci5qcyIsIm5vZGVfbW9kdWxlcy9lcHViLWNmaS9zcmMvcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIm5vZGVfbW9kdWxlcy9yYW5neS9saWIvcmFuZ3ktY29yZS5qcyIsIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL3VuZGVyc2NvcmUuanMiLCJwYWNrYWdlLmpzb24iLCJzcmMvYXBwLmpzIiwic3JjL2VwdWItYW5ub3RhdGlvbnMvYW5ub3RhdGlvbnMuanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy9ib29rbWFyay12aWV3LmpzIiwic3JjL2VwdWItYW5ub3RhdGlvbnMvYm9va21hcmsuanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy9oaWdobGlnaHQtZ3JvdXAuanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy9oaWdobGlnaHQtdmlldy5qcyIsInNyYy9lcHViLWFubm90YXRpb25zL2hpZ2hsaWdodC5qcyIsInNyYy9lcHViLWFubm90YXRpb25zL2ltYWdlLWFubm90YXRpb24uanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy9pbmRleC5qcyIsInNyYy9lcHViLWFubm90YXRpb25zL3JlZmxvd2FibGUtYW5ub3RhdGlvbnMuanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy90ZXh0LWxpbmUtaW5mZXJyZXIuanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy91bmRlcmxpbmUtZ3JvdXAuanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy91bmRlcmxpbmUtdmlldy5qcyIsInNyYy9lcHViLWFubm90YXRpb25zL3VuZGVybGluZS5qcyIsInNyYy9lcHViLWZldGNoL2NvbnRlbnQtZG9jdW1lbnQtZmV0Y2hlci5qcyIsInNyYy9lcHViLWZldGNoL2Rpc2NvdmVyLWNvbnRlbnQtdHlwZS5qcyIsInNyYy9lcHViLWZldGNoL2VuY3J5cHRpb24taGFuZGxlci5qcyIsInNyYy9lcHViLWZldGNoL21hcmt1cC1wYXJzZXIuanMiLCJzcmMvZXB1Yi1mZXRjaC9wbGFpbi1yZXNvdXJjZS1mZXRjaGVyLmpzIiwic3JjL2VwdWItZmV0Y2gvcHVibGljYXRpb24tZmV0Y2hlci5qcyIsInNyYy9lcHViLWZldGNoL3Jlc291cmNlLWNhY2hlLmpzIiwic3JjL2VwdWItZmV0Y2gvemlwLXJlc291cmNlLWZldGNoZXIuanMiLCJzcmMvZXB1Yi9tYW5pZmVzdC5qcyIsInNyYy9lcHViL21ldGFkYXRhLmpzIiwic3JjL2VwdWIvcGFja2FnZS1kb2N1bWVudC1wYXJzZXIuanMiLCJzcmMvZXB1Yi9wYWNrYWdlLWRvY3VtZW50LmpzIiwic3JjL2VwdWIvc21pbC1kb2N1bWVudC1wYXJzZXIuanMiLCJzcmMvaW5kZXguanMiLCJzcmMvcmVhZGVyLmpzIiwic3JjL3Nkay9jb2xsZWN0aW9ucy9zdHlsZS5qcyIsInNyYy9zZGsvZXZlbnRzLmpzIiwic3JjL3Nkay9oZWxwZXJzL2JlZ2lucy13aXRoLmpzIiwic3JjL3Nkay9oZWxwZXJzL2Nzcy10cmFuc2Zvcm0tc3RyaW5nLmpzIiwic3JjL3Nkay9oZWxwZXJzL2Nzcy10cmFuc2l0aW9uLmpzIiwic3JjL3Nkay9oZWxwZXJzL2RlZHVjZS1zeW50aGV0aWMtc3ByZWFkLmpzIiwic3JjL3Nkay9oZWxwZXJzL2VuZHMtd2l0aC5qcyIsInNyYy9zZGsvaGVscGVycy9lc2NhcGUtanF1ZXJ5LXNlbGVjdG9yLmpzIiwic3JjL3Nkay9oZWxwZXJzL2V4dGVuZGVkLXRocm90dGxlLmpzIiwic3JjL3Nkay9oZWxwZXJzL2dldC1vcmllbnRhdGlvbi5qcyIsInNyYy9zZGsvaGVscGVycy9pbmRleC5qcyIsInNyYy9zZGsvaGVscGVycy9pcy1pZnJhbWUtYWxpdmUuanMiLCJzcmMvc2RrL2hlbHBlcnMvaXMtcmVuZGl0aW9uLXNwcmVhZC1wZXJtaXR0ZWQtZm9yLWl0ZW0uanMiLCJzcmMvc2RrL2hlbHBlcnMvbG9hZC10ZW1wbGF0ZS5qcyIsInNyYy9zZGsvaGVscGVycy9tYXJnaW5zLmpzIiwic3JjL3Nkay9oZWxwZXJzL3JlY3QuanMiLCJzcmMvc2RrL2hlbHBlcnMvcmVtb3ZlLWZyb20tc3RyaW5nLmpzIiwic3JjL3Nkay9oZWxwZXJzL3Jlc29sdmUtY29udGVudC1yZWYuanMiLCJzcmMvc2RrL2hlbHBlcnMvc2V0LXN0eWxlcy5qcyIsInNyYy9zZGsvaGVscGVycy90cmlnZ2VyLWxheW91dC5qcyIsInNyYy9zZGsvaGVscGVycy91cGRhdGUtaHRtbC1mb250LXNpemUuanMiLCJzcmMvc2RrL2luZGV4LmpzIiwic3JjL3Nkay9pbnRlcm5hbC1ldmVudHMuanMiLCJzcmMvc2RrL21vZGVscy9ib29rbWFyay1kYXRhLmpzIiwic3JjL3Nkay9tb2RlbHMvY3VycmVudC1wYWdlcy1pbmZvLmpzIiwic3JjL3Nkay9tb2RlbHMvbWVkaWEtb3ZlcmxheS5qcyIsInNyYy9zZGsvbW9kZWxzL3BhY2thZ2UuanMiLCJzcmMvc2RrL21vZGVscy9wYWdlLW9wZW4tcmVxdWVzdC5qcyIsInNyYy9zZGsvbW9kZWxzL3NtaWwtaXRlcmF0b3IuanMiLCJzcmMvc2RrL21vZGVscy9zbWlsLW1vZGVsL2F1ZGlvLW5vZGUuanMiLCJzcmMvc2RrL21vZGVscy9zbWlsLW1vZGVsL2luZGV4LmpzIiwic3JjL3Nkay9tb2RlbHMvc21pbC1tb2RlbC9tZWRpYS1ub2RlLmpzIiwic3JjL3Nkay9tb2RlbHMvc21pbC1tb2RlbC9wYXItbm9kZS5qcyIsInNyYy9zZGsvbW9kZWxzL3NtaWwtbW9kZWwvc2VxLW5vZGUuanMiLCJzcmMvc2RrL21vZGVscy9zbWlsLW1vZGVsL3NtaWwtbm9kZS5qcyIsInNyYy9zZGsvbW9kZWxzL3NtaWwtbW9kZWwvdGV4dC1ub2RlLmpzIiwic3JjL3Nkay9tb2RlbHMvc21pbC1tb2RlbC90aW1lLWNvbnRhaW5lci1ub2RlLmpzIiwic3JjL3Nkay9tb2RlbHMvc3BpbmUtaXRlbS1jb25zdGFudHMuanMiLCJzcmMvc2RrL21vZGVscy9zcGluZS1pdGVtLmpzIiwic3JjL3Nkay9tb2RlbHMvc3BpbmUuanMiLCJzcmMvc2RrL21vZGVscy9zcHJlYWQuanMiLCJzcmMvc2RrL21vZGVscy9zdHlsZS5qcyIsInNyYy9zZGsvbW9kZWxzL3N3aXRjaGVzLmpzIiwic3JjL3Nkay9tb2RlbHMvdHJpZ2dlci5qcyIsInNyYy9zZGsvbW9kZWxzL3ZpZXdlci1zZXR0aW5ncy5qcyIsInNyYy9zZGsvbmF2aWdhdG9yLXNoaW0uanMiLCJzcmMvc2RrL3ZpZXdzL2Fubm90YXRpb25zLW1hbmFnZXIuanMiLCJzcmMvc2RrL3ZpZXdzL2F1ZGlvLXBsYXllci5qcyIsInNyYy9zZGsvdmlld3MvY2ZpLW5hdmlnYXRpb24tbG9naWMuanMiLCJzcmMvc2RrL3ZpZXdzL2NvbnN0YW50cy5qcyIsInNyYy9zZGsvdmlld3MvZml4ZWQtdmlldy5qcyIsInNyYy9zZGsvdmlld3MvaWZyYW1lLWxvYWRlci5qcyIsInNyYy9zZGsvdmlld3MvaW5kZXguanMiLCJzcmMvc2RrL3ZpZXdzL2ludGVybmFsLWxpbmtzLXN1cHBvcnQuanMiLCJzcmMvc2RrL3ZpZXdzL21lZGlhLW92ZXJsYXktZGF0YS1pbmplY3Rvci5qcyIsInNyYy9zZGsvdmlld3MvbWVkaWEtb3ZlcmxheS1lbGVtZW50LWhpZ2hsaWdodGVyLmpzIiwic3JjL3Nkay92aWV3cy9tZWRpYS1vdmVybGF5LXBsYXllci5qcyIsInNyYy9zZGsvdmlld3Mvb25lLXBhZ2Utdmlldy5qcyIsInNyYy9zZGsvdmlld3MvcmVhZGVyLXZpZXcuanMiLCJzcmMvc2RrL3ZpZXdzL3JlZmxvd2FibGUtdmlldy5qcyIsInNyYy9zZGsvdmlld3Mvc2Nyb2xsLXZpZXcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4a0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDbDlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDNWZBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2o2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5VkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1VUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOVdBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3IvUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcnJIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3orQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbGRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25KQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwUEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcFNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1bUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ24yQkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOXJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5ZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDajFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdjlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzEyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9icmFtc3RlaW4vanNpemVzL21hc3Rlci9saWIvanF1ZXJ5LnNpemVzLmpzXG5cbi8qKlxuICogQHByZXNlcnZlIEpTaXplcyAtIEpRdWVyeSBwbHVnaW4gdjAuMzNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgcmV2aXNlZCBCU0QgTGljZW5zZS5cbiAqIENvcHlyaWdodCAyMDA4LTIwMTAgQnJhbSBTdGVpblxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxuXG52YXIgbnVtID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCkgfHwgMDtcbiAgfTtcblxuLyoqXG4gICogU2V0cyBvciBnZXRzIHRoZSB2YWx1ZXMgZm9yIG1pbi13aWR0aCwgbWluLWhlaWdodCwgbWF4LXdpZHRoXG4gICogYW5kIG1heC1oZWlnaHQuXG4gICovXG4kLmVhY2goWydtaW4nLCAnbWF4J10sIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG4gICQuZm5bbmFtZSArICdTaXplJ10gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgd2lkdGgsIGhlaWdodDtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZS53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuY3NzKG5hbWUgKyAnLXdpZHRoJywgdmFsdWUud2lkdGgpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuY3NzKG5hbWUgKyAnLWhlaWdodCcsIHZhbHVlLmhlaWdodCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZHRoID0gdGhpcy5jc3MobmFtZSArICctd2lkdGgnKTtcbiAgICAgIGhlaWdodCA9IHRoaXMuY3NzKG5hbWUgKyAnLWhlaWdodCcpO1xuICAgICAgLy8gQXBwYXJlbnRseTpcbiAgICAgIC8vICAqIE9wZXJhIHJldHVybnMgLTFweCBpbnN0ZWFkIG9mIG5vbmVcbiAgICAgIC8vICAqIElFNiByZXR1cm5zIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIG5vbmVcbiAgICAgIHJldHVybiB7J3dpZHRoJzogKG5hbWUgPT09ICdtYXgnICYmICh3aWR0aCA9PT0gdW5kZWZpbmVkIHx8IHdpZHRoID09PSAnbm9uZScgfHwgbnVtKHdpZHRoKSA9PT0gLTEpICYmIE51bWJlci5NQVhfVkFMVUUpIHx8IG51bSh3aWR0aCksIFxuICAgICAgICAgICdoZWlnaHQnOiAobmFtZSA9PT0gJ21heCcgJiYgKGhlaWdodCA9PT0gdW5kZWZpbmVkIHx8IGhlaWdodCA9PT0gJ25vbmUnIHx8IG51bShoZWlnaHQpID09PSAtMSkgJiYgTnVtYmVyLk1BWF9WQUxVRSkgfHwgbnVtKGhlaWdodCl9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuXG4vKipcbiAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGFuIGVsZW1lbnQgaXMgdmlzaWJsZS5cbiAgKi9cbiQuZm4uaXNWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pcygnOnZpc2libGUnKTtcbn07XG5cbi8qKlxuICAqIFNldHMgb3IgZ2V0cyB0aGUgdmFsdWVzIGZvciBib3JkZXIsIG1hcmdpbiBhbmQgcGFkZGluZy5cbiAgKi9cbiQuZWFjaChbJ2JvcmRlcicsICdtYXJnaW4nLCAncGFkZGluZyddLCBmdW5jdGlvbiAoaSwgbmFtZSkge1xuICAkLmZuW25hbWVdID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUudG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jc3MobmFtZSArICctdG9wJyArIChuYW1lID09PSAnYm9yZGVyJyA/ICctd2lkdGgnIDogJycpLCB2YWx1ZS50b3ApO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLmJvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuY3NzKG5hbWUgKyAnLWJvdHRvbScgKyAobmFtZSA9PT0gJ2JvcmRlcicgPyAnLXdpZHRoJyA6ICcnKSwgdmFsdWUuYm90dG9tKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZS5sZWZ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jc3MobmFtZSArICctbGVmdCcgKyAobmFtZSA9PT0gJ2JvcmRlcicgPyAnLXdpZHRoJyA6ICcnKSwgdmFsdWUubGVmdCk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUucmlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmNzcyhuYW1lICsgJy1yaWdodCcgKyAobmFtZSA9PT0gJ2JvcmRlcicgPyAnLXdpZHRoJyA6ICcnKSwgdmFsdWUucmlnaHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge3RvcDogbnVtKHRoaXMuY3NzKG5hbWUgKyAnLXRvcCcgKyAobmFtZSA9PT0gJ2JvcmRlcicgPyAnLXdpZHRoJyA6ICcnKSkpLFxuICAgICAgICAgIGJvdHRvbTogbnVtKHRoaXMuY3NzKG5hbWUgKyAnLWJvdHRvbScgKyAobmFtZSA9PT0gJ2JvcmRlcicgPyAnLXdpZHRoJyA6ICcnKSkpLFxuICAgICAgICAgIGxlZnQ6IG51bSh0aGlzLmNzcyhuYW1lICsgJy1sZWZ0JyArIChuYW1lID09PSAnYm9yZGVyJyA/ICctd2lkdGgnIDogJycpKSksXG4gICAgICAgICAgcmlnaHQ6IG51bSh0aGlzLmNzcyhuYW1lICsgJy1yaWdodCcgKyAobmFtZSA9PT0gJ2JvcmRlcicgPyAnLXdpZHRoJyA6ICcnKSkpfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcbiIsIi8vICAgICBCYWNrYm9uZS5qcyAxLjEuMlxuXG4vLyAgICAgKGMpIDIwMTAtMjAxNCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIEJhY2tib25lIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLy8gICAgIEZvciBhbGwgZGV0YWlscyBhbmQgZG9jdW1lbnRhdGlvbjpcbi8vICAgICBodHRwOi8vYmFja2JvbmVqcy5vcmdcblxuKGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblxuICAvLyBTZXQgdXAgQmFja2JvbmUgYXBwcm9wcmlhdGVseSBmb3IgdGhlIGVudmlyb25tZW50LiBTdGFydCB3aXRoIEFNRC5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ3VuZGVyc2NvcmUnLCAnanF1ZXJ5JywgJ2V4cG9ydHMnXSwgZnVuY3Rpb24oXywgJCwgZXhwb3J0cykge1xuICAgICAgLy8gRXhwb3J0IGdsb2JhbCBldmVuIGluIEFNRCBjYXNlIGluIGNhc2UgdGhpcyBzY3JpcHQgaXMgbG9hZGVkIHdpdGhcbiAgICAgIC8vIG90aGVycyB0aGF0IG1heSBzdGlsbCBleHBlY3QgYSBnbG9iYWwgQmFja2JvbmUuXG4gICAgICByb290LkJhY2tib25lID0gZmFjdG9yeShyb290LCBleHBvcnRzLCBfLCAkKTtcbiAgICB9KTtcblxuICAvLyBOZXh0IGZvciBOb2RlLmpzIG9yIENvbW1vbkpTLiBqUXVlcnkgbWF5IG5vdCBiZSBuZWVkZWQgYXMgYSBtb2R1bGUuXG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG4gICAgZmFjdG9yeShyb290LCBleHBvcnRzLCBfKTtcblxuICAvLyBGaW5hbGx5LCBhcyBhIGJyb3dzZXIgZ2xvYmFsLlxuICB9IGVsc2Uge1xuICAgIHJvb3QuQmFja2JvbmUgPSBmYWN0b3J5KHJvb3QsIHt9LCByb290Ll8sIChyb290LmpRdWVyeSB8fCByb290LlplcHRvIHx8IHJvb3QuZW5kZXIgfHwgcm9vdC4kKSk7XG4gIH1cblxufSh0aGlzLCBmdW5jdGlvbihyb290LCBCYWNrYm9uZSwgXywgJCkge1xuXG4gIC8vIEluaXRpYWwgU2V0dXBcbiAgLy8gLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgQmFja2JvbmVgIHZhcmlhYmxlLCBzbyB0aGF0IGl0IGNhbiBiZVxuICAvLyByZXN0b3JlZCBsYXRlciBvbiwgaWYgYG5vQ29uZmxpY3RgIGlzIHVzZWQuXG4gIHZhciBwcmV2aW91c0JhY2tib25lID0gcm9vdC5CYWNrYm9uZTtcblxuICAvLyBDcmVhdGUgbG9jYWwgcmVmZXJlbmNlcyB0byBhcnJheSBtZXRob2RzIHdlJ2xsIHdhbnQgdG8gdXNlIGxhdGVyLlxuICB2YXIgYXJyYXkgPSBbXTtcbiAgdmFyIHB1c2ggPSBhcnJheS5wdXNoO1xuICB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiAgdmFyIHNwbGljZSA9IGFycmF5LnNwbGljZTtcblxuICAvLyBDdXJyZW50IHZlcnNpb24gb2YgdGhlIGxpYnJhcnkuIEtlZXAgaW4gc3luYyB3aXRoIGBwYWNrYWdlLmpzb25gLlxuICBCYWNrYm9uZS5WRVJTSU9OID0gJzEuMS4yJztcblxuICAvLyBGb3IgQmFja2JvbmUncyBwdXJwb3NlcywgalF1ZXJ5LCBaZXB0bywgRW5kZXIsIG9yIE15IExpYnJhcnkgKGtpZGRpbmcpIG93bnNcbiAgLy8gdGhlIGAkYCB2YXJpYWJsZS5cbiAgQmFja2JvbmUuJCA9ICQ7XG5cbiAgLy8gUnVucyBCYWNrYm9uZS5qcyBpbiAqbm9Db25mbGljdCogbW9kZSwgcmV0dXJuaW5nIHRoZSBgQmFja2JvbmVgIHZhcmlhYmxlXG4gIC8vIHRvIGl0cyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIEJhY2tib25lIG9iamVjdC5cbiAgQmFja2JvbmUubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJvb3QuQmFja2JvbmUgPSBwcmV2aW91c0JhY2tib25lO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFR1cm4gb24gYGVtdWxhdGVIVFRQYCB0byBzdXBwb3J0IGxlZ2FjeSBIVFRQIHNlcnZlcnMuIFNldHRpbmcgdGhpcyBvcHRpb25cbiAgLy8gd2lsbCBmYWtlIGBcIlBBVENIXCJgLCBgXCJQVVRcImAgYW5kIGBcIkRFTEVURVwiYCByZXF1ZXN0cyB2aWEgdGhlIGBfbWV0aG9kYCBwYXJhbWV0ZXIgYW5kXG4gIC8vIHNldCBhIGBYLUh0dHAtTWV0aG9kLU92ZXJyaWRlYCBoZWFkZXIuXG4gIEJhY2tib25lLmVtdWxhdGVIVFRQID0gZmFsc2U7XG5cbiAgLy8gVHVybiBvbiBgZW11bGF0ZUpTT05gIHRvIHN1cHBvcnQgbGVnYWN5IHNlcnZlcnMgdGhhdCBjYW4ndCBkZWFsIHdpdGggZGlyZWN0XG4gIC8vIGBhcHBsaWNhdGlvbi9qc29uYCByZXF1ZXN0cyAuLi4gd2lsbCBlbmNvZGUgdGhlIGJvZHkgYXNcbiAgLy8gYGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZGAgaW5zdGVhZCBhbmQgd2lsbCBzZW5kIHRoZSBtb2RlbCBpbiBhXG4gIC8vIGZvcm0gcGFyYW0gbmFtZWQgYG1vZGVsYC5cbiAgQmFja2JvbmUuZW11bGF0ZUpTT04gPSBmYWxzZTtcblxuICAvLyBCYWNrYm9uZS5FdmVudHNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gQSBtb2R1bGUgdGhhdCBjYW4gYmUgbWl4ZWQgaW4gdG8gKmFueSBvYmplY3QqIGluIG9yZGVyIHRvIHByb3ZpZGUgaXQgd2l0aFxuICAvLyBjdXN0b20gZXZlbnRzLiBZb3UgbWF5IGJpbmQgd2l0aCBgb25gIG9yIHJlbW92ZSB3aXRoIGBvZmZgIGNhbGxiYWNrXG4gIC8vIGZ1bmN0aW9ucyB0byBhbiBldmVudDsgYHRyaWdnZXJgLWluZyBhbiBldmVudCBmaXJlcyBhbGwgY2FsbGJhY2tzIGluXG4gIC8vIHN1Y2Nlc3Npb24uXG4gIC8vXG4gIC8vICAgICB2YXIgb2JqZWN0ID0ge307XG4gIC8vICAgICBfLmV4dGVuZChvYmplY3QsIEJhY2tib25lLkV2ZW50cyk7XG4gIC8vICAgICBvYmplY3Qub24oJ2V4cGFuZCcsIGZ1bmN0aW9uKCl7IGFsZXJ0KCdleHBhbmRlZCcpOyB9KTtcbiAgLy8gICAgIG9iamVjdC50cmlnZ2VyKCdleHBhbmQnKTtcbiAgLy9cbiAgdmFyIEV2ZW50cyA9IEJhY2tib25lLkV2ZW50cyA9IHtcblxuICAgIC8vIEJpbmQgYW4gZXZlbnQgdG8gYSBgY2FsbGJhY2tgIGZ1bmN0aW9uLiBQYXNzaW5nIGBcImFsbFwiYCB3aWxsIGJpbmRcbiAgICAvLyB0aGUgY2FsbGJhY2sgdG8gYWxsIGV2ZW50cyBmaXJlZC5cbiAgICBvbjogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgIGlmICghZXZlbnRzQXBpKHRoaXMsICdvbicsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pIHx8ICFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gICAgICB0aGlzLl9ldmVudHMgfHwgKHRoaXMuX2V2ZW50cyA9IHt9KTtcbiAgICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNbbmFtZV0gfHwgKHRoaXMuX2V2ZW50c1tuYW1lXSA9IFtdKTtcbiAgICAgIGV2ZW50cy5wdXNoKHtjYWxsYmFjazogY2FsbGJhY2ssIGNvbnRleHQ6IGNvbnRleHQsIGN0eDogY29udGV4dCB8fCB0aGlzfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gQmluZCBhbiBldmVudCB0byBvbmx5IGJlIHRyaWdnZXJlZCBhIHNpbmdsZSB0aW1lLiBBZnRlciB0aGUgZmlyc3QgdGltZVxuICAgIC8vIHRoZSBjYWxsYmFjayBpcyBpbnZva2VkLCBpdCB3aWxsIGJlIHJlbW92ZWQuXG4gICAgb25jZTogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgIGlmICghZXZlbnRzQXBpKHRoaXMsICdvbmNlJywgbmFtZSwgW2NhbGxiYWNrLCBjb250ZXh0XSkgfHwgIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBvbmNlID0gXy5vbmNlKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLm9mZihuYW1lLCBvbmNlKTtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgICAgb25jZS5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIG9uY2UsIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICAvLyBSZW1vdmUgb25lIG9yIG1hbnkgY2FsbGJhY2tzLiBJZiBgY29udGV4dGAgaXMgbnVsbCwgcmVtb3ZlcyBhbGxcbiAgICAvLyBjYWxsYmFja3Mgd2l0aCB0aGF0IGZ1bmN0aW9uLiBJZiBgY2FsbGJhY2tgIGlzIG51bGwsIHJlbW92ZXMgYWxsXG4gICAgLy8gY2FsbGJhY2tzIGZvciB0aGUgZXZlbnQuIElmIGBuYW1lYCBpcyBudWxsLCByZW1vdmVzIGFsbCBib3VuZFxuICAgIC8vIGNhbGxiYWNrcyBmb3IgYWxsIGV2ZW50cy5cbiAgICBvZmY6IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmV0YWluLCBldiwgZXZlbnRzLCBuYW1lcywgaSwgbCwgaiwgaztcbiAgICAgIGlmICghdGhpcy5fZXZlbnRzIHx8ICFldmVudHNBcGkodGhpcywgJ29mZicsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pKSByZXR1cm4gdGhpcztcbiAgICAgIGlmICghbmFtZSAmJiAhY2FsbGJhY2sgJiYgIWNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gdm9pZCAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIG5hbWVzID0gbmFtZSA/IFtuYW1lXSA6IF8ua2V5cyh0aGlzLl9ldmVudHMpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgIGlmIChldmVudHMgPSB0aGlzLl9ldmVudHNbbmFtZV0pIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHNbbmFtZV0gPSByZXRhaW4gPSBbXTtcbiAgICAgICAgICBpZiAoY2FsbGJhY2sgfHwgY29udGV4dCkge1xuICAgICAgICAgICAgZm9yIChqID0gMCwgayA9IGV2ZW50cy5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgICAgZXYgPSBldmVudHNbal07XG4gICAgICAgICAgICAgIGlmICgoY2FsbGJhY2sgJiYgY2FsbGJhY2sgIT09IGV2LmNhbGxiYWNrICYmIGNhbGxiYWNrICE9PSBldi5jYWxsYmFjay5fY2FsbGJhY2spIHx8XG4gICAgICAgICAgICAgICAgICAoY29udGV4dCAmJiBjb250ZXh0ICE9PSBldi5jb250ZXh0KSkge1xuICAgICAgICAgICAgICAgIHJldGFpbi5wdXNoKGV2KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXJldGFpbi5sZW5ndGgpIGRlbGV0ZSB0aGlzLl9ldmVudHNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFRyaWdnZXIgb25lIG9yIG1hbnkgZXZlbnRzLCBmaXJpbmcgYWxsIGJvdW5kIGNhbGxiYWNrcy4gQ2FsbGJhY2tzIGFyZVxuICAgIC8vIHBhc3NlZCB0aGUgc2FtZSBhcmd1bWVudHMgYXMgYHRyaWdnZXJgIGlzLCBhcGFydCBmcm9tIHRoZSBldmVudCBuYW1lXG4gICAgLy8gKHVubGVzcyB5b3UncmUgbGlzdGVuaW5nIG9uIGBcImFsbFwiYCwgd2hpY2ggd2lsbCBjYXVzZSB5b3VyIGNhbGxiYWNrIHRvXG4gICAgLy8gcmVjZWl2ZSB0aGUgdHJ1ZSBuYW1lIG9mIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgYXJndW1lbnQpLlxuICAgIHRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGlmICghdGhpcy5fZXZlbnRzKSByZXR1cm4gdGhpcztcbiAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgaWYgKCFldmVudHNBcGkodGhpcywgJ3RyaWdnZXInLCBuYW1lLCBhcmdzKSkgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdO1xuICAgICAgdmFyIGFsbEV2ZW50cyA9IHRoaXMuX2V2ZW50cy5hbGw7XG4gICAgICBpZiAoZXZlbnRzKSB0cmlnZ2VyRXZlbnRzKGV2ZW50cywgYXJncyk7XG4gICAgICBpZiAoYWxsRXZlbnRzKSB0cmlnZ2VyRXZlbnRzKGFsbEV2ZW50cywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBUZWxsIHRoaXMgb2JqZWN0IHRvIHN0b3AgbGlzdGVuaW5nIHRvIGVpdGhlciBzcGVjaWZpYyBldmVudHMgLi4uIG9yXG4gICAgLy8gdG8gZXZlcnkgb2JqZWN0IGl0J3MgY3VycmVudGx5IGxpc3RlbmluZyB0by5cbiAgICBzdG9wTGlzdGVuaW5nOiBmdW5jdGlvbihvYmosIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgbGlzdGVuaW5nVG8gPSB0aGlzLl9saXN0ZW5pbmdUbztcbiAgICAgIGlmICghbGlzdGVuaW5nVG8pIHJldHVybiB0aGlzO1xuICAgICAgdmFyIHJlbW92ZSA9ICFuYW1lICYmICFjYWxsYmFjaztcbiAgICAgIGlmICghY2FsbGJhY2sgJiYgdHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSBjYWxsYmFjayA9IHRoaXM7XG4gICAgICBpZiAob2JqKSAobGlzdGVuaW5nVG8gPSB7fSlbb2JqLl9saXN0ZW5JZF0gPSBvYmo7XG4gICAgICBmb3IgKHZhciBpZCBpbiBsaXN0ZW5pbmdUbykge1xuICAgICAgICBvYmogPSBsaXN0ZW5pbmdUb1tpZF07XG4gICAgICAgIG9iai5vZmYobmFtZSwgY2FsbGJhY2ssIHRoaXMpO1xuICAgICAgICBpZiAocmVtb3ZlIHx8IF8uaXNFbXB0eShvYmouX2V2ZW50cykpIGRlbGV0ZSB0aGlzLl9saXN0ZW5pbmdUb1tpZF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgfTtcblxuICAvLyBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byBzcGxpdCBldmVudCBzdHJpbmdzLlxuICB2YXIgZXZlbnRTcGxpdHRlciA9IC9cXHMrLztcblxuICAvLyBJbXBsZW1lbnQgZmFuY3kgZmVhdHVyZXMgb2YgdGhlIEV2ZW50cyBBUEkgc3VjaCBhcyBtdWx0aXBsZSBldmVudFxuICAvLyBuYW1lcyBgXCJjaGFuZ2UgYmx1clwiYCBhbmQgalF1ZXJ5LXN0eWxlIGV2ZW50IG1hcHMgYHtjaGFuZ2U6IGFjdGlvbn1gXG4gIC8vIGluIHRlcm1zIG9mIHRoZSBleGlzdGluZyBBUEkuXG4gIHZhciBldmVudHNBcGkgPSBmdW5jdGlvbihvYmosIGFjdGlvbiwgbmFtZSwgcmVzdCkge1xuICAgIGlmICghbmFtZSkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBIYW5kbGUgZXZlbnQgbWFwcy5cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xuICAgICAgICBvYmpbYWN0aW9uXS5hcHBseShvYmosIFtrZXksIG5hbWVba2V5XV0uY29uY2F0KHJlc3QpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgc3BhY2Ugc2VwYXJhdGVkIGV2ZW50IG5hbWVzLlxuICAgIGlmIChldmVudFNwbGl0dGVyLnRlc3QobmFtZSkpIHtcbiAgICAgIHZhciBuYW1lcyA9IG5hbWUuc3BsaXQoZXZlbnRTcGxpdHRlcik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBvYmpbYWN0aW9uXS5hcHBseShvYmosIFtuYW1lc1tpXV0uY29uY2F0KHJlc3QpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBBIGRpZmZpY3VsdC10by1iZWxpZXZlLCBidXQgb3B0aW1pemVkIGludGVybmFsIGRpc3BhdGNoIGZ1bmN0aW9uIGZvclxuICAvLyB0cmlnZ2VyaW5nIGV2ZW50cy4gVHJpZXMgdG8ga2VlcCB0aGUgdXN1YWwgY2FzZXMgc3BlZWR5IChtb3N0IGludGVybmFsXG4gIC8vIEJhY2tib25lIGV2ZW50cyBoYXZlIDMgYXJndW1lbnRzKS5cbiAgdmFyIHRyaWdnZXJFdmVudHMgPSBmdW5jdGlvbihldmVudHMsIGFyZ3MpIHtcbiAgICB2YXIgZXYsIGkgPSAtMSwgbCA9IGV2ZW50cy5sZW5ndGgsIGExID0gYXJnc1swXSwgYTIgPSBhcmdzWzFdLCBhMyA9IGFyZ3NbMl07XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCk7IHJldHVybjtcbiAgICAgIGNhc2UgMTogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExKTsgcmV0dXJuO1xuICAgICAgY2FzZSAyOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEsIGEyKTsgcmV0dXJuO1xuICAgICAgY2FzZSAzOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEsIGEyLCBhMyk7IHJldHVybjtcbiAgICAgIGRlZmF1bHQ6IHdoaWxlICgrK2kgPCBsKSAoZXYgPSBldmVudHNbaV0pLmNhbGxiYWNrLmFwcGx5KGV2LmN0eCwgYXJncyk7IHJldHVybjtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpc3Rlbk1ldGhvZHMgPSB7bGlzdGVuVG86ICdvbicsIGxpc3RlblRvT25jZTogJ29uY2UnfTtcblxuICAvLyBJbnZlcnNpb24tb2YtY29udHJvbCB2ZXJzaW9ucyBvZiBgb25gIGFuZCBgb25jZWAuIFRlbGwgKnRoaXMqIG9iamVjdCB0b1xuICAvLyBsaXN0ZW4gdG8gYW4gZXZlbnQgaW4gYW5vdGhlciBvYmplY3QgLi4uIGtlZXBpbmcgdHJhY2sgb2Ygd2hhdCBpdCdzXG4gIC8vIGxpc3RlbmluZyB0by5cbiAgXy5lYWNoKGxpc3Rlbk1ldGhvZHMsIGZ1bmN0aW9uKGltcGxlbWVudGF0aW9uLCBtZXRob2QpIHtcbiAgICBFdmVudHNbbWV0aG9kXSA9IGZ1bmN0aW9uKG9iaiwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBsaXN0ZW5pbmdUbyA9IHRoaXMuX2xpc3RlbmluZ1RvIHx8ICh0aGlzLl9saXN0ZW5pbmdUbyA9IHt9KTtcbiAgICAgIHZhciBpZCA9IG9iai5fbGlzdGVuSWQgfHwgKG9iai5fbGlzdGVuSWQgPSBfLnVuaXF1ZUlkKCdsJykpO1xuICAgICAgbGlzdGVuaW5nVG9baWRdID0gb2JqO1xuICAgICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIGNhbGxiYWNrID0gdGhpcztcbiAgICAgIG9ialtpbXBsZW1lbnRhdGlvbl0obmFtZSwgY2FsbGJhY2ssIHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWxpYXNlcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIEV2ZW50cy5iaW5kICAgPSBFdmVudHMub247XG4gIEV2ZW50cy51bmJpbmQgPSBFdmVudHMub2ZmO1xuXG4gIC8vIEFsbG93IHRoZSBgQmFja2JvbmVgIG9iamVjdCB0byBzZXJ2ZSBhcyBhIGdsb2JhbCBldmVudCBidXMsIGZvciBmb2xrcyB3aG9cbiAgLy8gd2FudCBnbG9iYWwgXCJwdWJzdWJcIiBpbiBhIGNvbnZlbmllbnQgcGxhY2UuXG4gIF8uZXh0ZW5kKEJhY2tib25lLCBFdmVudHMpO1xuXG4gIC8vIEJhY2tib25lLk1vZGVsXG4gIC8vIC0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gQmFja2JvbmUgKipNb2RlbHMqKiBhcmUgdGhlIGJhc2ljIGRhdGEgb2JqZWN0IGluIHRoZSBmcmFtZXdvcmsgLS1cbiAgLy8gZnJlcXVlbnRseSByZXByZXNlbnRpbmcgYSByb3cgaW4gYSB0YWJsZSBpbiBhIGRhdGFiYXNlIG9uIHlvdXIgc2VydmVyLlxuICAvLyBBIGRpc2NyZXRlIGNodW5rIG9mIGRhdGEgYW5kIGEgYnVuY2ggb2YgdXNlZnVsLCByZWxhdGVkIG1ldGhvZHMgZm9yXG4gIC8vIHBlcmZvcm1pbmcgY29tcHV0YXRpb25zIGFuZCB0cmFuc2Zvcm1hdGlvbnMgb24gdGhhdCBkYXRhLlxuXG4gIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIHRoZSBzcGVjaWZpZWQgYXR0cmlidXRlcy4gQSBjbGllbnQgaWQgKGBjaWRgKVxuICAvLyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBhbmQgYXNzaWduZWQgZm9yIHlvdS5cbiAgdmFyIE1vZGVsID0gQmFja2JvbmUuTW9kZWwgPSBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIGF0dHJzID0gYXR0cmlidXRlcyB8fCB7fTtcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIHRoaXMuY2lkID0gXy51bmlxdWVJZCgnYycpO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgIGlmIChvcHRpb25zLmNvbGxlY3Rpb24pIHRoaXMuY29sbGVjdGlvbiA9IG9wdGlvbnMuY29sbGVjdGlvbjtcbiAgICBpZiAob3B0aW9ucy5wYXJzZSkgYXR0cnMgPSB0aGlzLnBhcnNlKGF0dHJzLCBvcHRpb25zKSB8fCB7fTtcbiAgICBhdHRycyA9IF8uZGVmYXVsdHMoe30sIGF0dHJzLCBfLnJlc3VsdCh0aGlzLCAnZGVmYXVsdHMnKSk7XG4gICAgdGhpcy5zZXQoYXR0cnMsIG9wdGlvbnMpO1xuICAgIHRoaXMuY2hhbmdlZCA9IHt9O1xuICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIC8vIEF0dGFjaCBhbGwgaW5oZXJpdGFibGUgbWV0aG9kcyB0byB0aGUgTW9kZWwgcHJvdG90eXBlLlxuICBfLmV4dGVuZChNb2RlbC5wcm90b3R5cGUsIEV2ZW50cywge1xuXG4gICAgLy8gQSBoYXNoIG9mIGF0dHJpYnV0ZXMgd2hvc2UgY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWUgZGlmZmVyLlxuICAgIGNoYW5nZWQ6IG51bGwsXG5cbiAgICAvLyBUaGUgdmFsdWUgcmV0dXJuZWQgZHVyaW5nIHRoZSBsYXN0IGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgIHZhbGlkYXRpb25FcnJvcjogbnVsbCxcblxuICAgIC8vIFRoZSBkZWZhdWx0IG5hbWUgZm9yIHRoZSBKU09OIGBpZGAgYXR0cmlidXRlIGlzIGBcImlkXCJgLiBNb25nb0RCIGFuZFxuICAgIC8vIENvdWNoREIgdXNlcnMgbWF5IHdhbnQgdG8gc2V0IHRoaXMgdG8gYFwiX2lkXCJgLlxuICAgIGlkQXR0cmlidXRlOiAnaWQnLFxuXG4gICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duXG4gICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LFxuXG4gICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgbW9kZWwncyBgYXR0cmlidXRlc2Agb2JqZWN0LlxuICAgIHRvSlNPTjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICB9LFxuXG4gICAgLy8gUHJveHkgYEJhY2tib25lLnN5bmNgIGJ5IGRlZmF1bHQgLS0gYnV0IG92ZXJyaWRlIHRoaXMgaWYgeW91IG5lZWRcbiAgICAvLyBjdXN0b20gc3luY2luZyBzZW1hbnRpY3MgZm9yICp0aGlzKiBwYXJ0aWN1bGFyIG1vZGVsLlxuICAgIHN5bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIEJhY2tib25lLnN5bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLy8gR2V0IHRoZSB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUuXG4gICAgZ2V0OiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJdO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgdGhlIEhUTUwtZXNjYXBlZCB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUuXG4gICAgZXNjYXBlOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICByZXR1cm4gXy5lc2NhcGUodGhpcy5nZXQoYXR0cikpO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXR0cmlidXRlIGNvbnRhaW5zIGEgdmFsdWUgdGhhdCBpcyBub3QgbnVsbFxuICAgIC8vIG9yIHVuZGVmaW5lZC5cbiAgICBoYXM6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChhdHRyKSAhPSBudWxsO1xuICAgIH0sXG5cbiAgICAvLyBTZXQgYSBoYXNoIG9mIG1vZGVsIGF0dHJpYnV0ZXMgb24gdGhlIG9iamVjdCwgZmlyaW5nIGBcImNoYW5nZVwiYC4gVGhpcyBpc1xuICAgIC8vIHRoZSBjb3JlIHByaW1pdGl2ZSBvcGVyYXRpb24gb2YgYSBtb2RlbCwgdXBkYXRpbmcgdGhlIGRhdGEgYW5kIG5vdGlmeWluZ1xuICAgIC8vIGFueW9uZSB3aG8gbmVlZHMgdG8ga25vdyBhYm91dCB0aGUgY2hhbmdlIGluIHN0YXRlLiBUaGUgaGVhcnQgb2YgdGhlIGJlYXN0LlxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWwsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBhdHRyLCBhdHRycywgdW5zZXQsIGNoYW5nZXMsIHNpbGVudCwgY2hhbmdpbmcsIHByZXYsIGN1cnJlbnQ7XG4gICAgICBpZiAoa2V5ID09IG51bGwpIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBIYW5kbGUgYm90aCBgXCJrZXlcIiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGF0dHJzID0ga2V5O1xuICAgICAgICBvcHRpb25zID0gdmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKGF0dHJzID0ge30pW2tleV0gPSB2YWw7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG5cbiAgICAgIC8vIFJ1biB2YWxpZGF0aW9uLlxuICAgICAgaWYgKCF0aGlzLl92YWxpZGF0ZShhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gRXh0cmFjdCBhdHRyaWJ1dGVzIGFuZCBvcHRpb25zLlxuICAgICAgdW5zZXQgICAgICAgICAgID0gb3B0aW9ucy51bnNldDtcbiAgICAgIHNpbGVudCAgICAgICAgICA9IG9wdGlvbnMuc2lsZW50O1xuICAgICAgY2hhbmdlcyAgICAgICAgID0gW107XG4gICAgICBjaGFuZ2luZyAgICAgICAgPSB0aGlzLl9jaGFuZ2luZztcbiAgICAgIHRoaXMuX2NoYW5naW5nICA9IHRydWU7XG5cbiAgICAgIGlmICghY2hhbmdpbmcpIHtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzID0gXy5jbG9uZSh0aGlzLmF0dHJpYnV0ZXMpO1xuICAgICAgICB0aGlzLmNoYW5nZWQgPSB7fTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSB0aGlzLmF0dHJpYnV0ZXMsIHByZXYgPSB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXM7XG5cbiAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIG9mIGBpZGAuXG4gICAgICBpZiAodGhpcy5pZEF0dHJpYnV0ZSBpbiBhdHRycykgdGhpcy5pZCA9IGF0dHJzW3RoaXMuaWRBdHRyaWJ1dGVdO1xuXG4gICAgICAvLyBGb3IgZWFjaCBgc2V0YCBhdHRyaWJ1dGUsIHVwZGF0ZSBvciBkZWxldGUgdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICBmb3IgKGF0dHIgaW4gYXR0cnMpIHtcbiAgICAgICAgdmFsID0gYXR0cnNbYXR0cl07XG4gICAgICAgIGlmICghXy5pc0VxdWFsKGN1cnJlbnRbYXR0cl0sIHZhbCkpIGNoYW5nZXMucHVzaChhdHRyKTtcbiAgICAgICAgaWYgKCFfLmlzRXF1YWwocHJldlthdHRyXSwgdmFsKSkge1xuICAgICAgICAgIHRoaXMuY2hhbmdlZFthdHRyXSA9IHZhbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5jaGFuZ2VkW2F0dHJdO1xuICAgICAgICB9XG4gICAgICAgIHVuc2V0ID8gZGVsZXRlIGN1cnJlbnRbYXR0cl0gOiBjdXJyZW50W2F0dHJdID0gdmFsO1xuICAgICAgfVxuXG4gICAgICAvLyBUcmlnZ2VyIGFsbCByZWxldmFudCBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgIGlmICghc2lsZW50KSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCkgdGhpcy5fcGVuZGluZyA9IG9wdGlvbnM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hhbmdlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZTonICsgY2hhbmdlc1tpXSwgdGhpcywgY3VycmVudFtjaGFuZ2VzW2ldXSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gWW91IG1pZ2h0IGJlIHdvbmRlcmluZyB3aHkgdGhlcmUncyBhIGB3aGlsZWAgbG9vcCBoZXJlLiBDaGFuZ2VzIGNhblxuICAgICAgLy8gYmUgcmVjdXJzaXZlbHkgbmVzdGVkIHdpdGhpbiBgXCJjaGFuZ2VcImAgZXZlbnRzLlxuICAgICAgaWYgKGNoYW5naW5nKSByZXR1cm4gdGhpcztcbiAgICAgIGlmICghc2lsZW50KSB7XG4gICAgICAgIHdoaWxlICh0aGlzLl9wZW5kaW5nKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMuX3BlbmRpbmc7XG4gICAgICAgICAgdGhpcy5fcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgdGhpcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2NoYW5naW5nID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIGFuIGF0dHJpYnV0ZSBmcm9tIHRoZSBtb2RlbCwgZmlyaW5nIGBcImNoYW5nZVwiYC4gYHVuc2V0YCBpcyBhIG5vb3BcbiAgICAvLyBpZiB0aGUgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3QuXG4gICAgdW5zZXQ6IGZ1bmN0aW9uKGF0dHIsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldChhdHRyLCB2b2lkIDAsIF8uZXh0ZW5kKHt9LCBvcHRpb25zLCB7dW5zZXQ6IHRydWV9KSk7XG4gICAgfSxcblxuICAgIC8vIENsZWFyIGFsbCBhdHRyaWJ1dGVzIG9uIHRoZSBtb2RlbCwgZmlyaW5nIGBcImNoYW5nZVwiYC5cbiAgICBjbGVhcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGF0dHJzID0ge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSBhdHRyc1trZXldID0gdm9pZCAwO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHJzLCBfLmV4dGVuZCh7fSwgb3B0aW9ucywge3Vuc2V0OiB0cnVlfSkpO1xuICAgIH0sXG5cbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIG1vZGVsIGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGBcImNoYW5nZVwiYCBldmVudC5cbiAgICAvLyBJZiB5b3Ugc3BlY2lmeSBhbiBhdHRyaWJ1dGUgbmFtZSwgZGV0ZXJtaW5lIGlmIHRoYXQgYXR0cmlidXRlIGhhcyBjaGFuZ2VkLlxuICAgIGhhc0NoYW5nZWQ6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIGlmIChhdHRyID09IG51bGwpIHJldHVybiAhXy5pc0VtcHR5KHRoaXMuY2hhbmdlZCk7XG4gICAgICByZXR1cm4gXy5oYXModGhpcy5jaGFuZ2VkLCBhdHRyKTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgYXR0cmlidXRlcyB0aGF0IGhhdmUgY2hhbmdlZCwgb3JcbiAgICAvLyBmYWxzZSBpZiB0aGVyZSBhcmUgbm8gY2hhbmdlZCBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIGRldGVybWluaW5nIHdoYXRcbiAgICAvLyBwYXJ0cyBvZiBhIHZpZXcgbmVlZCB0byBiZSB1cGRhdGVkIGFuZC9vciB3aGF0IGF0dHJpYnV0ZXMgbmVlZCB0byBiZVxuICAgIC8vIHBlcnNpc3RlZCB0byB0aGUgc2VydmVyLiBVbnNldCBhdHRyaWJ1dGVzIHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAgICAvLyBZb3UgY2FuIGFsc28gcGFzcyBhbiBhdHRyaWJ1dGVzIG9iamVjdCB0byBkaWZmIGFnYWluc3QgdGhlIG1vZGVsLFxuICAgIC8vIGRldGVybWluaW5nIGlmIHRoZXJlICp3b3VsZCBiZSogYSBjaGFuZ2UuXG4gICAgY2hhbmdlZEF0dHJpYnV0ZXM6IGZ1bmN0aW9uKGRpZmYpIHtcbiAgICAgIGlmICghZGlmZikgcmV0dXJuIHRoaXMuaGFzQ2hhbmdlZCgpID8gXy5jbG9uZSh0aGlzLmNoYW5nZWQpIDogZmFsc2U7XG4gICAgICB2YXIgdmFsLCBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICB2YXIgb2xkID0gdGhpcy5fY2hhbmdpbmcgPyB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMgOiB0aGlzLmF0dHJpYnV0ZXM7XG4gICAgICBmb3IgKHZhciBhdHRyIGluIGRpZmYpIHtcbiAgICAgICAgaWYgKF8uaXNFcXVhbChvbGRbYXR0cl0sICh2YWwgPSBkaWZmW2F0dHJdKSkpIGNvbnRpbnVlO1xuICAgICAgICAoY2hhbmdlZCB8fCAoY2hhbmdlZCA9IHt9KSlbYXR0cl0gPSB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9LFxuXG4gICAgLy8gR2V0IHRoZSBwcmV2aW91cyB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUsIHJlY29yZGVkIGF0IHRoZSB0aW1lIHRoZSBsYXN0XG4gICAgLy8gYFwiY2hhbmdlXCJgIGV2ZW50IHdhcyBmaXJlZC5cbiAgICBwcmV2aW91czogZnVuY3Rpb24oYXR0cikge1xuICAgICAgaWYgKGF0dHIgPT0gbnVsbCB8fCAhdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXNbYXR0cl07XG4gICAgfSxcblxuICAgIC8vIEdldCBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIG1vZGVsIGF0IHRoZSB0aW1lIG9mIHRoZSBwcmV2aW91c1xuICAgIC8vIGBcImNoYW5nZVwiYCBldmVudC5cbiAgICBwcmV2aW91c0F0dHJpYnV0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF8uY2xvbmUodGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzKTtcbiAgICB9LFxuXG4gICAgLy8gRmV0Y2ggdGhlIG1vZGVsIGZyb20gdGhlIHNlcnZlci4gSWYgdGhlIHNlcnZlcidzIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuICAgIC8vIG1vZGVsIGRpZmZlcnMgZnJvbSBpdHMgY3VycmVudCBhdHRyaWJ1dGVzLCB0aGV5IHdpbGwgYmUgb3ZlcnJpZGRlbixcbiAgICAvLyB0cmlnZ2VyaW5nIGEgYFwiY2hhbmdlXCJgIGV2ZW50LlxuICAgIGZldGNoOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTtcbiAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlO1xuICAgICAgdmFyIG1vZGVsID0gdGhpcztcbiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICBpZiAoIW1vZGVsLnNldChtb2RlbC5wYXJzZShyZXNwLCBvcHRpb25zKSwgb3B0aW9ucykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBFcnJvcih0aGlzLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLy8gU2V0IGEgaGFzaCBvZiBtb2RlbCBhdHRyaWJ1dGVzLCBhbmQgc3luYyB0aGUgbW9kZWwgdG8gdGhlIHNlcnZlci5cbiAgICAvLyBJZiB0aGUgc2VydmVyIHJldHVybnMgYW4gYXR0cmlidXRlcyBoYXNoIHRoYXQgZGlmZmVycywgdGhlIG1vZGVsJ3NcbiAgICAvLyBzdGF0ZSB3aWxsIGJlIGBzZXRgIGFnYWluLlxuICAgIHNhdmU6IGZ1bmN0aW9uKGtleSwgdmFsLCBvcHRpb25zKSB7XG4gICAgICB2YXIgYXR0cnMsIG1ldGhvZCwgeGhyLCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuXG4gICAgICAvLyBIYW5kbGUgYm90aCBgXCJrZXlcIiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLlxuICAgICAgaWYgKGtleSA9PSBudWxsIHx8IHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGF0dHJzID0ga2V5O1xuICAgICAgICBvcHRpb25zID0gdmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKGF0dHJzID0ge30pW2tleV0gPSB2YWw7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMgPSBfLmV4dGVuZCh7dmFsaWRhdGU6IHRydWV9LCBvcHRpb25zKTtcblxuICAgICAgLy8gSWYgd2UncmUgbm90IHdhaXRpbmcgYW5kIGF0dHJpYnV0ZXMgZXhpc3QsIHNhdmUgYWN0cyBhc1xuICAgICAgLy8gYHNldChhdHRyKS5zYXZlKG51bGwsIG9wdHMpYCB3aXRoIHZhbGlkYXRpb24uIE90aGVyd2lzZSwgY2hlY2sgaWZcbiAgICAgIC8vIHRoZSBtb2RlbCB3aWxsIGJlIHZhbGlkIHdoZW4gdGhlIGF0dHJpYnV0ZXMsIGlmIGFueSwgYXJlIHNldC5cbiAgICAgIGlmIChhdHRycyAmJiAhb3B0aW9ucy53YWl0KSB7XG4gICAgICAgIGlmICghdGhpcy5zZXQoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgdGVtcG9yYXJ5IGF0dHJpYnV0ZXMgaWYgYHt3YWl0OiB0cnVlfWAuXG4gICAgICBpZiAoYXR0cnMgJiYgb3B0aW9ucy53YWl0KSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IF8uZXh0ZW5kKHt9LCBhdHRyaWJ1dGVzLCBhdHRycyk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFmdGVyIGEgc3VjY2Vzc2Z1bCBzZXJ2ZXItc2lkZSBzYXZlLCB0aGUgY2xpZW50IGlzIChvcHRpb25hbGx5KVxuICAgICAgLy8gdXBkYXRlZCB3aXRoIHRoZSBzZXJ2ZXItc2lkZSBzdGF0ZS5cbiAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlO1xuICAgICAgdmFyIG1vZGVsID0gdGhpcztcbiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAvLyBFbnN1cmUgYXR0cmlidXRlcyBhcmUgcmVzdG9yZWQgZHVyaW5nIHN5bmNocm9ub3VzIHNhdmVzLlxuICAgICAgICBtb2RlbC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgdmFyIHNlcnZlckF0dHJzID0gbW9kZWwucGFyc2UocmVzcCwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLndhaXQpIHNlcnZlckF0dHJzID0gXy5leHRlbmQoYXR0cnMgfHwge30sIHNlcnZlckF0dHJzKTtcbiAgICAgICAgaWYgKF8uaXNPYmplY3Qoc2VydmVyQXR0cnMpICYmICFtb2RlbC5zZXQoc2VydmVyQXR0cnMsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgICAgbW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgIH07XG4gICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7XG5cbiAgICAgIG1ldGhvZCA9IHRoaXMuaXNOZXcoKSA/ICdjcmVhdGUnIDogKG9wdGlvbnMucGF0Y2ggPyAncGF0Y2gnIDogJ3VwZGF0ZScpO1xuICAgICAgaWYgKG1ldGhvZCA9PT0gJ3BhdGNoJykgb3B0aW9ucy5hdHRycyA9IGF0dHJzO1xuICAgICAgeGhyID0gdGhpcy5zeW5jKG1ldGhvZCwgdGhpcywgb3B0aW9ucyk7XG5cbiAgICAgIC8vIFJlc3RvcmUgYXR0cmlidXRlcy5cbiAgICAgIGlmIChhdHRycyAmJiBvcHRpb25zLndhaXQpIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG5cbiAgICAgIHJldHVybiB4aHI7XG4gICAgfSxcblxuICAgIC8vIERlc3Ryb3kgdGhpcyBtb2RlbCBvbiB0aGUgc2VydmVyIGlmIGl0IHdhcyBhbHJlYWR5IHBlcnNpc3RlZC5cbiAgICAvLyBPcHRpbWlzdGljYWxseSByZW1vdmVzIHRoZSBtb2RlbCBmcm9tIGl0cyBjb2xsZWN0aW9uLCBpZiBpdCBoYXMgb25lLlxuICAgIC8vIElmIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIHdhaXRzIGZvciB0aGUgc2VydmVyIHRvIHJlc3BvbmQgYmVmb3JlIHJlbW92YWwuXG4gICAgZGVzdHJveTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307XG4gICAgICB2YXIgbW9kZWwgPSB0aGlzO1xuICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7XG5cbiAgICAgIHZhciBkZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG1vZGVsLnRyaWdnZXIoJ2Rlc3Ryb3knLCBtb2RlbCwgbW9kZWwuY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICB9O1xuXG4gICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgIGlmIChvcHRpb25zLndhaXQgfHwgbW9kZWwuaXNOZXcoKSkgZGVzdHJveSgpO1xuICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICAgIGlmICghbW9kZWwuaXNOZXcoKSkgbW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLmlzTmV3KCkpIHtcbiAgICAgICAgb3B0aW9ucy5zdWNjZXNzKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHdyYXBFcnJvcih0aGlzLCBvcHRpb25zKTtcblxuICAgICAgdmFyIHhociA9IHRoaXMuc3luYygnZGVsZXRlJywgdGhpcywgb3B0aW9ucyk7XG4gICAgICBpZiAoIW9wdGlvbnMud2FpdCkgZGVzdHJveSgpO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9LFxuXG4gICAgLy8gRGVmYXVsdCBVUkwgZm9yIHRoZSBtb2RlbCdzIHJlcHJlc2VudGF0aW9uIG9uIHRoZSBzZXJ2ZXIgLS0gaWYgeW91J3JlXG4gICAgLy8gdXNpbmcgQmFja2JvbmUncyByZXN0ZnVsIG1ldGhvZHMsIG92ZXJyaWRlIHRoaXMgdG8gY2hhbmdlIHRoZSBlbmRwb2ludFxuICAgIC8vIHRoYXQgd2lsbCBiZSBjYWxsZWQuXG4gICAgdXJsOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiYXNlID1cbiAgICAgICAgXy5yZXN1bHQodGhpcywgJ3VybFJvb3QnKSB8fFxuICAgICAgICBfLnJlc3VsdCh0aGlzLmNvbGxlY3Rpb24sICd1cmwnKSB8fFxuICAgICAgICB1cmxFcnJvcigpO1xuICAgICAgaWYgKHRoaXMuaXNOZXcoKSkgcmV0dXJuIGJhc2U7XG4gICAgICByZXR1cm4gYmFzZS5yZXBsYWNlKC8oW15cXC9dKSQvLCAnJDEvJykgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5pZCk7XG4gICAgfSxcblxuICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gdGhlIGhhc2ggb2YgYXR0cmlidXRlcyB0byBiZSBgc2V0YCBvblxuICAgIC8vIHRoZSBtb2RlbC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaXMganVzdCB0byBwYXNzIHRoZSByZXNwb25zZSBhbG9uZy5cbiAgICBwYXJzZTogZnVuY3Rpb24ocmVzcCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHJlc3A7XG4gICAgfSxcblxuICAgIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIGlkZW50aWNhbCBhdHRyaWJ1dGVzIHRvIHRoaXMgb25lLlxuICAgIGNsb25lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmF0dHJpYnV0ZXMpO1xuICAgIH0sXG5cbiAgICAvLyBBIG1vZGVsIGlzIG5ldyBpZiBpdCBoYXMgbmV2ZXIgYmVlbiBzYXZlZCB0byB0aGUgc2VydmVyLCBhbmQgbGFja3MgYW4gaWQuXG4gICAgaXNOZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICF0aGlzLmhhcyh0aGlzLmlkQXR0cmlidXRlKTtcbiAgICB9LFxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIG1vZGVsIGlzIGN1cnJlbnRseSBpbiBhIHZhbGlkIHN0YXRlLlxuICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZSh7fSwgXy5leHRlbmQob3B0aW9ucyB8fCB7fSwgeyB2YWxpZGF0ZTogdHJ1ZSB9KSk7XG4gICAgfSxcblxuICAgIC8vIFJ1biB2YWxpZGF0aW9uIGFnYWluc3QgdGhlIG5leHQgY29tcGxldGUgc2V0IG9mIG1vZGVsIGF0dHJpYnV0ZXMsXG4gICAgLy8gcmV0dXJuaW5nIGB0cnVlYCBpZiBhbGwgaXMgd2VsbC4gT3RoZXJ3aXNlLCBmaXJlIGFuIGBcImludmFsaWRcImAgZXZlbnQuXG4gICAgX3ZhbGlkYXRlOiBmdW5jdGlvbihhdHRycywgb3B0aW9ucykge1xuICAgICAgaWYgKCFvcHRpb25zLnZhbGlkYXRlIHx8ICF0aGlzLnZhbGlkYXRlKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGF0dHJzID0gXy5leHRlbmQoe30sIHRoaXMuYXR0cmlidXRlcywgYXR0cnMpO1xuICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0aW9uRXJyb3IgPSB0aGlzLnZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSB8fCBudWxsO1xuICAgICAgaWYgKCFlcnJvcikgcmV0dXJuIHRydWU7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2ludmFsaWQnLCB0aGlzLCBlcnJvciwgXy5leHRlbmQob3B0aW9ucywge3ZhbGlkYXRpb25FcnJvcjogZXJyb3J9KSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gIH0pO1xuXG4gIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHdlIHdhbnQgdG8gaW1wbGVtZW50IG9uIHRoZSBNb2RlbC5cbiAgdmFyIG1vZGVsTWV0aG9kcyA9IFsna2V5cycsICd2YWx1ZXMnLCAncGFpcnMnLCAnaW52ZXJ0JywgJ3BpY2snLCAnb21pdCddO1xuXG4gIC8vIE1peCBpbiBlYWNoIFVuZGVyc2NvcmUgbWV0aG9kIGFzIGEgcHJveHkgdG8gYE1vZGVsI2F0dHJpYnV0ZXNgLlxuICBfLmVhY2gobW9kZWxNZXRob2RzLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgICBNb2RlbC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBhcmdzLnVuc2hpZnQodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiBfW21ldGhvZF0uYXBwbHkoXywgYXJncyk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQmFja2JvbmUuQ29sbGVjdGlvblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gSWYgbW9kZWxzIHRlbmQgdG8gcmVwcmVzZW50IGEgc2luZ2xlIHJvdyBvZiBkYXRhLCBhIEJhY2tib25lIENvbGxlY3Rpb24gaXNcbiAgLy8gbW9yZSBhbmFsYWdvdXMgdG8gYSB0YWJsZSBmdWxsIG9mIGRhdGEgLi4uIG9yIGEgc21hbGwgc2xpY2Ugb3IgcGFnZSBvZiB0aGF0XG4gIC8vIHRhYmxlLCBvciBhIGNvbGxlY3Rpb24gb2Ygcm93cyB0aGF0IGJlbG9uZyB0b2dldGhlciBmb3IgYSBwYXJ0aWN1bGFyIHJlYXNvblxuICAvLyAtLSBhbGwgb2YgdGhlIG1lc3NhZ2VzIGluIHRoaXMgcGFydGljdWxhciBmb2xkZXIsIGFsbCBvZiB0aGUgZG9jdW1lbnRzXG4gIC8vIGJlbG9uZ2luZyB0byB0aGlzIHBhcnRpY3VsYXIgYXV0aG9yLCBhbmQgc28gb24uIENvbGxlY3Rpb25zIG1haW50YWluXG4gIC8vIGluZGV4ZXMgb2YgdGhlaXIgbW9kZWxzLCBib3RoIGluIG9yZGVyLCBhbmQgZm9yIGxvb2t1cCBieSBgaWRgLlxuXG4gIC8vIENyZWF0ZSBhIG5ldyAqKkNvbGxlY3Rpb24qKiwgcGVyaGFwcyB0byBjb250YWluIGEgc3BlY2lmaWMgdHlwZSBvZiBgbW9kZWxgLlxuICAvLyBJZiBhIGBjb21wYXJhdG9yYCBpcyBzcGVjaWZpZWQsIHRoZSBDb2xsZWN0aW9uIHdpbGwgbWFpbnRhaW5cbiAgLy8gaXRzIG1vZGVscyBpbiBzb3J0IG9yZGVyLCBhcyB0aGV5J3JlIGFkZGVkIGFuZCByZW1vdmVkLlxuICB2YXIgQ29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24gPSBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIGlmIChvcHRpb25zLm1vZGVsKSB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJhdG9yICE9PSB2b2lkIDApIHRoaXMuY29tcGFyYXRvciA9IG9wdGlvbnMuY29tcGFyYXRvcjtcbiAgICB0aGlzLl9yZXNldCgpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChtb2RlbHMpIHRoaXMucmVzZXQobW9kZWxzLCBfLmV4dGVuZCh7c2lsZW50OiB0cnVlfSwgb3B0aW9ucykpO1xuICB9O1xuXG4gIC8vIERlZmF1bHQgb3B0aW9ucyBmb3IgYENvbGxlY3Rpb24jc2V0YC5cbiAgdmFyIHNldE9wdGlvbnMgPSB7YWRkOiB0cnVlLCByZW1vdmU6IHRydWUsIG1lcmdlOiB0cnVlfTtcbiAgdmFyIGFkZE9wdGlvbnMgPSB7YWRkOiB0cnVlLCByZW1vdmU6IGZhbHNlfTtcblxuICAvLyBEZWZpbmUgdGhlIENvbGxlY3Rpb24ncyBpbmhlcml0YWJsZSBtZXRob2RzLlxuICBfLmV4dGVuZChDb2xsZWN0aW9uLnByb3RvdHlwZSwgRXZlbnRzLCB7XG5cbiAgICAvLyBUaGUgZGVmYXVsdCBtb2RlbCBmb3IgYSBjb2xsZWN0aW9uIGlzIGp1c3QgYSAqKkJhY2tib25lLk1vZGVsKiouXG4gICAgLy8gVGhpcyBzaG91bGQgYmUgb3ZlcnJpZGRlbiBpbiBtb3N0IGNhc2VzLlxuICAgIG1vZGVsOiBNb2RlbCxcblxuICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93blxuICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSxcblxuICAgIC8vIFRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGEgQ29sbGVjdGlvbiBpcyBhbiBhcnJheSBvZiB0aGVcbiAgICAvLyBtb2RlbHMnIGF0dHJpYnV0ZXMuXG4gICAgdG9KU09OOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24obW9kZWwpeyByZXR1cm4gbW9kZWwudG9KU09OKG9wdGlvbnMpOyB9KTtcbiAgICB9LFxuXG4gICAgLy8gUHJveHkgYEJhY2tib25lLnN5bmNgIGJ5IGRlZmF1bHQuXG4gICAgc3luYzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gQmFja2JvbmUuc3luYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICAvLyBBZGQgYSBtb2RlbCwgb3IgbGlzdCBvZiBtb2RlbHMgdG8gdGhlIHNldC5cbiAgICBhZGQ6IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KG1vZGVscywgXy5leHRlbmQoe21lcmdlOiBmYWxzZX0sIG9wdGlvbnMsIGFkZE9wdGlvbnMpKTtcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIGEgbW9kZWwsIG9yIGEgbGlzdCBvZiBtb2RlbHMgZnJvbSB0aGUgc2V0LlxuICAgIHJlbW92ZTogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7XG4gICAgICB2YXIgc2luZ3VsYXIgPSAhXy5pc0FycmF5KG1vZGVscyk7XG4gICAgICBtb2RlbHMgPSBzaW5ndWxhciA/IFttb2RlbHNdIDogXy5jbG9uZShtb2RlbHMpO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIHZhciBpLCBsLCBpbmRleCwgbW9kZWw7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gbW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBtb2RlbCA9IG1vZGVsc1tpXSA9IHRoaXMuZ2V0KG1vZGVsc1tpXSk7XG4gICAgICAgIGlmICghbW9kZWwpIGNvbnRpbnVlO1xuICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFttb2RlbC5pZF07XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLmNpZF07XG4gICAgICAgIGluZGV4ID0gdGhpcy5pbmRleE9mKG1vZGVsKTtcbiAgICAgICAgdGhpcy5tb2RlbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgIG9wdGlvbnMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtb2RlbC50cmlnZ2VyKCdyZW1vdmUnLCBtb2RlbCwgdGhpcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVtb3ZlUmVmZXJlbmNlKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaW5ndWxhciA/IG1vZGVsc1swXSA6IG1vZGVscztcbiAgICB9LFxuXG4gICAgLy8gVXBkYXRlIGEgY29sbGVjdGlvbiBieSBgc2V0YC1pbmcgYSBuZXcgbGlzdCBvZiBtb2RlbHMsIGFkZGluZyBuZXcgb25lcyxcbiAgICAvLyByZW1vdmluZyBtb2RlbHMgdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnQsIGFuZCBtZXJnaW5nIG1vZGVscyB0aGF0XG4gICAgLy8gYWxyZWFkeSBleGlzdCBpbiB0aGUgY29sbGVjdGlvbiwgYXMgbmVjZXNzYXJ5LiBTaW1pbGFyIHRvICoqTW9kZWwjc2V0KiosXG4gICAgLy8gdGhlIGNvcmUgb3BlcmF0aW9uIGZvciB1cGRhdGluZyB0aGUgZGF0YSBjb250YWluZWQgYnkgdGhlIGNvbGxlY3Rpb24uXG4gICAgc2V0OiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBfLmRlZmF1bHRzKHt9LCBvcHRpb25zLCBzZXRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLnBhcnNlKSBtb2RlbHMgPSB0aGlzLnBhcnNlKG1vZGVscywgb3B0aW9ucyk7XG4gICAgICB2YXIgc2luZ3VsYXIgPSAhXy5pc0FycmF5KG1vZGVscyk7XG4gICAgICBtb2RlbHMgPSBzaW5ndWxhciA/IChtb2RlbHMgPyBbbW9kZWxzXSA6IFtdKSA6IF8uY2xvbmUobW9kZWxzKTtcbiAgICAgIHZhciBpLCBsLCBpZCwgbW9kZWwsIGF0dHJzLCBleGlzdGluZywgc29ydDtcbiAgICAgIHZhciBhdCA9IG9wdGlvbnMuYXQ7XG4gICAgICB2YXIgdGFyZ2V0TW9kZWwgPSB0aGlzLm1vZGVsO1xuICAgICAgdmFyIHNvcnRhYmxlID0gdGhpcy5jb21wYXJhdG9yICYmIChhdCA9PSBudWxsKSAmJiBvcHRpb25zLnNvcnQgIT09IGZhbHNlO1xuICAgICAgdmFyIHNvcnRBdHRyID0gXy5pc1N0cmluZyh0aGlzLmNvbXBhcmF0b3IpID8gdGhpcy5jb21wYXJhdG9yIDogbnVsbDtcbiAgICAgIHZhciB0b0FkZCA9IFtdLCB0b1JlbW92ZSA9IFtdLCBtb2RlbE1hcCA9IHt9O1xuICAgICAgdmFyIGFkZCA9IG9wdGlvbnMuYWRkLCBtZXJnZSA9IG9wdGlvbnMubWVyZ2UsIHJlbW92ZSA9IG9wdGlvbnMucmVtb3ZlO1xuICAgICAgdmFyIG9yZGVyID0gIXNvcnRhYmxlICYmIGFkZCAmJiByZW1vdmUgPyBbXSA6IGZhbHNlO1xuXG4gICAgICAvLyBUdXJuIGJhcmUgb2JqZWN0cyBpbnRvIG1vZGVsIHJlZmVyZW5jZXMsIGFuZCBwcmV2ZW50IGludmFsaWQgbW9kZWxzXG4gICAgICAvLyBmcm9tIGJlaW5nIGFkZGVkLlxuICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgYXR0cnMgPSBtb2RlbHNbaV0gfHwge307XG4gICAgICAgIGlmIChhdHRycyBpbnN0YW5jZW9mIE1vZGVsKSB7XG4gICAgICAgICAgaWQgPSBtb2RlbCA9IGF0dHJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlkID0gYXR0cnNbdGFyZ2V0TW9kZWwucHJvdG90eXBlLmlkQXR0cmlidXRlIHx8ICdpZCddO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYSBkdXBsaWNhdGUgaXMgZm91bmQsIHByZXZlbnQgaXQgZnJvbSBiZWluZyBhZGRlZCBhbmRcbiAgICAgICAgLy8gb3B0aW9uYWxseSBtZXJnZSBpdCBpbnRvIHRoZSBleGlzdGluZyBtb2RlbC5cbiAgICAgICAgaWYgKGV4aXN0aW5nID0gdGhpcy5nZXQoaWQpKSB7XG4gICAgICAgICAgaWYgKHJlbW92ZSkgbW9kZWxNYXBbZXhpc3RpbmcuY2lkXSA9IHRydWU7XG4gICAgICAgICAgaWYgKG1lcmdlKSB7XG4gICAgICAgICAgICBhdHRycyA9IGF0dHJzID09PSBtb2RlbCA/IG1vZGVsLmF0dHJpYnV0ZXMgOiBhdHRycztcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBhcnNlKSBhdHRycyA9IGV4aXN0aW5nLnBhcnNlKGF0dHJzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGV4aXN0aW5nLnNldChhdHRycywgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoc29ydGFibGUgJiYgIXNvcnQgJiYgZXhpc3RpbmcuaGFzQ2hhbmdlZChzb3J0QXR0cikpIHNvcnQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtb2RlbHNbaV0gPSBleGlzdGluZztcblxuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgbmV3LCB2YWxpZCBtb2RlbCwgcHVzaCBpdCB0byB0aGUgYHRvQWRkYCBsaXN0LlxuICAgICAgICB9IGVsc2UgaWYgKGFkZCkge1xuICAgICAgICAgIG1vZGVsID0gbW9kZWxzW2ldID0gdGhpcy5fcHJlcGFyZU1vZGVsKGF0dHJzLCBvcHRpb25zKTtcbiAgICAgICAgICBpZiAoIW1vZGVsKSBjb250aW51ZTtcbiAgICAgICAgICB0b0FkZC5wdXNoKG1vZGVsKTtcbiAgICAgICAgICB0aGlzLl9hZGRSZWZlcmVuY2UobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG8gbm90IGFkZCBtdWx0aXBsZSBtb2RlbHMgd2l0aCB0aGUgc2FtZSBgaWRgLlxuICAgICAgICBtb2RlbCA9IGV4aXN0aW5nIHx8IG1vZGVsO1xuICAgICAgICBpZiAob3JkZXIgJiYgKG1vZGVsLmlzTmV3KCkgfHwgIW1vZGVsTWFwW21vZGVsLmlkXSkpIG9yZGVyLnB1c2gobW9kZWwpO1xuICAgICAgICBtb2RlbE1hcFttb2RlbC5pZF0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgbm9uZXhpc3RlbnQgbW9kZWxzIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICBpZiAoIW1vZGVsTWFwWyhtb2RlbCA9IHRoaXMubW9kZWxzW2ldKS5jaWRdKSB0b1JlbW92ZS5wdXNoKG1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9SZW1vdmUubGVuZ3RoKSB0aGlzLnJlbW92ZSh0b1JlbW92ZSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlZSBpZiBzb3J0aW5nIGlzIG5lZWRlZCwgdXBkYXRlIGBsZW5ndGhgIGFuZCBzcGxpY2UgaW4gbmV3IG1vZGVscy5cbiAgICAgIGlmICh0b0FkZC5sZW5ndGggfHwgKG9yZGVyICYmIG9yZGVyLmxlbmd0aCkpIHtcbiAgICAgICAgaWYgKHNvcnRhYmxlKSBzb3J0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sZW5ndGggKz0gdG9BZGQubGVuZ3RoO1xuICAgICAgICBpZiAoYXQgIT0gbnVsbCkge1xuICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSB0b0FkZC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShhdCArIGksIDAsIHRvQWRkW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG9yZGVyKSB0aGlzLm1vZGVscy5sZW5ndGggPSAwO1xuICAgICAgICAgIHZhciBvcmRlcmVkTW9kZWxzID0gb3JkZXIgfHwgdG9BZGQ7XG4gICAgICAgICAgZm9yIChpID0gMCwgbCA9IG9yZGVyZWRNb2RlbHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVscy5wdXNoKG9yZGVyZWRNb2RlbHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTaWxlbnRseSBzb3J0IHRoZSBjb2xsZWN0aW9uIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgaWYgKHNvcnQpIHRoaXMuc29ydCh7c2lsZW50OiB0cnVlfSk7XG5cbiAgICAgIC8vIFVubGVzcyBzaWxlbmNlZCwgaXQncyB0aW1lIHRvIGZpcmUgYWxsIGFwcHJvcHJpYXRlIGFkZC9zb3J0IGV2ZW50cy5cbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHRvQWRkLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIChtb2RlbCA9IHRvQWRkW2ldKS50cmlnZ2VyKCdhZGQnLCBtb2RlbCwgdGhpcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvcnQgfHwgKG9yZGVyICYmIG9yZGVyLmxlbmd0aCkpIHRoaXMudHJpZ2dlcignc29ydCcsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gdGhlIGFkZGVkIChvciBtZXJnZWQpIG1vZGVsIChvciBtb2RlbHMpLlxuICAgICAgcmV0dXJuIHNpbmd1bGFyID8gbW9kZWxzWzBdIDogbW9kZWxzO1xuICAgIH0sXG5cbiAgICAvLyBXaGVuIHlvdSBoYXZlIG1vcmUgaXRlbXMgdGhhbiB5b3Ugd2FudCB0byBhZGQgb3IgcmVtb3ZlIGluZGl2aWR1YWxseSxcbiAgICAvLyB5b3UgY2FuIHJlc2V0IHRoZSBlbnRpcmUgc2V0IHdpdGggYSBuZXcgbGlzdCBvZiBtb2RlbHMsIHdpdGhvdXQgZmlyaW5nXG4gICAgLy8gYW55IGdyYW51bGFyIGBhZGRgIG9yIGByZW1vdmVgIGV2ZW50cy4gRmlyZXMgYHJlc2V0YCB3aGVuIGZpbmlzaGVkLlxuICAgIC8vIFVzZWZ1bCBmb3IgYnVsayBvcGVyYXRpb25zIGFuZCBvcHRpbWl6YXRpb25zLlxuICAgIHJlc2V0OiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzLl9yZW1vdmVSZWZlcmVuY2UodGhpcy5tb2RlbHNbaV0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5wcmV2aW91c01vZGVscyA9IHRoaXMubW9kZWxzO1xuICAgICAgdGhpcy5fcmVzZXQoKTtcbiAgICAgIG1vZGVscyA9IHRoaXMuYWRkKG1vZGVscywgXy5leHRlbmQoe3NpbGVudDogdHJ1ZX0sIG9wdGlvbnMpKTtcbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcigncmVzZXQnLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBtb2RlbHM7XG4gICAgfSxcblxuICAgIC8vIEFkZCBhIG1vZGVsIHRvIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAgcHVzaDogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkZChtb2RlbCwgXy5leHRlbmQoe2F0OiB0aGlzLmxlbmd0aH0sIG9wdGlvbnMpKTtcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIGEgbW9kZWwgZnJvbSB0aGUgZW5kIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgIHBvcDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIG1vZGVsID0gdGhpcy5hdCh0aGlzLmxlbmd0aCAtIDEpO1xuICAgICAgdGhpcy5yZW1vdmUobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH0sXG5cbiAgICAvLyBBZGQgYSBtb2RlbCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgIHVuc2hpZnQ6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5hZGQobW9kZWwsIF8uZXh0ZW5kKHthdDogMH0sIG9wdGlvbnMpKTtcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIGEgbW9kZWwgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgIHNoaWZ0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgbW9kZWwgPSB0aGlzLmF0KDApO1xuICAgICAgdGhpcy5yZW1vdmUobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH0sXG5cbiAgICAvLyBTbGljZSBvdXQgYSBzdWItYXJyYXkgb2YgbW9kZWxzIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAgc2xpY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNsaWNlLmFwcGx5KHRoaXMubW9kZWxzLCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgYSBtb2RlbCBmcm9tIHRoZSBzZXQgYnkgaWQuXG4gICAgZ2V0OiBmdW5jdGlvbihvYmopIHtcbiAgICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICAgIHJldHVybiB0aGlzLl9ieUlkW29ial0gfHwgdGhpcy5fYnlJZFtvYmouaWRdIHx8IHRoaXMuX2J5SWRbb2JqLmNpZF07XG4gICAgfSxcblxuICAgIC8vIEdldCB0aGUgbW9kZWwgYXQgdGhlIGdpdmVuIGluZGV4LlxuICAgIGF0OiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWxzW2luZGV4XTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJuIG1vZGVscyB3aXRoIG1hdGNoaW5nIGF0dHJpYnV0ZXMuIFVzZWZ1bCBmb3Igc2ltcGxlIGNhc2VzIG9mXG4gICAgLy8gYGZpbHRlcmAuXG4gICAgd2hlcmU6IGZ1bmN0aW9uKGF0dHJzLCBmaXJzdCkge1xuICAgICAgaWYgKF8uaXNFbXB0eShhdHRycykpIHJldHVybiBmaXJzdCA/IHZvaWQgMCA6IFtdO1xuICAgICAgcmV0dXJuIHRoaXNbZmlyc3QgPyAnZmluZCcgOiAnZmlsdGVyJ10oZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG4gICAgICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG1vZGVsLmdldChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJuIHRoZSBmaXJzdCBtb2RlbCB3aXRoIG1hdGNoaW5nIGF0dHJpYnV0ZXMuIFVzZWZ1bCBmb3Igc2ltcGxlIGNhc2VzXG4gICAgLy8gb2YgYGZpbmRgLlxuICAgIGZpbmRXaGVyZTogZnVuY3Rpb24oYXR0cnMpIHtcbiAgICAgIHJldHVybiB0aGlzLndoZXJlKGF0dHJzLCB0cnVlKTtcbiAgICB9LFxuXG4gICAgLy8gRm9yY2UgdGhlIGNvbGxlY3Rpb24gdG8gcmUtc29ydCBpdHNlbGYuIFlvdSBkb24ndCBuZWVkIHRvIGNhbGwgdGhpcyB1bmRlclxuICAgIC8vIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCBhcyB0aGUgc2V0IHdpbGwgbWFpbnRhaW4gc29ydCBvcmRlciBhcyBlYWNoIGl0ZW1cbiAgICAvLyBpcyBhZGRlZC5cbiAgICBzb3J0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAoIXRoaXMuY29tcGFyYXRvcikgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc29ydCBhIHNldCB3aXRob3V0IGEgY29tcGFyYXRvcicpO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcblxuICAgICAgLy8gUnVuIHNvcnQgYmFzZWQgb24gdHlwZSBvZiBgY29tcGFyYXRvcmAuXG4gICAgICBpZiAoXy5pc1N0cmluZyh0aGlzLmNvbXBhcmF0b3IpIHx8IHRoaXMuY29tcGFyYXRvci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5tb2RlbHMgPSB0aGlzLnNvcnRCeSh0aGlzLmNvbXBhcmF0b3IsIHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tb2RlbHMuc29ydChfLmJpbmQodGhpcy5jb21wYXJhdG9yLCB0aGlzKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcignc29ydCcsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFBsdWNrIGFuIGF0dHJpYnV0ZSBmcm9tIGVhY2ggbW9kZWwgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAgcGx1Y2s6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHJldHVybiBfLmludm9rZSh0aGlzLm1vZGVscywgJ2dldCcsIGF0dHIpO1xuICAgIH0sXG5cbiAgICAvLyBGZXRjaCB0aGUgZGVmYXVsdCBzZXQgb2YgbW9kZWxzIGZvciB0aGlzIGNvbGxlY3Rpb24sIHJlc2V0dGluZyB0aGVcbiAgICAvLyBjb2xsZWN0aW9uIHdoZW4gdGhleSBhcnJpdmUuIElmIGByZXNldDogdHJ1ZWAgaXMgcGFzc2VkLCB0aGUgcmVzcG9uc2VcbiAgICAvLyBkYXRhIHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdGhlIGByZXNldGAgbWV0aG9kIGluc3RlYWQgb2YgYHNldGAuXG4gICAgZmV0Y2g6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7XG4gICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcbiAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IG9wdGlvbnMucmVzZXQgPyAncmVzZXQnIDogJ3NldCc7XG4gICAgICAgIGNvbGxlY3Rpb25bbWV0aG9kXShyZXNwLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MoY29sbGVjdGlvbiwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbGxlY3Rpb24udHJpZ2dlcignc3luYycsIGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBFcnJvcih0aGlzLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgbW9kZWwgaW4gdGhpcyBjb2xsZWN0aW9uLiBBZGQgdGhlIG1vZGVsIHRvIHRoZVxuICAgIC8vIGNvbGxlY3Rpb24gaW1tZWRpYXRlbHksIHVubGVzcyBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCBpbiB3aGljaCBjYXNlIHdlXG4gICAgLy8gd2FpdCBmb3IgdGhlIHNlcnZlciB0byBhZ3JlZS5cbiAgICBjcmVhdGU6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTtcbiAgICAgIGlmICghKG1vZGVsID0gdGhpcy5fcHJlcGFyZU1vZGVsKG1vZGVsLCBvcHRpb25zKSkpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICghb3B0aW9ucy53YWl0KSB0aGlzLmFkZChtb2RlbCwgb3B0aW9ucyk7XG4gICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKG1vZGVsLCByZXNwKSB7XG4gICAgICAgIGlmIChvcHRpb25zLndhaXQpIGNvbGxlY3Rpb24uYWRkKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICAgIG1vZGVsLnNhdmUobnVsbCwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gbW9kZWw7XG4gICAgfSxcblxuICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gYSBsaXN0IG9mIG1vZGVscyB0byBiZSBhZGRlZCB0byB0aGVcbiAgICAvLyBjb2xsZWN0aW9uLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgaXQgdGhyb3VnaC5cbiAgICBwYXJzZTogZnVuY3Rpb24ocmVzcCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHJlc3A7XG4gICAgfSxcblxuICAgIC8vIENyZWF0ZSBhIG5ldyBjb2xsZWN0aW9uIHdpdGggYW4gaWRlbnRpY2FsIGxpc3Qgb2YgbW9kZWxzIGFzIHRoaXMgb25lLlxuICAgIGNsb25lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLm1vZGVscyk7XG4gICAgfSxcblxuICAgIC8vIFByaXZhdGUgbWV0aG9kIHRvIHJlc2V0IGFsbCBpbnRlcm5hbCBzdGF0ZS4gQ2FsbGVkIHdoZW4gdGhlIGNvbGxlY3Rpb25cbiAgICAvLyBpcyBmaXJzdCBpbml0aWFsaXplZCBvciByZXNldC5cbiAgICBfcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgdGhpcy5tb2RlbHMgPSBbXTtcbiAgICAgIHRoaXMuX2J5SWQgID0ge307XG4gICAgfSxcblxuICAgIC8vIFByZXBhcmUgYSBoYXNoIG9mIGF0dHJpYnV0ZXMgKG9yIG90aGVyIG1vZGVsKSB0byBiZSBhZGRlZCB0byB0aGlzXG4gICAgLy8gY29sbGVjdGlvbi5cbiAgICBfcHJlcGFyZU1vZGVsOiBmdW5jdGlvbihhdHRycywgb3B0aW9ucykge1xuICAgICAgaWYgKGF0dHJzIGluc3RhbmNlb2YgTW9kZWwpIHJldHVybiBhdHRycztcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgICAgb3B0aW9ucy5jb2xsZWN0aW9uID0gdGhpcztcbiAgICAgIHZhciBtb2RlbCA9IG5ldyB0aGlzLm1vZGVsKGF0dHJzLCBvcHRpb25zKTtcbiAgICAgIGlmICghbW9kZWwudmFsaWRhdGlvbkVycm9yKSByZXR1cm4gbW9kZWw7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2ludmFsaWQnLCB0aGlzLCBtb2RlbC52YWxpZGF0aW9uRXJyb3IsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyBJbnRlcm5hbCBtZXRob2QgdG8gY3JlYXRlIGEgbW9kZWwncyB0aWVzIHRvIGEgY29sbGVjdGlvbi5cbiAgICBfYWRkUmVmZXJlbmNlOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgICAgdGhpcy5fYnlJZFttb2RlbC5jaWRdID0gbW9kZWw7XG4gICAgICBpZiAobW9kZWwuaWQgIT0gbnVsbCkgdGhpcy5fYnlJZFttb2RlbC5pZF0gPSBtb2RlbDtcbiAgICAgIGlmICghbW9kZWwuY29sbGVjdGlvbikgbW9kZWwuY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICBtb2RlbC5vbignYWxsJywgdGhpcy5fb25Nb2RlbEV2ZW50LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLy8gSW50ZXJuYWwgbWV0aG9kIHRvIHNldmVyIGEgbW9kZWwncyB0aWVzIHRvIGEgY29sbGVjdGlvbi5cbiAgICBfcmVtb3ZlUmVmZXJlbmNlOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgICAgaWYgKHRoaXMgPT09IG1vZGVsLmNvbGxlY3Rpb24pIGRlbGV0ZSBtb2RlbC5jb2xsZWN0aW9uO1xuICAgICAgbW9kZWwub2ZmKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpO1xuICAgIH0sXG5cbiAgICAvLyBJbnRlcm5hbCBtZXRob2QgY2FsbGVkIGV2ZXJ5IHRpbWUgYSBtb2RlbCBpbiB0aGUgc2V0IGZpcmVzIGFuIGV2ZW50LlxuICAgIC8vIFNldHMgbmVlZCB0byB1cGRhdGUgdGhlaXIgaW5kZXhlcyB3aGVuIG1vZGVscyBjaGFuZ2UgaWRzLiBBbGwgb3RoZXJcbiAgICAvLyBldmVudHMgc2ltcGx5IHByb3h5IHRocm91Z2guIFwiYWRkXCIgYW5kIFwicmVtb3ZlXCIgZXZlbnRzIHRoYXQgb3JpZ2luYXRlXG4gICAgLy8gaW4gb3RoZXIgY29sbGVjdGlvbnMgYXJlIGlnbm9yZWQuXG4gICAgX29uTW9kZWxFdmVudDogZnVuY3Rpb24oZXZlbnQsIG1vZGVsLCBjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICBpZiAoKGV2ZW50ID09PSAnYWRkJyB8fCBldmVudCA9PT0gJ3JlbW92ZScpICYmIGNvbGxlY3Rpb24gIT09IHRoaXMpIHJldHVybjtcbiAgICAgIGlmIChldmVudCA9PT0gJ2Rlc3Ryb3knKSB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7XG4gICAgICBpZiAobW9kZWwgJiYgZXZlbnQgPT09ICdjaGFuZ2U6JyArIG1vZGVsLmlkQXR0cmlidXRlKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLnByZXZpb3VzKG1vZGVsLmlkQXR0cmlidXRlKV07XG4gICAgICAgIGlmIChtb2RlbC5pZCAhPSBudWxsKSB0aGlzLl9ieUlkW21vZGVsLmlkXSA9IG1vZGVsO1xuICAgICAgfVxuICAgICAgdGhpcy50cmlnZ2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHdlIHdhbnQgdG8gaW1wbGVtZW50IG9uIHRoZSBDb2xsZWN0aW9uLlxuICAvLyA5MCUgb2YgdGhlIGNvcmUgdXNlZnVsbmVzcyBvZiBCYWNrYm9uZSBDb2xsZWN0aW9ucyBpcyBhY3R1YWxseSBpbXBsZW1lbnRlZFxuICAvLyByaWdodCBoZXJlOlxuICB2YXIgbWV0aG9kcyA9IFsnZm9yRWFjaCcsICdlYWNoJywgJ21hcCcsICdjb2xsZWN0JywgJ3JlZHVjZScsICdmb2xkbCcsXG4gICAgJ2luamVjdCcsICdyZWR1Y2VSaWdodCcsICdmb2xkcicsICdmaW5kJywgJ2RldGVjdCcsICdmaWx0ZXInLCAnc2VsZWN0JyxcbiAgICAncmVqZWN0JywgJ2V2ZXJ5JywgJ2FsbCcsICdzb21lJywgJ2FueScsICdpbmNsdWRlJywgJ2NvbnRhaW5zJywgJ2ludm9rZScsXG4gICAgJ21heCcsICdtaW4nLCAndG9BcnJheScsICdzaXplJywgJ2ZpcnN0JywgJ2hlYWQnLCAndGFrZScsICdpbml0aWFsJywgJ3Jlc3QnLFxuICAgICd0YWlsJywgJ2Ryb3AnLCAnbGFzdCcsICd3aXRob3V0JywgJ2RpZmZlcmVuY2UnLCAnaW5kZXhPZicsICdzaHVmZmxlJyxcbiAgICAnbGFzdEluZGV4T2YnLCAnaXNFbXB0eScsICdjaGFpbicsICdzYW1wbGUnXTtcblxuICAvLyBNaXggaW4gZWFjaCBVbmRlcnNjb3JlIG1ldGhvZCBhcyBhIHByb3h5IHRvIGBDb2xsZWN0aW9uI21vZGVsc2AuXG4gIF8uZWFjaChtZXRob2RzLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzLm1vZGVscyk7XG4gICAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIGFyZ3MpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHRha2UgYSBwcm9wZXJ0eSBuYW1lIGFzIGFuIGFyZ3VtZW50LlxuICB2YXIgYXR0cmlidXRlTWV0aG9kcyA9IFsnZ3JvdXBCeScsICdjb3VudEJ5JywgJ3NvcnRCeScsICdpbmRleEJ5J107XG5cbiAgLy8gVXNlIGF0dHJpYnV0ZXMgaW5zdGVhZCBvZiBwcm9wZXJ0aWVzLlxuICBfLmVhY2goYXR0cmlidXRlTWV0aG9kcywgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUgOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICByZXR1cm4gbW9kZWwuZ2V0KHZhbHVlKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gX1ttZXRob2RdKHRoaXMubW9kZWxzLCBpdGVyYXRvciwgY29udGV4dCk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQmFja2JvbmUuVmlld1xuICAvLyAtLS0tLS0tLS0tLS0tXG5cbiAgLy8gQmFja2JvbmUgVmlld3MgYXJlIGFsbW9zdCBtb3JlIGNvbnZlbnRpb24gdGhhbiB0aGV5IGFyZSBhY3R1YWwgY29kZS4gQSBWaWV3XG4gIC8vIGlzIHNpbXBseSBhIEphdmFTY3JpcHQgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhIGxvZ2ljYWwgY2h1bmsgb2YgVUkgaW4gdGhlXG4gIC8vIERPTS4gVGhpcyBtaWdodCBiZSBhIHNpbmdsZSBpdGVtLCBhbiBlbnRpcmUgbGlzdCwgYSBzaWRlYmFyIG9yIHBhbmVsLCBvclxuICAvLyBldmVuIHRoZSBzdXJyb3VuZGluZyBmcmFtZSB3aGljaCB3cmFwcyB5b3VyIHdob2xlIGFwcC4gRGVmaW5pbmcgYSBjaHVuayBvZlxuICAvLyBVSSBhcyBhICoqVmlldyoqIGFsbG93cyB5b3UgdG8gZGVmaW5lIHlvdXIgRE9NIGV2ZW50cyBkZWNsYXJhdGl2ZWx5LCB3aXRob3V0XG4gIC8vIGhhdmluZyB0byB3b3JyeSBhYm91dCByZW5kZXIgb3JkZXIgLi4uIGFuZCBtYWtlcyBpdCBlYXN5IGZvciB0aGUgdmlldyB0b1xuICAvLyByZWFjdCB0byBzcGVjaWZpYyBjaGFuZ2VzIGluIHRoZSBzdGF0ZSBvZiB5b3VyIG1vZGVscy5cblxuICAvLyBDcmVhdGluZyBhIEJhY2tib25lLlZpZXcgY3JlYXRlcyBpdHMgaW5pdGlhbCBlbGVtZW50IG91dHNpZGUgb2YgdGhlIERPTSxcbiAgLy8gaWYgYW4gZXhpc3RpbmcgZWxlbWVudCBpcyBub3QgcHJvdmlkZWQuLi5cbiAgdmFyIFZpZXcgPSBCYWNrYm9uZS5WaWV3ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuY2lkID0gXy51bmlxdWVJZCgndmlldycpO1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgXy5leHRlbmQodGhpcywgXy5waWNrKG9wdGlvbnMsIHZpZXdPcHRpb25zKSk7XG4gICAgdGhpcy5fZW5zdXJlRWxlbWVudCgpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgfTtcblxuICAvLyBDYWNoZWQgcmVnZXggdG8gc3BsaXQga2V5cyBmb3IgYGRlbGVnYXRlYC5cbiAgdmFyIGRlbGVnYXRlRXZlbnRTcGxpdHRlciA9IC9eKFxcUyspXFxzKiguKikkLztcblxuICAvLyBMaXN0IG9mIHZpZXcgb3B0aW9ucyB0byBiZSBtZXJnZWQgYXMgcHJvcGVydGllcy5cbiAgdmFyIHZpZXdPcHRpb25zID0gWydtb2RlbCcsICdjb2xsZWN0aW9uJywgJ2VsJywgJ2lkJywgJ2F0dHJpYnV0ZXMnLCAnY2xhc3NOYW1lJywgJ3RhZ05hbWUnLCAnZXZlbnRzJ107XG5cbiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLlZpZXcqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICBfLmV4dGVuZChWaWV3LnByb3RvdHlwZSwgRXZlbnRzLCB7XG5cbiAgICAvLyBUaGUgZGVmYXVsdCBgdGFnTmFtZWAgb2YgYSBWaWV3J3MgZWxlbWVudCBpcyBgXCJkaXZcImAuXG4gICAgdGFnTmFtZTogJ2RpdicsXG5cbiAgICAvLyBqUXVlcnkgZGVsZWdhdGUgZm9yIGVsZW1lbnQgbG9va3VwLCBzY29wZWQgdG8gRE9NIGVsZW1lbnRzIHdpdGhpbiB0aGVcbiAgICAvLyBjdXJyZW50IHZpZXcuIFRoaXMgc2hvdWxkIGJlIHByZWZlcnJlZCB0byBnbG9iYWwgbG9va3VwcyB3aGVyZSBwb3NzaWJsZS5cbiAgICAkOiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoc2VsZWN0b3IpO1xuICAgIH0sXG5cbiAgICAvLyBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd25cbiAgICAvLyBpbml0aWFsaXphdGlvbiBsb2dpYy5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sXG5cbiAgICAvLyAqKnJlbmRlcioqIGlzIHRoZSBjb3JlIGZ1bmN0aW9uIHRoYXQgeW91ciB2aWV3IHNob3VsZCBvdmVycmlkZSwgaW4gb3JkZXJcbiAgICAvLyB0byBwb3B1bGF0ZSBpdHMgZWxlbWVudCAoYHRoaXMuZWxgKSwgd2l0aCB0aGUgYXBwcm9wcmlhdGUgSFRNTC4gVGhlXG4gICAgLy8gY29udmVudGlvbiBpcyBmb3IgKipyZW5kZXIqKiB0byBhbHdheXMgcmV0dXJuIGB0aGlzYC5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFJlbW92ZSB0aGlzIHZpZXcgYnkgdGFraW5nIHRoZSBlbGVtZW50IG91dCBvZiB0aGUgRE9NLCBhbmQgcmVtb3ZpbmcgYW55XG4gICAgLy8gYXBwbGljYWJsZSBCYWNrYm9uZS5FdmVudHMgbGlzdGVuZXJzLlxuICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRlbC5yZW1vdmUoKTtcbiAgICAgIHRoaXMuc3RvcExpc3RlbmluZygpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIENoYW5nZSB0aGUgdmlldydzIGVsZW1lbnQgKGB0aGlzLmVsYCBwcm9wZXJ0eSksIGluY2x1ZGluZyBldmVudFxuICAgIC8vIHJlLWRlbGVnYXRpb24uXG4gICAgc2V0RWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgZGVsZWdhdGUpIHtcbiAgICAgIGlmICh0aGlzLiRlbCkgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XG4gICAgICB0aGlzLiRlbCA9IGVsZW1lbnQgaW5zdGFuY2VvZiBCYWNrYm9uZS4kID8gZWxlbWVudCA6IEJhY2tib25lLiQoZWxlbWVudCk7XG4gICAgICB0aGlzLmVsID0gdGhpcy4kZWxbMF07XG4gICAgICBpZiAoZGVsZWdhdGUgIT09IGZhbHNlKSB0aGlzLmRlbGVnYXRlRXZlbnRzKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gU2V0IGNhbGxiYWNrcywgd2hlcmUgYHRoaXMuZXZlbnRzYCBpcyBhIGhhc2ggb2ZcbiAgICAvL1xuICAgIC8vICp7XCJldmVudCBzZWxlY3RvclwiOiBcImNhbGxiYWNrXCJ9KlxuICAgIC8vXG4gICAgLy8gICAgIHtcbiAgICAvLyAgICAgICAnbW91c2Vkb3duIC50aXRsZSc6ICAnZWRpdCcsXG4gICAgLy8gICAgICAgJ2NsaWNrIC5idXR0b24nOiAgICAgJ3NhdmUnLFxuICAgIC8vICAgICAgICdjbGljayAub3Blbic6ICAgICAgIGZ1bmN0aW9uKGUpIHsgLi4uIH1cbiAgICAvLyAgICAgfVxuICAgIC8vXG4gICAgLy8gcGFpcnMuIENhbGxiYWNrcyB3aWxsIGJlIGJvdW5kIHRvIHRoZSB2aWV3LCB3aXRoIGB0aGlzYCBzZXQgcHJvcGVybHkuXG4gICAgLy8gVXNlcyBldmVudCBkZWxlZ2F0aW9uIGZvciBlZmZpY2llbmN5LlxuICAgIC8vIE9taXR0aW5nIHRoZSBzZWxlY3RvciBiaW5kcyB0aGUgZXZlbnQgdG8gYHRoaXMuZWxgLlxuICAgIC8vIFRoaXMgb25seSB3b3JrcyBmb3IgZGVsZWdhdGUtYWJsZSBldmVudHM6IG5vdCBgZm9jdXNgLCBgYmx1cmAsIGFuZFxuICAgIC8vIG5vdCBgY2hhbmdlYCwgYHN1Ym1pdGAsIGFuZCBgcmVzZXRgIGluIEludGVybmV0IEV4cGxvcmVyLlxuICAgIGRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbihldmVudHMpIHtcbiAgICAgIGlmICghKGV2ZW50cyB8fCAoZXZlbnRzID0gXy5yZXN1bHQodGhpcywgJ2V2ZW50cycpKSkpIHJldHVybiB0aGlzO1xuICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gZXZlbnRzKSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBldmVudHNba2V5XTtcbiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24obWV0aG9kKSkgbWV0aG9kID0gdGhpc1tldmVudHNba2V5XV07XG4gICAgICAgIGlmICghbWV0aG9kKSBjb250aW51ZTtcblxuICAgICAgICB2YXIgbWF0Y2ggPSBrZXkubWF0Y2goZGVsZWdhdGVFdmVudFNwbGl0dGVyKTtcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IG1hdGNoWzFdLCBzZWxlY3RvciA9IG1hdGNoWzJdO1xuICAgICAgICBtZXRob2QgPSBfLmJpbmQobWV0aG9kLCB0aGlzKTtcbiAgICAgICAgZXZlbnROYW1lICs9ICcuZGVsZWdhdGVFdmVudHMnICsgdGhpcy5jaWQ7XG4gICAgICAgIGlmIChzZWxlY3RvciA9PT0gJycpIHtcbiAgICAgICAgICB0aGlzLiRlbC5vbihldmVudE5hbWUsIG1ldGhvZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy4kZWwub24oZXZlbnROYW1lLCBzZWxlY3RvciwgbWV0aG9kKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIENsZWFycyBhbGwgY2FsbGJhY2tzIHByZXZpb3VzbHkgYm91bmQgdG8gdGhlIHZpZXcgd2l0aCBgZGVsZWdhdGVFdmVudHNgLlxuICAgIC8vIFlvdSB1c3VhbGx5IGRvbid0IG5lZWQgdG8gdXNlIHRoaXMsIGJ1dCBtYXkgd2lzaCB0byBpZiB5b3UgaGF2ZSBtdWx0aXBsZVxuICAgIC8vIEJhY2tib25lIHZpZXdzIGF0dGFjaGVkIHRvIHRoZSBzYW1lIERPTSBlbGVtZW50LlxuICAgIHVuZGVsZWdhdGVFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kZWwub2ZmKCcuZGVsZWdhdGVFdmVudHMnICsgdGhpcy5jaWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBWaWV3IGhhcyBhIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgIC8vIElmIGB0aGlzLmVsYCBpcyBhIHN0cmluZywgcGFzcyBpdCB0aHJvdWdoIGAkKClgLCB0YWtlIHRoZSBmaXJzdFxuICAgIC8vIG1hdGNoaW5nIGVsZW1lbnQsIGFuZCByZS1hc3NpZ24gaXQgdG8gYGVsYC4gT3RoZXJ3aXNlLCBjcmVhdGVcbiAgICAvLyBhbiBlbGVtZW50IGZyb20gdGhlIGBpZGAsIGBjbGFzc05hbWVgIGFuZCBgdGFnTmFtZWAgcHJvcGVydGllcy5cbiAgICBfZW5zdXJlRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuZWwpIHtcbiAgICAgICAgdmFyIGF0dHJzID0gXy5leHRlbmQoe30sIF8ucmVzdWx0KHRoaXMsICdhdHRyaWJ1dGVzJykpO1xuICAgICAgICBpZiAodGhpcy5pZCkgYXR0cnMuaWQgPSBfLnJlc3VsdCh0aGlzLCAnaWQnKTtcbiAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lKSBhdHRyc1snY2xhc3MnXSA9IF8ucmVzdWx0KHRoaXMsICdjbGFzc05hbWUnKTtcbiAgICAgICAgdmFyICRlbCA9IEJhY2tib25lLiQoJzwnICsgXy5yZXN1bHQodGhpcywgJ3RhZ05hbWUnKSArICc+JykuYXR0cihhdHRycyk7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudCgkZWwsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudChfLnJlc3VsdCh0aGlzLCAnZWwnKSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICB9KTtcblxuICAvLyBCYWNrYm9uZS5zeW5jXG4gIC8vIC0tLS0tLS0tLS0tLS1cblxuICAvLyBPdmVycmlkZSB0aGlzIGZ1bmN0aW9uIHRvIGNoYW5nZSB0aGUgbWFubmVyIGluIHdoaWNoIEJhY2tib25lIHBlcnNpc3RzXG4gIC8vIG1vZGVscyB0byB0aGUgc2VydmVyLiBZb3Ugd2lsbCBiZSBwYXNzZWQgdGhlIHR5cGUgb2YgcmVxdWVzdCwgYW5kIHRoZVxuICAvLyBtb2RlbCBpbiBxdWVzdGlvbi4gQnkgZGVmYXVsdCwgbWFrZXMgYSBSRVNUZnVsIEFqYXggcmVxdWVzdFxuICAvLyB0byB0aGUgbW9kZWwncyBgdXJsKClgLiBTb21lIHBvc3NpYmxlIGN1c3RvbWl6YXRpb25zIGNvdWxkIGJlOlxuICAvL1xuICAvLyAqIFVzZSBgc2V0VGltZW91dGAgdG8gYmF0Y2ggcmFwaWQtZmlyZSB1cGRhdGVzIGludG8gYSBzaW5nbGUgcmVxdWVzdC5cbiAgLy8gKiBTZW5kIHVwIHRoZSBtb2RlbHMgYXMgWE1MIGluc3RlYWQgb2YgSlNPTi5cbiAgLy8gKiBQZXJzaXN0IG1vZGVscyB2aWEgV2ViU29ja2V0cyBpbnN0ZWFkIG9mIEFqYXguXG4gIC8vXG4gIC8vIFR1cm4gb24gYEJhY2tib25lLmVtdWxhdGVIVFRQYCBpbiBvcmRlciB0byBzZW5kIGBQVVRgIGFuZCBgREVMRVRFYCByZXF1ZXN0c1xuICAvLyBhcyBgUE9TVGAsIHdpdGggYSBgX21ldGhvZGAgcGFyYW1ldGVyIGNvbnRhaW5pbmcgdGhlIHRydWUgSFRUUCBtZXRob2QsXG4gIC8vIGFzIHdlbGwgYXMgYWxsIHJlcXVlc3RzIHdpdGggdGhlIGJvZHkgYXMgYGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZGBcbiAgLy8gaW5zdGVhZCBvZiBgYXBwbGljYXRpb24vanNvbmAgd2l0aCB0aGUgbW9kZWwgaW4gYSBwYXJhbSBuYW1lZCBgbW9kZWxgLlxuICAvLyBVc2VmdWwgd2hlbiBpbnRlcmZhY2luZyB3aXRoIHNlcnZlci1zaWRlIGxhbmd1YWdlcyBsaWtlICoqUEhQKiogdGhhdCBtYWtlXG4gIC8vIGl0IGRpZmZpY3VsdCB0byByZWFkIHRoZSBib2R5IG9mIGBQVVRgIHJlcXVlc3RzLlxuICBCYWNrYm9uZS5zeW5jID0gZnVuY3Rpb24obWV0aG9kLCBtb2RlbCwgb3B0aW9ucykge1xuICAgIHZhciB0eXBlID0gbWV0aG9kTWFwW21ldGhvZF07XG5cbiAgICAvLyBEZWZhdWx0IG9wdGlvbnMsIHVubGVzcyBzcGVjaWZpZWQuXG4gICAgXy5kZWZhdWx0cyhvcHRpb25zIHx8IChvcHRpb25zID0ge30pLCB7XG4gICAgICBlbXVsYXRlSFRUUDogQmFja2JvbmUuZW11bGF0ZUhUVFAsXG4gICAgICBlbXVsYXRlSlNPTjogQmFja2JvbmUuZW11bGF0ZUpTT05cbiAgICB9KTtcblxuICAgIC8vIERlZmF1bHQgSlNPTi1yZXF1ZXN0IG9wdGlvbnMuXG4gICAgdmFyIHBhcmFtcyA9IHt0eXBlOiB0eXBlLCBkYXRhVHlwZTogJ2pzb24nfTtcblxuICAgIC8vIEVuc3VyZSB0aGF0IHdlIGhhdmUgYSBVUkwuXG4gICAgaWYgKCFvcHRpb25zLnVybCkge1xuICAgICAgcGFyYW1zLnVybCA9IF8ucmVzdWx0KG1vZGVsLCAndXJsJykgfHwgdXJsRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB3ZSBoYXZlIHRoZSBhcHByb3ByaWF0ZSByZXF1ZXN0IGRhdGEuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSA9PSBudWxsICYmIG1vZGVsICYmIChtZXRob2QgPT09ICdjcmVhdGUnIHx8IG1ldGhvZCA9PT0gJ3VwZGF0ZScgfHwgbWV0aG9kID09PSAncGF0Y2gnKSkge1xuICAgICAgcGFyYW1zLmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgcGFyYW1zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmF0dHJzIHx8IG1vZGVsLnRvSlNPTihvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSlNPTiBieSBlbmNvZGluZyB0aGUgcmVxdWVzdCBpbnRvIGFuIEhUTUwtZm9ybS5cbiAgICBpZiAob3B0aW9ucy5lbXVsYXRlSlNPTikge1xuICAgICAgcGFyYW1zLmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG4gICAgICBwYXJhbXMuZGF0YSA9IHBhcmFtcy5kYXRhID8ge21vZGVsOiBwYXJhbXMuZGF0YX0gOiB7fTtcbiAgICB9XG5cbiAgICAvLyBGb3Igb2xkZXIgc2VydmVycywgZW11bGF0ZSBIVFRQIGJ5IG1pbWlja2luZyB0aGUgSFRUUCBtZXRob2Qgd2l0aCBgX21ldGhvZGBcbiAgICAvLyBBbmQgYW4gYFgtSFRUUC1NZXRob2QtT3ZlcnJpZGVgIGhlYWRlci5cbiAgICBpZiAob3B0aW9ucy5lbXVsYXRlSFRUUCAmJiAodHlwZSA9PT0gJ1BVVCcgfHwgdHlwZSA9PT0gJ0RFTEVURScgfHwgdHlwZSA9PT0gJ1BBVENIJykpIHtcbiAgICAgIHBhcmFtcy50eXBlID0gJ1BPU1QnO1xuICAgICAgaWYgKG9wdGlvbnMuZW11bGF0ZUpTT04pIHBhcmFtcy5kYXRhLl9tZXRob2QgPSB0eXBlO1xuICAgICAgdmFyIGJlZm9yZVNlbmQgPSBvcHRpb25zLmJlZm9yZVNlbmQ7XG4gICAgICBvcHRpb25zLmJlZm9yZVNlbmQgPSBmdW5jdGlvbih4aHIpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtSFRUUC1NZXRob2QtT3ZlcnJpZGUnLCB0eXBlKTtcbiAgICAgICAgaWYgKGJlZm9yZVNlbmQpIHJldHVybiBiZWZvcmVTZW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIERvbid0IHByb2Nlc3MgZGF0YSBvbiBhIG5vbi1HRVQgcmVxdWVzdC5cbiAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdHRVQnICYmICFvcHRpb25zLmVtdWxhdGVKU09OKSB7XG4gICAgICBwYXJhbXMucHJvY2Vzc0RhdGEgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBzZW5kaW5nIGEgYFBBVENIYCByZXF1ZXN0LCBhbmQgd2UncmUgaW4gYW4gb2xkIEludGVybmV0IEV4cGxvcmVyXG4gICAgLy8gdGhhdCBzdGlsbCBoYXMgQWN0aXZlWCBlbmFibGVkIGJ5IGRlZmF1bHQsIG92ZXJyaWRlIGpRdWVyeSB0byB1c2UgdGhhdFxuICAgIC8vIGZvciBYSFIgaW5zdGVhZC4gUmVtb3ZlIHRoaXMgbGluZSB3aGVuIGpRdWVyeSBzdXBwb3J0cyBgUEFUQ0hgIG9uIElFOC5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdQQVRDSCcgJiYgbm9YaHJQYXRjaCkge1xuICAgICAgcGFyYW1zLnhociA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MSFRUUFwiKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gTWFrZSB0aGUgcmVxdWVzdCwgYWxsb3dpbmcgdGhlIHVzZXIgdG8gb3ZlcnJpZGUgYW55IEFqYXggb3B0aW9ucy5cbiAgICB2YXIgeGhyID0gb3B0aW9ucy54aHIgPSBCYWNrYm9uZS5hamF4KF8uZXh0ZW5kKHBhcmFtcywgb3B0aW9ucykpO1xuICAgIG1vZGVsLnRyaWdnZXIoJ3JlcXVlc3QnLCBtb2RlbCwgeGhyLCBvcHRpb25zKTtcbiAgICByZXR1cm4geGhyO1xuICB9O1xuXG4gIHZhciBub1hoclBhdGNoID1cbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAhIXdpbmRvdy5BY3RpdmVYT2JqZWN0ICYmXG4gICAgICAhKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCAmJiAobmV3IFhNTEh0dHBSZXF1ZXN0KS5kaXNwYXRjaEV2ZW50KTtcblxuICAvLyBNYXAgZnJvbSBDUlVEIHRvIEhUVFAgZm9yIG91ciBkZWZhdWx0IGBCYWNrYm9uZS5zeW5jYCBpbXBsZW1lbnRhdGlvbi5cbiAgdmFyIG1ldGhvZE1hcCA9IHtcbiAgICAnY3JlYXRlJzogJ1BPU1QnLFxuICAgICd1cGRhdGUnOiAnUFVUJyxcbiAgICAncGF0Y2gnOiAgJ1BBVENIJyxcbiAgICAnZGVsZXRlJzogJ0RFTEVURScsXG4gICAgJ3JlYWQnOiAgICdHRVQnXG4gIH07XG5cbiAgLy8gU2V0IHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGBCYWNrYm9uZS5hamF4YCB0byBwcm94eSB0aHJvdWdoIHRvIGAkYC5cbiAgLy8gT3ZlcnJpZGUgdGhpcyBpZiB5b3UnZCBsaWtlIHRvIHVzZSBhIGRpZmZlcmVudCBsaWJyYXJ5LlxuICBCYWNrYm9uZS5hamF4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIEJhY2tib25lLiQuYWpheC5hcHBseShCYWNrYm9uZS4kLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIC8vIEJhY2tib25lLlJvdXRlclxuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSb3V0ZXJzIG1hcCBmYXV4LVVSTHMgdG8gYWN0aW9ucywgYW5kIGZpcmUgZXZlbnRzIHdoZW4gcm91dGVzIGFyZVxuICAvLyBtYXRjaGVkLiBDcmVhdGluZyBhIG5ldyBvbmUgc2V0cyBpdHMgYHJvdXRlc2AgaGFzaCwgaWYgbm90IHNldCBzdGF0aWNhbGx5LlxuICB2YXIgUm91dGVyID0gQmFja2JvbmUuUm91dGVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgaWYgKG9wdGlvbnMucm91dGVzKSB0aGlzLnJvdXRlcyA9IG9wdGlvbnMucm91dGVzO1xuICAgIHRoaXMuX2JpbmRSb3V0ZXMoKTtcbiAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcblxuICAvLyBDYWNoZWQgcmVndWxhciBleHByZXNzaW9ucyBmb3IgbWF0Y2hpbmcgbmFtZWQgcGFyYW0gcGFydHMgYW5kIHNwbGF0dGVkXG4gIC8vIHBhcnRzIG9mIHJvdXRlIHN0cmluZ3MuXG4gIHZhciBvcHRpb25hbFBhcmFtID0gL1xcKCguKj8pXFwpL2c7XG4gIHZhciBuYW1lZFBhcmFtICAgID0gLyhcXChcXD8pPzpcXHcrL2c7XG4gIHZhciBzcGxhdFBhcmFtICAgID0gL1xcKlxcdysvZztcbiAgdmFyIGVzY2FwZVJlZ0V4cCAgPSAvW1xcLXt9XFxbXFxdKz8uLFxcXFxcXF4kfCNcXHNdL2c7XG5cbiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLlJvdXRlcioqIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuXG4gIF8uZXh0ZW5kKFJvdXRlci5wcm90b3R5cGUsIEV2ZW50cywge1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duXG4gICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LFxuXG4gICAgLy8gTWFudWFsbHkgYmluZCBhIHNpbmdsZSBuYW1lZCByb3V0ZSB0byBhIGNhbGxiYWNrLiBGb3IgZXhhbXBsZTpcbiAgICAvL1xuICAgIC8vICAgICB0aGlzLnJvdXRlKCdzZWFyY2gvOnF1ZXJ5L3A6bnVtJywgJ3NlYXJjaCcsIGZ1bmN0aW9uKHF1ZXJ5LCBudW0pIHtcbiAgICAvLyAgICAgICAuLi5cbiAgICAvLyAgICAgfSk7XG4gICAgLy9cbiAgICByb3V0ZTogZnVuY3Rpb24ocm91dGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoIV8uaXNSZWdFeHAocm91dGUpKSByb3V0ZSA9IHRoaXMuX3JvdXRlVG9SZWdFeHAocm91dGUpO1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihuYW1lKSkge1xuICAgICAgICBjYWxsYmFjayA9IG5hbWU7XG4gICAgICAgIG5hbWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gdGhpc1tuYW1lXTtcbiAgICAgIHZhciByb3V0ZXIgPSB0aGlzO1xuICAgICAgQmFja2JvbmUuaGlzdG9yeS5yb3V0ZShyb3V0ZSwgZnVuY3Rpb24oZnJhZ21lbnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSByb3V0ZXIuX2V4dHJhY3RQYXJhbWV0ZXJzKHJvdXRlLCBmcmFnbWVudCk7XG4gICAgICAgIHJvdXRlci5leGVjdXRlKGNhbGxiYWNrLCBhcmdzKTtcbiAgICAgICAgcm91dGVyLnRyaWdnZXIuYXBwbHkocm91dGVyLCBbJ3JvdXRlOicgKyBuYW1lXS5jb25jYXQoYXJncykpO1xuICAgICAgICByb3V0ZXIudHJpZ2dlcigncm91dGUnLCBuYW1lLCBhcmdzKTtcbiAgICAgICAgQmFja2JvbmUuaGlzdG9yeS50cmlnZ2VyKCdyb3V0ZScsIHJvdXRlciwgbmFtZSwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBFeGVjdXRlIGEgcm91dGUgaGFuZGxlciB3aXRoIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXJzLiAgVGhpcyBpcyBhblxuICAgIC8vIGV4Y2VsbGVudCBwbGFjZSB0byBkbyBwcmUtcm91dGUgc2V0dXAgb3IgcG9zdC1yb3V0ZSBjbGVhbnVwLlxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uKGNhbGxiYWNrLCBhcmdzKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0sXG5cbiAgICAvLyBTaW1wbGUgcHJveHkgdG8gYEJhY2tib25lLmhpc3RvcnlgIHRvIHNhdmUgYSBmcmFnbWVudCBpbnRvIHRoZSBoaXN0b3J5LlxuICAgIG5hdmlnYXRlOiBmdW5jdGlvbihmcmFnbWVudCwgb3B0aW9ucykge1xuICAgICAgQmFja2JvbmUuaGlzdG9yeS5uYXZpZ2F0ZShmcmFnbWVudCwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gQmluZCBhbGwgZGVmaW5lZCByb3V0ZXMgdG8gYEJhY2tib25lLmhpc3RvcnlgLiBXZSBoYXZlIHRvIHJldmVyc2UgdGhlXG4gICAgLy8gb3JkZXIgb2YgdGhlIHJvdXRlcyBoZXJlIHRvIHN1cHBvcnQgYmVoYXZpb3Igd2hlcmUgdGhlIG1vc3QgZ2VuZXJhbFxuICAgIC8vIHJvdXRlcyBjYW4gYmUgZGVmaW5lZCBhdCB0aGUgYm90dG9tIG9mIHRoZSByb3V0ZSBtYXAuXG4gICAgX2JpbmRSb3V0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnJvdXRlcykgcmV0dXJuO1xuICAgICAgdGhpcy5yb3V0ZXMgPSBfLnJlc3VsdCh0aGlzLCAncm91dGVzJyk7XG4gICAgICB2YXIgcm91dGUsIHJvdXRlcyA9IF8ua2V5cyh0aGlzLnJvdXRlcyk7XG4gICAgICB3aGlsZSAoKHJvdXRlID0gcm91dGVzLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucm91dGUocm91dGUsIHRoaXMucm91dGVzW3JvdXRlXSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSByb3V0ZSBzdHJpbmcgaW50byBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgc3VpdGFibGUgZm9yIG1hdGNoaW5nXG4gICAgLy8gYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbiBoYXNoLlxuICAgIF9yb3V0ZVRvUmVnRXhwOiBmdW5jdGlvbihyb3V0ZSkge1xuICAgICAgcm91dGUgPSByb3V0ZS5yZXBsYWNlKGVzY2FwZVJlZ0V4cCwgJ1xcXFwkJicpXG4gICAgICAgICAgICAgICAgICAgLnJlcGxhY2Uob3B0aW9uYWxQYXJhbSwgJyg/OiQxKT8nKVxuICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKG5hbWVkUGFyYW0sIGZ1bmN0aW9uKG1hdGNoLCBvcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbmFsID8gbWF0Y2ggOiAnKFteLz9dKyknO1xuICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgLnJlcGxhY2Uoc3BsYXRQYXJhbSwgJyhbXj9dKj8pJyk7XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyByb3V0ZSArICcoPzpcXFxcPyhbXFxcXHNcXFxcU10qKSk/JCcpO1xuICAgIH0sXG5cbiAgICAvLyBHaXZlbiBhIHJvdXRlLCBhbmQgYSBVUkwgZnJhZ21lbnQgdGhhdCBpdCBtYXRjaGVzLCByZXR1cm4gdGhlIGFycmF5IG9mXG4gICAgLy8gZXh0cmFjdGVkIGRlY29kZWQgcGFyYW1ldGVycy4gRW1wdHkgb3IgdW5tYXRjaGVkIHBhcmFtZXRlcnMgd2lsbCBiZVxuICAgIC8vIHRyZWF0ZWQgYXMgYG51bGxgIHRvIG5vcm1hbGl6ZSBjcm9zcy1icm93c2VyIGJlaGF2aW9yLlxuICAgIF9leHRyYWN0UGFyYW1ldGVyczogZnVuY3Rpb24ocm91dGUsIGZyYWdtZW50KSB7XG4gICAgICB2YXIgcGFyYW1zID0gcm91dGUuZXhlYyhmcmFnbWVudCkuc2xpY2UoMSk7XG4gICAgICByZXR1cm4gXy5tYXAocGFyYW1zLCBmdW5jdGlvbihwYXJhbSwgaSkge1xuICAgICAgICAvLyBEb24ndCBkZWNvZGUgdGhlIHNlYXJjaCBwYXJhbXMuXG4gICAgICAgIGlmIChpID09PSBwYXJhbXMubGVuZ3RoIC0gMSkgcmV0dXJuIHBhcmFtIHx8IG51bGw7XG4gICAgICAgIHJldHVybiBwYXJhbSA/IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbSkgOiBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIC8vIEJhY2tib25lLkhpc3RvcnlcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEhhbmRsZXMgY3Jvc3MtYnJvd3NlciBoaXN0b3J5IG1hbmFnZW1lbnQsIGJhc2VkIG9uIGVpdGhlclxuICAvLyBbcHVzaFN0YXRlXShodHRwOi8vZGl2ZWludG9odG1sNS5pbmZvL2hpc3RvcnkuaHRtbCkgYW5kIHJlYWwgVVJMcywgb3JcbiAgLy8gW29uaGFzaGNoYW5nZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9ET00vd2luZG93Lm9uaGFzaGNoYW5nZSlcbiAgLy8gYW5kIFVSTCBmcmFnbWVudHMuIElmIHRoZSBicm93c2VyIHN1cHBvcnRzIG5laXRoZXIgKG9sZCBJRSwgbmF0Y2gpLFxuICAvLyBmYWxscyBiYWNrIHRvIHBvbGxpbmcuXG4gIHZhciBIaXN0b3J5ID0gQmFja2JvbmUuSGlzdG9yeSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICBfLmJpbmRBbGwodGhpcywgJ2NoZWNrVXJsJyk7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCBgSGlzdG9yeWAgY2FuIGJlIHVzZWQgb3V0c2lkZSBvZiB0aGUgYnJvd3Nlci5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgICB0aGlzLmhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBzdHJpcHBpbmcgYSBsZWFkaW5nIGhhc2gvc2xhc2ggYW5kIHRyYWlsaW5nIHNwYWNlLlxuICB2YXIgcm91dGVTdHJpcHBlciA9IC9eWyNcXC9dfFxccyskL2c7XG5cbiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBzdHJpcHBpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcy5cbiAgdmFyIHJvb3RTdHJpcHBlciA9IC9eXFwvK3xcXC8rJC9nO1xuXG4gIC8vIENhY2hlZCByZWdleCBmb3IgZGV0ZWN0aW5nIE1TSUUuXG4gIHZhciBpc0V4cGxvcmVyID0gL21zaWUgW1xcdy5dKy87XG5cbiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciByZW1vdmluZyBhIHRyYWlsaW5nIHNsYXNoLlxuICB2YXIgdHJhaWxpbmdTbGFzaCA9IC9cXC8kLztcblxuICAvLyBDYWNoZWQgcmVnZXggZm9yIHN0cmlwcGluZyB1cmxzIG9mIGhhc2guXG4gIHZhciBwYXRoU3RyaXBwZXIgPSAvIy4qJC87XG5cbiAgLy8gSGFzIHRoZSBoaXN0b3J5IGhhbmRsaW5nIGFscmVhZHkgYmVlbiBzdGFydGVkP1xuICBIaXN0b3J5LnN0YXJ0ZWQgPSBmYWxzZTtcblxuICAvLyBTZXQgdXAgYWxsIGluaGVyaXRhYmxlICoqQmFja2JvbmUuSGlzdG9yeSoqIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuXG4gIF8uZXh0ZW5kKEhpc3RvcnkucHJvdG90eXBlLCBFdmVudHMsIHtcblxuICAgIC8vIFRoZSBkZWZhdWx0IGludGVydmFsIHRvIHBvbGwgZm9yIGhhc2ggY2hhbmdlcywgaWYgbmVjZXNzYXJ5LCBpc1xuICAgIC8vIHR3ZW50eSB0aW1lcyBhIHNlY29uZC5cbiAgICBpbnRlcnZhbDogNTAsXG5cbiAgICAvLyBBcmUgd2UgYXQgdGhlIGFwcCByb290P1xuICAgIGF0Um9vdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9bXlxcL10kLywgJyQmLycpID09PSB0aGlzLnJvb3Q7XG4gICAgfSxcblxuICAgIC8vIEdldHMgdGhlIHRydWUgaGFzaCB2YWx1ZS4gQ2Fubm90IHVzZSBsb2NhdGlvbi5oYXNoIGRpcmVjdGx5IGR1ZSB0byBidWdcbiAgICAvLyBpbiBGaXJlZm94IHdoZXJlIGxvY2F0aW9uLmhhc2ggd2lsbCBhbHdheXMgYmUgZGVjb2RlZC5cbiAgICBnZXRIYXNoOiBmdW5jdGlvbih3aW5kb3cpIHtcbiAgICAgIHZhciBtYXRjaCA9ICh3aW5kb3cgfHwgdGhpcykubG9jYXRpb24uaHJlZi5tYXRjaCgvIyguKikkLyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgdGhlIGNyb3NzLWJyb3dzZXIgbm9ybWFsaXplZCBVUkwgZnJhZ21lbnQsIGVpdGhlciBmcm9tIHRoZSBVUkwsXG4gICAgLy8gdGhlIGhhc2gsIG9yIHRoZSBvdmVycmlkZS5cbiAgICBnZXRGcmFnbWVudDogZnVuY3Rpb24oZnJhZ21lbnQsIGZvcmNlUHVzaFN0YXRlKSB7XG4gICAgICBpZiAoZnJhZ21lbnQgPT0gbnVsbCkge1xuICAgICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlIHx8ICF0aGlzLl93YW50c0hhc2hDaGFuZ2UgfHwgZm9yY2VQdXNoU3RhdGUpIHtcbiAgICAgICAgICBmcmFnbWVudCA9IGRlY29kZVVSSSh0aGlzLmxvY2F0aW9uLnBhdGhuYW1lICsgdGhpcy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICAgIHZhciByb290ID0gdGhpcy5yb290LnJlcGxhY2UodHJhaWxpbmdTbGFzaCwgJycpO1xuICAgICAgICAgIGlmICghZnJhZ21lbnQuaW5kZXhPZihyb290KSkgZnJhZ21lbnQgPSBmcmFnbWVudC5zbGljZShyb290Lmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmdldEhhc2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyYWdtZW50LnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpO1xuICAgIH0sXG5cbiAgICAvLyBTdGFydCB0aGUgaGFzaCBjaGFuZ2UgaGFuZGxpbmcsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGN1cnJlbnQgVVJMIG1hdGNoZXNcbiAgICAvLyBhbiBleGlzdGluZyByb3V0ZSwgYW5kIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgIHN0YXJ0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAoSGlzdG9yeS5zdGFydGVkKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWNrYm9uZS5oaXN0b3J5IGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZFwiKTtcbiAgICAgIEhpc3Rvcnkuc3RhcnRlZCA9IHRydWU7XG5cbiAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIGluaXRpYWwgY29uZmlndXJhdGlvbi4gRG8gd2UgbmVlZCBhbiBpZnJhbWU/XG4gICAgICAvLyBJcyBwdXNoU3RhdGUgZGVzaXJlZCAuLi4gaXMgaXQgYXZhaWxhYmxlP1xuICAgICAgdGhpcy5vcHRpb25zICAgICAgICAgID0gXy5leHRlbmQoe3Jvb3Q6ICcvJ30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICB0aGlzLnJvb3QgICAgICAgICAgICAgPSB0aGlzLm9wdGlvbnMucm9vdDtcbiAgICAgIHRoaXMuX3dhbnRzSGFzaENoYW5nZSA9IHRoaXMub3B0aW9ucy5oYXNoQ2hhbmdlICE9PSBmYWxzZTtcbiAgICAgIHRoaXMuX3dhbnRzUHVzaFN0YXRlICA9ICEhdGhpcy5vcHRpb25zLnB1c2hTdGF0ZTtcbiAgICAgIHRoaXMuX2hhc1B1c2hTdGF0ZSAgICA9ICEhKHRoaXMub3B0aW9ucy5wdXNoU3RhdGUgJiYgdGhpcy5oaXN0b3J5ICYmIHRoaXMuaGlzdG9yeS5wdXNoU3RhdGUpO1xuICAgICAgdmFyIGZyYWdtZW50ICAgICAgICAgID0gdGhpcy5nZXRGcmFnbWVudCgpO1xuICAgICAgdmFyIGRvY01vZGUgICAgICAgICAgID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuICAgICAgdmFyIG9sZElFICAgICAgICAgICAgID0gKGlzRXhwbG9yZXIuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpICYmICghZG9jTW9kZSB8fCBkb2NNb2RlIDw9IDcpKTtcblxuICAgICAgLy8gTm9ybWFsaXplIHJvb3QgdG8gYWx3YXlzIGluY2x1ZGUgYSBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaC5cbiAgICAgIHRoaXMucm9vdCA9ICgnLycgKyB0aGlzLnJvb3QgKyAnLycpLnJlcGxhY2Uocm9vdFN0cmlwcGVyLCAnLycpO1xuXG4gICAgICBpZiAob2xkSUUgJiYgdGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7XG4gICAgICAgIHZhciBmcmFtZSA9IEJhY2tib25lLiQoJzxpZnJhbWUgc3JjPVwiamF2YXNjcmlwdDowXCIgdGFiaW5kZXg9XCItMVwiPicpO1xuICAgICAgICB0aGlzLmlmcmFtZSA9IGZyYW1lLmhpZGUoKS5hcHBlbmRUbygnYm9keScpWzBdLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgIHRoaXMubmF2aWdhdGUoZnJhZ21lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBEZXBlbmRpbmcgb24gd2hldGhlciB3ZSdyZSB1c2luZyBwdXNoU3RhdGUgb3IgaGFzaGVzLCBhbmQgd2hldGhlclxuICAgICAgLy8gJ29uaGFzaGNoYW5nZScgaXMgc3VwcG9ydGVkLCBkZXRlcm1pbmUgaG93IHdlIGNoZWNrIHRoZSBVUkwgc3RhdGUuXG4gICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlKSB7XG4gICAgICAgIEJhY2tib25lLiQod2luZG93KS5vbigncG9wc3RhdGUnLCB0aGlzLmNoZWNrVXJsKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlICYmICgnb25oYXNoY2hhbmdlJyBpbiB3aW5kb3cpICYmICFvbGRJRSkge1xuICAgICAgICBCYWNrYm9uZS4kKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCB0aGlzLmNoZWNrVXJsKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrVXJsSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLmNoZWNrVXJsLCB0aGlzLmludGVydmFsKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gY2hhbmdlIHRoZSBiYXNlIHVybCwgZm9yIGEgcHVzaFN0YXRlIGxpbmtcbiAgICAgIC8vIG9wZW5lZCBieSBhIG5vbi1wdXNoU3RhdGUgYnJvd3Nlci5cbiAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDtcbiAgICAgIHZhciBsb2MgPSB0aGlzLmxvY2F0aW9uO1xuXG4gICAgICAvLyBUcmFuc2l0aW9uIGZyb20gaGFzaENoYW5nZSB0byBwdXNoU3RhdGUgb3IgdmljZSB2ZXJzYSBpZiBib3RoIGFyZVxuICAgICAgLy8gcmVxdWVzdGVkLlxuICAgICAgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSAmJiB0aGlzLl93YW50c1B1c2hTdGF0ZSkge1xuXG4gICAgICAgIC8vIElmIHdlJ3ZlIHN0YXJ0ZWQgb2ZmIHdpdGggYSByb3V0ZSBmcm9tIGEgYHB1c2hTdGF0ZWAtZW5hYmxlZFxuICAgICAgICAvLyBicm93c2VyLCBidXQgd2UncmUgY3VycmVudGx5IGluIGEgYnJvd3NlciB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBpdC4uLlxuICAgICAgICBpZiAoIXRoaXMuX2hhc1B1c2hTdGF0ZSAmJiAhdGhpcy5hdFJvb3QoKSkge1xuICAgICAgICAgIHRoaXMuZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KG51bGwsIHRydWUpO1xuICAgICAgICAgIHRoaXMubG9jYXRpb24ucmVwbGFjZSh0aGlzLnJvb3QgKyAnIycgKyB0aGlzLmZyYWdtZW50KTtcbiAgICAgICAgICAvLyBSZXR1cm4gaW1tZWRpYXRlbHkgYXMgYnJvd3NlciB3aWxsIGRvIHJlZGlyZWN0IHRvIG5ldyB1cmxcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAvLyBPciBpZiB3ZSd2ZSBzdGFydGVkIG91dCB3aXRoIGEgaGFzaC1iYXNlZCByb3V0ZSwgYnV0IHdlJ3JlIGN1cnJlbnRseVxuICAgICAgICAvLyBpbiBhIGJyb3dzZXIgd2hlcmUgaXQgY291bGQgYmUgYHB1c2hTdGF0ZWAtYmFzZWQgaW5zdGVhZC4uLlxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSAmJiB0aGlzLmF0Um9vdCgpICYmIGxvYy5oYXNoKSB7XG4gICAgICAgICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpLnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpO1xuICAgICAgICAgIHRoaXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIGRvY3VtZW50LnRpdGxlLCB0aGlzLnJvb3QgKyB0aGlzLmZyYWdtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnNpbGVudCkgcmV0dXJuIHRoaXMubG9hZFVybCgpO1xuICAgIH0sXG5cbiAgICAvLyBEaXNhYmxlIEJhY2tib25lLmhpc3RvcnksIHBlcmhhcHMgdGVtcG9yYXJpbHkuIE5vdCB1c2VmdWwgaW4gYSByZWFsIGFwcCxcbiAgICAvLyBidXQgcG9zc2libHkgdXNlZnVsIGZvciB1bml0IHRlc3RpbmcgUm91dGVycy5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIEJhY2tib25lLiQod2luZG93KS5vZmYoJ3BvcHN0YXRlJywgdGhpcy5jaGVja1VybCkub2ZmKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7XG4gICAgICBpZiAodGhpcy5fY2hlY2tVcmxJbnRlcnZhbCkgY2xlYXJJbnRlcnZhbCh0aGlzLl9jaGVja1VybEludGVydmFsKTtcbiAgICAgIEhpc3Rvcnkuc3RhcnRlZCA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyBBZGQgYSByb3V0ZSB0byBiZSB0ZXN0ZWQgd2hlbiB0aGUgZnJhZ21lbnQgY2hhbmdlcy4gUm91dGVzIGFkZGVkIGxhdGVyXG4gICAgLy8gbWF5IG92ZXJyaWRlIHByZXZpb3VzIHJvdXRlcy5cbiAgICByb3V0ZTogZnVuY3Rpb24ocm91dGUsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzLnVuc2hpZnQoe3JvdXRlOiByb3V0ZSwgY2FsbGJhY2s6IGNhbGxiYWNrfSk7XG4gICAgfSxcblxuICAgIC8vIENoZWNrcyB0aGUgY3VycmVudCBVUkwgdG8gc2VlIGlmIGl0IGhhcyBjaGFuZ2VkLCBhbmQgaWYgaXQgaGFzLFxuICAgIC8vIGNhbGxzIGBsb2FkVXJsYCwgbm9ybWFsaXppbmcgYWNyb3NzIHRoZSBoaWRkZW4gaWZyYW1lLlxuICAgIGNoZWNrVXJsOiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoKTtcbiAgICAgIGlmIChjdXJyZW50ID09PSB0aGlzLmZyYWdtZW50ICYmIHRoaXMuaWZyYW1lKSB7XG4gICAgICAgIGN1cnJlbnQgPSB0aGlzLmdldEZyYWdtZW50KHRoaXMuZ2V0SGFzaCh0aGlzLmlmcmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZnJhZ21lbnQpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICh0aGlzLmlmcmFtZSkgdGhpcy5uYXZpZ2F0ZShjdXJyZW50KTtcbiAgICAgIHRoaXMubG9hZFVybCgpO1xuICAgIH0sXG5cbiAgICAvLyBBdHRlbXB0IHRvIGxvYWQgdGhlIGN1cnJlbnQgVVJMIGZyYWdtZW50LiBJZiBhIHJvdXRlIHN1Y2NlZWRzIHdpdGggYVxuICAgIC8vIG1hdGNoLCByZXR1cm5zIGB0cnVlYC4gSWYgbm8gZGVmaW5lZCByb3V0ZXMgbWF0Y2hlcyB0aGUgZnJhZ21lbnQsXG4gICAgLy8gcmV0dXJucyBgZmFsc2VgLlxuICAgIGxvYWRVcmw6IGZ1bmN0aW9uKGZyYWdtZW50KSB7XG4gICAgICBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KGZyYWdtZW50KTtcbiAgICAgIHJldHVybiBfLmFueSh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgIGlmIChoYW5kbGVyLnJvdXRlLnRlc3QoZnJhZ21lbnQpKSB7XG4gICAgICAgICAgaGFuZGxlci5jYWxsYmFjayhmcmFnbWVudCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBTYXZlIGEgZnJhZ21lbnQgaW50byB0aGUgaGFzaCBoaXN0b3J5LCBvciByZXBsYWNlIHRoZSBVUkwgc3RhdGUgaWYgdGhlXG4gICAgLy8gJ3JlcGxhY2UnIG9wdGlvbiBpcyBwYXNzZWQuIFlvdSBhcmUgcmVzcG9uc2libGUgZm9yIHByb3Blcmx5IFVSTC1lbmNvZGluZ1xuICAgIC8vIHRoZSBmcmFnbWVudCBpbiBhZHZhbmNlLlxuICAgIC8vXG4gICAgLy8gVGhlIG9wdGlvbnMgb2JqZWN0IGNhbiBjb250YWluIGB0cmlnZ2VyOiB0cnVlYCBpZiB5b3Ugd2lzaCB0byBoYXZlIHRoZVxuICAgIC8vIHJvdXRlIGNhbGxiYWNrIGJlIGZpcmVkIChub3QgdXN1YWxseSBkZXNpcmFibGUpLCBvciBgcmVwbGFjZTogdHJ1ZWAsIGlmXG4gICAgLy8geW91IHdpc2ggdG8gbW9kaWZ5IHRoZSBjdXJyZW50IFVSTCB3aXRob3V0IGFkZGluZyBhbiBlbnRyeSB0byB0aGUgaGlzdG9yeS5cbiAgICBuYXZpZ2F0ZTogZnVuY3Rpb24oZnJhZ21lbnQsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghSGlzdG9yeS5zdGFydGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucyA9PT0gdHJ1ZSkgb3B0aW9ucyA9IHt0cmlnZ2VyOiAhIW9wdGlvbnN9O1xuXG4gICAgICB2YXIgdXJsID0gdGhpcy5yb290ICsgKGZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChmcmFnbWVudCB8fCAnJykpO1xuXG4gICAgICAvLyBTdHJpcCB0aGUgaGFzaCBmb3IgbWF0Y2hpbmcuXG4gICAgICBmcmFnbWVudCA9IGZyYWdtZW50LnJlcGxhY2UocGF0aFN0cmlwcGVyLCAnJyk7XG5cbiAgICAgIGlmICh0aGlzLmZyYWdtZW50ID09PSBmcmFnbWVudCkgcmV0dXJuO1xuICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50O1xuXG4gICAgICAvLyBEb24ndCBpbmNsdWRlIGEgdHJhaWxpbmcgc2xhc2ggb24gdGhlIHJvb3QuXG4gICAgICBpZiAoZnJhZ21lbnQgPT09ICcnICYmIHVybCAhPT0gJy8nKSB1cmwgPSB1cmwuc2xpY2UoMCwgLTEpO1xuXG4gICAgICAvLyBJZiBwdXNoU3RhdGUgaXMgYXZhaWxhYmxlLCB3ZSB1c2UgaXQgdG8gc2V0IHRoZSBmcmFnbWVudCBhcyBhIHJlYWwgVVJMLlxuICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSkge1xuICAgICAgICB0aGlzLmhpc3Rvcnlbb3B0aW9ucy5yZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oe30sIGRvY3VtZW50LnRpdGxlLCB1cmwpO1xuXG4gICAgICAvLyBJZiBoYXNoIGNoYW5nZXMgaGF2ZW4ndCBiZWVuIGV4cGxpY2l0bHkgZGlzYWJsZWQsIHVwZGF0ZSB0aGUgaGFzaFxuICAgICAgLy8gZnJhZ21lbnQgdG8gc3RvcmUgaGlzdG9yeS5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUhhc2godGhpcy5sb2NhdGlvbiwgZnJhZ21lbnQsIG9wdGlvbnMucmVwbGFjZSk7XG4gICAgICAgIGlmICh0aGlzLmlmcmFtZSAmJiAoZnJhZ21lbnQgIT09IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSkpKSB7XG4gICAgICAgICAgLy8gT3BlbmluZyBhbmQgY2xvc2luZyB0aGUgaWZyYW1lIHRyaWNrcyBJRTcgYW5kIGVhcmxpZXIgdG8gcHVzaCBhXG4gICAgICAgICAgLy8gaGlzdG9yeSBlbnRyeSBvbiBoYXNoLXRhZyBjaGFuZ2UuICBXaGVuIHJlcGxhY2UgaXMgdHJ1ZSwgd2UgZG9uJ3RcbiAgICAgICAgICAvLyB3YW50IHRoaXMuXG4gICAgICAgICAgaWYoIW9wdGlvbnMucmVwbGFjZSkgdGhpcy5pZnJhbWUuZG9jdW1lbnQub3BlbigpLmNsb3NlKCk7XG4gICAgICAgICAgdGhpcy5fdXBkYXRlSGFzaCh0aGlzLmlmcmFtZS5sb2NhdGlvbiwgZnJhZ21lbnQsIG9wdGlvbnMucmVwbGFjZSk7XG4gICAgICAgIH1cblxuICAgICAgLy8gSWYgeW91J3ZlIHRvbGQgdXMgdGhhdCB5b3UgZXhwbGljaXRseSBkb24ndCB3YW50IGZhbGxiYWNrIGhhc2hjaGFuZ2UtXG4gICAgICAvLyBiYXNlZCBoaXN0b3J5LCB0aGVuIGBuYXZpZ2F0ZWAgYmVjb21lcyBhIHBhZ2UgcmVmcmVzaC5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlcikgcmV0dXJuIHRoaXMubG9hZFVybChmcmFnbWVudCk7XG4gICAgfSxcblxuICAgIC8vIFVwZGF0ZSB0aGUgaGFzaCBsb2NhdGlvbiwgZWl0aGVyIHJlcGxhY2luZyB0aGUgY3VycmVudCBlbnRyeSwgb3IgYWRkaW5nXG4gICAgLy8gYSBuZXcgb25lIHRvIHRoZSBicm93c2VyIGhpc3RvcnkuXG4gICAgX3VwZGF0ZUhhc2g6IGZ1bmN0aW9uKGxvY2F0aW9uLCBmcmFnbWVudCwgcmVwbGFjZSkge1xuICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgdmFyIGhyZWYgPSBsb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyhqYXZhc2NyaXB0OnwjKS4qJC8sICcnKTtcbiAgICAgICAgbG9jYXRpb24ucmVwbGFjZShocmVmICsgJyMnICsgZnJhZ21lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU29tZSBicm93c2VycyByZXF1aXJlIHRoYXQgYGhhc2hgIGNvbnRhaW5zIGEgbGVhZGluZyAjLlxuICAgICAgICBsb2NhdGlvbi5oYXNoID0gJyMnICsgZnJhZ21lbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gIH0pO1xuXG4gIC8vIENyZWF0ZSB0aGUgZGVmYXVsdCBCYWNrYm9uZS5oaXN0b3J5LlxuICBCYWNrYm9uZS5oaXN0b3J5ID0gbmV3IEhpc3Rvcnk7XG5cbiAgLy8gSGVscGVyc1xuICAvLyAtLS0tLS0tXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvcnJlY3RseSBzZXQgdXAgdGhlIHByb3RvdHlwZSBjaGFpbiwgZm9yIHN1YmNsYXNzZXMuXG4gIC8vIFNpbWlsYXIgdG8gYGdvb2cuaW5oZXJpdHNgLCBidXQgdXNlcyBhIGhhc2ggb2YgcHJvdG90eXBlIHByb3BlcnRpZXMgYW5kXG4gIC8vIGNsYXNzIHByb3BlcnRpZXMgdG8gYmUgZXh0ZW5kZWQuXG4gIHZhciBleHRlbmQgPSBmdW5jdGlvbihwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzO1xuICAgIHZhciBjaGlsZDtcblxuICAgIC8vIFRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIG5ldyBzdWJjbGFzcyBpcyBlaXRoZXIgZGVmaW5lZCBieSB5b3VcbiAgICAvLyAodGhlIFwiY29uc3RydWN0b3JcIiBwcm9wZXJ0eSBpbiB5b3VyIGBleHRlbmRgIGRlZmluaXRpb24pLCBvciBkZWZhdWx0ZWRcbiAgICAvLyBieSB1cyB0byBzaW1wbHkgY2FsbCB0aGUgcGFyZW50J3MgY29uc3RydWN0b3IuXG4gICAgaWYgKHByb3RvUHJvcHMgJiYgXy5oYXMocHJvdG9Qcm9wcywgJ2NvbnN0cnVjdG9yJykpIHtcbiAgICAgIGNoaWxkID0gcHJvdG9Qcm9wcy5jb25zdHJ1Y3RvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGQgPSBmdW5jdGlvbigpeyByZXR1cm4gcGFyZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgfVxuXG4gICAgLy8gQWRkIHN0YXRpYyBwcm9wZXJ0aWVzIHRvIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgaWYgc3VwcGxpZWQuXG4gICAgXy5leHRlbmQoY2hpbGQsIHBhcmVudCwgc3RhdGljUHJvcHMpO1xuXG4gICAgLy8gU2V0IHRoZSBwcm90b3R5cGUgY2hhaW4gdG8gaW5oZXJpdCBmcm9tIGBwYXJlbnRgLCB3aXRob3V0IGNhbGxpbmdcbiAgICAvLyBgcGFyZW50YCdzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgIHZhciBTdXJyb2dhdGUgPSBmdW5jdGlvbigpeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH07XG4gICAgU3Vycm9nYXRlLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7XG4gICAgY2hpbGQucHJvdG90eXBlID0gbmV3IFN1cnJvZ2F0ZTtcblxuICAgIC8vIEFkZCBwcm90b3R5cGUgcHJvcGVydGllcyAoaW5zdGFuY2UgcHJvcGVydGllcykgdG8gdGhlIHN1YmNsYXNzLFxuICAgIC8vIGlmIHN1cHBsaWVkLlxuICAgIGlmIChwcm90b1Byb3BzKSBfLmV4dGVuZChjaGlsZC5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuXG4gICAgLy8gU2V0IGEgY29udmVuaWVuY2UgcHJvcGVydHkgaW4gY2FzZSB0aGUgcGFyZW50J3MgcHJvdG90eXBlIGlzIG5lZWRlZFxuICAgIC8vIGxhdGVyLlxuICAgIGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH07XG5cbiAgLy8gU2V0IHVwIGluaGVyaXRhbmNlIGZvciB0aGUgbW9kZWwsIGNvbGxlY3Rpb24sIHJvdXRlciwgdmlldyBhbmQgaGlzdG9yeS5cbiAgTW9kZWwuZXh0ZW5kID0gQ29sbGVjdGlvbi5leHRlbmQgPSBSb3V0ZXIuZXh0ZW5kID0gVmlldy5leHRlbmQgPSBIaXN0b3J5LmV4dGVuZCA9IGV4dGVuZDtcblxuICAvLyBUaHJvdyBhbiBlcnJvciB3aGVuIGEgVVJMIGlzIG5lZWRlZCwgYW5kIG5vbmUgaXMgc3VwcGxpZWQuXG4gIHZhciB1cmxFcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQSBcInVybFwiIHByb3BlcnR5IG9yIGZ1bmN0aW9uIG11c3QgYmUgc3BlY2lmaWVkJyk7XG4gIH07XG5cbiAgLy8gV3JhcCBhbiBvcHRpb25hbCBlcnJvciBjYWxsYmFjayB3aXRoIGEgZmFsbGJhY2sgZXJyb3IgZXZlbnQuXG4gIHZhciB3cmFwRXJyb3IgPSBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgIHZhciBlcnJvciA9IG9wdGlvbnMuZXJyb3I7XG4gICAgb3B0aW9ucy5lcnJvciA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgIGlmIChlcnJvcikgZXJyb3IobW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgbW9kZWwudHJpZ2dlcignZXJyb3InLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4gQmFja2JvbmU7XG5cbn0pKTtcbiIsIi8qIVxuICogVVJJLmpzIC0gTXV0YXRpbmcgVVJMc1xuICogSVB2NiBTdXBwb3J0XG4gKlxuICogVmVyc2lvbjogMS4xNC4xXG4gKlxuICogQXV0aG9yOiBSb2RuZXkgUmVobVxuICogV2ViOiBodHRwOi8vbWVkaWFsaXplLmdpdGh1Yi5pby9VUkkuanMvXG4gKlxuICogTGljZW5zZWQgdW5kZXJcbiAqICAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICogICBHUEwgdjMgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0dQTC0zLjBcbiAqXG4gKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShmYWN0b3J5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgIHJvb3QuSVB2NiA9IGZhY3Rvcnkocm9vdCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKHJvb3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qXG4gIHZhciBfaW4gPSBcImZlODA6MDAwMDowMDAwOjAwMDA6MDIwNDo2MWZmOmZlOWQ6ZjE1NlwiO1xuICB2YXIgX291dCA9IElQdjYuYmVzdChfaW4pO1xuICB2YXIgX2V4cGVjdGVkID0gXCJmZTgwOjoyMDQ6NjFmZjpmZTlkOmYxNTZcIjtcblxuICBjb25zb2xlLmxvZyhfaW4sIF9vdXQsIF9leHBlY3RlZCwgX291dCA9PT0gX2V4cGVjdGVkKTtcbiAgKi9cblxuICAvLyBzYXZlIGN1cnJlbnQgSVB2NiB2YXJpYWJsZSwgaWYgYW55XG4gIHZhciBfSVB2NiA9IHJvb3QgJiYgcm9vdC5JUHY2O1xuXG4gIGZ1bmN0aW9uIGJlc3RQcmVzZW50YXRpb24oYWRkcmVzcykge1xuICAgIC8vIGJhc2VkIG9uOlxuICAgIC8vIEphdmFzY3JpcHQgdG8gdGVzdCBhbiBJUHY2IGFkZHJlc3MgZm9yIHByb3BlciBmb3JtYXQsIGFuZCB0b1xuICAgIC8vIHByZXNlbnQgdGhlIFwiYmVzdCB0ZXh0IHJlcHJlc2VudGF0aW9uXCIgYWNjb3JkaW5nIHRvIElFVEYgRHJhZnQgUkZDIGF0XG4gICAgLy8gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaWV0Zi02bWFuLXRleHQtYWRkci1yZXByZXNlbnRhdGlvbi0wNFxuICAgIC8vIDggRmViIDIwMTAgUmljaCBCcm93biwgRGFydHdhcmUsIExMQ1xuICAgIC8vIFBsZWFzZSBmZWVsIGZyZWUgdG8gdXNlIHRoaXMgY29kZSBhcyBsb25nIGFzIHlvdSBwcm92aWRlIGEgbGluayB0b1xuICAgIC8vIGh0dHA6Ly93d3cuaW50ZXJtYXBwZXIuY29tXG4gICAgLy8gaHR0cDovL2ludGVybWFwcGVyLmNvbS9zdXBwb3J0L3Rvb2xzL0lQVjYtVmFsaWRhdG9yLmFzcHhcbiAgICAvLyBodHRwOi8vZG93bmxvYWQuZGFydHdhcmUuY29tL3RoaXJkcGFydHkvaXB2NnZhbGlkYXRvci5qc1xuXG4gICAgdmFyIF9hZGRyZXNzID0gYWRkcmVzcy50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBzZWdtZW50cyA9IF9hZGRyZXNzLnNwbGl0KCc6Jyk7XG4gICAgdmFyIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICB2YXIgdG90YWwgPSA4O1xuXG4gICAgLy8gdHJpbSBjb2xvbnMgKDo6IG9yIDo6YTpiOmPigKYgb3Ig4oCmYTpiOmM6OilcbiAgICBpZiAoc2VnbWVudHNbMF0gPT09ICcnICYmIHNlZ21lbnRzWzFdID09PSAnJyAmJiBzZWdtZW50c1syXSA9PT0gJycpIHtcbiAgICAgIC8vIG11c3QgaGF2ZSBiZWVuIDo6XG4gICAgICAvLyByZW1vdmUgZmlyc3QgdHdvIGl0ZW1zXG4gICAgICBzZWdtZW50cy5zaGlmdCgpO1xuICAgICAgc2VnbWVudHMuc2hpZnQoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnRzWzBdID09PSAnJyAmJiBzZWdtZW50c1sxXSA9PT0gJycpIHtcbiAgICAgIC8vIG11c3QgaGF2ZSBiZWVuIDo6eHh4eFxuICAgICAgLy8gcmVtb3ZlIHRoZSBmaXJzdCBpdGVtXG4gICAgICBzZWdtZW50cy5zaGlmdCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudHNbbGVuZ3RoIC0gMV0gPT09ICcnICYmIHNlZ21lbnRzW2xlbmd0aCAtIDJdID09PSAnJykge1xuICAgICAgLy8gbXVzdCBoYXZlIGJlZW4geHh4eDo6XG4gICAgICBzZWdtZW50cy5wb3AoKTtcbiAgICB9XG5cbiAgICBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgICAvLyBhZGp1c3QgdG90YWwgc2VnbWVudHMgZm9yIElQdjQgdHJhaWxlclxuICAgIGlmIChzZWdtZW50c1tsZW5ndGggLSAxXS5pbmRleE9mKCcuJykgIT09IC0xKSB7XG4gICAgICAvLyBmb3VuZCBhIFwiLlwiIHdoaWNoIG1lYW5zIElQdjRcbiAgICAgIHRvdGFsID0gNztcbiAgICB9XG5cbiAgICAvLyBmaWxsIGVtcHR5IHNlZ21lbnRzIHRoZW0gd2l0aCBcIjAwMDBcIlxuICAgIHZhciBwb3M7XG4gICAgZm9yIChwb3MgPSAwOyBwb3MgPCBsZW5ndGg7IHBvcysrKSB7XG4gICAgICBpZiAoc2VnbWVudHNbcG9zXSA9PT0gJycpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvcyA8IHRvdGFsKSB7XG4gICAgICBzZWdtZW50cy5zcGxpY2UocG9zLCAxLCAnMDAwMCcpO1xuICAgICAgd2hpbGUgKHNlZ21lbnRzLmxlbmd0aCA8IHRvdGFsKSB7XG4gICAgICAgIHNlZ21lbnRzLnNwbGljZShwb3MsIDAsICcwMDAwJyk7XG4gICAgICB9XG5cbiAgICAgIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBzdHJpcCBsZWFkaW5nIHplcm9zXG4gICAgdmFyIF9zZWdtZW50cztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcbiAgICAgIF9zZWdtZW50cyA9IHNlZ21lbnRzW2ldLnNwbGl0KCcnKTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMyA7IGorKykge1xuICAgICAgICBpZiAoX3NlZ21lbnRzWzBdID09PSAnMCcgJiYgX3NlZ21lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBfc2VnbWVudHMuc3BsaWNlKDAsMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VnbWVudHNbaV0gPSBfc2VnbWVudHMuam9pbignJyk7XG4gICAgfVxuXG4gICAgLy8gZmluZCBsb25nZXN0IHNlcXVlbmNlIG9mIHplcm9lcyBhbmQgY29hbGVzY2UgdGhlbSBpbnRvIG9uZSBzZWdtZW50XG4gICAgdmFyIGJlc3QgPSAtMTtcbiAgICB2YXIgX2Jlc3QgPSAwO1xuICAgIHZhciBfY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnQgPSAtMTtcbiAgICB2YXIgaW56ZXJvZXMgPSBmYWxzZTtcbiAgICAvLyBpOyBhbHJlYWR5IGRlY2xhcmVkXG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuICAgICAgaWYgKGluemVyb2VzKSB7XG4gICAgICAgIGlmIChzZWdtZW50c1tpXSA9PT0gJzAnKSB7XG4gICAgICAgICAgX2N1cnJlbnQgKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnplcm9lcyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChfY3VycmVudCA+IF9iZXN0KSB7XG4gICAgICAgICAgICBiZXN0ID0gY3VycmVudDtcbiAgICAgICAgICAgIF9iZXN0ID0gX2N1cnJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2VnbWVudHNbaV0gPT09ICcwJykge1xuICAgICAgICAgIGluemVyb2VzID0gdHJ1ZTtcbiAgICAgICAgICBjdXJyZW50ID0gaTtcbiAgICAgICAgICBfY3VycmVudCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX2N1cnJlbnQgPiBfYmVzdCkge1xuICAgICAgYmVzdCA9IGN1cnJlbnQ7XG4gICAgICBfYmVzdCA9IF9jdXJyZW50O1xuICAgIH1cblxuICAgIGlmIChfYmVzdCA+IDEpIHtcbiAgICAgIHNlZ21lbnRzLnNwbGljZShiZXN0LCBfYmVzdCwgJycpO1xuICAgIH1cblxuICAgIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICAgIC8vIGFzc2VtYmxlIHJlbWFpbmluZyBzZWdtZW50c1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICBpZiAoc2VnbWVudHNbMF0gPT09ICcnKSAge1xuICAgICAgcmVzdWx0ID0gJzonO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNlZ21lbnRzW2ldO1xuICAgICAgaWYgKGkgPT09IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCArPSAnOic7XG4gICAgfVxuXG4gICAgaWYgKHNlZ21lbnRzW2xlbmd0aCAtIDFdID09PSAnJykge1xuICAgICAgcmVzdWx0ICs9ICc6JztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBpZiAocm9vdC5JUHY2ID09PSB0aGlzKSB7XG4gICAgICByb290LklQdjYgPSBfSVB2NjtcbiAgICB9XG4gIFxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZXN0OiBiZXN0UHJlc2VudGF0aW9uLFxuICAgIG5vQ29uZmxpY3Q6IG5vQ29uZmxpY3RcbiAgfTtcbn0pKTtcbiIsIi8qIVxuICogVVJJLmpzIC0gTXV0YXRpbmcgVVJMc1xuICogU2Vjb25kIExldmVsIERvbWFpbiAoU0xEKSBTdXBwb3J0XG4gKlxuICogVmVyc2lvbjogMS4xNC4xXG4gKlxuICogQXV0aG9yOiBSb2RuZXkgUmVobVxuICogV2ViOiBodHRwOi8vbWVkaWFsaXplLmdpdGh1Yi5pby9VUkkuanMvXG4gKlxuICogTGljZW5zZWQgdW5kZXJcbiAqICAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICogICBHUEwgdjMgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0dQTC0zLjBcbiAqXG4gKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShmYWN0b3J5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zID0gZmFjdG9yeShyb290KTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAocm9vdCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gc2F2ZSBjdXJyZW50IFNlY29uZExldmVsRG9tYWlucyB2YXJpYWJsZSwgaWYgYW55XG4gIHZhciBfU2Vjb25kTGV2ZWxEb21haW5zID0gcm9vdCAmJiByb290LlNlY29uZExldmVsRG9tYWlucztcblxuICB2YXIgU0xEID0ge1xuICAgIC8vIGxpc3Qgb2Yga25vd24gU2Vjb25kIExldmVsIERvbWFpbnNcbiAgICAvLyBjb252ZXJ0ZWQgbGlzdCBvZiBTTERzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dhdmluZ21pbGxlci9zZWNvbmQtbGV2ZWwtZG9tYWluc1xuICAgIC8vIC0tLS1cbiAgICAvLyBwdWJsaWNzdWZmaXgub3JnIGlzIG1vcmUgY3VycmVudCBhbmQgYWN0dWFsbHkgdXNlZCBieSBhIGNvdXBsZSBvZiBicm93c2VycyBpbnRlcm5hbGx5LlxuICAgIC8vIGRvd25zaWRlIGlzIGl0IGFsc28gY29udGFpbnMgZG9tYWlucyBsaWtlIFwiZHluZG5zLm9yZ1wiIC0gd2hpY2ggaXMgZmluZSBmb3IgdGhlIHNlY3VyaXR5XG4gICAgLy8gaXNzdWVzIGJyb3dzZXIgaGF2ZSB0byBkZWFsIHdpdGggKFNPUCBmb3IgY29va2llcywgZXRjKSAtIGJ1dCBpcyB3YXkgb3ZlcmJvYXJkIGZvciBVUkkuanNcbiAgICAvLyAtLS0tXG4gICAgbGlzdDoge1xuICAgICAgJ2FjJzonIGNvbSBnb3YgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdhZSc6JyBhYyBjbyBnb3YgbWlsIG5hbWUgbmV0IG9yZyBwcm8gc2NoICcsXG4gICAgICAnYWYnOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2FsJzonIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICcsXG4gICAgICAnYW8nOicgY28gZWQgZ3YgaXQgb2cgcGIgJyxcbiAgICAgICdhcic6JyBjb20gZWR1IGdvYiBnb3YgaW50IG1pbCBuZXQgb3JnIHR1ciAnLFxuICAgICAgJ2F0JzonIGFjIGNvIGd2IG9yICcsXG4gICAgICAnYXUnOicgYXNuIGNvbSBjc2lybyBlZHUgZ292IGlkIG5ldCBvcmcgJyxcbiAgICAgICdiYSc6JyBjbyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyBycyB1bmJpIHVubW8gdW5zYSB1bnR6IHVuemUgJyxcbiAgICAgICdiYic6JyBiaXogY28gY29tIGVkdSBnb3YgaW5mbyBuZXQgb3JnIHN0b3JlIHR2ICcsXG4gICAgICAnYmgnOicgYml6IGNjIGNvbSBlZHUgZ292IGluZm8gbmV0IG9yZyAnLFxuICAgICAgJ2JuJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdibyc6JyBjb20gZWR1IGdvYiBnb3YgaW50IG1pbCBuZXQgb3JnIHR2ICcsXG4gICAgICAnYnInOicgYWRtIGFkdiBhZ3IgYW0gYXJxIGFydCBhdG8gYiBiaW8gYmxvZyBibWQgY2ltIGNuZyBjbnQgY29tIGNvb3AgZWNuIGVkdSBlbmcgZXNwIGV0YyBldGkgZmFyIGZsb2cgZm0gZm5kIGZvdCBmc3QgZzEyIGdnZiBnb3YgaW1iIGluZCBpbmYgam9yIGp1cyBsZWwgbWF0IG1lZCBtaWwgbXVzIG5ldCBub20gbm90IG50ciBvZG8gb3JnIHBwZyBwcm8gcHNjIHBzaSBxc2wgcmVjIHNsZyBzcnYgdG1wIHRyZCB0dXIgdHYgdmV0IHZsb2cgd2lraSB6bGcgJyxcbiAgICAgICdicyc6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnYnonOicgZHUgZXQgb20gb3YgcmcgJyxcbiAgICAgICdjYSc6JyBhYiBiYyBtYiBuYiBuZiBubCBucyBudCBudSBvbiBwZSBxYyBzayB5ayAnLFxuICAgICAgJ2NrJzonIGJpeiBjbyBlZHUgZ2VuIGdvdiBpbmZvIG5ldCBvcmcgJyxcbiAgICAgICdjbic6JyBhYyBhaCBiaiBjb20gY3EgZWR1IGZqIGdkIGdvdiBncyBneCBneiBoYSBoYiBoZSBoaSBobCBobiBqbCBqcyBqeCBsbiBtaWwgbmV0IG5tIG54IG9yZyBxaCBzYyBzZCBzaCBzbiBzeCB0aiB0dyB4aiB4eiB5biB6aiAnLFxuICAgICAgJ2NvJzonIGNvbSBlZHUgZ292IG1pbCBuZXQgbm9tIG9yZyAnLFxuICAgICAgJ2NyJzonIGFjIGMgY28gZWQgZmkgZ28gb3Igc2EgJyxcbiAgICAgICdjeSc6JyBhYyBiaXogY29tIGVrbG9nZXMgZ292IGx0ZCBuYW1lIG5ldCBvcmcgcGFybGlhbWVudCBwcmVzcyBwcm8gdG0gJyxcbiAgICAgICdkbyc6JyBhcnQgY29tIGVkdSBnb2IgZ292IG1pbCBuZXQgb3JnIHNsZCB3ZWIgJyxcbiAgICAgICdkeic6JyBhcnQgYXNzbyBjb20gZWR1IGdvdiBuZXQgb3JnIHBvbCAnLFxuICAgICAgJ2VjJzonIGNvbSBlZHUgZmluIGdvdiBpbmZvIG1lZCBtaWwgbmV0IG9yZyBwcm8gJyxcbiAgICAgICdlZyc6JyBjb20gZWR1IGV1biBnb3YgbWlsIG5hbWUgbmV0IG9yZyBzY2kgJyxcbiAgICAgICdlcic6JyBjb20gZWR1IGdvdiBpbmQgbWlsIG5ldCBvcmcgcm9jaGVzdCB3ICcsXG4gICAgICAnZXMnOicgY29tIGVkdSBnb2Igbm9tIG9yZyAnLFxuICAgICAgJ2V0JzonIGJpeiBjb20gZWR1IGdvdiBpbmZvIG5hbWUgbmV0IG9yZyAnLFxuICAgICAgJ2ZqJzonIGFjIGJpeiBjb20gaW5mbyBtaWwgbmFtZSBuZXQgb3JnIHBybyAnLFxuICAgICAgJ2ZrJzonIGFjIGNvIGdvdiBuZXQgbm9tIG9yZyAnLFxuICAgICAgJ2ZyJzonIGFzc28gY29tIGYgZ291diBub20gcHJkIHByZXNzZSB0bSAnLFxuICAgICAgJ2dnJzonIGNvIG5ldCBvcmcgJyxcbiAgICAgICdnaCc6JyBjb20gZWR1IGdvdiBtaWwgb3JnICcsXG4gICAgICAnZ24nOicgYWMgY29tIGdvdiBuZXQgb3JnICcsXG4gICAgICAnZ3InOicgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdndCc6JyBjb20gZWR1IGdvYiBpbmQgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdndSc6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnaGsnOicgY29tIGVkdSBnb3YgaWR2IG5ldCBvcmcgJyxcbiAgICAgICdodSc6JyAyMDAwIGFncmFyIGJvbHQgY2FzaW5vIGNpdHkgY28gZXJvdGljYSBlcm90aWthIGZpbG0gZm9ydW0gZ2FtZXMgaG90ZWwgaW5mbyBpbmdhdGxhbiBqb2dhc3oga29ueXZlbG8gbGFrYXMgbWVkaWEgbmV3cyBvcmcgcHJpdiByZWtsYW0gc2V4IHNob3Agc3BvcnQgc3VsaSBzemV4IHRtIHRvenNkZSB1dGF6YXMgdmlkZW8gJyxcbiAgICAgICdpZCc6JyBhYyBjbyBnbyBtaWwgbmV0IG9yIHNjaCB3ZWIgJyxcbiAgICAgICdpbCc6JyBhYyBjbyBnb3YgaWRmIGsxMiBtdW5pIG5ldCBvcmcgJyxcbiAgICAgICdpbic6JyBhYyBjbyBlZHUgZXJuZXQgZmlybSBnZW4gZ292IGkgaW5kIG1pbCBuZXQgbmljIG9yZyByZXMgJyxcbiAgICAgICdpcSc6JyBjb20gZWR1IGdvdiBpIG1pbCBuZXQgb3JnICcsXG4gICAgICAnaXInOicgYWMgY28gZG5zc2VjIGdvdiBpIGlkIG5ldCBvcmcgc2NoICcsXG4gICAgICAnaXQnOicgZWR1IGdvdiAnLFxuICAgICAgJ2plJzonIGNvIG5ldCBvcmcgJyxcbiAgICAgICdqbyc6JyBjb20gZWR1IGdvdiBtaWwgbmFtZSBuZXQgb3JnIHNjaCAnLFxuICAgICAgJ2pwJzonIGFjIGFkIGNvIGVkIGdvIGdyIGxnIG5lIG9yICcsXG4gICAgICAna2UnOicgYWMgY28gZ28gaW5mbyBtZSBtb2JpIG5lIG9yIHNjICcsXG4gICAgICAna2gnOicgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgcGVyICcsXG4gICAgICAna2knOicgYml6IGNvbSBkZSBlZHUgZ292IGluZm8gbW9iIG5ldCBvcmcgdGVsICcsXG4gICAgICAna20nOicgYXNzbyBjb20gY29vcCBlZHUgZ291diBrIG1lZGVjaW4gbWlsIG5vbSBub3RhaXJlcyBwaGFybWFjaWVucyBwcmVzc2UgdG0gdmV0ZXJpbmFpcmUgJyxcbiAgICAgICdrbic6JyBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdrcic6JyBhYyBidXNhbiBjaHVuZ2J1ayBjaHVuZ25hbSBjbyBkYWVndSBkYWVqZW9uIGVzIGdhbmd3b24gZ28gZ3dhbmdqdSBneWVvbmdidWsgZ3llb25nZ2kgZ3llb25nbmFtIGhzIGluY2hlb24gamVqdSBqZW9uYnVrIGplb25uYW0gayBrZyBtaWwgbXMgbmUgb3IgcGUgcmUgc2Mgc2VvdWwgdWxzYW4gJyxcbiAgICAgICdrdyc6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAna3knOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2t6JzonIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICcsXG4gICAgICAnbGInOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2xrJzonIGFzc24gY29tIGVkdSBnb3YgZ3JwIGhvdGVsIGludCBsdGQgbmV0IG5nbyBvcmcgc2NoIHNvYyB3ZWIgJyxcbiAgICAgICdscic6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnbHYnOicgYXNuIGNvbSBjb25mIGVkdSBnb3YgaWQgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdseSc6JyBjb20gZWR1IGdvdiBpZCBtZWQgbmV0IG9yZyBwbGMgc2NoICcsXG4gICAgICAnbWEnOicgYWMgY28gZ292IG0gbmV0IG9yZyBwcmVzcyAnLFxuICAgICAgJ21jJzonIGFzc28gdG0gJyxcbiAgICAgICdtZSc6JyBhYyBjbyBlZHUgZ292IGl0cyBuZXQgb3JnIHByaXYgJyxcbiAgICAgICdtZyc6JyBjb20gZWR1IGdvdiBtaWwgbm9tIG9yZyBwcmQgdG0gJyxcbiAgICAgICdtayc6JyBjb20gZWR1IGdvdiBpbmYgbmFtZSBuZXQgb3JnIHBybyAnLFxuICAgICAgJ21sJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgcHJlc3NlICcsXG4gICAgICAnbW4nOicgZWR1IGdvdiBvcmcgJyxcbiAgICAgICdtbyc6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnbXQnOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ212JzonIGFlcm8gYml6IGNvbSBjb29wIGVkdSBnb3YgaW5mbyBpbnQgbWlsIG11c2V1bSBuYW1lIG5ldCBvcmcgcHJvICcsXG4gICAgICAnbXcnOicgYWMgY28gY29tIGNvb3AgZWR1IGdvdiBpbnQgbXVzZXVtIG5ldCBvcmcgJyxcbiAgICAgICdteCc6JyBjb20gZWR1IGdvYiBuZXQgb3JnICcsXG4gICAgICAnbXknOicgY29tIGVkdSBnb3YgbWlsIG5hbWUgbmV0IG9yZyBzY2ggJyxcbiAgICAgICduZic6JyBhcnRzIGNvbSBmaXJtIGluZm8gbmV0IG90aGVyIHBlciByZWMgc3RvcmUgd2ViICcsXG4gICAgICAnbmcnOicgYml6IGNvbSBlZHUgZ292IG1pbCBtb2JpIG5hbWUgbmV0IG9yZyBzY2ggJyxcbiAgICAgICduaSc6JyBhYyBjbyBjb20gZWR1IGdvYiBtaWwgbmV0IG5vbSBvcmcgJyxcbiAgICAgICducCc6JyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ25yJzonIGJpeiBjb20gZWR1IGdvdiBpbmZvIG5ldCBvcmcgJyxcbiAgICAgICdvbSc6JyBhYyBiaXogY28gY29tIGVkdSBnb3YgbWVkIG1pbCBtdXNldW0gbmV0IG9yZyBwcm8gc2NoICcsXG4gICAgICAncGUnOicgY29tIGVkdSBnb2IgbWlsIG5ldCBub20gb3JnIHNsZCAnLFxuICAgICAgJ3BoJzonIGNvbSBlZHUgZ292IGkgbWlsIG5ldCBuZ28gb3JnICcsXG4gICAgICAncGsnOicgYml6IGNvbSBlZHUgZmFtIGdvYiBnb2sgZ29uIGdvcCBnb3MgZ292IG5ldCBvcmcgd2ViICcsXG4gICAgICAncGwnOicgYXJ0IGJpYWx5c3RvayBiaXogY29tIGVkdSBnZGEgZ2RhbnNrIGdvcnpvdyBnb3YgaW5mbyBrYXRvd2ljZSBrcmFrb3cgbG9keiBsdWJsaW4gbWlsIG5ldCBuZ28gb2xzenR5biBvcmcgcG96bmFuIHB3ciByYWRvbSBzbHVwc2sgc3pjemVjaW4gdG9ydW4gd2Fyc3phd2Egd2F3IHdyb2Mgd3JvY2xhdyB6Z29yYSAnLFxuICAgICAgJ3ByJzonIGFjIGJpeiBjb20gZWR1IGVzdCBnb3YgaW5mbyBpc2xhIG5hbWUgbmV0IG9yZyBwcm8gcHJvZiAnLFxuICAgICAgJ3BzJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgcGxvIHNlYyAnLFxuICAgICAgJ3B3JzonIGJlbGF1IGNvIGVkIGdvIG5lIG9yICcsXG4gICAgICAncm8nOicgYXJ0cyBjb20gZmlybSBpbmZvIG5vbSBudCBvcmcgcmVjIHN0b3JlIHRtIHd3dyAnLFxuICAgICAgJ3JzJzonIGFjIGNvIGVkdSBnb3YgaW4gb3JnICcsXG4gICAgICAnc2InOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ3NjJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdzaCc6JyBjbyBjb20gZWR1IGdvdiBuZXQgbm9tIG9yZyAnLFxuICAgICAgJ3NsJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdzdCc6JyBjbyBjb20gY29uc3VsYWRvIGVkdSBlbWJhaXhhZGEgZ292IG1pbCBuZXQgb3JnIHByaW5jaXBlIHNhb3RvbWUgc3RvcmUgJyxcbiAgICAgICdzdic6JyBjb20gZWR1IGdvYiBvcmcgcmVkICcsXG4gICAgICAnc3onOicgYWMgY28gb3JnICcsXG4gICAgICAndHInOicgYXYgYmJzIGJlbCBiaXogY29tIGRyIGVkdSBnZW4gZ292IGluZm8gazEyIG5hbWUgbmV0IG9yZyBwb2wgdGVsIHRzayB0diB3ZWIgJyxcbiAgICAgICd0dCc6JyBhZXJvIGJpeiBjYXQgY28gY29tIGNvb3AgZWR1IGdvdiBpbmZvIGludCBqb2JzIG1pbCBtb2JpIG11c2V1bSBuYW1lIG5ldCBvcmcgcHJvIHRlbCB0cmF2ZWwgJyxcbiAgICAgICd0dyc6JyBjbHViIGNvbSBlYml6IGVkdSBnYW1lIGdvdiBpZHYgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdtdSc6JyBhYyBjbyBjb20gZ292IG5ldCBvciBvcmcgJyxcbiAgICAgICdteic6JyBhYyBjbyBlZHUgZ292IG9yZyAnLFxuICAgICAgJ25hJzonIGNvIGNvbSAnLFxuICAgICAgJ256JzonIGFjIGNvIGNyaSBnZWVrIGdlbiBnb3Z0IGhlYWx0aCBpd2kgbWFvcmkgbWlsIG5ldCBvcmcgcGFybGlhbWVudCBzY2hvb2wgJyxcbiAgICAgICdwYSc6JyBhYm8gYWMgY29tIGVkdSBnb2IgaW5nIG1lZCBuZXQgbm9tIG9yZyBzbGQgJyxcbiAgICAgICdwdCc6JyBjb20gZWR1IGdvdiBpbnQgbmV0IG5vbWUgb3JnIHB1YmwgJyxcbiAgICAgICdweSc6JyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ3FhJzonIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICcsXG4gICAgICAncmUnOicgYXNzbyBjb20gbm9tICcsXG4gICAgICAncnUnOicgYWMgYWR5Z2V5YSBhbHRhaSBhbXVyIGFya2hhbmdlbHNrIGFzdHJha2hhbiBiYXNoa2lyaWEgYmVsZ29yb2QgYmlyIGJyeWFuc2sgYnVyeWF0aWEgY2JnIGNoZWwgY2hlbHlhYmluc2sgY2hpdGEgY2h1a290a2EgY2h1dmFzaGlhIGNvbSBkYWdlc3RhbiBlLWJ1cmcgZWR1IGdvdiBncm96bnkgaW50IGlya3V0c2sgaXZhbm92byBpemhldnNrIGphciBqb3Noa2FyLW9sYSBrYWxteWtpYSBrYWx1Z2Ega2FtY2hhdGthIGthcmVsaWEga2F6YW4ga2NociBrZW1lcm92byBraGFiYXJvdnNrIGtoYWthc3NpYSBraHYga2lyb3Yga29lbmlnIGtvbWkga29zdHJvbWEga3Jhbm95YXJzayBrdWJhbiBrdXJnYW4ga3Vyc2sgbGlwZXRzayBtYWdhZGFuIG1hcmkgbWFyaS1lbCBtYXJpbmUgbWlsIG1vcmRvdmlhIG1vc3JlZyBtc2sgbXVybWFuc2sgbmFsY2hpayBuZXQgbm5vdiBub3Ygbm92b3NpYmlyc2sgbnNrIG9tc2sgb3JlbmJ1cmcgb3JnIG9yeW9sIHBlbnphIHBlcm0gcHAgcHNrb3YgcHR6IHJuZCByeWF6YW4gc2FraGFsaW4gc2FtYXJhIHNhcmF0b3Ygc2ltYmlyc2sgc21vbGVuc2sgc3BiIHN0YXZyb3BvbCBzdHYgc3VyZ3V0IHRhbWJvdiB0YXRhcnN0YW4gdG9tIHRvbXNrIHRzYXJpdHN5biB0c2sgdHVsYSB0dXZhIHR2ZXIgdHl1bWVuIHVkbSB1ZG11cnRpYSB1bGFuLXVkZSB2bGFkaWthdmtheiB2bGFkaW1pciB2bGFkaXZvc3RvayB2b2xnb2dyYWQgdm9sb2dkYSB2b3JvbmV6aCB2cm4gdnlhdGthIHlha3V0aWEgeWFtYWwgeWVrYXRlcmluYnVyZyB5dXpobm8tc2FraGFsaW5zayAnLFxuICAgICAgJ3J3JzonIGFjIGNvIGNvbSBlZHUgZ291diBnb3YgaW50IG1pbCBuZXQgJyxcbiAgICAgICdzYSc6JyBjb20gZWR1IGdvdiBtZWQgbmV0IG9yZyBwdWIgc2NoICcsXG4gICAgICAnc2QnOicgY29tIGVkdSBnb3YgaW5mbyBtZWQgbmV0IG9yZyB0diAnLFxuICAgICAgJ3NlJzonIGEgYWMgYiBiZCBjIGQgZSBmIGcgaCBpIGsgbCBtIG4gbyBvcmcgcCBwYXJ0aSBwcCBwcmVzcyByIHMgdCB0bSB1IHcgeCB5IHogJyxcbiAgICAgICdzZyc6JyBjb20gZWR1IGdvdiBpZG4gbmV0IG9yZyBwZXIgJyxcbiAgICAgICdzbic6JyBhcnQgY29tIGVkdSBnb3V2IG9yZyBwZXJzbyB1bml2ICcsXG4gICAgICAnc3knOicgY29tIGVkdSBnb3YgbWlsIG5ldCBuZXdzIG9yZyAnLFxuICAgICAgJ3RoJzonIGFjIGNvIGdvIGluIG1pIG5ldCBvciAnLFxuICAgICAgJ3RqJzonIGFjIGJpeiBjbyBjb20gZWR1IGdvIGdvdiBpbmZvIGludCBtaWwgbmFtZSBuZXQgbmljIG9yZyB0ZXN0IHdlYiAnLFxuICAgICAgJ3RuJzonIGFncmluZXQgY29tIGRlZmVuc2UgZWR1bmV0IGVucyBmaW4gZ292IGluZCBpbmZvIGludGwgbWluY29tIG5hdCBuZXQgb3JnIHBlcnNvIHJucnQgcm5zIHJudSB0b3VyaXNtICcsXG4gICAgICAndHonOicgYWMgY28gZ28gbmUgb3IgJyxcbiAgICAgICd1YSc6JyBiaXogY2hlcmthc3N5IGNoZXJuaWdvdiBjaGVybm92dHN5IGNrIGNuIGNvIGNvbSBjcmltZWEgY3YgZG4gZG5lcHJvcGV0cm92c2sgZG9uZXRzayBkcCBlZHUgZ292IGlmIGluIGl2YW5vLWZyYW5raXZzayBraCBraGFya292IGtoZXJzb24ga2htZWxuaXRza2l5IGtpZXYga2lyb3ZvZ3JhZCBrbSBrciBrcyBrdiBsZyBsdWdhbnNrIGx1dHNrIGx2aXYgbWUgbWsgbmV0IG5pa29sYWV2IG9kIG9kZXNzYSBvcmcgcGwgcG9sdGF2YSBwcCByb3ZubyBydiBzZWJhc3RvcG9sIHN1bXkgdGUgdGVybm9waWwgdXpoZ29yb2QgdmlubmljYSB2biB6YXBvcml6aHpoZSB6aGl0b21pciB6cCB6dCAnLFxuICAgICAgJ3VnJzonIGFjIGNvIGdvIG5lIG9yIG9yZyBzYyAnLFxuICAgICAgJ3VrJzonIGFjIGJsIGJyaXRpc2gtbGlicmFyeSBjbyBjeW0gZ292IGdvdnQgaWNuZXQgamV0IGxlYSBsdGQgbWUgbWlsIG1vZCBuYXRpb25hbC1saWJyYXJ5LXNjb3RsYW5kIG5lbCBuZXQgbmhzIG5pYyBubHMgb3JnIG9yZ24gcGFybGlhbWVudCBwbGMgcG9saWNlIHNjaCBzY290IHNvYyAnLFxuICAgICAgJ3VzJzonIGRuaSBmZWQgaXNhIGtpZHMgbnNuICcsXG4gICAgICAndXknOicgY29tIGVkdSBndWIgbWlsIG5ldCBvcmcgJyxcbiAgICAgICd2ZSc6JyBjbyBjb20gZWR1IGdvYiBpbmZvIG1pbCBuZXQgb3JnIHdlYiAnLFxuICAgICAgJ3ZpJzonIGNvIGNvbSBrMTIgbmV0IG9yZyAnLFxuICAgICAgJ3ZuJzonIGFjIGJpeiBjb20gZWR1IGdvdiBoZWFsdGggaW5mbyBpbnQgbmFtZSBuZXQgb3JnIHBybyAnLFxuICAgICAgJ3llJzonIGNvIGNvbSBnb3YgbHRkIG1lIG5ldCBvcmcgcGxjICcsXG4gICAgICAneXUnOicgYWMgY28gZWR1IGdvdiBvcmcgJyxcbiAgICAgICd6YSc6JyBhYyBhZ3JpYyBhbHQgYm91cnNlIGNpdHkgY28gY3liZXJuZXQgZGIgZWR1IGdvdiBncm9uZGFyIGlhY2Nlc3MgaW10IGluY2EgbGFuZGVzaWduIGxhdyBtaWwgbmV0IG5nbyBuaXMgbm9tIG9saXZldHRpIG9yZyBwaXggc2Nob29sIHRtIHdlYiAnLFxuICAgICAgJ3ptJzonIGFjIGNvIGNvbSBlZHUgZ292IG5ldCBvcmcgc2NoICdcbiAgICB9LFxuICAgIC8vIGdvcmhpbGwgMjAxMy0xMC0yNTogVXNpbmcgaW5kZXhPZigpIGluc3RlYWQgUmVnZXhwKCkuIFNpZ25pZmljYW50IGJvb3N0XG4gICAgLy8gaW4gYm90aCBwZXJmb3JtYW5jZSBhbmQgbWVtb3J5IGZvb3RwcmludC4gTm8gaW5pdGlhbGl6YXRpb24gcmVxdWlyZWQuXG4gICAgLy8gaHR0cDovL2pzcGVyZi5jb20vdXJpLWpzLXNsZC1yZWdleC12cy1iaW5hcnktc2VhcmNoLzRcbiAgICAvLyBGb2xsb3dpbmcgbWV0aG9kcyB1c2UgbGFzdEluZGV4T2YoKSByYXRoZXIgdGhhbiBhcnJheS5zcGxpdCgpIGluIG9yZGVyXG4gICAgLy8gdG8gYXZvaWQgYW55IG1lbW9yeSBhbGxvY2F0aW9ucy5cbiAgICBoYXM6IGZ1bmN0aW9uKGRvbWFpbikge1xuICAgICAgdmFyIHRsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZignLicpO1xuICAgICAgaWYgKHRsZE9mZnNldCA8PSAwIHx8IHRsZE9mZnNldCA+PSAoZG9tYWluLmxlbmd0aC0xKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgc2xkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJywgdGxkT2Zmc2V0LTEpO1xuICAgICAgaWYgKHNsZE9mZnNldCA8PSAwIHx8IHNsZE9mZnNldCA+PSAodGxkT2Zmc2V0LTEpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBzbGRMaXN0ID0gU0xELmxpc3RbZG9tYWluLnNsaWNlKHRsZE9mZnNldCsxKV07XG4gICAgICBpZiAoIXNsZExpc3QpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsZExpc3QuaW5kZXhPZignICcgKyBkb21haW4uc2xpY2Uoc2xkT2Zmc2V0KzEsIHRsZE9mZnNldCkgKyAnICcpID49IDA7XG4gICAgfSxcbiAgICBpczogZnVuY3Rpb24oZG9tYWluKSB7XG4gICAgICB2YXIgdGxkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICBpZiAodGxkT2Zmc2V0IDw9IDAgfHwgdGxkT2Zmc2V0ID49IChkb21haW4ubGVuZ3RoLTEpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBzbGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoJy4nLCB0bGRPZmZzZXQtMSk7XG4gICAgICBpZiAoc2xkT2Zmc2V0ID49IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHNsZExpc3QgPSBTTEQubGlzdFtkb21haW4uc2xpY2UodGxkT2Zmc2V0KzEpXTtcbiAgICAgIGlmICghc2xkTGlzdCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2xkTGlzdC5pbmRleE9mKCcgJyArIGRvbWFpbi5zbGljZSgwLCB0bGRPZmZzZXQpICsgJyAnKSA+PSAwO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbihkb21haW4pIHtcbiAgICAgIHZhciB0bGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIGlmICh0bGRPZmZzZXQgPD0gMCB8fCB0bGRPZmZzZXQgPj0gKGRvbWFpbi5sZW5ndGgtMSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgc2xkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJywgdGxkT2Zmc2V0LTEpO1xuICAgICAgaWYgKHNsZE9mZnNldCA8PSAwIHx8IHNsZE9mZnNldCA+PSAodGxkT2Zmc2V0LTEpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHNsZExpc3QgPSBTTEQubGlzdFtkb21haW4uc2xpY2UodGxkT2Zmc2V0KzEpXTtcbiAgICAgIGlmICghc2xkTGlzdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzbGRMaXN0LmluZGV4T2YoJyAnICsgZG9tYWluLnNsaWNlKHNsZE9mZnNldCsxLCB0bGRPZmZzZXQpICsgJyAnKSA8IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gZG9tYWluLnNsaWNlKHNsZE9mZnNldCsxKTtcbiAgICB9LFxuICAgIG5vQ29uZmxpY3Q6IGZ1bmN0aW9uKCl7XG4gICAgICBpZiAocm9vdC5TZWNvbmRMZXZlbERvbWFpbnMgPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMgPSBfU2Vjb25kTGV2ZWxEb21haW5zO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTTEQ7XG59KSk7XG4iLCIvKiFcbiAqIFVSSS5qcyAtIE11dGF0aW5nIFVSTHNcbiAqXG4gKiBWZXJzaW9uOiAxLjE0LjFcbiAqXG4gKiBBdXRob3I6IFJvZG5leSBSZWhtXG4gKiBXZWI6IGh0dHA6Ly9tZWRpYWxpemUuZ2l0aHViLmlvL1VSSS5qcy9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlclxuICogICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKiAgIEdQTCB2MyBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvR1BMLTMuMFxuICpcbiAqL1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJy4vcHVueWNvZGUnKSwgcmVxdWlyZSgnLi9JUHY2JyksIHJlcXVpcmUoJy4vU2Vjb25kTGV2ZWxEb21haW5zJykpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICBkZWZpbmUoWycuL3B1bnljb2RlJywgJy4vSVB2NicsICcuL1NlY29uZExldmVsRG9tYWlucyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgIHJvb3QuVVJJID0gZmFjdG9yeShyb290LnB1bnljb2RlLCByb290LklQdjYsIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zLCByb290KTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAocHVueWNvZGUsIElQdjYsIFNMRCwgcm9vdCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8qZ2xvYmFsIGxvY2F0aW9uLCBlc2NhcGUsIHVuZXNjYXBlICovXG4gIC8vIEZJWE1FOiB2Mi4wLjAgcmVuYW1jZSBub24tY2FtZWxDYXNlIHByb3BlcnRpZXMgdG8gdXBwZXJjYXNlXG4gIC8qanNoaW50IGNhbWVsY2FzZTogZmFsc2UgKi9cblxuICAvLyBzYXZlIGN1cnJlbnQgVVJJIHZhcmlhYmxlLCBpZiBhbnlcbiAgdmFyIF9VUkkgPSByb290ICYmIHJvb3QuVVJJO1xuXG4gIGZ1bmN0aW9uIFVSSSh1cmwsIGJhc2UpIHtcbiAgICAvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVVJJKSkge1xuICAgICAgcmV0dXJuIG5ldyBVUkkodXJsLCBiYXNlKTtcbiAgICB9XG5cbiAgICBpZiAodXJsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHVybCA9IGxvY2F0aW9uLmhyZWYgKyAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybCA9ICcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaHJlZih1cmwpO1xuXG4gICAgLy8gcmVzb2x2ZSB0byBiYXNlIGFjY29yZGluZyB0byBodHRwOi8vZHZjcy53My5vcmcvaGcvdXJsL3Jhdy1maWxlL3RpcC9PdmVydmlldy5odG1sI2NvbnN0cnVjdG9yXG4gICAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzb2x1dGVUbyhiYXNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIFVSSS52ZXJzaW9uID0gJzEuMTQuMSc7XG5cbiAgdmFyIHAgPSBVUkkucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICBmdW5jdGlvbiBlc2NhcGVSZWdFeChzdHJpbmcpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9jb21taXQvODVhYzIxNzgzYzExZjhjY2FiMDYxMDZkYmE5NzM1YTMxYTg2OTI0ZCNjb21taXRjb21tZW50LTgyMTk2M1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFsuKis/Xj0hOiR7fSgpfFtcXF1cXC9cXFxcXSkvZywgJ1xcXFwkMScpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VHlwZSh2YWx1ZSkge1xuICAgIC8vIElFOCBkb2Vzbid0IHJldHVybiBbT2JqZWN0IFVuZGVmaW5lZF0gYnV0IFtPYmplY3QgT2JqZWN0XSBmb3IgdW5kZWZpbmVkIHZhbHVlXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnVW5kZWZpbmVkJztcbiAgICB9XG5cbiAgICByZXR1cm4gU3RyaW5nKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkpLnNsaWNlKDgsIC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIGdldFR5cGUob2JqKSA9PT0gJ0FycmF5JztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbHRlckFycmF5VmFsdWVzKGRhdGEsIHZhbHVlKSB7XG4gICAgdmFyIGxvb2t1cCA9IHt9O1xuICAgIHZhciBpLCBsZW5ndGg7XG5cbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxvb2t1cFt2YWx1ZVtpXV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb29rdXBbdmFsdWVdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBkYXRhLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobG9va3VwW2RhdGFbaV1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGF0YS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGxlbmd0aC0tO1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBhcnJheUNvbnRhaW5zKGxpc3QsIHZhbHVlKSB7XG4gICAgdmFyIGksIGxlbmd0aDtcblxuICAgIC8vIHZhbHVlIG1heSBiZSBzdHJpbmcsIG51bWJlciwgYXJyYXksIHJlZ2V4cFxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgLy8gTm90ZTogdGhpcyBjYW4gYmUgb3B0aW1pemVkIHRvIE8obikgKGluc3RlYWQgb2YgY3VycmVudCBPKG0gKiBuKSlcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghYXJyYXlDb250YWlucyhsaXN0LCB2YWx1ZVtpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIF90eXBlID0gZ2V0VHlwZSh2YWx1ZSk7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKF90eXBlID09PSAnUmVnRXhwJykge1xuICAgICAgICBpZiAodHlwZW9mIGxpc3RbaV0gPT09ICdzdHJpbmcnICYmIGxpc3RbaV0ubWF0Y2godmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobGlzdFtpXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJyYXlzRXF1YWwob25lLCB0d28pIHtcbiAgICBpZiAoIWlzQXJyYXkob25lKSB8fCAhaXNBcnJheSh0d28pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gYXJyYXlzIGNhbid0IGJlIGVxdWFsIGlmIHRoZXkgaGF2ZSBkaWZmZXJlbnQgYW1vdW50IG9mIGNvbnRlbnRcbiAgICBpZiAob25lLmxlbmd0aCAhPT0gdHdvLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG9uZS5zb3J0KCk7XG4gICAgdHdvLnNvcnQoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb25lLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKG9uZVtpXSAhPT0gdHdvW2ldKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIFVSSS5fcGFydHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvdG9jb2w6IG51bGwsXG4gICAgICB1c2VybmFtZTogbnVsbCxcbiAgICAgIHBhc3N3b3JkOiBudWxsLFxuICAgICAgaG9zdG5hbWU6IG51bGwsXG4gICAgICB1cm46IG51bGwsXG4gICAgICBwb3J0OiBudWxsLFxuICAgICAgcGF0aDogbnVsbCxcbiAgICAgIHF1ZXJ5OiBudWxsLFxuICAgICAgZnJhZ21lbnQ6IG51bGwsXG4gICAgICAvLyBzdGF0ZVxuICAgICAgZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzOiBVUkkuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgZXNjYXBlUXVlcnlTcGFjZTogVVJJLmVzY2FwZVF1ZXJ5U3BhY2VcbiAgICB9O1xuICB9O1xuICAvLyBzdGF0ZTogYWxsb3cgZHVwbGljYXRlIHF1ZXJ5IHBhcmFtZXRlcnMgKGE9MSZhPTEpXG4gIFVSSS5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSBmYWxzZTtcbiAgLy8gc3RhdGU6IHJlcGxhY2VzICsgd2l0aCAlMjAgKHNwYWNlIGluIHF1ZXJ5IHN0cmluZ3MpXG4gIFVSSS5lc2NhcGVRdWVyeVNwYWNlID0gdHJ1ZTtcbiAgLy8gc3RhdGljIHByb3BlcnRpZXNcbiAgVVJJLnByb3RvY29sX2V4cHJlc3Npb24gPSAvXlthLXpdW2EtejAtOS4rLV0qJC9pO1xuICBVUkkuaWRuX2V4cHJlc3Npb24gPSAvW15hLXowLTlcXC4tXS9pO1xuICBVUkkucHVueWNvZGVfZXhwcmVzc2lvbiA9IC8oeG4tLSkvaTtcbiAgLy8gd2VsbCwgMzMzLjQ0NC41NTUuNjY2IG1hdGNoZXMsIGJ1dCBpdCBzdXJlIGFpbid0IG5vIElQdjQgLSBkbyB3ZSBjYXJlP1xuICBVUkkuaXA0X2V4cHJlc3Npb24gPSAvXlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9JC87XG4gIC8vIGNyZWRpdHMgdG8gUmljaCBCcm93blxuICAvLyBzb3VyY2U6IGh0dHA6Ly9mb3J1bXMuaW50ZXJtYXBwZXIuY29tL3ZpZXd0b3BpYy5waHA/cD0xMDk2IzEwOTZcbiAgLy8gc3BlY2lmaWNhdGlvbjogaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjNDI5MS50eHRcbiAgVVJJLmlwNl9leHByZXNzaW9uID0gL15cXHMqKCgoWzAtOUEtRmEtZl17MSw0fTopezd9KFswLTlBLUZhLWZdezEsNH18OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezZ9KDpbMC05QS1GYS1mXXsxLDR9fCgoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwyfSl8OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NH0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwzfSl8KCg6WzAtOUEtRmEtZl17MSw0fSk/OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezN9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNH0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsMn06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Mn0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw1fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwzfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsxfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDZ9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDR9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg6KCgoOlswLTlBLUZhLWZdezEsNH0pezEsN30pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNX06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSkpKCUuKyk/XFxzKiQvO1xuICAvLyBleHByZXNzaW9uIHVzZWQgaXMgXCJncnViZXIgcmV2aXNlZFwiIChAZ3J1YmVyIHYyKSBkZXRlcm1pbmVkIHRvIGJlIHRoZVxuICAvLyBiZXN0IHNvbHV0aW9uIGluIGEgcmVnZXgtZ29sZiB3ZSBkaWQgYSBjb3VwbGUgb2YgYWdlcyBhZ28gYXRcbiAgLy8gKiBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL3VybC1yZWdleFxuICAvLyAqIGh0dHA6Ly9yb2RuZXlyZWhtLmRlL3QvdXJsLXJlZ2V4Lmh0bWxcbiAgVVJJLmZpbmRfdXJpX2V4cHJlc3Npb24gPSAvXFxiKCg/OlthLXpdW1xcdy1dKzooPzpcXC97MSwzfXxbYS16MC05JV0pfHd3d1xcZHswLDN9Wy5dfFthLXowLTkuXFwtXStbLl1bYS16XXsyLDR9XFwvKSg/OlteXFxzKCk8Pl0rfFxcKChbXlxccygpPD5dK3woXFwoW15cXHMoKTw+XStcXCkpKSpcXCkpKyg/OlxcKChbXlxccygpPD5dK3woXFwoW15cXHMoKTw+XStcXCkpKSpcXCl8W15cXHNgISgpXFxbXFxde307OidcIi4sPD4/wqvCu+KAnOKAneKAmOKAmV0pKS9pZztcbiAgVVJJLmZpbmRVcmkgPSB7XG4gICAgLy8gdmFsaWQgXCJzY2hlbWU6Ly9cIiBvciBcInd3dy5cIlxuICAgIHN0YXJ0OiAvXFxiKD86KFthLXpdW2EtejAtOS4rLV0qOlxcL1xcLyl8d3d3XFwuKS9naSxcbiAgICAvLyBldmVyeXRoaW5nIHVwIHRvIHRoZSBuZXh0IHdoaXRlc3BhY2VcbiAgICBlbmQ6IC9bXFxzXFxyXFxuXXwkLyxcbiAgICAvLyB0cmltIHRyYWlsaW5nIHB1bmN0dWF0aW9uIGNhcHR1cmVkIGJ5IGVuZCBSZWdFeHBcbiAgICB0cmltOiAvW2AhKClcXFtcXF17fTs6J1wiLiw8Pj/Cq8K74oCc4oCd4oCe4oCY4oCZXSskL1xuICB9O1xuICAvLyBodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzLmh0bWxcbiAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX1RDUF9hbmRfVURQX3BvcnRfbnVtYmVycyNXZWxsLWtub3duX3BvcnRzXG4gIFVSSS5kZWZhdWx0UG9ydHMgPSB7XG4gICAgaHR0cDogJzgwJyxcbiAgICBodHRwczogJzQ0MycsXG4gICAgZnRwOiAnMjEnLFxuICAgIGdvcGhlcjogJzcwJyxcbiAgICB3czogJzgwJyxcbiAgICB3c3M6ICc0NDMnXG4gIH07XG4gIC8vIGFsbG93ZWQgaG9zdG5hbWUgY2hhcmFjdGVycyBhY2NvcmRpbmcgdG8gUkZDIDM5ODZcbiAgLy8gQUxQSEEgRElHSVQgXCItXCIgXCIuXCIgXCJfXCIgXCJ+XCIgXCIhXCIgXCIkXCIgXCImXCIgXCInXCIgXCIoXCIgXCIpXCIgXCIqXCIgXCIrXCIgXCIsXCIgXCI7XCIgXCI9XCIgJWVuY29kZWRcbiAgLy8gSSd2ZSBuZXZlciBzZWVuIGEgKG5vbi1JRE4pIGhvc3RuYW1lIG90aGVyIHRoYW46IEFMUEhBIERJR0lUIC4gLVxuICBVUkkuaW52YWxpZF9ob3N0bmFtZV9jaGFyYWN0ZXJzID0gL1teYS16QS1aMC05XFwuLV0vO1xuICAvLyBtYXAgRE9NIEVsZW1lbnRzIHRvIHRoZWlyIFVSSSBhdHRyaWJ1dGVcbiAgVVJJLmRvbUF0dHJpYnV0ZXMgPSB7XG4gICAgJ2EnOiAnaHJlZicsXG4gICAgJ2Jsb2NrcXVvdGUnOiAnY2l0ZScsXG4gICAgJ2xpbmsnOiAnaHJlZicsXG4gICAgJ2Jhc2UnOiAnaHJlZicsXG4gICAgJ3NjcmlwdCc6ICdzcmMnLFxuICAgICdmb3JtJzogJ2FjdGlvbicsXG4gICAgJ2ltZyc6ICdzcmMnLFxuICAgICdhcmVhJzogJ2hyZWYnLFxuICAgICdpZnJhbWUnOiAnc3JjJyxcbiAgICAnZW1iZWQnOiAnc3JjJyxcbiAgICAnc291cmNlJzogJ3NyYycsXG4gICAgJ3RyYWNrJzogJ3NyYycsXG4gICAgJ2lucHV0JzogJ3NyYycsIC8vIGJ1dCBvbmx5IGlmIHR5cGU9XCJpbWFnZVwiXG4gICAgJ2F1ZGlvJzogJ3NyYycsXG4gICAgJ3ZpZGVvJzogJ3NyYydcbiAgfTtcbiAgVVJJLmdldERvbUF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUgfHwgIW5vZGUubm9kZU5hbWUpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIDxpbnB1dD4gc2hvdWxkIG9ubHkgZXhwb3NlIHNyYyBmb3IgdHlwZT1cImltYWdlXCJcbiAgICBpZiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgbm9kZS50eXBlICE9PSAnaW1hZ2UnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBVUkkuZG9tQXR0cmlidXRlc1tub2RlTmFtZV07XG4gIH07XG5cbiAgZnVuY3Rpb24gZXNjYXBlRm9yRHVtYkZpcmVmb3gzNih2YWx1ZSkge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy85MVxuICAgIHJldHVybiBlc2NhcGUodmFsdWUpO1xuICB9XG5cbiAgLy8gZW5jb2RpbmcgLyBkZWNvZGluZyBhY2NvcmRpbmcgdG8gUkZDMzk4NlxuICBmdW5jdGlvbiBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKSB7XG4gICAgLy8gc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvZW5jb2RlVVJJQ29tcG9uZW50XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpXG4gICAgICAucmVwbGFjZSgvWyEnKCkqXS9nLCBlc2NhcGVGb3JEdW1iRmlyZWZveDM2KVxuICAgICAgLnJlcGxhY2UoL1xcKi9nLCAnJTJBJyk7XG4gIH1cbiAgVVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDtcbiAgVVJJLmRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcbiAgVVJJLmlzbzg4NTkgPSBmdW5jdGlvbigpIHtcbiAgICBVUkkuZW5jb2RlID0gZXNjYXBlO1xuICAgIFVSSS5kZWNvZGUgPSB1bmVzY2FwZTtcbiAgfTtcbiAgVVJJLnVuaWNvZGUgPSBmdW5jdGlvbigpIHtcbiAgICBVUkkuZW5jb2RlID0gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50O1xuICAgIFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7XG4gIH07XG4gIFVSSS5jaGFyYWN0ZXJzID0ge1xuICAgIHBhdGhuYW1lOiB7XG4gICAgICBlbmNvZGU6IHtcbiAgICAgICAgLy8gUkZDMzk4NiAyLjE6IEZvciBjb25zaXN0ZW5jeSwgVVJJIHByb2R1Y2VycyBhbmQgbm9ybWFsaXplcnMgc2hvdWxkXG4gICAgICAgIC8vIHVzZSB1cHBlcmNhc2UgaGV4YWRlY2ltYWwgZGlnaXRzIGZvciBhbGwgcGVyY2VudC1lbmNvZGluZ3MuXG4gICAgICAgIGV4cHJlc3Npb246IC8lKDI0fDI2fDJCfDJDfDNCfDNEfDNBfDQwKS9pZyxcbiAgICAgICAgbWFwOiB7XG4gICAgICAgICAgLy8gLS5ffiEnKCkqXG4gICAgICAgICAgJyUyNCc6ICckJyxcbiAgICAgICAgICAnJTI2JzogJyYnLFxuICAgICAgICAgICclMkInOiAnKycsXG4gICAgICAgICAgJyUyQyc6ICcsJyxcbiAgICAgICAgICAnJTNCJzogJzsnLFxuICAgICAgICAgICclM0QnOiAnPScsXG4gICAgICAgICAgJyUzQSc6ICc6JyxcbiAgICAgICAgICAnJTQwJzogJ0AnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZWNvZGU6IHtcbiAgICAgICAgZXhwcmVzc2lvbjogL1tcXC9cXD8jXS9nLFxuICAgICAgICBtYXA6IHtcbiAgICAgICAgICAnLyc6ICclMkYnLFxuICAgICAgICAgICc/JzogJyUzRicsXG4gICAgICAgICAgJyMnOiAnJTIzJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNlcnZlZDoge1xuICAgICAgZW5jb2RlOiB7XG4gICAgICAgIC8vIFJGQzM5ODYgMi4xOiBGb3IgY29uc2lzdGVuY3ksIFVSSSBwcm9kdWNlcnMgYW5kIG5vcm1hbGl6ZXJzIHNob3VsZFxuICAgICAgICAvLyB1c2UgdXBwZXJjYXNlIGhleGFkZWNpbWFsIGRpZ2l0cyBmb3IgYWxsIHBlcmNlbnQtZW5jb2RpbmdzLlxuICAgICAgICBleHByZXNzaW9uOiAvJSgyMXwyM3wyNHwyNnwyN3wyOHwyOXwyQXwyQnwyQ3wyRnwzQXwzQnwzRHwzRnw0MHw1Qnw1RCkvaWcsXG4gICAgICAgIG1hcDoge1xuICAgICAgICAgIC8vIGdlbi1kZWxpbXNcbiAgICAgICAgICAnJTNBJzogJzonLFxuICAgICAgICAgICclMkYnOiAnLycsXG4gICAgICAgICAgJyUzRic6ICc/JyxcbiAgICAgICAgICAnJTIzJzogJyMnLFxuICAgICAgICAgICclNUInOiAnWycsXG4gICAgICAgICAgJyU1RCc6ICddJyxcbiAgICAgICAgICAnJTQwJzogJ0AnLFxuICAgICAgICAgIC8vIHN1Yi1kZWxpbXNcbiAgICAgICAgICAnJTIxJzogJyEnLFxuICAgICAgICAgICclMjQnOiAnJCcsXG4gICAgICAgICAgJyUyNic6ICcmJyxcbiAgICAgICAgICAnJTI3JzogJ1xcJycsXG4gICAgICAgICAgJyUyOCc6ICcoJyxcbiAgICAgICAgICAnJTI5JzogJyknLFxuICAgICAgICAgICclMkEnOiAnKicsXG4gICAgICAgICAgJyUyQic6ICcrJyxcbiAgICAgICAgICAnJTJDJzogJywnLFxuICAgICAgICAgICclM0InOiAnOycsXG4gICAgICAgICAgJyUzRCc6ICc9J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBVUkkuZW5jb2RlUXVlcnkgPSBmdW5jdGlvbihzdHJpbmcsIGVzY2FwZVF1ZXJ5U3BhY2UpIHtcbiAgICB2YXIgZXNjYXBlZCA9IFVSSS5lbmNvZGUoc3RyaW5nICsgJycpO1xuICAgIGlmIChlc2NhcGVRdWVyeVNwYWNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVzY2FwZVF1ZXJ5U3BhY2UgPSBVUkkuZXNjYXBlUXVlcnlTcGFjZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXNjYXBlUXVlcnlTcGFjZSA/IGVzY2FwZWQucmVwbGFjZSgvJTIwL2csICcrJykgOiBlc2NhcGVkO1xuICB9O1xuICBVUkkuZGVjb2RlUXVlcnkgPSBmdW5jdGlvbihzdHJpbmcsIGVzY2FwZVF1ZXJ5U3BhY2UpIHtcbiAgICBzdHJpbmcgKz0gJyc7XG4gICAgaWYgKGVzY2FwZVF1ZXJ5U3BhY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXNjYXBlUXVlcnlTcGFjZSA9IFVSSS5lc2NhcGVRdWVyeVNwYWNlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gVVJJLmRlY29kZShlc2NhcGVRdWVyeVNwYWNlID8gc3RyaW5nLnJlcGxhY2UoL1xcKy9nLCAnJTIwJykgOiBzdHJpbmcpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgLy8gd2UncmUgbm90IGdvaW5nIHRvIG1lc3Mgd2l0aCB3ZWlyZCBlbmNvZGluZ3MsXG4gICAgICAvLyBnaXZlIHVwIGFuZCByZXR1cm4gdGhlIHVuZGVjb2RlZCBvcmlnaW5hbCBzdHJpbmdcbiAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvODdcbiAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvOTJcbiAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuICB9O1xuICBVUkkucmVjb2RlUGF0aCA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBzZWdtZW50cyA9IChzdHJpbmcgKyAnJykuc3BsaXQoJy8nKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHNlZ21lbnRzW2ldID0gVVJJLmVuY29kZVBhdGhTZWdtZW50KFVSSS5kZWNvZGUoc2VnbWVudHNbaV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VnbWVudHMuam9pbignLycpO1xuICB9O1xuICBVUkkuZGVjb2RlUGF0aCA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBzZWdtZW50cyA9IChzdHJpbmcgKyAnJykuc3BsaXQoJy8nKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHNlZ21lbnRzW2ldID0gVVJJLmRlY29kZVBhdGhTZWdtZW50KHNlZ21lbnRzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VnbWVudHMuam9pbignLycpO1xuICB9O1xuICAvLyBnZW5lcmF0ZSBlbmNvZGUvZGVjb2RlIHBhdGggZnVuY3Rpb25zXG4gIHZhciBfcGFydHMgPSB7J2VuY29kZSc6J2VuY29kZScsICdkZWNvZGUnOidkZWNvZGUnfTtcbiAgdmFyIF9wYXJ0O1xuICB2YXIgZ2VuZXJhdGVBY2Nlc3NvciA9IGZ1bmN0aW9uKF9ncm91cCwgX3BhcnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gVVJJW19wYXJ0XShzdHJpbmcgKyAnJykucmVwbGFjZShVUkkuY2hhcmFjdGVyc1tfZ3JvdXBdW19wYXJ0XS5leHByZXNzaW9uLCBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgcmV0dXJuIFVSSS5jaGFyYWN0ZXJzW19ncm91cF1bX3BhcnRdLm1hcFtjXTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIHdlJ3JlIG5vdCBnb2luZyB0byBtZXNzIHdpdGggd2VpcmQgZW5jb2RpbmdzLFxuICAgICAgICAvLyBnaXZlIHVwIGFuZCByZXR1cm4gdGhlIHVuZGVjb2RlZCBvcmlnaW5hbCBzdHJpbmdcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy84N1xuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzkyXG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBmb3IgKF9wYXJ0IGluIF9wYXJ0cykge1xuICAgIFVSSVtfcGFydCArICdQYXRoU2VnbWVudCddID0gZ2VuZXJhdGVBY2Nlc3NvcigncGF0aG5hbWUnLCBfcGFydHNbX3BhcnRdKTtcbiAgfVxuXG4gIFVSSS5lbmNvZGVSZXNlcnZlZCA9IGdlbmVyYXRlQWNjZXNzb3IoJ3Jlc2VydmVkJywgJ2VuY29kZScpO1xuXG4gIFVSSS5wYXJzZSA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHtcbiAgICB2YXIgcG9zO1xuICAgIGlmICghcGFydHMpIHtcbiAgICAgIHBhcnRzID0ge307XG4gICAgfVxuICAgIC8vIFtwcm90b2NvbFwiOi8vXCJbdXNlcm5hbWVbXCI6XCJwYXNzd29yZF1cIkBcIl1ob3N0bmFtZVtcIjpcInBvcnRdXCIvXCI/XVtwYXRoXVtcIj9cInF1ZXJ5c3RyaW5nXVtcIiNcImZyYWdtZW50XVxuXG4gICAgLy8gZXh0cmFjdCBmcmFnbWVudFxuICAgIHBvcyA9IHN0cmluZy5pbmRleE9mKCcjJyk7XG4gICAgaWYgKHBvcyA+IC0xKSB7XG4gICAgICAvLyBlc2NhcGluZz9cbiAgICAgIHBhcnRzLmZyYWdtZW50ID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKSB8fCBudWxsO1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpO1xuICAgIH1cblxuICAgIC8vIGV4dHJhY3QgcXVlcnlcbiAgICBwb3MgPSBzdHJpbmcuaW5kZXhPZignPycpO1xuICAgIGlmIChwb3MgPiAtMSkge1xuICAgICAgLy8gZXNjYXBpbmc/XG4gICAgICBwYXJ0cy5xdWVyeSA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSkgfHwgbnVsbDtcbiAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKTtcbiAgICB9XG5cbiAgICAvLyBleHRyYWN0IHByb3RvY29sXG4gICAgaWYgKHN0cmluZy5zdWJzdHJpbmcoMCwgMikgPT09ICcvLycpIHtcbiAgICAgIC8vIHJlbGF0aXZlLXNjaGVtZVxuICAgICAgcGFydHMucHJvdG9jb2wgPSBudWxsO1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZygyKTtcbiAgICAgIC8vIGV4dHJhY3QgXCJ1c2VyOnBhc3NAaG9zdDpwb3J0XCJcbiAgICAgIHN0cmluZyA9IFVSSS5wYXJzZUF1dGhvcml0eShzdHJpbmcsIHBhcnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zID0gc3RyaW5nLmluZGV4T2YoJzonKTtcbiAgICAgIGlmIChwb3MgPiAtMSkge1xuICAgICAgICBwYXJ0cy5wcm90b2NvbCA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKSB8fCBudWxsO1xuICAgICAgICBpZiAocGFydHMucHJvdG9jb2wgJiYgIXBhcnRzLnByb3RvY29sLm1hdGNoKFVSSS5wcm90b2NvbF9leHByZXNzaW9uKSkge1xuICAgICAgICAgIC8vIDogbWF5IGJlIHdpdGhpbiB0aGUgcGF0aFxuICAgICAgICAgIHBhcnRzLnByb3RvY29sID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSwgcG9zICsgMykgPT09ICcvLycpIHtcbiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDMpO1xuXG4gICAgICAgICAgLy8gZXh0cmFjdCBcInVzZXI6cGFzc0Bob3N0OnBvcnRcIlxuICAgICAgICAgIHN0cmluZyA9IFVSSS5wYXJzZUF1dGhvcml0eShzdHJpbmcsIHBhcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpO1xuICAgICAgICAgIHBhcnRzLnVybiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB3aGF0J3MgbGVmdCBtdXN0IGJlIHRoZSBwYXRoXG4gICAgcGFydHMucGF0aCA9IHN0cmluZztcblxuICAgIC8vIGFuZCB3ZSdyZSBkb25lXG4gICAgcmV0dXJuIHBhcnRzO1xuICB9O1xuICBVUkkucGFyc2VIb3N0ID0gZnVuY3Rpb24oc3RyaW5nLCBwYXJ0cykge1xuICAgIC8vIGV4dHJhY3QgaG9zdDpwb3J0XG4gICAgdmFyIHBvcyA9IHN0cmluZy5pbmRleE9mKCcvJyk7XG4gICAgdmFyIGJyYWNrZXRQb3M7XG4gICAgdmFyIHQ7XG5cbiAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgcG9zID0gc3RyaW5nLmxlbmd0aDtcbiAgICB9XG5cbiAgICBpZiAoc3RyaW5nLmNoYXJBdCgwKSA9PT0gJ1snKSB7XG4gICAgICAvLyBJUHY2IGhvc3QgLSBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLTZtYW4tdGV4dC1hZGRyLXJlcHJlc2VudGF0aW9uLTA0I3NlY3Rpb24tNlxuICAgICAgLy8gSSBjbGFpbSBtb3N0IGNsaWVudCBzb2Z0d2FyZSBicmVha3Mgb24gSVB2NiBhbnl3YXlzLiBUbyBzaW1wbGlmeSB0aGluZ3MsIFVSSSBvbmx5IGFjY2VwdHNcbiAgICAgIC8vIElQdjYrcG9ydCBpbiB0aGUgZm9ybWF0IFsyMDAxOmRiODo6MV06ODAgKGZvciB0aGUgdGltZSBiZWluZylcbiAgICAgIGJyYWNrZXRQb3MgPSBzdHJpbmcuaW5kZXhPZignXScpO1xuICAgICAgcGFydHMuaG9zdG5hbWUgPSBzdHJpbmcuc3Vic3RyaW5nKDEsIGJyYWNrZXRQb3MpIHx8IG51bGw7XG4gICAgICBwYXJ0cy5wb3J0ID0gc3RyaW5nLnN1YnN0cmluZyhicmFja2V0UG9zICsgMiwgcG9zKSB8fCBudWxsO1xuICAgICAgaWYgKHBhcnRzLnBvcnQgPT09ICcvJykge1xuICAgICAgICBwYXJ0cy5wb3J0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKCc6JykgIT09IHN0cmluZy5sYXN0SW5kZXhPZignOicpKSB7XG4gICAgICAvLyBJUHY2IGhvc3QgY29udGFpbnMgbXVsdGlwbGUgY29sb25zIC0gYnV0IG5vIHBvcnRcbiAgICAgIC8vIHRoaXMgbm90YXRpb24gaXMgYWN0dWFsbHkgbm90IGFsbG93ZWQgYnkgUkZDIDM5ODYsIGJ1dCB3ZSdyZSBhIGxpYmVyYWwgcGFyc2VyXG4gICAgICBwYXJ0cy5ob3N0bmFtZSA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKSB8fCBudWxsO1xuICAgICAgcGFydHMucG9ydCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykuc3BsaXQoJzonKTtcbiAgICAgIHBhcnRzLmhvc3RuYW1lID0gdFswXSB8fCBudWxsO1xuICAgICAgcGFydHMucG9ydCA9IHRbMV0gfHwgbnVsbDtcbiAgICB9XG5cbiAgICBpZiAocGFydHMuaG9zdG5hbWUgJiYgc3RyaW5nLnN1YnN0cmluZyhwb3MpLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBwb3MrKztcbiAgICAgIHN0cmluZyA9ICcvJyArIHN0cmluZztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nLnN1YnN0cmluZyhwb3MpIHx8ICcvJztcbiAgfTtcbiAgVVJJLnBhcnNlQXV0aG9yaXR5ID0gZnVuY3Rpb24oc3RyaW5nLCBwYXJ0cykge1xuICAgIHN0cmluZyA9IFVSSS5wYXJzZVVzZXJpbmZvKHN0cmluZywgcGFydHMpO1xuICAgIHJldHVybiBVUkkucGFyc2VIb3N0KHN0cmluZywgcGFydHMpO1xuICB9O1xuICBVUkkucGFyc2VVc2VyaW5mbyA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHtcbiAgICAvLyBleHRyYWN0IHVzZXJuYW1lOnBhc3N3b3JkXG4gICAgdmFyIGZpcnN0U2xhc2ggPSBzdHJpbmcuaW5kZXhPZignLycpO1xuICAgIHZhciBwb3MgPSBzdHJpbmcubGFzdEluZGV4T2YoJ0AnLCBmaXJzdFNsYXNoID4gLTEgPyBmaXJzdFNsYXNoIDogc3RyaW5nLmxlbmd0aCAtIDEpO1xuICAgIHZhciB0O1xuXG4gICAgLy8gYXV0aG9yaXR5QCBtdXN0IGNvbWUgYmVmb3JlIC9wYXRoXG4gICAgaWYgKHBvcyA+IC0xICYmIChmaXJzdFNsYXNoID09PSAtMSB8fCBwb3MgPCBmaXJzdFNsYXNoKSkge1xuICAgICAgdCA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKS5zcGxpdCgnOicpO1xuICAgICAgcGFydHMudXNlcm5hbWUgPSB0WzBdID8gVVJJLmRlY29kZSh0WzBdKSA6IG51bGw7XG4gICAgICB0LnNoaWZ0KCk7XG4gICAgICBwYXJ0cy5wYXNzd29yZCA9IHRbMF0gPyBVUkkuZGVjb2RlKHQuam9pbignOicpKSA6IG51bGw7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJ0cy51c2VybmFtZSA9IG51bGw7XG4gICAgICBwYXJ0cy5wYXNzd29yZCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbiAgVVJJLnBhcnNlUXVlcnkgPSBmdW5jdGlvbihzdHJpbmcsIGVzY2FwZVF1ZXJ5U3BhY2UpIHtcbiAgICBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8vIHRocm93IG91dCB0aGUgZnVua3kgYnVzaW5lc3MgLSBcIj9cIltuYW1lXCI9XCJ2YWx1ZVwiJlwiXStcbiAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvJisvZywgJyYnKS5yZXBsYWNlKC9eXFw/KiYqfCYrJC9nLCAnJyk7XG5cbiAgICBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHZhciBpdGVtcyA9IHt9O1xuICAgIHZhciBzcGxpdHMgPSBzdHJpbmcuc3BsaXQoJyYnKTtcbiAgICB2YXIgbGVuZ3RoID0gc3BsaXRzLmxlbmd0aDtcbiAgICB2YXIgdiwgbmFtZSwgdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2ID0gc3BsaXRzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICBuYW1lID0gVVJJLmRlY29kZVF1ZXJ5KHYuc2hpZnQoKSwgZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgICAvLyBubyBcIj1cIiBpcyBudWxsIGFjY29yZGluZyB0byBodHRwOi8vZHZjcy53My5vcmcvaGcvdXJsL3Jhdy1maWxlL3RpcC9PdmVydmlldy5odG1sI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnNcbiAgICAgIHZhbHVlID0gdi5sZW5ndGggPyBVUkkuZGVjb2RlUXVlcnkodi5qb2luKCc9JyksIGVzY2FwZVF1ZXJ5U3BhY2UpIDogbnVsbDtcblxuICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZW1zLCBuYW1lKSkge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1zW25hbWVdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGl0ZW1zW25hbWVdID0gW2l0ZW1zW25hbWVdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZW1zW25hbWVdLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbXM7XG4gIH07XG5cbiAgVVJJLmJ1aWxkID0gZnVuY3Rpb24ocGFydHMpIHtcbiAgICB2YXIgdCA9ICcnO1xuXG4gICAgaWYgKHBhcnRzLnByb3RvY29sKSB7XG4gICAgICB0ICs9IHBhcnRzLnByb3RvY29sICsgJzonO1xuICAgIH1cblxuICAgIGlmICghcGFydHMudXJuICYmICh0IHx8IHBhcnRzLmhvc3RuYW1lKSkge1xuICAgICAgdCArPSAnLy8nO1xuICAgIH1cblxuICAgIHQgKz0gKFVSSS5idWlsZEF1dGhvcml0eShwYXJ0cykgfHwgJycpO1xuXG4gICAgaWYgKHR5cGVvZiBwYXJ0cy5wYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHBhcnRzLnBhdGguY2hhckF0KDApICE9PSAnLycgJiYgdHlwZW9mIHBhcnRzLmhvc3RuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICB0ICs9ICcvJztcbiAgICAgIH1cblxuICAgICAgdCArPSBwYXJ0cy5wYXRoO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGFydHMucXVlcnkgPT09ICdzdHJpbmcnICYmIHBhcnRzLnF1ZXJ5KSB7XG4gICAgICB0ICs9ICc/JyArIHBhcnRzLnF1ZXJ5O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGFydHMuZnJhZ21lbnQgPT09ICdzdHJpbmcnICYmIHBhcnRzLmZyYWdtZW50KSB7XG4gICAgICB0ICs9ICcjJyArIHBhcnRzLmZyYWdtZW50O1xuICAgIH1cbiAgICByZXR1cm4gdDtcbiAgfTtcbiAgVVJJLmJ1aWxkSG9zdCA9IGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgdmFyIHQgPSAnJztcblxuICAgIGlmICghcGFydHMuaG9zdG5hbWUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9IGVsc2UgaWYgKFVSSS5pcDZfZXhwcmVzc2lvbi50ZXN0KHBhcnRzLmhvc3RuYW1lKSkge1xuICAgICAgdCArPSAnWycgKyBwYXJ0cy5ob3N0bmFtZSArICddJztcbiAgICB9IGVsc2Uge1xuICAgICAgdCArPSBwYXJ0cy5ob3N0bmFtZTtcbiAgICB9XG5cbiAgICBpZiAocGFydHMucG9ydCkge1xuICAgICAgdCArPSAnOicgKyBwYXJ0cy5wb3J0O1xuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9O1xuICBVUkkuYnVpbGRBdXRob3JpdHkgPSBmdW5jdGlvbihwYXJ0cykge1xuICAgIHJldHVybiBVUkkuYnVpbGRVc2VyaW5mbyhwYXJ0cykgKyBVUkkuYnVpbGRIb3N0KHBhcnRzKTtcbiAgfTtcbiAgVVJJLmJ1aWxkVXNlcmluZm8gPSBmdW5jdGlvbihwYXJ0cykge1xuICAgIHZhciB0ID0gJyc7XG5cbiAgICBpZiAocGFydHMudXNlcm5hbWUpIHtcbiAgICAgIHQgKz0gVVJJLmVuY29kZShwYXJ0cy51c2VybmFtZSk7XG5cbiAgICAgIGlmIChwYXJ0cy5wYXNzd29yZCkge1xuICAgICAgICB0ICs9ICc6JyArIFVSSS5lbmNvZGUocGFydHMucGFzc3dvcmQpO1xuICAgICAgfVxuXG4gICAgICB0ICs9ICdAJztcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcbiAgVVJJLmJ1aWxkUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBkdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIGVzY2FwZVF1ZXJ5U3BhY2UpIHtcbiAgICAvLyBhY2NvcmRpbmcgdG8gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiBvciBodHRwOi8vbGFicy5hcGFjaGUub3JnL3dlYmFyY2gvdXJpL3JmYy9yZmMzOTg2Lmh0bWxcbiAgICAvLyBiZWluZyDCuy0uX34hJCYnKCkqKyw7PTpALz/CqyAlSEVYIGFuZCBhbG51bSBhcmUgYWxsb3dlZFxuICAgIC8vIHRoZSBSRkMgZXhwbGljaXRseSBzdGF0ZXMgPy9mb28gYmVpbmcgYSB2YWxpZCB1c2UgY2FzZSwgbm8gbWVudGlvbiBvZiBwYXJhbWV0ZXIgc3ludGF4IVxuICAgIC8vIFVSSS5qcyB0cmVhdHMgdGhlIHF1ZXJ5IHN0cmluZyBhcyBiZWluZyBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcbiAgICAvLyBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MC9pbnRlcmFjdC9mb3Jtcy5odG1sI2Zvcm0tY29udGVudC10eXBlXG5cbiAgICB2YXIgdCA9ICcnO1xuICAgIHZhciB1bmlxdWUsIGtleSwgaSwgbGVuZ3RoO1xuICAgIGZvciAoa2V5IGluIGRhdGEpIHtcbiAgICAgIGlmIChoYXNPd24uY2FsbChkYXRhLCBrZXkpICYmIGtleSkge1xuICAgICAgICBpZiAoaXNBcnJheShkYXRhW2tleV0pKSB7XG4gICAgICAgICAgdW5pcXVlID0ge307XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gZGF0YVtrZXldLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVtrZXldW2ldICE9PSB1bmRlZmluZWQgJiYgdW5pcXVlW2RhdGFba2V5XVtpXSArICcnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHQgKz0gJyYnICsgVVJJLmJ1aWxkUXVlcnlQYXJhbWV0ZXIoa2V5LCBkYXRhW2tleV1baV0sIGVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgICAgICAgICAgICBpZiAoZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdW5pcXVlW2RhdGFba2V5XVtpXSArICcnXSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0ICs9ICcmJyArIFVSSS5idWlsZFF1ZXJ5UGFyYW1ldGVyKGtleSwgZGF0YVtrZXldLCBlc2NhcGVRdWVyeVNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0LnN1YnN0cmluZygxKTtcbiAgfTtcbiAgVVJJLmJ1aWxkUXVlcnlQYXJhbWV0ZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgZXNjYXBlUXVlcnlTcGFjZSkge1xuICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAvaW50ZXJhY3QvZm9ybXMuaHRtbCNmb3JtLWNvbnRlbnQtdHlwZSAtLSBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcbiAgICAvLyBkb24ndCBhcHBlbmQgXCI9XCIgZm9yIG51bGwgdmFsdWVzLCBhY2NvcmRpbmcgdG8gaHR0cDovL2R2Y3MudzMub3JnL2hnL3VybC9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbCN1cmwtcGFyYW1ldGVyLXNlcmlhbGl6YXRpb25cbiAgICByZXR1cm4gVVJJLmVuY29kZVF1ZXJ5KG5hbWUsIGVzY2FwZVF1ZXJ5U3BhY2UpICsgKHZhbHVlICE9PSBudWxsID8gJz0nICsgVVJJLmVuY29kZVF1ZXJ5KHZhbHVlLCBlc2NhcGVRdWVyeVNwYWNlKSA6ICcnKTtcbiAgfTtcblxuICBVUkkuYWRkUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7XG4gICAgICAgIGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7XG4gICAgICAgICAgVVJJLmFkZFF1ZXJ5KGRhdGEsIGtleSwgbmFtZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZGF0YVtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRhdGFbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YVtuYW1lXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGF0YVtuYW1lXSA9IFtkYXRhW25hbWVdXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IFt2YWx1ZV07XG4gICAgICB9XG5cbiAgICAgIGRhdGFbbmFtZV0gPSAoZGF0YVtuYW1lXSB8fCBbXSkuY29uY2F0KHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmFkZFF1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZyBhcyB0aGUgbmFtZSBwYXJhbWV0ZXInKTtcbiAgICB9XG4gIH07XG4gIFVSSS5yZW1vdmVRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGksIGxlbmd0aCwga2V5O1xuXG4gICAgaWYgKGlzQXJyYXkobmFtZSkpIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG5hbWUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGF0YVtuYW1lW2ldXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yIChrZXkgaW4gbmFtZSkge1xuICAgICAgICBpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkge1xuICAgICAgICAgIFVSSS5yZW1vdmVRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGRhdGFbbmFtZV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgZGF0YVtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGFbbmFtZV0pKSB7XG4gICAgICAgICAgZGF0YVtuYW1lXSA9IGZpbHRlckFycmF5VmFsdWVzKGRhdGFbbmFtZV0sIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmFkZFF1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZyBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyJyk7XG4gICAgfVxuICB9O1xuICBVUkkuaGFzUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSwgd2l0aGluQXJyYXkpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xuICAgICAgICBpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkge1xuICAgICAgICAgIGlmICghVVJJLmhhc1F1ZXJ5KGRhdGEsIGtleSwgbmFtZVtrZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmhhc1F1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZyBhcyB0aGUgbmFtZSBwYXJhbWV0ZXInKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGdldFR5cGUodmFsdWUpKSB7XG4gICAgICBjYXNlICdVbmRlZmluZWQnOlxuICAgICAgICAvLyB0cnVlIGlmIGV4aXN0cyAoYnV0IG1heSBiZSBlbXB0eSlcbiAgICAgICAgcmV0dXJuIG5hbWUgaW4gZGF0YTsgLy8gZGF0YVtuYW1lXSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgICBjYXNlICdCb29sZWFuJzpcbiAgICAgICAgLy8gdHJ1ZSBpZiBleGlzdHMgYW5kIG5vbi1lbXB0eVxuICAgICAgICB2YXIgX2Jvb2x5ID0gQm9vbGVhbihpc0FycmF5KGRhdGFbbmFtZV0pID8gZGF0YVtuYW1lXS5sZW5ndGggOiBkYXRhW25hbWVdKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBfYm9vbHk7XG5cbiAgICAgIGNhc2UgJ0Z1bmN0aW9uJzpcbiAgICAgICAgLy8gYWxsb3cgY29tcGxleCBjb21wYXJpc29uXG4gICAgICAgIHJldHVybiAhIXZhbHVlKGRhdGFbbmFtZV0sIG5hbWUsIGRhdGEpO1xuXG4gICAgICBjYXNlICdBcnJheSc6XG4gICAgICAgIGlmICghaXNBcnJheShkYXRhW25hbWVdKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcCA9IHdpdGhpbkFycmF5ID8gYXJyYXlDb250YWlucyA6IGFycmF5c0VxdWFsO1xuICAgICAgICByZXR1cm4gb3AoZGF0YVtuYW1lXSwgdmFsdWUpO1xuXG4gICAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgICBpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHtcbiAgICAgICAgICByZXR1cm4gQm9vbGVhbihkYXRhW25hbWVdICYmIGRhdGFbbmFtZV0ubWF0Y2godmFsdWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghd2l0aGluQXJyYXkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyYXlDb250YWlucyhkYXRhW25hbWVdLCB2YWx1ZSk7XG5cbiAgICAgIGNhc2UgJ051bWJlcic6XG4gICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgICAgaWYgKCFpc0FycmF5KGRhdGFbbmFtZV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGFbbmFtZV0gPT09IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF3aXRoaW5BcnJheSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnJheUNvbnRhaW5zKGRhdGFbbmFtZV0sIHZhbHVlKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmhhc1F1ZXJ5KCkgYWNjZXB0cyB1bmRlZmluZWQsIGJvb2xlYW4sIHN0cmluZywgbnVtYmVyLCBSZWdFeHAsIEZ1bmN0aW9uIGFzIHRoZSB2YWx1ZSBwYXJhbWV0ZXInKTtcbiAgICB9XG4gIH07XG5cblxuICBVUkkuY29tbW9uUGF0aCA9IGZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKG9uZS5sZW5ndGgsIHR3by5sZW5ndGgpO1xuICAgIHZhciBwb3M7XG5cbiAgICAvLyBmaW5kIGZpcnN0IG5vbi1tYXRjaGluZyBjaGFyYWN0ZXJcbiAgICBmb3IgKHBvcyA9IDA7IHBvcyA8IGxlbmd0aDsgcG9zKyspIHtcbiAgICAgIGlmIChvbmUuY2hhckF0KHBvcykgIT09IHR3by5jaGFyQXQocG9zKSkge1xuICAgICAgICBwb3MtLTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvcyA8IDEpIHtcbiAgICAgIHJldHVybiBvbmUuY2hhckF0KDApID09PSB0d28uY2hhckF0KDApICYmIG9uZS5jaGFyQXQoMCkgPT09ICcvJyA/ICcvJyA6ICcnO1xuICAgIH1cblxuICAgIC8vIHJldmVydCB0byBsYXN0IC9cbiAgICBpZiAob25lLmNoYXJBdChwb3MpICE9PSAnLycgfHwgdHdvLmNoYXJBdChwb3MpICE9PSAnLycpIHtcbiAgICAgIHBvcyA9IG9uZS5zdWJzdHJpbmcoMCwgcG9zKS5sYXN0SW5kZXhPZignLycpO1xuICAgIH1cblxuICAgIHJldHVybiBvbmUuc3Vic3RyaW5nKDAsIHBvcyArIDEpO1xuICB9O1xuXG4gIFVSSS53aXRoaW5TdHJpbmcgPSBmdW5jdGlvbihzdHJpbmcsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICB2YXIgX3N0YXJ0ID0gb3B0aW9ucy5zdGFydCB8fCBVUkkuZmluZFVyaS5zdGFydDtcbiAgICB2YXIgX2VuZCA9IG9wdGlvbnMuZW5kIHx8IFVSSS5maW5kVXJpLmVuZDtcbiAgICB2YXIgX3RyaW0gPSBvcHRpb25zLnRyaW0gfHwgVVJJLmZpbmRVcmkudHJpbTtcbiAgICB2YXIgX2F0dHJpYnV0ZU9wZW4gPSAvW2EtejAtOS1dPVtcIiddPyQvaTtcblxuICAgIF9zdGFydC5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBfc3RhcnQuZXhlYyhzdHJpbmcpO1xuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0ID0gbWF0Y2guaW5kZXg7XG4gICAgICBpZiAob3B0aW9ucy5pZ25vcmVIdG1sKSB7XG4gICAgICAgIC8vIGF0dHJpYnV0KGU9W1wiJ10/JClcbiAgICAgICAgdmFyIGF0dHJpYnV0ZU9wZW4gPSBzdHJpbmcuc2xpY2UoTWF0aC5tYXgoc3RhcnQgLSAzLCAwKSwgc3RhcnQpO1xuICAgICAgICBpZiAoYXR0cmlidXRlT3BlbiAmJiBfYXR0cmlidXRlT3Blbi50ZXN0KGF0dHJpYnV0ZU9wZW4pKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgc3RyaW5nLnNsaWNlKHN0YXJ0KS5zZWFyY2goX2VuZCk7XG4gICAgICB2YXIgc2xpY2UgPSBzdHJpbmcuc2xpY2Uoc3RhcnQsIGVuZCkucmVwbGFjZShfdHJpbSwgJycpO1xuICAgICAgaWYgKG9wdGlvbnMuaWdub3JlICYmIG9wdGlvbnMuaWdub3JlLnRlc3Qoc2xpY2UpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmQgPSBzdGFydCArIHNsaWNlLmxlbmd0aDtcbiAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhzbGljZSwgc3RhcnQsIGVuZCwgc3RyaW5nKTtcbiAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCBzdGFydCkgKyByZXN1bHQgKyBzdHJpbmcuc2xpY2UoZW5kKTtcbiAgICAgIF9zdGFydC5sYXN0SW5kZXggPSBzdGFydCArIHJlc3VsdC5sZW5ndGg7XG4gICAgfVxuXG4gICAgX3N0YXJ0Lmxhc3RJbmRleCA9IDA7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcblxuICBVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICAvLyBUaGVvcmV0aWNhbGx5IFVSSXMgYWxsb3cgcGVyY2VudC1lbmNvZGluZyBpbiBIb3N0bmFtZXMgKGFjY29yZGluZyB0byBSRkMgMzk4NilcbiAgICAvLyB0aGV5IGFyZSBub3QgcGFydCBvZiBETlMgYW5kIHRoZXJlZm9yZSBpZ25vcmVkIGJ5IFVSSS5qc1xuXG4gICAgaWYgKHYubWF0Y2goVVJJLmludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycykpIHtcbiAgICAgIC8vIHRlc3QgcHVueWNvZGVcbiAgICAgIGlmICghcHVueWNvZGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tXSBhbmQgUHVueWNvZGUuanMgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHVueWNvZGUudG9BU0NJSSh2KS5tYXRjaChVUkkuaW52YWxpZF9ob3N0bmFtZV9jaGFyYWN0ZXJzKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIG5vQ29uZmxpY3RcbiAgVVJJLm5vQ29uZmxpY3QgPSBmdW5jdGlvbihyZW1vdmVBbGwpIHtcbiAgICBpZiAocmVtb3ZlQWxsKSB7XG4gICAgICB2YXIgdW5jb25mbGljdGVkID0ge1xuICAgICAgICBVUkk6IHRoaXMubm9Db25mbGljdCgpXG4gICAgICB9O1xuXG4gICAgICBpZiAocm9vdC5VUklUZW1wbGF0ZSAmJiB0eXBlb2Ygcm9vdC5VUklUZW1wbGF0ZS5ub0NvbmZsaWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHVuY29uZmxpY3RlZC5VUklUZW1wbGF0ZSA9IHJvb3QuVVJJVGVtcGxhdGUubm9Db25mbGljdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocm9vdC5JUHY2ICYmIHR5cGVvZiByb290LklQdjYubm9Db25mbGljdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB1bmNvbmZsaWN0ZWQuSVB2NiA9IHJvb3QuSVB2Ni5ub0NvbmZsaWN0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb290LlNlY29uZExldmVsRG9tYWlucyAmJiB0eXBlb2Ygcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMubm9Db25mbGljdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB1bmNvbmZsaWN0ZWQuU2Vjb25kTGV2ZWxEb21haW5zID0gcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMubm9Db25mbGljdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5jb25mbGljdGVkO1xuICAgIH0gZWxzZSBpZiAocm9vdC5VUkkgPT09IHRoaXMpIHtcbiAgICAgIHJvb3QuVVJJID0gX1VSSTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBwLmJ1aWxkID0gZnVuY3Rpb24oZGVmZXJCdWlsZCkge1xuICAgIGlmIChkZWZlckJ1aWxkID09PSB0cnVlKSB7XG4gICAgICB0aGlzLl9kZWZlcnJlZF9idWlsZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChkZWZlckJ1aWxkID09PSB1bmRlZmluZWQgfHwgdGhpcy5fZGVmZXJyZWRfYnVpbGQpIHtcbiAgICAgIHRoaXMuX3N0cmluZyA9IFVSSS5idWlsZCh0aGlzLl9wYXJ0cyk7XG4gICAgICB0aGlzLl9kZWZlcnJlZF9idWlsZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHAuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFVSSSh0aGlzKTtcbiAgfTtcblxuICBwLnZhbHVlT2YgPSBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGQoZmFsc2UpLl9zdHJpbmc7XG4gIH07XG5cblxuICBmdW5jdGlvbiBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKF9wYXJ0KXtcbiAgICByZXR1cm4gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzW19wYXJ0XSB8fCAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3BhcnRzW19wYXJ0XSA9IHYgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcihfcGFydCwgX2tleSl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJ0c1tfcGFydF0gfHwgJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodiAhPT0gbnVsbCkge1xuICAgICAgICAgIHYgPSB2ICsgJyc7XG4gICAgICAgICAgaWYgKHYuY2hhckF0KDApID09PSBfa2V5KSB7XG4gICAgICAgICAgICB2ID0gdi5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGFydHNbX3BhcnRdID0gdjtcbiAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcC5wcm90b2NvbCA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ3Byb3RvY29sJyk7XG4gIHAudXNlcm5hbWUgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCd1c2VybmFtZScpO1xuICBwLnBhc3N3b3JkID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigncGFzc3dvcmQnKTtcbiAgcC5ob3N0bmFtZSA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ2hvc3RuYW1lJyk7XG4gIHAucG9ydCA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ3BvcnQnKTtcbiAgcC5xdWVyeSA9IGdlbmVyYXRlUHJlZml4QWNjZXNzb3IoJ3F1ZXJ5JywgJz8nKTtcbiAgcC5mcmFnbWVudCA9IGdlbmVyYXRlUHJlZml4QWNjZXNzb3IoJ2ZyYWdtZW50JywgJyMnKTtcblxuICBwLnNlYXJjaCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgdmFyIHQgPSB0aGlzLnF1ZXJ5KHYsIGJ1aWxkKTtcbiAgICByZXR1cm4gdHlwZW9mIHQgPT09ICdzdHJpbmcnICYmIHQubGVuZ3RoID8gKCc/JyArIHQpIDogdDtcbiAgfTtcbiAgcC5oYXNoID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICB2YXIgdCA9IHRoaXMuZnJhZ21lbnQodiwgYnVpbGQpO1xuICAgIHJldHVybiB0eXBlb2YgdCA9PT0gJ3N0cmluZycgJiYgdC5sZW5ndGggPyAoJyMnICsgdCkgOiB0O1xuICB9O1xuXG4gIHAucGF0aG5hbWUgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkge1xuICAgICAgdmFyIHJlcyA9IHRoaXMuX3BhcnRzLnBhdGggfHwgKHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gJy8nIDogJycpO1xuICAgICAgcmV0dXJuIHYgPyBVUkkuZGVjb2RlUGF0aChyZXMpIDogcmVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdiA/IFVSSS5yZWNvZGVQYXRoKHYpIDogJy8nO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLnBhdGggPSBwLnBhdGhuYW1lO1xuICBwLmhyZWYgPSBmdW5jdGlvbihocmVmLCBidWlsZCkge1xuICAgIHZhciBrZXk7XG5cbiAgICBpZiAoaHJlZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmluZyA9ICcnO1xuICAgIHRoaXMuX3BhcnRzID0gVVJJLl9wYXJ0cygpO1xuXG4gICAgdmFyIF9VUkkgPSBocmVmIGluc3RhbmNlb2YgVVJJO1xuICAgIHZhciBfb2JqZWN0ID0gdHlwZW9mIGhyZWYgPT09ICdvYmplY3QnICYmIChocmVmLmhvc3RuYW1lIHx8IGhyZWYucGF0aCB8fCBocmVmLnBhdGhuYW1lKTtcbiAgICBpZiAoaHJlZi5ub2RlTmFtZSkge1xuICAgICAgdmFyIGF0dHJpYnV0ZSA9IFVSSS5nZXREb21BdHRyaWJ1dGUoaHJlZik7XG4gICAgICBocmVmID0gaHJlZlthdHRyaWJ1dGVdIHx8ICcnO1xuICAgICAgX29iamVjdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHdpbmRvdy5sb2NhdGlvbiBpcyByZXBvcnRlZCB0byBiZSBhbiBvYmplY3QsIGJ1dCBpdCdzIG5vdCB0aGUgc29ydFxuICAgIC8vIG9mIG9iamVjdCB3ZSdyZSBsb29raW5nIGZvcjpcbiAgICAvLyAqIGxvY2F0aW9uLnByb3RvY29sIGVuZHMgd2l0aCBhIGNvbG9uXG4gICAgLy8gKiBsb2NhdGlvbi5xdWVyeSAhPSBvYmplY3Quc2VhcmNoXG4gICAgLy8gKiBsb2NhdGlvbi5oYXNoICE9IG9iamVjdC5mcmFnbWVudFxuICAgIC8vIHNpbXBseSBzZXJpYWxpemluZyB0aGUgdW5rbm93biBvYmplY3Qgc2hvdWxkIGRvIHRoZSB0cmlja1xuICAgIC8vIChmb3IgbG9jYXRpb24sIG5vdCBmb3IgZXZlcnl0aGluZy4uLilcbiAgICBpZiAoIV9VUkkgJiYgX29iamVjdCAmJiBocmVmLnBhdGhuYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhyZWYgPSBocmVmLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBocmVmID09PSAnc3RyaW5nJyB8fCBocmVmIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgICB0aGlzLl9wYXJ0cyA9IFVSSS5wYXJzZShTdHJpbmcoaHJlZiksIHRoaXMuX3BhcnRzKTtcbiAgICB9IGVsc2UgaWYgKF9VUkkgfHwgX29iamVjdCkge1xuICAgICAgdmFyIHNyYyA9IF9VUkkgPyBocmVmLl9wYXJ0cyA6IGhyZWY7XG4gICAgICBmb3IgKGtleSBpbiBzcmMpIHtcbiAgICAgICAgaWYgKGhhc093bi5jYWxsKHRoaXMuX3BhcnRzLCBrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fcGFydHNba2V5XSA9IHNyY1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaW5wdXQnKTtcbiAgICB9XG5cbiAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gaWRlbnRpZmljYXRpb24gYWNjZXNzb3JzXG4gIHAuaXMgPSBmdW5jdGlvbih3aGF0KSB7XG4gICAgdmFyIGlwID0gZmFsc2U7XG4gICAgdmFyIGlwNCA9IGZhbHNlO1xuICAgIHZhciBpcDYgPSBmYWxzZTtcbiAgICB2YXIgbmFtZSA9IGZhbHNlO1xuICAgIHZhciBzbGQgPSBmYWxzZTtcbiAgICB2YXIgaWRuID0gZmFsc2U7XG4gICAgdmFyIHB1bnljb2RlID0gZmFsc2U7XG4gICAgdmFyIHJlbGF0aXZlID0gIXRoaXMuX3BhcnRzLnVybjtcblxuICAgIGlmICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkge1xuICAgICAgcmVsYXRpdmUgPSBmYWxzZTtcbiAgICAgIGlwNCA9IFVSSS5pcDRfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcbiAgICAgIGlwNiA9IFVSSS5pcDZfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcbiAgICAgIGlwID0gaXA0IHx8IGlwNjtcbiAgICAgIG5hbWUgPSAhaXA7XG4gICAgICBzbGQgPSBuYW1lICYmIFNMRCAmJiBTTEQuaGFzKHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcbiAgICAgIGlkbiA9IG5hbWUgJiYgVVJJLmlkbl9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpO1xuICAgICAgcHVueWNvZGUgPSBuYW1lICYmIFVSSS5wdW55Y29kZV9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHN3aXRjaCAod2hhdC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdyZWxhdGl2ZSc6XG4gICAgICAgIHJldHVybiByZWxhdGl2ZTtcblxuICAgICAgY2FzZSAnYWJzb2x1dGUnOlxuICAgICAgICByZXR1cm4gIXJlbGF0aXZlO1xuXG4gICAgICAvLyBob3N0bmFtZSBpZGVudGlmaWNhdGlvblxuICAgICAgY2FzZSAnZG9tYWluJzpcbiAgICAgIGNhc2UgJ25hbWUnOlxuICAgICAgICByZXR1cm4gbmFtZTtcblxuICAgICAgY2FzZSAnc2xkJzpcbiAgICAgICAgcmV0dXJuIHNsZDtcblxuICAgICAgY2FzZSAnaXAnOlxuICAgICAgICByZXR1cm4gaXA7XG5cbiAgICAgIGNhc2UgJ2lwNCc6XG4gICAgICBjYXNlICdpcHY0JzpcbiAgICAgIGNhc2UgJ2luZXQ0JzpcbiAgICAgICAgcmV0dXJuIGlwNDtcblxuICAgICAgY2FzZSAnaXA2JzpcbiAgICAgIGNhc2UgJ2lwdjYnOlxuICAgICAgY2FzZSAnaW5ldDYnOlxuICAgICAgICByZXR1cm4gaXA2O1xuXG4gICAgICBjYXNlICdpZG4nOlxuICAgICAgICByZXR1cm4gaWRuO1xuXG4gICAgICBjYXNlICd1cmwnOlxuICAgICAgICByZXR1cm4gIXRoaXMuX3BhcnRzLnVybjtcblxuICAgICAgY2FzZSAndXJuJzpcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fcGFydHMudXJuO1xuXG4gICAgICBjYXNlICdwdW55Y29kZSc6XG4gICAgICAgIHJldHVybiBwdW55Y29kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvLyBjb21wb25lbnQgc3BlY2lmaWMgaW5wdXQgdmFsaWRhdGlvblxuICB2YXIgX3Byb3RvY29sID0gcC5wcm90b2NvbDtcbiAgdmFyIF9wb3J0ID0gcC5wb3J0O1xuICB2YXIgX2hvc3RuYW1lID0gcC5ob3N0bmFtZTtcblxuICBwLnByb3RvY29sID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodikge1xuICAgICAgICAvLyBhY2NlcHQgdHJhaWxpbmcgOi8vXG4gICAgICAgIHYgPSB2LnJlcGxhY2UoLzooXFwvXFwvKT8kLywgJycpO1xuXG4gICAgICAgIGlmICghdi5tYXRjaChVUkkucHJvdG9jb2xfZXhwcmVzc2lvbikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm90b2NvbCBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05ListXSBvciBkb2VzblxcJ3Qgc3RhcnQgd2l0aCBbQS1aXScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfcHJvdG9jb2wuY2FsbCh0aGlzLCB2LCBidWlsZCk7XG4gIH07XG4gIHAuc2NoZW1lID0gcC5wcm90b2NvbDtcbiAgcC5wb3J0ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh2ID09PSAwKSB7XG4gICAgICAgIHYgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodikge1xuICAgICAgICB2ICs9ICcnO1xuICAgICAgICBpZiAodi5jaGFyQXQoMCkgPT09ICc6Jykge1xuICAgICAgICAgIHYgPSB2LnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2Lm1hdGNoKC9bXjAtOV0vKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BvcnQgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gWzAtOV0nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX3BvcnQuY2FsbCh0aGlzLCB2LCBidWlsZCk7XG4gIH07XG4gIHAuaG9zdG5hbWUgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHggPSB7fTtcbiAgICAgIFVSSS5wYXJzZUhvc3QodiwgeCk7XG4gICAgICB2ID0geC5ob3N0bmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIF9ob3N0bmFtZS5jYWxsKHRoaXMsIHYsIGJ1aWxkKTtcbiAgfTtcblxuICAvLyBjb21wb3VuZCBhY2Nlc3NvcnNcbiAgcC5ob3N0ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/IFVSSS5idWlsZEhvc3QodGhpcy5fcGFydHMpIDogJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIFVSSS5wYXJzZUhvc3QodiwgdGhpcy5fcGFydHMpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLmF1dGhvcml0eSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUgPyBVUkkuYnVpbGRBdXRob3JpdHkodGhpcy5fcGFydHMpIDogJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIFVSSS5wYXJzZUF1dGhvcml0eSh2LCB0aGlzLl9wYXJ0cyk7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAudXNlcmluZm8gPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCF0aGlzLl9wYXJ0cy51c2VybmFtZSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhciB0ID0gVVJJLmJ1aWxkVXNlcmluZm8odGhpcy5fcGFydHMpO1xuICAgICAgcmV0dXJuIHQuc3Vic3RyaW5nKDAsIHQubGVuZ3RoIC0xKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZbdi5sZW5ndGgtMV0gIT09ICdAJykge1xuICAgICAgICB2ICs9ICdAJztcbiAgICAgIH1cblxuICAgICAgVVJJLnBhcnNlVXNlcmluZm8odiwgdGhpcy5fcGFydHMpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLnJlc291cmNlID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICB2YXIgcGFydHM7XG5cbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXRoKCkgKyB0aGlzLnNlYXJjaCgpICsgdGhpcy5oYXNoKCk7XG4gICAgfVxuXG4gICAgcGFydHMgPSBVUkkucGFyc2Uodik7XG4gICAgdGhpcy5fcGFydHMucGF0aCA9IHBhcnRzLnBhdGg7XG4gICAgdGhpcy5fcGFydHMucXVlcnkgPSBwYXJ0cy5xdWVyeTtcbiAgICB0aGlzLl9wYXJ0cy5mcmFnbWVudCA9IHBhcnRzLmZyYWdtZW50O1xuICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBmcmFjdGlvbiBhY2Nlc3NvcnNcbiAgcC5zdWJkb21haW4gPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG4gICAgfVxuXG4gICAgLy8gY29udmVuaWVuY2UsIHJldHVybiBcInd3d1wiIGZyb20gXCJ3d3cuZXhhbXBsZS5vcmdcIlxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIC8vIGdyYWIgZG9tYWluIGFuZCBhZGQgYW5vdGhlciBzZWdtZW50XG4gICAgICB2YXIgZW5kID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy5kb21haW4oKS5sZW5ndGggLSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZygwLCBlbmQpIHx8ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxlbmd0aCAtIHRoaXMuZG9tYWluKCkubGVuZ3RoO1xuICAgICAgdmFyIHN1YiA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZygwLCBlKTtcbiAgICAgIHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cCgnXicgKyBlc2NhcGVSZWdFeChzdWIpKTtcblxuICAgICAgaWYgKHYgJiYgdi5jaGFyQXQodi5sZW5ndGggLSAxKSAhPT0gJy4nKSB7XG4gICAgICAgIHYgKz0gJy4nO1xuICAgICAgfVxuXG4gICAgICBpZiAodikge1xuICAgICAgICBVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSh2KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLmRvbWFpbiA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJykge1xuICAgICAgYnVpbGQgPSB2O1xuICAgICAgdiA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBjb252ZW5pZW5jZSwgcmV0dXJuIFwiZXhhbXBsZS5vcmdcIiBmcm9tIFwid3d3LmV4YW1wbGUub3JnXCJcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoJ0lQJykpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiBob3N0bmFtZSBjb25zaXN0cyBvZiAxIG9yIDIgc2VnbWVudHMsIGl0IG11c3QgYmUgdGhlIGRvbWFpblxuICAgICAgdmFyIHQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5tYXRjaCgvXFwuL2cpO1xuICAgICAgaWYgKHQgJiYgdC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZTtcbiAgICAgIH1cblxuICAgICAgLy8gZ3JhYiB0bGQgYW5kIGFkZCBhbm90aGVyIHNlZ21lbnRcbiAgICAgIHZhciBlbmQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sZW5ndGggLSB0aGlzLnRsZChidWlsZCkubGVuZ3RoIC0gMTtcbiAgICAgIGVuZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxhc3RJbmRleE9mKCcuJywgZW5kIC0xKSArIDE7XG4gICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKGVuZCkgfHwgJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3Qgc2V0IGRvbWFpbiBlbXB0eScpO1xuICAgICAgfVxuXG4gICAgICBVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSh2KTtcblxuICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XG4gICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLmRvbWFpbigpKSArICckJyk7XG4gICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLnRsZCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJykge1xuICAgICAgYnVpbGQgPSB2O1xuICAgICAgdiA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyByZXR1cm4gXCJvcmdcIiBmcm9tIFwid3d3LmV4YW1wbGUub3JnXCJcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoJ0lQJykpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9zID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIHZhciB0bGQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcocG9zICsgMSk7XG5cbiAgICAgIGlmIChidWlsZCAhPT0gdHJ1ZSAmJiBTTEQgJiYgU0xELmxpc3RbdGxkLnRvTG93ZXJDYXNlKCldKSB7XG4gICAgICAgIHJldHVybiBTTEQuZ2V0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB8fCB0bGQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0bGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZXBsYWNlO1xuXG4gICAgICBpZiAoIXYpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2Fubm90IHNldCBUTEQgZW1wdHknKTtcbiAgICAgIH0gZWxzZSBpZiAodi5tYXRjaCgvW15hLXpBLVowLTktXS8pKSB7XG4gICAgICAgIGlmIChTTEQgJiYgU0xELmlzKHYpKSB7XG4gICAgICAgICAgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy50bGQoKSkgKyAnJCcpO1xuICAgICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUTEQgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOV0nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ2Nhbm5vdCBzZXQgVExEIG9uIG5vbi1kb21haW4gaG9zdCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy50bGQoKSkgKyAnJCcpO1xuICAgICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnJlcGxhY2UocmVwbGFjZSwgdik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgcC5kaXJlY3RvcnkgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSB0cnVlKSB7XG4gICAgICBpZiAoIXRoaXMuX3BhcnRzLnBhdGggJiYgIXRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3BhcnRzLnBhdGggPT09ICcvJykge1xuICAgICAgICByZXR1cm4gJy8nO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW5kID0gdGhpcy5fcGFydHMucGF0aC5sZW5ndGggLSB0aGlzLmZpbGVuYW1lKCkubGVuZ3RoIC0gMTtcbiAgICAgIHZhciByZXMgPSB0aGlzLl9wYXJ0cy5wYXRoLnN1YnN0cmluZygwLCBlbmQpIHx8ICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/ICcvJyA6ICcnKTtcblxuICAgICAgcmV0dXJuIHYgPyBVUkkuZGVjb2RlUGF0aChyZXMpIDogcmVzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlID0gdGhpcy5fcGFydHMucGF0aC5sZW5ndGggLSB0aGlzLmZpbGVuYW1lKCkubGVuZ3RoO1xuICAgICAgdmFyIGRpcmVjdG9yeSA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKDAsIGUpO1xuICAgICAgdmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKCdeJyArIGVzY2FwZVJlZ0V4KGRpcmVjdG9yeSkpO1xuXG4gICAgICAvLyBmdWxseSBxdWFsaWZpZXIgZGlyZWN0b3JpZXMgYmVnaW4gd2l0aCBhIHNsYXNoXG4gICAgICBpZiAoIXRoaXMuaXMoJ3JlbGF0aXZlJykpIHtcbiAgICAgICAgaWYgKCF2KSB7XG4gICAgICAgICAgdiA9ICcvJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2LmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICAgICAgdiA9ICcvJyArIHY7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZGlyZWN0b3JpZXMgYWx3YXlzIGVuZCB3aXRoIGEgc2xhc2hcbiAgICAgIGlmICh2ICYmIHYuY2hhckF0KHYubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgICB2ICs9ICcvJztcbiAgICAgIH1cblxuICAgICAgdiA9IFVSSS5yZWNvZGVQYXRoKHYpO1xuICAgICAgdGhpcy5fcGFydHMucGF0aCA9IHRoaXMuX3BhcnRzLnBhdGgucmVwbGFjZShyZXBsYWNlLCB2KTtcbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgcC5maWxlbmFtZSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IHRydWUpIHtcbiAgICAgIGlmICghdGhpcy5fcGFydHMucGF0aCB8fCB0aGlzLl9wYXJ0cy5wYXRoID09PSAnLycpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9zID0gdGhpcy5fcGFydHMucGF0aC5sYXN0SW5kZXhPZignLycpO1xuICAgICAgdmFyIHJlcyA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKHBvcysxKTtcblxuICAgICAgcmV0dXJuIHYgPyBVUkkuZGVjb2RlUGF0aFNlZ21lbnQocmVzKSA6IHJlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG11dGF0ZWREaXJlY3RvcnkgPSBmYWxzZTtcblxuICAgICAgaWYgKHYuY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgICAgdiA9IHYuc3Vic3RyaW5nKDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAodi5tYXRjaCgvXFwuP1xcLy8pKSB7XG4gICAgICAgIG11dGF0ZWREaXJlY3RvcnkgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy5maWxlbmFtZSgpKSArICckJyk7XG4gICAgICB2ID0gVVJJLnJlY29kZVBhdGgodik7XG4gICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuXG4gICAgICBpZiAobXV0YXRlZERpcmVjdG9yeSkge1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZVBhdGgoYnVpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAuc3VmZml4ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5wYXRoIHx8IHRoaXMuX3BhcnRzLnBhdGggPT09ICcvJykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaWxlbmFtZSA9IHRoaXMuZmlsZW5hbWUoKTtcbiAgICAgIHZhciBwb3MgPSBmaWxlbmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgdmFyIHMsIHJlcztcblxuICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICAvLyBzdWZmaXggbWF5IG9ubHkgY29udGFpbiBhbG51bSBjaGFyYWN0ZXJzICh5dXAsIEkgbWFkZSB0aGlzIHVwLilcbiAgICAgIHMgPSBmaWxlbmFtZS5zdWJzdHJpbmcocG9zKzEpO1xuICAgICAgcmVzID0gKC9eW2EtejAtOSVdKyQvaSkudGVzdChzKSA/IHMgOiAnJztcbiAgICAgIHJldHVybiB2ID8gVVJJLmRlY29kZVBhdGhTZWdtZW50KHJlcykgOiByZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2LmNoYXJBdCgwKSA9PT0gJy4nKSB7XG4gICAgICAgIHYgPSB2LnN1YnN0cmluZygxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN1ZmZpeCA9IHRoaXMuc3VmZml4KCk7XG4gICAgICB2YXIgcmVwbGFjZTtcblxuICAgICAgaWYgKCFzdWZmaXgpIHtcbiAgICAgICAgaWYgKCF2KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wYXJ0cy5wYXRoICs9ICcuJyArIFVSSS5yZWNvZGVQYXRoKHYpO1xuICAgICAgfSBlbHNlIGlmICghdikge1xuICAgICAgICByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCgnLicgKyBzdWZmaXgpICsgJyQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHN1ZmZpeCkgKyAnJCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICB2ID0gVVJJLnJlY29kZVBhdGgodik7XG4gICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB0aGlzLl9wYXJ0cy5wYXRoLnJlcGxhY2UocmVwbGFjZSwgdik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgcC5zZWdtZW50ID0gZnVuY3Rpb24oc2VnbWVudCwgdiwgYnVpbGQpIHtcbiAgICB2YXIgc2VwYXJhdG9yID0gdGhpcy5fcGFydHMudXJuID8gJzonIDogJy8nO1xuICAgIHZhciBwYXRoID0gdGhpcy5wYXRoKCk7XG4gICAgdmFyIGFic29sdXRlID0gcGF0aC5zdWJzdHJpbmcoMCwgMSkgPT09ICcvJztcbiAgICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KHNlcGFyYXRvcik7XG5cbiAgICBpZiAoc2VnbWVudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzZWdtZW50ICE9PSAnbnVtYmVyJykge1xuICAgICAgYnVpbGQgPSB2O1xuICAgICAgdiA9IHNlZ21lbnQ7XG4gICAgICBzZWdtZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChzZWdtZW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHNlZ21lbnQgIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBzZWdtZW50IFwiJyArIHNlZ21lbnQgKyAnXCIsIG11c3QgYmUgMC1iYXNlZCBpbnRlZ2VyJyk7XG4gICAgfVxuXG4gICAgaWYgKGFic29sdXRlKSB7XG4gICAgICBzZWdtZW50cy5zaGlmdCgpO1xuICAgIH1cblxuICAgIGlmIChzZWdtZW50IDwgMCkge1xuICAgICAgLy8gYWxsb3cgbmVnYXRpdmUgaW5kZXhlcyB0byBhZGRyZXNzIGZyb20gdGhlIGVuZFxuICAgICAgc2VnbWVudCA9IE1hdGgubWF4KHNlZ21lbnRzLmxlbmd0aCArIHNlZ21lbnQsIDApO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8qanNoaW50IGxheGJyZWFrOiB0cnVlICovXG4gICAgICByZXR1cm4gc2VnbWVudCA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gc2VnbWVudHNcbiAgICAgICAgOiBzZWdtZW50c1tzZWdtZW50XTtcbiAgICAgIC8qanNoaW50IGxheGJyZWFrOiBmYWxzZSAqL1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCA9PT0gbnVsbCB8fCBzZWdtZW50c1tzZWdtZW50XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaXNBcnJheSh2KSkge1xuICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICAvLyBjb2xsYXBzZSBlbXB0eSBlbGVtZW50cyB3aXRoaW4gYXJyYXlcbiAgICAgICAgZm9yICh2YXIgaT0wLCBsPXYubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCF2W2ldLmxlbmd0aCAmJiAoIXNlZ21lbnRzLmxlbmd0aCB8fCAhc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXS5sZW5ndGgpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoICYmICFzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLTFdLmxlbmd0aCkge1xuICAgICAgICAgICAgc2VnbWVudHMucG9wKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VnbWVudHMucHVzaCh2W2ldKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2IHx8IHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXSA9PT0gJycpIHtcbiAgICAgICAgICAvLyBlbXB0eSB0cmFpbGluZyBlbGVtZW50cyBoYXZlIHRvIGJlIG92ZXJ3cml0dGVuXG4gICAgICAgICAgLy8gdG8gcHJldmVudCByZXN1bHRzIHN1Y2ggYXMgL2Zvby8vYmFyXG4gICAgICAgICAgc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXSA9IHY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VnbWVudHMucHVzaCh2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodikge1xuICAgICAgICBzZWdtZW50c1tzZWdtZW50XSA9IHY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWdtZW50cy5zcGxpY2Uoc2VnbWVudCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFic29sdXRlKSB7XG4gICAgICBzZWdtZW50cy51bnNoaWZ0KCcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYXRoKHNlZ21lbnRzLmpvaW4oc2VwYXJhdG9yKSwgYnVpbGQpO1xuICB9O1xuICBwLnNlZ21lbnRDb2RlZCA9IGZ1bmN0aW9uKHNlZ21lbnQsIHYsIGJ1aWxkKSB7XG4gICAgdmFyIHNlZ21lbnRzLCBpLCBsO1xuXG4gICAgaWYgKHR5cGVvZiBzZWdtZW50ICE9PSAnbnVtYmVyJykge1xuICAgICAgYnVpbGQgPSB2O1xuICAgICAgdiA9IHNlZ21lbnQ7XG4gICAgICBzZWdtZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNlZ21lbnRzID0gdGhpcy5zZWdtZW50KHNlZ21lbnQsIHYsIGJ1aWxkKTtcbiAgICAgIGlmICghaXNBcnJheShzZWdtZW50cykpIHtcbiAgICAgICAgc2VnbWVudHMgPSBzZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gVVJJLmRlY29kZShzZWdtZW50cykgOiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgc2VnbWVudHNbaV0gPSBVUkkuZGVjb2RlKHNlZ21lbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VnbWVudHM7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FycmF5KHYpKSB7XG4gICAgICB2ID0gKHR5cGVvZiB2ID09PSAnc3RyaW5nJyB8fCB2IGluc3RhbmNlb2YgU3RyaW5nKSA/IFVSSS5lbmNvZGUodikgOiB2O1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gdi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdltpXSA9IFVSSS5kZWNvZGUodltpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2VnbWVudChzZWdtZW50LCB2LCBidWlsZCk7XG4gIH07XG5cbiAgLy8gbXV0YXRpbmcgcXVlcnkgc3RyaW5nXG4gIHZhciBxID0gcC5xdWVyeTtcbiAgcC5xdWVyeSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHYgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgICB2YXIgcmVzdWx0ID0gdi5jYWxsKHRoaXMsIGRhdGEpO1xuICAgICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShyZXN1bHQgfHwgZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAodiAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeSh2LCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBxLmNhbGwodGhpcywgdiwgYnVpbGQpO1xuICAgIH1cbiAgfTtcbiAgcC5zZXRRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBidWlsZCkge1xuICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCBuYW1lIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgICBkYXRhW25hbWVdID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDogbnVsbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHtcbiAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHtcbiAgICAgICAgICBkYXRhW2tleV0gPSBuYW1lW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmFkZFF1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZyBhcyB0aGUgbmFtZSBwYXJhbWV0ZXInKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgYnVpbGQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHAuYWRkUXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgYnVpbGQpIHtcbiAgICB2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICBVUkkuYWRkUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZSk7XG4gICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1aWxkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBwLnJlbW92ZVF1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGJ1aWxkKSB7XG4gICAgdmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgVVJJLnJlbW92ZVF1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlKTtcbiAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgYnVpbGQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHAuaGFzUXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgd2l0aGluQXJyYXkpIHtcbiAgICB2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICByZXR1cm4gVVJJLmhhc1F1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSk7XG4gIH07XG4gIHAuc2V0U2VhcmNoID0gcC5zZXRRdWVyeTtcbiAgcC5hZGRTZWFyY2ggPSBwLmFkZFF1ZXJ5O1xuICBwLnJlbW92ZVNlYXJjaCA9IHAucmVtb3ZlUXVlcnk7XG4gIHAuaGFzU2VhcmNoID0gcC5oYXNRdWVyeTtcblxuICAvLyBzYW5pdGl6aW5nIFVSTHNcbiAgcC5ub3JtYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgICAgICAubm9ybWFsaXplUHJvdG9jb2woZmFsc2UpXG4gICAgICAgIC5ub3JtYWxpemVRdWVyeShmYWxzZSlcbiAgICAgICAgLm5vcm1hbGl6ZUZyYWdtZW50KGZhbHNlKVxuICAgICAgICAuYnVpbGQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICAgICAgLm5vcm1hbGl6ZVByb3RvY29sKGZhbHNlKVxuICAgICAgLm5vcm1hbGl6ZUhvc3RuYW1lKGZhbHNlKVxuICAgICAgLm5vcm1hbGl6ZVBvcnQoZmFsc2UpXG4gICAgICAubm9ybWFsaXplUGF0aChmYWxzZSlcbiAgICAgIC5ub3JtYWxpemVRdWVyeShmYWxzZSlcbiAgICAgIC5ub3JtYWxpemVGcmFnbWVudChmYWxzZSlcbiAgICAgIC5idWlsZCgpO1xuICB9O1xuICBwLm5vcm1hbGl6ZVByb3RvY29sID0gZnVuY3Rpb24oYnVpbGQpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fcGFydHMucHJvdG9jb2wgPSB0aGlzLl9wYXJ0cy5wcm90b2NvbC50b0xvd2VyQ2FzZSgpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBwLm5vcm1hbGl6ZUhvc3RuYW1lID0gZnVuY3Rpb24oYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcbiAgICAgIGlmICh0aGlzLmlzKCdJRE4nKSAmJiBwdW55Y29kZSkge1xuICAgICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHB1bnljb2RlLnRvQVNDSUkodGhpcy5fcGFydHMuaG9zdG5hbWUpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzKCdJUHY2JykgJiYgSVB2Nikge1xuICAgICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IElQdjYuYmVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcC5ub3JtYWxpemVQb3J0ID0gZnVuY3Rpb24oYnVpbGQpIHtcbiAgICAvLyByZW1vdmUgcG9ydCBvZiBpdCdzIHRoZSBwcm90b2NvbCdzIGRlZmF1bHRcbiAgICBpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAnc3RyaW5nJyAmJiB0aGlzLl9wYXJ0cy5wb3J0ID09PSBVUkkuZGVmYXVsdFBvcnRzW3RoaXMuX3BhcnRzLnByb3RvY29sXSkge1xuICAgICAgdGhpcy5fcGFydHMucG9ydCA9IG51bGw7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHAubm9ybWFsaXplUGF0aCA9IGZ1bmN0aW9uKGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9wYXJ0cy5wYXRoIHx8IHRoaXMuX3BhcnRzLnBhdGggPT09ICcvJykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIF93YXNfcmVsYXRpdmU7XG4gICAgdmFyIF9wYXRoID0gdGhpcy5fcGFydHMucGF0aDtcbiAgICB2YXIgX2xlYWRpbmdQYXJlbnRzID0gJyc7XG4gICAgdmFyIF9wYXJlbnQsIF9wb3M7XG5cbiAgICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHNcbiAgICBpZiAoX3BhdGguY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIF93YXNfcmVsYXRpdmUgPSB0cnVlO1xuICAgICAgX3BhdGggPSAnLycgKyBfcGF0aDtcbiAgICB9XG5cbiAgICAvLyByZXNvbHZlIHNpbXBsZXNcbiAgICBfcGF0aCA9IF9wYXRoXG4gICAgICAucmVwbGFjZSgvKFxcLyhcXC5cXC8pKyl8KFxcL1xcLiQpL2csICcvJylcbiAgICAgIC5yZXBsYWNlKC9cXC97Mix9L2csICcvJyk7XG5cbiAgICAvLyByZW1lbWJlciBsZWFkaW5nIHBhcmVudHNcbiAgICBpZiAoX3dhc19yZWxhdGl2ZSkge1xuICAgICAgX2xlYWRpbmdQYXJlbnRzID0gX3BhdGguc3Vic3RyaW5nKDEpLm1hdGNoKC9eKFxcLlxcLlxcLykrLykgfHwgJyc7XG4gICAgICBpZiAoX2xlYWRpbmdQYXJlbnRzKSB7XG4gICAgICAgIF9sZWFkaW5nUGFyZW50cyA9IF9sZWFkaW5nUGFyZW50c1swXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyByZXNvbHZlIHBhcmVudHNcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgX3BhcmVudCA9IF9wYXRoLmluZGV4T2YoJy8uLicpO1xuICAgICAgaWYgKF9wYXJlbnQgPT09IC0xKSB7XG4gICAgICAgIC8vIG5vIG1vcmUgLi4vIHRvIHJlc29sdmVcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKF9wYXJlbnQgPT09IDApIHtcbiAgICAgICAgLy8gdG9wIGxldmVsIGNhbm5vdCBiZSByZWxhdGl2ZSwgc2tpcCBpdFxuICAgICAgICBfcGF0aCA9IF9wYXRoLnN1YnN0cmluZygzKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIF9wb3MgPSBfcGF0aC5zdWJzdHJpbmcoMCwgX3BhcmVudCkubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgIGlmIChfcG9zID09PSAtMSkge1xuICAgICAgICBfcG9zID0gX3BhcmVudDtcbiAgICAgIH1cbiAgICAgIF9wYXRoID0gX3BhdGguc3Vic3RyaW5nKDAsIF9wb3MpICsgX3BhdGguc3Vic3RyaW5nKF9wYXJlbnQgKyAzKTtcbiAgICB9XG5cbiAgICAvLyByZXZlcnQgdG8gcmVsYXRpdmVcbiAgICBpZiAoX3dhc19yZWxhdGl2ZSAmJiB0aGlzLmlzKCdyZWxhdGl2ZScpKSB7XG4gICAgICBfcGF0aCA9IF9sZWFkaW5nUGFyZW50cyArIF9wYXRoLnN1YnN0cmluZygxKTtcbiAgICB9XG5cbiAgICBfcGF0aCA9IFVSSS5yZWNvZGVQYXRoKF9wYXRoKTtcbiAgICB0aGlzLl9wYXJ0cy5wYXRoID0gX3BhdGg7XG4gICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBwLm5vcm1hbGl6ZVBhdGhuYW1lID0gcC5ub3JtYWxpemVQYXRoO1xuICBwLm5vcm1hbGl6ZVF1ZXJ5ID0gZnVuY3Rpb24oYnVpbGQpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnF1ZXJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5xdWVyeS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fcGFydHMucXVlcnkgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5xdWVyeShVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHAubm9ybWFsaXplRnJhZ21lbnQgPSBmdW5jdGlvbihidWlsZCkge1xuICAgIGlmICghdGhpcy5fcGFydHMuZnJhZ21lbnQpIHtcbiAgICAgIHRoaXMuX3BhcnRzLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcC5ub3JtYWxpemVTZWFyY2ggPSBwLm5vcm1hbGl6ZVF1ZXJ5O1xuICBwLm5vcm1hbGl6ZUhhc2ggPSBwLm5vcm1hbGl6ZUZyYWdtZW50O1xuXG4gIHAuaXNvODg1OSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGV4cGVjdCB1bmljb2RlIGlucHV0LCBpc284ODU5IG91dHB1dFxuICAgIHZhciBlID0gVVJJLmVuY29kZTtcbiAgICB2YXIgZCA9IFVSSS5kZWNvZGU7XG5cbiAgICBVUkkuZW5jb2RlID0gZXNjYXBlO1xuICAgIFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7XG4gICAgdGhpcy5ub3JtYWxpemUoKTtcbiAgICBVUkkuZW5jb2RlID0gZTtcbiAgICBVUkkuZGVjb2RlID0gZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBwLnVuaWNvZGUgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBleHBlY3QgaXNvODg1OSBpbnB1dCwgdW5pY29kZSBvdXRwdXRcbiAgICB2YXIgZSA9IFVSSS5lbmNvZGU7XG4gICAgdmFyIGQgPSBVUkkuZGVjb2RlO1xuXG4gICAgVVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDtcbiAgICBVUkkuZGVjb2RlID0gdW5lc2NhcGU7XG4gICAgdGhpcy5ub3JtYWxpemUoKTtcbiAgICBVUkkuZW5jb2RlID0gZTtcbiAgICBVUkkuZGVjb2RlID0gZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBwLnJlYWRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVyaSA9IHRoaXMuY2xvbmUoKTtcbiAgICAvLyByZW1vdmluZyB1c2VybmFtZSwgcGFzc3dvcmQsIGJlY2F1c2UgdGhleSBzaG91bGRuJ3QgYmUgZGlzcGxheWVkIGFjY29yZGluZyB0byBSRkMgMzk4NlxuICAgIHVyaS51c2VybmFtZSgnJykucGFzc3dvcmQoJycpLm5vcm1hbGl6ZSgpO1xuICAgIHZhciB0ID0gJyc7XG4gICAgaWYgKHVyaS5fcGFydHMucHJvdG9jb2wpIHtcbiAgICAgIHQgKz0gdXJpLl9wYXJ0cy5wcm90b2NvbCArICc6Ly8nO1xuICAgIH1cblxuICAgIGlmICh1cmkuX3BhcnRzLmhvc3RuYW1lKSB7XG4gICAgICBpZiAodXJpLmlzKCdwdW55Y29kZScpICYmIHB1bnljb2RlKSB7XG4gICAgICAgIHQgKz0gcHVueWNvZGUudG9Vbmljb2RlKHVyaS5fcGFydHMuaG9zdG5hbWUpO1xuICAgICAgICBpZiAodXJpLl9wYXJ0cy5wb3J0KSB7XG4gICAgICAgICAgdCArPSAnOicgKyB1cmkuX3BhcnRzLnBvcnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHQgKz0gdXJpLmhvc3QoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXJpLl9wYXJ0cy5ob3N0bmFtZSAmJiB1cmkuX3BhcnRzLnBhdGggJiYgdXJpLl9wYXJ0cy5wYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICB0ICs9ICcvJztcbiAgICB9XG5cbiAgICB0ICs9IHVyaS5wYXRoKHRydWUpO1xuICAgIGlmICh1cmkuX3BhcnRzLnF1ZXJ5KSB7XG4gICAgICB2YXIgcSA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIHFwID0gdXJpLl9wYXJ0cy5xdWVyeS5zcGxpdCgnJicpLCBsID0gcXAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBrdiA9IChxcFtpXSB8fCAnJykuc3BsaXQoJz0nKTtcbiAgICAgICAgcSArPSAnJicgKyBVUkkuZGVjb2RlUXVlcnkoa3ZbMF0sIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpXG4gICAgICAgICAgLnJlcGxhY2UoLyYvZywgJyUyNicpO1xuXG4gICAgICAgIGlmIChrdlsxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcSArPSAnPScgKyBVUkkuZGVjb2RlUXVlcnkoa3ZbMV0sIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpXG4gICAgICAgICAgICAucmVwbGFjZSgvJi9nLCAnJTI2Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHQgKz0gJz8nICsgcS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuXG4gICAgdCArPSBVUkkuZGVjb2RlUXVlcnkodXJpLmhhc2goKSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gcmVzb2x2aW5nIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBVUkxzXG4gIHAuYWJzb2x1dGVUbyA9IGZ1bmN0aW9uKGJhc2UpIHtcbiAgICB2YXIgcmVzb2x2ZWQgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBbJ3Byb3RvY29sJywgJ3VzZXJuYW1lJywgJ3Bhc3N3b3JkJywgJ2hvc3RuYW1lJywgJ3BvcnQnXTtcbiAgICB2YXIgYmFzZWRpciwgaSwgcDtcblxuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVVJOcyBkbyBub3QgaGF2ZSBhbnkgZ2VuZXJhbGx5IGRlZmluZWQgaGllcmFyY2hpY2FsIGNvbXBvbmVudHMnKTtcbiAgICB9XG5cbiAgICBpZiAoIShiYXNlIGluc3RhbmNlb2YgVVJJKSkge1xuICAgICAgYmFzZSA9IG5ldyBVUkkoYmFzZSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXNvbHZlZC5fcGFydHMucHJvdG9jb2wpIHtcbiAgICAgIHJlc29sdmVkLl9wYXJ0cy5wcm90b2NvbCA9IGJhc2UuX3BhcnRzLnByb3RvY29sO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkge1xuICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IChwID0gcHJvcGVydGllc1tpXSk7IGkrKykge1xuICAgICAgcmVzb2x2ZWQuX3BhcnRzW3BdID0gYmFzZS5fcGFydHNbcF07XG4gICAgfVxuXG4gICAgaWYgKCFyZXNvbHZlZC5fcGFydHMucGF0aCkge1xuICAgICAgcmVzb2x2ZWQuX3BhcnRzLnBhdGggPSBiYXNlLl9wYXJ0cy5wYXRoO1xuICAgICAgaWYgKCFyZXNvbHZlZC5fcGFydHMucXVlcnkpIHtcbiAgICAgICAgcmVzb2x2ZWQuX3BhcnRzLnF1ZXJ5ID0gYmFzZS5fcGFydHMucXVlcnk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChyZXNvbHZlZC5fcGFydHMucGF0aC5zdWJzdHJpbmcoLTIpID09PSAnLi4nKSB7XG4gICAgICByZXNvbHZlZC5fcGFydHMucGF0aCArPSAnLyc7XG4gICAgfVxuXG4gICAgaWYgKHJlc29sdmVkLnBhdGgoKS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgYmFzZWRpciA9IGJhc2UuZGlyZWN0b3J5KCk7XG4gICAgICByZXNvbHZlZC5fcGFydHMucGF0aCA9IChiYXNlZGlyID8gKGJhc2VkaXIgKyAnLycpIDogJycpICsgcmVzb2x2ZWQuX3BhcnRzLnBhdGg7XG4gICAgICByZXNvbHZlZC5ub3JtYWxpemVQYXRoKCk7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWQuYnVpbGQoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gIH07XG4gIHAucmVsYXRpdmVUbyA9IGZ1bmN0aW9uKGJhc2UpIHtcbiAgICB2YXIgcmVsYXRpdmUgPSB0aGlzLmNsb25lKCkubm9ybWFsaXplKCk7XG4gICAgdmFyIHJlbGF0aXZlUGFydHMsIGJhc2VQYXJ0cywgY29tbW9uLCByZWxhdGl2ZVBhdGgsIGJhc2VQYXRoO1xuXG4gICAgaWYgKHJlbGF0aXZlLl9wYXJ0cy51cm4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVVJOcyBkbyBub3QgaGF2ZSBhbnkgZ2VuZXJhbGx5IGRlZmluZWQgaGllcmFyY2hpY2FsIGNvbXBvbmVudHMnKTtcbiAgICB9XG5cbiAgICBiYXNlID0gbmV3IFVSSShiYXNlKS5ub3JtYWxpemUoKTtcbiAgICByZWxhdGl2ZVBhcnRzID0gcmVsYXRpdmUuX3BhcnRzO1xuICAgIGJhc2VQYXJ0cyA9IGJhc2UuX3BhcnRzO1xuICAgIHJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlLnBhdGgoKTtcbiAgICBiYXNlUGF0aCA9IGJhc2UucGF0aCgpO1xuXG4gICAgaWYgKHJlbGF0aXZlUGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVUkkgaXMgYWxyZWFkeSByZWxhdGl2ZScpO1xuICAgIH1cblxuICAgIGlmIChiYXNlUGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY2FsY3VsYXRlIGEgVVJJIHJlbGF0aXZlIHRvIGFub3RoZXIgcmVsYXRpdmUgVVJJJyk7XG4gICAgfVxuXG4gICAgaWYgKHJlbGF0aXZlUGFydHMucHJvdG9jb2wgPT09IGJhc2VQYXJ0cy5wcm90b2NvbCkge1xuICAgICAgcmVsYXRpdmVQYXJ0cy5wcm90b2NvbCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHJlbGF0aXZlUGFydHMudXNlcm5hbWUgIT09IGJhc2VQYXJ0cy51c2VybmFtZSB8fCByZWxhdGl2ZVBhcnRzLnBhc3N3b3JkICE9PSBiYXNlUGFydHMucGFzc3dvcmQpIHtcbiAgICAgIHJldHVybiByZWxhdGl2ZS5idWlsZCgpO1xuICAgIH1cblxuICAgIGlmIChyZWxhdGl2ZVBhcnRzLnByb3RvY29sICE9PSBudWxsIHx8IHJlbGF0aXZlUGFydHMudXNlcm5hbWUgIT09IG51bGwgfHwgcmVsYXRpdmVQYXJ0cy5wYXNzd29yZCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gICAgfVxuXG4gICAgaWYgKHJlbGF0aXZlUGFydHMuaG9zdG5hbWUgPT09IGJhc2VQYXJ0cy5ob3N0bmFtZSAmJiByZWxhdGl2ZVBhcnRzLnBvcnQgPT09IGJhc2VQYXJ0cy5wb3J0KSB7XG4gICAgICByZWxhdGl2ZVBhcnRzLmhvc3RuYW1lID0gbnVsbDtcbiAgICAgIHJlbGF0aXZlUGFydHMucG9ydCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZWxhdGl2ZS5idWlsZCgpO1xuICAgIH1cblxuICAgIGlmIChyZWxhdGl2ZVBhdGggPT09IGJhc2VQYXRoKSB7XG4gICAgICByZWxhdGl2ZVBhcnRzLnBhdGggPSAnJztcbiAgICAgIHJldHVybiByZWxhdGl2ZS5idWlsZCgpO1xuICAgIH1cblxuICAgIC8vIGRldGVybWluZSBjb21tb24gc3ViIHBhdGhcbiAgICBjb21tb24gPSBVUkkuY29tbW9uUGF0aChyZWxhdGl2ZS5wYXRoKCksIGJhc2UucGF0aCgpKTtcblxuICAgIC8vIElmIHRoZSBwYXRocyBoYXZlIG5vdGhpbmcgaW4gY29tbW9uLCByZXR1cm4gYSByZWxhdGl2ZSBVUkwgd2l0aCB0aGUgYWJzb2x1dGUgcGF0aC5cbiAgICBpZiAoIWNvbW1vbikge1xuICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudHMgPSBiYXNlUGFydHMucGF0aFxuICAgICAgLnN1YnN0cmluZyhjb21tb24ubGVuZ3RoKVxuICAgICAgLnJlcGxhY2UoL1teXFwvXSokLywgJycpXG4gICAgICAucmVwbGFjZSgvLio/XFwvL2csICcuLi8nKTtcblxuICAgIHJlbGF0aXZlUGFydHMucGF0aCA9IHBhcmVudHMgKyByZWxhdGl2ZVBhcnRzLnBhdGguc3Vic3RyaW5nKGNvbW1vbi5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gIH07XG5cbiAgLy8gY29tcGFyaW5nIFVSSXNcbiAgcC5lcXVhbHMgPSBmdW5jdGlvbih1cmkpIHtcbiAgICB2YXIgb25lID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciB0d28gPSBuZXcgVVJJKHVyaSk7XG4gICAgdmFyIG9uZV9tYXAgPSB7fTtcbiAgICB2YXIgdHdvX21hcCA9IHt9O1xuICAgIHZhciBjaGVja2VkID0ge307XG4gICAgdmFyIG9uZV9xdWVyeSwgdHdvX3F1ZXJ5LCBrZXk7XG5cbiAgICBvbmUubm9ybWFsaXplKCk7XG4gICAgdHdvLm5vcm1hbGl6ZSgpO1xuXG4gICAgLy8gZXhhY3QgbWF0Y2hcbiAgICBpZiAob25lLnRvU3RyaW5nKCkgPT09IHR3by50b1N0cmluZygpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBleHRyYWN0IHF1ZXJ5IHN0cmluZ1xuICAgIG9uZV9xdWVyeSA9IG9uZS5xdWVyeSgpO1xuICAgIHR3b19xdWVyeSA9IHR3by5xdWVyeSgpO1xuICAgIG9uZS5xdWVyeSgnJyk7XG4gICAgdHdvLnF1ZXJ5KCcnKTtcblxuICAgIC8vIGRlZmluaXRlbHkgbm90IGVxdWFsIGlmIG5vdCBldmVuIG5vbi1xdWVyeSBwYXJ0cyBtYXRjaFxuICAgIGlmIChvbmUudG9TdHJpbmcoKSAhPT0gdHdvLnRvU3RyaW5nKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBxdWVyeSBwYXJhbWV0ZXJzIGhhdmUgdGhlIHNhbWUgbGVuZ3RoLCBldmVuIGlmIHRoZXkncmUgcGVybXV0ZWRcbiAgICBpZiAob25lX3F1ZXJ5Lmxlbmd0aCAhPT0gdHdvX3F1ZXJ5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG9uZV9tYXAgPSBVUkkucGFyc2VRdWVyeShvbmVfcXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgIHR3b19tYXAgPSBVUkkucGFyc2VRdWVyeSh0d29fcXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuXG4gICAgZm9yIChrZXkgaW4gb25lX21hcCkge1xuICAgICAgaWYgKGhhc093bi5jYWxsKG9uZV9tYXAsIGtleSkpIHtcbiAgICAgICAgaWYgKCFpc0FycmF5KG9uZV9tYXBba2V5XSkpIHtcbiAgICAgICAgICBpZiAob25lX21hcFtrZXldICE9PSB0d29fbWFwW2tleV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWFycmF5c0VxdWFsKG9uZV9tYXBba2V5XSwgdHdvX21hcFtrZXldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoZWNrZWRba2V5XSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChrZXkgaW4gdHdvX21hcCkge1xuICAgICAgaWYgKGhhc093bi5jYWxsKHR3b19tYXAsIGtleSkpIHtcbiAgICAgICAgaWYgKCFjaGVja2VkW2tleV0pIHtcbiAgICAgICAgICAvLyB0d28gY29udGFpbnMgYSBwYXJhbWV0ZXIgbm90IHByZXNlbnQgaW4gb25lXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gc3RhdGVcbiAgcC5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSBmdW5jdGlvbih2KSB7XG4gICAgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzID0gISF2O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHAuZXNjYXBlUXVlcnlTcGFjZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlID0gISF2O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBVUkk7XG59KSk7XG4iLCIvKiEgaHR0cDovL210aHMuYmUvcHVueWNvZGUgdjEuMi4zIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGVzICovXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHRtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cyAmJiBtb2R1bGU7XG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC5cblx0ICogQG5hbWUgcHVueWNvZGVcblx0ICogQHR5cGUgT2JqZWN0XG5cdCAqL1xuXHR2YXIgcHVueWNvZGUsXG5cblx0LyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqL1xuXHRtYXhJbnQgPSAyMTQ3NDgzNjQ3LCAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cblx0LyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuXHRiYXNlID0gMzYsXG5cdHRNaW4gPSAxLFxuXHR0TWF4ID0gMjYsXG5cdHNrZXcgPSAzOCxcblx0ZGFtcCA9IDcwMCxcblx0aW5pdGlhbEJpYXMgPSA3Mixcblx0aW5pdGlhbE4gPSAxMjgsIC8vIDB4ODBcblx0ZGVsaW1pdGVyID0gJy0nLCAvLyAnXFx4MkQnXG5cblx0LyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cblx0cmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sXG5cdHJlZ2V4Tm9uQVNDSUkgPSAvW14gLX5dLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1xceDJFfFxcdTMwMDJ8XFx1RkYwRXxcXHVGRjYxL2csIC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuXHQvKiogRXJyb3IgbWVzc2FnZXMgKi9cblx0ZXJyb3JzID0ge1xuXHRcdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdFx0J25vdC1iYXNpYyc6ICdJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpJyxcblx0XHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xuXHR9LFxuXG5cdC8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi9cblx0YmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluLFxuXHRmbG9vciA9IE1hdGguZmxvb3IsXG5cdHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUsXG5cblx0LyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqL1xuXHRrZXk7XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cblx0ICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuXHRcdHRocm93IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0YXJyYXlbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuXHRcdH1cblx0XHRyZXR1cm4gYXJyYXk7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZS5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHJldHVybiBtYXAoc3RyaW5nLnNwbGl0KHJlZ2V4U2VwYXJhdG9ycyksIGZuKS5qb2luKCcuJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdFx0dmFyIGsgPSAwO1xuXHRcdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdFx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRcdGZvciAoLyogbm8gaW5pdGlhbGl6YXRpb24gKi87IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdFx0fVxuXHRcdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHRcdC8vIERvbid0IHVzZSBVQ1MtMlxuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG5cdFx0ICAgIG91dCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIG4gPSBpbml0aWFsTixcblx0XHQgICAgYmlhcyA9IGluaXRpYWxCaWFzLFxuXHRcdCAgICBiYXNpYyxcblx0XHQgICAgaixcblx0XHQgICAgaW5kZXgsXG5cdFx0ICAgIG9sZGksXG5cdFx0ICAgIHcsXG5cdFx0ICAgIGssXG5cdFx0ICAgIGRpZ2l0LFxuXHRcdCAgICB0LFxuXHRcdCAgICBsZW5ndGgsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyB0byBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5XG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSB0byBVbmljb2RlLiBPbmx5IHRoZVxuXHQgKiBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLCBpLmUuIGl0IGRvZXNuJ3Rcblx0ICogbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlbiBjb252ZXJ0ZWQgdG9cblx0ICogVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIFB1bnljb2RlIGRvbWFpbiBuYW1lIHRvIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShkb21haW4pIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGRvbWFpbiwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgdG8gUHVueWNvZGUuIE9ubHkgdGhlXG5cdCAqIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS4gaXQgZG9lc24ndFxuXHQgKiBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpbiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lIHRvIGNvbnZlcnQsIGFzIGEgVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGRvbWFpbikge1xuXHRcdHJldHVybiBtYXBEb21haW4oZG9tYWluLCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS4yLjMnLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9XHRlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiAhZnJlZUV4cG9ydHMubm9kZVR5cGUpIHtcblx0XHRpZiAoZnJlZU1vZHVsZSkgeyAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAoa2V5IGluIHB1bnljb2RlKSB7XG5cdFx0XHRcdHB1bnljb2RlLmhhc093blByb3BlcnR5KGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBwdW55Y29kZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7IC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG4iLCJhcmd1bWVudHNbNF1bXCIvQXBwbGljYXRpb25zL1hBTVBQL3hhbXBwZmlsZXMvaHRkb2NzL3JlYWRpdW1fcGcvbm9kZV9tb2R1bGVzL0JhY2tib25lL2JhY2tib25lLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gdHJ1ZTtcbiAgICB2YXIgY3VycmVudFF1ZXVlO1xuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICAgICAgICBjdXJyZW50UXVldWVbaV0oKTtcbiAgICAgICAgfVxuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG59XG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHF1ZXVlLnB1c2goZnVuKTtcbiAgICBpZiAoIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgLypcbiAgICogR2VuZXJhdGVkIGJ5IFBFRy5qcyAwLjguMC5cbiAgICpcbiAgICogaHR0cDovL3BlZ2pzLm1hamRhLmN6L1xuICAgKi9cblxuICBmdW5jdGlvbiBwZWckc3ViY2xhc3MoY2hpbGQsIHBhcmVudCkge1xuICAgIGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfVxuICAgIGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTtcbiAgICBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gU3ludGF4RXJyb3IobWVzc2FnZSwgZXhwZWN0ZWQsIGZvdW5kLCBvZmZzZXQsIGxpbmUsIGNvbHVtbikge1xuICAgIHRoaXMubWVzc2FnZSAgPSBtZXNzYWdlO1xuICAgIHRoaXMuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICB0aGlzLmZvdW5kICAgID0gZm91bmQ7XG4gICAgdGhpcy5vZmZzZXQgICA9IG9mZnNldDtcbiAgICB0aGlzLmxpbmUgICAgID0gbGluZTtcbiAgICB0aGlzLmNvbHVtbiAgID0gY29sdW1uO1xuXG4gICAgdGhpcy5uYW1lICAgICA9IFwiU3ludGF4RXJyb3JcIjtcbiAgfVxuXG4gIHBlZyRzdWJjbGFzcyhTeW50YXhFcnJvciwgRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuXG4gICAgICAgIHBlZyRGQUlMRUQgPSB7fSxcblxuICAgICAgICBwZWckc3RhcnRSdWxlRnVuY3Rpb25zID0geyBmcmFnbWVudDogcGVnJHBhcnNlZnJhZ21lbnQgfSxcbiAgICAgICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uICA9IHBlZyRwYXJzZWZyYWdtZW50LFxuXG4gICAgICAgIHBlZyRjMCA9IHBlZyRGQUlMRUQsXG4gICAgICAgIHBlZyRjMSA9IFwiZXB1YmNmaShcIixcbiAgICAgICAgcGVnJGMyID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiZXB1YmNmaShcIiwgZGVzY3JpcHRpb246IFwiXFxcImVwdWJjZmkoXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMyA9IFwiKVwiLFxuICAgICAgICBwZWckYzQgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIpXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIpXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNSA9IGZ1bmN0aW9uKGZyYWdtZW50VmFsKSB7IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6XCJDRklBU1RcIiwgY2ZpU3RyaW5nOmZyYWdtZW50VmFsIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzYgPSBcIixcIixcbiAgICAgICAgcGVnJGM3ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiLFwiLCBkZXNjcmlwdGlvbjogXCJcXFwiLFxcXCJcIiB9LFxuICAgICAgICBwZWckYzggPSBmdW5jdGlvbihzdGVwVmFsLCBsb2NhbFBhdGhWYWwsIHJhbmdlTG9jYWxQYXRoMVZhbCwgcmFuZ2VMb2NhbFBhdGgyVmFsKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOlwicmFuZ2VcIiwgcGF0aDpzdGVwVmFsLCBsb2NhbFBhdGg6bG9jYWxQYXRoVmFsLCByYW5nZTE6cmFuZ2VMb2NhbFBhdGgxVmFsLCByYW5nZTI6cmFuZ2VMb2NhbFBhdGgyVmFsIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgcGVnJGM5ID0gZnVuY3Rpb24oc3RlcFZhbCwgbG9jYWxQYXRoVmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTpcInBhdGhcIiwgcGF0aDpzdGVwVmFsLCBsb2NhbFBhdGg6bG9jYWxQYXRoVmFsIH07IFxuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMxMCA9IFtdLFxuICAgICAgICBwZWckYzExID0gbnVsbCxcbiAgICAgICAgcGVnJGMxMiA9IGZ1bmN0aW9uKGxvY2FsUGF0aFN0ZXBWYWwsIHRlcm1TdGVwVmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RlcHM6bG9jYWxQYXRoU3RlcFZhbCwgdGVybVN0ZXA6dGVybVN0ZXBWYWwgfTsgXG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzEzID0gXCIvXCIsXG4gICAgICAgIHBlZyRjMTQgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIvXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIvXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTUgPSBcIltcIixcbiAgICAgICAgcGVnJGMxNiA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIltcIiwgZGVzY3JpcHRpb246IFwiXFxcIltcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxNyA9IFwiXVwiLFxuICAgICAgICBwZWckYzE4ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiXVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXVxcXCJcIiB9LFxuICAgICAgICBwZWckYzE5ID0gZnVuY3Rpb24oc3RlcExlbmd0aFZhbCwgYXNzZXJ0VmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTpcImluZGV4U3RlcFwiLCBzdGVwTGVuZ3RoOnN0ZXBMZW5ndGhWYWwsIGlkQXNzZXJ0aW9uOmFzc2VydFZhbFsxXSB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMyMCA9IFwiIS9cIixcbiAgICAgICAgcGVnJGMyMSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIiEvXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIhL1xcXCJcIiB9LFxuICAgICAgICBwZWckYzIyID0gZnVuY3Rpb24oc3RlcExlbmd0aFZhbCwgYXNzZXJ0VmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTpcImluZGlyZWN0aW9uU3RlcFwiLCBzdGVwTGVuZ3RoOnN0ZXBMZW5ndGhWYWwsIGlkQXNzZXJ0aW9uOmFzc2VydFZhbFsxXSB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMyMyA9IFwiOlwiLFxuICAgICAgICBwZWckYzI0ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiOlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiOlxcXCJcIiB9LFxuICAgICAgICBwZWckYzI1ID0gZnVuY3Rpb24odGV4dE9mZnNldFZhbHVlLCB0ZXh0TG9jQXNzZXJ0VmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTpcInRleHRUZXJtaW51c1wiLCBvZmZzZXRWYWx1ZTp0ZXh0T2Zmc2V0VmFsdWUsIHRleHRBc3NlcnRpb246dGV4dExvY0Fzc2VydFZhbFsxXSB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMyNiA9IGZ1bmN0aW9uKGlkVmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkVmFsOyBcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHBlZyRjMjcgPSBmdW5jdGlvbihjc3ZWYWwsIHBhcmFtVmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTpcInRleHRMb2NhdGlvbkFzc2VydGlvblwiLCBjc3Y6Y3N2VmFsLCBwYXJhbWV0ZXI6cGFyYW1WYWwgfTsgXG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzI4ID0gXCI7XCIsXG4gICAgICAgIHBlZyRjMjkgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCI7XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCI7XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMzAgPSBcIj1cIixcbiAgICAgICAgcGVnJGMzMSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIj1cIiwgZGVzY3JpcHRpb246IFwiXFxcIj1cXFwiXCIgfSxcbiAgICAgICAgcGVnJGMzMiA9IGZ1bmN0aW9uKHBhcmFtTEhTVmFsLCBwYXJhbVJIU1ZhbCkgeyBcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6XCJwYXJhbWV0ZXJcIiwgTEhTVmFsdWU6cGFyYW1MSFNWYWwsIFJIU1ZhbHVlOnBhcmFtUkhTVmFsIH07IFxuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMzMyA9IGZ1bmN0aW9uKHByZUFzc2VydGlvblZhbCwgcG9zdEFzc2VydGlvblZhbCkgeyBcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6XCJjc3ZcIiwgcHJlQXNzZXJ0aW9uOnByZUFzc2VydGlvblZhbCwgcG9zdEFzc2VydGlvbjpwb3N0QXNzZXJ0aW9uVmFsIH07IFxuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMzNCA9IGZ1bmN0aW9uKHN0cmluZ1ZhbCkgeyBcblxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdWYWwuam9pbignJyk7IFxuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMzNSA9IGZ1bmN0aW9uKGVzY1NwZWNDaGFyVmFsKSB7IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBlc2NTcGVjQ2hhclZhbFsxXTsgXG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzM2ID0gL15bMS05XS8sXG4gICAgICAgIHBlZyRjMzcgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiWzEtOV1cIiwgZGVzY3JpcHRpb246IFwiWzEtOV1cIiB9LFxuICAgICAgICBwZWckYzM4ID0gL15bMC05XS8sXG4gICAgICAgIHBlZyRjMzkgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiWzAtOV1cIiwgZGVzY3JpcHRpb246IFwiWzAtOV1cIiB9LFxuICAgICAgICBwZWckYzQwID0gXCIuXCIsXG4gICAgICAgIHBlZyRjNDEgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIuXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIuXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNDIgPSBmdW5jdGlvbihpbnRQYXJ0VmFsLCBmcmFjUGFydFZhbCkgeyBcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbnRQYXJ0VmFsLmpvaW4oJycpICsgXCIuXCIgKyBmcmFjUGFydFZhbC5qb2luKCcnKTsgXG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzQzID0gXCIwXCIsXG4gICAgICAgIHBlZyRjNDQgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIwXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIwXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNDUgPSBmdW5jdGlvbihpbnRlZ2VyVmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgaWYgKGludGVnZXJWYWwgPT09IFwiMFwiKSB7IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiMFwiO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgZWxzZSB7IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGludGVnZXJWYWxbMF0uY29uY2F0KGludGVnZXJWYWxbMV0uam9pbignJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIHBlZyRjNDYgPSBcIiBcIixcbiAgICAgICAgcGVnJGM0NyA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIiBcIiwgZGVzY3JpcHRpb246IFwiXFxcIiBcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM0OCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCIgXCI7IH0sXG4gICAgICAgIHBlZyRjNDkgPSBcIl5cIixcbiAgICAgICAgcGVnJGM1MCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIl5cIiwgZGVzY3JpcHRpb246IFwiXFxcIl5cXFwiXCIgfSxcbiAgICAgICAgcGVnJGM1MSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJeXCI7IH0sXG4gICAgICAgIHBlZyRjNTIgPSBcIlxcXCJcIixcbiAgICAgICAgcGVnJGM1MyA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIlxcXCJcIiwgZGVzY3JpcHRpb246IFwiXFxcIlxcXFxcXFwiXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNTQgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdcIic7IH0sXG4gICAgICAgIHBlZyRjNTUgPSBmdW5jdGlvbihicmFja2V0VmFsKSB7IHJldHVybiBicmFja2V0VmFsOyB9LFxuICAgICAgICBwZWckYzU2ID0gXCIoXCIsXG4gICAgICAgIHBlZyRjNTcgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIoXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIoXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNTggPSBmdW5jdGlvbihwYXJhVmFsKSB7IHJldHVybiBwYXJhVmFsOyB9LFxuICAgICAgICBwZWckYzU5ID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIixcIjsgfSxcbiAgICAgICAgcGVnJGM2MCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCI7XCI7IH0sXG4gICAgICAgIHBlZyRjNjEgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwiPVwiOyB9LFxuICAgICAgICBwZWckYzYyID0gL15bYS16XS8sXG4gICAgICAgIHBlZyRjNjMgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW2Etel1cIiwgZGVzY3JpcHRpb246IFwiW2Etel1cIiB9LFxuICAgICAgICBwZWckYzY0ID0gL15bQS1aXS8sXG4gICAgICAgIHBlZyRjNjUgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW0EtWl1cIiwgZGVzY3JpcHRpb246IFwiW0EtWl1cIiB9LFxuICAgICAgICBwZWckYzY2ID0gXCItXCIsXG4gICAgICAgIHBlZyRjNjcgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCItXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCItXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNjggPSBcIl9cIixcbiAgICAgICAgcGVnJGM2OSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIl9cIiwgZGVzY3JpcHRpb246IFwiXFxcIl9cXFwiXCIgfSxcbiAgICAgICAgcGVnJGM3MCA9IGZ1bmN0aW9uKGNoYXJWYWwpIHsgcmV0dXJuIGNoYXJWYWw7IH0sXG5cbiAgICAgICAgcGVnJGN1cnJQb3MgICAgICAgICAgPSAwLFxuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgICAgICA9IDAsXG4gICAgICAgIHBlZyRjYWNoZWRQb3MgICAgICAgID0gMCxcbiAgICAgICAgcGVnJGNhY2hlZFBvc0RldGFpbHMgPSB7IGxpbmU6IDEsIGNvbHVtbjogMSwgc2VlbkNSOiBmYWxzZSB9LFxuICAgICAgICBwZWckbWF4RmFpbFBvcyAgICAgICA9IDAsXG4gICAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQgID0gW10sXG4gICAgICAgIHBlZyRzaWxlbnRGYWlscyAgICAgID0gMCxcblxuICAgICAgICBwZWckcmVzdWx0O1xuXG4gICAgaWYgKFwic3RhcnRSdWxlXCIgaW4gb3B0aW9ucykge1xuICAgICAgaWYgKCEob3B0aW9ucy5zdGFydFJ1bGUgaW4gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9ucykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc3RhcnQgcGFyc2luZyBmcm9tIHJ1bGUgXFxcIlwiICsgb3B0aW9ucy5zdGFydFJ1bGUgKyBcIlxcXCIuXCIpO1xuICAgICAgfVxuXG4gICAgICBwZWckc3RhcnRSdWxlRnVuY3Rpb24gPSBwZWckc3RhcnRSdWxlRnVuY3Rpb25zW29wdGlvbnMuc3RhcnRSdWxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXh0KCkge1xuICAgICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZyhwZWckcmVwb3J0ZWRQb3MsIHBlZyRjdXJyUG9zKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvZmZzZXQoKSB7XG4gICAgICByZXR1cm4gcGVnJHJlcG9ydGVkUG9zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmUoKSB7XG4gICAgICByZXR1cm4gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBlZyRyZXBvcnRlZFBvcykubGluZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb2x1bW4oKSB7XG4gICAgICByZXR1cm4gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBlZyRyZXBvcnRlZFBvcykuY29sdW1uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGVjdGVkKGRlc2NyaXB0aW9uKSB7XG4gICAgICB0aHJvdyBwZWckYnVpbGRFeGNlcHRpb24oXG4gICAgICAgIG51bGwsXG4gICAgICAgIFt7IHR5cGU6IFwib3RoZXJcIiwgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uIH1dLFxuICAgICAgICBwZWckcmVwb3J0ZWRQb3NcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkge1xuICAgICAgdGhyb3cgcGVnJGJ1aWxkRXhjZXB0aW9uKG1lc3NhZ2UsIG51bGwsIHBlZyRyZXBvcnRlZFBvcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBvcykge1xuICAgICAgZnVuY3Rpb24gYWR2YW5jZShkZXRhaWxzLCBzdGFydFBvcywgZW5kUG9zKSB7XG4gICAgICAgIHZhciBwLCBjaDtcblxuICAgICAgICBmb3IgKHAgPSBzdGFydFBvczsgcCA8IGVuZFBvczsgcCsrKSB7XG4gICAgICAgICAgY2ggPSBpbnB1dC5jaGFyQXQocCk7XG4gICAgICAgICAgaWYgKGNoID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgICBpZiAoIWRldGFpbHMuc2VlbkNSKSB7IGRldGFpbHMubGluZSsrOyB9XG4gICAgICAgICAgICBkZXRhaWxzLmNvbHVtbiA9IDE7XG4gICAgICAgICAgICBkZXRhaWxzLnNlZW5DUiA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09IFwiXFxyXCIgfHwgY2ggPT09IFwiXFx1MjAyOFwiIHx8IGNoID09PSBcIlxcdTIwMjlcIikge1xuICAgICAgICAgICAgZGV0YWlscy5saW5lKys7XG4gICAgICAgICAgICBkZXRhaWxzLmNvbHVtbiA9IDE7XG4gICAgICAgICAgICBkZXRhaWxzLnNlZW5DUiA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRldGFpbHMuY29sdW1uKys7XG4gICAgICAgICAgICBkZXRhaWxzLnNlZW5DUiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGVnJGNhY2hlZFBvcyAhPT0gcG9zKSB7XG4gICAgICAgIGlmIChwZWckY2FjaGVkUG9zID4gcG9zKSB7XG4gICAgICAgICAgcGVnJGNhY2hlZFBvcyA9IDA7XG4gICAgICAgICAgcGVnJGNhY2hlZFBvc0RldGFpbHMgPSB7IGxpbmU6IDEsIGNvbHVtbjogMSwgc2VlbkNSOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgICAgIGFkdmFuY2UocGVnJGNhY2hlZFBvc0RldGFpbHMsIHBlZyRjYWNoZWRQb3MsIHBvcyk7XG4gICAgICAgIHBlZyRjYWNoZWRQb3MgPSBwb3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwZWckY2FjaGVkUG9zRGV0YWlscztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckZmFpbChleHBlY3RlZCkge1xuICAgICAgaWYgKHBlZyRjdXJyUG9zIDwgcGVnJG1heEZhaWxQb3MpIHsgcmV0dXJuOyB9XG5cbiAgICAgIGlmIChwZWckY3VyclBvcyA+IHBlZyRtYXhGYWlsUG9zKSB7XG4gICAgICAgIHBlZyRtYXhGYWlsUG9zID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQgPSBbXTtcbiAgICAgIH1cblxuICAgICAgcGVnJG1heEZhaWxFeHBlY3RlZC5wdXNoKGV4cGVjdGVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckYnVpbGRFeGNlcHRpb24obWVzc2FnZSwgZXhwZWN0ZWQsIHBvcykge1xuICAgICAgZnVuY3Rpb24gY2xlYW51cEV4cGVjdGVkKGV4cGVjdGVkKSB7XG4gICAgICAgIHZhciBpID0gMTtcblxuICAgICAgICBleHBlY3RlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICBpZiAoYS5kZXNjcmlwdGlvbiA8IGIuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGEuZGVzY3JpcHRpb24gPiBiLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB3aGlsZSAoaSA8IGV4cGVjdGVkLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChleHBlY3RlZFtpIC0gMV0gPT09IGV4cGVjdGVkW2ldKSB7XG4gICAgICAgICAgICBleHBlY3RlZC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYnVpbGRNZXNzYWdlKGV4cGVjdGVkLCBmb3VuZCkge1xuICAgICAgICBmdW5jdGlvbiBzdHJpbmdFc2NhcGUocykge1xuICAgICAgICAgIGZ1bmN0aW9uIGhleChjaCkgeyByZXR1cm4gY2guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfVxuXG4gICAgICAgICAgcmV0dXJuIHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csICAgJ1xcXFxcXFxcJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cIi9nLCAgICAnXFxcXFwiJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHgwOC9nLCAnXFxcXGInKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcdC9nLCAgICdcXFxcdCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuL2csICAgJ1xcXFxuJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXGYvZywgICAnXFxcXGYnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcci9nLCAgICdcXFxccicpXG4gICAgICAgICAgICAucmVwbGFjZSgvW1xceDAwLVxceDA3XFx4MEJcXHgwRVxceDBGXS9nLCBmdW5jdGlvbihjaCkgeyByZXR1cm4gJ1xcXFx4MCcgKyBoZXgoY2gpOyB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHgxMC1cXHgxRlxceDgwLVxceEZGXS9nLCAgICBmdW5jdGlvbihjaCkgeyByZXR1cm4gJ1xcXFx4JyAgKyBoZXgoY2gpOyB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHUwMTgwLVxcdTBGRkZdL2csICAgICAgICAgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxcdTAnICsgaGV4KGNoKTsgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx1MTA4MC1cXHVGRkZGXS9nLCAgICAgICAgIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHUnICArIGhleChjaCk7IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV4cGVjdGVkRGVzY3MgPSBuZXcgQXJyYXkoZXhwZWN0ZWQubGVuZ3RoKSxcbiAgICAgICAgICAgIGV4cGVjdGVkRGVzYywgZm91bmREZXNjLCBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBleHBlY3RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGV4cGVjdGVkRGVzY3NbaV0gPSBleHBlY3RlZFtpXS5kZXNjcmlwdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdGVkRGVzYyA9IGV4cGVjdGVkLmxlbmd0aCA+IDFcbiAgICAgICAgICA/IGV4cGVjdGVkRGVzY3Muc2xpY2UoMCwgLTEpLmpvaW4oXCIsIFwiKVxuICAgICAgICAgICAgICArIFwiIG9yIFwiXG4gICAgICAgICAgICAgICsgZXhwZWN0ZWREZXNjc1tleHBlY3RlZC5sZW5ndGggLSAxXVxuICAgICAgICAgIDogZXhwZWN0ZWREZXNjc1swXTtcblxuICAgICAgICBmb3VuZERlc2MgPSBmb3VuZCA/IFwiXFxcIlwiICsgc3RyaW5nRXNjYXBlKGZvdW5kKSArIFwiXFxcIlwiIDogXCJlbmQgb2YgaW5wdXRcIjtcblxuICAgICAgICByZXR1cm4gXCJFeHBlY3RlZCBcIiArIGV4cGVjdGVkRGVzYyArIFwiIGJ1dCBcIiArIGZvdW5kRGVzYyArIFwiIGZvdW5kLlwiO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9zRGV0YWlscyA9IHBlZyRjb21wdXRlUG9zRGV0YWlscyhwb3MpLFxuICAgICAgICAgIGZvdW5kICAgICAgPSBwb3MgPCBpbnB1dC5sZW5ndGggPyBpbnB1dC5jaGFyQXQocG9zKSA6IG51bGw7XG5cbiAgICAgIGlmIChleHBlY3RlZCAhPT0gbnVsbCkge1xuICAgICAgICBjbGVhbnVwRXhwZWN0ZWQoZXhwZWN0ZWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IFN5bnRheEVycm9yKFxuICAgICAgICBtZXNzYWdlICE9PSBudWxsID8gbWVzc2FnZSA6IGJ1aWxkTWVzc2FnZShleHBlY3RlZCwgZm91bmQpLFxuICAgICAgICBleHBlY3RlZCxcbiAgICAgICAgZm91bmQsXG4gICAgICAgIHBvcyxcbiAgICAgICAgcG9zRGV0YWlscy5saW5lLFxuICAgICAgICBwb3NEZXRhaWxzLmNvbHVtblxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VmcmFnbWVudCgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDgpID09PSBwZWckYzEpIHtcbiAgICAgICAgczEgPSBwZWckYzE7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlcmFuZ2UoKTtcbiAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2VwYXRoKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgczMgPSBwZWckYzM7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM1KHMyKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VyYW5nZSgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlaW5kZXhTdGVwKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2Vsb2NhbF9wYXRoKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGM2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2Vsb2NhbF9wYXRoKCk7XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJGM2O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM3KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlbG9jYWxfcGF0aCgpO1xuICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjOChzMSwgczIsIHM0LCBzNik7XG4gICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlcGF0aCgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VpbmRleFN0ZXAoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZWxvY2FsX3BhdGgoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzkoczEsIHMyKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbG9jYWxfcGF0aCgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBbXTtcbiAgICAgIHMyID0gcGVnJHBhcnNlaW5kZXhTdGVwKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VpbmRpcmVjdGlvblN0ZXAoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZWluZGV4U3RlcCgpO1xuICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VpbmRpcmVjdGlvblN0ZXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNldGVybWludXMoKTtcbiAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckYzExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMihzMSwgczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VpbmRleFN0ZXAoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczY7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ3KSB7XG4gICAgICAgIHMxID0gcGVnJGMxMztcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE0KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlaW50ZWdlcigpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTEpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJGMxNTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNik7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRwYXJzZWlkQXNzZXJ0aW9uKCk7XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5Mykge1xuICAgICAgICAgICAgICAgIHM2ID0gcGVnJGMxNztcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM2ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTgpOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczQgPSBbczQsIHM1LCBzNl07XG4gICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGMxMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxOShzMiwgczMpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWluZGlyZWN0aW9uU3RlcCgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzIwKSB7XG4gICAgICAgIHMxID0gcGVnJGMyMDtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIxKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlaW50ZWdlcigpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTEpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJGMxNTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNik7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRwYXJzZWlkQXNzZXJ0aW9uKCk7XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5Mykge1xuICAgICAgICAgICAgICAgIHM2ID0gcGVnJGMxNztcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM2ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTgpOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczQgPSBbczQsIHM1LCBzNl07XG4gICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGMxMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMyMihzMiwgczMpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXRlcm1pbnVzKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA1OCkge1xuICAgICAgICBzMSA9IHBlZyRjMjM7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZWludGVnZXIoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkxKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRjMTU7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTYpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2V0ZXh0TG9jYXRpb25Bc3NlcnRpb24oKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkzKSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckYzE3O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOCk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNCA9IFtzNCwgczUsIHM2XTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBwZWckYzExO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzI1KHMyLCBzMyk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlaWRBc3NlcnRpb24oKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2V2YWx1ZSgpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMjYoczEpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXRleHRMb2NhdGlvbkFzc2VydGlvbigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2Vjc3YoKTtcbiAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMSA9IHBlZyRjMTE7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VwYXJhbWV0ZXIoKTtcbiAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckYzExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMyNyhzMSwgczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VwYXJhbWV0ZXIoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA1OSkge1xuICAgICAgICBzMSA9IHBlZyRjMjg7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyOSk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXZhbHVlTm9TcGFjZSgpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYxKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMzA7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzEpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2V2YWx1ZU5vU3BhY2UoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzMyKHMyLCBzNCk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWNzdigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNldmFsdWUoKTtcbiAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMSA9IHBlZyRjMTE7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgIHMyID0gcGVnJGM2O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM3KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNldmFsdWUoKTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGMxMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMzMyhzMSwgczMpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXZhbHVlTm9TcGFjZSgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBbXTtcbiAgICAgIHMyID0gcGVnJHBhcnNlZXNjYXBlZFNwZWNpYWxDaGFycygpO1xuICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlY2hhcmFjdGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2Vlc2NhcGVkU3BlY2lhbENoYXJzKCk7XG4gICAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWNoYXJhY3RlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMzNChzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNldmFsdWUoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMjtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gW107XG4gICAgICBzMiA9IHBlZyRwYXJzZWVzY2FwZWRTcGVjaWFsQ2hhcnMoKTtcbiAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZWNoYXJhY3RlcigpO1xuICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZXNwYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZWVzY2FwZWRTcGVjaWFsQ2hhcnMoKTtcbiAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlY2hhcmFjdGVyKCk7XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2VzcGFjZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMzNChzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlZXNjYXBlZFNwZWNpYWxDaGFycygpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMiA9IHBlZyRwYXJzZWNpcmN1bWZsZXgoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWNpcmN1bWZsZXgoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgfVxuICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlY2lyY3VtZmxleCgpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZXNxdWFyZUJyYWNrZXQoKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZWNpcmN1bWZsZXgoKTtcbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlcGFyZW50aGVzZXMoKTtcbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VjaXJjdW1mbGV4KCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2Vjb21tYSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgICAgICAgIHMxID0gczI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2VjaXJjdW1mbGV4KCk7XG4gICAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlc2VtaWNvbG9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgICAgICAgICAgczEgPSBzMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2VjaXJjdW1mbGV4KCk7XG4gICAgICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWVxdWFsKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBzMjtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMzNShzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbnVtYmVyKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKHBlZyRjMzYudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNyk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IFtdO1xuICAgICAgICBpZiAocGVnJGMzOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgczQgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOSk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICB3aGlsZSAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgICAgaWYgKHBlZyRjMzgudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICBzNCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDYpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjNDA7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQxKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczQgPSBbXTtcbiAgICAgICAgICBpZiAocGVnJGMzOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzNSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzkpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgICAgICBpZiAocGVnJGMzOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgIHM1ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM5KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChwZWckYzM2LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgczUgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzcpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjNDIoczEsIHMzKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VpbnRlZ2VyKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDgpIHtcbiAgICAgICAgczEgPSBwZWckYzQzO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDQpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKHBlZyRjMzYudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBbXTtcbiAgICAgICAgICBpZiAocGVnJGMzOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzNCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzkpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMucHVzaChzNCk7XG4gICAgICAgICAgICBpZiAocGVnJGMzOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM5KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzQ1KHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VzcGFjZSgpIHtcbiAgICAgIHZhciBzMCwgczE7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDMyKSB7XG4gICAgICAgIHMxID0gcGVnJGM0NjtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQ3KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjNDgoKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VjaXJjdW1mbGV4KCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTQpIHtcbiAgICAgICAgczEgPSBwZWckYzQ5O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTApOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM1MSgpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWRvdWJsZVF1b3RlKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzQpIHtcbiAgICAgICAgczEgPSBwZWckYzUyO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTMpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM1NCgpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXNxdWFyZUJyYWNrZXQoKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5MSkge1xuICAgICAgICBzMSA9IHBlZyRjMTU7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNik7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkzKSB7XG4gICAgICAgICAgczEgPSBwZWckYzE3O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOCk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjNTUoczEpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXBhcmVudGhlc2VzKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgICAgczEgPSBwZWckYzU2O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTcpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgIHMxID0gcGVnJGMzO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0KTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM1OChzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlY29tbWEoKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICBzMSA9IHBlZyRjNjtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzcpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM1OSgpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXNlbWljb2xvbigpIHtcbiAgICAgIHZhciBzMCwgczE7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU5KSB7XG4gICAgICAgIHMxID0gcGVnJGMyODtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI5KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjNjAoKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VlcXVhbCgpIHtcbiAgICAgIHZhciBzMCwgczE7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYxKSB7XG4gICAgICAgIHMxID0gcGVnJGMzMDtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMxKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjNjEoKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VjaGFyYWN0ZXIoKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKHBlZyRjNjIudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM2Myk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAocGVnJGM2NC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM2NSk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAocGVnJGMzOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzkpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NSkge1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjNjY7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM2Nyk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDk1KSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzY4O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM2OSk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ2KSB7XG4gICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNDA7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDEpOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM3MChzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgcGVnJHJlc3VsdCA9IHBlZyRzdGFydFJ1bGVGdW5jdGlvbigpO1xuXG4gICAgaWYgKHBlZyRyZXN1bHQgIT09IHBlZyRGQUlMRUQgJiYgcGVnJGN1cnJQb3MgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHBlZyRyZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwZWckcmVzdWx0ICE9PSBwZWckRkFJTEVEICYmIHBlZyRjdXJyUG9zIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgIHBlZyRmYWlsKHsgdHlwZTogXCJlbmRcIiwgZGVzY3JpcHRpb246IFwiZW5kIG9mIGlucHV0XCIgfSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IHBlZyRidWlsZEV4Y2VwdGlvbihudWxsLCBwZWckbWF4RmFpbEV4cGVjdGVkLCBwZWckbWF4RmFpbFBvcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBTeW50YXhFcnJvcjogU3ludGF4RXJyb3IsXG4gICAgcGFyc2U6ICAgICAgIHBhcnNlXG4gIH07XG59KSgpO1xuIiwidmFyIENGSUFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gKGV4cGVjdGVkQXNzZXJ0aW9uLCB0YXJnZXRFbGVtZW50QXNzZXJ0aW9uLCBtZXNzYWdlKSB7XG5cbiAgICBmdW5jdGlvbiBDRklBc3NlcnRpb25FcnJvciAoKSB7XG5cbiAgICAgICAgdGhpcy5leHBlY3RlZEFzc2VydGlvbiA9IGV4cGVjdGVkQXNzZXJ0aW9uO1xuICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnRBc3NlcnRpb24gPSB0YXJnZXRFbGVtZW50QXNzZXJ0aW9uO1xuICAgIH1cblxuICAgIENGSUFzc2VydGlvbkVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBDRklBc3NlcnRpb25FcnJvci5jb25zdHJ1Y3RvciA9IENGSUFzc2VydGlvbkVycm9yKCk7XG5cbiAgICByZXR1cm4gbmV3IENGSUFzc2VydGlvbkVycm9yKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENGSUFzc2VydGlvbkVycm9yXG4iLCIvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IFRoaXMgdHlwZSBvZiBlcnJvciBtYXkgbm90IGJlIHJlcXVpcmVkIGluIHRoZSBsb25nIHJ1bi4gVGhlIHBhcnNlciBzaG91bGQgY2F0Y2ggYW55IHN5bnRheCBlcnJvcnMsIFxuLy8gICBwcm92aWRlZCBpdCBpcyBlcnJvci1mcmVlLCBhbmQgYXMgc3VjaCwgdGhlIEFTVCBzaG91bGQgbmV2ZXIgcmVhbGx5IGhhdmUgYW55IG5vZGUgdHlwZSBlcnJvcnMsIHdoaWNoIGFyZSBlc3NlbnRpYWxseSBlcnJvcnNcbi8vICAgaW4gdGhlIHN0cnVjdHVyZSBvZiB0aGUgQVNULiBUaGlzIGVycm9yIHNob3VsZCBwcm9iYWJseSBiZSByZWZhY3RvcmVkIG91dCB3aGVuIHRoZSBncmFtbWFyIGFuZCBpbnRlcnByZXRlciBhcmUgbW9yZSBzdGFibGUuXG52YXIgTm9kZVR5cGVFcnJvciA9IGZ1bmN0aW9uIChub2RlLCBtZXNzYWdlKSB7XG5cbiAgICBmdW5jdGlvbiBOb2RlVHlwZUVycm9yICgpIHtcblxuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIH1cblxuICAgIE5vZGVUeXBlRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIE5vZGVUeXBlRXJyb3IuY29uc3RydWN0b3IgPSBOb2RlVHlwZUVycm9yO1xuXG4gICAgcmV0dXJuIG5ldyBOb2RlVHlwZUVycm9yKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGVUeXBlRXJyb3JcbiIsIi8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogTWlnaHQgbWFrZSBzZW5zZSB0byBpbmNsdWRlIHNvbWUgbW9yZSBzcGVjaWZpY3MgYWJvdXQgdGhlIG91dC1vZi1yYW5nZXluZXNzLlxudmFyIE91dE9mUmFuZ2VFcnJvciA9IGZ1bmN0aW9uICh0YXJnZXRJbmRleCwgbWF4SW5kZXgsIG1lc3NhZ2UpIHtcblxuICAgIGZ1bmN0aW9uIE91dE9mUmFuZ2VFcnJvciAoKSB7XG5cbiAgICAgICAgdGhpcy50YXJnZXRJbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgICB0aGlzLm1heEluZGV4ID0gbWF4SW5kZXg7XG4gICAgfVxuXG4gICAgT3V0T2ZSYW5nZUVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBPdXRPZlJhbmdlRXJyb3IuY29uc3RydWN0b3IgPSBPdXRPZlJhbmdlRXJyb3IoKVxuXG4gICAgcmV0dXJuIG5ldyBPdXRPZlJhbmdlRXJyb3IoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT3V0T2ZSYW5nZUVycm9yXG4iLCIvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IFRoaXMgaXMgYSBiaXQgdG9vIGdlbmVyYWwgdG8gYmUgdXNlZnVsLiBXaGVuIEkgaGF2ZSBhIGJldHRlciB1bmRlcnN0YW5kaW5nIG9mIHRoZSB0eXBlIG9mIGVycm9yc1xuLy8gICB0aGF0IGNhbiBvY2N1ciB3aXRoIHRoZSB2YXJpb3VzIHRlcm1pbnVzIGNvbmRpdGlvbnMsIGl0J2xsIG1ha2UgbW9yZSBzZW5zZSB0byByZXZpc2l0IHRoaXMuIFxudmFyIFRlcm1pbnVzRXJyb3IgPSBmdW5jdGlvbiAodGVybWludXNUeXBlLCB0ZXJtaW51c0NvbmRpdGlvbiwgbWVzc2FnZSkge1xuXG4gICAgZnVuY3Rpb24gVGVybWludXNFcnJvciAoKSB7XG5cbiAgICAgICAgdGhpcy50ZXJtaW51c1R5cGUgPSB0ZXJtaW51c1R5cGU7XG4gICAgICAgIHRoaXMudGVybWludXNDb25kaXRpb24gPSB0ZXJtaW51c0NvbmRpdGlvbjtcbiAgICB9XG5cbiAgICBUZXJtaW51c0Vycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBUZXJtaW51c0Vycm9yLmNvbnN0cnVjdG9yID0gVGVybWludXNFcnJvcigpO1xuXG4gICAgcmV0dXJuIG5ldyBUZXJtaW51c0Vycm9yKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlcm1pbnVzRXJyb3JcbiIsInZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBJbnN0cnVjdGlvbnMgPSByZXF1aXJlKCcuL2luc3RydWN0aW9ucycpXG52YXIgTm9kZVR5cGVFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JzL25vZGUtdHlwZScpXG52YXIgT3V0T2ZSYW5nZUVycm9yID0gcmVxdWlyZSgnLi9lcnJvcnMvb3V0LW9mLXJhbmdlJylcblxudmFyIEdlbmVyYXRvciA9IHtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuICAgIC8vICBcIlBVQkxJQ1wiIE1FVEhPRFMgKFRIRSBBUEkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgICBnZW5lcmF0ZUNoYXJPZmZzZXRSYW5nZUNvbXBvbmVudCA6IGZ1bmN0aW9uIChyYW5nZVN0YXJ0RWxlbWVudCwgc3RhcnRPZmZzZXQsIHJhbmdlRW5kRWxlbWVudCwgZW5kT2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgZG9jUmFuZ2U7XG4gICAgICAgIHZhciBjb21tb25BbmNlc3RvcjtcbiAgICAgICAgdmFyIHJhbmdlMU9mZnNldFN0ZXA7XG4gICAgICAgIHZhciByYW5nZTFDRkk7XG4gICAgICAgIHZhciByYW5nZTJPZmZzZXRTdGVwO1xuICAgICAgICB2YXIgcmFuZ2UyQ0ZJO1xuICAgICAgICB2YXIgY29tbW9uQ0ZJQ29tcG9uZW50O1xuXG4gICAgICAgIHRoaXMudmFsaWRhdGVTdGFydFRleHROb2RlKHJhbmdlU3RhcnRFbGVtZW50KTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVN0YXJ0VGV4dE5vZGUocmFuZ2VFbmRFbGVtZW50KTtcblxuICAgICAgICAvLyBQYXJlbnQgZWxlbWVudCBpcyB0aGUgc2FtZVxuICAgICAgICBpZiAoJChyYW5nZVN0YXJ0RWxlbWVudCkucGFyZW50KClbMF0gPT09ICQocmFuZ2VFbmRFbGVtZW50KS5wYXJlbnQoKVswXSkge1xuICAgICAgICAgICAgcmFuZ2UxT2Zmc2V0U3RlcCA9IHRoaXMuY3JlYXRlQ0ZJVGV4dE5vZGVTdGVwKCQocmFuZ2VTdGFydEVsZW1lbnQpLCBzdGFydE9mZnNldCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICAgICAgICAgIHJhbmdlMk9mZnNldFN0ZXAgPSB0aGlzLmNyZWF0ZUNGSVRleHROb2RlU3RlcCgkKHJhbmdlRW5kRWxlbWVudCksIGVuZE9mZnNldCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTsgICAgICAgICAgXG4gICAgICAgICAgICBjb21tb25DRklDb21wb25lbnQgPSB0aGlzLmNyZWF0ZUNGSUVsZW1lbnRTdGVwcygkKHJhbmdlU3RhcnRFbGVtZW50KS5wYXJlbnQoKSwgXCJodG1sXCIsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgICAgICAgICByZXR1cm4gY29tbW9uQ0ZJQ29tcG9uZW50LnN1YnN0cmluZygxLCBjb21tb25DRklDb21wb25lbnQubGVuZ3RoKSArIFwiLFwiICsgcmFuZ2UxT2Zmc2V0U3RlcCArIFwiLFwiICsgcmFuZ2UyT2Zmc2V0U3RlcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZG9jdW1lbnQgcmFuZ2UgdG8gZmluZCB0aGUgY29tbW9uIGFuY2VzdG9yXG4gICAgICAgICAgICBkb2NSYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICBkb2NSYW5nZS5zZXRTdGFydChyYW5nZVN0YXJ0RWxlbWVudCwgc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgZG9jUmFuZ2Uuc2V0RW5kKHJhbmdlRW5kRWxlbWVudCwgZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgIGNvbW1vbkFuY2VzdG9yID0gZG9jUmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIHRlcm1pbmF0aW5nIG9mZnNldCBhbmQgcmFuZ2UgMVxuICAgICAgICAgICAgcmFuZ2UxT2Zmc2V0U3RlcCA9IHRoaXMuY3JlYXRlQ0ZJVGV4dE5vZGVTdGVwKCQocmFuZ2VTdGFydEVsZW1lbnQpLCBzdGFydE9mZnNldCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICAgICAgICAgIHJhbmdlMUNGSSA9IHRoaXMuY3JlYXRlQ0ZJRWxlbWVudFN0ZXBzKCQocmFuZ2VTdGFydEVsZW1lbnQpLnBhcmVudCgpLCBjb21tb25BbmNlc3RvciwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSArIHJhbmdlMU9mZnNldFN0ZXA7XG5cbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIHRlcm1pbmF0aW5nIG9mZnNldCBhbmQgcmFuZ2UgMlxuICAgICAgICAgICAgcmFuZ2UyT2Zmc2V0U3RlcCA9IHRoaXMuY3JlYXRlQ0ZJVGV4dE5vZGVTdGVwKCQocmFuZ2VFbmRFbGVtZW50KSwgZW5kT2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgICAgICAgcmFuZ2UyQ0ZJID0gdGhpcy5jcmVhdGVDRklFbGVtZW50U3RlcHMoJChyYW5nZUVuZEVsZW1lbnQpLnBhcmVudCgpLCBjb21tb25BbmNlc3RvciwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSArIHJhbmdlMk9mZnNldFN0ZXA7XG5cbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIHNoYXJlZCBjb21wb25lbnRcbiAgICAgICAgICAgIGNvbW1vbkNGSUNvbXBvbmVudCA9IHRoaXMuY3JlYXRlQ0ZJRWxlbWVudFN0ZXBzKCQoY29tbW9uQW5jZXN0b3IpLCBcImh0bWxcIiwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSByZXN1bHRcbiAgICAgICAgICAgIHJldHVybiBjb21tb25DRklDb21wb25lbnQuc3Vic3RyaW5nKDEsIGNvbW1vbkNGSUNvbXBvbmVudC5sZW5ndGgpICsgXCIsXCIgKyByYW5nZTFDRkkgKyBcIixcIiArIHJhbmdlMkNGSTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZW5lcmF0ZUVsZW1lbnRSYW5nZUNvbXBvbmVudCA6IGZ1bmN0aW9uIChyYW5nZVN0YXJ0RWxlbWVudCwgcmFuZ2VFbmRFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgZG9jUmFuZ2U7XG4gICAgICAgIHZhciBjb21tb25BbmNlc3RvcjtcbiAgICAgICAgdmFyIHJhbmdlMUNGSTtcbiAgICAgICAgdmFyIHJhbmdlMkNGSTtcbiAgICAgICAgdmFyIGNvbW1vbkNGSUNvbXBvbmVudDtcblxuICAgICAgICB0aGlzLnZhbGlkYXRlU3RhcnRFbGVtZW50KHJhbmdlU3RhcnRFbGVtZW50KTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVN0YXJ0RWxlbWVudChyYW5nZUVuZEVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChyYW5nZVN0YXJ0RWxlbWVudCA9PT0gcmFuZ2VFbmRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdGFydCBhbmQgZW5kIGVsZW1lbnQgY2Fubm90IGJlIHRoZSBzYW1lIGZvciBhIENGSSByYW5nZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIGRvY3VtZW50IHJhbmdlIHRvIGZpbmQgdGhlIGNvbW1vbiBhbmNlc3RvclxuICAgICAgICBkb2NSYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIGRvY1JhbmdlLnNldFN0YXJ0KHJhbmdlU3RhcnRFbGVtZW50LCAwKTtcbiAgICAgICAgZG9jUmFuZ2Uuc2V0RW5kKHJhbmdlRW5kRWxlbWVudCwgcmFuZ2VFbmRFbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgICAgY29tbW9uQW5jZXN0b3IgPSBkb2NSYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAgICAgICAvLyBHZW5lcmF0ZSByYW5nZSAxXG4gICAgICAgIHJhbmdlMUNGSSA9IHRoaXMuY3JlYXRlQ0ZJRWxlbWVudFN0ZXBzKCQocmFuZ2VTdGFydEVsZW1lbnQpLCBjb21tb25BbmNlc3RvciwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBHZW5lcmF0ZSByYW5nZSAyXG4gICAgICAgIHJhbmdlMkNGSSA9IHRoaXMuY3JlYXRlQ0ZJRWxlbWVudFN0ZXBzKCQocmFuZ2VFbmRFbGVtZW50KSwgY29tbW9uQW5jZXN0b3IsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgc2hhcmVkIGNvbXBvbmVudFxuICAgICAgICBjb21tb25DRklDb21wb25lbnQgPSB0aGlzLmNyZWF0ZUNGSUVsZW1lbnRTdGVwcygkKGNvbW1vbkFuY2VzdG9yKSwgXCJodG1sXCIsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cbiAgICAgICAgLy8gUmV0dXJuIHRoZSByZXN1bHRcbiAgICAgICAgcmV0dXJuIGNvbW1vbkNGSUNvbXBvbmVudC5zdWJzdHJpbmcoMSwgY29tbW9uQ0ZJQ29tcG9uZW50Lmxlbmd0aCkgKyBcIixcIiArIHJhbmdlMUNGSSArIFwiLFwiICsgcmFuZ2UyQ0ZJO1xuICAgIH0sXG5cbiAgICAvLyBEZXNjcmlwdGlvbjogR2VuZXJhdGVzIGEgY2hhcmFjdGVyIG9mZnNldCBDRkkgXG4gICAgLy8gQXJndW1lbnRzOiBUaGUgdGV4dCBub2RlIHRoYXQgY29udGFpbnMgdGhlIG9mZnNldCByZWZlcmVuY2VkIGJ5IHRoZSBjZmksIHRoZSBvZmZzZXQgdmFsdWUsIHRoZSBuYW1lIG9mIHRoZSBcbiAgICAvLyAgIGNvbnRlbnQgZG9jdW1lbnQgdGhhdCBjb250YWlucyB0aGUgdGV4dCBub2RlLCB0aGUgcGFja2FnZSBkb2N1bWVudCBmb3IgdGhpcyBFUFVCLlxuICAgIGdlbmVyYXRlQ2hhcmFjdGVyT2Zmc2V0Q0ZJQ29tcG9uZW50IDogZnVuY3Rpb24gKHN0YXJ0VGV4dE5vZGUsIGNoYXJhY3Rlck9mZnNldCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgdmFyIHRleHROb2RlU3RlcDtcbiAgICAgICAgdmFyIGNvbnRlbnREb2NDRkk7XG4gICAgICAgIHZhciAkaXRlbVJlZlN0YXJ0Tm9kZTtcbiAgICAgICAgdmFyIHBhY2thZ2VEb2NDRkk7XG5cbiAgICAgICAgdGhpcy52YWxpZGF0ZVN0YXJ0VGV4dE5vZGUoc3RhcnRUZXh0Tm9kZSwgY2hhcmFjdGVyT2Zmc2V0KTtcblxuICAgICAgICAvLyBDcmVhdGUgdGhlIHRleHQgbm9kZSBzdGVwXG4gICAgICAgIHRleHROb2RlU3RlcCA9IHRoaXMuY3JlYXRlQ0ZJVGV4dE5vZGVTdGVwKCQoc3RhcnRUZXh0Tm9kZSksIGNoYXJhY3Rlck9mZnNldCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBDYWxsIHRoZSByZWN1cnNpdmUgbWV0aG9kIHRvIGNyZWF0ZSBhbGwgdGhlIHN0ZXBzIHVwIHRvIHRoZSBoZWFkIGVsZW1lbnQgb2YgdGhlIGNvbnRlbnQgZG9jdW1lbnQgKHRoZSBcImh0bWxcIiBlbGVtZW50KVxuICAgICAgICBjb250ZW50RG9jQ0ZJID0gdGhpcy5jcmVhdGVDRklFbGVtZW50U3RlcHMoJChzdGFydFRleHROb2RlKS5wYXJlbnQoKSwgXCJodG1sXCIsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkgKyB0ZXh0Tm9kZVN0ZXA7XG4gICAgICAgIHJldHVybiBjb250ZW50RG9jQ0ZJLnN1YnN0cmluZygxLCBjb250ZW50RG9jQ0ZJLmxlbmd0aCk7XG4gICAgfSxcblxuICAgIGdlbmVyYXRlRWxlbWVudENGSUNvbXBvbmVudCA6IGZ1bmN0aW9uIChzdGFydEVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciBjb250ZW50RG9jQ0ZJO1xuICAgICAgICB2YXIgJGl0ZW1SZWZTdGFydE5vZGU7XG4gICAgICAgIHZhciBwYWNrYWdlRG9jQ0ZJO1xuXG4gICAgICAgIHRoaXMudmFsaWRhdGVTdGFydEVsZW1lbnQoc3RhcnRFbGVtZW50KTtcblxuICAgICAgICAvLyBDYWxsIHRoZSByZWN1cnNpdmUgbWV0aG9kIHRvIGNyZWF0ZSBhbGwgdGhlIHN0ZXBzIHVwIHRvIHRoZSBoZWFkIGVsZW1lbnQgb2YgdGhlIGNvbnRlbnQgZG9jdW1lbnQgKHRoZSBcImh0bWxcIiBlbGVtZW50KVxuICAgICAgICBjb250ZW50RG9jQ0ZJID0gdGhpcy5jcmVhdGVDRklFbGVtZW50U3RlcHMoJChzdGFydEVsZW1lbnQpLCBcImh0bWxcIiwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlICEgXG4gICAgICAgIHJldHVybiBjb250ZW50RG9jQ0ZJLnN1YnN0cmluZygxLCBjb250ZW50RG9jQ0ZJLmxlbmd0aCk7XG4gICAgfSxcblxuICAgIGdlbmVyYXRlUGFja2FnZURvY3VtZW50Q0ZJQ29tcG9uZW50IDogZnVuY3Rpb24gKGNvbnRlbnREb2N1bWVudE5hbWUsIHBhY2thZ2VEb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgdGhpcy52YWxpZGF0ZUNvbnRlbnREb2N1bWVudE5hbWUoY29udGVudERvY3VtZW50TmFtZSk7XG4gICAgICAgIHRoaXMudmFsaWRhdGVQYWNrYWdlRG9jdW1lbnQocGFja2FnZURvY3VtZW50LCBjb250ZW50RG9jdW1lbnROYW1lKTtcblxuICAgICAgICAvLyBHZXQgdGhlIHN0YXJ0IG5vZGUgKGl0ZW1yZWYgZWxlbWVudCkgdGhhdCByZWZlcmVuY2VzIHRoZSBjb250ZW50IGRvY3VtZW50XG4gICAgICAgICRpdGVtUmVmU3RhcnROb2RlID0gJChcIml0ZW1yZWZbaWRyZWY9J1wiICsgY29udGVudERvY3VtZW50TmFtZSArIFwiJ11cIiwgJChwYWNrYWdlRG9jdW1lbnQpKTtcblxuICAgICAgICAvLyBDcmVhdGUgdGhlIHN0ZXBzIHVwIHRvIHRoZSB0b3AgZWxlbWVudCBvZiB0aGUgcGFja2FnZSBkb2N1bWVudCAodGhlIFwicGFja2FnZVwiIGVsZW1lbnQpXG4gICAgICAgIHBhY2thZ2VEb2NDRklDb21wb25lbnQgPSB0aGlzLmNyZWF0ZUNGSUVsZW1lbnRTdGVwcygkaXRlbVJlZlN0YXJ0Tm9kZSwgXCJwYWNrYWdlXCIsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cbiAgICAgICAgLy8gQXBwZW5kIGFuICE7IHRoaXMgYXNzdW1lcyB0aGF0IGEgQ0ZJIGNvbnRlbnQgZG9jdW1lbnQgQ0ZJIGNvbXBvbmVudCB3aWxsIGJlIGFwcGVuZGVkIGF0IHNvbWUgcG9pbnRcbiAgICAgICAgcmV0dXJuIHBhY2thZ2VEb2NDRklDb21wb25lbnQgKyBcIiFcIjtcbiAgICB9LFxuXG4gICAgZ2VuZXJhdGVQYWNrYWdlRG9jdW1lbnRDRklDb21wb25lbnRXaXRoU3BpbmVJbmRleCA6IGZ1bmN0aW9uIChzcGluZUluZGV4LCBwYWNrYWdlRG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIC8vIEdldCB0aGUgc3RhcnQgbm9kZSAoaXRlbXJlZiBlbGVtZW50KSB0aGF0IHJlZmVyZW5jZXMgdGhlIGNvbnRlbnQgZG9jdW1lbnRcbiAgICAgICAgJGl0ZW1SZWZTdGFydE5vZGUgPSAkKCQoXCJzcGluZVwiLCBwYWNrYWdlRG9jdW1lbnQpLmNoaWxkcmVuKClbc3BpbmVJbmRleF0pO1xuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgc3RlcHMgdXAgdG8gdGhlIHRvcCBlbGVtZW50IG9mIHRoZSBwYWNrYWdlIGRvY3VtZW50ICh0aGUgXCJwYWNrYWdlXCIgZWxlbWVudClcbiAgICAgICAgcGFja2FnZURvY0NGSUNvbXBvbmVudCA9IHRoaXMuY3JlYXRlQ0ZJRWxlbWVudFN0ZXBzKCRpdGVtUmVmU3RhcnROb2RlLCBcInBhY2thZ2VcIiwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBBcHBlbmQgYW4gITsgdGhpcyBhc3N1bWVzIHRoYXQgYSBDRkkgY29udGVudCBkb2N1bWVudCBDRkkgY29tcG9uZW50IHdpbGwgYmUgYXBwZW5kZWQgYXQgc29tZSBwb2ludFxuICAgICAgICByZXR1cm4gcGFja2FnZURvY0NGSUNvbXBvbmVudCArIFwiIVwiO1xuICAgIH0sXG5cbiAgICBnZW5lcmF0ZUNvbXBsZXRlQ0ZJIDogZnVuY3Rpb24gKHBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudCwgY29udGVudERvY3VtZW50Q0ZJQ29tcG9uZW50KSB7XG5cbiAgICAgICAgcmV0dXJuIFwiZXB1YmNmaShcIiArIHBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudCArIGNvbnRlbnREb2N1bWVudENGSUNvbXBvbmVudCArIFwiKVwiOyAgXG4gICAgfSxcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuICAgIC8vICBcIlBSSVZBVEVcIiBIRUxQRVJTICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgICB2YWxpZGF0ZVN0YXJ0VGV4dE5vZGUgOiBmdW5jdGlvbiAoc3RhcnRUZXh0Tm9kZSwgY2hhcmFjdGVyT2Zmc2V0KSB7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSB0ZXh0IG5vZGUgdG8gc3RhcnQgZnJvbSBJUyBhIHRleHQgbm9kZVxuICAgICAgICBpZiAoIXN0YXJ0VGV4dE5vZGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb2RlVHlwZUVycm9yKHN0YXJ0VGV4dE5vZGUsIFwiQ2Fubm90IGdlbmVyYXRlIGEgY2hhcmFjdGVyIG9mZnNldCBmcm9tIGEgc3RhcnRpbmcgcG9pbnQgdGhhdCBpcyBub3QgYSB0ZXh0IG5vZGVcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnRUZXh0Tm9kZS5ub2RlVHlwZSAhPSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTm9kZVR5cGVFcnJvcihzdGFydFRleHROb2RlLCBcIkNhbm5vdCBnZW5lcmF0ZSBhIGNoYXJhY3RlciBvZmZzZXQgZnJvbSBhIHN0YXJ0aW5nIHBvaW50IHRoYXQgaXMgbm90IGEgdGV4dCBub2RlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgY2hhcmFjdGVyIG9mZnNldCBpcyB3aXRoaW4gYSB2YWxpZCByYW5nZSBmb3IgdGhlIHRleHQgbm9kZSBzdXBwbGllZFxuICAgICAgICBpZiAoY2hhcmFjdGVyT2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE91dE9mUmFuZ2VFcnJvcihjaGFyYWN0ZXJPZmZzZXQsIDAsIFwiQ2hhcmFjdGVyIG9mZnNldCBjYW5ub3QgYmUgbGVzcyB0aGFuIDBcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyT2Zmc2V0ID4gc3RhcnRUZXh0Tm9kZS5ub2RlVmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3V0T2ZSYW5nZUVycm9yKGNoYXJhY3Rlck9mZnNldCwgc3RhcnRUZXh0Tm9kZS5ub2RlVmFsdWUubGVuZ3RoIC0gMSwgXCJjaGFyYWN0ZXIgb2Zmc2V0IGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gdGhlIGxlbmd0aCBvZiB0aGUgdGV4dCBub2RlXCIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHZhbGlkYXRlU3RhcnRFbGVtZW50IDogZnVuY3Rpb24gKHN0YXJ0RWxlbWVudCkge1xuXG4gICAgICAgIGlmICghc3RhcnRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTm9kZVR5cGVFcnJvcihzdGFydEVsZW1lbnQsIFwiQ0ZJIHRhcmdldCBlbGVtZW50IGlzIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKHN0YXJ0RWxlbWVudC5ub2RlVHlwZSAmJiBzdGFydEVsZW1lbnQubm9kZVR5cGUgPT09IDEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTm9kZVR5cGVFcnJvcihzdGFydEVsZW1lbnQsIFwiQ0ZJIHRhcmdldCBlbGVtZW50IGlzIG5vdCBhbiBIVE1MIGVsZW1lbnRcIik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdmFsaWRhdGVDb250ZW50RG9jdW1lbnROYW1lIDogZnVuY3Rpb24gKGNvbnRlbnREb2N1bWVudE5hbWUpIHtcblxuICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBpZHJlZiBmb3IgdGhlIGNvbnRlbnQgZG9jdW1lbnQgaGFzIGJlZW4gcHJvdmlkZWRcbiAgICAgICAgaWYgKCFjb250ZW50RG9jdW1lbnROYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgaWRyZWYgZm9yIHRoZSBjb250ZW50IGRvY3VtZW50LCBhcyBmb3VuZCBpbiB0aGUgc3BpbmUsIG11c3QgYmUgc3VwcGxpZWRcIik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdmFsaWRhdGVQYWNrYWdlRG9jdW1lbnQgOiBmdW5jdGlvbiAocGFja2FnZURvY3VtZW50LCBjb250ZW50RG9jdW1lbnROYW1lKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBwYWNrYWdlIGRvY3VtZW50IGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW4gaXRlbXJlZiBlbGVtZW50IGZvciB0aGUgc3VwcGxpZWQgaWRyZWZcbiAgICAgICAgaWYgKCFwYWNrYWdlRG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgcGFja2FnZSBkb2N1bWVudCBtdXN0IGJlIHN1cHBsaWVkIHRvIGdlbmVyYXRlIGEgQ0ZJXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCQoJChcIml0ZW1yZWZbaWRyZWY9J1wiICsgY29udGVudERvY3VtZW50TmFtZSArIFwiJ11cIiwgcGFja2FnZURvY3VtZW50KVswXSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgaWRyZWYgb2YgdGhlIGNvbnRlbnQgZG9jdW1lbnQgY291bGQgbm90IGJlIGZvdW5kIGluIHRoZSBzcGluZVwiKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBEZXNjcmlwdGlvbjogQ3JlYXRlcyBhIENGSSB0ZXJtaW5hdGluZyBzdGVwIHRvIGEgdGV4dCBub2RlLCB3aXRoIGEgY2hhcmFjdGVyIG9mZnNldFxuICAgIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogU29tZSBvZiB0aGUgcGFydHMgb2YgdGhpcyBtZXRob2QgY291bGQgYmUgcmVmYWN0b3JlZCBpbnRvIHRoZWlyIG93biBtZXRob2RzXG4gICAgY3JlYXRlQ0ZJVGV4dE5vZGVTdGVwIDogZnVuY3Rpb24gKCRzdGFydFRleHROb2RlLCBjaGFyYWN0ZXJPZmZzZXQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciAkcGFyZW50Tm9kZTtcbiAgICAgICAgdmFyICRjb250ZW50c0V4Y2x1ZGluZ01hcmtlcnM7XG4gICAgICAgIHZhciBDRklJbmRleDtcbiAgICAgICAgdmFyIGluZGV4T2ZUZXh0Tm9kZTtcbiAgICAgICAgdmFyIHByZUFzc2VydGlvbjtcbiAgICAgICAgdmFyIHByZUFzc2VydGlvblN0YXJ0SW5kZXg7XG4gICAgICAgIHZhciB0ZXh0TGVuZ3RoO1xuICAgICAgICB2YXIgcG9zdEFzc2VydGlvbjtcbiAgICAgICAgdmFyIHBvc3RBc3NlcnRpb25FbmRJbmRleDtcblxuICAgICAgICAvLyBGaW5kIHRleHQgbm9kZSBwb3NpdGlvbiBpbiB0aGUgc2V0IG9mIGNoaWxkIGVsZW1lbnRzLCBpZ25vcmluZyBhbnkgYmxhY2tsaXN0ZWQgZWxlbWVudHMgXG4gICAgICAgICRwYXJlbnROb2RlID0gJHN0YXJ0VGV4dE5vZGUucGFyZW50KCk7XG4gICAgICAgICRjb250ZW50c0V4Y2x1ZGluZ01hcmtlcnMgPSBJbnN0cnVjdGlvbnMuYXBwbHlCbGFja2xpc3QoJHBhcmVudE5vZGUuY29udGVudHMoKSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBGaW5kIHRoZSB0ZXh0IG5vZGUgaW5kZXggaW4gdGhlIHBhcmVudCBsaXN0LCBpbmZlcnJpbmcgbm9kZXMgdGhhdCB3ZXJlIG9yaWdpbmFsbHkgYSBzaW5nbGUgdGV4dCBub2RlXG4gICAgICAgIHZhciBwcmV2Tm9kZVdhc1RleHROb2RlO1xuICAgICAgICB2YXIgaW5kZXhPZkZpcnN0SW5TZXF1ZW5jZTtcbiAgICAgICAgdmFyIHRleHROb2RlT25seUluZGV4ID0gMDtcbiAgICAgICAgdmFyIGNoYXJhY3Rlck9mZnNldFNpbmNlVW5zcGxpdCA9IDA7XG4gICAgICAgIHZhciBmaW5hbENoYXJhY3Rlck9mZnNldEluU2VxdWVuY2UgPSAwO1xuICAgICAgICAkLmVhY2goJGNvbnRlbnRzRXhjbHVkaW5nTWFya2VycywgXG4gICAgICAgICAgICBmdW5jdGlvbiAoaW5kZXgpIHtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSB0ZXh0IG5vZGUsIGNoZWNrIGlmIGl0IG1hdGNoZXMgYW5kIHJldHVybiB0aGUgY3VycmVudCBpbmRleFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzID09PSAkc3RhcnRUZXh0Tm9kZVswXSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgaW5kZXggYXMgdGhlIGZpcnN0IGluIHRoZSBhZGphY2VudCBzZXF1ZW5jZSBvZiB0ZXh0IG5vZGVzLCBvciBhcyB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgbm9kZSBpZiB0aGlzIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBub2RlIGlzIGEgc3RhbmRhcmQgb25lIHNhbmR3aWNoZWQgYmV0d2VlbiB0d28gZWxlbWVudCBub2Rlcy4gXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldk5vZGVXYXNUZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4T2ZUZXh0Tm9kZSA9IGluZGV4T2ZGaXJzdEluU2VxdWVuY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxDaGFyYWN0ZXJPZmZzZXRJblNlcXVlbmNlID0gY2hhcmFjdGVyT2Zmc2V0U2luY2VVbnNwbGl0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhPZlRleHROb2RlID0gdGV4dE5vZGVPbmx5SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJyZWFrIG91dCBvZiAuZWFjaCBsb29wXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGlzIGluZGV4IGFzIHRoZSBmaXJzdCBpbiBzZXF1ZW5jZSBvZiBhZGphY2VudCB0ZXh0IG5vZGVzLCBpZiBpdCBpcyBub3QgYWxyZWFkeSBzZXQgYnkgdGhpcyBwb2ludFxuICAgICAgICAgICAgICAgICAgICBwcmV2Tm9kZVdhc1RleHROb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyT2Zmc2V0U2luY2VVbnNwbGl0ID0gY2hhcmFjdGVyT2Zmc2V0U2luY2VVbnNwbGl0ICsgdGhpcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4T2ZGaXJzdEluU2VxdWVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhPZkZpcnN0SW5TZXF1ZW5jZSA9IHRleHROb2RlT25seUluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGVPbmx5SW5kZXggPSB0ZXh0Tm9kZU9ubHlJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIG5vdCBhIHRleHQgbm9kZVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcmV2Tm9kZVdhc1RleHROb2RlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4T2ZGaXJzdEluU2VxdWVuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3Rlck9mZnNldFNpbmNlVW5zcGxpdCAgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBDb252ZXJ0IHRoZSB0ZXh0IG5vZGUgaW5kZXggdG8gYSBDRkkgb2RkLWludGVnZXIgcmVwcmVzZW50YXRpb25cbiAgICAgICAgQ0ZJSW5kZXggPSAoaW5kZXhPZlRleHROb2RlICogMikgKyAxO1xuXG4gICAgICAgIC8vIFRPRE86IHRleHQgYXNzZXJ0aW9ucyBhcmUgbm90IGluIHRoZSBncmFtbWFyIHlldCwgSSB0aGluaywgb3IgdGhleSdyZSBqdXN0IGNhdXNpbmcgcHJvYmxlbXMuIFRoaXMgaGFzXG4gICAgICAgIC8vICAgYmVlbiB0ZW1wb3JhcmlseSByZW1vdmVkLiBcblxuICAgICAgICAvLyBBZGQgcHJlLSBhbmQgcG9zdC0gdGV4dCBhc3NlcnRpb25zXG4gICAgICAgIC8vIHByZUFzc2VydGlvblN0YXJ0SW5kZXggPSAoY2hhcmFjdGVyT2Zmc2V0IC0gMyA+PSAwKSA/IGNoYXJhY3Rlck9mZnNldCAtIDMgOiAwO1xuICAgICAgICAvLyBwcmVBc3NlcnRpb24gPSAkc3RhcnRUZXh0Tm9kZVswXS5ub2RlVmFsdWUuc3Vic3RyaW5nKHByZUFzc2VydGlvblN0YXJ0SW5kZXgsIGNoYXJhY3Rlck9mZnNldCk7XG5cbiAgICAgICAgLy8gdGV4dExlbmd0aCA9ICRzdGFydFRleHROb2RlWzBdLm5vZGVWYWx1ZS5sZW5ndGg7XG4gICAgICAgIC8vIHBvc3RBc3NlcnRpb25FbmRJbmRleCA9IChjaGFyYWN0ZXJPZmZzZXQgKyAzIDw9IHRleHRMZW5ndGgpID8gY2hhcmFjdGVyT2Zmc2V0ICsgMyA6IHRleHRMZW5ndGg7XG4gICAgICAgIC8vIHBvc3RBc3NlcnRpb24gPSAkc3RhcnRUZXh0Tm9kZVswXS5ub2RlVmFsdWUuc3Vic3RyaW5nKGNoYXJhY3Rlck9mZnNldCwgcG9zdEFzc2VydGlvbkVuZEluZGV4KTtcblxuICAgICAgICAvLyBHb3R0YSBpbmZlciB0aGUgY29ycmVjdCBjaGFyYWN0ZXIgb2Zmc2V0LCBhcyB3ZWxsXG5cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBjb25zdHJ1Y3RlZCBDRkkgdGV4dCBub2RlIHN0ZXBcbiAgICAgICAgcmV0dXJuIFwiL1wiICsgQ0ZJSW5kZXggKyBcIjpcIiArIChmaW5hbENoYXJhY3Rlck9mZnNldEluU2VxdWVuY2UgKyBjaGFyYWN0ZXJPZmZzZXQpO1xuICAgICAgICAgLy8gKyBcIltcIiArIHByZUFzc2VydGlvbiArIFwiLFwiICsgcG9zdEFzc2VydGlvbiArIFwiXVwiO1xuICAgIH0sXG5cbiAgICBjcmVhdGVDRklFbGVtZW50U3RlcHMgOiBmdW5jdGlvbiAoJGN1cnJOb2RlLCB0b3BMZXZlbEVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciAkYmxhY2tsaXN0RXhjbHVkZWQ7XG4gICAgICAgIHZhciAkcGFyZW50Tm9kZTtcbiAgICAgICAgdmFyIGN1cnJOb2RlUG9zaXRpb247XG4gICAgICAgIHZhciBDRklQb3NpdGlvbjtcbiAgICAgICAgdmFyIGlkQXNzZXJ0aW9uO1xuICAgICAgICB2YXIgZWxlbWVudFN0ZXA7IFxuXG4gICAgICAgIC8vIEZpbmQgcG9zaXRpb24gb2YgY3VycmVudCBub2RlIGluIHBhcmVudCBsaXN0XG4gICAgICAgICRibGFja2xpc3RFeGNsdWRlZCA9IEluc3RydWN0aW9ucy5hcHBseUJsYWNrbGlzdCgkY3Vyck5vZGUucGFyZW50KCkuY2hpbGRyZW4oKSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICAgICAgJC5lYWNoKCRibGFja2xpc3RFeGNsdWRlZCwgXG4gICAgICAgICAgICBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PT0gJGN1cnJOb2RlWzBdKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY3Vyck5vZGVQb3NpdGlvbiA9IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEJyZWFrIGxvb3BcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ29udmVydCBwb3NpdGlvbiB0byB0aGUgQ0ZJIGV2ZW4taW50ZWdlciByZXByZXNlbnRhdGlvblxuICAgICAgICBDRklQb3NpdGlvbiA9IChjdXJyTm9kZVBvc2l0aW9uICsgMSkgKiAyO1xuXG4gICAgICAgIC8vIENyZWF0ZSBDRkkgc3RlcCB3aXRoIGlkIGFzc2VydGlvbiwgaWYgdGhlIGVsZW1lbnQgaGFzIGFuIGlkXG4gICAgICAgIGlmICgkY3Vyck5vZGUuYXR0cihcImlkXCIpKSB7XG4gICAgICAgICAgICBlbGVtZW50U3RlcCA9IFwiL1wiICsgQ0ZJUG9zaXRpb24gKyBcIltcIiArICRjdXJyTm9kZS5hdHRyKFwiaWRcIikgKyBcIl1cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnRTdGVwID0gXCIvXCIgKyBDRklQb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgcGFyZW50IGlzIGFuIGh0bWwgZWxlbWVudCByZXR1cm4gdGhlIChsYXN0KSBzdGVwIGZvciB0aGlzIGNvbnRlbnQgZG9jdW1lbnQsIG90aGVyd2lzZSwgY29udGludWUuXG4gICAgICAgIC8vICAgQWxzbyBuZWVkIHRvIGNoZWNrIGlmIHRoZSBjdXJyZW50IG5vZGUgaXMgdGhlIHRvcC1sZXZlbCBlbGVtZW50LiBUaGlzIGNhbiBvY2N1ciBpZiB0aGUgc3RhcnQgbm9kZSBpcyBhbHNvIHRoZVxuICAgICAgICAvLyAgIHRvcCBsZXZlbCBlbGVtZW50LlxuICAgICAgICAkcGFyZW50Tm9kZSA9ICRjdXJyTm9kZS5wYXJlbnQoKTtcbiAgICAgICAgaWYgKCRwYXJlbnROb2RlLmlzKHRvcExldmVsRWxlbWVudCkgfHwgJGN1cnJOb2RlLmlzKHRvcExldmVsRWxlbWVudCkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSWYgdGhlIHRvcCBsZXZlbCBub2RlIGlzIGEgdHlwZSBmcm9tIHdoaWNoIGFuIGluZGlyZWN0aW9uIHN0ZXAsIGFkZCBhbiBpbmRpcmVjdGlvbiBzdGVwIGNoYXJhY3RlciAoISlcbiAgICAgICAgICAgIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogSXQgaXMgcG9zc2libGUgdGhhdCB0aGlzIHNob3VsZCBiZSBjaGFuZ2VkIHRvOiBpZiAodG9wTGV2ZWxFbGVtZW50ID0gJ3BhY2thZ2UnKSBkb1xuICAgICAgICAgICAgLy8gICBub3QgcmV0dXJuIGFuIGluZGlyZWN0aW9uIGNoYXJhY3Rlci4gRXZlcnkgb3RoZXIgdHlwZSBvZiB0b3AtbGV2ZWwgZWxlbWVudCBtYXkgcmVxdWlyZSBhbiBpbmRpcmVjdGlvblxuICAgICAgICAgICAgLy8gICBzdGVwIHRvIG5hdmlnYXRlIHRvLCB0aHVzIHJlcXVpcmluZyB0aGF0ICEgaXMgYWx3YXlzIHByZXBlbmRlZC4gXG4gICAgICAgICAgICBpZiAodG9wTGV2ZWxFbGVtZW50ID09PSAnaHRtbCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIhXCIgKyBlbGVtZW50U3RlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50U3RlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNGSUVsZW1lbnRTdGVwcygkcGFyZW50Tm9kZSwgdG9wTGV2ZWxFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpICsgZWxlbWVudFN0ZXA7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdlbmVyYXRvclxuIiwidmFyIGdlbmVyYXRvciAgICAgPSByZXF1aXJlKCcuL2dlbmVyYXRvcicpO1xudmFyIGluc3RydWN0aW9ucyAgPSByZXF1aXJlKCcuL2luc3RydWN0aW9ucycpO1xudmFyIGludGVycHJldGVyICAgPSByZXF1aXJlKCcuL2ludGVycHJldGVyJyk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ2hhcmFjdGVyT2Zmc2V0Q0ZJQ29tcG9uZW50KHN0YXJ0VGV4dE5vZGUsIGNoYXJhY3Rlck9mZnNldCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG4gIHJldHVybiBnZW5lcmF0b3IuZ2VuZXJhdGVDaGFyYWN0ZXJPZmZzZXRDRklDb21wb25lbnQoc3RhcnRUZXh0Tm9kZSwgY2hhcmFjdGVyT2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNoYXJPZmZzZXRSYW5nZUNvbXBvbmVudChyYW5nZVN0YXJ0RWxlbWVudCwgc3RhcnRPZmZzZXQsIHJhbmdlRW5kRWxlbWVudCwgZW5kT2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRvci5nZW5lcmF0ZUNoYXJPZmZzZXRSYW5nZUNvbXBvbmVudChyYW5nZVN0YXJ0RWxlbWVudCwgc3RhcnRPZmZzZXQsIHJhbmdlRW5kRWxlbWVudCwgZW5kT2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbXBsZXRlQ0ZJKHBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudCwgY29udGVudERvY3VtZW50Q0ZJQ29tcG9uZW50KSB7XG4gIHJldHVybiBnZW5lcmF0b3IuZ2VuZXJhdGVDb21wbGV0ZUNGSShwYWNrYWdlRG9jdW1lbnRDRklDb21wb25lbnQsIGNvbnRlbnREb2N1bWVudENGSUNvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRWxlbWVudENGSUNvbXBvbmVudChzdGFydEVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuICByZXR1cm4gZ2VuZXJhdG9yLmdlbmVyYXRlRWxlbWVudENGSUNvbXBvbmVudChzdGFydEVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRWxlbWVudFJhbmdlQ29tcG9uZW50KHJhbmdlU3RhcnRFbGVtZW50LCByYW5nZUVuZEVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuICByZXR1cm4gZ2VuZXJhdG9yLmdlbmVyYXRlRWxlbWVudFJhbmdlQ29tcG9uZW50KHJhbmdlU3RhcnRFbGVtZW50LCByYW5nZUVuZEVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGFja2FnZURvY3VtZW50Q0ZJQ29tcG9uZW50KGNvbnRlbnREb2N1bWVudE5hbWUsIHBhY2thZ2VEb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG4gIHJldHVybiBnZW5lcmF0b3IuZ2VuZXJhdGVQYWNrYWdlRG9jdW1lbnRDRklDb21wb25lbnQoY29udGVudERvY3VtZW50TmFtZSwgcGFja2FnZURvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudFdpdGhTcGluZUluZGV4KHNwaW5lSW5kZXgsIHBhY2thZ2VEb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG4gIHJldHVybiBnZW5lcmF0b3IuZ2VuZXJhdGVQYWNrYWdlRG9jdW1lbnRDRklDb21wb25lbnRXaXRoU3BpbmVJbmRleChzcGluZUluZGV4LCBwYWNrYWdlRG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG59XG5cbmZ1bmN0aW9uIGdldENvbnRlbnREb2NIcmVmKENGSSwgcGFja2FnZURvY3VtZW50KSB7XG4gIHJldHVybiBpbnRlcnByZXRlci5nZXRDb250ZW50RG9jSHJlZihDRkksIHBhY2thZ2VEb2N1bWVudCk7XG59XG5cbmZ1bmN0aW9uIGdldFJhbmdlVGFyZ2V0RWxlbWVudHMocmFuZ2VDRkksIGNvbnRlbnREb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG4gIHJldHVybiBpbnRlcnByZXRlci5nZXRSYW5nZVRhcmdldEVsZW1lbnRzKHJhbmdlQ0ZJLCBjb250ZW50RG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldEVsZW1lbnQoQ0ZJLCBjb250ZW50RG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuICByZXR1cm4gaW50ZXJwcmV0ZXIuZ2V0VGFyZ2V0RWxlbWVudChDRkksIGNvbnRlbnREb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0RWxlbWVudFdpdGhQYXJ0aWFsQ0ZJKGNvbnRlbnREb2N1bWVudENGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcbiAgcmV0dXJuIGludGVycHJldGVyLmdldFRhcmdldEVsZW1lbnRXaXRoUGFydGlhbENGSShjb250ZW50RG9jdW1lbnRDRkksIGNvbnRlbnREb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJKGNvbnRlbnREb2N1bWVudENGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcbiAgcmV0dXJuIGludGVycHJldGVyLmdldFRleHRUZXJtaW51c0luZm9XaXRoUGFydGlhbENGSShjb250ZW50RG9jdW1lbnRDRkksIGNvbnRlbnREb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbn1cblxuZnVuY3Rpb24gaW5qZWN0RWxlbWVudChDRkksIGNvbnRlbnREb2N1bWVudCwgZWxlbWVudFRvSW5qZWN0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcbiAgcmV0dXJuIGludGVycHJldGVyLmluamVjdEVsZW1lbnQoQ0ZJLCBjb250ZW50RG9jdW1lbnQsIGVsZW1lbnRUb0luamVjdCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbn1cblxuZnVuY3Rpb24gaW5qZWN0RWxlbWVudEF0T2Zmc2V0KCR0ZXh0Tm9kZUxpc3QsIHRleHRPZmZzZXQsIGVsZW1lbnRUb0luamVjdCkge1xuICByZXR1cm4gaW5zdHJ1Y3Rpb25zLmluamVjdENGSU1hcmtlckludG9UZXh0KCR0ZXh0Tm9kZUxpc3QsIHRleHRPZmZzZXQsIGVsZW1lbnRUb0luamVjdCk7XG59XG5cbmZ1bmN0aW9uIGluamVjdFJhbmdlRWxlbWVudHMocmFuZ2VDRkksIGNvbnRlbnREb2N1bWVudCwgc3RhcnRFbGVtZW50VG9JbmplY3QsIGVuZEVsZW1lbnRUb0luamVjdCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG4gIHJldHVybiBpbnRlcnByZXRlci5pbmplY3RSYW5nZUVsZW1lbnRzKHJhbmdlQ0ZJLCBjb250ZW50RG9jdW1lbnQsIHN0YXJ0RWxlbWVudFRvSW5qZWN0LCBlbmRFbGVtZW50VG9JbmplY3QsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZW5lcmF0ZUNoYXJhY3Rlck9mZnNldENGSUNvbXBvbmVudDogZ2VuZXJhdGVDaGFyYWN0ZXJPZmZzZXRDRklDb21wb25lbnQsXG4gIGdlbmVyYXRlQ2hhck9mZnNldFJhbmdlQ29tcG9uZW50OiBnZW5lcmF0ZUNoYXJPZmZzZXRSYW5nZUNvbXBvbmVudCxcbiAgZ2VuZXJhdGVDb21wbGV0ZUNGSTogZ2VuZXJhdGVDb21wbGV0ZUNGSSxcbiAgZ2VuZXJhdGVFbGVtZW50Q0ZJQ29tcG9uZW50OiBnZW5lcmF0ZUVsZW1lbnRDRklDb21wb25lbnQsXG4gIGdlbmVyYXRlRWxlbWVudFJhbmdlQ29tcG9uZW50OiBnZW5lcmF0ZUVsZW1lbnRSYW5nZUNvbXBvbmVudCxcbiAgZ2VuZXJhdGVQYWNrYWdlRG9jdW1lbnRDRklDb21wb25lbnQ6IGdlbmVyYXRlUGFja2FnZURvY3VtZW50Q0ZJQ29tcG9uZW50LFxuICBnZW5lcmF0ZVBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudFdpdGhTcGluZUluZGV4OiBnZW5lcmF0ZVBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudFdpdGhTcGluZUluZGV4LFxuICBnZXRDb250ZW50RG9jSHJlZjogZ2V0Q29udGVudERvY0hyZWYsXG4gIGdldFJhbmdlVGFyZ2V0RWxlbWVudHM6IGdldFJhbmdlVGFyZ2V0RWxlbWVudHMsXG4gIGdldFRhcmdldEVsZW1lbnQ6IGdldFRhcmdldEVsZW1lbnQsXG4gIGdldFRhcmdldEVsZW1lbnRXaXRoUGFydGlhbENGSTogZ2V0VGFyZ2V0RWxlbWVudFdpdGhQYXJ0aWFsQ0ZJLFxuICBnZXRUZXh0VGVybWludXNJbmZvV2l0aFBhcnRpYWxDRkk6IGdldFRleHRUZXJtaW51c0luZm9XaXRoUGFydGlhbENGSSxcbiAgaW5qZWN0RWxlbWVudDogaW5qZWN0RWxlbWVudCxcbiAgaW5qZWN0RWxlbWVudEF0T2Zmc2V0OiBpbmplY3RFbGVtZW50QXRPZmZzZXQsXG4gIGluamVjdFJhbmdlRWxlbWVudHM6IGluamVjdFJhbmdlRWxlbWVudHNcbn1cbiIsIi8vIERlc2NyaXB0aW9uOiBUaGlzIG1vZGVsIGNvbnRhaW5zIHRoZSBpbXBsZW1lbnRhdGlvbiBmb3IgXCJpbnN0cnVjdGlvbnNcIiBpbmNsdWRlZCBpbiB0aGUgRVBVQiBDRkkgZG9tYWluIHNwZWNpZmljIGxhbmd1YWdlIChEU0wpLiBcbi8vICAgTGV4aW5nIGFuZCBwYXJzaW5nIGEgQ0ZJIHByb2R1Y2VzIGEgc2V0IG9mIGV4ZWN1dGFibGUgaW5zdHJ1Y3Rpb25zIGZvciBwcm9jZXNzaW5nIGEgQ0ZJIChyZXByZXNlbnRlZCBpbiB0aGUgQVNUKS4gXG4vLyAgIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGEgc2V0IG9mIGZ1bmN0aW9ucyB0aGF0IGltcGxlbWVudCBlYWNoIG9mIHRoZSBleGVjdXRhYmxlIGluc3RydWN0aW9ucyBpbiB0aGUgQVNULiBcblxudmFyIE5vZGVUeXBlRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9ycy9ub2RlLXR5cGUnKVxudmFyIE91dE9mUmFuZ2VFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JzL291dC1vZi1yYW5nZScpXG52YXIgVGVybWludXNFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JzL3Rlcm1pbnVzJylcblxudmFyIEluc3RydWN0aW9ucyA9IHtcblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblx0Ly8gIFwiUFVCTElDXCIgTUVUSE9EUyAoVEhFIEFQSSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblx0Ly8gRGVzY3JpcHRpb246IEZvbGxvd3MgYSBzdGVwXG5cdC8vIFJhdGlvbmFsZTogVGhlIHVzZSBvZiBjaGlsZHJlbigpIGlzIGltcG9ydGFudCBoZXJlLCBhcyB0aGlzIGpRdWVyeSBtZXRob2QgcmV0dXJucyBhIHRyZWUgb2YgeG1sIG5vZGVzLCBFWENMVURJTkdcblx0Ly8gICBDREFUQSBhbmQgdGV4dCBub2Rlcy4gV2hlbiB3ZSBpbmRleCBpbnRvIHRoZSBzZXQgb2YgY2hpbGQgZWxlbWVudHMsIHdlIGFyZSBhc3N1bWluZyB0aGF0IHRleHQgbm9kZXMgaGF2ZSBiZWVuIFxuXHQvLyAgIGV4Y2x1ZGVkLlxuXHQvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBcImZvbGxvd0luZGV4U3RlcFwiXG5cdGdldE5leHROb2RlIDogZnVuY3Rpb24gKENGSVN0ZXBWYWx1ZSwgJGN1cnJOb2RlLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuXHRcdC8vIEZpbmQgdGhlIGpxdWVyeSBpbmRleCBmb3IgdGhlIGN1cnJlbnQgbm9kZVxuXHRcdHZhciAkdGFyZ2V0Tm9kZTtcblx0XHRpZiAoQ0ZJU3RlcFZhbHVlICUgMiA9PSAwKSB7XG5cblx0XHRcdCR0YXJnZXROb2RlID0gdGhpcy5lbGVtZW50Tm9kZVN0ZXAoQ0ZJU3RlcFZhbHVlLCAkY3Vyck5vZGUsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXG5cdFx0XHQkdGFyZ2V0Tm9kZSA9IHRoaXMuaW5mZXJUYXJnZXRUZXh0Tm9kZShDRklTdGVwVmFsdWUsICRjdXJyTm9kZSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gJHRhcmdldE5vZGU7XG5cdH0sXG5cblx0Ly8gRGVzY3JpcHRpb246IFRoaXMgaW5zdHJ1Y3Rpb24gZXhlY3V0ZXMgYW4gaW5kaXJlY3Rpb24gc3RlcCwgd2hlcmUgYSByZXNvdXJjZSBpcyByZXRyaWV2ZWQgdXNpbmcgYSBcblx0Ly8gICBsaW5rIGNvbnRhaW5lZCBvbiBhIGF0dHJpYnV0ZSBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQuIFRoZSBhdHRyaWJ1dGUgdGhhdCBjb250YWlucyB0aGUgbGluayBkaWZmZXJzXG5cdC8vICAgZGVwZW5kaW5nIG9uIHRoZSB0YXJnZXQuIFxuXHQvLyBOb3RlOiBJZnJhbWUgaW5kaXJlY3Rpb24gd2lsbCAoc2hvdWxkKSBmYWlsIGlmIHRoZSBpZnJhbWUgaXMgbm90IGZyb20gdGhlIHNhbWUgZG9tYWluIGFzIGl0cyBjb250YWluaW5nIHNjcmlwdCBkdWUgdG8gXG5cdC8vICAgdGhlIGNyb3NzIG9yaWdpbiBzZWN1cml0eSBwb2xpY3lcblx0Zm9sbG93SW5kaXJlY3Rpb25TdGVwIDogZnVuY3Rpb24gKENGSVN0ZXBWYWx1ZSwgJGN1cnJOb2RlLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuXHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHR2YXIgJGNvbnRlbnREb2N1bWVudDsgXG5cdFx0dmFyICRibGFja2xpc3RFeGNsdWRlZDtcblx0XHR2YXIgJHN0YXJ0RWxlbWVudDtcblx0XHR2YXIgJHRhcmdldE5vZGU7XG5cblx0XHQvLyBUT0RPOiBUaGlzIGNoZWNrIG11c3QgYmUgZXhwYW5kZWQgdG8gYWxsIHRoZSBkaWZmZXJlbnQgdHlwZXMgb2YgaW5kaXJlY3Rpb24gc3RlcFxuXHRcdC8vIE9ubHkgZXhwZWN0cyBpZnJhbWVzLCBhdCB0aGUgbW9tZW50XG5cdFx0aWYgKCRjdXJyTm9kZSA9PT0gdW5kZWZpbmVkIHx8ICEkY3Vyck5vZGUuaXMoXCJpZnJhbWVcIikpIHtcblxuXHRcdFx0dGhyb3cgTm9kZVR5cGVFcnJvcigkY3Vyck5vZGUsIFwiZXhwZWN0ZWQgYW4gaWZyYW1lIGVsZW1lbnRcIik7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgbm9kZSB0eXBlOyBvbmx5IGlmcmFtZSBpbmRpcmVjdGlvbiBpcyBoYW5kbGVkLCBhdCB0aGUgbW9tZW50XG5cdFx0aWYgKCRjdXJyTm9kZS5pcyhcImlmcmFtZVwiKSkge1xuXG5cdFx0XHQvLyBHZXQgY29udGVudFxuXHRcdFx0JGNvbnRlbnREb2N1bWVudCA9ICRjdXJyTm9kZS5jb250ZW50cygpO1xuXG5cdFx0XHQvLyBHbyB0byB0aGUgZmlyc3QgWEhUTUwgZWxlbWVudCwgd2hpY2ggd2lsbCBiZSB0aGUgZmlyc3QgY2hpbGQgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3Rcblx0XHRcdCRibGFja2xpc3RFeGNsdWRlZCA9IHRoaXMuYXBwbHlCbGFja2xpc3QoJGNvbnRlbnREb2N1bWVudC5jaGlsZHJlbigpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXHRcdFx0JHN0YXJ0RWxlbWVudCA9ICQoJGJsYWNrbGlzdEV4Y2x1ZGVkWzBdKTtcblxuXHRcdFx0Ly8gRm9sbG93IGFuIGluZGV4IHN0ZXBcblx0XHRcdCR0YXJnZXROb2RlID0gdGhpcy5nZXROZXh0Tm9kZShDRklTdGVwVmFsdWUsICRzdGFydEVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cblx0XHRcdC8vIFJldHVybiB0aGF0IHNoaXQhXG5cdFx0XHRyZXR1cm4gJHRhcmdldE5vZGU7IFxuXHRcdH1cblxuXHRcdC8vIFRPRE86IE90aGVyIHR5cGVzIG9mIGluZGlyZWN0aW9uXG5cdFx0Ly8gVE9ETzogJHRhcmdldE5vZGUuaXMoXCJlbWJlZFwiKSkgOiBzcmNcblx0XHQvLyBUT0RPOiAoJHRhcmdldE5vZGUuaXMoXCJvYmplY3RcIikpIDogZGF0YVxuXHRcdC8vIFRPRE86ICgkdGFyZ2V0Tm9kZS5pcyhcImltYWdlXCIpIHx8ICR0YXJnZXROb2RlLmlzKFwieGxpbms6aHJlZlwiKSkgOiB4bGluazpocmVmXG5cdH0sXG5cblx0Ly8gRGVzY3JpcHRpb246IEluamVjdHMgYW4gZWxlbWVudCBhdCB0aGUgc3BlY2lmaWVkIHRleHQgbm9kZVxuXHQvLyBBcmd1bWVudHM6IGEgY2ZpIHRleHQgdGVybWluYXRpb24gc3RyaW5nLCBhIGpxdWVyeSBvYmplY3QgdG8gdGhlIGN1cnJlbnQgbm9kZVxuXHQvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IFJlbmFtZSB0aGlzIHRvIGluZGljYXRlIHRoYXQgaXQgaW5qZWN0cyBpbnRvIGEgdGV4dCB0ZXJtaW51c1xuXHR0ZXh0VGVybWluYXRpb24gOiBmdW5jdGlvbiAoJGN1cnJOb2RlLCB0ZXh0T2Zmc2V0LCBlbGVtZW50VG9JbmplY3QpIHtcblxuXHRcdHZhciAkaW5qZWN0ZWRFbGVtZW50O1xuXHRcdC8vIEdldCB0aGUgZmlyc3Qgbm9kZSwgdGhpcyBzaG91bGQgYmUgYSB0ZXh0IG5vZGVcblx0XHRpZiAoJGN1cnJOb2RlID09PSB1bmRlZmluZWQpIHtcblxuXHRcdFx0dGhyb3cgTm9kZVR5cGVFcnJvcigkY3Vyck5vZGUsIFwiZXhwZWN0ZWQgYSB0ZXJtaW5hdGluZyBub2RlLCBvciBub2RlIGxpc3RcIik7XG5cdFx0fSBcblx0XHRlbHNlIGlmICgkY3Vyck5vZGUubGVuZ3RoID09PSAwKSB7XG5cblx0XHRcdHRocm93IFRlcm1pbnVzRXJyb3IoXCJUZXh0XCIsIFwiVGV4dCBvZmZzZXQ6XCIgKyB0ZXh0T2Zmc2V0LCBcIm5vIG5vZGVzIGZvdW5kIGZvciB0ZXJtaW5hdGlvbiBjb25kaXRpb25cIik7XG5cdFx0fVxuXG5cdFx0JGluamVjdGVkRWxlbWVudCA9IHRoaXMuaW5qZWN0Q0ZJTWFya2VySW50b1RleHQoJGN1cnJOb2RlLCB0ZXh0T2Zmc2V0LCBlbGVtZW50VG9JbmplY3QpO1xuXHRcdHJldHVybiAkaW5qZWN0ZWRFbGVtZW50O1xuXHR9LFxuXG5cdC8vIERlc2NyaXB0aW9uOiBDaGVja3MgdGhhdCB0aGUgaWQgYXNzZXJ0aW9uIGZvciB0aGUgbm9kZSB0YXJnZXQgbWF0Y2hlcyB0aGF0IG9uIFxuXHQvLyAgIHRoZSBmb3VuZCBub2RlLiBcblx0dGFyZ2V0SWRNYXRjaGVzSWRBc3NlcnRpb24gOiBmdW5jdGlvbiAoJGZvdW5kTm9kZSwgaWRBc3NlcnRpb24pIHtcblxuXHRcdGlmICgkZm91bmROb2RlLmF0dHIoXCJpZFwiKSA9PT0gaWRBc3NlcnRpb24pIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXHQvLyAgXCJQUklWQVRFXCIgSEVMUEVSUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuXHQvLyBEZXNjcmlwdGlvbjogU3RlcCByZWZlcmVuY2UgZm9yIHhtbCBlbGVtZW50IG5vZGUuIEV4cGVjdGVkIHRoYXQgQ0ZJU3RlcFZhbHVlIGlzIGFuIGV2ZW4gaW50ZWdlclxuXHRlbGVtZW50Tm9kZVN0ZXAgOiBmdW5jdGlvbiAoQ0ZJU3RlcFZhbHVlLCAkY3Vyck5vZGUsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG5cdFx0dmFyICR0YXJnZXROb2RlO1xuXHRcdHZhciAkYmxhY2tsaXN0RXhjbHVkZWQ7XG5cdFx0dmFyIG51bUVsZW1lbnRzO1xuXHRcdHZhciBqcXVlcnlUYXJnZXROb2RlSW5kZXggPSAoQ0ZJU3RlcFZhbHVlIC8gMikgLSAxO1xuXG5cdFx0JGJsYWNrbGlzdEV4Y2x1ZGVkID0gdGhpcy5hcHBseUJsYWNrbGlzdCgkY3Vyck5vZGUuY2hpbGRyZW4oKSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblx0XHRudW1FbGVtZW50cyA9ICRibGFja2xpc3RFeGNsdWRlZC5sZW5ndGg7XG5cblx0XHRpZiAodGhpcy5pbmRleE91dE9mUmFuZ2UoanF1ZXJ5VGFyZ2V0Tm9kZUluZGV4LCBudW1FbGVtZW50cykpIHtcblxuXHRcdFx0dGhyb3cgT3V0T2ZSYW5nZUVycm9yKGpxdWVyeVRhcmdldE5vZGVJbmRleCwgbnVtRWxlbWVudHMgLSAxLCBcIlwiKTtcblx0XHR9XG5cblx0ICAgICR0YXJnZXROb2RlID0gJCgkYmxhY2tsaXN0RXhjbHVkZWRbanF1ZXJ5VGFyZ2V0Tm9kZUluZGV4XSk7XG5cdFx0cmV0dXJuICR0YXJnZXROb2RlO1xuXHR9LFxuXG5cdHJldHJpZXZlSXRlbVJlZkhyZWYgOiBmdW5jdGlvbiAoJGl0ZW1SZWZFbGVtZW50LCAkcGFja2FnZURvY3VtZW50KSB7XG5cblx0XHRyZXR1cm4gJChcIiNcIiArICRpdGVtUmVmRWxlbWVudC5hdHRyKFwiaWRyZWZcIiksICRwYWNrYWdlRG9jdW1lbnQpLmF0dHIoXCJocmVmXCIpO1xuXHR9LFxuXG5cdGluZGV4T3V0T2ZSYW5nZSA6IGZ1bmN0aW9uICh0YXJnZXRJbmRleCwgbnVtQ2hpbGRFbGVtZW50cykge1xuXG5cdFx0cmV0dXJuICh0YXJnZXRJbmRleCA+IG51bUNoaWxkRWxlbWVudHMgLSAxKSA/IHRydWUgOiBmYWxzZTtcblx0fSxcblxuXHQvLyBSYXRpb25hbGU6IEluIG9yZGVyIHRvIGluamVjdCBhbiBlbGVtZW50IGludG8gYSBzcGVjaWZpYyBwb3NpdGlvbiwgYWNjZXNzIHRvIHRoZSBwYXJlbnQgb2JqZWN0IFxuXHQvLyAgIGlzIHJlcXVpcmVkLiBUaGlzIGlzIG9idGFpbmVkIHdpdGggdGhlIGpxdWVyeSBwYXJlbnQoKSBtZXRob2QuIEFuIGFsdGVybmF0aXZlIHdvdWxkIGJlIHRvIFxuXHQvLyAgIHBhc3MgaW4gdGhlIHBhcmVudCB3aXRoIGEgZmlsdGVyZWQgbGlzdCBjb250YWluaW5nIG9ubHkgY2hpbGRyZW4gdGhhdCBhcmUgcGFydCBvZiB0aGUgdGFyZ2V0IHRleHQgbm9kZS5cbiAgICBpbmplY3RDRklNYXJrZXJJbnRvVGV4dCA6IGZ1bmN0aW9uICgkdGV4dE5vZGVMaXN0LCB0ZXh0T2Zmc2V0LCBlbGVtZW50VG9JbmplY3QpIHtcblxuICAgICAgICB2YXIgbm9kZU51bTtcbiAgICAgICAgdmFyIGN1cnJOb2RlTGVuZ3RoO1xuICAgICAgICB2YXIgY3VyclRleHRQb3NpdGlvbiA9IDA7XG4gICAgICAgIHZhciBub2RlT2Zmc2V0O1xuICAgICAgICB2YXIgb3JpZ2luYWxUZXh0O1xuICAgICAgICB2YXIgJGluamVjdGVkTm9kZTtcbiAgICAgICAgdmFyICRuZXdUZXh0Tm9kZTtcbiAgICAgICAgLy8gVGhlIGl0ZXJhdGlvbiBjb3VudGVyIG1heSBiZSBpbmNvcnJlY3QgaGVyZSAoc2hvdWxkIGJlICR0ZXh0Tm9kZUxpc3QubGVuZ3RoIC0gMSA/PylcbiAgICAgICAgZm9yIChub2RlTnVtID0gMDsgbm9kZU51bSA8PSAkdGV4dE5vZGVMaXN0Lmxlbmd0aDsgbm9kZU51bSsrKSB7XG5cbiAgICAgICAgICAgIGlmICgkdGV4dE5vZGVMaXN0W25vZGVOdW1dLm5vZGVUeXBlID09PSAzKSB7XG5cbiAgICAgICAgICAgICAgICBjdXJyTm9kZU1heEluZGV4ID0gJHRleHROb2RlTGlzdFtub2RlTnVtXS5ub2RlVmFsdWUubGVuZ3RoICArIGN1cnJUZXh0UG9zaXRpb247XG4gICAgICAgICAgICAgICAgbm9kZU9mZnNldCA9IHRleHRPZmZzZXQgLSBjdXJyVGV4dFBvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJOb2RlTWF4SW5kZXggPiB0ZXh0T2Zmc2V0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIGdvaW5nIHRvIGJlIHNwbGl0IGFuZCB0aGUgY29tcG9uZW50cyByZS1pbnNlcnRlZFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFRleHQgPSAkdGV4dE5vZGVMaXN0W25vZGVOdW1dLm5vZGVWYWx1ZTtcdFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEJlZm9yZSBwYXJ0XG4gICAgICAgICAgICAgICAgICAgICR0ZXh0Tm9kZUxpc3Rbbm9kZU51bV0ubm9kZVZhbHVlID0gb3JpZ2luYWxUZXh0LnNsaWNlKDAsIG5vZGVPZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluamVjdGVkIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgJGluamVjdGVkTm9kZSA9ICQoZWxlbWVudFRvSW5qZWN0KS5pbnNlcnRBZnRlcigkdGV4dE5vZGVMaXN0LmVxKG5vZGVOdW0pKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBZnRlciBwYXJ0XG4gICAgICAgICAgICAgICAgICAgICRuZXdUZXh0Tm9kZSA9ICQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUob3JpZ2luYWxUZXh0LnNsaWNlKG5vZGVPZmZzZXQsIG9yaWdpbmFsVGV4dC5sZW5ndGgpKSk7XG4gICAgICAgICAgICAgICAgICAgICQoJG5ld1RleHROb2RlKS5pbnNlcnRBZnRlcigkaW5qZWN0ZWROb2RlKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGluamVjdGVkTm9kZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJOb2RlTWF4SW5kZXggPT0gdGV4dE9mZnNldCl7XG4gICAgICAgICAgICAgICAgICAgICRpbmplY3RlZE5vZGUgPSAkKGVsZW1lbnRUb0luamVjdCkuaW5zZXJ0QWZ0ZXIoJHRleHROb2RlTGlzdC5lcShub2RlTnVtKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkaW5qZWN0ZWROb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjdXJyVGV4dFBvc2l0aW9uID0gY3Vyck5vZGVNYXhJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBUZXJtaW51c0Vycm9yKFwiVGV4dFwiLCBcIlRleHQgb2Zmc2V0OlwiICsgdGV4dE9mZnNldCwgXCJUaGUgb2Zmc2V0IGV4Y2VlZGVkIHRoZSBsZW5ndGggb2YgdGhlIHRleHRcIik7XG4gICAgfSxcblxuXHQvLyBSYXRpb25hbGU6IEluIG9yZGVyIHRvIGluamVjdCBhbiBlbGVtZW50IGludG8gYSBzcGVjaWZpYyBwb3NpdGlvbiwgYWNjZXNzIHRvIHRoZSBwYXJlbnQgb2JqZWN0IFxuXHQvLyAgIGlzIHJlcXVpcmVkLiBUaGlzIGlzIG9idGFpbmVkIHdpdGggdGhlIGpxdWVyeSBwYXJlbnQoKSBtZXRob2QuIEFuIGFsdGVybmF0aXZlIHdvdWxkIGJlIHRvIFxuXHQvLyAgIHBhc3MgaW4gdGhlIHBhcmVudCB3aXRoIGEgZmlsdGVyZWQgbGlzdCBjb250YWluaW5nIG9ubHkgY2hpbGRyZW4gdGhhdCBhcmUgcGFydCBvZiB0aGUgdGFyZ2V0IHRleHQgbm9kZS5cblxuXHQvLyBEZXNjcmlwdGlvbjogVGhpcyBtZXRob2QgZmluZHMgYSB0YXJnZXQgdGV4dCBub2RlIGFuZCB0aGVuIGluamVjdHMgYW4gZWxlbWVudCBpbnRvIHRoZSBhcHByb3ByaWF0ZSBub2RlXG5cdC8vIFJhdGlvbmFsZTogVGhlIHBvc3NpYmlsaXR5IHRoYXQgY2ZpIG1hcmtlciBlbGVtZW50cyBoYXZlIGJlZW4gaW5qZWN0ZWQgaW50byBhIHRleHQgbm9kZSBhdCBzb21lIHBvaW50IHByZXZpb3VzIHRvIFxuXHQvLyAgIHRoaXMgbWV0aG9kIGJlaW5nIGNhbGxlZCAoYW5kIHRodXMgc3BsaXR0aW5nIHRoZSBvcmlnaW5hbCB0ZXh0IG5vZGUgaW50byB0d28gc2VwYXJhdGUgdGV4dCBub2RlcykgbmVjZXNzaXRhdGVzIHRoYXRcblx0Ly8gICB0aGUgc2V0IG9mIG5vZGVzIHRoYXQgY29tcHJvbWlzZWQgdGhlIG9yaWdpbmFsIHRhcmdldCB0ZXh0IG5vZGUgYXJlIGluZmVycmVkIGFuZCByZXR1cm5lZC5cblx0Ly8gTm90ZXM6IFBhc3NlZCBhIGN1cnJlbnQgbm9kZS4gVGhpcyBub2RlIHNob3VsZCBoYXZlIGEgc2V0IG9mIGVsZW1lbnRzIHVuZGVyIGl0LiBUaGlzIHdpbGwgaW5jbHVkZSBhdCBsZWFzdCBvbmUgdGV4dCBub2RlLCBcblx0Ly8gICBlbGVtZW50IG5vZGVzIChtYXliZSksIG9yIHBvc3NpYmx5IGEgbWl4LiBcblx0Ly8gUkVGQUNUT1JJTkcgQ0FORElEQVRFOiBUaGlzIG1ldGhvZCBpcyBwcmV0dHkgbG9uZyAoYW5kIGNvbmZ1c2luZykuIFdvcnRoIGludmVzdGlnYXRpbmcgdG8gc2VlIGlmIGl0IGNhbiBiZSByZWZhY3RvcmVkIGludG8gc29tZXRoaW5nIGNsZWFyZXIuXG5cdGluZmVyVGFyZ2V0VGV4dE5vZGUgOiBmdW5jdGlvbiAoQ0ZJU3RlcFZhbHVlLCAkY3Vyck5vZGUsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXHRcdFxuXHRcdHZhciAkZWxlbWVudHNXaXRob3V0TWFya2Vycztcblx0XHR2YXIgY3VyckxvZ2ljYWxUZXh0Tm9kZUluZGV4O1xuXHRcdHZhciB0YXJnZXRMb2dpY2FsVGV4dE5vZGVJbmRleDtcblx0XHR2YXIgbm9kZU51bTtcblx0XHR2YXIgJHRhcmdldFRleHROb2RlTGlzdDtcblx0XHR2YXIgcHJldk5vZGVXYXNUZXh0Tm9kZTtcblxuXHRcdC8vIFJlbW92ZSBhbnkgY2ZpIG1hcmtlciBlbGVtZW50cyBmcm9tIHRoZSBzZXQgb2YgZWxlbWVudHMuIFxuXHRcdC8vIFJhdGlvbmFsZTogQSBmaWx0ZXJpbmcgZnVuY3Rpb24gaXMgdXNlZCwgYXMgc2ltcGx5IHVzaW5nIGEgY2xhc3Mgc2VsZWN0b3Igd2l0aCBqcXVlcnkgYXBwZWFycyB0byBcblx0XHQvLyAgIHJlc3VsdCBpbiBiZWhhdmlvdXIgd2hlcmUgdGV4dCBub2RlcyBhcmUgYWxzbyBmaWx0ZXJlZCBvdXQsIGFsb25nIHdpdGggdGhlIGNsYXNzIGVsZW1lbnQgYmVpbmcgZmlsdGVyZWQuXG5cdFx0JGVsZW1lbnRzV2l0aG91dE1hcmtlcnMgPSB0aGlzLmFwcGx5QmxhY2tsaXN0KCRjdXJyTm9kZS5jb250ZW50cygpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG5cdFx0Ly8gQ29udmVydCBDRklTdGVwVmFsdWUgdG8gbG9naWNhbCBpbmRleDsgYXNzdW1lcyBvZGQgaW50ZWdlciBmb3IgdGhlIHN0ZXAgdmFsdWVcblx0XHR0YXJnZXRMb2dpY2FsVGV4dE5vZGVJbmRleCA9ICgocGFyc2VJbnQoQ0ZJU3RlcFZhbHVlKSArIDEpIC8gMikgLSAxO1xuXG5cdFx0Ly8gU2V0IHRleHQgbm9kZSBwb3NpdGlvbiBjb3VudGVyXG5cdFx0Y3VyckxvZ2ljYWxUZXh0Tm9kZUluZGV4ID0gMDtcblx0XHRwcmV2Tm9kZVdhc1RleHROb2RlID0gZmFsc2U7XG5cdFx0JHRhcmdldFRleHROb2RlTGlzdCA9ICRlbGVtZW50c1dpdGhvdXRNYXJrZXJzLmZpbHRlcihcblx0XHRcdGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpZiAoY3VyckxvZ2ljYWxUZXh0Tm9kZUluZGV4ID09PSB0YXJnZXRMb2dpY2FsVGV4dE5vZGVJbmRleCkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgaXQncyBhIHRleHQgbm9kZVxuXHRcdFx0XHRcdGlmICh0aGlzLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuXHRcdFx0XHRcdFx0cHJldk5vZGVXYXNUZXh0Tm9kZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gUmF0aW9uYWxlOiBUaGUgbG9naWNhbCB0ZXh0IG5vZGUgcG9zaXRpb24gaXMgb25seSBpbmNyZW1lbnRlZCBvbmNlIGEgZ3JvdXAgb2YgdGV4dCBub2RlcyAoYSBzaW5nbGUgbG9naWNhbFxuXHRcdFx0XHRcdC8vICAgdGV4dCBub2RlKSBoYXMgYmVlbiBwYXNzZWQgYnkgdGhlIGxvb3AuIFxuXHRcdFx0XHRcdGVsc2UgaWYgKHByZXZOb2RlV2FzVGV4dE5vZGUgJiYgKHRoaXMubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSkge1xuXHRcdFx0XHRcdFx0Y3VyckxvZ2ljYWxUZXh0Tm9kZUluZGV4Kys7XG5cdFx0XHRcdFx0XHRwcmV2Tm9kZVdhc1RleHROb2RlID0gZmFsc2U7XHRcdFx0XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIERvbid0IHJldHVybiBhbnkgZWxlbWVudHNcblx0XHRcdFx0ZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAodGhpcy5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcblx0XHRcdFx0XHRcdHByZXZOb2RlV2FzVGV4dE5vZGUgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmIChwcmV2Tm9kZVdhc1RleHROb2RlICYmICh0aGlzLm5vZGVUeXBlICE9PSBOb2RlLlRFWFRfTk9ERSkgJiYgKHRoaXMgIT09ICRlbGVtZW50c1dpdGhvdXRNYXJrZXJzLmxhc3RDaGlsZCkpIHtcblx0XHRcdFx0XHRcdGN1cnJMb2dpY2FsVGV4dE5vZGVJbmRleCsrO1xuXHRcdFx0XHRcdFx0cHJldk5vZGVXYXNUZXh0Tm9kZSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHQvLyBUaGUgZmlsdGVyaW5nIGFib3ZlIHNob3VsZCBoYXZlIGNvdW50ZWQgdGhlIG51bWJlciBvZiBcImxvZ2ljYWxcIiB0ZXh0IG5vZGVzOyB0aGlzIGNhbiBiZSB1c2VkIHRvIFxuXHRcdC8vIGRldGVjdCBvdXQgb2YgcmFuZ2UgZXJyb3JzXG5cdFx0aWYgKCR0YXJnZXRUZXh0Tm9kZUxpc3QubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aHJvdyBPdXRPZlJhbmdlRXJyb3IobG9naWNhbFRhcmdldFRleHROb2RlSW5kZXgsIGN1cnJMb2dpY2FsVGV4dE5vZGVJbmRleCwgXCJJbmRleCBvdXQgb2YgcmFuZ2VcIik7XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIHRoZSB0ZXh0IG5vZGUgbGlzdFxuXHRcdHJldHVybiAkdGFyZ2V0VGV4dE5vZGVMaXN0O1xuXHR9LFxuXG5cdGFwcGx5QmxhY2tsaXN0IDogZnVuY3Rpb24gKCRlbGVtZW50cywgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgdmFyICRmaWx0ZXJlZEVsZW1lbnRzO1xuXG4gICAgICAgICRmaWx0ZXJlZEVsZW1lbnRzID0gJGVsZW1lbnRzLmZpbHRlcihcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIHZhciAkY3VyckVsZW1lbnQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBpbmNsdWRlSW5MaXN0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChjbGFzc0JsYWNrbGlzdCkge1xuXG4gICAgICAgICAgICAgICAgXHQvLyBGaWx0ZXIgZWFjaCBlbGVtZW50IHdpdGggdGhlIGNsYXNzIHR5cGVcbiAgICAgICAgICAgICAgICBcdCQuZWFjaChjbGFzc0JsYWNrbGlzdCwgZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCRjdXJyRWxlbWVudC5oYXNDbGFzcyh2YWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBcdGluY2x1ZGVJbkxpc3QgPSBmYWxzZTtcblxuXHQgICAgICAgICAgICAgICAgICAgIFx0Ly8gQnJlYWsgdGhpcyBsb29wXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXHR9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudEJsYWNrbGlzdCkge1xuICAgICAgICAgICAgICAgIFx0XG5cdCAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCB0eXBlIG9mIGVsZW1lbnRcblx0ICAgICAgICAgICAgICAgICQuZWFjaChlbGVtZW50QmxhY2tsaXN0LCBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoJGN1cnJFbGVtZW50LmlzKHZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIFx0aW5jbHVkZUluTGlzdCA9IGZhbHNlO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgXHQvLyBCcmVhayB0aGlzIGxvb3Bcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGlkQmxhY2tsaXN0KSB7XG4gICAgICAgICAgICAgICAgXHRcblx0ICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIHR5cGUgb2YgZWxlbWVudFxuXHQgICAgICAgICAgICAgICAgJC5lYWNoKGlkQmxhY2tsaXN0LCBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoJGN1cnJFbGVtZW50LmF0dHIoXCJpZFwiKSA9PT0gdmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBcdGluY2x1ZGVJbkxpc3QgPSBmYWxzZTtcblxuXHQgICAgICAgICAgICAgICAgICAgIFx0Ly8gQnJlYWsgdGhpcyBsb29wXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XHRcdFx0fVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVJbkxpc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuICRmaWx0ZXJlZEVsZW1lbnRzO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW5zdHJ1Y3Rpb25zXG4iLCIvLyBEZXNjcmlwdGlvbjogVGhpcyBpcyBhbiBpbnRlcnByZXRlciB0aGF0IGludGVwcmV0cyBhbiBBYnN0cmFjdCBTeW50YXggVHJlZSAoQVNUKSBmb3IgYSBDRkkuIFRoZSByZXN1bHQgb2YgZXhlY3V0aW5nIHRoZSBpbnRlcnByZXRlclxuLy8gICBpcyB0byBpbmplY3QgYW4gZWxlbWVudCwgb3Igc2V0IG9mIGVsZW1lbnRzLCBpbnRvIGFuIEVQVUIgY29udGVudCBkb2N1bWVudCAod2hpY2ggaXMganVzdCBhbiBYSFRNTCBkb2N1bWVudCkuIFRoZXNlIGVsZW1lbnQocykgd2lsbFxuLy8gICByZXByZXNlbnQgdGhlIHBvc2l0aW9uIG9yIGFyZWEgaW4gdGhlIEVQVUIgcmVmZXJlbmNlZCBieSBhIENGSS5cbi8vIFJhdGlvbmFsZTogVGhlIEFTVCBpcyBhIGNsZWFuIGFuZCByZWFkYWJsZSBleHByZXNzaW9uIG9mIHRoZSBzdGVwLXRlcm1pbnVzIHN0cnVjdHVyZSBvZiBhIENGSS4gQWx0aG91Z2ggYnVpbGRpbmcgYW4gaW50ZXJwcmV0ZXIgYWRkcyB0byB0aGVcbi8vICAgQ0ZJIGluZnJhc3RydWN0dXJlLCBpdCBwcm92aWRlcyBhIG51bWJlciBvZiBiZW5lZml0cy4gRmlyc3QsIGl0IGVtcGhhc2l6ZXMgYSBjbGVhciBzZXBhcmF0aW9uIG9mIGNvbmNlcm5zIGJldHdlZW4gbGV4aW5nL3BhcnNpbmcgYVxuLy8gICBDRkksIHdoaWNoIGludm9sdmVzIHNvbWUgY29tcGxleGl0eSByZWxhdGVkIHRvIGVzY2FwZWQgYW5kIHNwZWNpYWwgY2hhcmFjdGVycywgYW5kIHRoZSBleGVjdXRpb24gb2YgdGhlIHVuZGVybHlpbmcgc2V0IG9mIHN0ZXBzIFxuLy8gICByZXByZXNlbnRlZCBieSB0aGUgQ0ZJLiBTZWNvbmQsIGl0IHdpbGwgYmUgZWFzaWVyIHRvIGV4dGVuZCB0aGUgaW50ZXJwcmV0ZXIgdG8gYWNjb3VudCBmb3IgbmV3L2FsdGVyZWQgQ0ZJIHN0ZXBzIChzYXkgZm9yIHJlZmVyZW5jZXNcbi8vICAgdG8gdmVjdG9yIG9iamVjdHMgb3IgbXVsdGlwbGUgQ0ZJcykgdGhhbiBpZiBsZXhpbmcsIHBhcnNpbmcgYW5kIGludGVycHJldGF0aW9uIHdlcmUgYWxsIGhhbmRsZWQgaW4gYSBzaW5nbGUgc3RlcC4gRmluYWxseSwgUmVhZGl1bSdzIG9iamVjdGl2ZSBpcyBcbi8vICAgdG8gZGVtb25zdHJhdGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIEVQVUIgMy4wIHNwZWMuIEFuIGltcGxlbWVudGF0aW9uIHdpdGggYSBzdHJvbmcgc2VwYXJhdGlvbiBvZiBjb25jZXJucyB0aGF0IGNvbmZvcm1zIHRvIFxuLy8gICB3ZWxsLXVuZGVyc3Rvb2QgcGF0dGVybnMgZm9yIERTTCBwcm9jZXNzaW5nIHNob3VsZCBiZSBlYXNpZXIgdG8gY29tbXVuaWNhdGUsIGFuYWx5emUgYW5kIHVuZGVyc3RhbmQuIFxuLy8gUkVGQUNUT1JJTkcgQ0FORElEQVRFOiBub2RlIHR5cGUgZXJyb3JzIHNob3VsZG4ndCByZWFsbHkgYmUgcG9zc2libGUgaWYgdGhlIENGSSBzeW50YXggaXMgY29ycmVjdCBhbmQgdGhlIHBhcnNlciBpcyBlcnJvciBmcmVlLiBcbi8vICAgTWlnaHQgd2FudCB0byBtYWtlIHRoZSBzY3JpcHQgZGllIGluIHRob3NlIGluc3RhbmNlcywgb25jZSB0aGUgZ3JhbW1hciBhbmQgaW50ZXJwcmV0ZXIgYXJlIG1vcmUgc3RhYmxlLiBcbi8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogVGhlIHVzZSBvZiB0aGUgJ25vZGVUeXBlJyBwcm9wZXJ0eSBpcyBjb25mdXNpbmcgYXMgdGhpcyBpcyBhIERPTSBub2RlIHByb3BlcnR5IGFuZCB0aGUgdHdvIGFyZSB1bnJlbGF0ZWQuIFxuLy8gICBXaG9vcHMuIFRoZXJlIHNob3VsZG4ndCBiZSBhbnkgaW50ZXJmZXJlbmNlLCBob3dldmVyLCBJIHRoaW5rIHRoaXMgc2hvdWxkIGJlIGNoYW5nZWQuIFxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgQ0ZJQXNzZXJ0aW9uRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9ycy9jZmktYXNzZXJ0aW9uJylcbnZhciBJbnN0cnVjdGlvbnMgPSByZXF1aXJlKCcuL2luc3RydWN0aW9ucycpXG52YXIgTm9kZVR5cGVFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JzL25vZGUtdHlwZScpXG52YXIgUGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKVxuXG52YXIgSW50ZXJwcmV0ZXIgPSB7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbiAgICAvLyAgXCJQVUJMSUNcIiBNRVRIT0RTIChUSEUgQVBJKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gICAgLy8gRGVzY3JpcHRpb246IEZpbmQgdGhlIGNvbnRlbnQgZG9jdW1lbnQgcmVmZXJlbmNlZCBieSB0aGUgc3BpbmUgaXRlbS4gVGhpcyBzaG91bGQgYmUgdGhlIHNwaW5lIGl0ZW0gXG4gICAgLy8gICByZWZlcmVuY2VkIGJ5IHRoZSBmaXJzdCBpbmRpcmVjdGlvbiBzdGVwIGluIHRoZSBDRkkuXG4gICAgLy8gUmF0aW9uYWxlOiBUaGlzIG1ldGhvZCBpcyBhIHBhcnQgb2YgdGhlIEFQSSBzbyB0aGF0IHRoZSByZWFkaW5nIHN5c3RlbSBjYW4gXCJpbnRlcmFjdFwiIHRoZSBjb250ZW50IGRvY3VtZW50IFxuICAgIC8vICAgcG9pbnRlZCB0byBieSBhIENGSS4gSWYgdGhpcyBpcyBub3QgYSBzZXBhcmF0ZSBzdGVwLCB0aGUgcHJvY2Vzc2luZyBvZiB0aGUgQ0ZJIG11c3QgYmUgdGlnaHRseSBjb3VwbGVkIHdpdGggXG4gICAgLy8gICB0aGUgcmVhZGluZyBzeXN0ZW0sIGFzIGl0IHN0YW5kcyBub3cuIFxuICAgIGdldENvbnRlbnREb2NIcmVmIDogZnVuY3Rpb24gKENGSSwgcGFja2FnZURvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgJHBhY2thZ2VEb2N1bWVudCA9ICQocGFja2FnZURvY3VtZW50KTtcbiAgICAgICAgdmFyIGRlY29kZWRDRkkgPSBkZWNvZGVVUkkoQ0ZJKTtcbiAgICAgICAgdmFyIENGSUFTVCA9IFBhcnNlci5wYXJzZShkZWNvZGVkQ0ZJKTtcblxuICAgICAgICBpZiAoIUNGSUFTVCB8fCBDRklBU1QudHlwZSAhPT0gXCJDRklBU1RcIikgeyBcbiAgICAgICAgICAgIHRocm93IE5vZGVUeXBlRXJyb3IoQ0ZJQVNULCBcImV4cGVjdGVkIENGSSBBU1Qgcm9vdCBub2RlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW50ZXJwZXQgdGhlIHBhdGggbm9kZSAodGhlIHBhY2thZ2UgZG9jdW1lbnQgc3RlcClcbiAgICAgICAgdmFyICRwYWNrYWdlRWxlbWVudCA9ICQoJChcInBhY2thZ2VcIiwgJHBhY2thZ2VEb2N1bWVudClbMF0pO1xuICAgICAgICB2YXIgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRJbmRleFN0ZXBOb2RlKENGSUFTVC5jZmlTdHJpbmcucGF0aCwgJHBhY2thZ2VFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgICBmb3VuZEhyZWYgPSB0aGlzLnNlYXJjaExvY2FsUGF0aEZvckhyZWYoJGN1cnJFbGVtZW50LCAkcGFja2FnZURvY3VtZW50LCBDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICBpZiAoZm91bmRIcmVmKSB7XG4gICAgICAgICAgICByZXR1cm4gZm91bmRIcmVmO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBEZXNjcmlwdGlvbjogSW5qZWN0IGFuIGFyYml0cmFyeSBodG1sIGVsZW1lbnQgaW50byBhIHBvc2l0aW9uIGluIGEgY29udGVudCBkb2N1bWVudCByZWZlcmVuY2VkIGJ5IGEgQ0ZJXG4gICAgaW5qZWN0RWxlbWVudCA6IGZ1bmN0aW9uIChDRkksIGNvbnRlbnREb2N1bWVudCwgZWxlbWVudFRvSW5qZWN0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgZGVjb2RlZENGSSA9IGRlY29kZVVSSShDRkkpO1xuICAgICAgICB2YXIgQ0ZJQVNUID0gUGFyc2VyLnBhcnNlKGRlY29kZWRDRkkpO1xuICAgICAgICB2YXIgaW5kaXJlY3Rpb25Ob2RlO1xuICAgICAgICB2YXIgaW5kaXJlY3Rpb25TdGVwTnVtO1xuICAgICAgICB2YXIgJGN1cnJFbGVtZW50O1xuXG4gICAgICAgIC8vIFJhdGlvbmFsZTogU2luY2UgdGhlIGNvcnJlY3QgY29udGVudCBkb2N1bWVudCBmb3IgdGhpcyBDRkkgaXMgYWxyZWFkeSBiZWluZyBwYXNzZWQsIHdlIGNhbiBza2lwIHRvIHRoZSBiZWdpbm5pbmcgXG4gICAgICAgIC8vICAgb2YgdGhlIGluZGlyZWN0aW9uIHN0ZXAgdGhhdCByZWZlcmVuY2VkIHRoZSBjb250ZW50IGRvY3VtZW50LlxuICAgICAgICAvLyBOb3RlOiBUaGlzIGFzc3VtZXMgdGhhdCBpbmRpcmVjdGlvbiBzdGVwcyBhbmQgaW5kZXggc3RlcHMgY29uZm9ybSB0byBhbiBpbnRlcmZhY2U6IGFuIG9iamVjdCB3aXRoIHN0ZXBMZW5ndGgsIGlkQXNzZXJ0aW9uXG4gICAgICAgIGluZGlyZWN0aW9uU3RlcE51bSA9IHRoaXMuZ2V0Rmlyc3RJbmRpcmVjdGlvblN0ZXBOdW0oQ0ZJQVNUKTtcbiAgICAgICAgaW5kaXJlY3Rpb25Ob2RlID0gQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGguc3RlcHNbaW5kaXJlY3Rpb25TdGVwTnVtXTtcbiAgICAgICAgaW5kaXJlY3Rpb25Ob2RlLnR5cGUgPSBcImluZGV4U3RlcFwiO1xuXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgcmVzdCBvZiB0aGUgc3RlcHNcbiAgICAgICAgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRMb2NhbFBhdGgoQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGgsIGluZGlyZWN0aW9uU3RlcE51bSwgJChcImh0bWxcIiwgY29udGVudERvY3VtZW50KSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBUT0RPOiBkZXRlY3Qgd2hhdCBraW5kIG9mIHRlcm1pbnVzOyBmb3Igbm93LCB0ZXh0IG5vZGUgdGVybWluaSBhcmUgdGhlIG9ubHkga2luZCBpbXBsZW1lbnRlZFxuICAgICAgICAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldFRleHRUZXJtaW51c05vZGUoQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGgudGVybVN0ZXAsICRjdXJyRWxlbWVudCwgZWxlbWVudFRvSW5qZWN0KTtcblxuICAgICAgICAvLyBSZXR1cm4gdGhlIGVsZW1lbnQgdGhhdCB3YXMgaW5qZWN0ZWQgaW50b1xuICAgICAgICByZXR1cm4gJGN1cnJFbGVtZW50O1xuICAgIH0sXG5cbiAgICAvLyBEZXNjcmlwdGlvbjogSW5qZWN0IGFuIGFyYml0cmFyeSBodG1sIGVsZW1lbnQgaW50byBhIHBvc2l0aW9uIGluIGEgY29udGVudCBkb2N1bWVudCByZWZlcmVuY2VkIGJ5IGEgQ0ZJXG4gICAgaW5qZWN0UmFuZ2VFbGVtZW50cyA6IGZ1bmN0aW9uIChyYW5nZUNGSSwgY29udGVudERvY3VtZW50LCBzdGFydEVsZW1lbnRUb0luamVjdCwgZW5kRWxlbWVudFRvSW5qZWN0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgZGVjb2RlZENGSSA9IGRlY29kZVVSSShyYW5nZUNGSSk7XG4gICAgICAgIHZhciBDRklBU1QgPSBQYXJzZXIucGFyc2UoZGVjb2RlZENGSSk7XG4gICAgICAgIHZhciBpbmRpcmVjdGlvbk5vZGU7XG4gICAgICAgIHZhciBpbmRpcmVjdGlvblN0ZXBOdW07XG4gICAgICAgIHZhciAkY3VyckVsZW1lbnQ7XG4gICAgICAgIHZhciAkcmFuZ2UxVGFyZ2V0RWxlbWVudDtcbiAgICAgICAgdmFyICRyYW5nZTJUYXJnZXRFbGVtZW50O1xuXG4gICAgICAgIC8vIFJhdGlvbmFsZTogU2luY2UgdGhlIGNvcnJlY3QgY29udGVudCBkb2N1bWVudCBmb3IgdGhpcyBDRkkgaXMgYWxyZWFkeSBiZWluZyBwYXNzZWQsIHdlIGNhbiBza2lwIHRvIHRoZSBiZWdpbm5pbmcgXG4gICAgICAgIC8vICAgb2YgdGhlIGluZGlyZWN0aW9uIHN0ZXAgdGhhdCByZWZlcmVuY2VkIHRoZSBjb250ZW50IGRvY3VtZW50LlxuICAgICAgICAvLyBOb3RlOiBUaGlzIGFzc3VtZXMgdGhhdCBpbmRpcmVjdGlvbiBzdGVwcyBhbmQgaW5kZXggc3RlcHMgY29uZm9ybSB0byBhbiBpbnRlcmZhY2U6IGFuIG9iamVjdCB3aXRoIHN0ZXBMZW5ndGgsIGlkQXNzZXJ0aW9uXG4gICAgICAgIGluZGlyZWN0aW9uU3RlcE51bSA9IHRoaXMuZ2V0Rmlyc3RJbmRpcmVjdGlvblN0ZXBOdW0oQ0ZJQVNUKTtcbiAgICAgICAgaW5kaXJlY3Rpb25Ob2RlID0gQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGguc3RlcHNbaW5kaXJlY3Rpb25TdGVwTnVtXTtcbiAgICAgICAgaW5kaXJlY3Rpb25Ob2RlLnR5cGUgPSBcImluZGV4U3RlcFwiO1xuXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgcmVzdCBvZiB0aGUgc3RlcHMgaW4gdGhlIGZpcnN0IGxvY2FsIHBhdGhcbiAgICAgICAgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRMb2NhbFBhdGgoQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGgsIGluZGlyZWN0aW9uU3RlcE51bSwgJChcImh0bWxcIiwgY29udGVudERvY3VtZW50KSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBJbnRlcnByZXQgdGhlIGZpcnN0IHJhbmdlIGxvY2FsX3BhdGhcbiAgICAgICAgJHJhbmdlMVRhcmdldEVsZW1lbnQgPSB0aGlzLmludGVycHJldExvY2FsUGF0aChDRklBU1QuY2ZpU3RyaW5nLnJhbmdlMSwgMCwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgICAkcmFuZ2UxVGFyZ2V0RWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0VGV4dFRlcm1pbnVzTm9kZShDRklBU1QuY2ZpU3RyaW5nLnJhbmdlMS50ZXJtU3RlcCwgJHJhbmdlMVRhcmdldEVsZW1lbnQsIHN0YXJ0RWxlbWVudFRvSW5qZWN0KTtcblxuICAgICAgICAvLyBJbnRlcnByZXQgdGhlIHNlY29uZCByYW5nZSBsb2NhbF9wYXRoXG4gICAgICAgICRyYW5nZTJUYXJnZXRFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRMb2NhbFBhdGgoQ0ZJQVNULmNmaVN0cmluZy5yYW5nZTIsIDAsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICAgICAgJHJhbmdlMlRhcmdldEVsZW1lbnQgPSB0aGlzLmludGVycHJldFRleHRUZXJtaW51c05vZGUoQ0ZJQVNULmNmaVN0cmluZy5yYW5nZTIudGVybVN0ZXAsICRyYW5nZTJUYXJnZXRFbGVtZW50LCBlbmRFbGVtZW50VG9JbmplY3QpO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgZWxlbWVudCB0aGF0IHdhcyBpbmplY3RlZCBpbnRvXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydEVsZW1lbnQgOiAkcmFuZ2UxVGFyZ2V0RWxlbWVudFswXSxcbiAgICAgICAgICAgIGVuZEVsZW1lbnQgOiAkcmFuZ2UyVGFyZ2V0RWxlbWVudFswXVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvLyBEZXNjcmlwdGlvbjogVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIGVsZW1lbnQgb3Igbm9kZSAoc2F5LCBhIHRleHQgbm9kZSkgdGhhdCBpcyB0aGUgZmluYWwgdGFyZ2V0IG9mIHRoZSBcbiAgICAvLyAgIHRoZSBDRkkuXG4gICAgZ2V0VGFyZ2V0RWxlbWVudCA6IGZ1bmN0aW9uIChDRkksIGNvbnRlbnREb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgdmFyIGRlY29kZWRDRkkgPSBkZWNvZGVVUkkoQ0ZJKTtcbiAgICAgICAgdmFyIENGSUFTVCA9IFBhcnNlci5wYXJzZShkZWNvZGVkQ0ZJKTtcbiAgICAgICAgdmFyIGluZGlyZWN0aW9uTm9kZTtcbiAgICAgICAgdmFyIGluZGlyZWN0aW9uU3RlcE51bTtcbiAgICAgICAgdmFyICRjdXJyRWxlbWVudDtcbiAgICAgICAgXG4gICAgICAgIC8vIFJhdGlvbmFsZTogU2luY2UgdGhlIGNvcnJlY3QgY29udGVudCBkb2N1bWVudCBmb3IgdGhpcyBDRkkgaXMgYWxyZWFkeSBiZWluZyBwYXNzZWQsIHdlIGNhbiBza2lwIHRvIHRoZSBiZWdpbm5pbmcgXG4gICAgICAgIC8vICAgb2YgdGhlIGluZGlyZWN0aW9uIHN0ZXAgdGhhdCByZWZlcmVuY2VkIHRoZSBjb250ZW50IGRvY3VtZW50LlxuICAgICAgICAvLyBOb3RlOiBUaGlzIGFzc3VtZXMgdGhhdCBpbmRpcmVjdGlvbiBzdGVwcyBhbmQgaW5kZXggc3RlcHMgY29uZm9ybSB0byBhbiBpbnRlcmZhY2U6IGFuIG9iamVjdCB3aXRoIHN0ZXBMZW5ndGgsIGlkQXNzZXJ0aW9uXG4gICAgICAgIGluZGlyZWN0aW9uU3RlcE51bSA9IHRoaXMuZ2V0Rmlyc3RJbmRpcmVjdGlvblN0ZXBOdW0oQ0ZJQVNUKTtcbiAgICAgICAgaW5kaXJlY3Rpb25Ob2RlID0gQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGguc3RlcHNbaW5kaXJlY3Rpb25TdGVwTnVtXTtcbiAgICAgICAgaW5kaXJlY3Rpb25Ob2RlLnR5cGUgPSBcImluZGV4U3RlcFwiO1xuXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgcmVzdCBvZiB0aGUgc3RlcHNcbiAgICAgICAgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRMb2NhbFBhdGgoQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGgsIGluZGlyZWN0aW9uU3RlcE51bSwgJChcImh0bWxcIiwgY29udGVudERvY3VtZW50KSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBSZXR1cm4gdGhlIGVsZW1lbnQgYXQgdGhlIGVuZCBvZiB0aGUgQ0ZJXG4gICAgICAgIHJldHVybiAkY3VyckVsZW1lbnQ7XG4gICAgfSxcblxuICAgIGdldFJhbmdlVGFyZ2V0RWxlbWVudHMgOiBmdW5jdGlvbiAocmFuZ2VDRkksIGNvbnRlbnREb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgdmFyIGRlY29kZWRDRkkgPSBkZWNvZGVVUkkocmFuZ2VDRkkpO1xuICAgICAgICB2YXIgQ0ZJQVNUID0gUGFyc2VyLnBhcnNlKGRlY29kZWRDRkkpO1xuICAgICAgICB2YXIgaW5kaXJlY3Rpb25Ob2RlO1xuICAgICAgICB2YXIgaW5kaXJlY3Rpb25TdGVwTnVtO1xuICAgICAgICB2YXIgJGN1cnJFbGVtZW50O1xuICAgICAgICB2YXIgJHJhbmdlMVRhcmdldEVsZW1lbnQ7XG4gICAgICAgIHZhciAkcmFuZ2UyVGFyZ2V0RWxlbWVudDtcbiAgICAgICAgXG4gICAgICAgIC8vIFJhdGlvbmFsZTogU2luY2UgdGhlIGNvcnJlY3QgY29udGVudCBkb2N1bWVudCBmb3IgdGhpcyBDRkkgaXMgYWxyZWFkeSBiZWluZyBwYXNzZWQsIHdlIGNhbiBza2lwIHRvIHRoZSBiZWdpbm5pbmcgXG4gICAgICAgIC8vICAgb2YgdGhlIGluZGlyZWN0aW9uIHN0ZXAgdGhhdCByZWZlcmVuY2VkIHRoZSBjb250ZW50IGRvY3VtZW50LlxuICAgICAgICAvLyBOb3RlOiBUaGlzIGFzc3VtZXMgdGhhdCBpbmRpcmVjdGlvbiBzdGVwcyBhbmQgaW5kZXggc3RlcHMgY29uZm9ybSB0byBhbiBpbnRlcmZhY2U6IGFuIG9iamVjdCB3aXRoIHN0ZXBMZW5ndGgsIGlkQXNzZXJ0aW9uXG4gICAgICAgIGluZGlyZWN0aW9uU3RlcE51bSA9IHRoaXMuZ2V0Rmlyc3RJbmRpcmVjdGlvblN0ZXBOdW0oQ0ZJQVNUKTtcbiAgICAgICAgaW5kaXJlY3Rpb25Ob2RlID0gQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGguc3RlcHNbaW5kaXJlY3Rpb25TdGVwTnVtXTtcbiAgICAgICAgaW5kaXJlY3Rpb25Ob2RlLnR5cGUgPSBcImluZGV4U3RlcFwiO1xuXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgcmVzdCBvZiB0aGUgc3RlcHNcbiAgICAgICAgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRMb2NhbFBhdGgoQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGgsIGluZGlyZWN0aW9uU3RlcE51bSwgJChcImh0bWxcIiwgY29udGVudERvY3VtZW50KSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBJbnRlcnByZXQgZmlyc3QgcmFuZ2UgbG9jYWxfcGF0aFxuICAgICAgICAkcmFuZ2UxVGFyZ2V0RWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0TG9jYWxQYXRoKENGSUFTVC5jZmlTdHJpbmcucmFuZ2UxLCAwLCAkY3VyckVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cbiAgICAgICAgLy8gSW50ZXJwcmV0IHNlY29uZCByYW5nZSBsb2NhbF9wYXRoXG4gICAgICAgICRyYW5nZTJUYXJnZXRFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRMb2NhbFBhdGgoQ0ZJQVNULmNmaVN0cmluZy5yYW5nZTIsIDAsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBSZXR1cm4gdGhlIGVsZW1lbnQgYXQgdGhlIGVuZCBvZiB0aGUgQ0ZJXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydEVsZW1lbnQgOiAkcmFuZ2UxVGFyZ2V0RWxlbWVudFswXSxcbiAgICAgICAgICAgIGVuZEVsZW1lbnQgOiAkcmFuZ2UyVGFyZ2V0RWxlbWVudFswXVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvLyBEZXNjcmlwdGlvbjogVGhpcyBtZXRob2QgYWxsb3dzIGEgXCJwYXJ0aWFsXCIgQ0ZJIHRvIGJlIHVzZWQgdG8gcmVmZXJlbmNlIGEgdGFyZ2V0IGluIGEgY29udGVudCBkb2N1bWVudCwgd2l0aG91dCBhIFxuICAgIC8vICAgcGFja2FnZSBkb2N1bWVudCBDRkkgY29tcG9uZW50LiBcbiAgICAvLyBBcmd1bWVudHM6IHtcbiAgICAvLyAgICAgY29udGVudERvY3VtZW50Q0ZJIDogVGhpcyBpcyBhIHBhcnRpYWwgQ0ZJIHRoYXQgcmVwcmVzZW50cyBhIHBhdGggaW4gYSBjb250ZW50IGRvY3VtZW50IG9ubHkuIFRoaXMgcGFydGlhbCBtdXN0IGJlIFxuICAgIC8vICAgICAgICBzeW50YWN0aWNhbGx5IHZhbGlkLCBldmVuIHRob3VnaCBpdCByZWZlcmVuY2VzIGEgcGF0aCBzdGFydGluZyBhdCB0aGUgdG9wIG9mIGEgY29udGVudCBkb2N1bWVudCAod2hpY2ggaXMgYSBDRkkgdGhhdFxuICAgIC8vICAgICAgICB0aGF0IGhhcyBubyBkZWZpbmVkIG1lYW5pbmcgaW4gdGhlIHNwZWMuKVxuICAgIC8vICAgICBjb250ZW50RG9jdW1lbnQgOiBBIERPTSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY29udGVudCBkb2N1bWVudCB0byB3aGljaCB0aGUgcGFydGlhbCBDRkkgcmVmZXJzLiBcbiAgICAvLyB9XG4gICAgLy8gUmF0aW9uYWxlOiBUaGlzIG1ldGhvZCBleGlzdHMgdG8gbWVldCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSBSZWFkaXVtLVNESyBhbmQgc2hvdWxkIGJlIHVzZWQgd2l0aCBjYXJlXG4gICAgZ2V0VGFyZ2V0RWxlbWVudFdpdGhQYXJ0aWFsQ0ZJIDogZnVuY3Rpb24gKGNvbnRlbnREb2N1bWVudENGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgZGVjb2RlZENGSSA9IGRlY29kZVVSSShjb250ZW50RG9jdW1lbnRDRkkpO1xuICAgICAgICB2YXIgQ0ZJQVNUID0gUGFyc2VyLnBhcnNlKGRlY29kZWRDRkkpO1xuICAgICAgICB2YXIgaW5kaXJlY3Rpb25Ob2RlO1xuICAgICAgICBcbiAgICAgICAgLy8gSW50ZXJwcmV0IHRoZSBwYXRoIG5vZGUgXG4gICAgICAgIHZhciAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldEluZGV4U3RlcE5vZGUoQ0ZJQVNULmNmaVN0cmluZy5wYXRoLCAkKFwiaHRtbFwiLCBjb250ZW50RG9jdW1lbnQpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgcmVzdCBvZiB0aGUgc3RlcHNcbiAgICAgICAgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRMb2NhbFBhdGgoQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGgsIDAsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBSZXR1cm4gdGhlIGVsZW1lbnQgYXQgdGhlIGVuZCBvZiB0aGUgQ0ZJXG4gICAgICAgIHJldHVybiAkY3VyckVsZW1lbnQ7ICAgICAgICBcbiAgICB9LFxuXG4gICAgLy8gRGVzY3JpcHRpb246IFRoaXMgbWV0aG9kIGFsbG93cyBhIFwicGFydGlhbFwiIENGSSB0byBiZSB1c2VkLCB3aXRoIGEgY29udGVudCBkb2N1bWVudCwgdG8gcmV0dXJuIHRoZSB0ZXh0IG5vZGUgYW5kIG9mZnNldCBcbiAgICAvLyAgICByZWZlcmVuY2VkIGJ5IHRoZSBwYXJ0aWFsIENGSS5cbiAgICAvLyBBcmd1bWVudHM6IHtcbiAgICAvLyAgICAgY29udGVudERvY3VtZW50Q0ZJIDogVGhpcyBpcyBhIHBhcnRpYWwgQ0ZJIHRoYXQgcmVwcmVzZW50cyBhIHBhdGggaW4gYSBjb250ZW50IGRvY3VtZW50IG9ubHkuIFRoaXMgcGFydGlhbCBtdXN0IGJlIFxuICAgIC8vICAgICAgICBzeW50YWN0aWNhbGx5IHZhbGlkLCBldmVuIHRob3VnaCBpdCByZWZlcmVuY2VzIGEgcGF0aCBzdGFydGluZyBhdCB0aGUgdG9wIG9mIGEgY29udGVudCBkb2N1bWVudCAod2hpY2ggaXMgYSBDRkkgdGhhdFxuICAgIC8vICAgICAgICB0aGF0IGhhcyBubyBkZWZpbmVkIG1lYW5pbmcgaW4gdGhlIHNwZWMuKVxuICAgIC8vICAgICBjb250ZW50RG9jdW1lbnQgOiBBIERPTSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY29udGVudCBkb2N1bWVudCB0byB3aGljaCB0aGUgcGFydGlhbCBDRkkgcmVmZXJzLiBcbiAgICAvLyB9XG4gICAgLy8gUmF0aW9uYWxlOiBUaGlzIG1ldGhvZCBleGlzdHMgdG8gbWVldCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSBSZWFkaXVtLVNESyBhbmQgc2hvdWxkIGJlIHVzZWQgd2l0aCBjYXJlXG4gICAgZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJIDogZnVuY3Rpb24gKGNvbnRlbnREb2N1bWVudENGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgZGVjb2RlZENGSSA9IGRlY29kZVVSSShjb250ZW50RG9jdW1lbnRDRkkpO1xuICAgICAgICB2YXIgQ0ZJQVNUID0gUGFyc2VyLnBhcnNlKGRlY29kZWRDRkkpO1xuICAgICAgICB2YXIgaW5kaXJlY3Rpb25Ob2RlO1xuICAgICAgICB2YXIgdGV4dE9mZnNldDtcbiAgICAgICAgXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgcGF0aCBub2RlIFxuICAgICAgICB2YXIgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRJbmRleFN0ZXBOb2RlKENGSUFTVC5jZmlTdHJpbmcucGF0aCwgJChcImh0bWxcIiwgY29udGVudERvY3VtZW50KSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBJbnRlcnByZXQgdGhlIHJlc3Qgb2YgdGhlIHN0ZXBzXG4gICAgICAgICRjdXJyRWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0TG9jYWxQYXRoKENGSUFTVC5jZmlTdHJpbmcubG9jYWxQYXRoLCAwLCAkY3VyckVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBlbGVtZW50IGF0IHRoZSBlbmQgb2YgdGhlIENGSVxuICAgICAgICB0ZXh0T2Zmc2V0ID0gcGFyc2VJbnQoQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGgudGVybVN0ZXAub2Zmc2V0VmFsdWUpO1xuICAgICAgICByZXR1cm4geyB0ZXh0Tm9kZSA6ICRjdXJyRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA6IHRleHRPZmZzZXRcbiAgICAgICAgICAgIH07XG4gICAgfSxcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuICAgIC8vICBcIlBSSVZBVEVcIiBIRUxQRVJTICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgICBnZXRGaXJzdEluZGlyZWN0aW9uU3RlcE51bSA6IGZ1bmN0aW9uIChDRklBU1QpIHtcblxuICAgICAgICAvLyBGaW5kIHRoZSBmaXJzdCBpbmRpcmVjdGlvbiBzdGVwIGluIHRoZSBsb2NhbCBwYXRoOyBmb2xsb3cgaXQgbGlrZSBhIHJlZ3VsYXIgc3RlcCwgYXMgdGhlIHN0ZXAgaW4gdGhlIGNvbnRlbnQgZG9jdW1lbnQgaXQgXG4gICAgICAgIC8vICAgcmVmZXJlbmNlcyBpcyBhbHJlYWR5IGxvYWRlZCBhbmQgaGFzIGJlZW4gcGFzc2VkIHRvIHRoaXMgbWV0aG9kXG4gICAgICAgIHZhciBzdGVwTnVtID0gMDtcbiAgICAgICAgZm9yIChzdGVwTnVtOyBzdGVwTnVtIDw9IENGSUFTVC5jZmlTdHJpbmcubG9jYWxQYXRoLnN0ZXBzLmxlbmd0aCAtIDEgOyBzdGVwTnVtKyspIHtcbiAgICAgICAgXG4gICAgICAgICAgICBuZXh0U3RlcE5vZGUgPSBDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aC5zdGVwc1tzdGVwTnVtXTtcbiAgICAgICAgICAgIGlmIChuZXh0U3RlcE5vZGUudHlwZSA9PT0gXCJpbmRpcmVjdGlvblN0ZXBcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGVwTnVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogY2ZpU3RyaW5nIG5vZGUgYW5kIHN0YXJ0IHN0ZXAgbnVtIGNvdWxkIGJlIG1lcmdlZCBpbnRvIG9uZSBhcmd1bWVudCwgYnkgc2ltcGx5IHBhc3NpbmcgdGhlIFxuICAgIC8vICAgc3RhcnRpbmcgc3RlcC4uLiBwcm9iYWJseSBhIGdvb2QgaWRlYSwgdGhpcyB3b3VsZCBtYWtlIHRoZSBtZWFuaW5nIG9mIHRoaXMgbWV0aG9kIGNsZWFyZXIuXG4gICAgaW50ZXJwcmV0TG9jYWxQYXRoIDogZnVuY3Rpb24gKGxvY2FsUGF0aE5vZGUsIHN0YXJ0U3RlcE51bSwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgc3RlcE51bSA9IHN0YXJ0U3RlcE51bTtcbiAgICAgICAgdmFyIG5leHRTdGVwTm9kZTtcbiAgICAgICAgZm9yIChzdGVwTnVtOyBzdGVwTnVtIDw9IGxvY2FsUGF0aE5vZGUuc3RlcHMubGVuZ3RoIC0gMSA7IHN0ZXBOdW0rKykge1xuICAgICAgICBcbiAgICAgICAgICAgIG5leHRTdGVwTm9kZSA9IGxvY2FsUGF0aE5vZGUuc3RlcHNbc3RlcE51bV07XG4gICAgICAgICAgICBpZiAobmV4dFN0ZXBOb2RlLnR5cGUgPT09IFwiaW5kZXhTdGVwXCIpIHtcblxuICAgICAgICAgICAgICAgICRjdXJyRWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0SW5kZXhTdGVwTm9kZShuZXh0U3RlcE5vZGUsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5leHRTdGVwTm9kZS50eXBlID09PSBcImluZGlyZWN0aW9uU3RlcFwiKSB7XG5cbiAgICAgICAgICAgICAgICAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldEluZGlyZWN0aW9uU3RlcE5vZGUobmV4dFN0ZXBOb2RlLCAkY3VyckVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJGN1cnJFbGVtZW50O1xuICAgIH0sXG5cbiAgICBpbnRlcnByZXRJbmRleFN0ZXBOb2RlIDogZnVuY3Rpb24gKGluZGV4U3RlcE5vZGUsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgLy8gQ2hlY2sgbm9kZSB0eXBlOyB0aHJvdyBlcnJvciBpZiB3cm9uZyB0eXBlXG4gICAgICAgIGlmIChpbmRleFN0ZXBOb2RlID09PSB1bmRlZmluZWQgfHwgaW5kZXhTdGVwTm9kZS50eXBlICE9PSBcImluZGV4U3RlcFwiKSB7XG5cbiAgICAgICAgICAgIHRocm93IE5vZGVUeXBlRXJyb3IoaW5kZXhTdGVwTm9kZSwgXCJleHBlY3RlZCBpbmRleCBzdGVwIG5vZGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmRleCBzdGVwXG4gICAgICAgIHZhciAkc3RlcFRhcmdldCA9IEluc3RydWN0aW9ucy5nZXROZXh0Tm9kZShpbmRleFN0ZXBOb2RlLnN0ZXBMZW5ndGgsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBDaGVjayB0aGUgaWQgYXNzZXJ0aW9uLCBpZiBpdCBleGlzdHNcbiAgICAgICAgaWYgKGluZGV4U3RlcE5vZGUuaWRBc3NlcnRpb24pIHtcblxuICAgICAgICAgICAgaWYgKCFJbnN0cnVjdGlvbnMudGFyZ2V0SWRNYXRjaGVzSWRBc3NlcnRpb24oJHN0ZXBUYXJnZXQsIGluZGV4U3RlcE5vZGUuaWRBc3NlcnRpb24pKSB7XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBDRklBc3NlcnRpb25FcnJvcihpbmRleFN0ZXBOb2RlLmlkQXNzZXJ0aW9uLCAkc3RlcFRhcmdldC5hdHRyKCdpZCcpLCBcIklkIGFzc2VydGlvbiBmYWlsZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJHN0ZXBUYXJnZXQ7XG4gICAgfSxcblxuICAgIGludGVycHJldEluZGlyZWN0aW9uU3RlcE5vZGUgOiBmdW5jdGlvbiAoaW5kaXJlY3Rpb25TdGVwTm9kZSwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICAvLyBDaGVjayBub2RlIHR5cGU7IHRocm93IGVycm9yIGlmIHdyb25nIHR5cGVcbiAgICAgICAgaWYgKGluZGlyZWN0aW9uU3RlcE5vZGUgPT09IHVuZGVmaW5lZCB8fCBpbmRpcmVjdGlvblN0ZXBOb2RlLnR5cGUgIT09IFwiaW5kaXJlY3Rpb25TdGVwXCIpIHtcblxuICAgICAgICAgICAgdGhyb3cgTm9kZVR5cGVFcnJvcihpbmRpcmVjdGlvblN0ZXBOb2RlLCBcImV4cGVjdGVkIGluZGlyZWN0aW9uIHN0ZXAgbm9kZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluZGlyZWN0aW9uIHN0ZXBcbiAgICAgICAgdmFyICRzdGVwVGFyZ2V0ID0gSW5zdHJ1Y3Rpb25zLmZvbGxvd0luZGlyZWN0aW9uU3RlcChcbiAgICAgICAgICAgIGluZGlyZWN0aW9uU3RlcE5vZGUuc3RlcExlbmd0aCwgXG4gICAgICAgICAgICAkY3VyckVsZW1lbnQsIFxuICAgICAgICAgICAgY2xhc3NCbGFja2xpc3QsIFxuICAgICAgICAgICAgZWxlbWVudEJsYWNrbGlzdCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgdGhlIGlkIGFzc2VydGlvbiwgaWYgaXQgZXhpc3RzXG4gICAgICAgIGlmIChpbmRpcmVjdGlvblN0ZXBOb2RlLmlkQXNzZXJ0aW9uKSB7XG5cbiAgICAgICAgICAgIGlmICghSW5zdHJ1Y3Rpb25zLnRhcmdldElkTWF0Y2hlc0lkQXNzZXJ0aW9uKCRzdGVwVGFyZ2V0LCBpbmRpcmVjdGlvblN0ZXBOb2RlLmlkQXNzZXJ0aW9uKSkge1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgQ0ZJQXNzZXJ0aW9uRXJyb3IoaW5kaXJlY3Rpb25TdGVwTm9kZS5pZEFzc2VydGlvbiwgJHN0ZXBUYXJnZXQuYXR0cignaWQnKSwgXCJJZCBhc3NlcnRpb24gZmFpbGVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICRzdGVwVGFyZ2V0O1xuICAgIH0sXG5cbiAgICAvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IFRoZSBsb2dpYyBoZXJlIGFzc3VtZXMgdGhhdCBhIHVzZXIgd2lsbCBhbHdheXMgd2FudCB0byB1c2UgdGhpcyB0ZXJtaW51c1xuICAgIC8vICAgdG8gaW5qZWN0IGNvbnRlbnQgaW50byB0aGUgZm91bmQgbm9kZS4gVGhpcyB3aWxsIG5vdCBhbHdheXMgYmUgdGhlIGNhc2UsIGFuZCBkaWZmZXJlbnQgdHlwZXMgb2YgaW50ZXJwcmV0YXRpb25cbiAgICAvLyAgIGFyZSBwcm9iYWJseSBkZXNpcmVkLiBcbiAgICBpbnRlcnByZXRUZXh0VGVybWludXNOb2RlIDogZnVuY3Rpb24gKHRlcm1pbnVzTm9kZSwgJGN1cnJFbGVtZW50LCBlbGVtZW50VG9JbmplY3QpIHtcblxuICAgICAgICBpZiAodGVybWludXNOb2RlID09PSB1bmRlZmluZWQgfHwgdGVybWludXNOb2RlLnR5cGUgIT09IFwidGV4dFRlcm1pbnVzXCIpIHtcblxuICAgICAgICAgICAgdGhyb3cgTm9kZVR5cGVFcnJvcih0ZXJtaW51c05vZGUsIFwiZXhwZWN0ZWQgdGV4dCB0ZXJtaW51cyBub2RlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyICRpbmplY3RlZEVsZW1lbnQgPSBJbnN0cnVjdGlvbnMudGV4dFRlcm1pbmF0aW9uKFxuICAgICAgICAgICAgJGN1cnJFbGVtZW50LCBcbiAgICAgICAgICAgIHRlcm1pbnVzTm9kZS5vZmZzZXRWYWx1ZSwgXG4gICAgICAgICAgICBlbGVtZW50VG9JbmplY3RcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuICRpbmplY3RlZEVsZW1lbnQ7XG4gICAgfSxcblxuICAgIHNlYXJjaExvY2FsUGF0aEZvckhyZWYgOiBmdW5jdGlvbiAoJGN1cnJFbGVtZW50LCAkcGFja2FnZURvY3VtZW50LCBsb2NhbFBhdGhOb2RlLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICAvLyBJbnRlcnByZXQgdGhlIGZpcnN0IGxvY2FsX3BhdGggbm9kZSwgd2hpY2ggaXMgYSBzZXQgb2Ygc3RlcHMgYW5kIGFuZCBhIHRlcm1pbnVzIGNvbmRpdGlvblxuICAgICAgICB2YXIgc3RlcE51bSA9IDA7XG4gICAgICAgIHZhciBuZXh0U3RlcE5vZGU7XG4gICAgICAgIGZvciAoc3RlcE51bSA9IDAgOyBzdGVwTnVtIDw9IGxvY2FsUGF0aE5vZGUuc3RlcHMubGVuZ3RoIC0gMSA7IHN0ZXBOdW0rKykge1xuICAgICAgICBcbiAgICAgICAgICAgIG5leHRTdGVwTm9kZSA9IGxvY2FsUGF0aE5vZGUuc3RlcHNbc3RlcE51bV07XG4gICAgICAgICAgICBpZiAobmV4dFN0ZXBOb2RlLnR5cGUgPT09IFwiaW5kZXhTdGVwXCIpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldEluZGV4U3RlcE5vZGUobmV4dFN0ZXBOb2RlLCAkY3VyckVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXh0U3RlcE5vZGUudHlwZSA9PT0gXCJpbmRpcmVjdGlvblN0ZXBcIikge1xuXG4gICAgICAgICAgICAgICAgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRJbmRpcmVjdGlvblN0ZXBOb2RlKG5leHRTdGVwTm9kZSwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGb3VuZCB0aGUgY29udGVudCBkb2N1bWVudCBocmVmIHJlZmVyZW5jZWQgYnkgdGhlIHNwaW5lIGl0ZW0gXG4gICAgICAgICAgICBpZiAoJGN1cnJFbGVtZW50LmlzKFwiaXRlbXJlZlwiKSkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIEluc3RydWN0aW9ucy5yZXRyaWV2ZUl0ZW1SZWZIcmVmKCRjdXJyRWxlbWVudCwgJHBhY2thZ2VEb2N1bWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJwcmV0ZXJcbiIsIi8vIFRoaW4gd3JhcHBlciBhcm91bmQgdGhlIHBhcnNlcidzIGdlbmVyYXRlZCBmaWxlXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL3BhcnNlci9lcHViLWNmaS5qcycpXG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjIuMS4zXG4gKiBodHRwOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IDIwMDUsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNC0xMi0xOFQxNToxMVpcbiAqL1xuXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXG4vL1xuXG52YXIgYXJyID0gW107XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxudmFyXG5cdC8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveClcblx0ZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXG5cblx0dmVyc2lvbiA9IFwiMi4xLjNcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3Jcblx0c2VsZWN0b3I6IFwiXCIsXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXHRcdHJldHVybiBudW0gIT0gbnVsbCA/XG5cblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdCggbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDpcblxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHQvLyAoWW91IGNhbiBzZWVkIHRoZSBhcmd1bWVudHMgd2l0aCBhbiBhcnJheSBvZiBhcmdzLCBidXQgdGhpcyBpc1xuXHQvLyBvbmx5IHVzZWQgaW50ZXJuYWxseS4pXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXJncyApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrLCBhcmdzICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9KSk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1tqXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAob3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdKSAhPSBudWxsICkge1xuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoY29weSkpICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKG9iaikgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0Ly8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICsgMSkgPj0gMDtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIE5vdCBwbGFpbiBvYmplY3RzOlxuXHRcdC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcblx0XHQvLyAtIERPTSBub2Rlc1xuXHRcdC8vIC0gd2luZG93XG5cdFx0aWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCBvYmouY29uc3RydWN0b3IgJiZcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIiApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgcmV0dXJuZWQgYWxyZWFkeSwgd2UncmUgY29uZmlkZW50IHRoYXRcblx0XHQvLyB8b2JqfCBpcyBhIHBsYWluIG9iamVjdCwgY3JlYXRlZCBieSB7fSBvciBjb25zdHJ1Y3RlZCB3aXRoIG5ldyBPYmplY3Rcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjAsIGlPUzw2IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwob2JqKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHR2YXIgc2NyaXB0LFxuXHRcdFx0aW5kaXJlY3QgPSBldmFsO1xuXG5cdFx0Y29kZSA9IGpRdWVyeS50cmltKCBjb2RlICk7XG5cblx0XHRpZiAoIGNvZGUgKSB7XG5cdFx0XHQvLyBJZiB0aGUgY29kZSBpbmNsdWRlcyBhIHZhbGlkLCBwcm9sb2d1ZSBwb3NpdGlvblxuXHRcdFx0Ly8gc3RyaWN0IG1vZGUgcHJhZ21hLCBleGVjdXRlIGNvZGUgYnkgaW5qZWN0aW5nIGFcblx0XHRcdC8vIHNjcmlwdCB0YWcgaW50byB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpZiAoIGNvZGUuaW5kZXhPZihcInVzZSBzdHJpY3RcIikgPT09IDEgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG5cdFx0XHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBhdm9pZCB0aGUgRE9NIG5vZGUgY3JlYXRpb24sIGluc2VydGlvblxuXHRcdFx0Ly8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcblx0XHRcdFx0aW5kaXJlY3QoIGNvZGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSxcblxuXHQvLyBhcmdzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrLCBhcmdzICkge1xuXHRcdHZhciB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aCxcblx0XHRcdGlzQXJyYXkgPSBpc0FycmF5bGlrZSggb2JqICk7XG5cblx0XHRpZiAoIGFyZ3MgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXkgKSB7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suYXBwbHkoIG9ialsgaSBdLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBIHNwZWNpYWwsIGZhc3QsIGNhc2UgZm9yIHRoZSBtb3N0IGNvbW1vbiB1c2Ugb2YgZWFjaFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGlzQXJyYXkgKSB7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICk7XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5bGlrZSggT2JqZWN0KGFycikgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBlbGVtcyApLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0pO1xuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oaSwgbmFtZSkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG5mdW5jdGlvbiBpc0FycmF5bGlrZSggb2JqICkge1xuXHR2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBvYmoubm9kZVR5cGUgPT09IDEgJiYgbGVuZ3RoICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjIuMC1wcmVcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IDIwMDgsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNC0xMi0xNlxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zeW50YXgvI2NoYXJhY3RlcnNcblx0Y2hhcmFjdGVyRW5jb2RpbmcgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIExvb3NlbHkgbW9kZWxlZCBvbiBDU1MgaWRlbnRpZmllciBjaGFyYWN0ZXJzXG5cdC8vIEFuIHVucXVvdGVkIHZhbHVlIHNob3VsZCBiZSBhIENTUyBpZGVudGlmaWVyIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdC8vIFByb3BlciBzeW50YXg6IGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidyNcIiApLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncqXCIgKSArIFwiKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXHRyZXNjYXBlID0gLyd8XFxcXC9nLFxuXG5cdC8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbWF0Y2gsIGVsZW0sIG0sIG5vZGVUeXBlLFxuXHRcdC8vIFFTQSB2YXJzXG5cdFx0aSwgZ3JvdXBzLCBvbGQsIG5pZCwgbmV3Q29udGV4dCwgbmV3U2VsZWN0b3I7XG5cblx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXHRub2RlVHlwZSA9IGNvbnRleHQubm9kZVR5cGU7XG5cblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHRpZiAoICFzZWVkICYmIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyB3aGVuIHBvc3NpYmxlIChlLmcuLCBub3QgdW5kZXIgRG9jdW1lbnRGcmFnbWVudClcblx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIiNJRFwiKVxuXHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApO1xuXHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoalF1ZXJ5ICM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUsIE9wZXJhLCBhbmQgV2Via2l0IHJldHVybiBpdGVtc1xuXHRcdFx0XHRcdFx0Ly8gYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIENvbnRleHQgaXMgbm90IGEgZG9jdW1lbnRcblx0XHRcdFx0XHRpZiAoIGNvbnRleHQub3duZXJEb2N1bWVudCAmJiAoZWxlbSA9IGNvbnRleHQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJiBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIlRBR1wiKVxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIuQ0xBU1NcIilcblx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUVNBIHBhdGhcblx0XHRpZiAoIHN1cHBvcnQucXNhICYmICghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cdFx0XHRuaWQgPSBvbGQgPSBleHBhbmRvO1xuXHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRuZXdTZWxlY3RvciA9IG5vZGVUeXBlICE9PSAxICYmIHNlbGVjdG9yO1xuXG5cdFx0XHQvLyBxU0Egd29ya3Mgc3RyYW5nZWx5IG9uIEVsZW1lbnQtcm9vdGVkIHF1ZXJpZXNcblx0XHRcdC8vIFdlIGNhbiB3b3JrIGFyb3VuZCB0aGlzIGJ5IHNwZWNpZnlpbmcgYW4gZXh0cmEgSUQgb24gdGhlIHJvb3Rcblx0XHRcdC8vIGFuZCB3b3JraW5nIHVwIGZyb20gdGhlcmUgKFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGUgdGVjaG5pcXVlKVxuXHRcdFx0Ly8gSUUgOCBkb2Vzbid0IHdvcmsgb24gb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cblx0XHRcdFx0aWYgKCAob2xkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSkgKSB7XG5cdFx0XHRcdFx0bmlkID0gb2xkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCBuaWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRuaWQgPSBcIltpZD0nXCIgKyBuaWQgKyBcIiddIFwiO1xuXG5cdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRncm91cHNbaV0gPSBuaWQgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dDtcblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbihcIixcIik7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2gocXNhRXJyb3IpIHtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoICFvbGQgKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7RnVuY3Rpb24oc3RyaW5nLCBPYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGRpdiBhbmQgZXhwZWN0cyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGRpdiApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZGl2LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZGl2ICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIElmIG5vIGRvY3VtZW50IGFuZCBkb2N1bWVudEVsZW1lbnQgaXMgYXZhaWxhYmxlLCByZXR1cm5cblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBTZXQgb3VyIGRvY3VtZW50XG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0cGFyZW50ID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdC8vIFN1cHBvcnQ6IElFPjhcblx0Ly8gSWYgaWZyYW1lIGRvY3VtZW50IGlzIGFzc2lnbmVkIHRvIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSBhbmQgaWYgaWZyYW1lIGhhcyBiZWVuIHJlbG9hZGVkLFxuXHQvLyBJRSB3aWxsIHRocm93IFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIGFjY2Vzc2luZyBcImRvY3VtZW50XCIgdmFyaWFibGUsIHNlZSBqUXVlcnkgIzEzOTM2XG5cdC8vIElFNi04IGRvIG5vdCBzdXBwb3J0IHRoZSBkZWZhdWx0VmlldyBwcm9wZXJ0eSBzbyBwYXJlbnQgd2lsbCBiZSB1bmRlZmluZWRcblx0aWYgKCBwYXJlbnQgJiYgcGFyZW50ICE9PSBwYXJlbnQudG9wICkge1xuXHRcdC8vIElFMTEgZG9lcyBub3QgaGF2ZSBhdHRhY2hFdmVudCwgc28gYWxsIG11c3Qgc3VmZmVyXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXHRcdH0gZWxzZSBpZiAoIHBhcmVudC5hdHRhY2hFdmVudCApIHtcblx0XHRcdHBhcmVudC5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogU3VwcG9ydCB0ZXN0c1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2MgKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZGl2LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jLmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbmQgYW5kIGZpbHRlclxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcblx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2M1xuXHRcdFx0XHRyZXR1cm4gbSAmJiBtLnBhcmVudE5vZGUgPyBbIG0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdC8vIFN1cHBvcnQ6IElFNi83XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdGRlbGV0ZSBFeHByLmZpbmRbXCJJRFwiXTtcblxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2MucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXGZdJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC4yKywgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjcrXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRkaXYucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgXCJkaXZcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGRpdiwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBkb2VzIG5vdCBpbXBsZW1lbnQgaW5jbHVzaXZlIGRlc2NlbmRlbnRcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jIHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jIHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2MgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvYyA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvYztcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgZGlmZiwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBwYXJlbnRbIGV4cGFuZG8gXSB8fCAocGFyZW50WyBleHBhbmRvIF0gPSB7fSk7XG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsxXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzJdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHVzZUNhY2hlICYmIChjYWNoZSA9IChlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSkgJiYgY2FjaGVbMF0gPT09IGRpcnJ1bnMgKSB7XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVsxXTtcblxuXHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKSBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJiArK2RpZmYgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQobm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTtcblx0XHR9LFxuXG5cdFx0XCJkaXNhYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBkaXIgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cdFx0XHRcdFx0XHRpZiAoIChvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGRpciBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgIT09IGRvY3VtZW50ICYmIGNvbnRleHQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBLZWVwIGBpYCBhIHN0cmluZyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMgc28gYG1hdGNoZWRDb3VudGAgd2lsbCBiZSBcIjAwXCIgYmVsb3dcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG5vIHNlZWQgYW5kIG9ubHkgb25lIGdyb3VwXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gVGFrZSBhIHNob3J0Y3V0IGFuZCBzZXQgdGhlIGNvbnRleHQgaWYgdGhlIHJvb3Qgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHRyc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcbmpRdWVyeS5leHByW1wiOlwiXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xuXG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKC9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9KTtcblxuXHR9XG5cblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyID09PSBcInN0cmluZ1wiICkge1xuXHRcdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHRcdH1cblxuXHRcdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPj0gMCApICE9PSBub3Q7XG5cdH0pO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW10gOlxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0XHR9KSk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KSApO1xuXHRcdH1cblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0Ly8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xuXHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUpICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0qKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWzBdID09PSBcIjxcIiAmJiBzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJiBzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmIChtYXRjaFsxXSB8fCAhY29udGV4dCkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbMV0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WzBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbMV0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbMV0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbMl0gKTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEJsYWNrYmVycnkgNC42XG5cdFx0XHRcdFx0Ly8gZ0VCSUQgcmV0dXJucyBub2RlcyBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICgjNjk2Mylcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHRcdHRoaXNbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdGpRdWVyeSApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiByb290alF1ZXJ5LnJlYWR5ICE9PSBcInVuZGVmaW5lZFwiID9cblx0XHRcdFx0cm9vdGpRdWVyeS5yZWFkeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3Iuc2VsZWN0b3IgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3Rvcjtcblx0XHRcdHRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdGRpcjogZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1hdGNoZWQ7XG5cdH0sXG5cblx0c2libGluZzogZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRcdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZWQ7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbaV0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0Zm9yICggY3VyID0gdGhpc1tpXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmIChwb3MgP1xuXHRcdFx0XHRcdHBvcy5pbmRleChjdXIpID4gLTEgOlxuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoY3VyLCBzZWxlY3RvcnMpKSApIHtcblxuXHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZShcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHNlbGVjdG9yKVxuXHRcdCk7XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoY3VyID0gY3VyW2Rpcl0pICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnNpYmxpbmcoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlKCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSk7XG52YXIgcm5vdHdoaXRlID0gKC9cXFMrL2cpO1xuXG5cblxuLy8gU3RyaW5nIHRvIE9iamVjdCBvcHRpb25zIGZvcm1hdCBjYWNoZVxudmFyIG9wdGlvbnNDYWNoZSA9IHt9O1xuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lcyBhbmQgc3RvcmUgaW4gY2FjaGVcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0KCBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSB8fCBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gTGFzdCBmaXJlIHZhbHVlIChmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzKVxuXHRcdG1lbW9yeSxcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cdFx0Ly8gRmlyc3QgY2FsbGJhY2sgdG8gZmlyZSAodXNlZCBpbnRlcm5hbGx5IGJ5IGFkZCBhbmQgZmlyZVdpdGgpXG5cdFx0ZmlyaW5nU3RhcnQsXG5cdFx0Ly8gRW5kIG9mIHRoZSBsb29wIHdoZW4gZmlyaW5nXG5cdFx0ZmlyaW5nTGVuZ3RoLFxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IHJlbW92ZSBpZiBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXgsXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cdFx0Ly8gU3RhY2sgb2YgZmlyZSBjYWxscyBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHN0YWNrID0gIW9wdGlvbnMub25jZSAmJiBbXSxcblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdG1lbW9yeSA9IG9wdGlvbnMubWVtb3J5ICYmIGRhdGE7XG5cdFx0XHRmaXJlZCA9IHRydWU7XG5cdFx0XHRmaXJpbmdJbmRleCA9IGZpcmluZ1N0YXJ0IHx8IDA7XG5cdFx0XHRmaXJpbmdTdGFydCA9IDA7XG5cdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IGxpc3QgJiYgZmlyaW5nSW5kZXggPCBmaXJpbmdMZW5ndGg7IGZpcmluZ0luZGV4KysgKSB7XG5cdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggZGF0YVsgMCBdLCBkYXRhWyAxIF0gKSA9PT0gZmFsc2UgJiYgb3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTsgLy8gVG8gcHJldmVudCBmdXJ0aGVyIGNhbGxzIHVzaW5nIGFkZFxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0aWYgKCBzdGFjayApIHtcblx0XHRcdFx0XHRpZiAoIHN0YWNrLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGZpcmUoIHN0YWNrLnNoaWZ0KCkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHQvLyBGaXJzdCwgd2Ugc2F2ZSB0aGUgY3VycmVudCBsZW5ndGhcblx0XHRcdFx0XHR2YXIgc3RhcnQgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHQoZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHQvLyBEbyB3ZSBuZWVkIHRvIGFkZCB0aGUgY2FsbGJhY2tzIHRvIHRoZVxuXHRcdFx0XHRcdC8vIGN1cnJlbnQgZmlyaW5nIGJhdGNoP1xuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0Ly8gV2l0aCBtZW1vcnksIGlmIHdlJ3JlIG5vdCBmaXJpbmcgdGhlblxuXHRcdFx0XHRcdC8vIHdlIHNob3VsZCBjYWxsIHJpZ2h0IGF3YXlcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdTdGFydCA9IHN0YXJ0O1xuXHRcdFx0XHRcdFx0ZmlyZSggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdMZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGgtLTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/IGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOiAhISggbGlzdCAmJiBsaXN0Lmxlbmd0aCApO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHRmaXJpbmdMZW5ndGggPSAwO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBIYXZlIHRoZSBsaXN0IGRvIG5vdGhpbmcgYW55bW9yZVxuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSXMgaXQgZGlzYWJsZWQ/XG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cdFx0XHQvLyBMb2NrIHRoZSBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3RhY2sgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBJcyBpdCBsb2NrZWQ/XG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIXN0YWNrO1xuXHRcdFx0fSxcblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZmlyZSggYXJncyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlamVjdGVkXCIgXSxcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIikgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMV0gXShmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsIGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9KS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9KTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXG5cblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fCAoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxuXHRcdFx0ZGVmZXJyZWQgPSByZW1haW5pbmcgPT09IDEgPyBzdWJvcmRpbmF0ZSA6IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGksIGNvbnRleHRzLCB2YWx1ZXMgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0dmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cblx0XHQvLyBBZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0IClcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG59KTtcblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3Q7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XG5cdFx0fVxuXHR9XG59KTtcblxuLyoqXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xuXHRpZiAoICFyZWFkeUxpc3QgKSB7XG5cblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxuXHRcdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuXHRcdC8vIFdlIG9uY2UgdHJpZWQgdG8gdXNlIHJlYWR5U3RhdGUgXCJpbnRlcmFjdGl2ZVwiIGhlcmUsIGJ1dCBpdCBjYXVzZWQgaXNzdWVzIGxpa2UgdGhlIG9uZVxuXHRcdC8vIGRpc2NvdmVyZWQgYnkgQ2hyaXNTIGhlcmU6IGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMjgyI2NvbW1lbnQ6MTVcblx0XHRpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiApIHtcblx0XHRcdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHRcdFx0c2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXG5cdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XG59O1xuXG4vLyBLaWNrIG9mZiB0aGUgRE9NIHJlYWR5IGNoZWNrIGV2ZW4gaWYgdGhlIHVzZXIgZG9lcyBub3RcbmpRdWVyeS5yZWFkeS5wcm9taXNlKCk7XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0galF1ZXJ5LmFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0alF1ZXJ5LmFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbaV0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKCBlbGVtc1tpXSwga2V5LCByYXcgPyB2YWx1ZSA6IHZhbHVlLmNhbGwoIGVsZW1zW2ldLCBpLCBmbiggZWxlbXNbaV0sIGtleSApICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2hhaW5hYmxlID9cblx0XHRlbGVtcyA6XG5cblx0XHQvLyBHZXRzXG5cdFx0YnVsayA/XG5cdFx0XHRmbi5jYWxsKCBlbGVtcyApIDpcblx0XHRcdGxlbiA/IGZuKCBlbGVtc1swXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gb2JqZWN0IGNhbiBoYXZlIGRhdGFcbiAqL1xualF1ZXJ5LmFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHQvKiBqc2hpbnQgLVcwMTggKi9cblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQsXG5cdC8vIE9sZCBXZWJLaXQgZG9lcyBub3QgaGF2ZSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMvZnJlZXplIG1ldGhvZCxcblx0Ly8gcmV0dXJuIG5ldyBlbXB0eSBvYmplY3QgaW5zdGVhZCB3aXRoIG5vIFtbc2V0XV0gYWNjZXNzb3Jcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLmNhY2hlID0ge30sIDAsIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHt9O1xuXHRcdH1cblx0fSk7XG5cblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5EYXRhLmFjY2VwdHMgPSBqUXVlcnkuYWNjZXB0RGF0YTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cdGtleTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0Ly8gQWx3YXlzIHJldHVybiB0aGUga2V5IGZvciBhIGZyb3plbiBvYmplY3QuXG5cdFx0aWYgKCAhRGF0YS5hY2NlcHRzKCBvd25lciApICkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGRlc2NyaXB0b3IgPSB7fSxcblx0XHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZSBrZXlcblx0XHRcdHVubG9jayA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXVubG9jayApIHtcblx0XHRcdHVubG9jayA9IERhdGEudWlkKys7XG5cblx0XHRcdC8vIFNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUgcHJvcGVydHlcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRlc2NyaXB0b3JbIHRoaXMuZXhwYW5kbyBdID0geyB2YWx1ZTogdW5sb2NrIH07XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBvd25lciwgZGVzY3JpcHRvciApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDRcblx0XHRcdC8vIEZhbGxiYWNrIHRvIGEgbGVzcyBzZWN1cmUgZGVmaW5pdGlvblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdGRlc2NyaXB0b3JbIHRoaXMuZXhwYW5kbyBdID0gdW5sb2NrO1xuXHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBvd25lciwgZGVzY3JpcHRvciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0aWYgKCAhdGhpcy5jYWNoZVsgdW5sb2NrIF0gKSB7XG5cdFx0XHR0aGlzLmNhY2hlWyB1bmxvY2sgXSA9IHt9O1xuXHRcdH1cblxuXHRcdHJldHVybiB1bmxvY2s7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdC8vIFRoZXJlIG1heSBiZSBhbiB1bmxvY2sgYXNzaWduZWQgdG8gdGhpcyBub2RlLFxuXHRcdFx0Ly8gaWYgdGhlcmUgaXMgbm8gZW50cnkgZm9yIHRoaXMgXCJvd25lclwiLCBjcmVhdGUgb25lIGlubGluZVxuXHRcdFx0Ly8gYW5kIHNldCB0aGUgdW5sb2NrIGFzIHRob3VnaCBhbiBvd25lciBlbnRyeSBoYWQgYWx3YXlzIGV4aXN0ZWRcblx0XHRcdHVubG9jayA9IHRoaXMua2V5KCBvd25lciApLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlWyB1bmxvY2sgXTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGRhdGEgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gRnJlc2ggYXNzaWdubWVudHMgYnkgb2JqZWN0IGFyZSBzaGFsbG93IGNvcGllZFxuXHRcdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggdGhpcy5jYWNoZVsgdW5sb2NrIF0sIGRhdGEgKTtcblx0XHRcdC8vIE90aGVyd2lzZSwgY29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0XHRjYWNoZVsgcHJvcCBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHQvLyBFaXRoZXIgYSB2YWxpZCBjYWNoZSBpcyBmb3VuZCwgb3Igd2lsbCBiZSBjcmVhdGVkLlxuXHRcdC8vIE5ldyBjYWNoZXMgd2lsbCBiZSBjcmVhdGVkIGFuZCB0aGUgdW5sb2NrIHJldHVybmVkLFxuXHRcdC8vIGFsbG93aW5nIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5ld2x5IGNyZWF0ZWRcblx0XHQvLyBlbXB0eSBkYXRhIG9iamVjdC4gQSB2YWxpZCBvd25lciBvYmplY3QgbXVzdCBiZSBwcm92aWRlZC5cblx0XHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlWyB0aGlzLmtleSggb3duZXIgKSBdO1xuXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdGNhY2hlIDogY2FjaGVbIGtleSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgc3RvcmVkO1xuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCgoa2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIpICYmIHZhbHVlID09PSB1bmRlZmluZWQpICkge1xuXG5cdFx0XHRzdG9yZWQgPSB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXG5cdFx0XHRyZXR1cm4gc3RvcmVkICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRzdG9yZWQgOiB0aGlzLmdldCggb3duZXIsIGpRdWVyeS5jYW1lbENhc2Uoa2V5KSApO1xuXHRcdH1cblxuXHRcdC8vIFsqXVdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSwgbmFtZSwgY2FtZWwsXG5cdFx0XHR1bmxvY2sgPSB0aGlzLmtleSggb3duZXIgKSxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZVsgdW5sb2NrIF07XG5cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5jYWNoZVsgdW5sb2NrIF0gPSB7fTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSgga2V5ICkgKSB7XG5cdFx0XHRcdC8vIElmIFwibmFtZVwiIGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2hlbiBkYXRhIGlzIGluaXRpYWxseSBjcmVhdGVkLCB2aWEgKFwia2V5XCIsIFwidmFsXCIpIHNpZ25hdHVyZSxcblx0XHRcdFx0Ly8ga2V5cyB3aWxsIGJlIGNvbnZlcnRlZCB0byBjYW1lbENhc2UuXG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlXG5cdFx0XHRcdC8vIGJvdGggcGxhaW4ga2V5IGFuZCBjYW1lbENhc2Uga2V5LiAjMTI3ODZcblx0XHRcdFx0Ly8gVGhpcyB3aWxsIG9ubHkgcGVuYWxpemUgdGhlIGFycmF5IGFyZ3VtZW50IHBhdGguXG5cdFx0XHRcdG5hbWUgPSBrZXkuY29uY2F0KCBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbWVsID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cdFx0XHRcdC8vIFRyeSB0aGUgc3RyaW5nIGFzIGEga2V5IGJlZm9yZSBhbnkgbWFuaXB1bGF0aW9uXG5cdFx0XHRcdGlmICgga2V5IGluIGNhY2hlICkge1xuXHRcdFx0XHRcdG5hbWUgPSBbIGtleSwgY2FtZWwgXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRuYW1lID0gY2FtZWw7XG5cdFx0XHRcdFx0bmFtZSA9IG5hbWUgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFx0WyBuYW1lIF0gOiAoIG5hbWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aSA9IG5hbWUubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsgbmFtZVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0cmV0dXJuICFqUXVlcnkuaXNFbXB0eU9iamVjdChcblx0XHRcdHRoaXMuY2FjaGVbIG93bmVyWyB0aGlzLmV4cGFuZG8gXSBdIHx8IHt9XG5cdFx0KTtcblx0fSxcblx0ZGlzY2FyZDogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdGlmICggb3duZXJbIHRoaXMuZXhwYW5kbyBdICkge1xuXHRcdFx0ZGVsZXRlIHRoaXMuY2FjaGVbIG93bmVyWyB0aGlzLmV4cGFuZG8gXSBdO1xuXHRcdH1cblx0fVxufTtcbnZhciBkYXRhX3ByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YV91c2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC8oW0EtWl0pL2c7XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kMVwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcblx0XHRcdFx0XHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRcdFx0XHRcdCtkYXRhICsgXCJcIiA9PT0gZGF0YSA/ICtkYXRhIDpcblx0XHRcdFx0XHRyYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDpcblx0XHRcdFx0XHRkYXRhO1xuXHRcdFx0fSBjYXRjaCggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YV91c2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFfdXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YV9wcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YV91c2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFfdXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhX3ByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YV9wcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTErXG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKDUpICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFfcHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGEsXG5cdFx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgYXMtaXNcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGNhbWVsaXplZFxuXHRcdFx0XHRkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSwgY2FtZWxLZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwgY2FtZWxLZXksIHVuZGVmaW5lZCApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gRmlyc3QsIGF0dGVtcHQgdG8gc3RvcmUgYSBjb3B5IG9yIHJlZmVyZW5jZSBvZiBhbnlcblx0XHRcdFx0Ly8gZGF0YSB0aGF0IG1pZ2h0J3ZlIGJlZW4gc3RvcmUgd2l0aCBhIGNhbWVsQ2FzZWQga2V5LlxuXHRcdFx0XHR2YXIgZGF0YSA9IGRhdGFfdXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7XG5cblx0XHRcdFx0Ly8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xuXHRcdFx0XHQvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLlxuXHRcdFx0XHQvLyBUaGlzIG1pZ2h0IG5vdCBhcHBseSB0byBhbGwgcHJvcGVydGllcy4uLipcblx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywgY2FtZWxLZXksIHZhbHVlICk7XG5cblx0XHRcdFx0Ly8gKi4uLiBJbiB0aGUgY2FzZSBvZiBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgX2FjdHVhbGx5X1xuXHRcdFx0XHQvLyBoYXZlIGRhc2hlcywgd2UgbmVlZCB0byBhbHNvIHN0b3JlIGEgY29weSBvZiB0aGF0XG5cdFx0XHRcdC8vIHVuY2hhbmdlZCBwcm9wZXJ0eS5cblx0XHRcdFx0aWYgKCBrZXkuaW5kZXhPZihcIi1cIikgIT09IC0xICYmIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFfdXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0pO1xuXHR9XG59KTtcblxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheShkYXRhKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9KVxuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWzBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbMF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9KTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFfcHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0pO1xudmFyIHBudW0gPSAoL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8pLnNvdXJjZTtcblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW4gPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cdFx0Ly8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCIgfHwgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdH07XG5cbnZhciByY2hlY2thYmxlVHlwZSA9ICgvXig/OmNoZWNrYm94fHJhZGlvKSQvaSk7XG5cblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogU2FmYXJpPD01LjEsIEFuZHJvaWQ8NC4yXG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSkoKTtcbnZhciBzdHJ1bmRlZmluZWQgPSB0eXBlb2YgdW5kZWZpbmVkO1xuXG5cblxuc3VwcG9ydC5mb2N1c2luQnViYmxlcyA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51KXxjbGljay8sXG5cdHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KSQvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggIShldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBzdHJ1bmRlZmluZWQgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbMl0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCh7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKFwiLlwiKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggIShoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fCBzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhX3ByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFfcHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbMl0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWzJdICYmIG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGVsZXRlIGVsZW1EYXRhLmhhbmRsZTtcblx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFwiZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZihcIi5cIikgPj0gMCApIHtcblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KFwiLlwiKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKFwiOlwiKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKFwiLlwiKTtcblx0XHRldmVudC5uYW1lc3BhY2VfcmUgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoY3VyID0gZXZlbnRQYXRoW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhX3ByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiYgZGF0YV9wcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGpRdWVyeS5hY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoIXNwZWNpYWwuX2RlZmF1bHQgfHwgc3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlKSAmJlxuXHRcdFx0XHRqUXVlcnkuYWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhX3ByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbMF0gPSBldmVudDtcblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoIChtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdKSAmJiAhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5uYW1lc3BhY2VfcmUgfHwgZXZlbnQubmFtZXNwYWNlX3JlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoIChqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30pLmhhbmRsZSB8fCBoYW5kbGVPYmouaGFuZGxlciApXG5cdFx0XHRcdFx0XHRcdC5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZXZlbnQucmVzdWx0ID0gcmV0KSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBtYXRjaGVzLCBzZWwsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcblx0XHQvLyBBdm9pZCBub24tbGVmdC1jbGljayBidWJibGluZyBpbiBGaXJlZm94ICgjMzg2MSlcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmICghZXZlbnQuYnV0dG9uIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIikgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcyA9IFtdO1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPj0gMCA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlcy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogdGhpcywgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHQvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudFxuXHRwcm9wczogXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIi5zcGxpdChcIiBcIiksXG5cblx0Zml4SG9va3M6IHt9LFxuXG5cdGtleUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KFwiIFwiKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0bW91c2VIb29rczoge1xuXHRcdHByb3BzOiBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiLnNwbGl0KFwiIFwiKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cdFx0XHR2YXIgZXZlbnREb2MsIGRvYywgYm9keSxcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uO1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xuXHRcdFx0XHRldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xuXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArICggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICsgKCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCAhZml4SG9vayApIHtcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XG5cdFx0XHRcdHt9O1xuXHRcdH1cblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xuXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cblx0XHRpID0gY29weS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBDb3Jkb3ZhIDIuNSAoV2ViS2l0KSAoIzEzMjU1KVxuXHRcdC8vIEFsbCBldmVudHMgc2hvdWxkIGhhdmUgYSB0YXJnZXQ7IENvcmRvdmEgZGV2aWNlcmVhZHkgZG9lc24ndFxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjArLCBDaHJvbWU8Mjhcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCwgYnViYmxlICkge1xuXHRcdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZS5cblx0XHQvLyBGYWtlIG9yaWdpbmFsRXZlbnQgdG8gYXZvaWQgZG9ub3IncyBzdG9wUHJvcGFnYXRpb24sIGJ1dCBpZiB0aGVcblx0XHQvLyBzaW11bGF0ZWQgZXZlbnQgcHJldmVudHMgZGVmYXVsdCB0aGVuIHdlIGRvIHRoZSBzYW1lIG9uIHRoZSBkb25vci5cblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWUsXG5cdFx0XHRcdG9yaWdpbmFsRXZlbnQ6IHt9XG5cdFx0XHR9XG5cdFx0KTtcblx0XHRpZiAoIGJ1YmJsZSApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5jYWxsKCBlbGVtLCBlICk7XG5cdFx0fVxuXHRcdGlmICggZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSwgZmFsc2UgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmIGUucHJldmVudERlZmF1bHQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIFN1cHBvcnQ6IENocm9tZSAxNStcbmpRdWVyeS5lYWNoKHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59KTtcblxuLy8gU3VwcG9ydDogRmlyZWZveCwgQ2hyb21lLCBTYWZhcmlcbi8vIENyZWF0ZSBcImJ1YmJsaW5nXCIgZm9jdXMgYW5kIGJsdXIgZXZlbnRzXG5pZiAoICFzdXBwb3J0LmZvY3VzaW5CdWJibGVzICkge1xuXHRqUXVlcnkuZWFjaCh7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApLCB0cnVlICk7XG5cdFx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAvKklOVEVSTkFMKi8gb25lICkge1xuXHRcdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0XHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9uKCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXHRcdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRcdGZuID0gZGF0YTtcblx0XHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0XHRvcmlnRm4gPSBmbjtcblx0XHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdH07XG5cdFx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHRcdH0pO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgPyBoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOiBoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9KTtcblx0fSxcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9KTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1swXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0pO1xuXG5cbnZhclxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Ol0rKVtePl0qKVxcLz4vZ2ksXG5cdHJ0YWdOYW1lID0gLzwoW1xcdzpdKykvLFxuXHRyaHRtbCA9IC88fCYjP1xcdys7Lyxcblx0cm5vSW5uZXJodG1sID0gLzwoPzpzY3JpcHR8c3R5bGV8bGluaykvaSxcblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGUgPSAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2csXG5cblx0Ly8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcblx0d3JhcE1hcCA9IHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdFx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRcdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdFx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHRcdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRcdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxuXHR9O1xuXG4vLyBTdXBwb3J0OiBJRTlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiAxLnggY29tcGF0aWJpbGl0eVxuLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5XG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApID9cblxuXHRcdGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0Ym9keVwiKVswXSB8fFxuXHRcdFx0ZWxlbS5hcHBlbmRDaGlsZCggZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKSApIDpcblx0XHRlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpICE9PSBudWxsKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIik7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhX3ByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSwgXCJnbG9iYWxFdmFsXCIsICFyZWZFbGVtZW50cyB8fCBkYXRhX3ByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhX3ByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhX3ByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFfcHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFfdXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFfdXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhX3VzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXHR2YXIgcmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCA/IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0W107XG5cblx0cmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cblx0XHRqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKSA6XG5cdFx0cmV0O1xufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGJ1aWxkRnJhZ21lbnQ6IGZ1bmN0aW9uKCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uICkge1xuXHRcdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdFx0bm9kZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0LCBQaGFudG9tSlNcblx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICk7XG5cblx0XHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGVsZW0ucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdCwgUGhhbnRvbUpTXG5cdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0XHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0XHRpID0gMDtcblx0XHR3aGlsZSAoIChlbGVtID0gbm9kZXNbIGkrKyBdKSApIHtcblxuXHRcdFx0Ly8gIzQwODcgLSBJZiBvcmlnaW4gYW5kIGRlc3RpbmF0aW9uIGVsZW1lbnRzIGFyZSB0aGUgc2FtZSwgYW5kIHRoaXMgaXNcblx0XHRcdC8vIHRoYXQgZWxlbWVudCwgZG8gbm90IGRvIGFueXRoaW5nXG5cdFx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgIT09IC0xICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHRtcFsgaisrIF0pICkge1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmcmFnbWVudDtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSwga2V5LFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IChlbGVtID0gZWxlbXNbIGkgXSkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRrZXkgPSBlbGVtWyBkYXRhX3ByaXYuZXhwYW5kbyBdO1xuXG5cdFx0XHRcdGlmICgga2V5ICYmIChkYXRhID0gZGF0YV9wcml2LmNhY2hlWyBrZXkgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggZGF0YV9wcml2LmNhY2hlWyBrZXkgXSApIHtcblx0XHRcdFx0XHRcdC8vIERpc2NhcmQgYW55IHJlbWFpbmluZyBgcHJpdmF0ZWAgZGF0YVxuXHRcdFx0XHRcdFx0ZGVsZXRlIGRhdGFfcHJpdi5jYWNoZVsga2V5IF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBEaXNjYXJkIGFueSByZW1haW5pbmcgYHVzZXJgIGRhdGFcblx0XHRcdGRlbGV0ZSBkYXRhX3VzZXIuY2FjaGVbIGVsZW1bIGRhdGFfdXNlci5leHBhbmRvIF0gXTtcblx0XHR9XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IsIGtlZXBEYXRhIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0ZWxlbXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCB0aGlzICkgOiB0aGlzLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggIWtlZXBEYXRhICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSApICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSB0aGlzW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0gdmFsdWUucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2goIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1sgMCBdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0dGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGFyZyA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblxuXHRcdFx0aWYgKCBhcmcgKSB7XG5cdFx0XHRcdGFyZy5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEZvcmNlIHJlbW92YWwgaWYgdGhlcmUgd2FzIG5vIG5ldyBjb250ZW50IChlLmcuLCBmcm9tIGVtcHR5IGFyZ3VtZW50cylcblx0XHRyZXR1cm4gYXJnICYmIChhcmcubGVuZ3RoIHx8IGFyZy5ub2RlVHlwZSkgPyB0aGlzIDogdGhpcy5yZW1vdmUoKTtcblx0fSxcblxuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0ZG9tTWFuaXA6IGZ1bmN0aW9uKCBhcmdzLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdFx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZXQgPSB0aGlzLFxuXHRcdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdFx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdFx0dmFyIHNlbGYgPSBzZXQuZXEoIGluZGV4ICk7XG5cdFx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLmRvbU1hbmlwKCBhcmdzLCBjYWxsYmFjayApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCBsICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggYXJncywgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCB0aGlzICk7XG5cdFx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZmlyc3QgKSB7XG5cdFx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW0gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG5cdFx0XHRcdFx0XHRcdC8vIGpRdWVyeS5tZXJnZSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoIHRoaXNbIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHQhZGF0YV9wcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJiBqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICkgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goe1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdFxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59KTtcblxuXG52YXIgaWZyYW1lLFxuXHRlbGVtZGlzcGxheSA9IHt9O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZG9jIERvY3VtZW50IG9iamVjdFxuICovXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xuXHR2YXIgc3R5bGUsXG5cdFx0ZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxuXG5cdFx0Ly8gZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgbWlnaHQgYmUgcmVsaWFibHkgdXNlZCBvbmx5IG9uIGF0dGFjaGVkIGVsZW1lbnRcblx0XHRkaXNwbGF5ID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlICYmICggc3R5bGUgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoIGVsZW1bIDAgXSApICkgP1xuXG5cdFx0XHQvLyBVc2Ugb2YgdGhpcyBtZXRob2QgaXMgYSB0ZW1wb3JhcnkgZml4IChtb3JlIGxpa2Ugb3B0aW1pemF0aW9uKSB1bnRpbCBzb21ldGhpbmcgYmV0dGVyIGNvbWVzIGFsb25nLFxuXHRcdFx0Ly8gc2luY2UgaXQgd2FzIHJlbW92ZWQgZnJvbSBzcGVjaWZpY2F0aW9uIGFuZCBzdXBwb3J0ZWQgb25seSBpbiBGRlxuXHRcdFx0c3R5bGUuZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW1bIDAgXSwgXCJkaXNwbGF5XCIgKTtcblxuXHQvLyBXZSBkb24ndCBoYXZlIGFueSBkYXRhIHN0b3JlZCBvbiB0aGUgZWxlbWVudCxcblx0Ly8gc28gdXNlIFwiZGV0YWNoXCIgbWV0aG9kIGFzIGZhc3Qgd2F5IHRvIGdldCByaWQgb2YgdGhlIGVsZW1lbnRcblx0ZWxlbS5kZXRhY2goKTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuLyoqXG4gKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHtcblx0dmFyIGRvYyA9IGRvY3VtZW50LFxuXHRcdGRpc3BsYXkgPSBlbGVtZGlzcGxheVsgbm9kZU5hbWUgXTtcblxuXHRpZiAoICFkaXNwbGF5ICkge1xuXHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cblx0XHQvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWVcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFkaXNwbGF5ICkge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcblx0XHRcdGlmcmFtZSA9IChpZnJhbWUgfHwgalF1ZXJ5KCBcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz5cIiApKS5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xuXG5cdFx0XHQvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2Vcblx0XHRcdGRvYyA9IGlmcmFtZVsgMCBdLmNvbnRlbnREb2N1bWVudDtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcblx0XHRcdGRvYy53cml0ZSgpO1xuXHRcdFx0ZG9jLmNsb3NlKCk7XG5cblx0XHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XG5cdFx0ZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXHR9XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG52YXIgcm1hcmdpbiA9ICgvXm1hcmdpbi8pO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHQvLyBTdXBwb3J0OiBJRTw9MTErLCBGaXJlZm94PD0zMCsgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdGlmICggZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm9wZW5lciApIHtcblx0XHRcdHJldHVybiBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xuXHRcdH1cblxuXHRcdHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgKCMxMjUzNylcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblx0fVxuXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA8IDZcblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gaU9TIDwgNiAoYXQgbGVhc3QpIHJldHVybnMgcGVyY2VudGFnZSBmb3IgYSBsYXJnZXIgc2V0IG9mIHZhbHVlcywgYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVsc1xuXHRcdC8vIHRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzogaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKHRoaXMuZ2V0ID0gaG9va0ZuKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLFxuXHRcdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7bWFyZ2luLXRvcDoxcHg7XCIgK1xuXHRcdFwicG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpIHtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luLXRvcDoxJTt0b3A6MSU7XCIgK1xuXHRcdFx0XCJib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjRweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiwgbnVsbCApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jRWxlbS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBub2RlLmpzIGpzZG9tXG5cdC8vIERvbid0IGFzc3VtZSB0aGF0IGdldENvbXB1dGVkU3R5bGUgaXMgYSBwcm9wZXJ0eSBvZiB0aGUgZ2xvYmFsIG9iamVjdFxuXHRpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFRoaXMgdGVzdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UgYnV0IHdlIHN0aWxsIGRvIG1lbW9pemluZ1xuXHRcdFx0XHQvLyBzaW5jZSB3ZSBjYW4gdXNlIHRoZSBib3hTaXppbmdSZWxpYWJsZSBwcmUtY29tcHV0aW5nLlxuXHRcdFx0XHQvLyBObyBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0ZXN0IHdhcyBhbHJlYWR5IHBlcmZvcm1lZCwgdGhvdWdoLlxuXHRcdFx0XHRjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCk7XG5cdFx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdFx0fSxcblx0XHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRcdGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0XHR9LFxuXHRcdFx0cmVsaWFibGVNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgZGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseVxuXHRcdFx0XHQvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIuICgjMzMzMylcblx0XHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHRcdC8vIFRoaXMgc3VwcG9ydCBmdW5jdGlvbiBpcyBvbmx5IGV4ZWN1dGVkIG9uY2Ugc28gbm8gbWVtb2l6aW5nIGlzIG5lZWRlZC5cblx0XHRcdFx0dmFyIHJldCxcblx0XHRcdFx0XHRtYXJnaW5EaXYgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcblx0XHRcdFx0bWFyZ2luRGl2LnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0XHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7XCIgK1xuXHRcdFx0XHRcdFwiYm94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xuXHRcdFx0XHRtYXJnaW5EaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBtYXJnaW5EaXYuc3R5bGUud2lkdGggPSBcIjBcIjtcblx0XHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcblx0XHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHRcdFx0cmV0ID0gIXBhcnNlRmxvYXQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBtYXJnaW5EaXYsIG51bGwgKS5tYXJnaW5SaWdodCApO1xuXG5cdFx0XHRcdGRvY0VsZW0ucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHRcdFx0XHRkaXYucmVtb3ZlQ2hpbGQoIG1hcmdpbkRpdiApO1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pKCk7XG5cblxuLy8gQSBtZXRob2QgZm9yIHF1aWNrbHkgc3dhcHBpbmcgaW4vb3V0IENTUyBwcm9wZXJ0aWVzIHRvIGdldCBjb3JyZWN0IGNhbGN1bGF0aW9ucy5cbmpRdWVyeS5zd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGUgZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJudW1zcGxpdCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoLiopJFwiLCBcImlcIiApLFxuXHRycmVsTnVtID0gbmV3IFJlZ0V4cCggXCJeKFsrLV0pPShcIiArIHBudW0gKyBcIilcIiwgXCJpXCIgKSxcblxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJPXCIsIFwiTW96XCIsIFwibXNcIiBdO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSksXG5cdFx0b3JpZ05hbWUgPSBuYW1lLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBzdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvcmlnTmFtZTtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblx0dmFyIG1hdGNoZXMgPSBybnVtc3BsaXQuZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0XHQ0IDpcblx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdFx0bmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cblx0XHR2YWwgPSAwO1xuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXG5cdFx0dmFsID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCh2YWwpICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdFx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblx0fVxuXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXHRcdFx0Ly8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpc1xuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxuXHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xuXHRcdFx0Ly8gZm9yIHN1Y2ggYW4gZWxlbWVudFxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgXCJvbGRkaXNwbGF5XCIsIGRlZmF1bHREaXNwbGF5KGVsZW0ubm9kZU5hbWUpICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XG5cblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgfHwgIWhpZGRlbiApIHtcblx0XHRcdFx0ZGF0YV9wcml2LnNldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIsIGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3Bcblx0Ly8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBzdHlsZSwgb3JpZ05hbWUgKSApO1xuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAocmV0ID0gcnJlbE51bS5leGVjKCB2YWx1ZSApKSApIHtcblx0XHRcdFx0dmFsdWUgPSAoIHJldFsxXSArIDEgKSAqIHJldFsyXSArIHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKSApO1xuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyLCBhZGQgJ3B4JyB0byB0aGUgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSApIHtcblx0XHRcdFx0dmFsdWUgKz0gXCJweFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8ICh2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggZWxlbS5zdHlsZSwgb3JpZ05hbWUgKSApO1xuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBqUXVlcnkuaXNOdW1lcmljKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmIGVsZW0ub2Zmc2V0V2lkdGggPT09IDAgP1xuXHRcdFx0XHRcdGpRdWVyeS5zd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgc3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBleHRyYSA/XG5cdFx0XHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpIDogMFxuXHRcdFx0KTtcblx0XHR9XG5cdH07XG59KTtcblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuc3dhcCggZWxlbSwgeyBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIiB9LFxuXHRcdFx0XHRjdXJDU1MsIFsgZWxlbSwgXCJtYXJnaW5SaWdodFwiIF0gKTtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KFwiIFwiKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBcInN3aW5nXCI7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmXG5cdFx0XHRcdCghdHdlZW4uZWxlbS5zdHlsZSB8fCB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCkgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0uc3R5bGUgJiYgKCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHwgalF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH1cbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cmZ4bnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKSxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC8sXG5cdGFuaW1hdGlvblByZWZpbHRlcnMgPSBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblx0dHdlZW5lcnMgPSB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKSxcblx0XHRcdFx0dGFyZ2V0ID0gdHdlZW4uY3VyKCksXG5cdFx0XHRcdHBhcnRzID0gcmZ4bnVtLmV4ZWMoIHZhbHVlICksXG5cdFx0XHRcdHVuaXQgPSBwYXJ0cyAmJiBwYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0XHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0XHRcdHN0YXJ0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICt0YXJnZXQgKSAmJlxuXHRcdFx0XHRcdHJmeG51bS5leGVjKCBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCBwcm9wICkgKSxcblx0XHRcdFx0c2NhbGUgPSAxLFxuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMjA7XG5cblx0XHRcdGlmICggc3RhcnQgJiYgc3RhcnRbIDMgXSAhPT0gdW5pdCApIHtcblx0XHRcdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdFx0XHR1bml0ID0gdW5pdCB8fCBzdGFydFsgMyBdO1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHRcdFx0cGFydHMgPSBwYXJ0cyB8fCBbXTtcblxuXHRcdFx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdFx0XHRzdGFydCA9ICt0YXJnZXQgfHwgMTtcblxuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdFx0XHRzdGFydCA9IHN0YXJ0IC8gc2NhbGU7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCBwcm9wLCBzdGFydCArIHVuaXQgKTtcblxuXHRcdFx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKSxcblx0XHRcdFx0Ly8gYnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaFxuXHRcdFx0XHR9IHdoaWxlICggc2NhbGUgIT09IChzY2FsZSA9IHR3ZWVuLmN1cigpIC8gdGFyZ2V0KSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXBkYXRlIHR3ZWVuIHByb3BlcnRpZXNcblx0XHRcdGlmICggcGFydHMgKSB7XG5cdFx0XHRcdHN0YXJ0ID0gdHdlZW4uc3RhcnQgPSArc3RhcnQgfHwgK3RhcmdldCB8fCAwO1xuXHRcdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdFx0Ly8gSWYgYSArPS8tPSB0b2tlbiB3YXMgcHJvdmlkZWQsIHdlJ3JlIGRvaW5nIGEgcmVsYXRpdmUgYW5pbWF0aW9uXG5cdFx0XHRcdHR3ZWVuLmVuZCA9IHBhcnRzWyAxIF0gP1xuXHRcdFx0XHRcdHN0YXJ0ICsgKCBwYXJ0c1sgMSBdICsgMSApICogcGFydHNbIDIgXSA6XG5cdFx0XHRcdFx0K3BhcnRzWyAyIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fTtcblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0pO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0IDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIHR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIHR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkpICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gSGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBIZWlnaHQvd2lkdGggb3ZlcmZsb3cgcGFzc1xuXHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcImhlaWdodFwiIGluIHByb3BzIHx8IFwid2lkdGhcIiBpbiBwcm9wcyApICkge1xuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUU5LTEwIGRvIG5vdFxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxuXHRcdC8vIGFuaW1hdGlvbnMgb24gaW5saW5lIGVsZW1lbnRzIHRoYXQgYXJlIGhhdmluZyB3aWR0aC9oZWlnaHQgYW5pbWF0ZWRcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblxuXHRcdC8vIFRlc3QgZGVmYXVsdCBkaXNwbGF5IGlmIGRpc3BsYXkgaXMgY3VycmVudGx5IFwibm9uZVwiXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xuXHRcdFx0ZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcblxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIHNob3cvaGlkZSBwYXNzXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvdyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGFTaG93ID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwge30gKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvIFwicmV2ZXJzZVwiXG5cdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdH1cblx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbS5kb25lKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0YW5pbS5kb25lKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHByb3A7XG5cblx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0XHR0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0Ly8gSWYgdGhpcyBpcyBhIG5vb3AgbGlrZSAuaGlkZSgpLmhpZGUoKSwgcmVzdG9yZSBhbiBvdmVyd3JpdHRlbiBkaXNwbGF5IHZhbHVlXG5cdH0gZWxzZSBpZiAoIChkaXNwbGF5ID09PSBcIm5vbmVcIiA/IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5KSA9PT0gXCJpbmxpbmVcIiApIHtcblx0XHRzdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gYW5pbWF0aW9uUHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0pLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHsgc3BlY2lhbEVhc2luZzoge30gfSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0pLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gYW5pbWF0aW9uUHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0pXG5cdCk7XG5cblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLnNwbGl0KFwiIFwiKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0dHdlZW5lcnNbIHByb3AgXSA9IHR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdGFuaW1hdGlvblByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID8gb3B0LmR1cmF0aW9uIDpcblx0XHRvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdIDogalF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YV9wcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgKHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUpICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3ByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59KTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goe1xuXHRzbGlkZURvd246IGdlbkZ4KFwic2hvd1wiKSxcblx0c2xpZGVVcDogZ2VuRngoXCJoaWRlXCIpLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoXCJ0b2dnbGVcIiksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGlmICggdGltZXIoKSApIHtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcblxualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggIXRpbWVySWQgKSB7XG5cdFx0dGltZXJJZCA9IHNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcblx0dGltZXJJZCA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9KTtcbn07XG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IGlPUzw9NS4xLCBBbmRyb2lkPD00LjIrXG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw9Mi4zXG5cdC8vIE9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlIGluY29ycmVjdGx5IG1hcmtlZCBhcyBkaXNhYmxlZFxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0pKCk7XG5cblxudmFyIG5vZGVIb29rLCBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIGRvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IHN0cnVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IG5vZGVIb29rICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgP1xuXHRcdFx0XHR1bmRlZmluZWQgOlxuXHRcdFx0XHRyZXQ7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSwgcHJvcE5hbWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoIChuYW1lID0gYXR0ck5hbWVzW2krK10pICkge1xuXHRcdFx0XHRwcm9wTmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblxuXHRcdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgZ2V0IHNwZWNpYWwgdHJlYXRtZW50ICgjMTA4NzApXG5cdFx0XHRcdGlmICggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2Vcblx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZTtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0pO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9LFxuXG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcywgbm90eG1sLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bm90eG1sID0gblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApO1xuXG5cdFx0aWYgKCBub3R4bWwgKSB7XG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJldCA6XG5cdFx0XHRcdCggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsID9cblx0XHRcdFx0cmV0IDpcblx0XHRcdFx0ZWxlbVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaGFzQXR0cmlidXRlKCBcInRhYmluZGV4XCIgKSB8fCByZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fCBlbGVtLmhyZWYgP1xuXHRcdFx0XHRcdGVsZW0udGFiSW5kZXggOlxuXHRcdFx0XHRcdC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0pO1xuXG5cblxuXG52YXIgcmNsYXNzID0gL1tcXHRcXHJcXG5cXGZdL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0cHJvY2VlZCA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGg7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggcHJvY2VlZCApIHtcblx0XHRcdC8vIFRoZSBkaXNqdW5jdGlvbiBoZXJlIGlzIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgcmVtb3ZlQ2xhc3MpXG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XG5cdFx0XHRcdFx0XCIgXCJcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChjbGF6eiA9IGNsYXNzZXNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGVsZW0uY2xhc3NOYW1lICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRwcm9jZWVkID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKCBwcm9jZWVkICkge1xuXHRcdFx0Y2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF07XG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA/XG5cdFx0XHRcdFx0KCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxuXHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChjbGF6eiA9IGNsYXNzZXNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+PSAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHZhbHVlID8galF1ZXJ5LnRyaW0oIGN1ciApIDogXCJcIjtcblx0XHRcdFx0XHRpZiAoIGVsZW0uY2xhc3NOYW1lICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoIHZhbHVlLmNhbGwodGhpcywgaSwgdGhpcy5jbGFzc05hbWUsIHN0YXRlVmFsKSwgc3RhdGVWYWwgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdHZhciBjbGFzc05hbWUsXG5cdFx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0pICkge1xuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBzdHJ1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5jbGFzc05hbWUgKSB7XG5cdFx0XHRcdFx0Ly8gc3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFfcHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCB0aGlzLmNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHR0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/IFwiXCIgOiBkYXRhX3ByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCI7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0aWYgKCB0aGlzW2ldLm5vZGVUeXBlID09PSAxICYmIChcIiBcIiArIHRoaXNbaV0uY2xhc3NOYW1lICsgXCIgXCIpLnJlcGxhY2UocmNsYXNzLCBcIiBcIikuaW5kZXhPZiggY2xhc3NOYW1lICkgPj0gMCApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59KTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWzBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdFx0cmV0LnJlcGxhY2UocnJldHVybiwgXCJcIikgOlxuXHRcdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRcdHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMC0xMStcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiIHx8IGluZGV4IDwgMCxcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsXG5cdFx0XHRcdFx0aSA9IGluZGV4IDwgMCA/XG5cdFx0XHRcdFx0XHRtYXggOlxuXHRcdFx0XHRcdFx0b25lID8gaW5kZXggOiAwO1xuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gSUU2LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID8gIW9wdGlvbi5kaXNhYmxlZCA6IG9wdGlvbi5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09PSBudWxsICkgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHwgIWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIChvcHRpb24uc2VsZWN0ZWQgPSBqUXVlcnkuaW5BcnJheSggb3B0aW9uLnZhbHVlLCB2YWx1ZXMgKSA+PSAwKSApIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeShlbGVtKS52YWwoKSwgdmFsdWUgKSA+PSAwICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5qUXVlcnkuZWFjaCggKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIpLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fSxcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOiB0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSk7XG5cblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKC9cXD8vKTtcblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG4vLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dFxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSArIFwiXCIgKTtcbn07XG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHRtcDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHR0cnkge1xuXHRcdHRtcCA9IG5ldyBET01QYXJzZXIoKTtcblx0XHR4bWwgPSB0bXAucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cdHJ1cmwgPSAvXihbXFx3ListXSs6KSg/OlxcL1xcLyg/OlteXFwvPyNdKkB8KShbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIERvY3VtZW50IGxvY2F0aW9uXG5cdGFqYXhMb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuXG5cdC8vIFNlZ21lbnQgbG9jYXRpb24gaW50byBwYXJ0c1xuXHRhamF4TG9jUGFydHMgPSBydXJsLmV4ZWMoIGFqYXhMb2NhdGlvbi50b0xvd2VyQ2FzZSgpICkgfHwgW107XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoIChkYXRhVHlwZSA9IGRhdGFUeXBlc1tpKytdKSApIHtcblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVswXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJiAhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8IChkZWVwID0ge30pICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIik7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbMF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzWyBcInRocm93c1wiIF0gKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4geyBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLCBlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnQgfTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGFqYXhMb2NhdGlvbixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGFqYXhMb2NQYXJ0c1sgMSBdICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAveG1sLyxcblx0XHRcdGh0bWw6IC9odG1sLyxcblx0XHRcdGpzb246IC9qc29uL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBqUXVlcnkucGFyc2VKU09OLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cdFx0XHQvLyBDcm9zcy1kb21haW4gZGV0ZWN0aW9uIHZhcnNcblx0XHRcdHBhcnRzLFxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJiAoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cdFx0XHQvLyBUaGUganFYSFIgc3RhdGVcblx0XHRcdHN0YXRlID0gMCxcblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbMV0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHR2YXIgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcblx0XHRqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTtcblx0XHRqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7XG5cblx0XHQvLyBSZW1vdmUgaGFzaCBjaGFyYWN0ZXIgKCM3NTMxOiBhbmQgc3RyaW5nIHByb21vdGlvbilcblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBhamF4TG9jYXRpb24gKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBhamF4TG9jUGFydHNbIDEgXSArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gd2UgaGF2ZSBhIHByb3RvY29sOmhvc3Q6cG9ydCBtaXNtYXRjaFxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0cGFydHMgPSBydXJsLmV4ZWMoIHMudXJsLnRvTG93ZXJDYXNlKCkgKTtcblx0XHRcdHMuY3Jvc3NEb21haW4gPSAhISggcGFydHMgJiZcblx0XHRcdFx0KCBwYXJ0c1sgMSBdICE9PSBhamF4TG9jUGFydHNbIDEgXSB8fCBwYXJ0c1sgMiBdICE9PSBhamF4TG9jUGFydHNbIDIgXSB8fFxuXHRcdFx0XHRcdCggcGFydHNbIDMgXSB8fCAoIHBhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApICE9PVxuXHRcdFx0XHRcdFx0KCBhamF4TG9jUGFydHNbIDMgXSB8fCAoIGFqYXhMb2NQYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSApXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdGNhY2hlVVJMID0gcy51cmw7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gKCBzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhICk7XG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGFudGktY2FjaGUgaW4gdXJsIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0cy51cmwgPSBydHMudGVzdCggY2FjaGVVUkwgKSA/XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgJ18nIHBhcmFtZXRlciwgc2V0IGl0cyB2YWx1ZVxuXHRcdFx0XHRcdGNhY2hlVVJMLnJlcGxhY2UoIHJ0cywgXCIkMV89XCIgKyBub25jZSsrICkgOlxuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFkZCBvbmUgdG8gdGhlIGVuZFxuXHRcdFx0XHRcdGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArIG5vbmNlKys7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSArICggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmICggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7XG5cdFx0XHRqcVhIUlsgaSBdKCBzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoXCJ0aW1lb3V0XCIpO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0c3RhdGUgPSAxO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHQvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lXG5cdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHRcdC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBDYWxsZWQgb25jZVxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcblx0XHRcdHN0YXRlID0gMjtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIik7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIik7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9KTtcblx0fTtcbn0pO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCh7XG5cdFx0dXJsOiB1cmwsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0pO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sLmNhbGwodGhpcywgaSkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0pLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwodGhpcywgaSkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCh0aGlzLCBpKSA6IGh0bWwgKTtcblx0XHR9KTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiYm9keVwiICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHRcdH1cblx0XHR9KS5lbmQoKTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTJcblx0Ly8gT3BlcmEgcmVwb3J0cyBvZmZzZXRXaWR0aHMgYW5kIG9mZnNldEhlaWdodHMgbGVzcyB0aGFuIHplcm8gb24gc29tZSBlbGVtZW50c1xuXHRyZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA8PSAwICYmIGVsZW0ub2Zmc2V0SGVpZ2h0IDw9IDA7XG59O1xualF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4oIGVsZW0gKTtcbn07XG5cblxuXG5cbnZhciByMjAgPSAvJTIwL2csXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiA/IGkgOiBcIlwiICkgKyBcIl1cIiwgdiwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZVxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxuXHRpZiAoIHRyYWRpdGlvbmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSk7XG5cblx0fSBlbHNlIHtcblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICkucmVwbGFjZSggcjIwLCBcIitcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9KVxuXHRcdC5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0pXG5cdFx0Lm1hcChmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0cmV0dXJuIHZhbCA9PSBudWxsID9cblx0XHRcdFx0bnVsbCA6XG5cdFx0XHRcdGpRdWVyeS5pc0FycmF5KCB2YWwgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0eyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0pLmdldCgpO1xuXHR9XG59KTtcblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCggZSApIHt9XG59O1xuXG52YXIgeGhySWQgPSAwLFxuXHR4aHJDYWxsYmFja3MgPSB7fSxcblx0eGhyU3VjY2Vzc1N0YXR1cyA9IHtcblx0XHQvLyBmaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBPcGVuIHJlcXVlc3RzIG11c3QgYmUgbWFudWFsbHkgYWJvcnRlZCBvbiB1bmxvYWQgKCM1MjgwKVxuLy8gU2VlIGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2tiLzI4NTY3NDYgZm9yIG1vcmUgaW5mb1xuaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdHdpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCBmdW5jdGlvbigpIHtcblx0XHRmb3IgKCB2YXIga2V5IGluIHhockNhbGxiYWNrcyApIHtcblx0XHRcdHhockNhbGxiYWNrc1sga2V5IF0oKTtcblx0XHR9XG5cdH0pO1xufVxuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpLFxuXHRcdFx0XHRcdGlkID0gKyt4aHJJZDtcblxuXHRcdFx0XHR4aHIub3Blbiggb3B0aW9ucy50eXBlLCBvcHRpb25zLnVybCwgb3B0aW9ucy5hc3luYywgb3B0aW9ucy51c2VybmFtZSwgb3B0aW9ucy5wYXNzd29yZCApO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgeGhyQ2FsbGJhY2tzWyBpZCBdO1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IHhoci5vbmxvYWQgPSB4aHIub25lcnJvciA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQWNjZXNzaW5nIGJpbmFyeS1kYXRhIHJlc3BvbnNlVGV4dCB0aHJvd3MgYW4gZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyAoIzExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgPT09IFwic3RyaW5nXCIgPyB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRleHQ6IHhoci5yZXNwb25zZVRleHRcblx0XHRcdFx0XHRcdFx0XHRcdH0gOiB1bmRlZmluZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHR4aHIub25lcnJvciA9IGNhbGxiYWNrKFwiZXJyb3JcIik7XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IHhockNhbGxiYWNrc1sgaWQgXSA9IGNhbGxiYWNrKFwiYWJvcnRcIik7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoe1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC8oPzpqYXZhfGVjbWEpc2NyaXB0L1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoXCI8c2NyaXB0PlwiKS5wcm9wKHtcblx0XHRcdFx0XHRhc3luYzogdHJ1ZSxcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9KS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCh7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiYgISggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSAmJiByanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gZm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdC8vIFJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cdFx0XHRcdC8vIG1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gc2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9KTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59KTtcblxuXG5cblxuLy8gZGF0YTogc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCwgZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHR2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksXG5cdFx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWzFdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXG52YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0aWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xuXHRcdHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH1cblxuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKFwiIFwiKTtcblxuXHRpZiAoIG9mZiA+PSAwICkge1xuXHRcdHNlbGVjdG9yID0galF1ZXJ5LnRyaW0oIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCh7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gaWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZFxuXHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0pLmRvbmUoZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoXCI8ZGl2PlwiKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHR9KS5jb21wbGV0ZSggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGNhbGxiYWNrLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggWyBcImFqYXhTdGFydFwiLCBcImFqYXhTdG9wXCIsIFwiYWpheENvbXBsZXRlXCIsIFwiYWpheEVycm9yXCIsIFwiYWpheFN1Y2Nlc3NcIiwgXCJhamF4U2VuZFwiIF0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0pO1xuXG5cblxuXG5qUXVlcnkuZXhwci5maWx0ZXJzLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcChqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0pLmxlbmd0aDtcbn07XG5cblxuXG5cbnZhciBkb2NFbGVtID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuLyoqXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XG59XG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZihcImF1dG9cIikgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBjdXJPZmZzZXQgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHZhciBkb2NFbGVtLCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0Ym94ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcblx0XHRcdGRvYyA9IGVsZW0gJiYgZWxlbS5vd25lckRvY3VtZW50O1xuXG5cdFx0aWYgKCAhZG9jICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXG5cdFx0aWYgKCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm4gYm94O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEJsYWNrQmVycnkgNSwgaU9TIDMgKG9yaWdpbmFsIGlQaG9uZSlcblx0XHQvLyBJZiB3ZSBkb24ndCBoYXZlIGdCQ1IsIGp1c3QgdXNlIDAsMCByYXRoZXIgdGhhbiBlcnJvclxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdH1cblx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IGJveC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSwgYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnQsIFwiaHRtbFwiICkgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW5kb3cucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luZG93LnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoLCBudWxsICk7XG5cdH07XG59KTtcblxuLy8gU3VwcG9ydDogU2FmYXJpPDcrLCBDaHJvbWU8MzcrXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yMjkyODBcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59KTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0Ly8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcblx0XHRcdFx0XHQvLyBpc24ndCBhIHdob2xlIGxvdCB3ZSBjYW4gZG8uIFNlZSBwdWxsIHJlcXVlc3QgYXQgdGhpcyBVUkwgZm9yIGRpc2N1c3Npb246XG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC83NjRcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XG5cdFx0fTtcblx0fSk7XG59KTtcblxuXG4vLyBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGNvbnRhaW5lZCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldFxualF1ZXJ5LmZuLnNpemUgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMubGVuZ3RoO1xufTtcblxualF1ZXJ5LmZuLmFuZFNlbGYgPSBqUXVlcnkuZm4uYWRkQmFjaztcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9KTtcbn1cblxuXG5cblxudmFyXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBzdHJ1bmRlZmluZWQgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcblxufSkpO1xuIiwiLyoqXHJcbiAqIFJhbmd5LCBhIGNyb3NzLWJyb3dzZXIgSmF2YVNjcmlwdCByYW5nZSBhbmQgc2VsZWN0aW9uIGxpYnJhcnlcclxuICogaHR0cHM6Ly9naXRodWIuY29tL3RpbWRvd24vcmFuZ3lcclxuICpcclxuICogQ29weXJpZ2h0IDIwMTUsIFRpbSBEb3duXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuICogVmVyc2lvbjogMS4zLjAtYmV0YS4xXHJcbiAqIEJ1aWxkIGRhdGU6IDEyIEZlYnJ1YXJ5IDIwMTVcclxuICovXHJcblxyXG4oZnVuY3Rpb24oZmFjdG9yeSwgcm9vdCkge1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXHJcbiAgICAgICAgZGVmaW5lKGZhY3RvcnkpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIC8vIE5vZGUvQ29tbW9uSlMgc3R5bGVcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gTm8gQU1EIG9yIENvbW1vbkpTIHN1cHBvcnQgc28gd2UgcGxhY2UgUmFuZ3kgaW4gKHByb2JhYmx5KSB0aGUgZ2xvYmFsIHZhcmlhYmxlXHJcbiAgICAgICAgcm9vdC5yYW5neSA9IGZhY3RvcnkoKTtcclxuICAgIH1cclxufSkoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgdmFyIE9CSkVDVCA9IFwib2JqZWN0XCIsIEZVTkNUSU9OID0gXCJmdW5jdGlvblwiLCBVTkRFRklORUQgPSBcInVuZGVmaW5lZFwiO1xyXG5cclxuICAgIC8vIE1pbmltYWwgc2V0IG9mIHByb3BlcnRpZXMgcmVxdWlyZWQgZm9yIERPTSBMZXZlbCAyIFJhbmdlIGNvbXBsaWFuY2UuIENvbXBhcmlzb24gY29uc3RhbnRzIHN1Y2ggYXMgU1RBUlRfVE9fU1RBUlRcclxuICAgIC8vIGFyZSBvbWl0dGVkIGJlY2F1c2UgcmFuZ2VzIGluIEtIVE1MIGRvIG5vdCBoYXZlIHRoZW0gYnV0IG90aGVyd2lzZSB3b3JrIHBlcmZlY3RseSB3ZWxsLiBTZWUgaXNzdWUgMTEzLlxyXG4gICAgdmFyIGRvbVJhbmdlUHJvcGVydGllcyA9IFtcInN0YXJ0Q29udGFpbmVyXCIsIFwic3RhcnRPZmZzZXRcIiwgXCJlbmRDb250YWluZXJcIiwgXCJlbmRPZmZzZXRcIiwgXCJjb2xsYXBzZWRcIixcclxuICAgICAgICBcImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyXCJdO1xyXG5cclxuICAgIC8vIE1pbmltYWwgc2V0IG9mIG1ldGhvZHMgcmVxdWlyZWQgZm9yIERPTSBMZXZlbCAyIFJhbmdlIGNvbXBsaWFuY2VcclxuICAgIHZhciBkb21SYW5nZU1ldGhvZHMgPSBbXCJzZXRTdGFydFwiLCBcInNldFN0YXJ0QmVmb3JlXCIsIFwic2V0U3RhcnRBZnRlclwiLCBcInNldEVuZFwiLCBcInNldEVuZEJlZm9yZVwiLFxyXG4gICAgICAgIFwic2V0RW5kQWZ0ZXJcIiwgXCJjb2xsYXBzZVwiLCBcInNlbGVjdE5vZGVcIiwgXCJzZWxlY3ROb2RlQ29udGVudHNcIiwgXCJjb21wYXJlQm91bmRhcnlQb2ludHNcIiwgXCJkZWxldGVDb250ZW50c1wiLFxyXG4gICAgICAgIFwiZXh0cmFjdENvbnRlbnRzXCIsIFwiY2xvbmVDb250ZW50c1wiLCBcImluc2VydE5vZGVcIiwgXCJzdXJyb3VuZENvbnRlbnRzXCIsIFwiY2xvbmVSYW5nZVwiLCBcInRvU3RyaW5nXCIsIFwiZGV0YWNoXCJdO1xyXG5cclxuICAgIHZhciB0ZXh0UmFuZ2VQcm9wZXJ0aWVzID0gW1wiYm91bmRpbmdIZWlnaHRcIiwgXCJib3VuZGluZ0xlZnRcIiwgXCJib3VuZGluZ1RvcFwiLCBcImJvdW5kaW5nV2lkdGhcIiwgXCJodG1sVGV4dFwiLCBcInRleHRcIl07XHJcblxyXG4gICAgLy8gU3Vic2V0IG9mIFRleHRSYW5nZSdzIGZ1bGwgc2V0IG9mIG1ldGhvZHMgdGhhdCB3ZSdyZSBpbnRlcmVzdGVkIGluXHJcbiAgICB2YXIgdGV4dFJhbmdlTWV0aG9kcyA9IFtcImNvbGxhcHNlXCIsIFwiY29tcGFyZUVuZFBvaW50c1wiLCBcImR1cGxpY2F0ZVwiLCBcIm1vdmVUb0VsZW1lbnRUZXh0XCIsIFwicGFyZW50RWxlbWVudFwiLCBcInNlbGVjdFwiLFxyXG4gICAgICAgIFwic2V0RW5kUG9pbnRcIiwgXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIl07XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBUcmlvIG9mIGZ1bmN0aW9ucyB0YWtlbiBmcm9tIFBldGVyIE1pY2hhdXgncyBhcnRpY2xlOlxyXG4gICAgLy8gaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvZmVhdHVyZS1kZXRlY3Rpb24tc3RhdGUtb2YtdGhlLWFydC1icm93c2VyLXNjcmlwdGluZ1xyXG4gICAgZnVuY3Rpb24gaXNIb3N0TWV0aG9kKG8sIHApIHtcclxuICAgICAgICB2YXIgdCA9IHR5cGVvZiBvW3BdO1xyXG4gICAgICAgIHJldHVybiB0ID09IEZVTkNUSU9OIHx8ICghISh0ID09IE9CSkVDVCAmJiBvW3BdKSkgfHwgdCA9PSBcInVua25vd25cIjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpc0hvc3RPYmplY3QobywgcCkge1xyXG4gICAgICAgIHJldHVybiAhISh0eXBlb2Ygb1twXSA9PSBPQkpFQ1QgJiYgb1twXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaXNIb3N0UHJvcGVydHkobywgcCkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2Ygb1twXSAhPSBVTkRFRklORUQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ3JlYXRlcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIHNhdmUgdmVyYm9zZSByZXBlYXRlZCBjYWxscyB0byB0ZXN0cyBmdW5jdGlvbnNcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZU11bHRpcGxlUHJvcGVydHlUZXN0KHRlc3RGdW5jKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG8sIHByb3BzKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gcHJvcHMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRlc3RGdW5jKG8sIHByb3BzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5leHQgdHJpbyBvZiBmdW5jdGlvbnMgYXJlIGEgY29udmVuaWVuY2UgdG8gc2F2ZSB2ZXJib3NlIHJlcGVhdGVkIGNhbGxzIHRvIHByZXZpb3VzIHR3byBmdW5jdGlvbnNcclxuICAgIHZhciBhcmVIb3N0TWV0aG9kcyA9IGNyZWF0ZU11bHRpcGxlUHJvcGVydHlUZXN0KGlzSG9zdE1ldGhvZCk7XHJcbiAgICB2YXIgYXJlSG9zdE9iamVjdHMgPSBjcmVhdGVNdWx0aXBsZVByb3BlcnR5VGVzdChpc0hvc3RPYmplY3QpO1xyXG4gICAgdmFyIGFyZUhvc3RQcm9wZXJ0aWVzID0gY3JlYXRlTXVsdGlwbGVQcm9wZXJ0eVRlc3QoaXNIb3N0UHJvcGVydHkpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGlzVGV4dFJhbmdlKHJhbmdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJhbmdlICYmIGFyZUhvc3RNZXRob2RzKHJhbmdlLCB0ZXh0UmFuZ2VNZXRob2RzKSAmJiBhcmVIb3N0UHJvcGVydGllcyhyYW5nZSwgdGV4dFJhbmdlUHJvcGVydGllcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Qm9keShkb2MpIHtcclxuICAgICAgICByZXR1cm4gaXNIb3N0T2JqZWN0KGRvYywgXCJib2R5XCIpID8gZG9jLmJvZHkgOiBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBmb3JFYWNoID0gW10uZm9yRWFjaCA/XHJcbiAgICAgICAgZnVuY3Rpb24oYXJyLCBmdW5jKSB7XHJcbiAgICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmMpO1xyXG4gICAgICAgIH0gOlxyXG4gICAgICAgIGZ1bmN0aW9uKGFyciwgZnVuYykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jKGFycltpXSwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgIHZhciBtb2R1bGVzID0ge307XHJcblxyXG4gICAgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ICE9IFVOREVGSU5FRCAmJiB0eXBlb2YgZG9jdW1lbnQgIT0gVU5ERUZJTkVEKTtcclxuXHJcbiAgICB2YXIgdXRpbCA9IHtcclxuICAgICAgICBpc0hvc3RNZXRob2Q6IGlzSG9zdE1ldGhvZCxcclxuICAgICAgICBpc0hvc3RPYmplY3Q6IGlzSG9zdE9iamVjdCxcclxuICAgICAgICBpc0hvc3RQcm9wZXJ0eTogaXNIb3N0UHJvcGVydHksXHJcbiAgICAgICAgYXJlSG9zdE1ldGhvZHM6IGFyZUhvc3RNZXRob2RzLFxyXG4gICAgICAgIGFyZUhvc3RPYmplY3RzOiBhcmVIb3N0T2JqZWN0cyxcclxuICAgICAgICBhcmVIb3N0UHJvcGVydGllczogYXJlSG9zdFByb3BlcnRpZXMsXHJcbiAgICAgICAgaXNUZXh0UmFuZ2U6IGlzVGV4dFJhbmdlLFxyXG4gICAgICAgIGdldEJvZHk6IGdldEJvZHksXHJcbiAgICAgICAgZm9yRWFjaDogZm9yRWFjaFxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgYXBpID0ge1xyXG4gICAgICAgIHZlcnNpb246IFwiMS4zLjAtYmV0YS4xXCIsXHJcbiAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGlzQnJvd3NlcjogaXNCcm93c2VyLFxyXG4gICAgICAgIHN1cHBvcnRlZDogdHJ1ZSxcclxuICAgICAgICB1dGlsOiB1dGlsLFxyXG4gICAgICAgIGZlYXR1cmVzOiB7fSxcclxuICAgICAgICBtb2R1bGVzOiBtb2R1bGVzLFxyXG4gICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICBhbGVydE9uRmFpbDogdHJ1ZSxcclxuICAgICAgICAgICAgYWxlcnRPbldhcm46IGZhbHNlLFxyXG4gICAgICAgICAgICBwcmVmZXJUZXh0UmFuZ2U6IGZhbHNlLFxyXG4gICAgICAgICAgICBhdXRvSW5pdGlhbGl6ZTogKHR5cGVvZiByYW5neUF1dG9Jbml0aWFsaXplID09IFVOREVGSU5FRCkgPyB0cnVlIDogcmFuZ3lBdXRvSW5pdGlhbGl6ZVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gY29uc29sZUxvZyhtc2cpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT0gVU5ERUZJTkVEICYmIGlzSG9zdE1ldGhvZChjb25zb2xlLCBcImxvZ1wiKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbGVydE9yTG9nKG1zZywgc2hvdWxkQWxlcnQpIHtcclxuICAgICAgICBpZiAoaXNCcm93c2VyICYmIHNob3VsZEFsZXJ0KSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KG1zZyk7XHJcbiAgICAgICAgfSBlbHNlICB7XHJcbiAgICAgICAgICAgIGNvbnNvbGVMb2cobXNnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmFpbChyZWFzb24pIHtcclxuICAgICAgICBhcGkuaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIGFwaS5zdXBwb3J0ZWQgPSBmYWxzZTtcclxuICAgICAgICBhbGVydE9yTG9nKFwiUmFuZ3kgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50LiBSZWFzb246IFwiICsgcmVhc29uLCBhcGkuY29uZmlnLmFsZXJ0T25GYWlsKTtcclxuICAgIH1cclxuXHJcbiAgICBhcGkuZmFpbCA9IGZhaWw7XHJcblxyXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcclxuICAgICAgICBhbGVydE9yTG9nKFwiUmFuZ3kgd2FybmluZzogXCIgKyBtc2csIGFwaS5jb25maWcuYWxlcnRPbldhcm4pO1xyXG4gICAgfVxyXG5cclxuICAgIGFwaS53YXJuID0gd2FybjtcclxuXHJcbiAgICAvLyBBZGQgdXRpbGl0eSBleHRlbmQoKSBtZXRob2RcclxuICAgIHZhciBleHRlbmQ7XHJcbiAgICBpZiAoe30uaGFzT3duUHJvcGVydHkpIHtcclxuICAgICAgICB1dGlsLmV4dGVuZCA9IGV4dGVuZCA9IGZ1bmN0aW9uKG9iaiwgcHJvcHMsIGRlZXApIHtcclxuICAgICAgICAgICAgdmFyIG8sIHA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG8gPSBvYmpbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgcCA9IHByb3BzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWVwICYmIG8gIT09IG51bGwgJiYgdHlwZW9mIG8gPT0gXCJvYmplY3RcIiAmJiBwICE9PSBudWxsICYmIHR5cGVvZiBwID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKG8sIHAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBvYmpbaV0gPSBwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdG9TdHJpbmcsIHdoaWNoIGRvZXMgbm90IHNob3cgdXAgaW4gZm9yLi4uaW4gbG9vcHMgaW4gSUUgPD0gOFxyXG4gICAgICAgICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoXCJ0b1N0cmluZ1wiKSkge1xyXG4gICAgICAgICAgICAgICAgb2JqLnRvU3RyaW5nID0gcHJvcHMudG9TdHJpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB1dGlsLmNyZWF0ZU9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zUGFyYW0sIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGV4dGVuZChvcHRpb25zLCBkZWZhdWx0cyk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zUGFyYW0pIHtcclxuICAgICAgICAgICAgICAgIGV4dGVuZChvcHRpb25zLCBvcHRpb25zUGFyYW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xyXG4gICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhaWwoXCJoYXNPd25Qcm9wZXJ0eSBub3Qgc3VwcG9ydGVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRlc3Qgd2hldGhlciB3ZSdyZSBpbiBhIGJyb3dzZXIgYW5kIGJhaWwgb3V0IGlmIG5vdFxyXG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcclxuICAgICAgICBmYWlsKFwiUmFuZ3kgY2FuIG9ubHkgcnVuIGluIGEgYnJvd3NlclwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUZXN0IHdoZXRoZXIgQXJyYXkucHJvdG90eXBlLnNsaWNlIGNhbiBiZSByZWxpZWQgb24gZm9yIE5vZGVMaXN0cyBhbmQgdXNlIGFuIGFsdGVybmF0aXZlIHRvQXJyYXkoKSBpZiBub3RcclxuICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdG9BcnJheTtcclxuXHJcbiAgICAgICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSk7XHJcbiAgICAgICAgICAgIHZhciBzbGljZSA9IFtdLnNsaWNlO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNsaWNlLmNhbGwoZWwuY2hpbGROb2RlcywgMClbMF0ubm9kZVR5cGUgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvQXJyYXkgPSBmdW5jdGlvbihhcnJheUxpa2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXlMaWtlLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0b0FycmF5KSB7XHJcbiAgICAgICAgICAgIHRvQXJyYXkgPSBmdW5jdGlvbihhcnJheUxpa2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheUxpa2UubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJbaV0gPSBhcnJheUxpa2VbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXRpbC50b0FycmF5ID0gdG9BcnJheTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgLy8gVmVyeSBzaW1wbGUgZXZlbnQgaGFuZGxlciB3cmFwcGVyIGZ1bmN0aW9uIHRoYXQgZG9lc24ndCBhdHRlbXB0IHRvIHNvbHZlIGlzc3VlcyBzdWNoIGFzIFwidGhpc1wiIGhhbmRsaW5nIG9yXHJcbiAgICAvLyBub3JtYWxpemF0aW9uIG9mIGV2ZW50IHByb3BlcnRpZXNcclxuICAgIHZhciBhZGRMaXN0ZW5lcjtcclxuICAgIGlmIChpc0Jyb3dzZXIpIHtcclxuICAgICAgICBpZiAoaXNIb3N0TWV0aG9kKGRvY3VtZW50LCBcImFkZEV2ZW50TGlzdGVuZXJcIikpIHtcclxuICAgICAgICAgICAgYWRkTGlzdGVuZXIgPSBmdW5jdGlvbihvYmosIGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgIG9iai5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzSG9zdE1ldGhvZChkb2N1bWVudCwgXCJhdHRhY2hFdmVudFwiKSkge1xyXG4gICAgICAgICAgICBhZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKG9iaiwgZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgb2JqLmF0dGFjaEV2ZW50KFwib25cIiArIGV2ZW50VHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZhaWwoXCJEb2N1bWVudCBkb2VzIG5vdCBoYXZlIHJlcXVpcmVkIGFkZEV2ZW50TGlzdGVuZXIgb3IgYXR0YWNoRXZlbnQgbWV0aG9kXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXRpbC5hZGRMaXN0ZW5lciA9IGFkZExpc3RlbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0TGlzdGVuZXJzID0gW107XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0RXJyb3JEZXNjKGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGV4Lm1lc3NhZ2UgfHwgZXguZGVzY3JpcHRpb24gfHwgU3RyaW5nKGV4KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsaXphdGlvblxyXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgICBpZiAoIWlzQnJvd3NlciB8fCBhcGkuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdGVzdFJhbmdlO1xyXG4gICAgICAgIHZhciBpbXBsZW1lbnRzRG9tUmFuZ2UgPSBmYWxzZSwgaW1wbGVtZW50c1RleHRSYW5nZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBGaXJzdCwgcGVyZm9ybSBiYXNpYyBmZWF0dXJlIHRlc3RzXHJcblxyXG4gICAgICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsIFwiY3JlYXRlUmFuZ2VcIikpIHtcclxuICAgICAgICAgICAgdGVzdFJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcclxuICAgICAgICAgICAgaWYgKGFyZUhvc3RNZXRob2RzKHRlc3RSYW5nZSwgZG9tUmFuZ2VNZXRob2RzKSAmJiBhcmVIb3N0UHJvcGVydGllcyh0ZXN0UmFuZ2UsIGRvbVJhbmdlUHJvcGVydGllcykpIHtcclxuICAgICAgICAgICAgICAgIGltcGxlbWVudHNEb21SYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBib2R5ID0gZ2V0Qm9keShkb2N1bWVudCk7XHJcbiAgICAgICAgaWYgKCFib2R5IHx8IGJvZHkubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPSBcImJvZHlcIikge1xyXG4gICAgICAgICAgICBmYWlsKFwiTm8gYm9keSBlbGVtZW50IGZvdW5kXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYm9keSAmJiBpc0hvc3RNZXRob2QoYm9keSwgXCJjcmVhdGVUZXh0UmFuZ2VcIikpIHtcclxuICAgICAgICAgICAgdGVzdFJhbmdlID0gYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTtcclxuICAgICAgICAgICAgaWYgKGlzVGV4dFJhbmdlKHRlc3RSYW5nZSkpIHtcclxuICAgICAgICAgICAgICAgIGltcGxlbWVudHNUZXh0UmFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWltcGxlbWVudHNEb21SYW5nZSAmJiAhaW1wbGVtZW50c1RleHRSYW5nZSkge1xyXG4gICAgICAgICAgICBmYWlsKFwiTmVpdGhlciBSYW5nZSBub3IgVGV4dFJhbmdlIGFyZSBhdmFpbGFibGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFwaS5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgYXBpLmZlYXR1cmVzID0ge1xyXG4gICAgICAgICAgICBpbXBsZW1lbnRzRG9tUmFuZ2U6IGltcGxlbWVudHNEb21SYW5nZSxcclxuICAgICAgICAgICAgaW1wbGVtZW50c1RleHRSYW5nZTogaW1wbGVtZW50c1RleHRSYW5nZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgbW9kdWxlc1xyXG4gICAgICAgIHZhciBtb2R1bGUsIGVycm9yTWVzc2FnZTtcclxuICAgICAgICBmb3IgKHZhciBtb2R1bGVOYW1lIGluIG1vZHVsZXMpIHtcclxuICAgICAgICAgICAgaWYgKCAobW9kdWxlID0gbW9kdWxlc1ttb2R1bGVOYW1lXSkgaW5zdGFuY2VvZiBNb2R1bGUgKSB7XHJcbiAgICAgICAgICAgICAgICBtb2R1bGUuaW5pdChtb2R1bGUsIGFwaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENhbGwgaW5pdCBsaXN0ZW5lcnNcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaW5pdExpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaW5pdExpc3RlbmVyc1tpXShhcGkpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJSYW5neSBpbml0IGxpc3RlbmVyIHRocmV3IGFuIGV4Y2VwdGlvbi4gQ29udGludWluZy4gRGV0YWlsOiBcIiArIGdldEVycm9yRGVzYyhleCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWxsb3cgZXh0ZXJuYWwgc2NyaXB0cyB0byBpbml0aWFsaXplIHRoaXMgbGlicmFyeSBpbiBjYXNlIGl0J3MgbG9hZGVkIGFmdGVyIHRoZSBkb2N1bWVudCBoYXMgbG9hZGVkXHJcbiAgICBhcGkuaW5pdCA9IGluaXQ7XHJcblxyXG4gICAgLy8gRXhlY3V0ZSBsaXN0ZW5lciBpbW1lZGlhdGVseSBpZiBhbHJlYWR5IGluaXRpYWxpemVkXHJcbiAgICBhcGkuYWRkSW5pdExpc3RlbmVyID0gZnVuY3Rpb24obGlzdGVuZXIpIHtcclxuICAgICAgICBpZiAoYXBpLmluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVyKGFwaSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5pdExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzaGltTGlzdGVuZXJzID0gW107XHJcblxyXG4gICAgYXBpLmFkZFNoaW1MaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgc2hpbUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gc2hpbSh3aW4pIHtcclxuICAgICAgICB3aW4gPSB3aW4gfHwgd2luZG93O1xyXG4gICAgICAgIGluaXQoKTtcclxuXHJcbiAgICAgICAgLy8gTm90aWZ5IGxpc3RlbmVyc1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzaGltTGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgICAgIHNoaW1MaXN0ZW5lcnNbaV0od2luKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgIGFwaS5zaGltID0gYXBpLmNyZWF0ZU1pc3NpbmdOYXRpdmVBcGkgPSBzaGltO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIE1vZHVsZShuYW1lLCBkZXBlbmRlbmNpZXMsIGluaXRpYWxpemVyKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdXBwb3J0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVyID0gaW5pdGlhbGl6ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgTW9kdWxlLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJlcXVpcmVkTW9kdWxlTmFtZXMgPSB0aGlzLmRlcGVuZGVuY2llcyB8fCBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJlcXVpcmVkTW9kdWxlTmFtZXMubGVuZ3RoLCByZXF1aXJlZE1vZHVsZSwgbW9kdWxlTmFtZTsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lID0gcmVxdWlyZWRNb2R1bGVOYW1lc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZE1vZHVsZSA9IG1vZHVsZXNbbW9kdWxlTmFtZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlcXVpcmVkTW9kdWxlIHx8ICEocmVxdWlyZWRNb2R1bGUgaW5zdGFuY2VvZiBNb2R1bGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWlyZWQgbW9kdWxlICdcIiArIG1vZHVsZU5hbWUgKyBcIicgbm90IGZvdW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkTW9kdWxlLmluaXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlcXVpcmVkTW9kdWxlLnN1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVpcmVkIG1vZHVsZSAnXCIgKyBtb2R1bGVOYW1lICsgXCInIG5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE5vdyBydW4gaW5pdGlhbGl6ZXJcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplcih0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmYWlsOiBmdW5jdGlvbihyZWFzb24pIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc3VwcG9ydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1vZHVsZSAnXCIgKyB0aGlzLm5hbWUgKyBcIicgZmFpbGVkIHRvIGxvYWQ6IFwiICsgcmVhc29uKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB3YXJuOiBmdW5jdGlvbihtc2cpIHtcclxuICAgICAgICAgICAgYXBpLndhcm4oXCJNb2R1bGUgXCIgKyB0aGlzLm5hbWUgKyBcIjogXCIgKyBtc2cpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRlcHJlY2F0aW9uTm90aWNlOiBmdW5jdGlvbihkZXByZWNhdGVkLCByZXBsYWNlbWVudCkge1xyXG4gICAgICAgICAgICBhcGkud2FybihcIkRFUFJFQ0FURUQ6IFwiICsgZGVwcmVjYXRlZCArIFwiIGluIG1vZHVsZSBcIiArIHRoaXMubmFtZSArIFwiaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcIiArXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudCArIFwiIGluc3RlYWRcIik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY3JlYXRlRXJyb3I6IGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiRXJyb3IgaW4gUmFuZ3kgXCIgKyB0aGlzLm5hbWUgKyBcIiBtb2R1bGU6IFwiICsgbXNnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1vZHVsZShuYW1lLCBkZXBlbmRlbmNpZXMsIGluaXRGdW5jKSB7XHJcbiAgICAgICAgdmFyIG5ld01vZHVsZSA9IG5ldyBNb2R1bGUobmFtZSwgZGVwZW5kZW5jaWVzLCBmdW5jdGlvbihtb2R1bGUpIHtcclxuICAgICAgICAgICAgaWYgKCFtb2R1bGUuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZS5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRGdW5jKGFwaSwgbW9kdWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBtb2R1bGUuc3VwcG9ydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IFwiTW9kdWxlICdcIiArIG5hbWUgKyBcIicgZmFpbGVkIHRvIGxvYWQ6IFwiICsgZ2V0RXJyb3JEZXNjKGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlTG9nKGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4LnN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coZXguc3RhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG1vZHVsZXNbbmFtZV0gPSBuZXdNb2R1bGU7XHJcbiAgICAgICAgcmV0dXJuIG5ld01vZHVsZTtcclxuICAgIH1cclxuXHJcbiAgICBhcGkuY3JlYXRlTW9kdWxlID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIC8vIEFsbG93IDIgb3IgMyBhcmd1bWVudHMgKHNlY29uZCBhcmd1bWVudCBpcyBhbiBvcHRpb25hbCBhcnJheSBvZiBkZXBlbmRlbmNpZXMpXHJcbiAgICAgICAgdmFyIGluaXRGdW5jLCBkZXBlbmRlbmNpZXM7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICBpbml0RnVuYyA9IGFyZ3VtZW50c1sxXTtcclxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gW107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5pdEZ1bmMgPSBhcmd1bWVudHNbMl07XHJcbiAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IGFyZ3VtZW50c1sxXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBtb2R1bGUgPSBjcmVhdGVNb2R1bGUobmFtZSwgZGVwZW5kZW5jaWVzLCBpbml0RnVuYyk7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIG1vZHVsZSBpbW1lZGlhdGVseSBpZiB0aGUgY29yZSBpcyBhbHJlYWR5IGluaXRpYWxpemVkXHJcbiAgICAgICAgaWYgKGFwaS5pbml0aWFsaXplZCAmJiBhcGkuc3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgIG1vZHVsZS5pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBhcGkuY3JlYXRlQ29yZU1vZHVsZSA9IGZ1bmN0aW9uKG5hbWUsIGRlcGVuZGVuY2llcywgaW5pdEZ1bmMpIHtcclxuICAgICAgICBjcmVhdGVNb2R1bGUobmFtZSwgZGVwZW5kZW5jaWVzLCBpbml0RnVuYyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG4gICAgLy8gRW5zdXJlIHJhbmd5LnJhbmdlUHJvdG90eXBlIGFuZCByYW5neS5zZWxlY3Rpb25Qcm90b3R5cGUgYXJlIGF2YWlsYWJsZSBpbW1lZGlhdGVseVxyXG5cclxuICAgIGZ1bmN0aW9uIFJhbmdlUHJvdG90eXBlKCkge31cclxuICAgIGFwaS5SYW5nZVByb3RvdHlwZSA9IFJhbmdlUHJvdG90eXBlO1xyXG4gICAgYXBpLnJhbmdlUHJvdG90eXBlID0gbmV3IFJhbmdlUHJvdG90eXBlKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gU2VsZWN0aW9uUHJvdG90eXBlKCkge31cclxuICAgIGFwaS5zZWxlY3Rpb25Qcm90b3R5cGUgPSBuZXcgU2VsZWN0aW9uUHJvdG90eXBlKCk7XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBET00gdXRpbGl0eSBtZXRob2RzIHVzZWQgYnkgUmFuZ3lcbiAgICBhcGkuY3JlYXRlQ29yZU1vZHVsZShcIkRvbVV0aWxcIiwgW10sIGZ1bmN0aW9uKGFwaSwgbW9kdWxlKSB7XG4gICAgICAgIHZhciBVTkRFRiA9IFwidW5kZWZpbmVkXCI7XG4gICAgICAgIHZhciB1dGlsID0gYXBpLnV0aWw7XG5cbiAgICAgICAgLy8gUGVyZm9ybSBmZWF0dXJlIHRlc3RzXG4gICAgICAgIGlmICghdXRpbC5hcmVIb3N0TWV0aG9kcyhkb2N1bWVudCwgW1wiY3JlYXRlRG9jdW1lbnRGcmFnbWVudFwiLCBcImNyZWF0ZUVsZW1lbnRcIiwgXCJjcmVhdGVUZXh0Tm9kZVwiXSkpIHtcbiAgICAgICAgICAgIG1vZHVsZS5mYWlsKFwiZG9jdW1lbnQgbWlzc2luZyBhIE5vZGUgY3JlYXRpb24gbWV0aG9kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1dGlsLmlzSG9zdE1ldGhvZChkb2N1bWVudCwgXCJnZXRFbGVtZW50c0J5VGFnTmFtZVwiKSkge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJkb2N1bWVudCBtaXNzaW5nIGdldEVsZW1lbnRzQnlUYWdOYW1lIG1ldGhvZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGlmICghdXRpbC5hcmVIb3N0TWV0aG9kcyhlbCwgW1wiaW5zZXJ0QmVmb3JlXCIsIFwiYXBwZW5kQ2hpbGRcIiwgXCJjbG9uZU5vZGVcIl0gfHxcbiAgICAgICAgICAgICAgICAhdXRpbC5hcmVIb3N0T2JqZWN0cyhlbCwgW1wicHJldmlvdXNTaWJsaW5nXCIsIFwibmV4dFNpYmxpbmdcIiwgXCJjaGlsZE5vZGVzXCIsIFwicGFyZW50Tm9kZVwiXSkpKSB7XG4gICAgICAgICAgICBtb2R1bGUuZmFpbChcIkluY29tcGxldGUgRWxlbWVudCBpbXBsZW1lbnRhdGlvblwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlubmVySFRNTCBpcyByZXF1aXJlZCBmb3IgUmFuZ2UncyBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgbWV0aG9kXG4gICAgICAgIGlmICghdXRpbC5pc0hvc3RQcm9wZXJ0eShlbCwgXCJpbm5lckhUTUxcIikpIHtcbiAgICAgICAgICAgIG1vZHVsZS5mYWlsKFwiRWxlbWVudCBpcyBtaXNzaW5nIGlubmVySFRNTCBwcm9wZXJ0eVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwidGVzdFwiKTtcbiAgICAgICAgaWYgKCF1dGlsLmFyZUhvc3RNZXRob2RzKHRleHROb2RlLCBbXCJzcGxpdFRleHRcIiwgXCJkZWxldGVEYXRhXCIsIFwiaW5zZXJ0RGF0YVwiLCBcImFwcGVuZERhdGFcIiwgXCJjbG9uZU5vZGVcIl0gfHxcbiAgICAgICAgICAgICAgICAhdXRpbC5hcmVIb3N0T2JqZWN0cyhlbCwgW1wicHJldmlvdXNTaWJsaW5nXCIsIFwibmV4dFNpYmxpbmdcIiwgXCJjaGlsZE5vZGVzXCIsIFwicGFyZW50Tm9kZVwiXSkgfHxcbiAgICAgICAgICAgICAgICAhdXRpbC5hcmVIb3N0UHJvcGVydGllcyh0ZXh0Tm9kZSwgW1wiZGF0YVwiXSkpKSB7XG4gICAgICAgICAgICBtb2R1bGUuZmFpbChcIkluY29tcGxldGUgVGV4dCBOb2RlIGltcGxlbWVudGF0aW9uXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAvLyBSZW1vdmVkIHVzZSBvZiBpbmRleE9mIGJlY2F1c2Ugb2YgYSBiaXphcnJlIGJ1ZyBpbiBPcGVyYSB0aGF0IGlzIHRocm93biBpbiBvbmUgb2YgdGhlIEFjaWQzIHRlc3RzLiBJIGhhdmVuJ3QgYmVlblxuICAgICAgICAvLyBhYmxlIHRvIHJlcGxpY2F0ZSBpdCBvdXRzaWRlIG9mIHRoZSB0ZXN0LiBUaGUgYnVnIGlzIHRoYXQgaW5kZXhPZiByZXR1cm5zIC0xIHdoZW4gY2FsbGVkIG9uIGFuIEFycmF5IHRoYXRcbiAgICAgICAgLy8gY29udGFpbnMganVzdCB0aGUgZG9jdW1lbnQgYXMgYSBzaW5nbGUgZWxlbWVudCBhbmQgdGhlIHZhbHVlIHNlYXJjaGVkIGZvciBpcyB0aGUgZG9jdW1lbnQuXG4gICAgICAgIHZhciBhcnJheUNvbnRhaW5zID0gLypBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/XG4gICAgICAgICAgICBmdW5jdGlvbihhcnIsIHZhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnIuaW5kZXhPZih2YWwpID4gLTE7XG4gICAgICAgICAgICB9OiovXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uKGFyciwgdmFsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXSA9PT0gdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vIE9wZXJhIDExIHB1dHMgSFRNTCBlbGVtZW50cyBpbiB0aGUgbnVsbCBuYW1lc3BhY2UsIGl0IHNlZW1zLCBhbmQgSUUgNyBoYXMgdW5kZWZpbmVkIG5hbWVzcGFjZVVSSVxuICAgICAgICBmdW5jdGlvbiBpc0h0bWxOYW1lc3BhY2Uobm9kZSkge1xuICAgICAgICAgICAgdmFyIG5zO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBub2RlLm5hbWVzcGFjZVVSSSA9PSBVTkRFRiB8fCAoKG5zID0gbm9kZS5uYW1lc3BhY2VVUkkpID09PSBudWxsIHx8IG5zID09IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHBhcmVudEVsZW1lbnQobm9kZSkge1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIHJldHVybiAocGFyZW50Lm5vZGVUeXBlID09IDEpID8gcGFyZW50IDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5vZGVJbmRleChub2RlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSggKG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZykgKSB7XG4gICAgICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXROb2RlTGVuZ3RoKG5vZGUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRDb21tb25BbmNlc3Rvcihub2RlMSwgbm9kZTIpIHtcbiAgICAgICAgICAgIHZhciBhbmNlc3RvcnMgPSBbXSwgbjtcbiAgICAgICAgICAgIGZvciAobiA9IG5vZGUxOyBuOyBuID0gbi5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgYW5jZXN0b3JzLnB1c2gobik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobiA9IG5vZGUyOyBuOyBuID0gbi5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFycmF5Q29udGFpbnMoYW5jZXN0b3JzLCBuKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNBbmNlc3Rvck9mKGFuY2VzdG9yLCBkZXNjZW5kYW50LCBzZWxmSXNBbmNlc3Rvcikge1xuICAgICAgICAgICAgdmFyIG4gPSBzZWxmSXNBbmNlc3RvciA/IGRlc2NlbmRhbnQgOiBkZXNjZW5kYW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICB3aGlsZSAobikge1xuICAgICAgICAgICAgICAgIGlmIChuID09PSBhbmNlc3Rvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuID0gbi5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzT3JJc0FuY2VzdG9yT2YoYW5jZXN0b3IsIGRlc2NlbmRhbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FuY2VzdG9yT2YoYW5jZXN0b3IsIGRlc2NlbmRhbnQsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZSwgYW5jZXN0b3IsIHNlbGZJc0FuY2VzdG9yKSB7XG4gICAgICAgICAgICB2YXIgcCwgbiA9IHNlbGZJc0FuY2VzdG9yID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIHdoaWxlIChuKSB7XG4gICAgICAgICAgICAgICAgcCA9IG4ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBpZiAocCA9PT0gYW5jZXN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG4gPSBwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgICAgICAgIHJldHVybiB0ID09IDMgfHwgdCA9PSA0IHx8IHQgPT0gOCA7IC8vIFRleHQsIENEYXRhU2VjdGlvbiBvciBDb21tZW50XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1RleHRPckNvbW1lbnROb2RlKG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0ID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgICAgICAgIHJldHVybiB0ID09IDMgfHwgdCA9PSA4IDsgLy8gVGV4dCBvciBDb21tZW50XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbnNlcnRBZnRlcihub2RlLCBwcmVjZWRpbmdOb2RlKSB7XG4gICAgICAgICAgICB2YXIgbmV4dE5vZGUgPSBwcmVjZWRpbmdOb2RlLm5leHRTaWJsaW5nLCBwYXJlbnQgPSBwcmVjZWRpbmdOb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICBpZiAobmV4dE5vZGUpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHROb2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgY2Fubm90IHVzZSBzcGxpdFRleHQoKSBiZWNhdXNlIGl0IGlzIGJ1Z3JpZGRlbiBpbiBJRSA5LlxuICAgICAgICBmdW5jdGlvbiBzcGxpdERhdGFOb2RlKG5vZGUsIGluZGV4LCBwb3NpdGlvbnNUb1ByZXNlcnZlKSB7XG4gICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgIG5ld05vZGUuZGVsZXRlRGF0YSgwLCBpbmRleCk7XG4gICAgICAgICAgICBub2RlLmRlbGV0ZURhdGEoaW5kZXgsIG5vZGUubGVuZ3RoIC0gaW5kZXgpO1xuICAgICAgICAgICAgaW5zZXJ0QWZ0ZXIobmV3Tm9kZSwgbm9kZSk7XG5cbiAgICAgICAgICAgIC8vIFByZXNlcnZlIHBvc2l0aW9uc1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uc1RvUHJlc2VydmUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcG9zaXRpb247IHBvc2l0aW9uID0gcG9zaXRpb25zVG9QcmVzZXJ2ZVtpKytdOyApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGNhc2Ugd2hlcmUgcG9zaXRpb24gd2FzIGluc2lkZSB0aGUgcG9ydGlvbiBvZiBub2RlIGFmdGVyIHRoZSBzcGxpdCBwb2ludFxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24ubm9kZSA9PSBub2RlICYmIHBvc2l0aW9uLm9mZnNldCA+IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi5ub2RlID0gbmV3Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLm9mZnNldCAtPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHBvc2l0aW9uIGlzIGEgbm9kZSBvZmZzZXQgd2l0aGluIG5vZGUncyBwYXJlbnRcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocG9zaXRpb24ubm9kZSA9PSBub2RlLnBhcmVudE5vZGUgJiYgcG9zaXRpb24ub2Zmc2V0ID4gZ2V0Tm9kZUluZGV4KG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK3Bvc2l0aW9uLm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdOb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RG9jdW1lbnQobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZS5vd25lckRvY3VtZW50ICE9IFVOREVGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUuZG9jdW1lbnQgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5kb2N1bWVudDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldERvY3VtZW50KG5vZGUucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcImdldERvY3VtZW50OiBubyBkb2N1bWVudCBmb3VuZCBmb3Igbm9kZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQobm9kZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvYy5kZWZhdWx0VmlldyAhPSBVTkRFRikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2MuZGVmYXVsdFZpZXc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2MucGFyZW50V2luZG93ICE9IFVOREVGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcIkNhbm5vdCBnZXQgYSB3aW5kb3cgb2JqZWN0IGZvciBub2RlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0SWZyYW1lRG9jdW1lbnQoaWZyYW1lRWwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaWZyYW1lRWwuY29udGVudERvY3VtZW50ICE9IFVOREVGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmcmFtZUVsLmNvbnRlbnREb2N1bWVudDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlmcmFtZUVsLmNvbnRlbnRXaW5kb3cgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWZyYW1lRWwuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKFwiZ2V0SWZyYW1lRG9jdW1lbnQ6IE5vIERvY3VtZW50IG9iamVjdCBmb3VuZCBmb3IgaWZyYW1lIGVsZW1lbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRJZnJhbWVXaW5kb3coaWZyYW1lRWwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaWZyYW1lRWwuY29udGVudFdpbmRvdyAhPSBVTkRFRikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZnJhbWVFbC5jb250ZW50V2luZG93O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWZyYW1lRWwuY29udGVudERvY3VtZW50ICE9IFVOREVGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmcmFtZUVsLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKFwiZ2V0SWZyYW1lV2luZG93OiBObyBXaW5kb3cgb2JqZWN0IGZvdW5kIGZvciBpZnJhbWUgZWxlbWVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgbG9va3MgYmFkLiBJcyBpdCB3b3J0aCBpdD9cbiAgICAgICAgZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIHV0aWwuaXNIb3N0TWV0aG9kKG9iaiwgXCJzZXRUaW1lb3V0XCIpICYmIHV0aWwuaXNIb3N0T2JqZWN0KG9iaiwgXCJkb2N1bWVudFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldENvbnRlbnREb2N1bWVudChvYmosIG1vZHVsZSwgbWV0aG9kTmFtZSkge1xuICAgICAgICAgICAgdmFyIGRvYztcblxuICAgICAgICAgICAgaWYgKCFvYmopIHtcbiAgICAgICAgICAgICAgICBkb2MgPSBkb2N1bWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGVzdCBpZiBhIERPTSBub2RlIGhhcyBiZWVuIHBhc3NlZCBhbmQgb2J0YWluIGEgZG9jdW1lbnQgb2JqZWN0IGZvciBpdCBpZiBzb1xuICAgICAgICAgICAgZWxzZSBpZiAodXRpbC5pc0hvc3RQcm9wZXJ0eShvYmosIFwibm9kZVR5cGVcIikpIHtcbiAgICAgICAgICAgICAgICBkb2MgPSAob2JqLm5vZGVUeXBlID09IDEgJiYgb2JqLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSBcImlmcmFtZVwiKSA/XG4gICAgICAgICAgICAgICAgICAgIGdldElmcmFtZURvY3VtZW50KG9iaikgOiBnZXREb2N1bWVudChvYmopO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUZXN0IGlmIHRoZSBkb2MgcGFyYW1ldGVyIGFwcGVhcnMgdG8gYmUgYSBXaW5kb3cgb2JqZWN0XG4gICAgICAgICAgICBlbHNlIGlmIChpc1dpbmRvdyhvYmopKSB7XG4gICAgICAgICAgICAgICAgZG9jID0gb2JqLmRvY3VtZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWRvYykge1xuICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihtZXRob2ROYW1lICsgXCIoKTogUGFyYW1ldGVyIG11c3QgYmUgYSBXaW5kb3cgb2JqZWN0IG9yIERPTSBub2RlXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZG9jO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Um9vdENvbnRhaW5lcihub2RlKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50O1xuICAgICAgICAgICAgd2hpbGUgKCAocGFyZW50ID0gbm9kZS5wYXJlbnROb2RlKSApIHtcbiAgICAgICAgICAgICAgICBub2RlID0gcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKG5vZGVBLCBvZmZzZXRBLCBub2RlQiwgb2Zmc2V0Qikge1xuICAgICAgICAgICAgLy8gU2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLVRyYXZlcnNhbC1SYW5nZS9yYW5nZXMuaHRtbCNMZXZlbC0yLVJhbmdlLUNvbXBhcmluZ1xuICAgICAgICAgICAgdmFyIG5vZGVDLCByb290LCBjaGlsZEEsIGNoaWxkQiwgbjtcbiAgICAgICAgICAgIGlmIChub2RlQSA9PSBub2RlQikge1xuICAgICAgICAgICAgICAgIC8vIENhc2UgMTogbm9kZXMgYXJlIHRoZSBzYW1lXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mZnNldEEgPT09IG9mZnNldEIgPyAwIDogKG9mZnNldEEgPCBvZmZzZXRCKSA/IC0xIDogMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIChub2RlQyA9IGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGVCLCBub2RlQSwgdHJ1ZSkpICkge1xuICAgICAgICAgICAgICAgIC8vIENhc2UgMjogbm9kZSBDIChjb250YWluZXIgQiBvciBhbiBhbmNlc3RvcikgaXMgYSBjaGlsZCBub2RlIG9mIEFcbiAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0QSA8PSBnZXROb2RlSW5kZXgobm9kZUMpID8gLTEgOiAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggKG5vZGVDID0gZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUEsIG5vZGVCLCB0cnVlKSkgKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FzZSAzOiBub2RlIEMgKGNvbnRhaW5lciBBIG9yIGFuIGFuY2VzdG9yKSBpcyBhIGNoaWxkIG5vZGUgb2YgQlxuICAgICAgICAgICAgICAgIHJldHVybiBnZXROb2RlSW5kZXgobm9kZUMpIDwgb2Zmc2V0QiAgPyAtMSA6IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvb3QgPSBnZXRDb21tb25BbmNlc3Rvcihub2RlQSwgbm9kZUIpO1xuICAgICAgICAgICAgICAgIGlmICghcm9vdCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb21wYXJlUG9pbnRzIGVycm9yOiBub2RlcyBoYXZlIG5vIGNvbW1vbiBhbmNlc3RvclwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDYXNlIDQ6IGNvbnRhaW5lcnMgYXJlIHNpYmxpbmdzIG9yIGRlc2NlbmRhbnRzIG9mIHNpYmxpbmdzXG4gICAgICAgICAgICAgICAgY2hpbGRBID0gKG5vZGVBID09PSByb290KSA/IHJvb3QgOiBnZXRDbG9zZXN0QW5jZXN0b3JJbihub2RlQSwgcm9vdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY2hpbGRCID0gKG5vZGVCID09PSByb290KSA/IHJvb3QgOiBnZXRDbG9zZXN0QW5jZXN0b3JJbihub2RlQiwgcm9vdCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRBID09PSBjaGlsZEIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKFwiY29tcGFyZVBvaW50cyBnb3QgdG8gY2FzZSA0IGFuZCBjaGlsZEEgYW5kIGNoaWxkQiBhcmUgdGhlIHNhbWUhXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG4gPSByb290LmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9PT0gY2hpbGRBKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuID09PSBjaGlsZEIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBuLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAvLyBUZXN0IGZvciBJRSdzIGNyYXNoIChJRSA2LzcpIG9yIGV4Y2VwdGlvbiAoSUUgPj0gOCkgd2hlbiBhIHJlZmVyZW5jZSB0byBnYXJiYWdlLWNvbGxlY3RlZCB0ZXh0IG5vZGUgaXMgcXVlcmllZFxuICAgICAgICB2YXIgY3Jhc2h5VGV4dE5vZGVzID0gZmFsc2U7XG5cbiAgICAgICAgZnVuY3Rpb24gaXNCcm9rZW5Ob2RlKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBuO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBuID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiXCIpO1xuICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gXCIxXCI7XG4gICAgICAgICAgICB2YXIgdGV4dE5vZGUgPSBlbC5maXJzdENoaWxkO1xuICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gXCI8YnIgLz5cIjtcbiAgICAgICAgICAgIGNyYXNoeVRleHROb2RlcyA9IGlzQnJva2VuTm9kZSh0ZXh0Tm9kZSk7XG5cbiAgICAgICAgICAgIGFwaS5mZWF0dXJlcy5jcmFzaHlUZXh0Tm9kZXMgPSBjcmFzaHlUZXh0Tm9kZXM7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICBmdW5jdGlvbiBpbnNwZWN0Tm9kZShub2RlKSB7XG4gICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbTm8gbm9kZV1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjcmFzaHlUZXh0Tm9kZXMgJiYgaXNCcm9rZW5Ob2RlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW0Jyb2tlbiBub2RlXVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1wiJyArIG5vZGUuZGF0YSArICdcIic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkQXR0ciA9IG5vZGUuaWQgPyAnIGlkPVwiJyArIG5vZGUuaWQgKyAnXCInIDogXCJcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI8XCIgKyBub2RlLm5vZGVOYW1lICsgaWRBdHRyICsgXCI+W2luZGV4OlwiICsgZ2V0Tm9kZUluZGV4KG5vZGUpICsgXCIsbGVuZ3RoOlwiICsgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCArIFwiXVtcIiArIChub2RlLmlubmVySFRNTCB8fCBcIltpbm5lckhUTUwgbm90IHN1cHBvcnRlZF1cIikuc2xpY2UoMCwgMjUpICsgXCJdXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5ub2RlTmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbihub2RlKSB7XG4gICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSBnZXREb2N1bWVudChub2RlKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIGNoaWxkO1xuICAgICAgICAgICAgd2hpbGUgKCAoY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQpICkge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHk7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93LmdldENvbXB1dGVkU3R5bGUgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgIGdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eSA9IGZ1bmN0aW9uKGVsLCBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRXaW5kb3coZWwpLmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jdXJyZW50U3R5bGUgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgIGdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eSA9IGZ1bmN0aW9uKGVsLCBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbC5jdXJyZW50U3R5bGVbcHJvcE5hbWVdO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5mYWlsKFwiTm8gbWVhbnMgb2Ygb2J0YWluaW5nIGNvbXB1dGVkIHN0eWxlIHByb3BlcnRpZXMgZm91bmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBOb2RlSXRlcmF0b3Iocm9vdCkge1xuICAgICAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICAgICAgICAgIHRoaXMuX25leHQgPSByb290O1xuICAgICAgICB9XG5cbiAgICAgICAgTm9kZUl0ZXJhdG9yLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIF9jdXJyZW50OiBudWxsLFxuXG4gICAgICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLl9uZXh0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dDtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQsIG5leHQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBuLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmV4dCA9IGNoaWxkO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKG4gIT09IHRoaXMucm9vdCkgJiYgIShuZXh0ID0gbi5uZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gbi5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmV4dCA9IG5leHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkZXRhY2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9uZXh0ID0gdGhpcy5yb290ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVJdGVyYXRvcihyb290KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vZGVJdGVyYXRvcihyb290KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIERvbVBvc2l0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgRG9tUG9zaXRpb24ucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgZXF1YWxzOiBmdW5jdGlvbihwb3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFwb3MgJiYgdGhpcy5ub2RlID09PSBwb3Mubm9kZSAmJiB0aGlzLm9mZnNldCA9PSBwb3Mub2Zmc2V0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5zcGVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW0RvbVBvc2l0aW9uKFwiICsgaW5zcGVjdE5vZGUodGhpcy5ub2RlKSArIFwiOlwiICsgdGhpcy5vZmZzZXQgKyBcIildXCI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zcGVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIERPTUV4Y2VwdGlvbihjb2RlTmFtZSkge1xuICAgICAgICAgICAgdGhpcy5jb2RlID0gdGhpc1tjb2RlTmFtZV07XG4gICAgICAgICAgICB0aGlzLmNvZGVOYW1lID0gY29kZU5hbWU7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBcIkRPTUV4Y2VwdGlvbjogXCIgKyB0aGlzLmNvZGVOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIElOREVYX1NJWkVfRVJSOiAxLFxuICAgICAgICAgICAgSElFUkFSQ0hZX1JFUVVFU1RfRVJSOiAzLFxuICAgICAgICAgICAgV1JPTkdfRE9DVU1FTlRfRVJSOiA0LFxuICAgICAgICAgICAgTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSOiA3LFxuICAgICAgICAgICAgTk9UX0ZPVU5EX0VSUjogOCxcbiAgICAgICAgICAgIE5PVF9TVVBQT1JURURfRVJSOiA5LFxuICAgICAgICAgICAgSU5WQUxJRF9TVEFURV9FUlI6IDExLFxuICAgICAgICAgICAgSU5WQUxJRF9OT0RFX1RZUEVfRVJSOiAyNFxuICAgICAgICB9O1xuXG4gICAgICAgIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpLmRvbSA9IHtcbiAgICAgICAgICAgIGFycmF5Q29udGFpbnM6IGFycmF5Q29udGFpbnMsXG4gICAgICAgICAgICBpc0h0bWxOYW1lc3BhY2U6IGlzSHRtbE5hbWVzcGFjZSxcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQ6IHBhcmVudEVsZW1lbnQsXG4gICAgICAgICAgICBnZXROb2RlSW5kZXg6IGdldE5vZGVJbmRleCxcbiAgICAgICAgICAgIGdldE5vZGVMZW5ndGg6IGdldE5vZGVMZW5ndGgsXG4gICAgICAgICAgICBnZXRDb21tb25BbmNlc3RvcjogZ2V0Q29tbW9uQW5jZXN0b3IsXG4gICAgICAgICAgICBpc0FuY2VzdG9yT2Y6IGlzQW5jZXN0b3JPZixcbiAgICAgICAgICAgIGlzT3JJc0FuY2VzdG9yT2Y6IGlzT3JJc0FuY2VzdG9yT2YsXG4gICAgICAgICAgICBnZXRDbG9zZXN0QW5jZXN0b3JJbjogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4sXG4gICAgICAgICAgICBpc0NoYXJhY3RlckRhdGFOb2RlOiBpc0NoYXJhY3RlckRhdGFOb2RlLFxuICAgICAgICAgICAgaXNUZXh0T3JDb21tZW50Tm9kZTogaXNUZXh0T3JDb21tZW50Tm9kZSxcbiAgICAgICAgICAgIGluc2VydEFmdGVyOiBpbnNlcnRBZnRlcixcbiAgICAgICAgICAgIHNwbGl0RGF0YU5vZGU6IHNwbGl0RGF0YU5vZGUsXG4gICAgICAgICAgICBnZXREb2N1bWVudDogZ2V0RG9jdW1lbnQsXG4gICAgICAgICAgICBnZXRXaW5kb3c6IGdldFdpbmRvdyxcbiAgICAgICAgICAgIGdldElmcmFtZVdpbmRvdzogZ2V0SWZyYW1lV2luZG93LFxuICAgICAgICAgICAgZ2V0SWZyYW1lRG9jdW1lbnQ6IGdldElmcmFtZURvY3VtZW50LFxuICAgICAgICAgICAgZ2V0Qm9keTogdXRpbC5nZXRCb2R5LFxuICAgICAgICAgICAgaXNXaW5kb3c6IGlzV2luZG93LFxuICAgICAgICAgICAgZ2V0Q29udGVudERvY3VtZW50OiBnZXRDb250ZW50RG9jdW1lbnQsXG4gICAgICAgICAgICBnZXRSb290Q29udGFpbmVyOiBnZXRSb290Q29udGFpbmVyLFxuICAgICAgICAgICAgY29tcGFyZVBvaW50czogY29tcGFyZVBvaW50cyxcbiAgICAgICAgICAgIGlzQnJva2VuTm9kZTogaXNCcm9rZW5Ob2RlLFxuICAgICAgICAgICAgaW5zcGVjdE5vZGU6IGluc3BlY3ROb2RlLFxuICAgICAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5OiBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHksXG4gICAgICAgICAgICBmcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW46IGZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbixcbiAgICAgICAgICAgIGNyZWF0ZUl0ZXJhdG9yOiBjcmVhdGVJdGVyYXRvcixcbiAgICAgICAgICAgIERvbVBvc2l0aW9uOiBEb21Qb3NpdGlvblxuICAgICAgICB9O1xuXG4gICAgICAgIGFwaS5ET01FeGNlcHRpb24gPSBET01FeGNlcHRpb247XG4gICAgfSk7XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBQdXJlIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgRE9NIFJhbmdlXG4gICAgYXBpLmNyZWF0ZUNvcmVNb2R1bGUoXCJEb21SYW5nZVwiLCBbXCJEb21VdGlsXCJdLCBmdW5jdGlvbihhcGksIG1vZHVsZSkge1xuICAgICAgICB2YXIgZG9tID0gYXBpLmRvbTtcbiAgICAgICAgdmFyIHV0aWwgPSBhcGkudXRpbDtcbiAgICAgICAgdmFyIERvbVBvc2l0aW9uID0gZG9tLkRvbVBvc2l0aW9uO1xuICAgICAgICB2YXIgRE9NRXhjZXB0aW9uID0gYXBpLkRPTUV4Y2VwdGlvbjtcblxuICAgICAgICB2YXIgaXNDaGFyYWN0ZXJEYXRhTm9kZSA9IGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlO1xuICAgICAgICB2YXIgZ2V0Tm9kZUluZGV4ID0gZG9tLmdldE5vZGVJbmRleDtcbiAgICAgICAgdmFyIGlzT3JJc0FuY2VzdG9yT2YgPSBkb20uaXNPcklzQW5jZXN0b3JPZjtcbiAgICAgICAgdmFyIGdldERvY3VtZW50ID0gZG9tLmdldERvY3VtZW50O1xuICAgICAgICB2YXIgY29tcGFyZVBvaW50cyA9IGRvbS5jb21wYXJlUG9pbnRzO1xuICAgICAgICB2YXIgc3BsaXREYXRhTm9kZSA9IGRvbS5zcGxpdERhdGFOb2RlO1xuICAgICAgICB2YXIgZ2V0Q2xvc2VzdEFuY2VzdG9ySW4gPSBkb20uZ2V0Q2xvc2VzdEFuY2VzdG9ySW47XG4gICAgICAgIHZhciBnZXROb2RlTGVuZ3RoID0gZG9tLmdldE5vZGVMZW5ndGg7XG4gICAgICAgIHZhciBhcnJheUNvbnRhaW5zID0gZG9tLmFycmF5Q29udGFpbnM7XG4gICAgICAgIHZhciBnZXRSb290Q29udGFpbmVyID0gZG9tLmdldFJvb3RDb250YWluZXI7XG4gICAgICAgIHZhciBjcmFzaHlUZXh0Tm9kZXMgPSBhcGkuZmVhdHVyZXMuY3Jhc2h5VGV4dE5vZGVzO1xuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgLy8gVXRpbGl0eSBmdW5jdGlvbnNcblxuICAgICAgICBmdW5jdGlvbiBpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChub2RlLCByYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuIChub2RlLm5vZGVUeXBlICE9IDMpICYmXG4gICAgICAgICAgICAgICAgICAgKGlzT3JJc0FuY2VzdG9yT2Yobm9kZSwgcmFuZ2Uuc3RhcnRDb250YWluZXIpIHx8IGlzT3JJc0FuY2VzdG9yT2Yobm9kZSwgcmFuZ2UuZW5kQ29udGFpbmVyKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRSYW5nZURvY3VtZW50KHJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2UuZG9jdW1lbnQgfHwgZ2V0RG9jdW1lbnQocmFuZ2Uuc3RhcnRDb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Qm91bmRhcnlCZWZvcmVOb2RlKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRG9tUG9zaXRpb24obm9kZS5wYXJlbnROb2RlLCBnZXROb2RlSW5kZXgobm9kZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Qm91bmRhcnlBZnRlck5vZGUobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb21Qb3NpdGlvbihub2RlLnBhcmVudE5vZGUsIGdldE5vZGVJbmRleChub2RlKSArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5zZXJ0Tm9kZUF0UG9zaXRpb24obm9kZSwgbiwgbykge1xuICAgICAgICAgICAgdmFyIGZpcnN0Tm9kZUluc2VydGVkID0gbm9kZS5ub2RlVHlwZSA9PSAxMSA/IG5vZGUuZmlyc3RDaGlsZCA6IG5vZGU7XG4gICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShuKSkge1xuICAgICAgICAgICAgICAgIGlmIChvID09IG4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbS5pbnNlcnRBZnRlcihub2RlLCBuKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG8gPT0gMCA/IG4gOiBzcGxpdERhdGFOb2RlKG4sIG8pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG8gPj0gbi5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG4uYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG4uaW5zZXJ0QmVmb3JlKG5vZGUsIG4uY2hpbGROb2Rlc1tvXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlyc3ROb2RlSW5zZXJ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByYW5nZXNJbnRlcnNlY3QocmFuZ2VBLCByYW5nZUIsIHRvdWNoaW5nSXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQocmFuZ2VBKTtcbiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQocmFuZ2VCKTtcblxuICAgICAgICAgICAgaWYgKGdldFJhbmdlRG9jdW1lbnQocmFuZ2VCKSAhPSBnZXRSYW5nZURvY3VtZW50KHJhbmdlQSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiV1JPTkdfRE9DVU1FTlRfRVJSXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3RhcnRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyhyYW5nZUEuc3RhcnRDb250YWluZXIsIHJhbmdlQS5zdGFydE9mZnNldCwgcmFuZ2VCLmVuZENvbnRhaW5lciwgcmFuZ2VCLmVuZE9mZnNldCksXG4gICAgICAgICAgICAgICAgZW5kQ29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHMocmFuZ2VBLmVuZENvbnRhaW5lciwgcmFuZ2VBLmVuZE9mZnNldCwgcmFuZ2VCLnN0YXJ0Q29udGFpbmVyLCByYW5nZUIuc3RhcnRPZmZzZXQpO1xuXG4gICAgICAgICAgICByZXR1cm4gdG91Y2hpbmdJc0ludGVyc2VjdGluZyA/IHN0YXJ0Q29tcGFyaXNvbiA8PSAwICYmIGVuZENvbXBhcmlzb24gPj0gMCA6IHN0YXJ0Q29tcGFyaXNvbiA8IDAgJiYgZW5kQ29tcGFyaXNvbiA+IDA7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbG9uZVN1YnRyZWUoaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0aWFsbHlTZWxlY3RlZDtcbiAgICAgICAgICAgIGZvciAodmFyIG5vZGUsIGZyYWcgPSBnZXRSYW5nZURvY3VtZW50KGl0ZXJhdG9yLnJhbmdlKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIHN1Ykl0ZXJhdG9yOyBub2RlID0gaXRlcmF0b3IubmV4dCgpOyApIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsbHlTZWxlY3RlZCA9IGl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCk7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2xvbmVOb2RlKCFwYXJ0aWFsbHlTZWxlY3RlZCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRpYWxseVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yID0gaXRlcmF0b3IuZ2V0U3VidHJlZUl0ZXJhdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoY2xvbmVTdWJ0cmVlKHN1Ykl0ZXJhdG9yKSk7XG4gICAgICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEwKSB7IC8vIERvY3VtZW50VHlwZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZyYWc7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpdGVyYXRlU3VidHJlZShyYW5nZUl0ZXJhdG9yLCBmdW5jLCBpdGVyYXRvclN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgaXQsIG47XG4gICAgICAgICAgICBpdGVyYXRvclN0YXRlID0gaXRlcmF0b3JTdGF0ZSB8fCB7IHN0b3A6IGZhbHNlIH07XG4gICAgICAgICAgICBmb3IgKHZhciBub2RlLCBzdWJSYW5nZUl0ZXJhdG9yOyBub2RlID0gcmFuZ2VJdGVyYXRvci5uZXh0KCk7ICkge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZUl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bmMobm9kZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRvclN0YXRlLnN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG5vZGUgaXMgcGFydGlhbGx5IHNlbGVjdGVkIGJ5IHRoZSBSYW5nZSwgc28gd2UgY2FuIHVzZSBhIG5ldyBSYW5nZUl0ZXJhdG9yIG9uIHRoZSBwb3J0aW9uIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbm9kZSBzZWxlY3RlZCBieSB0aGUgUmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZUl0ZXJhdG9yID0gcmFuZ2VJdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVTdWJ0cmVlKHN1YlJhbmdlSXRlcmF0b3IsIGZ1bmMsIGl0ZXJhdG9yU3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViUmFuZ2VJdGVyYXRvci5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVyYXRvclN0YXRlLnN0b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgd2hvbGUgbm9kZSBpcyBzZWxlY3RlZCwgc28gd2UgY2FuIHVzZSBlZmZpY2llbnQgRE9NIGl0ZXJhdGlvbiB0byBpdGVyYXRlIG92ZXIgdGhlIG5vZGUgYW5kIGl0c1xuICAgICAgICAgICAgICAgICAgICAvLyBkZXNjZW5kYW50c1xuICAgICAgICAgICAgICAgICAgICBpdCA9IGRvbS5jcmVhdGVJdGVyYXRvcihub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCAobiA9IGl0Lm5leHQoKSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnVuYyhuKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRvclN0YXRlLnN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVN1YnRyZWUoaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIHZhciBzdWJJdGVyYXRvcjtcbiAgICAgICAgICAgIHdoaWxlIChpdGVyYXRvci5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3IuaXNQYXJ0aWFsbHlTZWxlY3RlZFN1YnRyZWUoKSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJJdGVyYXRvciA9IGl0ZXJhdG9yLmdldFN1YnRyZWVJdGVyYXRvcigpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVTdWJ0cmVlKHN1Ykl0ZXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZXh0cmFjdFN1YnRyZWUoaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5vZGUsIGZyYWcgPSBnZXRSYW5nZURvY3VtZW50KGl0ZXJhdG9yLnJhbmdlKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIHN1Ykl0ZXJhdG9yOyBub2RlID0gaXRlcmF0b3IubmV4dCgpOyApIHtcblxuICAgICAgICAgICAgICAgIGlmIChpdGVyYXRvci5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yID0gaXRlcmF0b3IuZ2V0U3VidHJlZUl0ZXJhdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZXh0cmFjdFN1YnRyZWUoc3ViSXRlcmF0b3IpKTtcbiAgICAgICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEwKSB7IC8vIERvY3VtZW50VHlwZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZyYWc7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXROb2Rlc0luUmFuZ2UocmFuZ2UsIG5vZGVUeXBlcywgZmlsdGVyKSB7XG4gICAgICAgICAgICB2YXIgZmlsdGVyTm9kZVR5cGVzID0gISEobm9kZVR5cGVzICYmIG5vZGVUeXBlcy5sZW5ndGgpLCByZWdleDtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJFeGlzdHMgPSAhIWZpbHRlcjtcbiAgICAgICAgICAgIGlmIChmaWx0ZXJOb2RlVHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoXCJeKFwiICsgbm9kZVR5cGVzLmpvaW4oXCJ8XCIpICsgXCIpJFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICAgICAgICBpdGVyYXRlU3VidHJlZShuZXcgUmFuZ2VJdGVyYXRvcihyYW5nZSwgZmFsc2UpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlck5vZGVUeXBlcyAmJiAhcmVnZXgudGVzdChub2RlLm5vZGVUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJFeGlzdHMgJiYgIWZpbHRlcihub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERvbid0IGluY2x1ZGUgYSBib3VuZGFyeSBjb250YWluZXIgaWYgaXQgaXMgYSBjaGFyYWN0ZXIgZGF0YSBub2RlIGFuZCB0aGUgcmFuZ2UgZG9lcyBub3QgY29udGFpbiBhbnlcbiAgICAgICAgICAgICAgICAvLyBvZiBpdHMgY2hhcmFjdGVyIGRhdGEuIFNlZSBpc3N1ZSAxOTAuXG4gICAgICAgICAgICAgICAgdmFyIHNjID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT0gc2MgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShzYykgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT0gc2MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZWMgPSByYW5nZS5lbmRDb250YWluZXI7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT0gZWMgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShlYykgJiYgcmFuZ2UuZW5kT2Zmc2V0ID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBub2RlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluc3BlY3QocmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gKHR5cGVvZiByYW5nZS5nZXROYW1lID09IFwidW5kZWZpbmVkXCIpID8gXCJSYW5nZVwiIDogcmFuZ2UuZ2V0TmFtZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFwiW1wiICsgbmFtZSArIFwiKFwiICsgZG9tLmluc3BlY3ROb2RlKHJhbmdlLnN0YXJ0Q29udGFpbmVyKSArIFwiOlwiICsgcmFuZ2Uuc3RhcnRPZmZzZXQgKyBcIiwgXCIgK1xuICAgICAgICAgICAgICAgICAgICBkb20uaW5zcGVjdE5vZGUocmFuZ2UuZW5kQ29udGFpbmVyKSArIFwiOlwiICsgcmFuZ2UuZW5kT2Zmc2V0ICsgXCIpXVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAvLyBSYW5nZUl0ZXJhdG9yIGNvZGUgcGFydGlhbGx5IGJvcnJvd3MgZnJvbSBJRVJhbmdlIGJ5IFRpbSBSeWFuIChodHRwOi8vZ2l0aHViLmNvbS90aW1jYW1lcm9ucnlhbi9JRVJhbmdlKVxuXG4gICAgICAgIGZ1bmN0aW9uIFJhbmdlSXRlcmF0b3IocmFuZ2UsIGNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXMpIHtcbiAgICAgICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZTtcbiAgICAgICAgICAgIHRoaXMuY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2RlcyA9IGNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXM7XG5cblxuICAgICAgICAgICAgaWYgKCFyYW5nZS5jb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5zbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuZWMgPSByYW5nZS5lbmRDb250YWluZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5lbyA9IHJhbmdlLmVuZE9mZnNldDtcbiAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2MgPT09IHRoaXMuZWMgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLnNjKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU2luZ2xlQ2hhcmFjdGVyRGF0YU5vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXJzdCA9IHRoaXMuX2xhc3QgPSB0aGlzLl9uZXh0ID0gdGhpcy5zYztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXJzdCA9IHRoaXMuX25leHQgPSAodGhpcy5zYyA9PT0gcm9vdCAmJiAhaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLnNjKSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYy5jaGlsZE5vZGVzW3RoaXMuc29dIDogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4odGhpcy5zYywgcm9vdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3QgPSAodGhpcy5lYyA9PT0gcm9vdCAmJiAhaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLmVjKSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lYy5jaGlsZE5vZGVzW3RoaXMuZW8gLSAxXSA6IGdldENsb3Nlc3RBbmNlc3RvckluKHRoaXMuZWMsIHJvb3QsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIFJhbmdlSXRlcmF0b3IucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgX2N1cnJlbnQ6IG51bGwsXG4gICAgICAgICAgICBfbmV4dDogbnVsbCxcbiAgICAgICAgICAgIF9maXJzdDogbnVsbCxcbiAgICAgICAgICAgIF9sYXN0OiBudWxsLFxuICAgICAgICAgICAgaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZTogZmFsc2UsXG5cbiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9uZXh0ID0gdGhpcy5fZmlyc3Q7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLl9uZXh0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0byBuZXh0IG5vZGVcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9uZXh0O1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSAoY3VycmVudCAhPT0gdGhpcy5fbGFzdCkgPyBjdXJyZW50Lm5leHRTaWJsaW5nIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgcGFydGlhbGx5IHNlbGVjdGVkIHRleHQgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUoY3VycmVudCkgJiYgdGhpcy5jbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gdGhpcy5lYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50ID0gY3VycmVudC5jbG9uZU5vZGUodHJ1ZSkpLmRlbGV0ZURhdGEodGhpcy5lbywgY3VycmVudC5sZW5ndGggLSB0aGlzLmVvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50ID09PSB0aGlzLnNjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LmNsb25lTm9kZSh0cnVlKSkuZGVsZXRlRGF0YSgwLCB0aGlzLnNvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2N1cnJlbnQsIHN0YXJ0LCBlbmQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShjdXJyZW50KSAmJiAoY3VycmVudCA9PT0gdGhpcy5zYyB8fCBjdXJyZW50ID09PSB0aGlzLmVjKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IChjdXJyZW50ID09PSB0aGlzLnNjKSA/IHRoaXMuc28gOiAwO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSAoY3VycmVudCA9PT0gdGhpcy5lYykgPyB0aGlzLmVvIDogY3VycmVudC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydCAhPSBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZGVsZXRlRGF0YShzdGFydCwgZW5kIC0gc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8gQ2hlY2tzIGlmIHRoZSBjdXJyZW50IG5vZGUgaXMgcGFydGlhbGx5IHNlbGVjdGVkXG4gICAgICAgICAgICBpc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9jdXJyZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChjdXJyZW50LCB0aGlzLnJhbmdlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFN1YnRyZWVJdGVyYXRvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YlJhbmdlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzU2luZ2xlQ2hhcmFjdGVyRGF0YU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViUmFuZ2UgPSB0aGlzLnJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgc3ViUmFuZ2UuY29sbGFwc2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YlJhbmdlID0gbmV3IFJhbmdlKGdldFJhbmdlRG9jdW1lbnQodGhpcy5yYW5nZSkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydENvbnRhaW5lciA9IGN1cnJlbnQsIHN0YXJ0T2Zmc2V0ID0gMCwgZW5kQ29udGFpbmVyID0gY3VycmVudCwgZW5kT2Zmc2V0ID0gZ2V0Tm9kZUxlbmd0aChjdXJyZW50KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPcklzQW5jZXN0b3JPZihjdXJyZW50LCB0aGlzLnNjKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSB0aGlzLnNjO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSB0aGlzLnNvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09ySXNBbmNlc3Rvck9mKGN1cnJlbnQsIHRoaXMuZWMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRDb250YWluZXIgPSB0aGlzLmVjO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kT2Zmc2V0ID0gdGhpcy5lbztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUJvdW5kYXJpZXMoc3ViUmFuZ2UsIHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJhbmdlSXRlcmF0b3Ioc3ViUmFuZ2UsIHRoaXMuY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2Rlcyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkZXRhY2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmFuZ2UgPSB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dCA9IHRoaXMuX2ZpcnN0ID0gdGhpcy5fbGFzdCA9IHRoaXMuc2MgPSB0aGlzLnNvID0gdGhpcy5lYyA9IHRoaXMuZW8gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgdmFyIGJlZm9yZUFmdGVyTm9kZVR5cGVzID0gWzEsIDMsIDQsIDUsIDcsIDgsIDEwXTtcbiAgICAgICAgdmFyIHJvb3RDb250YWluZXJOb2RlVHlwZXMgPSBbMiwgOSwgMTFdO1xuICAgICAgICB2YXIgcmVhZG9ubHlOb2RlVHlwZXMgPSBbNSwgNiwgMTAsIDEyXTtcbiAgICAgICAgdmFyIGluc2VydGFibGVOb2RlVHlwZXMgPSBbMSwgMywgNCwgNSwgNywgOCwgMTAsIDExXTtcbiAgICAgICAgdmFyIHN1cnJvdW5kTm9kZVR5cGVzID0gWzEsIDMsIDQsIDUsIDcsIDhdO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUFuY2VzdG9yRmluZGVyKG5vZGVUeXBlcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUsIHNlbGZJc0FuY2VzdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQsIG4gPSBzZWxmSXNBbmNlc3RvciA/IG5vZGUgOiBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdCA9IG4ubm9kZVR5cGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJheUNvbnRhaW5zKG5vZGVUeXBlcywgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG4gPSBuLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIgPSBjcmVhdGVBbmNlc3RvckZpbmRlciggWzksIDExXSApO1xuICAgICAgICB2YXIgZ2V0UmVhZG9ubHlBbmNlc3RvciA9IGNyZWF0ZUFuY2VzdG9yRmluZGVyKHJlYWRvbmx5Tm9kZVR5cGVzKTtcbiAgICAgICAgdmFyIGdldERvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yID0gY3JlYXRlQW5jZXN0b3JGaW5kZXIoIFs2LCAxMCwgMTJdICk7XG5cbiAgICAgICAgZnVuY3Rpb24gYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCBhbGxvd1NlbGYpIHtcbiAgICAgICAgICAgIGlmIChnZXREb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCBhbGxvd1NlbGYpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIklOVkFMSURfTk9ERV9UWVBFX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydFZhbGlkTm9kZVR5cGUobm9kZSwgaW52YWxpZFR5cGVzKSB7XG4gICAgICAgICAgICBpZiAoIWFycmF5Q29udGFpbnMoaW52YWxpZFR5cGVzLCBub2RlLm5vZGVUeXBlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJJTlZBTElEX05PREVfVFlQRV9FUlJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhc3NlcnRWYWxpZE9mZnNldChub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IChpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpID8gbm9kZS5sZW5ndGggOiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJJTkRFWF9TSVpFX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydFNhbWVEb2N1bWVudE9yRnJhZ21lbnQobm9kZTEsIG5vZGUyKSB7XG4gICAgICAgICAgICBpZiAoZ2V0RG9jdW1lbnRPckZyYWdtZW50Q29udGFpbmVyKG5vZGUxLCB0cnVlKSAhPT0gZ2V0RG9jdW1lbnRPckZyYWdtZW50Q29udGFpbmVyKG5vZGUyLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJXUk9OR19ET0NVTUVOVF9FUlJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhc3NlcnROb2RlTm90UmVhZE9ubHkobm9kZSkge1xuICAgICAgICAgICAgaWYgKGdldFJlYWRvbmx5QW5jZXN0b3Iobm9kZSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXNzZXJ0Tm9kZShub2RlLCBjb2RlTmFtZSkge1xuICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihjb2RlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc09ycGhhbihub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gKGNyYXNoeVRleHROb2RlcyAmJiBkb20uaXNCcm9rZW5Ob2RlKG5vZGUpKSB8fFxuICAgICAgICAgICAgICAgICFhcnJheUNvbnRhaW5zKHJvb3RDb250YWluZXJOb2RlVHlwZXMsIG5vZGUubm9kZVR5cGUpICYmICFnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIobm9kZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1ZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9mZnNldCA8PSAoaXNDaGFyYWN0ZXJEYXRhTm9kZShub2RlKSA/IG5vZGUubGVuZ3RoIDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1JhbmdlVmFsaWQocmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiAoISFyYW5nZS5zdGFydENvbnRhaW5lciAmJiAhIXJhbmdlLmVuZENvbnRhaW5lciAmJlxuICAgICAgICAgICAgICAgICAgICAhaXNPcnBoYW4ocmFuZ2Uuc3RhcnRDb250YWluZXIpICYmXG4gICAgICAgICAgICAgICAgICAgICFpc09ycGhhbihyYW5nZS5lbmRDb250YWluZXIpICYmXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWRPZmZzZXQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KSAmJlxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkT2Zmc2V0KHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhc3NlcnRSYW5nZVZhbGlkKHJhbmdlKSB7XG4gICAgICAgICAgICBpZiAoIWlzUmFuZ2VWYWxpZChyYW5nZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSYW5nZSBlcnJvcjogUmFuZ2UgaXMgbm8gbG9uZ2VyIHZhbGlkIGFmdGVyIERPTSBtdXRhdGlvbiAoXCIgKyByYW5nZS5pbnNwZWN0KCkgKyBcIilcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgIC8vIFRlc3QgdGhlIGJyb3dzZXIncyBpbm5lckhUTUwgc3VwcG9ydCB0byBkZWNpZGUgaG93IHRvIGltcGxlbWVudCBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnRcbiAgICAgICAgdmFyIHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIHZhciBodG1sUGFyc2luZ0NvbmZvcm1zID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdHlsZUVsLmlubmVySFRNTCA9IFwiPGI+eDwvYj5cIjtcbiAgICAgICAgICAgIGh0bWxQYXJzaW5nQ29uZm9ybXMgPSAoc3R5bGVFbC5maXJzdENoaWxkLm5vZGVUeXBlID09IDMpOyAvLyBPcGVyYSBpbmNvcnJlY3RseSBjcmVhdGVzIGFuIGVsZW1lbnQgbm9kZVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBJRSA2IGFuZCA3IHRocm93XG4gICAgICAgIH1cblxuICAgICAgICBhcGkuZmVhdHVyZXMuaHRtbFBhcnNpbmdDb25mb3JtcyA9IGh0bWxQYXJzaW5nQ29uZm9ybXM7XG5cbiAgICAgICAgdmFyIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCA9IGh0bWxQYXJzaW5nQ29uZm9ybXMgP1xuXG4gICAgICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiBhcyBwZXIgSFRNTCBwYXJzaW5nIHNwZWMsIHRydXN0aW5nIGluIHRoZSBicm93c2VyJ3MgaW1wbGVtZW50YXRpb24gb2YgaW5uZXJIVE1MLiBTZWVcbiAgICAgICAgICAgIC8vIGRpc2N1c3Npb24gYW5kIGJhc2UgY29kZSBmb3IgdGhpcyBpbXBsZW1lbnRhdGlvbiBhdCBpc3N1ZSA2Ny5cbiAgICAgICAgICAgIC8vIFNwZWM6IGh0dHA6Ly9odG1sNS5vcmcvc3BlY3MvZG9tLXBhcnNpbmcuaHRtbCNleHRlbnNpb25zLXRvLXRoZS1yYW5nZS1pbnRlcmZhY2VcbiAgICAgICAgICAgIC8vIFRoYW5rcyB0byBBbGVrcyBXaWxsaWFtcy5cbiAgICAgICAgICAgIGZ1bmN0aW9uKGZyYWdtZW50U3RyKSB7XG4gICAgICAgICAgICAgICAgLy8gXCJMZXQgbm9kZSB0aGUgY29udGV4dCBvYmplY3QncyBzdGFydCdzIG5vZGUuXCJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnRDb250YWluZXI7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KG5vZGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gXCJJZiB0aGUgY29udGV4dCBvYmplY3QncyBzdGFydCdzIG5vZGUgaXMgbnVsbCwgcmFpc2UgYW4gSU5WQUxJRF9TVEFURV9FUlJcbiAgICAgICAgICAgICAgICAvLyBleGNlcHRpb24gYW5kIGFib3J0IHRoZXNlIHN0ZXBzLlwiXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJJTlZBTElEX1NUQVRFX0VSUlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBcIkxldCBlbGVtZW50IGJlIGFzIGZvbGxvd3MsIGRlcGVuZGluZyBvbiBub2RlJ3MgaW50ZXJmYWNlOlwiXG4gICAgICAgICAgICAgICAgLy8gRG9jdW1lbnQsIERvY3VtZW50IEZyYWdtZW50OiBudWxsXG4gICAgICAgICAgICAgICAgdmFyIGVsID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIFwiRWxlbWVudDogbm9kZVwiXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBlbCA9IG5vZGU7XG5cbiAgICAgICAgICAgICAgICAvLyBcIlRleHQsIENvbW1lbnQ6IG5vZGUncyBwYXJlbnRFbGVtZW50XCJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBkb20ucGFyZW50RWxlbWVudChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBcIklmIGVpdGhlciBlbGVtZW50IGlzIG51bGwgb3IgZWxlbWVudCdzIG93bmVyRG9jdW1lbnQgaXMgYW4gSFRNTCBkb2N1bWVudFxuICAgICAgICAgICAgICAgIC8vIGFuZCBlbGVtZW50J3MgbG9jYWwgbmFtZSBpcyBcImh0bWxcIiBhbmQgZWxlbWVudCdzIG5hbWVzcGFjZSBpcyB0aGUgSFRNTFxuICAgICAgICAgICAgICAgIC8vIG5hbWVzcGFjZVwiXG4gICAgICAgICAgICAgICAgaWYgKGVsID09PSBudWxsIHx8IChcbiAgICAgICAgICAgICAgICAgICAgZWwubm9kZU5hbWUgPT0gXCJIVE1MXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgZG9tLmlzSHRtbE5hbWVzcGFjZShnZXREb2N1bWVudChlbCkuZG9jdW1lbnRFbGVtZW50KSAmJlxuICAgICAgICAgICAgICAgICAgICBkb20uaXNIdG1sTmFtZXNwYWNlKGVsKVxuICAgICAgICAgICAgICAgICkpIHtcblxuICAgICAgICAgICAgICAgIC8vIFwibGV0IGVsZW1lbnQgYmUgYSBuZXcgRWxlbWVudCB3aXRoIFwiYm9keVwiIGFzIGl0cyBsb2NhbCBuYW1lIGFuZCB0aGUgSFRNTFxuICAgICAgICAgICAgICAgIC8vIG5hbWVzcGFjZSBhcyBpdHMgbmFtZXNwYWNlLlwiXCJcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBkb2MuY3JlYXRlRWxlbWVudChcImJvZHlcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBlbC5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFwiSWYgdGhlIG5vZGUncyBkb2N1bWVudCBpcyBhbiBIVE1MIGRvY3VtZW50OiBJbnZva2UgdGhlIEhUTUwgZnJhZ21lbnQgcGFyc2luZyBhbGdvcml0aG0uXCJcbiAgICAgICAgICAgICAgICAvLyBcIklmIHRoZSBub2RlJ3MgZG9jdW1lbnQgaXMgYW4gWE1MIGRvY3VtZW50OiBJbnZva2UgdGhlIFhNTCBmcmFnbWVudCBwYXJzaW5nIGFsZ29yaXRobS5cIlxuICAgICAgICAgICAgICAgIC8vIFwiSW4gZWl0aGVyIGNhc2UsIHRoZSBhbGdvcml0aG0gbXVzdCBiZSBpbnZva2VkIHdpdGggZnJhZ21lbnQgYXMgdGhlIGlucHV0XG4gICAgICAgICAgICAgICAgLy8gYW5kIGVsZW1lbnQgYXMgdGhlIGNvbnRleHQgZWxlbWVudC5cIlxuICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGZyYWdtZW50U3RyO1xuXG4gICAgICAgICAgICAgICAgLy8gXCJJZiB0aGlzIHJhaXNlcyBhbiBleGNlcHRpb24sIHRoZW4gYWJvcnQgdGhlc2Ugc3RlcHMuIE90aGVyd2lzZSwgbGV0IG5ld1xuICAgICAgICAgICAgICAgIC8vIGNoaWxkcmVuIGJlIHRoZSBub2RlcyByZXR1cm5lZC5cIlxuXG4gICAgICAgICAgICAgICAgLy8gXCJMZXQgZnJhZ21lbnQgYmUgYSBuZXcgRG9jdW1lbnRGcmFnbWVudC5cIlxuICAgICAgICAgICAgICAgIC8vIFwiQXBwZW5kIGFsbCBuZXcgY2hpbGRyZW4gdG8gZnJhZ21lbnQuXCJcbiAgICAgICAgICAgICAgICAvLyBcIlJldHVybiBmcmFnbWVudC5cIlxuICAgICAgICAgICAgICAgIHJldHVybiBkb20uZnJhZ21lbnRGcm9tTm9kZUNoaWxkcmVuKGVsKTtcbiAgICAgICAgICAgIH0gOlxuXG4gICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIGlubmVySFRNTCBjYW5ub3QgYmUgdHJ1c3RlZCwgc28gZmFsbCBiYWNrIHRvIGEgc2ltcGxlciwgbm9uLWNvbmZvcm1hbnQgaW1wbGVtZW50YXRpb24gdGhhdFxuICAgICAgICAgICAgLy8gcHJldmlvdXMgdmVyc2lvbnMgb2YgUmFuZ3kgdXNlZCAod2l0aCB0aGUgZXhjZXB0aW9uIG9mIHVzaW5nIGEgYm9keSBlbGVtZW50IHJhdGhlciB0aGFuIGEgZGl2KVxuICAgICAgICAgICAgZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2MuY3JlYXRlRWxlbWVudChcImJvZHlcIik7XG4gICAgICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gZnJhZ21lbnRTdHI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZG9tLmZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbihlbCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHNwbGl0UmFuZ2VCb3VuZGFyaWVzKHJhbmdlLCBwb3NpdGlvbnNUb1ByZXNlcnZlKSB7XG4gICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHJhbmdlKTtcblxuICAgICAgICAgICAgdmFyIHNjID0gcmFuZ2Uuc3RhcnRDb250YWluZXIsIHNvID0gcmFuZ2Uuc3RhcnRPZmZzZXQsIGVjID0gcmFuZ2UuZW5kQ29udGFpbmVyLCBlbyA9IHJhbmdlLmVuZE9mZnNldDtcbiAgICAgICAgICAgIHZhciBzdGFydEVuZFNhbWUgPSAoc2MgPT09IGVjKTtcblxuICAgICAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUoZWMpICYmIGVvID4gMCAmJiBlbyA8IGVjLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNwbGl0RGF0YU5vZGUoZWMsIGVvLCBwb3NpdGlvbnNUb1ByZXNlcnZlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUoc2MpICYmIHNvID4gMCAmJiBzbyA8IHNjLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNjID0gc3BsaXREYXRhTm9kZShzYywgc28sIHBvc2l0aW9uc1RvUHJlc2VydmUpO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydEVuZFNhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZW8gLT0gc287XG4gICAgICAgICAgICAgICAgICAgIGVjID0gc2M7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlYyA9PSBzYy5wYXJlbnROb2RlICYmIGVvID49IGdldE5vZGVJbmRleChzYykpIHtcbiAgICAgICAgICAgICAgICAgICAgZW8rKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc28gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBbmRFbmQoc2MsIHNvLCBlYywgZW8pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiByYW5nZVRvSHRtbChyYW5nZSkge1xuICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZChyYW5nZSk7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKCByYW5nZS5jbG9uZUNvbnRlbnRzKCkgKTtcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIuaW5uZXJIVE1MO1xuICAgICAgICB9XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICB2YXIgcmFuZ2VQcm9wZXJ0aWVzID0gW1wic3RhcnRDb250YWluZXJcIiwgXCJzdGFydE9mZnNldFwiLCBcImVuZENvbnRhaW5lclwiLCBcImVuZE9mZnNldFwiLCBcImNvbGxhcHNlZFwiLFxuICAgICAgICAgICAgXCJjb21tb25BbmNlc3RvckNvbnRhaW5lclwiXTtcblxuICAgICAgICB2YXIgczJzID0gMCwgczJlID0gMSwgZTJlID0gMiwgZTJzID0gMztcbiAgICAgICAgdmFyIG5fYiA9IDAsIG5fYSA9IDEsIG5fYl9hID0gMiwgbl9pID0gMztcblxuICAgICAgICB1dGlsLmV4dGVuZChhcGkucmFuZ2VQcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGNvbXBhcmVCb3VuZGFyeVBvaW50czogZnVuY3Rpb24oaG93LCByYW5nZSkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudCh0aGlzLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydENvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZUEsIG9mZnNldEEsIG5vZGVCLCBvZmZzZXRCO1xuICAgICAgICAgICAgICAgIHZhciBwcmVmaXhBID0gKGhvdyA9PSBlMnMgfHwgaG93ID09IHMycykgPyBcInN0YXJ0XCIgOiBcImVuZFwiO1xuICAgICAgICAgICAgICAgIHZhciBwcmVmaXhCID0gKGhvdyA9PSBzMmUgfHwgaG93ID09IHMycykgPyBcInN0YXJ0XCIgOiBcImVuZFwiO1xuICAgICAgICAgICAgICAgIG5vZGVBID0gdGhpc1twcmVmaXhBICsgXCJDb250YWluZXJcIl07XG4gICAgICAgICAgICAgICAgb2Zmc2V0QSA9IHRoaXNbcHJlZml4QSArIFwiT2Zmc2V0XCJdO1xuICAgICAgICAgICAgICAgIG5vZGVCID0gcmFuZ2VbcHJlZml4QiArIFwiQ29udGFpbmVyXCJdO1xuICAgICAgICAgICAgICAgIG9mZnNldEIgPSByYW5nZVtwcmVmaXhCICsgXCJPZmZzZXRcIl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmVQb2ludHMobm9kZUEsIG9mZnNldEEsIG5vZGVCLCBvZmZzZXRCKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluc2VydE5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkTm9kZVR5cGUobm9kZSwgaW5zZXJ0YWJsZU5vZGVUeXBlcyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuc3RhcnRDb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzT3JJc0FuY2VzdG9yT2Yobm9kZSwgdGhpcy5zdGFydENvbnRhaW5lcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIkhJRVJBUkNIWV9SRVFVRVNUX0VSUlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBObyBjaGVjayBmb3Igd2hldGhlciB0aGUgY29udGFpbmVyIG9mIHRoZSBzdGFydCBvZiB0aGUgUmFuZ2UgaXMgb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWxsb3dcbiAgICAgICAgICAgICAgICAvLyBjaGlsZHJlbiBvZiB0aGUgdHlwZSBvZiBub2RlOiB0aGUgYnJvd3NlcidzIERPTSBpbXBsZW1lbnRhdGlvbiBzaG91bGQgZG8gdGhpcyBmb3IgdXMgd2hlbiB3ZSBhdHRlbXB0XG4gICAgICAgICAgICAgICAgLy8gdG8gYWRkIHRoZSBub2RlXG5cbiAgICAgICAgICAgICAgICB2YXIgZmlyc3ROb2RlSW5zZXJ0ZWQgPSBpbnNlcnROb2RlQXRQb3NpdGlvbihub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKGZpcnN0Tm9kZUluc2VydGVkKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNsb25lQ29udGVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2xvbmUsIGZyYWc7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRSYW5nZURvY3VtZW50KHRoaXMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFydENvbnRhaW5lciA9PT0gdGhpcy5lbmRDb250YWluZXIgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLnN0YXJ0Q29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSB0aGlzLnN0YXJ0Q29udGFpbmVyLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lLmRhdGEgPSBjbG9uZS5kYXRhLnNsaWNlKHRoaXMuc3RhcnRPZmZzZXQsIHRoaXMuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyYWc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gY2xvbmVTdWJ0cmVlKGl0ZXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjYW5TdXJyb3VuZENvbnRlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGFzc2VydE5vZGVOb3RSZWFkT25seSh0aGlzLnN0YXJ0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBhc3NlcnROb2RlTm90UmVhZE9ubHkodGhpcy5lbmRDb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbnRlbnRzIGNhbiBiZSBzdXJyb3VuZGVkLiBTcGVjaWZpY2FsbHksIHRoaXMgbWVhbnMgd2hldGhlciB0aGUgcmFuZ2UgcGFydGlhbGx5IHNlbGVjdHNcbiAgICAgICAgICAgICAgICAvLyBubyBub24tdGV4dCBub2Rlcy5cbiAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcmllc0ludmFsaWQgPSAoaXRlcmF0b3IuX2ZpcnN0ICYmIChpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChpdGVyYXRvci5fZmlyc3QsIHRoaXMpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZXJhdG9yLl9sYXN0ICYmIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGl0ZXJhdG9yLl9sYXN0LCB0aGlzKSkpO1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAhYm91bmRhcmllc0ludmFsaWQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzdXJyb3VuZENvbnRlbnRzOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBzdXJyb3VuZE5vZGVUeXBlcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2FuU3Vycm91bmRDb250ZW50cygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJJTlZBTElEX1NUQVRFX0VSUlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHRoZSBjb250ZW50c1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5leHRyYWN0Q29udGVudHMoKTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSBjaGlsZHJlbiBvZiB0aGUgbm9kZVxuICAgICAgICAgICAgICAgIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSW5zZXJ0IHRoZSBuZXcgbm9kZSBhbmQgYWRkIHRoZSBleHRyYWN0ZWQgY29udGVudHNcbiAgICAgICAgICAgICAgICBpbnNlcnROb2RlQXRQb3NpdGlvbihub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3ROb2RlKG5vZGUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2xvbmVSYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBuZXcgUmFuZ2UoZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSByYW5nZVByb3BlcnRpZXMubGVuZ3RoLCBwcm9wO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcCA9IHJhbmdlUHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VbcHJvcF0gPSB0aGlzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgc2MgPSB0aGlzLnN0YXJ0Q29udGFpbmVyO1xuICAgICAgICAgICAgICAgIGlmIChzYyA9PT0gdGhpcy5lbmRDb250YWluZXIgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShzYykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChzYy5ub2RlVHlwZSA9PSAzIHx8IHNjLm5vZGVUeXBlID09IDQpID8gc2MuZGF0YS5zbGljZSh0aGlzLnN0YXJ0T2Zmc2V0LCB0aGlzLmVuZE9mZnNldCkgOiBcIlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0UGFydHMgPSBbXSwgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZVN1YnRyZWUoaXRlcmF0b3IsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjY2VwdCBvbmx5IHRleHQgb3IgQ0RBVEEgbm9kZXMsIG5vdCBjb21tZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyB8fCBub2RlLm5vZGVUeXBlID09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0UGFydHMucHVzaChub2RlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0UGFydHMuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBUaGUgbWV0aG9kcyBiZWxvdyBhcmUgYWxsIG5vbi1zdGFuZGFyZC4gVGhlIGZvbGxvd2luZyBiYXRjaCB3ZXJlIGludHJvZHVjZWQgYnkgTW96aWxsYSBidXQgaGF2ZSBzaW5jZVxuICAgICAgICAgICAgLy8gYmVlbiByZW1vdmVkIGZyb20gTW96aWxsYS5cblxuICAgICAgICAgICAgY29tcGFyZU5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZUluZGV4ID0gZ2V0Tm9kZUluZGV4KG5vZGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIk5PVF9GT1VORF9FUlJcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IHRoaXMuY29tcGFyZVBvaW50KHBhcmVudCwgbm9kZUluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29tcGFyaXNvbiA9IHRoaXMuY29tcGFyZVBvaW50KHBhcmVudCwgbm9kZUluZGV4ICsgMSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRDb21wYXJpc29uIDwgMCkgeyAvLyBOb2RlIHN0YXJ0cyBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChlbmRDb21wYXJpc29uID4gMCkgPyBuX2JfYSA6IG5fYjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGVuZENvbXBhcmlzb24gPiAwKSA/IG5fYSA6IG5faTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb21wYXJlUG9pbnQ6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZShub2RlLCBcIkhJRVJBUkNIWV9SRVFVRVNUX0VSUlwiKTtcbiAgICAgICAgICAgICAgICBhc3NlcnRTYW1lRG9jdW1lbnRPckZyYWdtZW50KG5vZGUsIHRoaXMuc3RhcnRDb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVQb2ludHMobm9kZSwgb2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudDogY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50LFxuXG4gICAgICAgICAgICB0b0h0bWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZVRvSHRtbCh0aGlzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIHRvdWNoaW5nSXNJbnRlcnNlY3RpbmcgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoaXMgbWV0aG9kIGNvbnNpZGVycyBhIG5vZGUgdGhhdCBib3JkZXJzIGEgcmFuZ2UgaW50ZXJzZWN0c1xuICAgICAgICAgICAgLy8gd2l0aCBpdCAoYXMgaW4gV2ViS2l0KSBvciBub3QgKGFzIGluIEdlY2tvIHByZS0xLjksIGFuZCB0aGUgZGVmYXVsdClcbiAgICAgICAgICAgIGludGVyc2VjdHNOb2RlOiBmdW5jdGlvbihub2RlLCB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBhc3NlcnROb2RlKG5vZGUsIFwiTk9UX0ZPVU5EX0VSUlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0RG9jdW1lbnQobm9kZSkgIT09IGdldFJhbmdlRG9jdW1lbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUsIG9mZnNldCA9IGdldE5vZGVJbmRleChub2RlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnROb2RlKHBhcmVudCwgXCJOT1RfRk9VTkRfRVJSXCIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHMocGFyZW50LCBvZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCksXG4gICAgICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSBjb21wYXJlUG9pbnRzKHBhcmVudCwgb2Zmc2V0ICsgMSwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdG91Y2hpbmdJc0ludGVyc2VjdGluZyA/IHN0YXJ0Q29tcGFyaXNvbiA8PSAwICYmIGVuZENvbXBhcmlzb24gPj0gMCA6IHN0YXJ0Q29tcGFyaXNvbiA8IDAgJiYgZW5kQ29tcGFyaXNvbiA+IDA7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc1BvaW50SW5SYW5nZTogZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBhc3NlcnROb2RlKG5vZGUsIFwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSXCIpO1xuICAgICAgICAgICAgICAgIGFzc2VydFNhbWVEb2N1bWVudE9yRnJhZ21lbnQobm9kZSwgdGhpcy5zdGFydENvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGNvbXBhcmVQb2ludHMobm9kZSwgb2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KSA+PSAwKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPD0gMCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBUaGUgbWV0aG9kcyBiZWxvdyBhcmUgbm9uLXN0YW5kYXJkIGFuZCBpbnZlbnRlZCBieSBtZS5cblxuICAgICAgICAgICAgLy8gU2hhcmluZyBhIGJvdW5kYXJ5IHN0YXJ0LXRvLWVuZCBvciBlbmQtdG8tc3RhcnQgZG9lcyBub3QgY291bnQgYXMgaW50ZXJzZWN0aW9uLlxuICAgICAgICAgICAgaW50ZXJzZWN0c1JhbmdlOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZXNJbnRlcnNlY3QodGhpcywgcmFuZ2UsIGZhbHNlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIFNoYXJpbmcgYSBib3VuZGFyeSBzdGFydC10by1lbmQgb3IgZW5kLXRvLXN0YXJ0IGRvZXMgY291bnQgYXMgaW50ZXJzZWN0aW9uLlxuICAgICAgICAgICAgaW50ZXJzZWN0c09yVG91Y2hlc1JhbmdlOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZXNJbnRlcnNlY3QodGhpcywgcmFuZ2UsIHRydWUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW50ZXJzZWN0aW9uOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmludGVyc2VjdHNSYW5nZShyYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHModGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCwgcmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSBjb21wYXJlUG9pbnRzKHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCwgcmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb25SYW5nZSA9IHRoaXMuY2xvbmVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRDb21wYXJpc29uID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25SYW5nZS5zZXRTdGFydChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmRDb21wYXJpc29uID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblJhbmdlLnNldEVuZChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvblJhbmdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHVuaW9uOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmludGVyc2VjdHNPclRvdWNoZXNSYW5nZShyYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVuaW9uUmFuZ2UgPSB0aGlzLmNsb25lUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVQb2ludHMocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5pb25SYW5nZS5zZXRTdGFydChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wYXJlUG9pbnRzKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0LCB0aGlzLmVuZENvbnRhaW5lciwgdGhpcy5lbmRPZmZzZXQpID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaW9uUmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5pb25SYW5nZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiUmFuZ2VzIGRvIG5vdCBpbnRlcnNlY3RcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY29udGFpbnNOb2RlOiBmdW5jdGlvbihub2RlLCBhbGxvd1BhcnRpYWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxsb3dQYXJ0aWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmludGVyc2VjdHNOb2RlKG5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlTm9kZShub2RlKSA9PSBuX2k7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY29udGFpbnNOb2RlQ29udGVudHM6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlUG9pbnQobm9kZSwgMCkgPj0gMCAmJiB0aGlzLmNvbXBhcmVQb2ludChub2RlLCBnZXROb2RlTGVuZ3RoKG5vZGUpKSA8PSAwO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY29udGFpbnNSYW5nZTogZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gdGhpcy5pbnRlcnNlY3Rpb24ocmFuZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb24gIT09IG51bGwgJiYgcmFuZ2UuZXF1YWxzKGludGVyc2VjdGlvbik7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb250YWluc05vZGVUZXh0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVSYW5nZSA9IHRoaXMuY2xvbmVSYW5nZSgpO1xuICAgICAgICAgICAgICAgIG5vZGVSYW5nZS5zZWxlY3ROb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZXMgPSBub2RlUmFuZ2UuZ2V0Tm9kZXMoWzNdKTtcbiAgICAgICAgICAgICAgICBpZiAodGV4dE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZVJhbmdlLnNldFN0YXJ0KHRleHROb2Rlc1swXSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0VGV4dE5vZGUgPSB0ZXh0Tm9kZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVSYW5nZS5zZXRFbmQobGFzdFRleHROb2RlLCBsYXN0VGV4dE5vZGUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbnNSYW5nZShub2RlUmFuZ2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5zTm9kZUNvbnRlbnRzKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldE5vZGVzOiBmdW5jdGlvbihub2RlVHlwZXMsIGZpbHRlcikge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE5vZGVzSW5SYW5nZSh0aGlzLCBub2RlVHlwZXMsIGZpbHRlcik7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXREb2N1bWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFJhbmdlRG9jdW1lbnQodGhpcyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb2xsYXBzZUJlZm9yZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kQmVmb3JlKG5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UoZmFsc2UpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY29sbGFwc2VBZnRlcjogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRBZnRlcihub2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZ2V0Qm9va21hcms6IGZ1bmN0aW9uKGNvbnRhaW5lck5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgcHJlU2VsZWN0aW9uUmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2UoZG9jKTtcbiAgICAgICAgICAgICAgICBjb250YWluZXJOb2RlID0gY29udGFpbmVyTm9kZSB8fCBkb20uZ2V0Qm9keShkb2MpO1xuICAgICAgICAgICAgICAgIHByZVNlbGVjdGlvblJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhjb250YWluZXJOb2RlKTtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLmludGVyc2VjdGlvbihwcmVTZWxlY3Rpb25SYW5nZSk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gMCwgZW5kID0gMDtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlU2VsZWN0aW9uUmFuZ2Uuc2V0RW5kKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gcHJlU2VsZWN0aW9uUmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgcmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyTm9kZTogY29udGFpbmVyTm9kZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBtb3ZlVG9Cb29rbWFyazogZnVuY3Rpb24oYm9va21hcmspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyTm9kZSA9IGJvb2ttYXJrLmNvbnRhaW5lck5vZGU7XG4gICAgICAgICAgICAgICAgdmFyIGNoYXJJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydChjb250YWluZXJOb2RlLCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgIHZhciBub2RlU3RhY2sgPSBbY29udGFpbmVyTm9kZV0sIG5vZGUsIGZvdW5kU3RhcnQgPSBmYWxzZSwgc3RvcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0Q2hhckluZGV4LCBpLCBjaGlsZE5vZGVzO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKCFzdG9wICYmIChub2RlID0gbm9kZVN0YWNrLnBvcCgpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Q2hhckluZGV4ID0gY2hhckluZGV4ICsgbm9kZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kU3RhcnQgJiYgYm9va21hcmsuc3RhcnQgPj0gY2hhckluZGV4ICYmIGJvb2ttYXJrLnN0YXJ0IDw9IG5leHRDaGFySW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0KG5vZGUsIGJvb2ttYXJrLnN0YXJ0IC0gY2hhckluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZFN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZFN0YXJ0ICYmIGJvb2ttYXJrLmVuZCA+PSBjaGFySW5kZXggJiYgYm9va21hcmsuZW5kIDw9IG5leHRDaGFySW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEVuZChub2RlLCBib29rbWFyay5lbmQgLSBjaGFySW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckluZGV4ID0gbmV4dENoYXJJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZXMgPSBub2RlLmNoaWxkTm9kZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVN0YWNrLnB1c2goY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXROYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJEb21SYW5nZVwiO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXF1YWxzOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSYW5nZS5yYW5nZXNFcXVhbCh0aGlzLCByYW5nZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc1ZhbGlkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaW5zcGVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3BlY3QodGhpcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBkZXRhY2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIEluIERPTTQsIGRldGFjaCgpIGlzIG5vdyBhIG5vLW9wLlxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBjb3B5Q29tcGFyaXNvbkNvbnN0YW50c1RvT2JqZWN0KG9iaikge1xuICAgICAgICAgICAgb2JqLlNUQVJUX1RPX1NUQVJUID0gczJzO1xuICAgICAgICAgICAgb2JqLlNUQVJUX1RPX0VORCA9IHMyZTtcbiAgICAgICAgICAgIG9iai5FTkRfVE9fRU5EID0gZTJlO1xuICAgICAgICAgICAgb2JqLkVORF9UT19TVEFSVCA9IGUycztcblxuICAgICAgICAgICAgb2JqLk5PREVfQkVGT1JFID0gbl9iO1xuICAgICAgICAgICAgb2JqLk5PREVfQUZURVIgPSBuX2E7XG4gICAgICAgICAgICBvYmouTk9ERV9CRUZPUkVfQU5EX0FGVEVSID0gbl9iX2E7XG4gICAgICAgICAgICBvYmouTk9ERV9JTlNJREUgPSBuX2k7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjb3B5Q29tcGFyaXNvbkNvbnN0YW50cyhjb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHNUb09iamVjdChjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgICBjb3B5Q29tcGFyaXNvbkNvbnN0YW50c1RvT2JqZWN0KGNvbnN0cnVjdG9yLnByb3RvdHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZUNvbnRlbnRSZW1vdmVyKHJlbW92ZXIsIGJvdW5kYXJ5VXBkYXRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2MgPSB0aGlzLnN0YXJ0Q29udGFpbmVyLCBzbyA9IHRoaXMuc3RhcnRPZmZzZXQsIHJvb3QgPSB0aGlzLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gICAgICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbmV3IFJhbmdlSXRlcmF0b3IodGhpcywgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JrIG91dCB3aGVyZSB0byBwb3NpdGlvbiB0aGUgcmFuZ2UgYWZ0ZXIgY29udGVudCByZW1vdmFsXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUsIGJvdW5kYXJ5O1xuICAgICAgICAgICAgICAgIGlmIChzYyAhPT0gcm9vdCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gZ2V0Q2xvc2VzdEFuY2VzdG9ySW4oc2MsIHJvb3QsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeSA9IGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBzYyA9IGJvdW5kYXJ5Lm5vZGU7XG4gICAgICAgICAgICAgICAgICAgIHNvID0gYm91bmRhcnkub2Zmc2V0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIG5vbmUgb2YgdGhlIHJhbmdlIGlzIHJlYWQtb25seVxuICAgICAgICAgICAgICAgIGl0ZXJhdGVTdWJ0cmVlKGl0ZXJhdG9yLCBhc3NlcnROb2RlTm90UmVhZE9ubHkpO1xuXG4gICAgICAgICAgICAgICAgaXRlcmF0b3IucmVzZXQoKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgY29udGVudFxuICAgICAgICAgICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IHJlbW92ZXIoaXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV3IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHNjLCBzbywgc2MsIHNvKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVQcm90b3R5cGVSYW5nZShjb25zdHJ1Y3RvciwgYm91bmRhcnlVcGRhdGVyKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoaXNCZWZvcmUsIGlzU3RhcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE5vZGVUeXBlKG5vZGUsIGJlZm9yZUFmdGVyTm9kZVR5cGVzKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShnZXRSb290Q29udGFpbmVyKG5vZGUpLCByb290Q29udGFpbmVyTm9kZVR5cGVzKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnkgPSAoaXNCZWZvcmUgPyBnZXRCb3VuZGFyeUJlZm9yZU5vZGUgOiBnZXRCb3VuZGFyeUFmdGVyTm9kZSkobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIChpc1N0YXJ0ID8gc2V0UmFuZ2VTdGFydCA6IHNldFJhbmdlRW5kKSh0aGlzLCBib3VuZGFyeS5ub2RlLCBib3VuZGFyeS5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldFJhbmdlU3RhcnQocmFuZ2UsIG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgIHZhciBlYyA9IHJhbmdlLmVuZENvbnRhaW5lciwgZW8gPSByYW5nZS5lbmRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgIT09IHJhbmdlLnN0YXJ0Q29udGFpbmVyIHx8IG9mZnNldCAhPT0gcmFuZ2Uuc3RhcnRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHJvb3QgY29udGFpbmVycyBvZiB0aGUgcmFuZ2UgYW5kIHRoZSBuZXcgYm91bmRhcnksIGFuZCBhbHNvIGNoZWNrIHdoZXRoZXIgdGhlIG5ldyBib3VuZGFyeVxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBhZnRlciB0aGUgY3VycmVudCBlbmQuIEluIGVpdGhlciBjYXNlLCBjb2xsYXBzZSB0aGUgcmFuZ2UgdG8gdGhlIG5ldyBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0Um9vdENvbnRhaW5lcihub2RlKSAhPSBnZXRSb290Q29udGFpbmVyKGVjKSB8fCBjb21wYXJlUG9pbnRzKG5vZGUsIG9mZnNldCwgZWMsIGVvKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlYyA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbyA9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIocmFuZ2UsIG5vZGUsIG9mZnNldCwgZWMsIGVvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldFJhbmdlRW5kKHJhbmdlLCBub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2MgPSByYW5nZS5zdGFydENvbnRhaW5lciwgc28gPSByYW5nZS5zdGFydE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSAhPT0gcmFuZ2UuZW5kQ29udGFpbmVyIHx8IG9mZnNldCAhPT0gcmFuZ2UuZW5kT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSByb290IGNvbnRhaW5lcnMgb2YgdGhlIHJhbmdlIGFuZCB0aGUgbmV3IGJvdW5kYXJ5LCBhbmQgYWxzbyBjaGVjayB3aGV0aGVyIHRoZSBuZXcgYm91bmRhcnlcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgYWZ0ZXIgdGhlIGN1cnJlbnQgZW5kLiBJbiBlaXRoZXIgY2FzZSwgY29sbGFwc2UgdGhlIHJhbmdlIHRvIHRoZSBuZXcgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldFJvb3RDb250YWluZXIobm9kZSkgIT0gZ2V0Um9vdENvbnRhaW5lcihzYykgfHwgY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHNjLCBzbykgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvID0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcihyYW5nZSwgc2MsIHNvLCBub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHVwIGluaGVyaXRhbmNlXG4gICAgICAgICAgICB2YXIgRiA9IGZ1bmN0aW9uKCkge307XG4gICAgICAgICAgICBGLnByb3RvdHlwZSA9IGFwaS5yYW5nZVByb3RvdHlwZTtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBGKCk7XG5cbiAgICAgICAgICAgIHV0aWwuZXh0ZW5kKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwge1xuICAgICAgICAgICAgICAgIHNldFN0YXJ0OiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWRPZmZzZXQobm9kZSwgb2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRSYW5nZVN0YXJ0KHRoaXMsIG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNldEVuZDogZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0UmFuZ2VFbmQodGhpcywgbm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIHNldCBhIHJhbmdlJ3Mgc3RhcnQgYW5kIGVuZCBib3VuZGFyaWVzLiBPdmVybG9hZGVkIGFzIGZvbGxvd3M6XG4gICAgICAgICAgICAgICAgICogLSBUd28gcGFyYW1ldGVycyAobm9kZSwgb2Zmc2V0KSBjcmVhdGVzIGEgY29sbGFwc2VkIHJhbmdlIGF0IHRoYXQgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgKiAtIFRocmVlIHBhcmFtZXRlcnMgKG5vZGUsIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpIGNyZWF0ZXMgYSByYW5nZSBjb250YWluZWQgd2l0aCBub2RlIHN0YXJ0aW5nIGF0XG4gICAgICAgICAgICAgICAgICogICBzdGFydE9mZnNldCBhbmQgZW5kaW5nIGF0IGVuZE9mZnNldFxuICAgICAgICAgICAgICAgICAqIC0gRm91ciBwYXJhbWV0ZXJzIChzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0LCBlbmROb2RlLCBlbmRPZmZzZXQpIGNyZWF0ZXMgYSByYW5nZSBzdGFydGluZyBhdCBzdGFydE9mZnNldCBpblxuICAgICAgICAgICAgICAgICAqICAgc3RhcnROb2RlIGFuZCBlbmRpbmcgYXQgZW5kT2Zmc2V0IGluIGVuZE5vZGVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzZXRTdGFydEFuZEVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2MgPSBhcmdzWzBdLCBzbyA9IGFyZ3NbMV0sIGVjID0gc2MsIGVvID0gc287XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvID0gYXJnc1syXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYyA9IGFyZ3NbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW8gPSBhcmdzWzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHNjLCBzbywgZWMsIGVvKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNldEJvdW5kYXJ5OiBmdW5jdGlvbihub2RlLCBvZmZzZXQsIGlzU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tcInNldFwiICsgKGlzU3RhcnQgPyBcIlN0YXJ0XCIgOiBcIkVuZFwiKV0obm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2V0U3RhcnRCZWZvcmU6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcih0cnVlLCB0cnVlKSxcbiAgICAgICAgICAgICAgICBzZXRTdGFydEFmdGVyOiBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoZmFsc2UsIHRydWUpLFxuICAgICAgICAgICAgICAgIHNldEVuZEJlZm9yZTogY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKHRydWUsIGZhbHNlKSxcbiAgICAgICAgICAgICAgICBzZXRFbmRBZnRlcjogY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKGZhbHNlLCBmYWxzZSksXG5cbiAgICAgICAgICAgICAgICBjb2xsYXBzZTogZnVuY3Rpb24oaXNTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZWxlY3ROb2RlQ29udGVudHM6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgbm9kZSwgMCwgbm9kZSwgZ2V0Tm9kZUxlbmd0aChub2RlKSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNlbGVjdE5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkTm9kZVR5cGUobm9kZSwgYmVmb3JlQWZ0ZXJOb2RlVHlwZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGdldEJvdW5kYXJ5QmVmb3JlTm9kZShub2RlKSwgZW5kID0gZ2V0Qm91bmRhcnlBZnRlck5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCBzdGFydC5ub2RlLCBzdGFydC5vZmZzZXQsIGVuZC5ub2RlLCBlbmQub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZXh0cmFjdENvbnRlbnRzOiBjcmVhdGVSYW5nZUNvbnRlbnRSZW1vdmVyKGV4dHJhY3RTdWJ0cmVlLCBib3VuZGFyeVVwZGF0ZXIpLFxuXG4gICAgICAgICAgICAgICAgZGVsZXRlQ29udGVudHM6IGNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIoZGVsZXRlU3VidHJlZSwgYm91bmRhcnlVcGRhdGVyKSxcblxuICAgICAgICAgICAgICAgIGNhblN1cnJvdW5kQ29udGVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnROb2RlTm90UmVhZE9ubHkodGhpcy5zdGFydENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydE5vZGVOb3RSZWFkT25seSh0aGlzLmVuZENvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbnRlbnRzIGNhbiBiZSBzdXJyb3VuZGVkLiBTcGVjaWZpY2FsbHksIHRoaXMgbWVhbnMgd2hldGhlciB0aGUgcmFuZ2UgcGFydGlhbGx5IHNlbGVjdHNcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gbm9uLXRleHQgbm9kZXMuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBSYW5nZUl0ZXJhdG9yKHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm91bmRhcmllc0ludmFsaWQgPSAoaXRlcmF0b3IuX2ZpcnN0ICYmIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGl0ZXJhdG9yLl9maXJzdCwgdGhpcykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaXRlcmF0b3IuX2xhc3QgJiYgaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2xhc3QsIHRoaXMpKSk7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWJvdW5kYXJpZXNJbnZhbGlkO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzcGxpdEJvdW5kYXJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdFJhbmdlQm91bmRhcmllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc3BsaXRCb3VuZGFyaWVzUHJlc2VydmluZ1Bvc2l0aW9uczogZnVuY3Rpb24ocG9zaXRpb25zVG9QcmVzZXJ2ZSkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdFJhbmdlQm91bmRhcmllcyh0aGlzLCBwb3NpdGlvbnNUb1ByZXNlcnZlKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplQm91bmRhcmllczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjID0gdGhpcy5zdGFydENvbnRhaW5lciwgc28gPSB0aGlzLnN0YXJ0T2Zmc2V0LCBlYyA9IHRoaXMuZW5kQ29udGFpbmVyLCBlbyA9IHRoaXMuZW5kT2Zmc2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXJnZUZvcndhcmQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2libGluZyA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYyA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW8gPSBub2RlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZERhdGEoc2libGluZy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lcmdlQmFja3dhcmQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2libGluZyA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpYmxpbmcgJiYgc2libGluZy5ub2RlVHlwZSA9PSBub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2MgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlTGVuZ3RoID0gbm9kZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc28gPSBzaWJsaW5nLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmluc2VydERhdGEoMCwgc2libGluZy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjID09IGVjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvICs9IHNvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYyA9IHNjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWMgPT0gbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlSW5kZXggPSBnZXROb2RlSW5kZXgobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbyA9PSBub2RlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvID0gbm9kZUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbyA+IG5vZGVJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW8tLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplU3RhcnQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGVjKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVjLmxlbmd0aCA9PSBlbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlRm9yd2FyZChlYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW8gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZE5vZGUgPSBlYy5jaGlsZE5vZGVzW2VvIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZE5vZGUgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShlbmROb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUZvcndhcmQoZW5kTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplU3RhcnQgPSAhdGhpcy5jb2xsYXBzZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKHNjKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlQmFja3dhcmQoc2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvIDwgc2MuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0Tm9kZSA9IHNjLmNoaWxkTm9kZXNbc29dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnROb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoc3RhcnROb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VCYWNrd2FyZChzdGFydE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2MgPSBlYztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvID0gZW87XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBlYywgZW8pO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBjb2xsYXBzZVRvUG9pbnQ6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE9mZnNldChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QW5kRW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzKGNvbnN0cnVjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgLy8gVXBkYXRlcyBjb21tb25BbmNlc3RvckNvbnRhaW5lciBhbmQgY29sbGFwc2VkIGFmdGVyIGJvdW5kYXJ5IGNoYW5nZVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDb2xsYXBzZWRBbmRDb21tb25BbmNlc3RvcihyYW5nZSkge1xuICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2VkID0gKHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgICAgICByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbGxhcHNlZCA/XG4gICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRDb250YWluZXIgOiBkb20uZ2V0Q29tbW9uQW5jZXN0b3IocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLmVuZENvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVCb3VuZGFyaWVzKHJhbmdlLCBzdGFydENvbnRhaW5lciwgc3RhcnRPZmZzZXQsIGVuZENvbnRhaW5lciwgZW5kT2Zmc2V0KSB7XG4gICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IHN0YXJ0Q29udGFpbmVyO1xuICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXQgPSBzdGFydE9mZnNldDtcbiAgICAgICAgICAgIHJhbmdlLmVuZENvbnRhaW5lciA9IGVuZENvbnRhaW5lcjtcbiAgICAgICAgICAgIHJhbmdlLmVuZE9mZnNldCA9IGVuZE9mZnNldDtcbiAgICAgICAgICAgIHJhbmdlLmRvY3VtZW50ID0gZG9tLmdldERvY3VtZW50KHN0YXJ0Q29udGFpbmVyKTtcblxuICAgICAgICAgICAgdXBkYXRlQ29sbGFwc2VkQW5kQ29tbW9uQW5jZXN0b3IocmFuZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gUmFuZ2UoZG9jKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0Q29udGFpbmVyID0gZG9jO1xuICAgICAgICAgICAgdGhpcy5zdGFydE9mZnNldCA9IDA7XG4gICAgICAgICAgICB0aGlzLmVuZENvbnRhaW5lciA9IGRvYztcbiAgICAgICAgICAgIHRoaXMuZW5kT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQgPSBkb2M7XG4gICAgICAgICAgICB1cGRhdGVDb2xsYXBzZWRBbmRDb21tb25BbmNlc3Rvcih0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWF0ZVByb3RvdHlwZVJhbmdlKFJhbmdlLCB1cGRhdGVCb3VuZGFyaWVzKTtcblxuICAgICAgICB1dGlsLmV4dGVuZChSYW5nZSwge1xuICAgICAgICAgICAgcmFuZ2VQcm9wZXJ0aWVzOiByYW5nZVByb3BlcnRpZXMsXG4gICAgICAgICAgICBSYW5nZUl0ZXJhdG9yOiBSYW5nZUl0ZXJhdG9yLFxuICAgICAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHM6IGNvcHlDb21wYXJpc29uQ29uc3RhbnRzLFxuICAgICAgICAgICAgY3JlYXRlUHJvdG90eXBlUmFuZ2U6IGNyZWF0ZVByb3RvdHlwZVJhbmdlLFxuICAgICAgICAgICAgaW5zcGVjdDogaW5zcGVjdCxcbiAgICAgICAgICAgIHRvSHRtbDogcmFuZ2VUb0h0bWwsXG4gICAgICAgICAgICBnZXRSYW5nZURvY3VtZW50OiBnZXRSYW5nZURvY3VtZW50LFxuICAgICAgICAgICAgcmFuZ2VzRXF1YWw6IGZ1bmN0aW9uKHIxLCByMikge1xuICAgICAgICAgICAgICAgIHJldHVybiByMS5zdGFydENvbnRhaW5lciA9PT0gcjIuc3RhcnRDb250YWluZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgcjEuc3RhcnRPZmZzZXQgPT09IHIyLnN0YXJ0T2Zmc2V0ICYmXG4gICAgICAgICAgICAgICAgICAgIHIxLmVuZENvbnRhaW5lciA9PT0gcjIuZW5kQ29udGFpbmVyICYmXG4gICAgICAgICAgICAgICAgICAgIHIxLmVuZE9mZnNldCA9PT0gcjIuZW5kT2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhcGkuRG9tUmFuZ2UgPSBSYW5nZTtcbiAgICB9KTtcclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuICAgIC8vIFdyYXBwZXJzIGZvciB0aGUgYnJvd3NlcidzIG5hdGl2ZSBET00gUmFuZ2UgYW5kL29yIFRleHRSYW5nZSBpbXBsZW1lbnRhdGlvbiBcbiAgICBhcGkuY3JlYXRlQ29yZU1vZHVsZShcIldyYXBwZWRSYW5nZVwiLCBbXCJEb21SYW5nZVwiXSwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHtcbiAgICAgICAgdmFyIFdyYXBwZWRSYW5nZSwgV3JhcHBlZFRleHRSYW5nZTtcbiAgICAgICAgdmFyIGRvbSA9IGFwaS5kb207XG4gICAgICAgIHZhciB1dGlsID0gYXBpLnV0aWw7XG4gICAgICAgIHZhciBEb21Qb3NpdGlvbiA9IGRvbS5Eb21Qb3NpdGlvbjtcbiAgICAgICAgdmFyIERvbVJhbmdlID0gYXBpLkRvbVJhbmdlO1xuICAgICAgICB2YXIgZ2V0Qm9keSA9IGRvbS5nZXRCb2R5O1xuICAgICAgICB2YXIgZ2V0Q29udGVudERvY3VtZW50ID0gZG9tLmdldENvbnRlbnREb2N1bWVudDtcbiAgICAgICAgdmFyIGlzQ2hhcmFjdGVyRGF0YU5vZGUgPSBkb20uaXNDaGFyYWN0ZXJEYXRhTm9kZTtcblxuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgaWYgKGFwaS5mZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSB3cmFwcGVyIGFyb3VuZCB0aGUgYnJvd3NlcidzIG5hdGl2ZSBET00gUmFuZ2UuIEl0IGhhcyB0d28gYWltczpcbiAgICAgICAgICAgIC8vIC0gUHJvdmlkZSB3b3JrYXJvdW5kcyBmb3Igc3BlY2lmaWMgYnJvd3NlciBidWdzXG4gICAgICAgICAgICAvLyAtIHByb3ZpZGUgY29udmVuaWVudCBleHRlbnNpb25zLCB3aGljaCBhcmUgaW5oZXJpdGVkIGZyb20gUmFuZ3kncyBEb21SYW5nZVxuXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlUHJvdG87XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlUHJvcGVydGllcyA9IERvbVJhbmdlLnJhbmdlUHJvcGVydGllcztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVJhbmdlUHJvcGVydGllcyhyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHJhbmdlUHJvcGVydGllcy5sZW5ndGgsIHByb3A7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3AgPSByYW5nZVByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZVtwcm9wXSA9IHJhbmdlLm5hdGl2ZVJhbmdlW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpeCBmb3IgYnJva2VuIGNvbGxhcHNlZCBwcm9wZXJ0eSBpbiBJRSA5LlxuICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZWQgPSAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lciAmJiByYW5nZS5zdGFydE9mZnNldCA9PT0gcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVOYXRpdmVSYW5nZShyYW5nZSwgc3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0LCBlbmRDb250YWluZXIsIGVuZE9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRNb3ZlZCA9IChyYW5nZS5zdGFydENvbnRhaW5lciAhPT0gc3RhcnRDb250YWluZXIgfHwgcmFuZ2Uuc3RhcnRPZmZzZXQgIT0gc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kTW92ZWQgPSAocmFuZ2UuZW5kQ29udGFpbmVyICE9PSBlbmRDb250YWluZXIgfHwgcmFuZ2UuZW5kT2Zmc2V0ICE9IGVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYXRpdmVSYW5nZURpZmZlcmVudCA9ICFyYW5nZS5lcXVhbHMocmFuZ2UubmF0aXZlUmFuZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBzZXQgYm90aCBib3VuZGFyaWVzIGZvciB0aGUgYmVuZWZpdCBvZiBJRTkgKHNlZSBpc3N1ZSAzNSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0TW92ZWQgfHwgZW5kTW92ZWQgfHwgbmF0aXZlUmFuZ2VEaWZmZXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChlbmRDb250YWluZXIsIGVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChzdGFydENvbnRhaW5lciwgc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcjtcblxuICAgICAgICAgICAgICAgIFdyYXBwZWRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcIldyYXBwZWRSYW5nZTogUmFuZ2UgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZSA9IHJhbmdlO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIERvbVJhbmdlLmNyZWF0ZVByb3RvdHlwZVJhbmdlKFdyYXBwZWRSYW5nZSwgdXBkYXRlTmF0aXZlUmFuZ2UpO1xuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90byA9IFdyYXBwZWRSYW5nZS5wcm90b3R5cGU7XG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNlbGVjdE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2VsZWN0Tm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLmNsb25lQ29udGVudHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY2xvbmVDb250ZW50cygpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBEdWUgdG8gYSBsb25nLXN0YW5kaW5nIEZpcmVmb3ggYnVnIHRoYXQgSSBoYXZlIG5vdCBiZWVuIGFibGUgdG8gZmluZCBhIHJlbGlhYmxlIHdheSB0byBkZXRlY3QsXG4gICAgICAgICAgICAgICAgLy8gaW5zZXJ0Tm9kZSgpIGlzIG5ldmVyIGRlbGVnYXRlZCB0byB0aGUgbmF0aXZlIHJhbmdlLlxuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zdXJyb3VuZENvbnRlbnRzID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnN1cnJvdW5kQ29udGVudHMobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5jb2xsYXBzZSA9IGZ1bmN0aW9uKGlzU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5jb2xsYXBzZShpc1N0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLmNsb25lUmFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXcmFwcGVkUmFuZ2UodGhpcy5uYXRpdmVSYW5nZS5jbG9uZVJhbmdlKCkpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0ZXN0IHJhbmdlIGFuZCBub2RlIGZvciBmZWF0dXJlIGRldGVjdGlvblxuXG4gICAgICAgICAgICAgICAgdmFyIHRlc3RUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwidGVzdFwiKTtcbiAgICAgICAgICAgICAgICBnZXRCb2R5KGRvY3VtZW50KS5hcHBlbmRDaGlsZCh0ZXN0VGV4dE5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cbiAgICAgICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAgICAgICAgIC8vIFRlc3QgZm9yIEZpcmVmb3ggMiBidWcgdGhhdCBwcmV2ZW50cyBtb3ZpbmcgdGhlIHN0YXJ0IG9mIGEgUmFuZ2UgdG8gYSBwb2ludCBhZnRlciBpdHMgY3VycmVudCBlbmQgYW5kXG4gICAgICAgICAgICAgICAgLy8gY29ycmVjdCBmb3IgaXRcblxuICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHRlc3RUZXh0Tm9kZSwgMCk7XG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHRlc3RUZXh0Tm9kZSwgMCk7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0ZXN0VGV4dE5vZGUsIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0U3RhcnQgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldEVuZCA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2VbbmFtZV0obm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIH0gY2F0Y2goZXgpIHtcblxuICAgICAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldFN0YXJ0ID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRFbmQgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyID0gZnVuY3Rpb24obmFtZSwgb3Bwb3NpdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2VbbmFtZV0obm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtvcHBvc2l0ZU5hbWVdKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlW25hbWVdKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0U3RhcnRCZWZvcmUgPSBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoXCJzZXRTdGFydEJlZm9yZVwiLCBcInNldEVuZEJlZm9yZVwiKTtcbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldFN0YXJ0QWZ0ZXIgPSBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoXCJzZXRTdGFydEFmdGVyXCIsIFwic2V0RW5kQWZ0ZXJcIik7XG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRFbmRCZWZvcmUgPSBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoXCJzZXRFbmRCZWZvcmVcIiwgXCJzZXRTdGFydEJlZm9yZVwiKTtcbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldEVuZEFmdGVyID0gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKFwic2V0RW5kQWZ0ZXJcIiwgXCJzZXRTdGFydEFmdGVyXCIpO1xuXG4gICAgICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgdXNlIERPTTQtY29tcGxpYW50IHNlbGVjdE5vZGVDb250ZW50cyBpbXBsZW1lbnRhdGlvbjogaXQncyBzaW1wbGVyIGFuZCBsZXNzIGNvZGUgdGhhbiB0ZXN0aW5nXG4gICAgICAgICAgICAgICAgLy8gd2hldGhlciB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uIGNhbiBiZSB0cnVzdGVkXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZWxlY3ROb2RlQ29udGVudHMgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRBbmRFbmQobm9kZSwgMCwgZG9tLmdldE5vZGVMZW5ndGgobm9kZSkpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAgICAgICAgIC8vIFRlc3QgZm9yIGFuZCBjb3JyZWN0IFdlYktpdCBidWcgdGhhdCBoYXMgdGhlIGJlaGF2aW91ciBvZiBjb21wYXJlQm91bmRhcnlQb2ludHMgcm91bmQgdGhlIHdyb25nIHdheSBmb3JcbiAgICAgICAgICAgICAgICAvLyBjb25zdGFudHMgU1RBUlRfVE9fRU5EIGFuZCBFTkRfVE9fU1RBUlQ6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDczOFxuXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7XG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHRlc3RUZXh0Tm9kZSwgMyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UyID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICByYW5nZTIuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7XG4gICAgICAgICAgICAgICAgcmFuZ2UyLnNldEVuZCh0ZXN0VGV4dE5vZGUsIDQpO1xuICAgICAgICAgICAgICAgIHJhbmdlMi5zZXRTdGFydCh0ZXN0VGV4dE5vZGUsIDIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhyYW5nZS5TVEFSVF9UT19FTkQsIHJhbmdlMikgPT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhyYW5nZS5FTkRfVE9fU1RBUlQsIHJhbmdlMikgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSB3cm9uZyB3YXkgcm91bmQsIHNvIGNvcnJlY3QgZm9yIGl0XG5cbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VQcm90by5jb21wYXJlQm91bmRhcnlQb2ludHMgPSBmdW5jdGlvbih0eXBlLCByYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSByYW5nZS5uYXRpdmVSYW5nZSB8fCByYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09IHJhbmdlLlNUQVJUX1RPX0VORCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSByYW5nZS5FTkRfVE9fU1RBUlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gcmFuZ2UuRU5EX1RPX1NUQVJUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHJhbmdlLlNUQVJUX1RPX0VORDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyh0eXBlLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VQcm90by5jb21wYXJlQm91bmRhcnlQb2ludHMgPSBmdW5jdGlvbih0eXBlLCByYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHR5cGUsIHJhbmdlLm5hdGl2ZVJhbmdlIHx8IHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAgICAgICAgIC8vIFRlc3QgZm9yIElFIGRlbGV0ZUNvbnRlbnRzKCkgYW5kIGV4dHJhY3RDb250ZW50cygpIGJ1ZyBhbmQgY29ycmVjdCBpdC4gU2VlIGlzc3VlIDEwNy5cblxuICAgICAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gXCIxMjNcIjtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dE5vZGUgPSBlbC5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgIHZhciBib2R5ID0gZ2V0Qm9keShkb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChlbCk7XG5cbiAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0ZXh0Tm9kZSwgMSk7XG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHRleHROb2RlLCAyKTtcbiAgICAgICAgICAgICAgICByYW5nZS5kZWxldGVDb250ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRleHROb2RlLmRhdGEgPT0gXCIxM1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJlaGF2aW91ciBpcyBjb3JyZWN0IHBlciBET000IFJhbmdlIHNvIHdyYXAgdGhlIGJyb3dzZXIncyBpbXBsZW1lbnRhdGlvbiBvZiBkZWxldGVDb250ZW50cygpIGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyBleHRyYWN0Q29udGVudHMoKVxuICAgICAgICAgICAgICAgICAgICByYW5nZVByb3RvLmRlbGV0ZUNvbnRlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLmRlbGV0ZUNvbnRlbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VQcm90by5leHRyYWN0Q29udGVudHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcmFnID0gdGhpcy5uYXRpdmVSYW5nZS5leHRyYWN0Q29udGVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmFnO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYm9keS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgICAgICAgICAgYm9keSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAgICAgICAgIC8vIFRlc3QgZm9yIGV4aXN0ZW5jZSBvZiBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgYW5kIGRlbGVnYXRlIHRvIGl0IGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzSG9zdE1ldGhvZChyYW5nZSwgXCJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VQcm90by5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgPSBmdW5jdGlvbihmcmFnbWVudFN0cikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGZyYWdtZW50U3RyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgZ2V0Qm9keShkb2N1bWVudCkucmVtb3ZlQ2hpbGQodGVzdFRleHROb2RlKTtcblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uZ2V0TmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXcmFwcGVkUmFuZ2VcIjtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgYXBpLldyYXBwZWRSYW5nZSA9IFdyYXBwZWRSYW5nZTtcblxuICAgICAgICAgICAgICAgIGFwaS5jcmVhdGVOYXRpdmVSYW5nZSA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgICAgICAgICAgICBkb2MgPSBnZXRDb250ZW50RG9jdW1lbnQoZG9jLCBtb2R1bGUsIFwiY3JlYXRlTmF0aXZlUmFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGFwaS5mZWF0dXJlcy5pbXBsZW1lbnRzVGV4dFJhbmdlKSB7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIGEgYnVnIHdoZXJlIElFIHJldHVybnMgdGhlIHdyb25nIGNvbnRhaW5lciBlbGVtZW50IGZyb20gdGhlIFRleHRSYW5nZSdzIHBhcmVudEVsZW1lbnQoKVxuICAgICAgICAgICAgbWV0aG9kLiBGb3IgZXhhbXBsZSwgaW4gdGhlIGZvbGxvd2luZyAod2hlcmUgcGlwZXMgZGVub3RlIHRoZSBzZWxlY3Rpb24gYm91bmRhcmllcyk6XG5cbiAgICAgICAgICAgIDx1bCBpZD1cInVsXCI+PGxpIGlkPVwiYVwiPnwgYSA8L2xpPjxsaSBpZD1cImJcIj4gYiB8PC9saT48L3VsPlxuXG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgIGFsZXJ0KHJhbmdlLnBhcmVudEVsZW1lbnQoKS5pZCk7IC8vIFNob3VsZCBhbGVydCBcInVsXCIgYnV0IGFsZXJ0cyBcImJcIlxuXG4gICAgICAgICAgICBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBjb21tb24gYW5jZXN0b3Igbm9kZSBvZiB0aGUgZm9sbG93aW5nOlxuICAgICAgICAgICAgLSB0aGUgcGFyZW50RWxlbWVudCgpIG9mIHRoZSB0ZXh0UmFuZ2VcbiAgICAgICAgICAgIC0gdGhlIHBhcmVudEVsZW1lbnQoKSBvZiB0aGUgdGV4dFJhbmdlIGFmdGVyIGNhbGxpbmcgY29sbGFwc2UodHJ1ZSlcbiAgICAgICAgICAgIC0gdGhlIHBhcmVudEVsZW1lbnQoKSBvZiB0aGUgdGV4dFJhbmdlIGFmdGVyIGNhbGxpbmcgY29sbGFwc2UoZmFsc2UpXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGdldFRleHRSYW5nZUNvbnRhaW5lckVsZW1lbnQgPSBmdW5jdGlvbih0ZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50RWwgPSB0ZXh0UmFuZ2UucGFyZW50RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHRleHRSYW5nZS5kdXBsaWNhdGUoKTtcbiAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRFbCA9IHJhbmdlLnBhcmVudEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRleHRSYW5nZS5kdXBsaWNhdGUoKTtcbiAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZEVsID0gcmFuZ2UucGFyZW50RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydEVuZENvbnRhaW5lciA9IChzdGFydEVsID09IGVuZEVsKSA/IHN0YXJ0RWwgOiBkb20uZ2V0Q29tbW9uQW5jZXN0b3Ioc3RhcnRFbCwgZW5kRWwpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0RW5kQ29udGFpbmVyID09IHBhcmVudEVsID8gc3RhcnRFbmRDb250YWluZXIgOiBkb20uZ2V0Q29tbW9uQW5jZXN0b3IocGFyZW50RWwsIHN0YXJ0RW5kQ29udGFpbmVyKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciB0ZXh0UmFuZ2VJc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHRleHRSYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0UmFuZ2UuY29tcGFyZUVuZFBvaW50cyhcIlN0YXJ0VG9FbmRcIiwgdGV4dFJhbmdlKSA9PSAwO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gR2V0cyB0aGUgYm91bmRhcnkgb2YgYSBUZXh0UmFuZ2UgZXhwcmVzc2VkIGFzIGEgbm9kZSBhbmQgYW4gb2Zmc2V0IHdpdGhpbiB0aGF0IG5vZGUuIFRoaXMgZnVuY3Rpb24gc3RhcnRlZFxuICAgICAgICAgICAgLy8gb3V0IGFzIGFuIGltcHJvdmVkIHZlcnNpb24gb2YgY29kZSBmb3VuZCBpbiBUaW0gQ2FtZXJvbiBSeWFuJ3MgSUVSYW5nZSAoaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2llcmFuZ2UvKVxuICAgICAgICAgICAgLy8gYnV0IGhhcyBncm93biwgZml4aW5nIHByb2JsZW1zIHdpdGggbGluZSBicmVha3MgaW4gcHJlZm9ybWF0dGVkIHRleHQsIGFkZGluZyB3b3JrYXJvdW5kIGZvciBJRSBUZXh0UmFuZ2VcbiAgICAgICAgICAgIC8vIGJ1Z3MsIGhhbmRsaW5nIGZvciBpbnB1dHMgYW5kIGltYWdlcywgcGx1cyBvcHRpbWl6YXRpb25zLlxuICAgICAgICAgICAgdmFyIGdldFRleHRSYW5nZUJvdW5kYXJ5UG9zaXRpb24gPSBmdW5jdGlvbih0ZXh0UmFuZ2UsIHdob2xlUmFuZ2VDb250YWluZXJFbGVtZW50LCBpc1N0YXJ0LCBpc0NvbGxhcHNlZCwgc3RhcnRJbmZvKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdvcmtpbmdSYW5nZSA9IHRleHRSYW5nZS5kdXBsaWNhdGUoKTtcbiAgICAgICAgICAgICAgICB3b3JraW5nUmFuZ2UuY29sbGFwc2UoaXNTdGFydCk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckVsZW1lbnQgPSB3b3JraW5nUmFuZ2UucGFyZW50RWxlbWVudCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gU29tZXRpbWVzIGNvbGxhcHNpbmcgYSBUZXh0UmFuZ2UgdGhhdCdzIGF0IHRoZSBzdGFydCBvZiBhIHRleHQgbm9kZSBjYW4gbW92ZSBpdCBpbnRvIHRoZSBwcmV2aW91cyBub2RlLCBzb1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciB0aGF0XG4gICAgICAgICAgICAgICAgaWYgKCFkb20uaXNPcklzQW5jZXN0b3JPZih3aG9sZVJhbmdlQ29udGFpbmVyRWxlbWVudCwgY29udGFpbmVyRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudCA9IHdob2xlUmFuZ2VDb250YWluZXJFbGVtZW50O1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgLy8gRGVhbCB3aXRoIG5vZGVzIHRoYXQgY2Fubm90IFwiY29udGFpbiByaWNoIEhUTUwgbWFya3VwXCIuIEluIHByYWN0aWNlLCB0aGlzIG1lYW5zIGZvcm0gaW5wdXRzLCBpbWFnZXMgYW5kXG4gICAgICAgICAgICAgICAgLy8gc2ltaWxhci4gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9hYTcwMzk1MCUyOFZTLjg1JTI5LmFzcHhcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRhaW5lckVsZW1lbnQuY2FuSGF2ZUhUTUwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IG5ldyBEb21Qb3NpdGlvbihjb250YWluZXJFbGVtZW50LnBhcmVudE5vZGUsIGRvbS5nZXROb2RlSW5kZXgoY29udGFpbmVyRWxlbWVudCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbjogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUluZm86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlSW5kZXg6IHBvcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudDogcG9zLm5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2luZ05vZGUgPSBkb20uZ2V0RG9jdW1lbnQoY29udGFpbmVyRWxlbWVudCkuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBIVE1MNSBTaGl2J3MgaW5zYW5lIHZpb2xhdGlvbiBvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCkuIFNlZSBSYW5neSBpc3N1ZSAxMDQgYW5kIEhUTUw1XG4gICAgICAgICAgICAgICAgLy8gU2hpdiBpc3N1ZSA2NDogaHR0cHM6Ly9naXRodWIuY29tL2FGYXJrYXMvaHRtbDVzaGl2L2lzc3Vlcy82NFxuICAgICAgICAgICAgICAgIGlmICh3b3JraW5nTm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtpbmdOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQod29ya2luZ05vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBjb21wYXJpc29uLCB3b3JraW5nQ29tcGFyaXNvblR5cGUgPSBpc1N0YXJ0ID8gXCJTdGFydFRvU3RhcnRcIiA6IFwiU3RhcnRUb0VuZFwiO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c05vZGUsIG5leHROb2RlLCBib3VuZGFyeVBvc2l0aW9uLCBib3VuZGFyeU5vZGU7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gKHN0YXJ0SW5mbyAmJiBzdGFydEluZm8uY29udGFpbmVyRWxlbWVudCA9PSBjb250YWluZXJFbGVtZW50KSA/IHN0YXJ0SW5mby5ub2RlSW5kZXggOiAwO1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGVDb3VudCA9IGNvbnRhaW5lckVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IGNoaWxkTm9kZUNvdW50O1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZW5kIGZpcnN0LiBDb2RlIHdpdGhpbiB0aGUgbG9vcCBhc3N1bWVzIHRoYXQgdGhlIGVuZHRoIGNoaWxkIG5vZGUgb2YgdGhlIGNvbnRhaW5lciBpcyBkZWZpbml0ZWx5XG4gICAgICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIHJhbmdlIGJvdW5kYXJ5LlxuICAgICAgICAgICAgICAgIHZhciBub2RlSW5kZXggPSBlbmQ7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZUluZGV4ID09IGNoaWxkTm9kZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKHdvcmtpbmdOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuaW5zZXJ0QmVmb3JlKHdvcmtpbmdOb2RlLCBjb250YWluZXJFbGVtZW50LmNoaWxkTm9kZXNbbm9kZUluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd29ya2luZ1JhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KHdvcmtpbmdOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbiA9IHdvcmtpbmdSYW5nZS5jb21wYXJlRW5kUG9pbnRzKHdvcmtpbmdDb21wYXJpc29uVHlwZSwgdGV4dFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmlzb24gPT0gMCB8fCBzdGFydCA9PSBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBhcmlzb24gPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPT0gc3RhcnQgKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Uga25vdyB0aGUgZW5kdGggY2hpbGQgbm9kZSBpcyBhZnRlciB0aGUgcmFuZ2UgYm91bmRhcnksIHNvIHdlIG11c3QgYmUgZG9uZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBub2RlSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSAoZW5kID09IHN0YXJ0ICsgMSkgPyBzdGFydCA6IG5vZGVJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBub2RlSW5kZXggPSBNYXRoLmZsb29yKChzdGFydCArIGVuZCkgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5yZW1vdmVDaGlsZCh3b3JraW5nTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAvLyBXZSd2ZSBub3cgcmVhY2hlZCBvciBnb25lIHBhc3QgdGhlIGJvdW5kYXJ5IG9mIHRoZSB0ZXh0IHJhbmdlIHdlJ3JlIGludGVyZXN0ZWQgaW5cbiAgICAgICAgICAgICAgICAvLyBzbyBoYXZlIGlkZW50aWZpZWQgdGhlIG5vZGUgd2Ugd2FudFxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5Tm9kZSA9IHdvcmtpbmdOb2RlLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBhcmlzb24gPT0gLTEgJiYgYm91bmRhcnlOb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoYm91bmRhcnlOb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgY2hhcmFjdGVyIGRhdGEgbm9kZSAodGV4dCwgY29tbWVudCwgY2RhdGEpLiBUaGUgd29ya2luZyByYW5nZSBpcyBjb2xsYXBzZWQgYXQgdGhlIHN0YXJ0IG9mXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBub2RlIGNvbnRhaW5pbmcgdGhlIHRleHQgcmFuZ2UncyBib3VuZGFyeSwgc28gd2UgbW92ZSB0aGUgZW5kIG9mIHRoZSB3b3JraW5nIHJhbmdlIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBib3VuZGFyeSBwb2ludCBhbmQgbWVhc3VyZSB0aGUgbGVuZ3RoIG9mIGl0cyB0ZXh0IHRvIGdldCB0aGUgYm91bmRhcnkncyBvZmZzZXQgd2l0aGluIHRoZSBub2RlLlxuICAgICAgICAgICAgICAgICAgICB3b3JraW5nUmFuZ2Uuc2V0RW5kUG9pbnQoaXNTdGFydCA/IFwiRW5kVG9TdGFydFwiIDogXCJFbmRUb0VuZFwiLCB0ZXh0UmFuZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKC9bXFxyXFxuXS8udGVzdChib3VuZGFyeU5vZGUuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICBGb3IgdGhlIHBhcnRpY3VsYXIgY2FzZSBvZiBhIGJvdW5kYXJ5IHdpdGhpbiBhIHRleHQgbm9kZSBjb250YWluaW5nIHJlbmRlcmVkIGxpbmUgYnJlYWtzICh3aXRoaW4gYVxuICAgICAgICAgICAgICAgICAgICAgICAgPHByZT4gZWxlbWVudCwgZm9yIGV4YW1wbGUpLCB3ZSBuZWVkIGEgc2xpZ2h0bHkgY29tcGxpY2F0ZWQgYXBwcm9hY2ggdG8gZ2V0IHRoZSBib3VuZGFyeSdzIG9mZnNldCBpblxuICAgICAgICAgICAgICAgICAgICAgICAgSUUuIFRoZSBmYWN0czpcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLSBFYWNoIGxpbmUgYnJlYWsgaXMgcmVwcmVzZW50ZWQgYXMgXFxyIGluIHRoZSB0ZXh0IG5vZGUncyBkYXRhL25vZGVWYWx1ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAtIEVhY2ggbGluZSBicmVhayBpcyByZXByZXNlbnRlZCBhcyBcXHJcXG4gaW4gdGhlIFRleHRSYW5nZSdzICd0ZXh0JyBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICAgICAgLSBUaGUgJ3RleHQnIHByb3BlcnR5IG9mIHRoZSBUZXh0UmFuZ2UgZG9lcyBub3QgY29udGFpbiB0cmFpbGluZyBsaW5lIGJyZWFrc1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBUbyBnZXQgcm91bmQgdGhlIHByb2JsZW0gcHJlc2VudGVkIGJ5IHRoZSBmaW5hbCBmYWN0IGFib3ZlLCB3ZSBjYW4gdXNlIHRoZSBmYWN0IHRoYXQgVGV4dFJhbmdlJ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVTdGFydCgpIGFuZCBtb3ZlRW5kKCkgbWV0aG9kcyByZXR1cm4gdGhlIGFjdHVhbCBudW1iZXIgb2YgY2hhcmFjdGVycyBtb3ZlZCwgd2hpY2ggaXMgbm90XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcmlseSB0aGUgc2FtZSBhcyB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaXQgd2FzIGluc3RydWN0ZWQgdG8gbW92ZS4gVGhlIHNpbXBsZXN0IGFwcHJvYWNoIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICB0byB1c2UgdGhpcyB0byBzdG9yZSB0aGUgY2hhcmFjdGVycyBtb3ZlZCB3aGVuIG1vdmluZyBib3RoIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSByYW5nZSB0byB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0IG9mIHRoZSBkb2N1bWVudCBib2R5IGFuZCBzdWJ0cmFjdGluZyB0aGUgc3RhcnQgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZmZzZXQgKHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtb3ZlLW5lZ2F0aXZlLWdhemlsbGlvblwiIG1ldGhvZCkuIEhvd2V2ZXIsIHRoaXMgaXMgZXh0cmVtZWx5IHNsb3cgd2hlbiB0aGUgZG9jdW1lbnQgaXMgbGFyZ2UgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGUgcmFuZ2UgaXMgbmVhciB0aGUgZW5kIG9mIGl0LiBDbGVhcmx5IGRvaW5nIHRoZSBtaXJyb3IgaW1hZ2UgKGkuZS4gbW92aW5nIHRoZSByYW5nZSBib3VuZGFyaWVzIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudCkgaGFzIHRoZSBzYW1lIHByb2JsZW0uXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIEFub3RoZXIgYXBwcm9hY2ggdGhhdCB3b3JrcyBpcyB0byB1c2UgbW92ZVN0YXJ0KCkgdG8gbW92ZSB0aGUgc3RhcnQgYm91bmRhcnkgb2YgdGhlIHJhbmdlIHVwIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kIGJvdW5kYXJ5IG9uZSBjaGFyYWN0ZXIgYXQgYSB0aW1lIGFuZCBpbmNyZW1lbnRpbmcgYSBjb3VudGVyIHdpdGggdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVN0YXJ0KCkgY2FsbC4gSG93ZXZlciwgdGhlIGNoZWNrIGZvciB3aGV0aGVyIHRoZSBzdGFydCBib3VuZGFyeSBoYXMgcmVhY2hlZCB0aGUgZW5kIGJvdW5kYXJ5IGlzXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlbnNpdmUsIHNvIHRoaXMgbWV0aG9kIGlzIHNsb3cgKGFsdGhvdWdoIHVubGlrZSBcIm1vdmUtbmVnYXRpdmUtZ2F6aWxsaW9uXCIgaXMgbGFyZ2VseSB1bmFmZmVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgbG9jYXRpb24gb2YgdGhlIHJhbmdlIHdpdGhpbiB0aGUgZG9jdW1lbnQpLlxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgYXBwcm9hY2ggdXNlZCBiZWxvdyBpcyBhIGh5YnJpZCBvZiB0aGUgdHdvIG1ldGhvZHMgYWJvdmUuIEl0IHVzZXMgdGhlIGZhY3QgdGhhdCBhIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmluZyB0aGUgVGV4dFJhbmdlJ3MgJ3RleHQnIHByb3BlcnR5IHdpdGggZWFjaCBcXHJcXG4gY29udmVydGVkIHRvIGEgc2luZ2xlIFxcciBjaGFyYWN0ZXIgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgICAgICBiZSBsb25nZXIgdGhhbiB0aGUgdGV4dCBvZiB0aGUgVGV4dFJhbmdlLCBzbyB0aGUgc3RhcnQgb2YgdGhlIHJhbmdlIGlzIG1vdmVkIHRoYXQgbGVuZ3RoIGluaXRpYWxseVxuICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZW4gYSBjaGFyYWN0ZXIgYXQgYSB0aW1lIHRvIG1ha2UgdXAgZm9yIGFueSB0cmFpbGluZyBsaW5lIGJyZWFrcyBub3QgY29udGFpbmVkIGluIHRoZSAndGV4dCdcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LiBUaGlzIGhhcyBnb29kIHBlcmZvcm1hbmNlIGluIG1vc3Qgc2l0dWF0aW9ucyBjb21wYXJlZCB0byB0aGUgcHJldmlvdXMgdHdvIG1ldGhvZHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBSYW5nZSA9IHdvcmtpbmdSYW5nZS5kdXBsaWNhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5nZUxlbmd0aCA9IHRlbXBSYW5nZS50ZXh0LnJlcGxhY2UoL1xcclxcbi9nLCBcIlxcclwiKS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRlbXBSYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgcmFuZ2VMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCAoY29tcGFyaXNvbiA9IHRlbXBSYW5nZS5jb21wYXJlRW5kUG9pbnRzKFwiU3RhcnRUb0VuZFwiLCB0ZW1wUmFuZ2UpKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBSYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB3b3JraW5nUmFuZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihib3VuZGFyeU5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYm91bmRhcnkgaW1tZWRpYXRlbHkgZm9sbG93cyBhIGNoYXJhY3RlciBkYXRhIG5vZGUgYW5kIHRoaXMgaXMgdGhlIGVuZCBib3VuZGFyeSwgd2Ugc2hvdWxkIGZhdm91clxuICAgICAgICAgICAgICAgICAgICAvLyBhIHBvc2l0aW9uIHdpdGhpbiB0aGF0LCBhbmQgbGlrZXdpc2UgZm9yIGEgc3RhcnQgYm91bmRhcnkgcHJlY2VkaW5nIGEgY2hhcmFjdGVyIGRhdGEgbm9kZVxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSAoaXNDb2xsYXBzZWQgfHwgIWlzU3RhcnQpICYmIHdvcmtpbmdOb2RlLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSAoaXNDb2xsYXBzZWQgfHwgaXNTdGFydCkgJiYgd29ya2luZ05vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Tm9kZSAmJiBpc0NoYXJhY3RlckRhdGFOb2RlKG5leHROb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihuZXh0Tm9kZSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNOb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUocHJldmlvdXNOb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihwcmV2aW91c05vZGUsIHByZXZpb3VzTm9kZS5kYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uID0gbmV3IERvbVBvc2l0aW9uKGNvbnRhaW5lckVsZW1lbnQsIGRvbS5nZXROb2RlSW5kZXgod29ya2luZ05vZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgd29ya2luZ05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3b3JraW5nTm9kZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uOiBib3VuZGFyeVBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICBub2RlSW5mbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUluZGV4OiBub2RlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50OiBjb250YWluZXJFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gUmV0dXJucyBhIFRleHRSYW5nZSByZXByZXNlbnRpbmcgdGhlIGJvdW5kYXJ5IG9mIGEgVGV4dFJhbmdlIGV4cHJlc3NlZCBhcyBhIG5vZGUgYW5kIGFuIG9mZnNldCB3aXRoaW4gdGhhdFxuICAgICAgICAgICAgLy8gbm9kZS4gVGhpcyBmdW5jdGlvbiBzdGFydGVkIG91dCBhcyBhbiBvcHRpbWl6ZWQgdmVyc2lvbiBvZiBjb2RlIGZvdW5kIGluIFRpbSBDYW1lcm9uIFJ5YW4ncyBJRVJhbmdlXG4gICAgICAgICAgICAvLyAoaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2llcmFuZ2UvKVxuICAgICAgICAgICAgdmFyIGNyZWF0ZUJvdW5kYXJ5VGV4dFJhbmdlID0gZnVuY3Rpb24oYm91bmRhcnlQb3NpdGlvbiwgaXNTdGFydCkge1xuICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeU5vZGUsIGJvdW5kYXJ5UGFyZW50LCBib3VuZGFyeU9mZnNldCA9IGJvdW5kYXJ5UG9zaXRpb24ub2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBkb2MgPSBkb20uZ2V0RG9jdW1lbnQoYm91bmRhcnlQb3NpdGlvbi5ub2RlKTtcbiAgICAgICAgICAgICAgICB2YXIgd29ya2luZ05vZGUsIGNoaWxkTm9kZXMsIHdvcmtpbmdSYW5nZSA9IGdldEJvZHkoZG9jKS5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZUlzRGF0YU5vZGUgPSBpc0NoYXJhY3RlckRhdGFOb2RlKGJvdW5kYXJ5UG9zaXRpb24ubm9kZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobm9kZUlzRGF0YU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlOb2RlID0gYm91bmRhcnlQb3NpdGlvbi5ub2RlO1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBhcmVudCA9IGJvdW5kYXJ5Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZXMgPSBib3VuZGFyeVBvc2l0aW9uLm5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlOb2RlID0gKGJvdW5kYXJ5T2Zmc2V0IDwgY2hpbGROb2Rlcy5sZW5ndGgpID8gY2hpbGROb2Rlc1tib3VuZGFyeU9mZnNldF0gOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBhcmVudCA9IGJvdW5kYXJ5UG9zaXRpb24ubm9kZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBQb3NpdGlvbiB0aGUgcmFuZ2UgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBub2RlIGNvbnRhaW5pbmcgdGhlIGJvdW5kYXJ5XG4gICAgICAgICAgICAgICAgd29ya2luZ05vZGUgPSBkb2MuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cbiAgICAgICAgICAgICAgICAvLyBNYWtpbmcgdGhlIHdvcmtpbmcgZWxlbWVudCBub24tZW1wdHkgZWxlbWVudCBwZXJzdWFkZXMgSUUgdG8gY29uc2lkZXIgdGhlIFRleHRSYW5nZSBib3VuZGFyeSB0byBiZSB3aXRoaW5cbiAgICAgICAgICAgICAgICAvLyB0aGUgZWxlbWVudCByYXRoZXIgdGhhbiBpbW1lZGlhdGVseSBiZWZvcmUgb3IgYWZ0ZXIgaXRcbiAgICAgICAgICAgICAgICB3b3JraW5nTm9kZS5pbm5lckhUTUwgPSBcIiYjZmVmZjtcIjtcblxuICAgICAgICAgICAgICAgIC8vIGluc2VydEJlZm9yZSBpcyBzdXBwb3NlZCB0byB3b3JrIGxpa2UgYXBwZW5kQ2hpbGQgaWYgdGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgbnVsbC4gSG93ZXZlciwgYSBidWcgcmVwb3J0XG4gICAgICAgICAgICAgICAgLy8gZm9yIElFUmFuZ2Ugc3VnZ2VzdHMgdGhhdCBpdCBjYW4gY3Jhc2ggdGhlIGJyb3dzZXI6IGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9pZXJhbmdlL2lzc3Vlcy9kZXRhaWw/aWQ9MTJcbiAgICAgICAgICAgICAgICBpZiAoYm91bmRhcnlOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UGFyZW50Lmluc2VydEJlZm9yZSh3b3JraW5nTm9kZSwgYm91bmRhcnlOb2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBhcmVudC5hcHBlbmRDaGlsZCh3b3JraW5nTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd29ya2luZ1JhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KHdvcmtpbmdOb2RlKTtcbiAgICAgICAgICAgICAgICB3b3JraW5nUmFuZ2UuY29sbGFwc2UoIWlzU3RhcnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgICAgICAgICBib3VuZGFyeVBhcmVudC5yZW1vdmVDaGlsZCh3b3JraW5nTm9kZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBNb3ZlIHRoZSB3b3JraW5nIHJhbmdlIHRvIHRoZSB0ZXh0IG9mZnNldCwgaWYgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICBpZiAobm9kZUlzRGF0YU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgd29ya2luZ1JhbmdlW2lzU3RhcnQgPyBcIm1vdmVTdGFydFwiIDogXCJtb3ZlRW5kXCJdKFwiY2hhcmFjdGVyXCIsIGJvdW5kYXJ5T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd29ya2luZ1JhbmdlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGEgd3JhcHBlciBhcm91bmQgYSBUZXh0UmFuZ2UsIHByb3ZpZGluZyBmdWxsIERPTSBSYW5nZSBmdW5jdGlvbmFsaXR5IHVzaW5nIHJhbmd5J3MgRG9tUmFuZ2UgYXMgYVxuICAgICAgICAgICAgLy8gcHJvdG90eXBlXG5cbiAgICAgICAgICAgIFdyYXBwZWRUZXh0UmFuZ2UgPSBmdW5jdGlvbih0ZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHRSYW5nZSA9IHRleHRSYW5nZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFdyYXBwZWRUZXh0UmFuZ2UucHJvdG90eXBlID0gbmV3IERvbVJhbmdlKGRvY3VtZW50KTtcblxuICAgICAgICAgICAgV3JhcHBlZFRleHRSYW5nZS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCwgZW5kLCBzdGFydEJvdW5kYXJ5O1xuXG4gICAgICAgICAgICAgICAgLy8gVGV4dFJhbmdlJ3MgcGFyZW50RWxlbWVudCgpIG1ldGhvZCBjYW5ub3QgYmUgdHJ1c3RlZC4gZ2V0VGV4dFJhbmdlQ29udGFpbmVyRWxlbWVudCgpIHdvcmtzIGFyb3VuZCB0aGF0LlxuICAgICAgICAgICAgICAgIHZhciByYW5nZUNvbnRhaW5lckVsZW1lbnQgPSBnZXRUZXh0UmFuZ2VDb250YWluZXJFbGVtZW50KHRoaXMudGV4dFJhbmdlKTtcblxuICAgICAgICAgICAgICAgIGlmICh0ZXh0UmFuZ2VJc0NvbGxhcHNlZCh0aGlzLnRleHRSYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gc3RhcnQgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlKS5ib3VuZGFyeVBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Qm91bmRhcnkgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydEJvdW5kYXJ5LmJvdW5kYXJ5UG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQW4gb3B0aW1pemF0aW9uIHVzZWQgaGVyZSBpcyB0aGF0IGlmIHRoZSBzdGFydCBhbmQgZW5kIGJvdW5kYXJpZXMgaGF2ZSB0aGUgc2FtZSBwYXJlbnQgZWxlbWVudCwgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBzY29wZSBmb3IgdGhlIGVuZCBib3VuZGFyeSBjYW4gYmUgbGltaXRlZCB0byBleGNsdWRlIHRoZSBwb3J0aW9uIG9mIHRoZSBlbGVtZW50IHRoYXQgcHJlY2VkZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHN0YXJ0IGJvdW5kYXJ5XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGdldFRleHRSYW5nZUJvdW5kYXJ5UG9zaXRpb24odGhpcy50ZXh0UmFuZ2UsIHJhbmdlQ29udGFpbmVyRWxlbWVudCwgZmFsc2UsIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRCb3VuZGFyeS5ub2RlSW5mbykuYm91bmRhcnlQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0KHN0YXJ0Lm5vZGUsIHN0YXJ0Lm9mZnNldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFbmQoZW5kLm5vZGUsIGVuZC5vZmZzZXQpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgV3JhcHBlZFRleHRSYW5nZS5wcm90b3R5cGUuZ2V0TmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIldyYXBwZWRUZXh0UmFuZ2VcIjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIERvbVJhbmdlLmNvcHlDb21wYXJpc29uQ29uc3RhbnRzKFdyYXBwZWRUZXh0UmFuZ2UpO1xuXG4gICAgICAgICAgICB2YXIgcmFuZ2VUb1RleHRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UobmV3IERvbVBvc2l0aW9uKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCksIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydFJhbmdlID0gY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UobmV3IERvbVBvc2l0aW9uKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kUmFuZ2UgPSBjcmVhdGVCb3VuZGFyeVRleHRSYW5nZShuZXcgRG9tUG9zaXRpb24ocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0UmFuZ2UgPSBnZXRCb2R5KCBEb21SYW5nZS5nZXRSYW5nZURvY3VtZW50KHJhbmdlKSApLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0UmFuZ2Uuc2V0RW5kUG9pbnQoXCJTdGFydFRvU3RhcnRcIiwgc3RhcnRSYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIHRleHRSYW5nZS5zZXRFbmRQb2ludChcIkVuZFRvRW5kXCIsIGVuZFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHRSYW5nZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBXcmFwcGVkVGV4dFJhbmdlLnJhbmdlVG9UZXh0UmFuZ2UgPSByYW5nZVRvVGV4dFJhbmdlO1xuXG4gICAgICAgICAgICBXcmFwcGVkVGV4dFJhbmdlLnByb3RvdHlwZS50b1RleHRSYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZVRvVGV4dFJhbmdlKHRoaXMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYXBpLldyYXBwZWRUZXh0UmFuZ2UgPSBXcmFwcGVkVGV4dFJhbmdlO1xuXG4gICAgICAgICAgICAvLyBJRSA5IGFuZCBhYm92ZSBoYXZlIGJvdGggaW1wbGVtZW50YXRpb25zIGFuZCBSYW5neSBtYWtlcyBib3RoIGF2YWlsYWJsZS4gVGhlIG5leHQgZmV3IGxpbmVzIHNldHMgd2hpY2hcbiAgICAgICAgICAgIC8vIGltcGxlbWVudGF0aW9uIHRvIHVzZSBieSBkZWZhdWx0LlxuICAgICAgICAgICAgaWYgKCFhcGkuZmVhdHVyZXMuaW1wbGVtZW50c0RvbVJhbmdlIHx8IGFwaS5jb25maWcucHJlZmVyVGV4dFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIFdyYXBwZWRUZXh0UmFuZ2UgYXMgdGhlIFJhbmdlIHByb3BlcnR5IG9mIHRoZSBnbG9iYWwgb2JqZWN0IHRvIGFsbG93IGV4cHJlc3Npb24gbGlrZSBSYW5nZS5FTkRfVE9fRU5EIHRvIHdvcmtcbiAgICAgICAgICAgICAgICB2YXIgZ2xvYmFsT2JqID0gKGZ1bmN0aW9uKGYpIHsgcmV0dXJuIGYoXCJyZXR1cm4gdGhpcztcIikoKTsgfSkoRnVuY3Rpb24pO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsT2JqLlJhbmdlID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsT2JqLlJhbmdlID0gV3JhcHBlZFRleHRSYW5nZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhcGkuY3JlYXRlTmF0aXZlUmFuZ2UgPSBmdW5jdGlvbihkb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jID0gZ2V0Q29udGVudERvY3VtZW50KGRvYywgbW9kdWxlLCBcImNyZWF0ZU5hdGl2ZVJhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Qm9keShkb2MpLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBhcGkuV3JhcHBlZFJhbmdlID0gV3JhcHBlZFRleHRSYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFwaS5jcmVhdGVSYW5nZSA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgICAgZG9jID0gZ2V0Q29udGVudERvY3VtZW50KGRvYywgbW9kdWxlLCBcImNyZWF0ZVJhbmdlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBhcGkuV3JhcHBlZFJhbmdlKGFwaS5jcmVhdGVOYXRpdmVSYW5nZShkb2MpKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhcGkuY3JlYXRlUmFuZ3lSYW5nZSA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgICAgZG9jID0gZ2V0Q29udGVudERvY3VtZW50KGRvYywgbW9kdWxlLCBcImNyZWF0ZVJhbmd5UmFuZ2VcIik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERvbVJhbmdlKGRvYyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpLmNyZWF0ZUlmcmFtZVJhbmdlID0gZnVuY3Rpb24oaWZyYW1lRWwpIHtcbiAgICAgICAgICAgIG1vZHVsZS5kZXByZWNhdGlvbk5vdGljZShcImNyZWF0ZUlmcmFtZVJhbmdlKClcIiwgXCJjcmVhdGVSYW5nZShpZnJhbWVFbClcIik7XG4gICAgICAgICAgICByZXR1cm4gYXBpLmNyZWF0ZVJhbmdlKGlmcmFtZUVsKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhcGkuY3JlYXRlSWZyYW1lUmFuZ3lSYW5nZSA9IGZ1bmN0aW9uKGlmcmFtZUVsKSB7XG4gICAgICAgICAgICBtb2R1bGUuZGVwcmVjYXRpb25Ob3RpY2UoXCJjcmVhdGVJZnJhbWVSYW5neVJhbmdlKClcIiwgXCJjcmVhdGVSYW5neVJhbmdlKGlmcmFtZUVsKVwiKTtcbiAgICAgICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ3lSYW5nZShpZnJhbWVFbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpLmFkZFNoaW1MaXN0ZW5lcihmdW5jdGlvbih3aW4pIHtcbiAgICAgICAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvYy5jcmVhdGVSYW5nZSA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgZG9jLmNyZWF0ZVJhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ2UoZG9jKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jID0gd2luID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfSk7XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBUaGlzIG1vZHVsZSBjcmVhdGVzIGEgc2VsZWN0aW9uIG9iamVjdCB3cmFwcGVyIHRoYXQgY29uZm9ybXMgYXMgY2xvc2VseSBhcyBwb3NzaWJsZSB0byB0aGUgU2VsZWN0aW9uIHNwZWNpZmljYXRpb25cbiAgICAvLyBpbiB0aGUgSFRNTCBFZGl0aW5nIHNwZWMgKGh0dHA6Ly9kdmNzLnczLm9yZy9oZy9lZGl0aW5nL3Jhdy1maWxlL3RpcC9lZGl0aW5nLmh0bWwjc2VsZWN0aW9ucylcbiAgICBhcGkuY3JlYXRlQ29yZU1vZHVsZShcIldyYXBwZWRTZWxlY3Rpb25cIiwgW1wiRG9tUmFuZ2VcIiwgXCJXcmFwcGVkUmFuZ2VcIl0sIGZ1bmN0aW9uKGFwaSwgbW9kdWxlKSB7XG4gICAgICAgIGFwaS5jb25maWcuY2hlY2tTZWxlY3Rpb25SYW5nZXMgPSB0cnVlO1xuXG4gICAgICAgIHZhciBCT09MRUFOID0gXCJib29sZWFuXCI7XG4gICAgICAgIHZhciBOVU1CRVIgPSBcIm51bWJlclwiO1xuICAgICAgICB2YXIgZG9tID0gYXBpLmRvbTtcbiAgICAgICAgdmFyIHV0aWwgPSBhcGkudXRpbDtcbiAgICAgICAgdmFyIGlzSG9zdE1ldGhvZCA9IHV0aWwuaXNIb3N0TWV0aG9kO1xuICAgICAgICB2YXIgRG9tUmFuZ2UgPSBhcGkuRG9tUmFuZ2U7XG4gICAgICAgIHZhciBXcmFwcGVkUmFuZ2UgPSBhcGkuV3JhcHBlZFJhbmdlO1xuICAgICAgICB2YXIgRE9NRXhjZXB0aW9uID0gYXBpLkRPTUV4Y2VwdGlvbjtcbiAgICAgICAgdmFyIERvbVBvc2l0aW9uID0gZG9tLkRvbVBvc2l0aW9uO1xuICAgICAgICB2YXIgZ2V0TmF0aXZlU2VsZWN0aW9uO1xuICAgICAgICB2YXIgc2VsZWN0aW9uSXNDb2xsYXBzZWQ7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IGFwaS5mZWF0dXJlcztcbiAgICAgICAgdmFyIENPTlRST0wgPSBcIkNvbnRyb2xcIjtcbiAgICAgICAgdmFyIGdldERvY3VtZW50ID0gZG9tLmdldERvY3VtZW50O1xuICAgICAgICB2YXIgZ2V0Qm9keSA9IGRvbS5nZXRCb2R5O1xuICAgICAgICB2YXIgcmFuZ2VzRXF1YWwgPSBEb21SYW5nZS5yYW5nZXNFcXVhbDtcblxuXG4gICAgICAgIC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gc3VwcG9ydCBkaXJlY3Rpb24gcGFyYW1ldGVycyBpbiB0aGUgQVBJIHRoYXQgbWF5IGJlIGEgc3RyaW5nIChcImJhY2t3YXJkXCIgb3IgXCJmb3J3YXJkXCIpIG9yIGFcbiAgICAgICAgLy8gQm9vbGVhbiAodHJ1ZSBmb3IgYmFja3dhcmRzKS5cbiAgICAgICAgZnVuY3Rpb24gaXNEaXJlY3Rpb25CYWNrd2FyZChkaXIpIHtcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIGRpciA9PSBcInN0cmluZ1wiKSA/IC9eYmFja3dhcmQocyk/JC9pLnRlc3QoZGlyKSA6ICEhZGlyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0V2luZG93KHdpbiwgbWV0aG9kTmFtZSkge1xuICAgICAgICAgICAgaWYgKCF3aW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkb20uaXNXaW5kb3cod2luKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpbiBpbnN0YW5jZW9mIFdyYXBwZWRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luLndpbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IGRvbS5nZXRDb250ZW50RG9jdW1lbnQod2luLCBtb2R1bGUsIG1ldGhvZE5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkb20uZ2V0V2luZG93KGRvYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRXaW5TZWxlY3Rpb24od2luUGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRXaW5kb3cod2luUGFyYW0sIFwiZ2V0V2luU2VsZWN0aW9uXCIpLmdldFNlbGVjdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RG9jU2VsZWN0aW9uKHdpblBhcmFtKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0V2luZG93KHdpblBhcmFtLCBcImdldERvY1NlbGVjdGlvblwiKS5kb2N1bWVudC5zZWxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHdpblNlbGVjdGlvbklzQmFja3dhcmQoc2VsKSB7XG4gICAgICAgICAgICB2YXIgYmFja3dhcmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzZWwuYW5jaG9yTm9kZSkge1xuICAgICAgICAgICAgICAgIGJhY2t3YXJkID0gKGRvbS5jb21wYXJlUG9pbnRzKHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0LCBzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQpID09IDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJhY2t3YXJkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBmb3IgdGhlIFJhbmdlL1RleHRSYW5nZSBhbmQgU2VsZWN0aW9uIGZlYXR1cmVzIHJlcXVpcmVkXG4gICAgICAgIC8vIFRlc3QgZm9yIGFiaWxpdHkgdG8gcmV0cmlldmUgc2VsZWN0aW9uXG4gICAgICAgIHZhciBpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uID0gaXNIb3N0TWV0aG9kKHdpbmRvdywgXCJnZXRTZWxlY3Rpb25cIiksXG4gICAgICAgICAgICBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uID0gdXRpbC5pc0hvc3RPYmplY3QoZG9jdW1lbnQsIFwic2VsZWN0aW9uXCIpO1xuXG4gICAgICAgIGZlYXR1cmVzLmltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24gPSBpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uO1xuICAgICAgICBmZWF0dXJlcy5pbXBsZW1lbnRzRG9jU2VsZWN0aW9uID0gaW1wbGVtZW50c0RvY1NlbGVjdGlvbjtcblxuICAgICAgICB2YXIgdXNlRG9jdW1lbnRTZWxlY3Rpb24gPSBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uICYmICghaW1wbGVtZW50c1dpbkdldFNlbGVjdGlvbiB8fCBhcGkuY29uZmlnLnByZWZlclRleHRSYW5nZSk7XG5cbiAgICAgICAgaWYgKHVzZURvY3VtZW50U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBnZXROYXRpdmVTZWxlY3Rpb24gPSBnZXREb2NTZWxlY3Rpb247XG4gICAgICAgICAgICBhcGkuaXNTZWxlY3Rpb25WYWxpZCA9IGZ1bmN0aW9uKHdpblBhcmFtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IGdldFdpbmRvdyh3aW5QYXJhbSwgXCJpc1NlbGVjdGlvblZhbGlkXCIpLmRvY3VtZW50LCBuYXRpdmVTZWwgPSBkb2Muc2VsZWN0aW9uO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0aW9uIFRleHRSYW5nZSBpcyBhY3R1YWxseSBjb250YWluZWQgd2l0aGluIHRoZSBjb3JyZWN0IGRvY3VtZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIChuYXRpdmVTZWwudHlwZSAhPSBcIk5vbmVcIiB8fCBnZXREb2N1bWVudChuYXRpdmVTZWwuY3JlYXRlUmFuZ2UoKS5wYXJlbnRFbGVtZW50KCkpID09IGRvYyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldFdpblNlbGVjdGlvbjtcbiAgICAgICAgICAgIGFwaS5pc1NlbGVjdGlvblZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJOZWl0aGVyIGRvY3VtZW50LnNlbGVjdGlvbiBvciB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkgZGV0ZWN0ZWQuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBpLmdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldE5hdGl2ZVNlbGVjdGlvbjtcblxuICAgICAgICB2YXIgdGVzdFNlbGVjdGlvbiA9IGdldE5hdGl2ZVNlbGVjdGlvbigpO1xuICAgICAgICB2YXIgdGVzdFJhbmdlID0gYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlKGRvY3VtZW50KTtcbiAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTtcblxuICAgICAgICAvLyBPYnRhaW5pbmcgYSByYW5nZSBmcm9tIGEgc2VsZWN0aW9uXG4gICAgICAgIHZhciBzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cyA9IHV0aWwuYXJlSG9zdFByb3BlcnRpZXModGVzdFNlbGVjdGlvbixcbiAgICAgICAgICAgIFtcImFuY2hvck5vZGVcIiwgXCJmb2N1c05vZGVcIiwgXCJhbmNob3JPZmZzZXRcIiwgXCJmb2N1c09mZnNldFwiXSk7XG5cbiAgICAgICAgZmVhdHVyZXMuc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgPSBzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cztcblxuICAgICAgICAvLyBUZXN0IGZvciBleGlzdGVuY2Ugb2YgbmF0aXZlIHNlbGVjdGlvbiBleHRlbmQoKSBtZXRob2RcbiAgICAgICAgdmFyIHNlbGVjdGlvbkhhc0V4dGVuZCA9IGlzSG9zdE1ldGhvZCh0ZXN0U2VsZWN0aW9uLCBcImV4dGVuZFwiKTtcbiAgICAgICAgZmVhdHVyZXMuc2VsZWN0aW9uSGFzRXh0ZW5kID0gc2VsZWN0aW9uSGFzRXh0ZW5kO1xuICAgICAgICBcbiAgICAgICAgLy8gVGVzdCBpZiByYW5nZUNvdW50IGV4aXN0c1xuICAgICAgICB2YXIgc2VsZWN0aW9uSGFzUmFuZ2VDb3VudCA9ICh0eXBlb2YgdGVzdFNlbGVjdGlvbi5yYW5nZUNvdW50ID09IE5VTUJFUik7XG4gICAgICAgIGZlYXR1cmVzLnNlbGVjdGlvbkhhc1JhbmdlQ291bnQgPSBzZWxlY3Rpb25IYXNSYW5nZUNvdW50O1xuXG4gICAgICAgIHZhciBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzID0gZmFsc2U7XG4gICAgICAgIHZhciBjb2xsYXBzZWROb25FZGl0YWJsZVNlbGVjdGlvbnNTdXBwb3J0ZWQgPSB0cnVlO1xuXG4gICAgICAgIHZhciBhZGRSYW5nZUJhY2t3YXJkVG9OYXRpdmUgPSBzZWxlY3Rpb25IYXNFeHRlbmQgP1xuICAgICAgICAgICAgZnVuY3Rpb24obmF0aXZlU2VsZWN0aW9uLCByYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBkb2MgPSBEb21SYW5nZS5nZXRSYW5nZURvY3VtZW50KHJhbmdlKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kUmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2UoZG9jKTtcbiAgICAgICAgICAgICAgICBlbmRSYW5nZS5jb2xsYXBzZVRvUG9pbnQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIG5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShnZXROYXRpdmVSYW5nZShlbmRSYW5nZSkpO1xuICAgICAgICAgICAgICAgIG5hdGl2ZVNlbGVjdGlvbi5leHRlbmQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgIH0gOiBudWxsO1xuXG4gICAgICAgIGlmICh1dGlsLmFyZUhvc3RNZXRob2RzKHRlc3RTZWxlY3Rpb24sIFtcImFkZFJhbmdlXCIsIFwiZ2V0UmFuZ2VBdFwiLCBcInJlbW92ZUFsbFJhbmdlc1wiXSkgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGVzdFNlbGVjdGlvbi5yYW5nZUNvdW50ID09IE5VTUJFUiAmJiBmZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UpIHtcblxuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIFByZXZpb3VzbHkgYW4gaWZyYW1lIHdhcyB1c2VkIGJ1dCB0aGlzIGNhdXNlZCBwcm9ibGVtcyBpbiBzb21lIGNpcmN1bXN0YW5jZXMgaW4gSUUsIHNvIHRlc3RzIGFyZVxuICAgICAgICAgICAgICAgIC8vIHBlcmZvcm1lZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudCdzIHNlbGVjdGlvbi4gU2VlIGlzc3VlIDEwOS5cblxuICAgICAgICAgICAgICAgIC8vIE5vdGUgYWxzbyB0aGF0IGlmIGEgc2VsZWN0aW9uIHByZXZpb3VzbHkgZXhpc3RlZCwgaXQgaXMgd2lwZWQgYnkgdGhlc2UgdGVzdHMuIFRoaXMgc2hvdWxkIHVzdWFsbHkgYmUgZmluZVxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgaW5pdGlhbGl6YXRpb24gdXN1YWxseSBoYXBwZW5zIHdoZW4gdGhlIGRvY3VtZW50IGxvYWRzLCBidXQgY291bGQgYmUgYSBwcm9ibGVtIGZvciBhIHNjcmlwdCB0aGF0XG4gICAgICAgICAgICAgICAgLy8gbG9hZHMgYW5kIGluaXRpYWxpemVzIFJhbmd5IGxhdGVyLiBJZiBhbnlvbmUgY29tcGxhaW5zLCBjb2RlIGNvdWxkIGJlIGFkZGVkIHRvIHNhdmUgYW5kIHJlc3RvcmUgdGhlXG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0aW9uLlxuICAgICAgICAgICAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VDb3VudCA9IHNlbC5yYW5nZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9uSGFzTXVsdGlwbGVSYW5nZXMgPSAob3JpZ2luYWxTZWxlY3Rpb25SYW5nZUNvdW50ID4gMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbFNlbGVjdGlvblJhbmdlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxTZWxlY3Rpb25CYWNrd2FyZCA9IHdpblNlbGVjdGlvbklzQmFja3dhcmQoc2VsKTsgXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JpZ2luYWxTZWxlY3Rpb25SYW5nZUNvdW50OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VzW2ldID0gc2VsLmdldFJhbmdlQXQoaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBzb21lIHRlc3QgZWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RFbCA9IGJvZHkuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcbiAgICAgICAgICAgICAgICAgICAgdGVzdEVsLmNvbnRlbnRFZGl0YWJsZSA9IFwiZmFsc2VcIjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHROb2RlID0gdGVzdEVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlxcdTAwYTBcXHUwMGEwXFx1MDBhMFwiKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRlc3Qgd2hldGhlciB0aGUgbmF0aXZlIHNlbGVjdGlvbiB3aWxsIGFsbG93IGEgY29sbGFwc2VkIHNlbGVjdGlvbiB3aXRoaW4gYSBub24tZWRpdGFibGUgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB2YXIgcjEgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHIxLnNldFN0YXJ0KHRleHROb2RlLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcjEuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyMSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZCA9IChzZWwucmFuZ2VDb3VudCA9PSAxKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRlc3Qgd2hldGhlciB0aGUgbmF0aXZlIHNlbGVjdGlvbiBpcyBjYXBhYmxlIG9mIHN1cHBvcnRpbmcgbXVsdGlwbGUgcmFuZ2VzLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGlvbkhhc011bHRpcGxlUmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEb2luZyB0aGUgb3JpZ2luYWwgZmVhdHVyZSB0ZXN0IGhlcmUgaW4gQ2hyb21lIDM2IChhbmQgcHJlc3VtYWJseSBsYXRlciB2ZXJzaW9ucykgcHJpbnRzIGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUgZXJyb3Igb2YgXCJEaXNjb250aWd1b3VzIHNlbGVjdGlvbiBpcyBub3Qgc3VwcG9ydGVkLlwiIHRoYXQgY2Fubm90IGJlIHN1cHByZXNzZWQuIFRoZXJlJ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdGhpbmcgd2UgY2FuIGRvIGFib3V0IHRoaXMgd2hpbGUgcmV0YWluaW5nIHRoZSBmZWF0dXJlIHRlc3Qgc28gd2UgaGF2ZSB0byByZXNvcnQgdG8gYSBicm93c2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbmlmZi4gSSdtIG5vdCBoYXBweSBhYm91dCBpdC4gU2VlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzk5NzkxXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hyb21lTWF0Y2ggPSB3aW5kb3cubmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goL0Nocm9tZVxcLyguKj8pIC8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNocm9tZU1hdGNoICYmIHBhcnNlSW50KGNocm9tZU1hdGNoWzFdKSA+PSAzNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIyID0gcjEuY2xvbmVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIxLnNldFN0YXJ0KHRleHROb2RlLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByMi5zZXRFbmQodGV4dE5vZGUsIDMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIyLnNldFN0YXJ0KHRleHROb2RlLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UocjEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uU3VwcG9ydHNNdWx0aXBsZVJhbmdlcyA9IChzZWwucmFuZ2VDb3VudCA9PSAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQodGVzdEVsKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmlnaW5hbFNlbGVjdGlvblJhbmdlQ291bnQ7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gMCAmJiBvcmlnaW5hbFNlbGVjdGlvbkJhY2t3YXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZFJhbmdlQmFja3dhcmRUb05hdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRSYW5nZUJhY2t3YXJkVG9OYXRpdmUoc2VsLCBvcmlnaW5hbFNlbGVjdGlvblJhbmdlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLndhcm4oXCJSYW5neSBpbml0aWFsaXphdGlvbjogb3JpZ2luYWwgc2VsZWN0aW9uIHdhcyBiYWNrd2FyZHMgYnV0IHNlbGVjdGlvbiBoYXMgYmVlbiByZXN0b3JlZCBmb3J3YXJkcyBiZWNhdXNlIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgU2VsZWN0aW9uLmV4dGVuZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShvcmlnaW5hbFNlbGVjdGlvblJhbmdlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZmVhdHVyZXMuc2VsZWN0aW9uU3VwcG9ydHNNdWx0aXBsZVJhbmdlcyA9IHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXM7XG4gICAgICAgIGZlYXR1cmVzLmNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZCA9IGNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZDtcblxuICAgICAgICAvLyBDb250cm9sUmFuZ2VzXG4gICAgICAgIHZhciBpbXBsZW1lbnRzQ29udHJvbFJhbmdlID0gZmFsc2UsIHRlc3RDb250cm9sUmFuZ2U7XG5cbiAgICAgICAgaWYgKGJvZHkgJiYgaXNIb3N0TWV0aG9kKGJvZHksIFwiY3JlYXRlQ29udHJvbFJhbmdlXCIpKSB7XG4gICAgICAgICAgICB0ZXN0Q29udHJvbFJhbmdlID0gYm9keS5jcmVhdGVDb250cm9sUmFuZ2UoKTtcbiAgICAgICAgICAgIGlmICh1dGlsLmFyZUhvc3RQcm9wZXJ0aWVzKHRlc3RDb250cm9sUmFuZ2UsIFtcIml0ZW1cIiwgXCJhZGRcIl0pKSB7XG4gICAgICAgICAgICAgICAgaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmVhdHVyZXMuaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IGltcGxlbWVudHNDb250cm9sUmFuZ2U7XG5cbiAgICAgICAgLy8gU2VsZWN0aW9uIGNvbGxhcHNlZG5lc3NcbiAgICAgICAgaWYgKHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHNlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWwuYW5jaG9yTm9kZSA9PT0gc2VsLmZvY3VzTm9kZSAmJiBzZWwuYW5jaG9yT2Zmc2V0ID09PSBzZWwuZm9jdXNPZmZzZXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0aW9uSXNDb2xsYXBzZWQgPSBmdW5jdGlvbihzZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsLnJhbmdlQ291bnQgPyBzZWwuZ2V0UmFuZ2VBdChzZWwucmFuZ2VDb3VudCAtIDEpLmNvbGxhcHNlZCA6IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHNlbCwgcmFuZ2UsIGJhY2t3YXJkKSB7XG4gICAgICAgICAgICB2YXIgYW5jaG9yUHJlZml4ID0gYmFja3dhcmQgPyBcImVuZFwiIDogXCJzdGFydFwiLCBmb2N1c1ByZWZpeCA9IGJhY2t3YXJkID8gXCJzdGFydFwiIDogXCJlbmRcIjtcbiAgICAgICAgICAgIHNlbC5hbmNob3JOb2RlID0gcmFuZ2VbYW5jaG9yUHJlZml4ICsgXCJDb250YWluZXJcIl07XG4gICAgICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gcmFuZ2VbYW5jaG9yUHJlZml4ICsgXCJPZmZzZXRcIl07XG4gICAgICAgICAgICBzZWwuZm9jdXNOb2RlID0gcmFuZ2VbZm9jdXNQcmVmaXggKyBcIkNvbnRhaW5lclwiXTtcbiAgICAgICAgICAgIHNlbC5mb2N1c09mZnNldCA9IHJhbmdlW2ZvY3VzUHJlZml4ICsgXCJPZmZzZXRcIl07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21OYXRpdmVTZWxlY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICB2YXIgbmF0aXZlU2VsID0gc2VsLm5hdGl2ZVNlbGVjdGlvbjtcbiAgICAgICAgICAgIHNlbC5hbmNob3JOb2RlID0gbmF0aXZlU2VsLmFuY2hvck5vZGU7XG4gICAgICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gbmF0aXZlU2VsLmFuY2hvck9mZnNldDtcbiAgICAgICAgICAgIHNlbC5mb2N1c05vZGUgPSBuYXRpdmVTZWwuZm9jdXNOb2RlO1xuICAgICAgICAgICAgc2VsLmZvY3VzT2Zmc2V0ID0gbmF0aXZlU2VsLmZvY3VzT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICBzZWwuYW5jaG9yTm9kZSA9IHNlbC5mb2N1c05vZGUgPSBudWxsO1xuICAgICAgICAgICAgc2VsLmFuY2hvck9mZnNldCA9IHNlbC5mb2N1c09mZnNldCA9IDA7XG4gICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IDA7XG4gICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2VsLl9yYW5nZXMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5hdGl2ZVJhbmdlKHJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgbmF0aXZlUmFuZ2U7XG4gICAgICAgICAgICBpZiAocmFuZ2UgaW5zdGFuY2VvZiBEb21SYW5nZSkge1xuICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlID0gYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlKHJhbmdlLmdldERvY3VtZW50KCkpO1xuICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlLnNldEVuZChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgbmF0aXZlUmFuZ2Uuc2V0U3RhcnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmFuZ2UgaW5zdGFuY2VvZiBXcmFwcGVkUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZSA9IHJhbmdlLm5hdGl2ZVJhbmdlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UgJiYgKHJhbmdlIGluc3RhbmNlb2YgZG9tLmdldFdpbmRvdyhyYW5nZS5zdGFydENvbnRhaW5lcikuUmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgbmF0aXZlUmFuZ2UgPSByYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVSYW5nZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJhbmdlQ29udGFpbnNTaW5nbGVFbGVtZW50KHJhbmdlTm9kZXMpIHtcbiAgICAgICAgICAgIGlmICghcmFuZ2VOb2Rlcy5sZW5ndGggfHwgcmFuZ2VOb2Rlc1swXS5ub2RlVHlwZSAhPSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHJhbmdlTm9kZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRvbS5pc0FuY2VzdG9yT2YocmFuZ2VOb2Rlc1swXSwgcmFuZ2VOb2Rlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0U2luZ2xlRWxlbWVudEZyb21SYW5nZShyYW5nZSkge1xuICAgICAgICAgICAgdmFyIG5vZGVzID0gcmFuZ2UuZ2V0Tm9kZXMoKTtcbiAgICAgICAgICAgIGlmICghcmFuZ2VDb250YWluc1NpbmdsZUVsZW1lbnQobm9kZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKFwiZ2V0U2luZ2xlRWxlbWVudEZyb21SYW5nZTogcmFuZ2UgXCIgKyByYW5nZS5pbnNwZWN0KCkgKyBcIiBkaWQgbm90IGNvbnNpc3Qgb2YgYSBzaW5nbGUgZWxlbWVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2Rlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNpbXBsZSwgcXVpY2sgdGVzdCB3aGljaCBvbmx5IG5lZWRzIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gYSBUZXh0UmFuZ2UgYW5kIGEgQ29udHJvbFJhbmdlXG4gICAgICAgIGZ1bmN0aW9uIGlzVGV4dFJhbmdlKHJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gISFyYW5nZSAmJiB0eXBlb2YgcmFuZ2UudGV4dCAhPSBcInVuZGVmaW5lZFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIHJhbmdlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBSYW5nZSBmcm9tIHRoZSBzZWxlY3RlZCBUZXh0UmFuZ2VcbiAgICAgICAgICAgIHZhciB3cmFwcGVkUmFuZ2UgPSBuZXcgV3JhcHBlZFJhbmdlKHJhbmdlKTtcbiAgICAgICAgICAgIHNlbC5fcmFuZ2VzID0gW3dyYXBwZWRSYW5nZV07XG5cbiAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHNlbCwgd3JhcHBlZFJhbmdlLCBmYWxzZSk7XG4gICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IDE7XG4gICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSB3cmFwcGVkUmFuZ2UuY29sbGFwc2VkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ29udHJvbFNlbGVjdGlvbihzZWwpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvblxuICAgICAgICAgICAgc2VsLl9yYW5nZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGlmIChzZWwuZG9jU2VsZWN0aW9uLnR5cGUgPT0gXCJOb25lXCIpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gc2VsLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgIGlmIChpc1RleHRSYW5nZShjb250cm9sUmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FzZSAod2hlcmUgdGhlIHNlbGVjdGlvbiB0eXBlIGlzIFwiQ29udHJvbFwiIGFuZCBjYWxsaW5nIGNyZWF0ZVJhbmdlKCkgb24gdGhlIHNlbGVjdGlvbiByZXR1cm5zXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgVGV4dFJhbmdlKSBjYW4gaGFwcGVuIGluIElFIDkuIEl0IGhhcHBlbnMsIGZvciBleGFtcGxlLCB3aGVuIGFsbCBlbGVtZW50cyBpbiB0aGUgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29udHJvbFJhbmdlIGhhdmUgYmVlbiByZW1vdmVkIGZyb20gdGhlIENvbnRyb2xSYW5nZSBhbmQgcmVtb3ZlZCBmcm9tIHRoZSBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIGNvbnRyb2xSYW5nZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsLnJhbmdlQ291bnQgPSBjb250cm9sUmFuZ2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UsIGRvYyA9IGdldERvY3VtZW50KGNvbnRyb2xSYW5nZS5pdGVtKDApKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWwucmFuZ2VDb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShjb250cm9sUmFuZ2UuaXRlbShpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwuX3Jhbmdlcy5wdXNoKHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWwucmFuZ2VDb3VudCA9PSAxICYmIHNlbC5fcmFuZ2VzWzBdLmNvbGxhcHNlZDtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCBzZWwuX3Jhbmdlc1tzZWwucmFuZ2VDb3VudCAtIDFdLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkUmFuZ2VUb0NvbnRyb2xTZWxlY3Rpb24oc2VsLCByYW5nZSkge1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHNlbC5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgIHZhciByYW5nZUVsZW1lbnQgPSBnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlKHJhbmdlKTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IENvbnRyb2xSYW5nZSBjb250YWluaW5nIGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIHNlbGVjdGVkIENvbnRyb2xSYW5nZSBwbHVzIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAvLyBjb250YWluZWQgYnkgdGhlIHN1cHBsaWVkIHJhbmdlXG4gICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpO1xuICAgICAgICAgICAgdmFyIG5ld0NvbnRyb2xSYW5nZSA9IGdldEJvZHkoZG9jKS5jcmVhdGVDb250cm9sUmFuZ2UoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjb250cm9sUmFuZ2UubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBuZXdDb250cm9sUmFuZ2UuYWRkKGNvbnRyb2xSYW5nZS5pdGVtKGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLmFkZChyYW5nZUVsZW1lbnQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJhZGRSYW5nZSgpOiBFbGVtZW50IHdpdGhpbiB0aGUgc3BlY2lmaWVkIFJhbmdlIGNvdWxkIG5vdCBiZSBhZGRlZCB0byBjb250cm9sIHNlbGVjdGlvbiAoZG9lcyBpdCBoYXZlIGxheW91dD8pXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLnNlbGVjdCgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZWQgc2VsZWN0aW9uIGJhc2VkIG9uIHdoYXQncyBub3cgaW4gdGhlIG5hdGl2ZSBzZWxlY3Rpb25cbiAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnZXRTZWxlY3Rpb25SYW5nZUF0O1xuXG4gICAgICAgIGlmIChpc0hvc3RNZXRob2QodGVzdFNlbGVjdGlvbiwgXCJnZXRSYW5nZUF0XCIpKSB7XG4gICAgICAgICAgICAvLyB0cnkvY2F0Y2ggaXMgcHJlc2VudCBiZWNhdXNlIGdldFJhbmdlQXQoKSBtdXN0IGhhdmUgdGhyb3duIGFuIGVycm9yIGluIHNvbWUgYnJvd3NlciBhbmQgc29tZSBzaXR1YXRpb24uXG4gICAgICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBJIGRpZG4ndCB3cml0ZSBhIGNvbW1lbnQgYWJvdXQgdGhlIHNwZWNpZmljcyBhbmQgYW0gbm93IHNjYXJlZCB0byB0YWtlIGl0IG91dC4gTGV0IHRoYXQgYmUgYVxuICAgICAgICAgICAgLy8gbGVzc29uIHRvIHVzIGFsbCwgZXNwZWNpYWxseSBtZS5cbiAgICAgICAgICAgIGdldFNlbGVjdGlvblJhbmdlQXQgPSBmdW5jdGlvbihzZWwsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbC5nZXRSYW5nZUF0KGluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzKSB7XG4gICAgICAgICAgICBnZXRTZWxlY3Rpb25SYW5nZUF0ID0gZnVuY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KHNlbC5hbmNob3JOb2RlKTtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2UoZG9jKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEFuZEVuZChzZWwuYW5jaG9yTm9kZSwgc2VsLmFuY2hvck9mZnNldCwgc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVuIHRoZSBzZWxlY3Rpb24gd2FzIHNlbGVjdGVkIGJhY2t3YXJkcyAoZnJvbSB0aGUgZW5kIHRvIHRoZSBzdGFydCBpbiB0aGVcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudClcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkICE9PSB0aGlzLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCwgc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBXcmFwcGVkU2VsZWN0aW9uKHNlbGVjdGlvbiwgZG9jU2VsZWN0aW9uLCB3aW4pIHtcbiAgICAgICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5kb2NTZWxlY3Rpb24gPSBkb2NTZWxlY3Rpb247XG4gICAgICAgICAgICB0aGlzLl9yYW5nZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMud2luID0gd2luO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBXcmFwcGVkU2VsZWN0aW9uLnByb3RvdHlwZSA9IGFwaS5zZWxlY3Rpb25Qcm90b3R5cGU7XG5cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlUHJvcGVydGllcyhzZWwpIHtcbiAgICAgICAgICAgIHNlbC53aW4gPSBzZWwuYW5jaG9yTm9kZSA9IHNlbC5mb2N1c05vZGUgPSBzZWwuX3JhbmdlcyA9IG51bGw7XG4gICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IHNlbC5hbmNob3JPZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQgPSAwO1xuICAgICAgICAgICAgc2VsLmRldGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYWNoZWRSYW5neVNlbGVjdGlvbnMgPSBbXTtcblxuICAgICAgICBmdW5jdGlvbiBhY3RPbkNhY2hlZFNlbGVjdGlvbih3aW4sIGFjdGlvbikge1xuICAgICAgICAgICAgdmFyIGkgPSBjYWNoZWRSYW5neVNlbGVjdGlvbnMubGVuZ3RoLCBjYWNoZWQsIHNlbDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBjYWNoZWQgPSBjYWNoZWRSYW5neVNlbGVjdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgc2VsID0gY2FjaGVkLnNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09IFwiZGVsZXRlQWxsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlUHJvcGVydGllcyhzZWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FjaGVkLndpbiA9PSB3aW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSBcImRlbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZWRSYW5neVNlbGVjdGlvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSBcImRlbGV0ZUFsbFwiKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVkUmFuZ3lTZWxlY3Rpb25zLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnZXRTZWxlY3Rpb24gPSBmdW5jdGlvbih3aW4pIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBwYXJhbWV0ZXIgaXMgYSBSYW5neSBTZWxlY3Rpb24gb2JqZWN0XG4gICAgICAgICAgICBpZiAod2luICYmIHdpbiBpbnN0YW5jZW9mIFdyYXBwZWRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB3aW4ucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdpbiA9IGdldFdpbmRvdyh3aW4sIFwiZ2V0TmF0aXZlU2VsZWN0aW9uXCIpO1xuXG4gICAgICAgICAgICB2YXIgc2VsID0gYWN0T25DYWNoZWRTZWxlY3Rpb24od2luKTtcbiAgICAgICAgICAgIHZhciBuYXRpdmVTZWwgPSBnZXROYXRpdmVTZWxlY3Rpb24od2luKSwgZG9jU2VsID0gaW1wbGVtZW50c0RvY1NlbGVjdGlvbiA/IGdldERvY1NlbGVjdGlvbih3aW4pIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChzZWwpIHtcbiAgICAgICAgICAgICAgICBzZWwubmF0aXZlU2VsZWN0aW9uID0gbmF0aXZlU2VsO1xuICAgICAgICAgICAgICAgIHNlbC5kb2NTZWxlY3Rpb24gPSBkb2NTZWw7XG4gICAgICAgICAgICAgICAgc2VsLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsID0gbmV3IFdyYXBwZWRTZWxlY3Rpb24obmF0aXZlU2VsLCBkb2NTZWwsIHdpbik7XG4gICAgICAgICAgICAgICAgY2FjaGVkUmFuZ3lTZWxlY3Rpb25zLnB1c2goIHsgd2luOiB3aW4sIHNlbGVjdGlvbjogc2VsIH0gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWw7XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpLmdldFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbjtcblxuICAgICAgICBhcGkuZ2V0SWZyYW1lU2VsZWN0aW9uID0gZnVuY3Rpb24oaWZyYW1lRWwpIHtcbiAgICAgICAgICAgIG1vZHVsZS5kZXByZWNhdGlvbk5vdGljZShcImdldElmcmFtZVNlbGVjdGlvbigpXCIsIFwiZ2V0U2VsZWN0aW9uKGlmcmFtZUVsKVwiKTtcbiAgICAgICAgICAgIHJldHVybiBhcGkuZ2V0U2VsZWN0aW9uKGRvbS5nZXRJZnJhbWVXaW5kb3coaWZyYW1lRWwpKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc2VsUHJvdG8gPSBXcmFwcGVkU2VsZWN0aW9uLnByb3RvdHlwZTtcblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVDb250cm9sU2VsZWN0aW9uKHNlbCwgcmFuZ2VzKSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgc2VsZWN0aW9uIGJlY29tZXMgb2YgdHlwZSBcIkNvbnRyb2xcIlxuICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KHJhbmdlc1swXS5zdGFydENvbnRhaW5lcik7XG4gICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZUNvbnRyb2xSYW5nZSgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGVsLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBlbCA9IGdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2UocmFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sUmFuZ2UuYWRkKGVsKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJzZXRSYW5nZXMoKTogRWxlbWVudCB3aXRoaW4gb25lIG9mIHRoZSBzcGVjaWZpZWQgUmFuZ2VzIGNvdWxkIG5vdCBiZSBhZGRlZCB0byBjb250cm9sIHNlbGVjdGlvbiAoZG9lcyBpdCBoYXZlIGxheW91dD8pXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRyb2xSYW5nZS5zZWxlY3QoKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB3cmFwcGVkIHNlbGVjdGlvbiBiYXNlZCBvbiB3aGF0J3Mgbm93IGluIHRoZSBuYXRpdmUgc2VsZWN0aW9uXG4gICAgICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZWxlY3RpbmcgYSByYW5nZVxuICAgICAgICBpZiAoIXVzZURvY3VtZW50U2VsZWN0aW9uICYmIHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzICYmIHV0aWwuYXJlSG9zdE1ldGhvZHModGVzdFNlbGVjdGlvbiwgW1wicmVtb3ZlQWxsUmFuZ2VzXCIsIFwiYWRkUmFuZ2VcIl0pKSB7XG4gICAgICAgICAgICBzZWxQcm90by5yZW1vdmVBbGxSYW5nZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbih0aGlzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBhZGRSYW5nZUJhY2t3YXJkID0gZnVuY3Rpb24oc2VsLCByYW5nZSkge1xuICAgICAgICAgICAgICAgIGFkZFJhbmdlQmFja3dhcmRUb05hdGl2ZShzZWwubmF0aXZlU2VsZWN0aW9uLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgc2VsLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb25IYXNSYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgc2VsUHJvdG8uYWRkUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgdGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRSYW5nZVRvQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEaXJlY3Rpb25CYWNrd2FyZChkaXJlY3Rpb24pICYmIHNlbGVjdGlvbkhhc0V4dGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlQmFja3dhcmQodGhpcywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNSYW5nZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmFuZ2VDb3VudCA9IHRoaXMucmFuZ2VDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1JhbmdlQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9uZSB0aGUgbmF0aXZlIHJhbmdlIHNvIHRoYXQgY2hhbmdpbmcgdGhlIHNlbGVjdGVkIHJhbmdlIGRvZXMgbm90IGFmZmVjdCB0aGUgc2VsZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgY29udHJhcnkgdG8gdGhlIHNwZWMgYnV0IGlzIHRoZSBvbmx5IHdheSB0byBhY2hpZXZlIGNvbnNpc3RlbmN5IGJldHdlZW4gYnJvd3NlcnMuIFNlZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzc3VlIDgwLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9uZWROYXRpdmVSYW5nZSA9IGdldE5hdGl2ZVJhbmdlKHJhbmdlKS5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVTZWxlY3Rpb24uYWRkUmFuZ2UoY2xvbmVkTmF0aXZlUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciBhZGRpbmcgdGhlIHJhbmdlIHdhcyBzdWNjZXNzZnVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYW5nZUNvdW50ID0gdGhpcy5uYXRpdmVTZWxlY3Rpb24ucmFuZ2VDb3VudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQgPT0gcHJldmlvdXNSYW5nZUNvdW50ICsgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmFuZ2Ugd2FzIGFkZGVkIHN1Y2Nlc3NmdWxseVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIHJhbmdlIHRoYXQgd2UgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbiBpcyByZWZsZWN0ZWQgaW4gdGhlIGxhc3QgcmFuZ2UgZXh0cmFjdGVkIGZyb21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXBpLmNvbmZpZy5jaGVja1NlbGVjdGlvblJhbmdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5hdGl2ZVJhbmdlID0gZ2V0U2VsZWN0aW9uUmFuZ2VBdCh0aGlzLm5hdGl2ZVNlbGVjdGlvbiwgdGhpcy5yYW5nZUNvdW50IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmF0aXZlUmFuZ2UgJiYgIXJhbmdlc0VxdWFsKG5hdGl2ZVJhbmdlLCByYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYXBwZW5zIGluIFdlYktpdCB3aXRoLCBmb3IgZXhhbXBsZSwgYSBzZWxlY3Rpb24gcGxhY2VkIGF0IHRoZSBzdGFydCBvZiBhIHRleHQgbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gbmV3IFdyYXBwZWRSYW5nZShuYXRpdmVSYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzW3RoaXMucmFuZ2VDb3VudCAtIDFdID0gcmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHRoaXMsIHJhbmdlLCBzZWxlY3Rpb25Jc0JhY2t3YXJkKHRoaXMubmF0aXZlU2VsZWN0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSBzZWxlY3Rpb25Jc0NvbGxhcHNlZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmFuZ2Ugd2FzIG5vdCBhZGRlZCBzdWNjZXNzZnVsbHkuIFRoZSBzaW1wbGVzdCB0aGluZyBpcyB0byByZWZyZXNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbFByb3RvLmFkZFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UsIGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEaXJlY3Rpb25CYWNrd2FyZChkaXJlY3Rpb24pICYmIHNlbGVjdGlvbkhhc0V4dGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmFuZ2VCYWNrd2FyZCh0aGlzLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShnZXROYXRpdmVSYW5nZShyYW5nZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxQcm90by5zZXRSYW5nZXMgPSBmdW5jdGlvbihyYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSAmJiBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uICYmIHJhbmdlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUNvbnRyb2xTZWxlY3Rpb24odGhpcywgcmFuZ2VzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmFuZ2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzSG9zdE1ldGhvZCh0ZXN0U2VsZWN0aW9uLCBcImVtcHR5XCIpICYmIGlzSG9zdE1ldGhvZCh0ZXN0UmFuZ2UsIFwic2VsZWN0XCIpICYmXG4gICAgICAgICAgICAgICAgICAgaW1wbGVtZW50c0NvbnRyb2xSYW5nZSAmJiB1c2VEb2N1bWVudFNlbGVjdGlvbikge1xuXG4gICAgICAgICAgICBzZWxQcm90by5yZW1vdmVBbGxSYW5nZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBBZGRlZCB0cnkvY2F0Y2ggYXMgZml4IGZvciBpc3N1ZSAjMjFcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbi5lbXB0eSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBlbXB0eSgpIG5vdCB3b3JraW5nIChpc3N1ZSAjMjQpXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY1NlbGVjdGlvbi50eXBlICE9IFwiTm9uZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXb3JrIGFyb3VuZCBmYWlsdXJlIHRvIGVtcHR5IGEgY29udHJvbCBzZWxlY3Rpb24gYnkgaW5zdGVhZCBzZWxlY3RpbmcgYSBUZXh0UmFuZ2UgYW5kIHRoZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxpbmcgZW1wdHkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvYztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuY2hvck5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSBnZXREb2N1bWVudCh0aGlzLmFuY2hvck5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gdGhpcy5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJhbmdlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSBnZXREb2N1bWVudCggY29udHJvbFJhbmdlLml0ZW0oMCkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRSYW5nZSA9IGdldEJvZHkoZG9jKS5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0UmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2NTZWxlY3Rpb24uZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2goZXgpIHt9XG4gICAgICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24odGhpcyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzZWxQcm90by5hZGRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRSYW5nZVRvQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXBpLldyYXBwZWRUZXh0UmFuZ2UucmFuZ2VUb1RleHRSYW5nZShyYW5nZSkuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jhbmdlc1swXSA9IHJhbmdlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhbmdlQ291bnQgPSAxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29sbGFwc2VkID0gdGhpcy5fcmFuZ2VzWzBdLmNvbGxhcHNlZDtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2UodGhpcywgcmFuZ2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzZWxQcm90by5zZXRSYW5nZXMgPSBmdW5jdGlvbihyYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZUNvdW50ID0gcmFuZ2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VDb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlc1swXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5mYWlsKFwiTm8gbWVhbnMgb2Ygc2VsZWN0aW5nIGEgUmFuZ2Ugb3IgVGV4dFJhbmdlIHdhcyBmb3VuZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbFByb3RvLmdldFJhbmdlQXQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnJhbmdlQ291bnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiSU5ERVhfU0laRV9FUlJcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENsb25lIHRoZSByYW5nZSB0byBwcmVzZXJ2ZSBzZWxlY3Rpb24tcmFuZ2UgaW5kZXBlbmRlbmNlLiBTZWUgaXNzdWUgODAuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jhbmdlc1tpbmRleF0uY2xvbmVSYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZWZyZXNoU2VsZWN0aW9uO1xuXG4gICAgICAgIGlmICh1c2VEb2N1bWVudFNlbGVjdGlvbikge1xuICAgICAgICAgICAgcmVmcmVzaFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHNlbCkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZTtcbiAgICAgICAgICAgICAgICBpZiAoYXBpLmlzU2VsZWN0aW9uVmFsaWQoc2VsLndpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBzZWwuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBnZXRCb2R5KHNlbC53aW4uZG9jdW1lbnQpLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29udHJvbFNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUZXh0UmFuZ2UocmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUZyb21UZXh0UmFuZ2Uoc2VsLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzSG9zdE1ldGhvZCh0ZXN0U2VsZWN0aW9uLCBcImdldFJhbmdlQXRcIikgJiYgdHlwZW9mIHRlc3RTZWxlY3Rpb24ucmFuZ2VDb3VudCA9PSBOVU1CRVIpIHtcbiAgICAgICAgICAgIHJlZnJlc2hTZWxlY3Rpb24gPSBmdW5jdGlvbihzZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSAmJiBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uICYmIHNlbC5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWwuX3Jhbmdlcy5sZW5ndGggPSBzZWwucmFuZ2VDb3VudCA9IHNlbC5uYXRpdmVTZWxlY3Rpb24ucmFuZ2VDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbC5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2VsLnJhbmdlQ291bnQ7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5fcmFuZ2VzW2ldID0gbmV3IGFwaS5XcmFwcGVkUmFuZ2Uoc2VsLm5hdGl2ZVNlbGVjdGlvbi5nZXRSYW5nZUF0KGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHNlbCwgc2VsLl9yYW5nZXNbc2VsLnJhbmdlQ291bnQgLSAxXSwgc2VsZWN0aW9uSXNCYWNrd2FyZChzZWwubmF0aXZlU2VsZWN0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWxlY3Rpb25Jc0NvbGxhcHNlZChzZWwpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgJiYgdHlwZW9mIHRlc3RTZWxlY3Rpb24uaXNDb2xsYXBzZWQgPT0gQk9PTEVBTiAmJiB0eXBlb2YgdGVzdFJhbmdlLmNvbGxhcHNlZCA9PSBCT09MRUFOICYmIGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkge1xuICAgICAgICAgICAgcmVmcmVzaFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHNlbCkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSwgbmF0aXZlU2VsID0gc2VsLm5hdGl2ZVNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAobmF0aXZlU2VsLmFuY2hvck5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBnZXRTZWxlY3Rpb25SYW5nZUF0KG5hdGl2ZVNlbCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbC5fcmFuZ2VzID0gW3JhbmdlXTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLnJhbmdlQ291bnQgPSAxO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21OYXRpdmVTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLmlzQ29sbGFwc2VkID0gc2VsZWN0aW9uSXNDb2xsYXBzZWQoc2VsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZmFpbChcIk5vIG1lYW5zIG9mIG9idGFpbmluZyBhIFJhbmdlIG9yIFRleHRSYW5nZSBmcm9tIHRoZSB1c2VyJ3Mgc2VsZWN0aW9uIHdhcyBmb3VuZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbFByb3RvLnJlZnJlc2ggPSBmdW5jdGlvbihjaGVja0ZvckNoYW5nZXMpIHtcbiAgICAgICAgICAgIHZhciBvbGRSYW5nZXMgPSBjaGVja0ZvckNoYW5nZXMgPyB0aGlzLl9yYW5nZXMuc2xpY2UoMCkgOiBudWxsO1xuICAgICAgICAgICAgdmFyIG9sZEFuY2hvck5vZGUgPSB0aGlzLmFuY2hvck5vZGUsIG9sZEFuY2hvck9mZnNldCA9IHRoaXMuYW5jaG9yT2Zmc2V0O1xuXG4gICAgICAgICAgICByZWZyZXNoU2VsZWN0aW9uKHRoaXMpO1xuICAgICAgICAgICAgaWYgKGNoZWNrRm9yQ2hhbmdlcykge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSByYW5nZSBjb3VudCBmaXJzdFxuICAgICAgICAgICAgICAgIHZhciBpID0gb2xkUmFuZ2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAoaSAhPSB0aGlzLl9yYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE5vdyBjaGVjayB0aGUgZGlyZWN0aW9uLiBDaGVja2luZyB0aGUgYW5jaG9yIHBvc2l0aW9uIGlzIHRoZSBzYW1lIGlzIGVub3VnaCBzaW5jZSB3ZSdyZSBjaGVja2luZyBhbGwgdGhlXG4gICAgICAgICAgICAgICAgLy8gcmFuZ2VzIGFmdGVyIHRoaXNcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hbmNob3JOb2RlICE9IG9sZEFuY2hvck5vZGUgfHwgdGhpcy5hbmNob3JPZmZzZXQgIT0gb2xkQW5jaG9yT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEZpbmFsbHksIGNvbXBhcmUgZWFjaCByYW5nZSBpbiB0dXJuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJhbmdlc0VxdWFsKG9sZFJhbmdlc1tpXSwgdGhpcy5fcmFuZ2VzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFJlbW92YWwgb2YgYSBzaW5nbGUgcmFuZ2VcbiAgICAgICAgdmFyIHJlbW92ZVJhbmdlTWFudWFsbHkgPSBmdW5jdGlvbihzZWwsIHJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VzID0gc2VsLmdldEFsbFJhbmdlcygpO1xuICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJhbmdlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICghcmFuZ2VzRXF1YWwocmFuZ2UsIHJhbmdlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKHJhbmdlc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzZWwucmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGltcGxlbWVudHNDb250cm9sUmFuZ2UgJiYgaW1wbGVtZW50c0RvY1NlbGVjdGlvbikge1xuICAgICAgICAgICAgc2VsUHJvdG8ucmVtb3ZlUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHRoaXMuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5nZUVsZW1lbnQgPSBnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlKHJhbmdlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQ29udHJvbFJhbmdlIGNvbnRhaW5pbmcgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgc2VsZWN0ZWQgQ29udHJvbFJhbmdlIG1pbnVzIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGNvbnRhaW5lZCBieSB0aGUgc3VwcGxpZWQgcmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KGNvbnRyb2xSYW5nZS5pdGVtKDApKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NvbnRyb2xSYW5nZSA9IGdldEJvZHkoZG9jKS5jcmVhdGVDb250cm9sUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsLCByZW1vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjb250cm9sUmFuZ2UubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gY29udHJvbFJhbmdlLml0ZW0oaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwgIT09IHJhbmdlRWxlbWVudCB8fCByZW1vdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLmFkZChjb250cm9sUmFuZ2UuaXRlbShpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbnRyb2xSYW5nZS5zZWxlY3QoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZWQgc2VsZWN0aW9uIGJhc2VkIG9uIHdoYXQncyBub3cgaW4gdGhlIG5hdGl2ZSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSYW5nZU1hbnVhbGx5KHRoaXMsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsUHJvdG8ucmVtb3ZlUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZVJhbmdlTWFudWFsbHkodGhpcywgcmFuZ2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVjdGluZyBpZiBhIHNlbGVjdGlvbiBpcyBiYWNrd2FyZFxuICAgICAgICB2YXIgc2VsZWN0aW9uSXNCYWNrd2FyZDtcbiAgICAgICAgaWYgKCF1c2VEb2N1bWVudFNlbGVjdGlvbiAmJiBzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cyAmJiBmZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbklzQmFja3dhcmQgPSB3aW5TZWxlY3Rpb25Jc0JhY2t3YXJkO1xuXG4gICAgICAgICAgICBzZWxQcm90by5pc0JhY2t3YXJkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbklzQmFja3dhcmQodGhpcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0aW9uSXNCYWNrd2FyZCA9IHNlbFByb3RvLmlzQmFja3dhcmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuIGFsaWFzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gRnJvbSAxLjMsIGV2ZXJ5dGhpbmcgaXMgXCJiYWNrd2FyZFwiIHJhdGhlciB0aGFuIFwiYmFja3dhcmRzXCJcbiAgICAgICAgc2VsUHJvdG8uaXNCYWNrd2FyZHMgPSBzZWxQcm90by5pc0JhY2t3YXJkO1xuXG4gICAgICAgIC8vIFNlbGVjdGlvbiBzdHJpbmdpZmllclxuICAgICAgICAvLyBUaGlzIGlzIGNvbmZvcm1hbnQgdG8gdGhlIG9sZCBIVE1MNSBzZWxlY3Rpb25zIGRyYWZ0IHNwZWMgYnV0IGRpZmZlcnMgZnJvbSBXZWJLaXQgYW5kIE1vemlsbGEncyBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgLy8gVGhlIGN1cnJlbnQgc3BlYyBkb2VzIG5vdCB5ZXQgZGVmaW5lIHRoaXMgbWV0aG9kLlxuICAgICAgICBzZWxQcm90by50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJhbmdlVGV4dHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLnJhbmdlQ291bnQ7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIHJhbmdlVGV4dHNbaV0gPSBcIlwiICsgdGhpcy5fcmFuZ2VzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJhbmdlVGV4dHMuam9pbihcIlwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBhc3NlcnROb2RlSW5TYW1lRG9jdW1lbnQoc2VsLCBub2RlKSB7XG4gICAgICAgICAgICBpZiAoc2VsLndpbi5kb2N1bWVudCAhPSBnZXREb2N1bWVudChub2RlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJXUk9OR19ET0NVTUVOVF9FUlJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBObyBjdXJyZW50IGJyb3dzZXIgY29uZm9ybXMgZnVsbHkgdG8gdGhlIHNwZWMgZm9yIHRoaXMgbWV0aG9kLCBzbyBSYW5neSdzIG93biBtZXRob2QgaXMgYWx3YXlzIHVzZWRcbiAgICAgICAgc2VsUHJvdG8uY29sbGFwc2UgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgIGFzc2VydE5vZGVJblNhbWVEb2N1bWVudCh0aGlzLCBub2RlKTtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShub2RlKTtcbiAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlVG9Qb2ludChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgdGhpcy5zZXRTaW5nbGVSYW5nZShyYW5nZSk7XG4gICAgICAgICAgICB0aGlzLmlzQ29sbGFwc2VkID0gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5jb2xsYXBzZVRvU3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLl9yYW5nZXNbMF07XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzZShyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiSU5WQUxJRF9TVEFURV9FUlJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uY29sbGFwc2VUb0VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuX3Jhbmdlc1t0aGlzLnJhbmdlQ291bnQgLSAxXTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIklOVkFMSURfU1RBVEVfRVJSXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRoZSBzcGVjIGlzIHZlcnkgc3BlY2lmaWMgb24gaG93IHNlbGVjdEFsbENoaWxkcmVuIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBzbyB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzXG4gICAgICAgIC8vIG5ldmVyIHVzZWQgYnkgUmFuZ3kuXG4gICAgICAgIHNlbFByb3RvLnNlbGVjdEFsbENoaWxkcmVuID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgYXNzZXJ0Tm9kZUluU2FtZURvY3VtZW50KHRoaXMsIG5vZGUpO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKG5vZGUpO1xuICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuICAgICAgICAgICAgdGhpcy5zZXRTaW5nbGVSYW5nZShyYW5nZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uZGVsZXRlRnJvbURvY3VtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBTZXBjaWFsIGJlaGF2aW91ciByZXF1aXJlZCBmb3IgSUUncyBjb250cm9sIHNlbGVjdGlvbnNcbiAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgdGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHRoaXMuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGNvbnRyb2xSYW5nZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGNvbnRyb2xSYW5nZS5pdGVtKDApO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sUmFuZ2UucmVtb3ZlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJhbmdlQ291bnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2VzID0gdGhpcy5nZXRBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmFuZ2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZXNbaV0uZGVsZXRlQ29udGVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc3BlYyBzYXlzIG5vdGhpbmcgYWJvdXQgd2hhdCB0aGUgc2VsZWN0aW9uIHNob3VsZCBjb250YWluIGFmdGVyIGNhbGxpbmcgZGVsZXRlQ29udGVudHMgb24gZWFjaFxuICAgICAgICAgICAgICAgICAgICAvLyByYW5nZS4gRmlyZWZveCBtb3ZlcyB0aGUgc2VsZWN0aW9uIHRvIHdoZXJlIHRoZSBmaW5hbCBzZWxlY3RlZCByYW5nZSB3YXMsIHNvIHdlIGVtdWxhdGUgdGhhdFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlc1tsZW4gLSAxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlIG5vbi1zdGFuZGFyZCBleHRlbnNpb25zXG4gICAgICAgIHNlbFByb3RvLmVhY2hSYW5nZSA9IGZ1bmN0aW9uKGZ1bmMsIHJldHVyblZhbHVlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fcmFuZ2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBmdW5jKCB0aGlzLmdldFJhbmdlQXQoaSkgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5nZXRBbGxSYW5nZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZWFjaFJhbmdlKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLnNldFNpbmdsZVJhbmdlID0gZnVuY3Rpb24ocmFuZ2UsIGRpcmVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2UsIGRpcmVjdGlvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uY2FsbE1ldGhvZE9uRWFjaFJhbmdlID0gZnVuY3Rpb24obWV0aG9kTmFtZSwgcGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5lYWNoUmFuZ2UoIGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKCByYW5nZVttZXRob2ROYW1lXS5hcHBseShyYW5nZSwgcGFyYW1zKSApO1xuICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVTdGFydE9yRW5kU2V0dGVyKGlzU3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2U7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VbXCJzZXRcIiArIChpc1N0YXJ0ID8gXCJTdGFydFwiIDogXCJFbmRcIildKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2UodGhpcy53aW4uZG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEFuZEVuZChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNldFNpbmdsZVJhbmdlKHJhbmdlLCB0aGlzLmlzQmFja3dhcmQoKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsUHJvdG8uc2V0U3RhcnQgPSBjcmVhdGVTdGFydE9yRW5kU2V0dGVyKHRydWUpO1xuICAgICAgICBzZWxQcm90by5zZXRFbmQgPSBjcmVhdGVTdGFydE9yRW5kU2V0dGVyKGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCBzZWxlY3QoKSBtZXRob2QgdG8gUmFuZ2UgcHJvdG90eXBlLiBBbnkgZXhpc3Rpbmcgc2VsZWN0aW9uIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAgICAgYXBpLnJhbmdlUHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgZ2V0U2VsZWN0aW9uKCB0aGlzLmdldERvY3VtZW50KCkgKS5zZXRTaW5nbGVSYW5nZSh0aGlzLCBkaXJlY3Rpb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmNoYW5nZUVhY2hSYW5nZSA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBiYWNrd2FyZCA9IHRoaXMuaXNCYWNrd2FyZCgpO1xuXG4gICAgICAgICAgICB0aGlzLmVhY2hSYW5nZShmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIGZ1bmMocmFuZ2UpO1xuICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKHJhbmdlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgaWYgKGJhY2t3YXJkICYmIHJhbmdlcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2VzWzBdLCBcImJhY2t3YXJkXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlcyhyYW5nZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmNvbnRhaW5zTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIGFsbG93UGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaFJhbmdlKCBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZS5jb250YWluc05vZGUobm9kZSwgYWxsb3dQYXJ0aWFsKTtcbiAgICAgICAgICAgIH0sIHRydWUgKSB8fCBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5nZXRCb29rbWFyayA9IGZ1bmN0aW9uKGNvbnRhaW5lck5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYmFja3dhcmQ6IHRoaXMuaXNCYWNrd2FyZCgpLFxuICAgICAgICAgICAgICAgIHJhbmdlQm9va21hcmtzOiB0aGlzLmNhbGxNZXRob2RPbkVhY2hSYW5nZShcImdldEJvb2ttYXJrXCIsIFtjb250YWluZXJOb2RlXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8ubW92ZVRvQm9va21hcmsgPSBmdW5jdGlvbihib29rbWFyaykge1xuICAgICAgICAgICAgdmFyIHNlbFJhbmdlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHJhbmdlQm9va21hcmssIHJhbmdlOyByYW5nZUJvb2ttYXJrID0gYm9va21hcmsucmFuZ2VCb29rbWFya3NbaSsrXTsgKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2UodGhpcy53aW4pO1xuICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVUb0Jvb2ttYXJrKHJhbmdlQm9va21hcmspO1xuICAgICAgICAgICAgICAgIHNlbFJhbmdlcy5wdXNoKHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib29rbWFyay5iYWNrd2FyZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2luZ2xlUmFuZ2Uoc2VsUmFuZ2VzWzBdLCBcImJhY2t3YXJkXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlcyhzZWxSYW5nZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLnRvSHRtbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJhbmdlSHRtbHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZWFjaFJhbmdlKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VIdG1scy5wdXNoKCBEb21SYW5nZS50b0h0bWwocmFuZ2UpICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByYW5nZUh0bWxzLmpvaW4oXCJcIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGZlYXR1cmVzLmltcGxlbWVudHNUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgIHNlbFByb3RvLmdldE5hdGl2ZVRleHRSYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWwsIHRleHRSYW5nZTtcbiAgICAgICAgICAgICAgICBpZiAoIChzZWwgPSB0aGlzLmRvY1NlbGVjdGlvbikgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHNlbC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUZXh0UmFuZ2UocmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJnZXROYXRpdmVUZXh0UmFuZ2U6IHNlbGVjdGlvbiBpcyBhIGNvbnRyb2wgc2VsZWN0aW9uXCIpOyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yYW5nZUNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpLldyYXBwZWRUZXh0UmFuZ2UucmFuZ2VUb1RleHRSYW5nZSggdGhpcy5nZXRSYW5nZUF0KDApICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKFwiZ2V0TmF0aXZlVGV4dFJhbmdlOiBzZWxlY3Rpb24gY29udGFpbnMgbm8gcmFuZ2VcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluc3BlY3Qoc2VsKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VJbnNwZWN0cyA9IFtdO1xuICAgICAgICAgICAgdmFyIGFuY2hvciA9IG5ldyBEb21Qb3NpdGlvbihzZWwuYW5jaG9yTm9kZSwgc2VsLmFuY2hvck9mZnNldCk7XG4gICAgICAgICAgICB2YXIgZm9jdXMgPSBuZXcgRG9tUG9zaXRpb24oc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0KTtcbiAgICAgICAgICAgIHZhciBuYW1lID0gKHR5cGVvZiBzZWwuZ2V0TmFtZSA9PSBcImZ1bmN0aW9uXCIpID8gc2VsLmdldE5hbWUoKSA6IFwiU2VsZWN0aW9uXCI7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsLnJhbmdlQ291bnQgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWwucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlSW5zcGVjdHNbaV0gPSBEb21SYW5nZS5pbnNwZWN0KHNlbC5nZXRSYW5nZUF0KGkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJbXCIgKyBuYW1lICsgXCIoUmFuZ2VzOiBcIiArIHJhbmdlSW5zcGVjdHMuam9pbihcIiwgXCIpICtcbiAgICAgICAgICAgICAgICAgICAgXCIpKGFuY2hvcjogXCIgKyBhbmNob3IuaW5zcGVjdCgpICsgXCIsIGZvY3VzOiBcIiArIGZvY3VzLmluc3BlY3QoKSArIFwiXVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsUHJvdG8uZ2V0TmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiV3JhcHBlZFNlbGVjdGlvblwiO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmluc3BlY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnNwZWN0KHRoaXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmRldGFjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWN0T25DYWNoZWRTZWxlY3Rpb24odGhpcy53aW4sIFwiZGVsZXRlXCIpO1xuICAgICAgICAgICAgZGVsZXRlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBXcmFwcGVkU2VsZWN0aW9uLmRldGFjaEFsbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWN0T25DYWNoZWRTZWxlY3Rpb24obnVsbCwgXCJkZWxldGVBbGxcIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgV3JhcHBlZFNlbGVjdGlvbi5pbnNwZWN0ID0gaW5zcGVjdDtcbiAgICAgICAgV3JhcHBlZFNlbGVjdGlvbi5pc0RpcmVjdGlvbkJhY2t3YXJkID0gaXNEaXJlY3Rpb25CYWNrd2FyZDtcblxuICAgICAgICBhcGkuU2VsZWN0aW9uID0gV3JhcHBlZFNlbGVjdGlvbjtcblxuICAgICAgICBhcGkuc2VsZWN0aW9uUHJvdG90eXBlID0gc2VsUHJvdG87XG5cbiAgICAgICAgYXBpLmFkZFNoaW1MaXN0ZW5lcihmdW5jdGlvbih3aW4pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luLmdldFNlbGVjdGlvbiA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgd2luLmdldFNlbGVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U2VsZWN0aW9uKHdpbik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbiA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG4gICAgLy8gV2FpdCBmb3IgZG9jdW1lbnQgdG8gbG9hZCBiZWZvcmUgaW5pdGlhbGl6aW5nXHJcbiAgICB2YXIgZG9jUmVhZHkgPSBmYWxzZTtcclxuXHJcbiAgICB2YXIgbG9hZEhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKCFkb2NSZWFkeSkge1xyXG4gICAgICAgICAgICBkb2NSZWFkeSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICghYXBpLmluaXRpYWxpemVkICYmIGFwaS5jb25maWcuYXV0b0luaXRpYWxpemUpIHtcclxuICAgICAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgIC8vIFRlc3Qgd2hldGhlciB0aGUgZG9jdW1lbnQgaGFzIGFscmVhZHkgYmVlbiBsb2FkZWQgYW5kIGluaXRpYWxpemUgaW1tZWRpYXRlbHkgaWYgc29cclxuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSBcImNvbXBsZXRlXCIpIHtcclxuICAgICAgICAgICAgbG9hZEhhbmRsZXIoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaXNIb3N0TWV0aG9kKGRvY3VtZW50LCBcImFkZEV2ZW50TGlzdGVuZXJcIikpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGxvYWRIYW5kbGVyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBhIGZhbGxiYWNrIGluIGNhc2UgdGhlIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQgaXNuJ3Qgc3VwcG9ydGVkXHJcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKHdpbmRvdywgXCJsb2FkXCIsIGxvYWRIYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFwaTtcclxufSwgdGhpcyk7IiwiLy8gICAgIFVuZGVyc2NvcmUuanMgMS44LjFcbi8vICAgICBodHRwOi8vdW5kZXJzY29yZWpzLm9yZ1xuLy8gICAgIChjKSAyMDA5LTIwMTUgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgLy8gQmFzZWxpbmUgc2V0dXBcbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICAvLyBFc3RhYmxpc2ggdGhlIHJvb3Qgb2JqZWN0LCBgd2luZG93YCBpbiB0aGUgYnJvd3Nlciwgb3IgYGV4cG9ydHNgIG9uIHRoZSBzZXJ2ZXIuXG4gIHZhciByb290ID0gdGhpcztcblxuICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYF9gIHZhcmlhYmxlLlxuICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fO1xuXG4gIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIEZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbiAgdmFyXG4gICAgcHVzaCAgICAgICAgICAgICA9IEFycmF5UHJvdG8ucHVzaCxcbiAgICBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSxcbiAgICB0b1N0cmluZyAgICAgICAgID0gT2JqUHJvdG8udG9TdHJpbmcsXG4gICAgaGFzT3duUHJvcGVydHkgICA9IE9ialByb3RvLmhhc093blByb3BlcnR5O1xuXG4gIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZVxuICAvLyBhcmUgZGVjbGFyZWQgaGVyZS5cbiAgdmFyXG4gICAgbmF0aXZlSXNBcnJheSAgICAgID0gQXJyYXkuaXNBcnJheSxcbiAgICBuYXRpdmVLZXlzICAgICAgICAgPSBPYmplY3Qua2V5cyxcbiAgICBuYXRpdmVCaW5kICAgICAgICAgPSBGdW5jUHJvdG8uYmluZCxcbiAgICBuYXRpdmVDcmVhdGUgICAgICAgPSBPYmplY3QuY3JlYXRlO1xuXG4gIC8vIE5ha2VkIGZ1bmN0aW9uIHJlZmVyZW5jZSBmb3Igc3Vycm9nYXRlLXByb3RvdHlwZS1zd2FwcGluZy5cbiAgdmFyIEN0b3IgPSBmdW5jdGlvbigpe307XG5cbiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgaW5cbiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0LlxuICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfO1xuICAgIH1cbiAgICBleHBvcnRzLl8gPSBfO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuXyA9IF87XG4gIH1cblxuICAvLyBDdXJyZW50IHZlcnNpb24uXG4gIF8uVkVSU0lPTiA9ICcxLjguMSc7XG5cbiAgLy8gSW50ZXJuYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGVmZmljaWVudCAoZm9yIGN1cnJlbnQgZW5naW5lcykgdmVyc2lvblxuICAvLyBvZiB0aGUgcGFzc2VkLWluIGNhbGxiYWNrLCB0byBiZSByZXBlYXRlZGx5IGFwcGxpZWQgaW4gb3RoZXIgVW5kZXJzY29yZVxuICAvLyBmdW5jdGlvbnMuXG4gIHZhciBvcHRpbWl6ZUNiID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSByZXR1cm4gZnVuYztcbiAgICBzd2l0Y2ggKGFyZ0NvdW50ID09IG51bGwgPyAzIDogYXJnQ291bnQpIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUpO1xuICAgICAgfTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDQ6IHJldHVybiBmdW5jdGlvbihhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gQSBtb3N0bHktaW50ZXJuYWwgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgY2FsbGJhY2tzIHRoYXQgY2FuIGJlIGFwcGxpZWRcbiAgLy8gdG8gZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRoZSBkZXNpcmVkIHJlc3VsdCDigJQgZWl0aGVyXG4gIC8vIGlkZW50aXR5LCBhbiBhcmJpdHJhcnkgY2FsbGJhY2ssIGEgcHJvcGVydHkgbWF0Y2hlciwgb3IgYSBwcm9wZXJ0eSBhY2Nlc3Nvci5cbiAgdmFyIGNiID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBfLmlkZW50aXR5O1xuICAgIGlmIChfLmlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm4gb3B0aW1pemVDYih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpO1xuICAgIGlmIChfLmlzT2JqZWN0KHZhbHVlKSkgcmV0dXJuIF8ubWF0Y2hlcih2YWx1ZSk7XG4gICAgcmV0dXJuIF8ucHJvcGVydHkodmFsdWUpO1xuICB9O1xuICBfLml0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gY2IodmFsdWUsIGNvbnRleHQsIEluZmluaXR5KTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYXNzaWduZXIgZnVuY3Rpb25zLlxuICB2YXIgY3JlYXRlQXNzaWduZXIgPSBmdW5jdGlvbihrZXlzRnVuYywgdW5kZWZpbmVkT25seSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIgfHwgb2JqID09IG51bGwpIHJldHVybiBvYmo7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdLFxuICAgICAgICAgICAga2V5cyA9IGtleXNGdW5jKHNvdXJjZSksXG4gICAgICAgICAgICBsID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKCF1bmRlZmluZWRPbmx5IHx8IG9ialtrZXldID09PSB2b2lkIDApIG9ialtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSBhbm90aGVyLlxuICB2YXIgYmFzZUNyZWF0ZSA9IGZ1bmN0aW9uKHByb3RvdHlwZSkge1xuICAgIGlmICghXy5pc09iamVjdChwcm90b3R5cGUpKSByZXR1cm4ge307XG4gICAgaWYgKG5hdGl2ZUNyZWF0ZSkgcmV0dXJuIG5hdGl2ZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgIEN0b3IucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgIHZhciByZXN1bHQgPSBuZXcgQ3RvcjtcbiAgICBDdG9yLnByb3RvdHlwZSA9IG51bGw7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBIZWxwZXIgZm9yIGNvbGxlY3Rpb24gbWV0aG9kcyB0byBkZXRlcm1pbmUgd2hldGhlciBhIGNvbGxlY3Rpb25cbiAgLy8gc2hvdWxkIGJlIGl0ZXJhdGVkIGFzIGFuIGFycmF5IG9yIGFzIGFuIG9iamVjdFxuICAvLyBSZWxhdGVkOiBodHRwOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2xlbmd0aFxuICB2YXIgTUFYX0FSUkFZX0lOREVYID0gTWF0aC5wb3coMiwgNTMpIC0gMTtcbiAgdmFyIGlzQXJyYXlMaWtlID0gZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uICYmIGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInICYmIGxlbmd0aCA+PSAwICYmIGxlbmd0aCA8PSBNQVhfQVJSQVlfSU5ERVg7XG4gIH07XG5cbiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC5cbiAgLy8gSGFuZGxlcyByYXcgb2JqZWN0cyBpbiBhZGRpdGlvbiB0byBhcnJheS1saWtlcy4gVHJlYXRzIGFsbFxuICAvLyBzcGFyc2UgYXJyYXktbGlrZXMgYXMgaWYgdGhleSB3ZXJlIGRlbnNlLlxuICBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgaSwgbGVuZ3RoO1xuICAgIGlmIChpc0FycmF5TGlrZShvYmopKSB7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpba2V5c1tpXV0sIGtleXNbaV0sIG9iaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICByZXN1bHRzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgcmVzdWx0c1tpbmRleF0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIHJlZHVjaW5nIGZ1bmN0aW9uIGl0ZXJhdGluZyBsZWZ0IG9yIHJpZ2h0LlxuICBmdW5jdGlvbiBjcmVhdGVSZWR1Y2UoZGlyKSB7XG4gICAgLy8gT3B0aW1pemVkIGl0ZXJhdG9yIGZ1bmN0aW9uIGFzIHVzaW5nIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAvLyBpbiB0aGUgbWFpbiBmdW5jdGlvbiB3aWxsIGRlb3B0aW1pemUgdGhlLCBzZWUgIzE5OTEuXG4gICAgZnVuY3Rpb24gaXRlcmF0b3Iob2JqLCBpdGVyYXRlZSwgbWVtbywga2V5cywgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgZm9yICg7IGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGRpcikge1xuICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHtcbiAgICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCk7XG4gICAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBpbml0aWFsIHZhbHVlIGlmIG5vbmUgaXMgcHJvdmlkZWQuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgbWVtbyA9IG9ialtrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGRpcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvcihvYmosIGl0ZXJhdGVlLCBtZW1vLCBrZXlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLFxuICAvLyBvciBgZm9sZGxgLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGNyZWF0ZVJlZHVjZSgxKTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBjcmVhdGVSZWR1Y2UoLTEpO1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBrZXk7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIGtleSA9IF8uZmluZEluZGV4KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5ID0gXy5maW5kS2V5KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubmVnYXRlKGNiKHByZWRpY2F0ZSkpLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cbiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIHZhbHVlICh1c2luZyBgPT09YCkuXG4gIC8vIEFsaWFzZWQgYXMgYGluY2x1ZGVzYCBhbmQgYGluY2x1ZGVgLlxuICBfLmNvbnRhaW5zID0gXy5pbmNsdWRlcyA9IF8uaW5jbHVkZSA9IGZ1bmN0aW9uKG9iaiwgdGFyZ2V0KSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgIHJldHVybiBfLmluZGV4T2Yob2JqLCB0YXJnZXQpID49IDA7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNGdW5jID8gbWV0aG9kIDogdmFsdWVbbWV0aG9kXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyBmdW5jIDogZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS5cbiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ud2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgPiByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gLUluZmluaXR5ICYmIHJlc3VsdCA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IEluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSBJbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSA8IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkIDwgbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSBJbmZpbml0eSAmJiByZXN1bHQgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFNodWZmbGUgYSBjb2xsZWN0aW9uLCB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlXG4gIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHNldCA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBzZXQubGVuZ3RoO1xuICAgIHZhciBzaHVmZmxlZCA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwLCByYW5kOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmFuZCA9IF8ucmFuZG9tKDAsIGluZGV4KTtcbiAgICAgIGlmIChyYW5kICE9PSBpbmRleCkgc2h1ZmZsZWRbaW5kZXhdID0gc2h1ZmZsZWRbcmFuZF07XG4gICAgICBzaHVmZmxlZFtyYW5kXSA9IHNldFtpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBzaHVmZmxlZDtcbiAgfTtcblxuICAvLyBTYW1wbGUgKipuKiogcmFuZG9tIHZhbHVlcyBmcm9tIGEgY29sbGVjdGlvbi5cbiAgLy8gSWYgKipuKiogaXMgbm90IHNwZWNpZmllZCwgcmV0dXJucyBhIHNpbmdsZSByYW5kb20gZWxlbWVudC5cbiAgLy8gVGhlIGludGVybmFsIGBndWFyZGAgYXJndW1lbnQgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgbWFwYC5cbiAgXy5zYW1wbGUgPSBmdW5jdGlvbihvYmosIG4sIGd1YXJkKSB7XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkge1xuICAgICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgICAgcmV0dXJuIG9ialtfLnJhbmRvbShvYmoubGVuZ3RoIC0gMSldO1xuICAgIH1cbiAgICByZXR1cm4gXy5zaHVmZmxlKG9iaikuc2xpY2UoMCwgTWF0aC5tYXgoMCwgbikpO1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRlZS5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IC0gcmlnaHQuaW5kZXg7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGtleSA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgICAgYmVoYXZpb3IocmVzdWx0LCB2YWx1ZSwga2V5KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGVcbiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG4gIF8uZ3JvdXBCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgfSk7XG5cbiAgLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBncm91cEJ5YCwgYnV0IGZvclxuICAvLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoXy5oYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XSsrOyBlbHNlIHJlc3VsdFtrZXldID0gMTtcbiAgfSk7XG5cbiAgLy8gU2FmZWx5IGNyZWF0ZSBhIHJlYWwsIGxpdmUgYXJyYXkgZnJvbSBhbnl0aGluZyBpdGVyYWJsZS5cbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpO1xuICAgIHJldHVybiBfLnZhbHVlcyhvYmopO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC5cbiAgXy5zaXplID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcbiAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqKSA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7XG4gIH07XG5cbiAgLy8gU3BsaXQgYSBjb2xsZWN0aW9uIGludG8gdHdvIGFycmF5czogb25lIHdob3NlIGVsZW1lbnRzIGFsbCBzYXRpc2Z5IHRoZSBnaXZlblxuICAvLyBwcmVkaWNhdGUsIGFuZCBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIGRvIG5vdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuXG4gIF8ucGFydGl0aW9uID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBwYXNzID0gW10sIGZhaWwgPSBbXTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcbiAgICAgIChwcmVkaWNhdGUodmFsdWUsIGtleSwgb2JqKSA/IHBhc3MgOiBmYWlsKS5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW3Bhc3MsIGZhaWxdO1xuICB9O1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbMF07XG4gICAgcmV0dXJuIF8uaW5pdGlhbChhcnJheSwgYXJyYXkubGVuZ3RoIC0gbik7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4gIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4gIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSAobiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pKSk7XG4gIH07XG5cbiAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIF8ucmVzdChhcnJheSwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gbikpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC5cbiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm5cbiAgLy8gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgbiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pO1xuICB9O1xuXG4gIC8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIF8uaWRlbnRpdHkpO1xuICB9O1xuXG4gIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgc3RyaWN0LCBzdGFydEluZGV4KSB7XG4gICAgdmFyIG91dHB1dCA9IFtdLCBpZHggPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4IHx8IDAsIGxlbmd0aCA9IGlucHV0ICYmIGlucHV0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiYgKF8uaXNBcnJheSh2YWx1ZSkgfHwgXy5pc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIC8vZmxhdHRlbiBjdXJyZW50IGxldmVsIG9mIGFycmF5IG9yIGFyZ3VtZW50cyBvYmplY3RcbiAgICAgICAgaWYgKCFzaGFsbG93KSB2YWx1ZSA9IGZsYXR0ZW4odmFsdWUsIHNoYWxsb3csIHN0cmljdCk7XG4gICAgICAgIHZhciBqID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICBvdXRwdXQubGVuZ3RoICs9IGxlbjtcbiAgICAgICAgd2hpbGUgKGogPCBsZW4pIHtcbiAgICAgICAgICBvdXRwdXRbaWR4KytdID0gdmFsdWVbaisrXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghc3RyaWN0KSB7XG4gICAgICAgIG91dHB1dFtpZHgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICAvLyBGbGF0dGVuIG91dCBhbiBhcnJheSwgZWl0aGVyIHJlY3Vyc2l2ZWx5IChieSBkZWZhdWx0KSwgb3IganVzdCBvbmUgbGV2ZWwuXG4gIF8uZmxhdHRlbiA9IGZ1bmN0aW9uKGFycmF5LCBzaGFsbG93KSB7XG4gICAgcmV0dXJuIGZsYXR0ZW4oYXJyYXksIHNoYWxsb3csIGZhbHNlKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS5cbiAgXy53aXRob3V0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5kaWZmZXJlbmNlKGFycmF5LCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIHRoZSBhcnJheS4gSWYgdGhlIGFycmF5IGhhcyBhbHJlYWR5XG4gIC8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS5cbiAgLy8gQWxpYXNlZCBhcyBgdW5pcXVlYC5cbiAgXy51bmlxID0gXy51bmlxdWUgPSBmdW5jdGlvbihhcnJheSwgaXNTb3J0ZWQsIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiBbXTtcbiAgICBpZiAoIV8uaXNCb29sZWFuKGlzU29ydGVkKSkge1xuICAgICAgY29udGV4dCA9IGl0ZXJhdGVlO1xuICAgICAgaXRlcmF0ZWUgPSBpc1NvcnRlZDtcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpdGVyYXRlZSAhPSBudWxsKSBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHNlZW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldLFxuICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpIDogdmFsdWU7XG4gICAgICBpZiAoaXNTb3J0ZWQpIHtcbiAgICAgICAgaWYgKCFpIHx8IHNlZW4gIT09IGNvbXB1dGVkKSByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKCFfLmNvbnRhaW5zKHNlZW4sIGNvbXB1dGVkKSkge1xuICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFfLmNvbnRhaW5zKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHVuaW9uOiBlYWNoIGRpc3RpbmN0IGVsZW1lbnQgZnJvbSBhbGwgb2ZcbiAgLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8udW5pb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXy51bmlxKGZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxuICAvLyBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiBbXTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBhcnJheVtpXTtcbiAgICAgIGlmIChfLmNvbnRhaW5zKHJlc3VsdCwgaXRlbSkpIGNvbnRpbnVlO1xuICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBhcmdzTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKCFfLmNvbnRhaW5zKGFyZ3VtZW50c1tqXSwgaXRlbSkpIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGogPT09IGFyZ3NMZW5ndGgpIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFRha2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBvbmUgYXJyYXkgYW5kIGEgbnVtYmVyIG9mIG90aGVyIGFycmF5cy5cbiAgLy8gT25seSB0aGUgZWxlbWVudHMgcHJlc2VudCBpbiBqdXN0IHRoZSBmaXJzdCBhcnJheSB3aWxsIHJlbWFpbi5cbiAgXy5kaWZmZXJlbmNlID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgcmVzdCA9IGZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlLCAxKTtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIHJldHVybiAhXy5jb250YWlucyhyZXN0LCB2YWx1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZVxuICAvLyBhbiBpbmRleCBnbyB0b2dldGhlci5cbiAgXy56aXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXy51bnppcChhcmd1bWVudHMpO1xuICB9O1xuXG4gIC8vIENvbXBsZW1lbnQgb2YgXy56aXAuIFVuemlwIGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIGFuZCBncm91cHNcbiAgLy8gZWFjaCBhcnJheSdzIGVsZW1lbnRzIG9uIHNoYXJlZCBpbmRpY2VzXG4gIF8udW56aXAgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSAmJiBfLm1heChhcnJheSwgJ2xlbmd0aCcpLmxlbmd0aCB8fCAwO1xuICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IF8ucGx1Y2soYXJyYXksIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBsaXN0ICYmIGxpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgcmVzdWx0W2xpc3RbaV1dID0gdmFsdWVzW2ldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W2xpc3RbaV1bMF1dID0gbGlzdFtpXVsxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksXG4gIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4gIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYFxuICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLlxuICBfLmluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgaXNTb3J0ZWQpIHtcbiAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5ICYmIGFycmF5Lmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIGlzU29ydGVkID09ICdudW1iZXInKSB7XG4gICAgICBpID0gaXNTb3J0ZWQgPCAwID8gTWF0aC5tYXgoMCwgbGVuZ3RoICsgaXNTb3J0ZWQpIDogaXNTb3J0ZWQ7XG4gICAgfSBlbHNlIGlmIChpc1NvcnRlZCAmJiBsZW5ndGgpIHtcbiAgICAgIGkgPSBfLnNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTtcbiAgICAgIHJldHVybiBhcnJheVtpXSA9PT0gaXRlbSA/IGkgOiAtMTtcbiAgICB9XG4gICAgaWYgKGl0ZW0gIT09IGl0ZW0pIHtcbiAgICAgIHJldHVybiBfLmZpbmRJbmRleChzbGljZS5jYWxsKGFycmF5LCBpKSwgXy5pc05hTik7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIF8ubGFzdEluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgZnJvbSkge1xuICAgIHZhciBpZHggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gICAgaWYgKHR5cGVvZiBmcm9tID09ICdudW1iZXInKSB7XG4gICAgICBpZHggPSBmcm9tIDwgMCA/IGlkeCArIGZyb20gKyAxIDogTWF0aC5taW4oaWR4LCBmcm9tICsgMSk7XG4gICAgfVxuICAgIGlmIChpdGVtICE9PSBpdGVtKSB7XG4gICAgICByZXR1cm4gXy5maW5kTGFzdEluZGV4KHNsaWNlLmNhbGwoYXJyYXksIDAsIGlkeCksIF8uaXNOYU4pO1xuICAgIH1cbiAgICB3aGlsZSAoLS1pZHggPj0gMCkgaWYgKGFycmF5W2lkeF0gPT09IGl0ZW0pIHJldHVybiBpZHg7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpbmRJbmRleCBhbmQgZmluZExhc3RJbmRleCBmdW5jdGlvbnNcbiAgZnVuY3Rpb24gY3JlYXRlSW5kZXhGaW5kZXIoZGlyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgIT0gbnVsbCAmJiBhcnJheS5sZW5ndGg7XG4gICAgICB2YXIgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGluZGV4IG9uIGFuIGFycmF5LWxpa2UgdGhhdCBwYXNzZXMgYSBwcmVkaWNhdGUgdGVzdFxuICBfLmZpbmRJbmRleCA9IGNyZWF0ZUluZGV4RmluZGVyKDEpO1xuXG4gIF8uZmluZExhc3RJbmRleCA9IGNyZWF0ZUluZGV4RmluZGVyKC0xKTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgdmFyIHZhbHVlID0gaXRlcmF0ZWUob2JqKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbWlkXSkgPCB2YWx1ZSkgbG93ID0gbWlkICsgMTsgZWxzZSBoaWdoID0gbWlkO1xuICAgIH1cbiAgICByZXR1cm4gbG93O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2ZcbiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWVcbiAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS5cbiAgXy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkge1xuICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIHN0ZXAgPSBzdGVwIHx8IDE7XG5cbiAgICB2YXIgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCksIDApO1xuICAgIHZhciByYW5nZSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBsZW5ndGg7IGlkeCsrLCBzdGFydCArPSBzdGVwKSB7XG4gICAgICByYW5nZVtpZHhdID0gc3RhcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIChhaGVtKSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGV4ZWN1dGUgYSBmdW5jdGlvbiBhcyBhIGNvbnN0cnVjdG9yXG4gIC8vIG9yIGEgbm9ybWFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3ZpZGVkIGFyZ3VtZW50c1xuICB2YXIgZXhlY3V0ZUJvdW5kID0gZnVuY3Rpb24oc291cmNlRnVuYywgYm91bmRGdW5jLCBjb250ZXh0LCBjYWxsaW5nQ29udGV4dCwgYXJncykge1xuICAgIGlmICghKGNhbGxpbmdDb250ZXh0IGluc3RhbmNlb2YgYm91bmRGdW5jKSkgcmV0dXJuIHNvdXJjZUZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgdmFyIHNlbGYgPSBiYXNlQ3JlYXRlKHNvdXJjZUZ1bmMucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gc291cmNlRnVuYy5hcHBseShzZWxmLCBhcmdzKTtcbiAgICBpZiAoXy5pc09iamVjdChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLFxuICAvLyBvcHRpb25hbGx5KS4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmXG4gIC8vIGF2YWlsYWJsZS5cbiAgXy5iaW5kID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCkge1xuICAgIGlmIChuYXRpdmVCaW5kICYmIGZ1bmMuYmluZCA9PT0gbmF0aXZlQmluZCkgcmV0dXJuIG5hdGl2ZUJpbmQuYXBwbHkoZnVuYywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICBpZiAoIV8uaXNGdW5jdGlvbihmdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQmluZCBtdXN0IGJlIGNhbGxlZCBvbiBhIGZ1bmN0aW9uJyk7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCBjb250ZXh0LCB0aGlzLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICB9O1xuICAgIHJldHVybiBib3VuZDtcbiAgfTtcblxuICAvLyBQYXJ0aWFsbHkgYXBwbHkgYSBmdW5jdGlvbiBieSBjcmVhdGluZyBhIHZlcnNpb24gdGhhdCBoYXMgaGFkIHNvbWUgb2YgaXRzXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LiBfIGFjdHNcbiAgLy8gYXMgYSBwbGFjZWhvbGRlciwgYWxsb3dpbmcgYW55IGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cyB0byBiZSBwcmUtZmlsbGVkLlxuICBfLnBhcnRpYWwgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgYm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IDAsIGxlbmd0aCA9IGJvdW5kQXJncy5sZW5ndGg7XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFyZ3NbaV0gPSBib3VuZEFyZ3NbaV0gPT09IF8gPyBhcmd1bWVudHNbcG9zaXRpb24rK10gOiBib3VuZEFyZ3NbaV07XG4gICAgICB9XG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBhcmd1bWVudHMubGVuZ3RoKSBhcmdzLnB1c2goYXJndW1lbnRzW3Bvc2l0aW9uKytdKTtcbiAgICAgIHJldHVybiBleGVjdXRlQm91bmQoZnVuYywgYm91bmQsIHRoaXMsIHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9O1xuXG4gIC8vIEJpbmQgYSBudW1iZXIgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gUmVtYWluaW5nIGFyZ3VtZW50c1xuICAvLyBhcmUgdGhlIG1ldGhvZCBuYW1lcyB0byBiZSBib3VuZC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGFsbCBjYWxsYmFja3NcbiAgLy8gZGVmaW5lZCBvbiBhbiBvYmplY3QgYmVsb25nIHRvIGl0LlxuICBfLmJpbmRBbGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCwga2V5O1xuICAgIGlmIChsZW5ndGggPD0gMSkgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzJyk7XG4gICAgZm9yIChpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBhcmd1bWVudHNbaV07XG4gICAgICBvYmpba2V5XSA9IF8uYmluZChvYmpba2V5XSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBNZW1vaXplIGFuIGV4cGVuc2l2ZSBmdW5jdGlvbiBieSBzdG9yaW5nIGl0cyByZXN1bHRzLlxuICBfLm1lbW9pemUgPSBmdW5jdGlvbihmdW5jLCBoYXNoZXIpIHtcbiAgICB2YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIGNhY2hlID0gbWVtb2l6ZS5jYWNoZTtcbiAgICAgIHZhciBhZGRyZXNzID0gJycgKyAoaGFzaGVyID8gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrZXkpO1xuICAgICAgaWYgKCFfLmhhcyhjYWNoZSwgYWRkcmVzcykpIGNhY2hlW2FkZHJlc3NdID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGNhY2hlW2FkZHJlc3NdO1xuICAgIH07XG4gICAgbWVtb2l6ZS5jYWNoZSA9IHt9O1xuICAgIHJldHVybiBtZW1vaXplO1xuICB9O1xuXG4gIC8vIERlbGF5cyBhIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYW5kIHRoZW4gY2FsbHNcbiAgLy8gaXQgd2l0aCB0aGUgYXJndW1lbnRzIHN1cHBsaWVkLlxuICBfLmRlbGF5ID0gZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9LCB3YWl0KTtcbiAgfTtcblxuICAvLyBEZWZlcnMgYSBmdW5jdGlvbiwgc2NoZWR1bGluZyBpdCB0byBydW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXNcbiAgLy8gY2xlYXJlZC5cbiAgXy5kZWZlciA9IF8ucGFydGlhbChfLmRlbGF5LCBfLCAxKTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2VcbiAgLy8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuIE5vcm1hbGx5LCB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgcnVuXG4gIC8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjtcbiAgLy8gYnV0IGlmIHlvdSdkIGxpa2UgdG8gZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIHBhc3NcbiAgLy8gYHtsZWFkaW5nOiBmYWxzZX1gLiBUbyBkaXNhYmxlIGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSwgZGl0dG8uXG4gIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcbiAgICB2YXIgdGltZW91dCA9IG51bGw7XG4gICAgdmFyIHByZXZpb3VzID0gMDtcbiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBfLm5vdygpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93ID0gXy5ub3coKTtcbiAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxhc3QgPSBfLm5vdygpIC0gdGltZXN0YW1wO1xuXG4gICAgICBpZiAobGFzdCA8IHdhaXQgJiYgbGFzdCA+PSAwKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHRpbWVzdGFtcCA9IF8ubm93KCk7XG4gICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAgIGlmICghdGltZW91dCkgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsXG4gIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmRcbiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikge1xuICAgIHJldHVybiBfLnBhcnRpYWwod3JhcHBlciwgZnVuYyk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgcGFzc2VkLWluIHByZWRpY2F0ZS5cbiAgXy5uZWdhdGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIGEgbGlzdCBvZiBmdW5jdGlvbnMsIGVhY2hcbiAgLy8gY29uc3VtaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgZm9sbG93cy5cbiAgXy5jb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHN0YXJ0ID0gYXJncy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpID0gc3RhcnQ7XG4gICAgICB2YXIgcmVzdWx0ID0gYXJnc1tzdGFydF0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHdoaWxlIChpLS0pIHJlc3VsdCA9IGFyZ3NbaV0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBvbiBhbmQgYWZ0ZXIgdGhlIE50aCBjYWxsLlxuICBfLmFmdGVyID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCB1cCB0byAoYnV0IG5vdCBpbmNsdWRpbmcpIHRoZSBOdGggY2FsbC5cbiAgXy5iZWZvcmUgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xuICAgIHZhciBtZW1vO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRpbWVzID4gMCkge1xuICAgICAgICBtZW1vID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgaWYgKHRpbWVzIDw9IDEpIGZ1bmMgPSBudWxsO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGF0IG1vc3Qgb25lIHRpbWUsIG5vIG1hdHRlciBob3dcbiAgLy8gb2Z0ZW4geW91IGNhbGwgaXQuIFVzZWZ1bCBmb3IgbGF6eSBpbml0aWFsaXphdGlvbi5cbiAgXy5vbmNlID0gXy5wYXJ0aWFsKF8uYmVmb3JlLCAyKTtcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2BcbiAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIGFsbCB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuICBfLmFsbEtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQgb2YgdGhlIG9iamVjdFxuICAvLyBJbiBjb250cmFzdCB0byBfLm1hcCBpdCByZXR1cm5zIGFuIG9iamVjdFxuICBfLm1hcE9iamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9ICBfLmtleXMob2JqKSxcbiAgICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHRzID0ge30sXG4gICAgICAgICAgY3VycmVudEtleTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY3VycmVudEtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgICByZXN1bHRzW2N1cnJlbnRLZXldID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ29udmVydCBhbiBvYmplY3QgaW50byBhIGxpc3Qgb2YgYFtrZXksIHZhbHVlXWAgcGFpcnMuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07XG4gICAgfVxuICAgIHJldHVybiBwYWlycztcbiAgfTtcblxuICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG4gIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgXG4gIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzLnNvcnQoKTtcbiAgfTtcblxuICAvLyBFeHRlbmQgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIHByb3BlcnRpZXMgaW4gcGFzc2VkLWluIG9iamVjdChzKS5cbiAgXy5leHRlbmQgPSBjcmVhdGVBc3NpZ25lcihfLmFsbEtleXMpO1xuXG4gIC8vIEFzc2lnbnMgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIG93biBwcm9wZXJ0aWVzIGluIHRoZSBwYXNzZWQtaW4gb2JqZWN0KHMpXG4gIC8vIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduKVxuICBfLmV4dGVuZE93biA9IGNyZWF0ZUFzc2lnbmVyKF8ua2V5cyk7XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3Qga2V5IG9uIGFuIG9iamVjdCB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0XG4gIF8uZmluZEtleSA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopLCBrZXk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtrZXldLCBrZXksIG9iaikpIHJldHVybiBrZXk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIHdoaXRlbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ucGljayA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0ge30sIGtleTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICB2YXIga2V5cyA9IF8uYWxsS2V5cyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgaWYgKGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iaikpIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gZmxhdHRlbihhcmd1bWVudHMsIGZhbHNlLCBmYWxzZSwgMSk7XG4gICAgICBvYmogPSBuZXcgT2JqZWN0KG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoa2V5IGluIG9iaikgcmVzdWx0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IHdpdGhvdXQgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ub21pdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaXRlcmF0ZWUgPSBfLm5lZ2F0ZShpdGVyYXRlZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gXy5tYXAoZmxhdHRlbihhcmd1bWVudHMsIGZhbHNlLCBmYWxzZSwgMSksIFN0cmluZyk7XG4gICAgICBpdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKGtleXMsIGtleSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gXy5waWNrKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gIF8uZGVmYXVsdHMgPSBjcmVhdGVBc3NpZ25lcihfLmFsbEtleXMsIHRydWUpO1xuXG4gIC8vIENyZWF0ZSBhIChzaGFsbG93LWNsb25lZCkgZHVwbGljYXRlIG9mIGFuIG9iamVjdC5cbiAgXy5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7XG4gIH07XG5cbiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLlxuICAvLyBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiwgaW5cbiAgLy8gb3JkZXIgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGludGVybWVkaWF0ZSByZXN1bHRzIHdpdGhpbiB0aGUgY2hhaW4uXG4gIF8udGFwID0gZnVuY3Rpb24ob2JqLCBpbnRlcmNlcHRvcikge1xuICAgIGludGVyY2VwdG9yKG9iaik7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5pc01hdGNoID0gZnVuY3Rpb24ob2JqZWN0LCBhdHRycykge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKGF0dHJzKSwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gIWxlbmd0aDtcbiAgICB2YXIgb2JqID0gT2JqZWN0KG9iamVjdCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoYXR0cnNba2V5XSAhPT0gb2JqW2tleV0gfHwgIShrZXkgaW4gb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuXG4gIC8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgaXNFcXVhbGAuXG4gIHZhciBlcSA9IGZ1bmN0aW9uKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxuICAgIC8vIFNlZSB0aGUgW0hhcm1vbnkgYGVnYWxgIHByb3Bvc2FsXShodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmVnYWwpLlxuICAgIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gICAgLy8gQSBzdHJpY3QgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkgYmVjYXVzZSBgbnVsbCA9PSB1bmRlZmluZWRgLlxuICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gYSA9PT0gYjtcbiAgICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy5cbiAgICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkO1xuICAgIGlmIChiIGluc3RhbmNlb2YgXykgYiA9IGIuX3dyYXBwZWQ7XG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTtcbiAgICBpZiAoY2xhc3NOYW1lICE9PSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncyBmb3IgY29tcGFyaXNvbiAoTm90ZTogJycgKyAvYS9pID09PSAnL2EvaScpXG4gICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgICAvLyBQcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCB3cmFwcGVycyBhcmUgZXF1aXZhbGVudDsgdGh1cywgYFwiNVwiYCBpc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFwiNVwiKWAuXG4gICAgICAgIHJldHVybiAnJyArIGEgPT09ICcnICsgYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOXG4gICAgICAgIGlmICgrYSAhPT0gK2EpIHJldHVybiArYiAhPT0gK2I7XG4gICAgICAgIC8vIEFuIGBlZ2FsYCBjb21wYXJpc29uIGlzIHBlcmZvcm1lZCBmb3Igb3RoZXIgbnVtZXJpYyB2YWx1ZXMuXG4gICAgICAgIHJldHVybiArYSA9PT0gMCA/IDEgLyArYSA9PT0gMSAvIGIgOiArYSA9PT0gK2I7XG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgICByZXR1cm4gK2EgPT09ICtiO1xuICAgIH1cblxuICAgIHZhciBhcmVBcnJheXMgPSBjbGFzc05hbWUgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgaWYgKCFhcmVBcnJheXMpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAvLyBPYmplY3RzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWl2YWxlbnQsIGJ1dCBgT2JqZWN0YHMgb3IgYEFycmF5YHNcbiAgICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XG4gICAgICBpZiAoYUN0b3IgIT09IGJDdG9yICYmICEoXy5pc0Z1bmN0aW9uKGFDdG9yKSAmJiBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoJ2NvbnN0cnVjdG9yJyBpbiBhICYmICdjb25zdHJ1Y3RvcicgaW4gYikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljXG4gICAgLy8gc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMywgYWJzdHJhY3Qgb3BlcmF0aW9uIGBKT2AuXG4gICAgXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW107XG4gICAgYlN0YWNrID0gYlN0YWNrIHx8IFtdO1xuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG5cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoYXJlQXJyYXlzKSB7XG4gICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgYVN0YWNrLCBiU3RhY2spKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgdmFyIGtleXMgPSBfLmtleXMoYSksIGtleTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgaWYgKF8ua2V5cyhiKS5sZW5ndGggIT09IGxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF07XG4gICAgICAgIGlmICghKF8uaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpO1xuICAgIGJTdGFjay5wb3AoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSAmJiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopIHx8IF8uaXNBcmd1bWVudHMob2JqKSkpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xuICAgIHJldHVybiBfLmtleXMob2JqKS5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG4gIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAsIGlzRXJyb3IuXG4gIF8uZWFjaChbJ0FyZ3VtZW50cycsICdGdW5jdGlvbicsICdTdHJpbmcnLCAnTnVtYmVyJywgJ0RhdGUnLCAnUmVnRXhwJywgJ0Vycm9yJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBfWydpcycgKyBuYW1lXSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSA8IDkpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBzb21lIHR5cGVvZiBidWdzIGluIG9sZCB2OCxcbiAgLy8gSUUgMTEgKCMxNjIxKSwgYW5kIGluIFNhZmFyaSA4ICgjMTkyOSkuXG4gIGlmICh0eXBlb2YgLy4vICE9ICdmdW5jdGlvbicgJiYgdHlwZW9mIEludDhBcnJheSAhPSAnb2JqZWN0Jykge1xuICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJyB8fCBmYWxzZTtcbiAgICB9O1xuICB9XG5cbiAgLy8gSXMgYSBnaXZlbiBvYmplY3QgYSBmaW5pdGUgbnVtYmVyP1xuICBfLmlzRmluaXRlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7XG4gIH07XG5cbiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gPyAoTmFOIGlzIHRoZSBvbmx5IG51bWJlciB3aGljaCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYpLlxuICBfLmlzTmFOID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBvYmogIT09ICtvYmo7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/XG4gIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSBudWxsO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdGVlcy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9ucy4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH07XG5cbiAgXy5ub29wID0gZnVuY3Rpb24oKXt9O1xuXG4gIF8ucHJvcGVydHkgPSBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqID09IG51bGwgPyB2b2lkIDAgOiBvYmpba2V5XTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlcyBhIGZ1bmN0aW9uIGZvciBhIGdpdmVuIG9iamVjdCB0aGF0IHJldHVybnMgYSBnaXZlbiBwcm9wZXJ0eS5cbiAgXy5wcm9wZXJ0eU9mID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PSBudWxsID8gZnVuY3Rpb24oKXt9IDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgcHJlZGljYXRlIGZvciBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgXG4gIC8vIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLm1hdGNoZXIgPSBfLm1hdGNoZXMgPSBmdW5jdGlvbihhdHRycykge1xuICAgIGF0dHJzID0gXy5leHRlbmRPd24oe30sIGF0dHJzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gXy5pc01hdGNoKG9iaiwgYXR0cnMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG4gIF8udGltZXMgPSBmdW5jdGlvbihuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG4gIF8ubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuXG4gICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZXNjYXBlTWFwID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjeDI3OycsXG4gICAgJ2AnOiAnJiN4NjA7J1xuICB9O1xuICB2YXIgdW5lc2NhcGVNYXAgPSBfLmludmVydChlc2NhcGVNYXApO1xuXG4gIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbiAgdmFyIGNyZWF0ZUVzY2FwZXIgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWFwW21hdGNoXTtcbiAgICB9O1xuICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZFxuICAgIHZhciBzb3VyY2UgPSAnKD86JyArIF8ua2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJztcbiAgICB2YXIgdGVzdFJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UpO1xuICAgIHZhciByZXBsYWNlUmVnZXhwID0gUmVnRXhwKHNvdXJjZSwgJ2cnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcgPT0gbnVsbCA/ICcnIDogJycgKyBzdHJpbmc7XG4gICAgICByZXR1cm4gdGVzdFJlZ2V4cC50ZXN0KHN0cmluZykgPyBzdHJpbmcucmVwbGFjZShyZXBsYWNlUmVnZXhwLCBlc2NhcGVyKSA6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBfLmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIoZXNjYXBlTWFwKTtcbiAgXy51bmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIodW5lc2NhcGVNYXApO1xuXG4gIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgYHByb3BlcnR5YCBpcyBhIGZ1bmN0aW9uIHRoZW4gaW52b2tlIGl0IHdpdGggdGhlXG4gIC8vIGBvYmplY3RgIGFzIGNvbnRleHQ7IG90aGVyd2lzZSwgcmV0dXJuIGl0LlxuICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGZhbGxiYWNrKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB2b2lkIDAgOiBvYmplY3RbcHJvcGVydHldO1xuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICB2YWx1ZSA9IGZhbGxiYWNrO1xuICAgIH1cbiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4gIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICBfLnVuaXF1ZUlkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGVcbiAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgZXZhbHVhdGUgICAgOiAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgIGludGVycG9sYXRlIDogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlICAgICAgOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xuICB9O1xuXG4gIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuICAvLyBndWFyYW50ZWVkIG5vdCB0byBtYXRjaC5cbiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbiAgLy8gc3RyaW5nIGxpdGVyYWwuXG4gIHZhciBlc2NhcGVzID0ge1xuICAgIFwiJ1wiOiAgICAgIFwiJ1wiLFxuICAgICdcXFxcJzogICAgICdcXFxcJyxcbiAgICAnXFxyJzogICAgICdyJyxcbiAgICAnXFxuJzogICAgICduJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgdmFyIGVzY2FwZXIgPSAvXFxcXHwnfFxccnxcXG58XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgdmFyIGVzY2FwZUNoYXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbiAgfTtcblxuICAvLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuICAvLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xuICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cbiAgICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChbXG4gICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShtYXRjaGVyLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlLCBpbnRlcnBvbGF0ZSwgZXZhbHVhdGUsIG9mZnNldCkge1xuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVyLCBlc2NhcGVDaGFyKTtcbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChldmFsdWF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGUgKyBcIlxcbl9fcCs9J1wiO1xuICAgICAgfVxuXG4gICAgICAvLyBBZG9iZSBWTXMgbmVlZCB0aGUgbWF0Y2ggcmV0dXJuZWQgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBvZmZlc3QuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgIC8vIElmIGEgdmFyaWFibGUgaXMgbm90IHNwZWNpZmllZCwgcGxhY2UgZGF0YSB2YWx1ZXMgaW4gbG9jYWwgc2NvcGUuXG4gICAgaWYgKCFzZXR0aW5ncy52YXJpYWJsZSkgc291cmNlID0gJ3dpdGgob2JqfHx7fSl7XFxuJyArIHNvdXJjZSArICd9XFxuJztcblxuICAgIHNvdXJjZSA9IFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICAgIFwicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXG5cIiArXG4gICAgICBzb3VyY2UgKyAncmV0dXJuIF9fcDtcXG4nO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICAgIH07XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gICAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaic7XG4gICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy8gQWRkIGEgXCJjaGFpblwiIGZ1bmN0aW9uLiBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBfKG9iaik7XG4gICAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgLy8gT09QXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxuICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZVxuICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBvYmopIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgXy5lYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgXy5taXhpbihfKTtcblxuICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07XG4gICAgICByZXR1cm4gcmVzdWx0KHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gIF8ucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gIH07XG5cbiAgLy8gUHJvdmlkZSB1bndyYXBwaW5nIHByb3h5IGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9uc1xuICAvLyBzdWNoIGFzIGFyaXRobWV0aWMgYW5kIEpTT04gc3RyaW5naWZpY2F0aW9uLlxuICBfLnByb3RvdHlwZS52YWx1ZU9mID0gXy5wcm90b3R5cGUudG9KU09OID0gXy5wcm90b3R5cGUudmFsdWU7XG4gIFxuICBfLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnJyArIHRoaXMuX3dyYXBwZWQ7XG4gIH07XG5cbiAgLy8gQU1EIHJlZ2lzdHJhdGlvbiBoYXBwZW5zIGF0IHRoZSBlbmQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBBTUQgbG9hZGVyc1xuICAvLyB0aGF0IG1heSBub3QgZW5mb3JjZSBuZXh0LXR1cm4gc2VtYW50aWNzIG9uIG1vZHVsZXMuIEV2ZW4gdGhvdWdoIGdlbmVyYWxcbiAgLy8gcHJhY3RpY2UgZm9yIEFNRCByZWdpc3RyYXRpb24gaXMgdG8gYmUgYW5vbnltb3VzLCB1bmRlcnNjb3JlIHJlZ2lzdGVyc1xuICAvLyBhcyBhIG5hbWVkIG1vZHVsZSBiZWNhdXNlLCBsaWtlIGpRdWVyeSwgaXQgaXMgYSBiYXNlIGxpYnJhcnkgdGhhdCBpc1xuICAvLyBwb3B1bGFyIGVub3VnaCB0byBiZSBidW5kbGVkIGluIGEgdGhpcmQgcGFydHkgbGliLCBidXQgbm90IGJlIHBhcnQgb2ZcbiAgLy8gYW4gQU1EIGxvYWQgcmVxdWVzdC4gVGhvc2UgY2FzZXMgY291bGQgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBhblxuICAvLyBhbm9ueW1vdXMgZGVmaW5lKCkgaXMgY2FsbGVkIG91dHNpZGUgb2YgYSBsb2FkZXIgcmVxdWVzdC5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZSgndW5kZXJzY29yZScsIFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwibW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9e1xuICBcIm5hbWVcIjogXCJyZWFkaXVtXCIsXG4gIFwidmVyc2lvblwiOiBcIjAuMC4xXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJyZWFkaXVtXCIsXG4gIFwibWFpblwiOiBcInNyYy9pbmRleC5qc1wiLFxuICBcInJlYWRtZVwiOiBcIlJFQURNRS5tZFwiLFxuICBcImtleXdvcmRzXCI6IFtcInJlYWRpdW1cIiwgXCJobWhcIl0sXG4gIFwicmVwb3NpdG9yeVwiOiBcIlRPRE9cIixcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYmFja2JvbmVcIjogXCJeMS4xLjJcIixcbiAgICBcImVwdWItY2ZpXCI6IFwiXjAuMC4xXCIsXG4gICAgXCJqcXVlcnlcIjogXCJeMi4xLjNcIixcbiAgICBcInJhbmd5XCI6IFwiXjEuMy4wLWFscGhhLjIwMTQwOTIxXCIsXG4gICAgXCJ1bmRlcnNjb3JlXCI6IFwiXjEuNy4wXCIsXG4gICAgXCJVUklqc1wiOiBcIl4xLjE0LjFcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJicm93c2VyaWZ5XCI6IFwiXjguMS4xXCIsXG4gICAgXCJlbnZpZnlcIjogXCJeMy4yLjBcIixcbiAgICBcImxpdmVyZWxvYWRpZnlcIjogXCJeMi4wLjBcIixcbiAgICBcIm5vZGUtc3RhdGljXCI6IFwiXjAuNy42XCIsXG4gICAgXCJ1Z2xpZnktanNcIjogXCJ+Mi40LjE2XCIsXG4gICAgXCJ3YXRjaGlmeVwiOiBcIl4yLjIuMVwiXG4gIH0sXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJidWlsZFwiOiAgICAgIFwiTk9ERV9FTlY9cHJvZHVjdGlvbiBicm93c2VyaWZ5IHNyYy9hcHAuanMgPiAuL2Rpc3QvcmVhZGl1bS5qcyAmJiB1Z2xpZnlqcyAuL2Rpc3QvcmVhZGl1bS5qcyAtY20gPiAuL2Rpc3QvcmVhZGl1bS5taW4uanNcIixcbiAgICBcImxpdmVyZWxvYWRcIjogXCJsaXZlcmVsb2FkaWZ5IC4vcHVibGljXCIsXG4gICAgXCJzdGFydFwiOiBcIm5wbSBydW4gd2F0Y2ggJiBucG0gcnVuIGxpdmVyZWxvYWQgJiBucG0gcnVuIHN0YXRpY1wiLFxuICAgIFwic3RhdGljXCI6IFwic3RhdGljIC4vcHVibGljIC0tcG9ydCAzMDAwXCIsXG4gICAgXCJ0ZXN0XCI6IFwiamVzdFwiLFxuICAgIFwid2F0Y2hcIjogXCJ3YXRjaGlmeSAtbyAuL3B1YmxpYy9yZWFkaXVtLmpzIC12IC1kIHNyYy9hcHAuanNcIlxuICB9LFxuICBcImF1dGhvclwiOiBcIkRhcsOtbyBKYXZpZXIgQ3JhdmVybyA8ZGFyaW8uY3JhdmVyb0BobWhjby5jb20+XCIsXG4gIFwibGljZW5zZVwiOiBcIlRCRFwiLFxuICBcImJyb3dzZXJpZnlcIjoge1xuICAgIFwidHJhbnNmb3JtXCI6IFtcbiAgICAgIFwiZW52aWZ5XCJcbiAgICBdXG4gIH1cbn1cbiIsInZhciBSZWFkaXVtID0gcmVxdWlyZSgnLi9pbmRleCcpXG5cbnZhciByZWFkZXIgPSBuZXcgUmVhZGl1bS5SZWFkZXIoe1xuICB1c2VTaW1wbGVMb2FkZXI6IHRydWVcbn0sIHtcbiAgZWw6ICcjcmVhZGl1bS1jb250YWluZXInXG59KVxuXG4vLyAgaHR0cHM6Ly9naXRodWIuY29tL3JlYWRpdW0vcmVhZGl1bS1qcy12aWV3ZXIvYmxvYi9tYXN0ZXIvbGliL0VwdWJSZWFkZXIuanMjTDY0My1MNzkyXG4vLyAgUmVhZGl1bS5SZWFkZXIucmVhZGl1bU9wdGlvbnMge1xuLy8gICAgdXNlU2ltcGxlTG9hZGVyOiB0cnVlLCAvKiB0cnVlIHRvIGxvYWQgZnJvbSBhbiBleHBhbmRlZCBlUHViOyBmYWxzZSB0byB1bnBhY2sgaXQgb24gdGhlIGZseSAqL1xuLy8gICAganNMaWJSb290OiAnL3BhdGgvdG8vdGhpcmQvcGFydHknLFxuLy8gICAgb3BlbkJvb2tPcHRpb25zOiB7fSAvKiBUT0RPIERlZmluZSAqL1xuLy8gIH1cbi8vXG4vLyAgUmVhZGl1bS5SZWFkZXIucmVhZGVyT3B0aW9ucyB7XG4vLyAgICBhbm5vdGF0aW9uc0NTU1VybDogJy9wYXRoL3RvL2ZpbGUuY3NzJyxcbi8vICAgIGVsOiAnI2lkJywgLyogRE9NIHNlbGVjdG9yICovXG4vLyAgfVxuXG5yZWFkZXIub3BlblBhY2thZ2VEb2N1bWVudCgnZGVtby1ib29rJywgZnVuY3Rpb24gb25PcGVuUGFja2FnZURvY3VtZW50KHBhY2thZ2VEb2N1bWVudCwgb3B0aW9ucykge1xuICBjb25zb2xlLmxvZygnb3BlblBhY2thZ2VEb2N1bWVudCcsIHBhY2thZ2VEb2N1bWVudCwgb3B0aW9ucylcblxuICBwYWNrYWdlRG9jdW1lbnQuZ2VuZXJhdGVUb2NMaXN0RE9NKGZ1bmN0aW9uKGh0bWwpIHtcbiAgICB3aW5kb3cucGFja2FnZURvY3VtZW50SHRtbCA9IGh0bWw7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvYycpLmlubmVySFRNTCA9IGh0bWwuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5pbm5lckhUTUw7XG4gIH0pXG5cbiAgaWYgKHByb2Nlc3MuZW52Lm5vZGVfZW52ICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3aW5kb3cucmVhZGl1bVBhY2thZ2VEb2N1bWVudCA9IHBhY2thZ2VEb2N1bWVudDtcbiAgICB3aW5kb3cucmVhZGl1bU9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG59KVxuXG5pZiAocHJvY2Vzcy5lbnYubm9kZV9lbnYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3aW5kb3cuUmVhZGl1bSA9IFJlYWRpdW1cbiAgd2luZG93LnJlYWRpdW1SZWFkZXIgPSByZWFkZXI7XG59IiwidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBCb29rbWFya1ZpZXcgPSByZXF1aXJlKCcuL2Jvb2ttYXJrLXZpZXcnKVxudmFyIEhpZ2hsaWdodEdyb3VwID0gcmVxdWlyZSgnLi9oaWdobGlnaHQtZ3JvdXAnKVxudmFyIEltYWdlQW5ub3RhdGlvbiA9IHJlcXVpcmUoJy4vaW1hZ2UtYW5ub3RhdGlvbicpXG52YXIgVW5kZXJsaW5lR3JvdXAgPSByZXF1aXJlKCcuL3VuZGVybGluZS1ncm91cCcpXG5cbnZhciBBbm5vdGF0aW9ucyA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG5cbiAgZGVmYXVsdHM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBcImJvb2ttYXJrVmlld3NcIjogW10sXG4gICAgICBcImhpZ2hsaWdodHNcIjogW10sXG4gICAgICBcIm1hcmtlcnNcIjoge30sXG4gICAgICBcInVuZGVybGluZXNcIjogW10sXG4gICAgICBcImltYWdlQW5ub3RhdGlvbnNcIjogW10sXG4gICAgICBcImFubm90YXRpb25IYXNoXCI6IHt9LFxuICAgICAgXCJvZmZzZXRUb3BBZGRpdGlvblwiOiAwLFxuICAgICAgXCJvZmZzZXRMZWZ0QWRkaXRpb25cIjogMCxcbiAgICAgIFwicmVhZGVyQm91bmRFbGVtZW50XCI6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0sXG5cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge30sXG5cblxuICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICBfLmVhY2godGhpcy5nZXQoXCJoaWdobGlnaHRzXCIpLCBmdW5jdGlvbihoaWdobGlnaHRHcm91cCkge1xuICAgICAgaGlnaGxpZ2h0R3JvdXAucmVtb3ZlKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVkcmF3QW5ub3RhdGlvbnM6IGZ1bmN0aW9uKG9mZnNldFRvcCwgb2Zmc2V0TGVmdCkge1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIC8vIEhpZ2hsaWdodHNcbiAgICBfLmVhY2godGhpcy5nZXQoXCJoaWdobGlnaHRzXCIpLCBmdW5jdGlvbihoaWdobGlnaHRHcm91cCkge1xuICAgICAgaGlnaGxpZ2h0R3JvdXAucmVzZXRIaWdobGlnaHRzKHRoYXQuZ2V0KFwicmVhZGVyQm91bmRFbGVtZW50XCIpLCBvZmZzZXRUb3AsIG9mZnNldExlZnQpO1xuICAgIH0pO1xuXG4gICAgLy8gQm9va21hcmtzXG4gICAgXy5lYWNoKHRoaXMuZ2V0KFwiYm9va21hcmtWaWV3c1wiKSwgZnVuY3Rpb24oYm9va21hcmtWaWV3KSB7XG4gICAgICBib29rbWFya1ZpZXcucmVzZXRCb29rbWFyayhvZmZzZXRUb3AsIG9mZnNldExlZnQpO1xuICAgIH0pO1xuXG4gICAgLy8gVW5kZXJsaW5lc1xuICAgIF8uZWFjaCh0aGlzLmdldChcInVuZGVybGluZXNcIiksIGZ1bmN0aW9uKHVuZGVybGluZUdyb3VwKSB7XG4gICAgICB1bmRlcmxpbmVHcm91cC5yZXNldFVuZGVybGluZXModGhhdC5nZXQoXCJyZWFkZXJCb3VuZEVsZW1lbnRcIiksIG9mZnNldFRvcCwgb2Zmc2V0TGVmdCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0Qm9va21hcms6IGZ1bmN0aW9uKGlkKSB7XG5cbiAgICB2YXIgYm9va21hcmtWaWV3ID0gdGhpcy5nZXQoXCJhbm5vdGF0aW9uSGFzaFwiKVtpZF07XG4gICAgaWYgKGJvb2ttYXJrVmlldykge1xuICAgICAgcmV0dXJuIGJvb2ttYXJrVmlldy5ib29rbWFyay50b0luZm8oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0SGlnaGxpZ2h0OiBmdW5jdGlvbihpZCkge1xuXG4gICAgdmFyIGhpZ2hsaWdodCA9IHRoaXMuZ2V0KFwiYW5ub3RhdGlvbkhhc2hcIilbaWRdO1xuICAgIGlmIChoaWdobGlnaHQpIHtcbiAgICAgIHJldHVybiBoaWdobGlnaHQudG9JbmZvKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuXG4gIGdldFVuZGVybGluZTogZnVuY3Rpb24oaWQpIHtcblxuICAgIHZhciB1bmRlcmxpbmUgPSB0aGlzLmdldChcImFubm90YXRpb25IYXNoXCIpW2lkXTtcbiAgICBpZiAodW5kZXJsaW5lKSB7XG4gICAgICByZXR1cm4gdW5kZXJsaW5lLnRvSW5mbygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcblxuICBnZXRCb29rbWFya3M6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGJvb2ttYXJrcyA9IFtdO1xuICAgIF8uZWFjaCh0aGlzLmdldChcImJvb2ttYXJrVmlld3NcIiksIGZ1bmN0aW9uKGJvb2ttYXJrVmlldykge1xuXG4gICAgICBib29rbWFya3MucHVzaChib29rbWFya1ZpZXcuYm9va21hcmsudG9JbmZvKCkpO1xuICAgIH0pO1xuICAgIHJldHVybiBib29rbWFya3M7XG4gIH0sXG5cbiAgZ2V0SGlnaGxpZ2h0czogZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgaGlnaGxpZ2h0cyA9IFtdO1xuICAgIF8uZWFjaCh0aGlzLmdldChcImhpZ2hsaWdodHNcIiksIGZ1bmN0aW9uKGhpZ2hsaWdodCkge1xuXG4gICAgICBoaWdobGlnaHRzLnB1c2goaGlnaGxpZ2h0LnRvSW5mbygpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaGlnaGxpZ2h0cztcbiAgfSxcblxuICBnZXRVbmRlcmxpbmVzOiBmdW5jdGlvbigpIHtcblxuICAgIHZhciB1bmRlcmxpbmVzID0gW107XG4gICAgXy5lYWNoKHRoaXMuZ2V0KFwidW5kZXJsaW5lc1wiKSwgZnVuY3Rpb24odW5kZXJsaW5lKSB7XG5cbiAgICAgIHVuZGVybGluZXMucHVzaCh1bmRlcmxpbmUudG9JbmZvKCkpO1xuICAgIH0pO1xuICAgIHJldHVybiB1bmRlcmxpbmVzO1xuICB9LFxuXG4gIGdldEltYWdlQW5ub3RhdGlvbnM6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGltYWdlQW5ub3RhdGlvbnMgPSBbXTtcbiAgICBfLmVhY2godGhpcy5nZXQoXCJpbWFnZUFubm90YXRpb25zXCIpLCBmdW5jdGlvbihpbWFnZUFubm90YXRpb24pIHtcblxuICAgICAgaW1hZ2VBbm5vdGF0aW9ucy5wdXNoKGltYWdlQW5ub3RhdGlvbi50b0luZm8oKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGltYWdlQW5ub3RhdGlvbnM7XG4gIH0sXG5cbiAgYWRkQm9va21hcms6IGZ1bmN0aW9uKENGSSwgdGFyZ2V0RWxlbWVudCwgYW5ub3RhdGlvbklkLCBvZmZzZXRUb3AsIG9mZnNldExlZnQsIHR5cGUpIHtcblxuICAgIGlmICghb2Zmc2V0VG9wKSB7XG4gICAgICBvZmZzZXRUb3AgPSB0aGlzLmdldChcIm9mZnNldFRvcEFkZGl0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAoIW9mZnNldExlZnQpIHtcbiAgICAgIG9mZnNldExlZnQgPSB0aGlzLmdldChcIm9mZnNldExlZnRBZGRpdGlvblwiKTtcbiAgICB9XG5cbiAgICBhbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uSWQudG9TdHJpbmcoKTtcbiAgICB0aGlzLnZhbGlkYXRlQW5ub3RhdGlvbklkKGFubm90YXRpb25JZCk7XG5cbiAgICB2YXIgYm9va21hcmtWaWV3ID0gbmV3IEJvb2ttYXJrVmlldyh7XG4gICAgICBDRkk6IENGSSxcbiAgICAgIHRhcmdldEVsZW1lbnQ6IHRhcmdldEVsZW1lbnQsXG4gICAgICBvZmZzZXRUb3BBZGRpdGlvbjogb2Zmc2V0VG9wLFxuICAgICAgb2Zmc2V0TGVmdEFkZGl0aW9uOiBvZmZzZXRMZWZ0LFxuICAgICAgaWQ6IGFubm90YXRpb25JZC50b1N0cmluZygpLFxuICAgICAgYmJQYWdlU2V0VmlldzogdGhpcy5nZXQoXCJiYlBhZ2VTZXRWaWV3XCIpLFxuICAgICAgdHlwZTogdHlwZVxuICAgIH0pO1xuICAgIHRoaXMuZ2V0KFwiYW5ub3RhdGlvbkhhc2hcIilbYW5ub3RhdGlvbklkXSA9IGJvb2ttYXJrVmlldztcbiAgICB0aGlzLmdldChcImJvb2ttYXJrVmlld3NcIikucHVzaChib29rbWFya1ZpZXcpO1xuICAgICQodGhpcy5nZXQoXCJyZWFkZXJCb3VuZEVsZW1lbnRcIikpLmFwcGVuZChib29rbWFya1ZpZXcucmVuZGVyKCkpO1xuICB9LFxuXG4gIHJlbW92ZUhpZ2hsaWdodDogZnVuY3Rpb24oYW5ub3RhdGlvbklkKSB7XG4gICAgdmFyIGFubm90YXRpb25IYXNoID0gdGhpcy5nZXQoXCJhbm5vdGF0aW9uSGFzaFwiKTtcbiAgICB2YXIgaGlnaGxpZ2h0cyA9IHRoaXMuZ2V0KFwiaGlnaGxpZ2h0c1wiKTtcbiAgICB2YXIgbWFya2VycyA9IHRoaXMuZ2V0KFwibWFya2Vyc1wiKTtcblxuICAgIGlmICghbWFya2Vyc1thbm5vdGF0aW9uSWRdKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIHN0YXJ0TWFya2VyID0gbWFya2Vyc1thbm5vdGF0aW9uSWRdLnN0YXJ0TWFya2VyO1xuICAgIHZhciBlbmRNYXJrZXIgPSBtYXJrZXJzW2Fubm90YXRpb25JZF0uZW5kTWFya2VyO1xuXG4gICAgc3RhcnRNYXJrZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdGFydE1hcmtlcik7XG4gICAgZW5kTWFya2VyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZW5kTWFya2VyKTtcblxuICAgIGRlbGV0ZSBtYXJrZXJzW2Fubm90YXRpb25JZF07XG5cbiAgICBkZWxldGUgYW5ub3RhdGlvbkhhc2hbYW5ub3RhdGlvbklkXTtcblxuICAgIGhpZ2hsaWdodHMgPSBfLnJlamVjdChoaWdobGlnaHRzLFxuICAgICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmIChvYmouaWQgPT0gYW5ub3RhdGlvbklkKSB7XG4gICAgICAgICAgb2JqLmRlc3Ryb3lDdXJyZW50SGlnaGxpZ2h0cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG5cblxuICAgIHRoaXMuc2V0KFwiaGlnaGxpZ2h0c1wiLCBoaWdobGlnaHRzKTtcbiAgfSxcblxuICBhZGRIaWdobGlnaHQ6IGZ1bmN0aW9uKENGSSwgaGlnaGxpZ2h0ZWRUZXh0Tm9kZXMsIGFubm90YXRpb25JZCwgb2Zmc2V0VG9wLCBvZmZzZXRMZWZ0LCBzdGFydE1hcmtlciwgZW5kTWFya2VyLCBzdHlsZXMpIHtcbiAgICBpZiAoIW9mZnNldFRvcCkge1xuICAgICAgb2Zmc2V0VG9wID0gdGhpcy5nZXQoXCJvZmZzZXRUb3BBZGRpdGlvblwiKTtcbiAgICB9XG4gICAgaWYgKCFvZmZzZXRMZWZ0KSB7XG4gICAgICBvZmZzZXRMZWZ0ID0gdGhpcy5nZXQoXCJvZmZzZXRMZWZ0QWRkaXRpb25cIik7XG4gICAgfVxuXG4gICAgYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbklkLnRvU3RyaW5nKCk7XG4gICAgdGhpcy52YWxpZGF0ZUFubm90YXRpb25JZChhbm5vdGF0aW9uSWQpO1xuXG4gICAgdmFyIGhpZ2hsaWdodEdyb3VwID0gbmV3IEhpZ2hsaWdodEdyb3VwKHtcbiAgICAgIENGSTogQ0ZJLFxuICAgICAgc2VsZWN0ZWROb2RlczogaGlnaGxpZ2h0ZWRUZXh0Tm9kZXMsXG4gICAgICBvZmZzZXRUb3BBZGRpdGlvbjogb2Zmc2V0VG9wLFxuICAgICAgb2Zmc2V0TGVmdEFkZGl0aW9uOiBvZmZzZXRMZWZ0LFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBpZDogYW5ub3RhdGlvbklkLFxuICAgICAgYmJQYWdlU2V0VmlldzogdGhpcy5nZXQoXCJiYlBhZ2VTZXRWaWV3XCIpLFxuICAgICAgc2NhbGU6IHRoaXMuZ2V0KFwic2NhbGVcIilcbiAgICB9KTtcbiAgICB0aGlzLmdldChcImFubm90YXRpb25IYXNoXCIpW2Fubm90YXRpb25JZF0gPSBoaWdobGlnaHRHcm91cDtcbiAgICB0aGlzLmdldChcImhpZ2hsaWdodHNcIikucHVzaChoaWdobGlnaHRHcm91cCk7XG4gICAgdGhpcy5nZXQoXCJtYXJrZXJzXCIpW2Fubm90YXRpb25JZF0gPSB7XG4gICAgICBcInN0YXJ0TWFya2VyXCI6IHN0YXJ0TWFya2VyLFxuICAgICAgXCJlbmRNYXJrZXJcIjogZW5kTWFya2VyXG4gICAgfTtcbiAgICBoaWdobGlnaHRHcm91cC5yZW5kZXJIaWdobGlnaHRzKHRoaXMuZ2V0KFwicmVhZGVyQm91bmRFbGVtZW50XCIpKTtcbiAgfSxcblxuICBhZGRVbmRlcmxpbmU6IGZ1bmN0aW9uKENGSSwgdW5kZXJsaW5lZFRleHROb2RlcywgYW5ub3RhdGlvbklkLCBvZmZzZXRUb3AsIG9mZnNldExlZnQsIHN0eWxlcykge1xuXG4gICAgaWYgKCFvZmZzZXRUb3ApIHtcbiAgICAgIG9mZnNldFRvcCA9IHRoaXMuZ2V0KFwib2Zmc2V0VG9wQWRkaXRpb25cIik7XG4gICAgfVxuICAgIGlmICghb2Zmc2V0TGVmdCkge1xuICAgICAgb2Zmc2V0TGVmdCA9IHRoaXMuZ2V0KFwib2Zmc2V0TGVmdEFkZGl0aW9uXCIpO1xuICAgIH1cblxuICAgIGFubm90YXRpb25JZCA9IGFubm90YXRpb25JZC50b1N0cmluZygpO1xuICAgIHRoaXMudmFsaWRhdGVBbm5vdGF0aW9uSWQoYW5ub3RhdGlvbklkKTtcblxuICAgIHZhciB1bmRlcmxpbmVHcm91cCA9IG5ldyBVbmRlcmxpbmVHcm91cCh7XG4gICAgICBDRkk6IENGSSxcbiAgICAgIHNlbGVjdGVkTm9kZXM6IHVuZGVybGluZWRUZXh0Tm9kZXMsXG4gICAgICBvZmZzZXRUb3BBZGRpdGlvbjogb2Zmc2V0VG9wLFxuICAgICAgb2Zmc2V0TGVmdEFkZGl0aW9uOiBvZmZzZXRMZWZ0LFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBpZDogYW5ub3RhdGlvbklkLFxuICAgICAgYmJQYWdlU2V0VmlldzogdGhpcy5nZXQoXCJiYlBhZ2VTZXRWaWV3XCIpXG4gICAgfSk7XG4gICAgdGhpcy5nZXQoXCJhbm5vdGF0aW9uSGFzaFwiKVthbm5vdGF0aW9uSWRdID0gdW5kZXJsaW5lR3JvdXA7XG4gICAgdGhpcy5nZXQoXCJ1bmRlcmxpbmVzXCIpLnB1c2godW5kZXJsaW5lR3JvdXApO1xuICAgIHVuZGVybGluZUdyb3VwLnJlbmRlclVuZGVybGluZXModGhpcy5nZXQoXCJyZWFkZXJCb3VuZEVsZW1lbnRcIikpO1xuICB9LFxuXG4gIGFkZEltYWdlQW5ub3RhdGlvbjogZnVuY3Rpb24oQ0ZJLCBpbWFnZU5vZGUsIGFubm90YXRpb25JZCkge1xuXG4gICAgYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbklkLnRvU3RyaW5nKCk7XG4gICAgdGhpcy52YWxpZGF0ZUFubm90YXRpb25JZChhbm5vdGF0aW9uSWQpO1xuXG4gICAgdmFyIGltYWdlQW5ub3RhdGlvbiA9IG5ldyBJbWFnZUFubm90YXRpb24oe1xuICAgICAgQ0ZJOiBDRkksXG4gICAgICBpbWFnZU5vZGU6IGltYWdlTm9kZSxcbiAgICAgIGlkOiBhbm5vdGF0aW9uSWQsXG4gICAgICBiYlBhZ2VTZXRWaWV3OiB0aGlzLmdldChcImJiUGFnZVNldFZpZXdcIilcbiAgICB9KTtcbiAgICB0aGlzLmdldChcImFubm90YXRpb25IYXNoXCIpW2Fubm90YXRpb25JZF0gPSBpbWFnZUFubm90YXRpb247XG4gICAgdGhpcy5nZXQoXCJpbWFnZUFubm90YXRpb25zXCIpLnB1c2goaW1hZ2VBbm5vdGF0aW9uKTtcbiAgICBpbWFnZUFubm90YXRpb24ucmVuZGVyKCk7XG4gIH0sXG5cbiAgdXBkYXRlQW5ub3RhdGlvblZpZXc6IGZ1bmN0aW9uKGlkLCBzdHlsZXMpIHtcbiAgICB2YXIgYW5ub3RhdGlvblZpZXdzID0gdGhpcy5nZXQoXCJhbm5vdGF0aW9uSGFzaFwiKVtpZF07XG5cbiAgICBhbm5vdGF0aW9uVmlld3Muc2V0U3R5bGVzKHN0eWxlcyk7XG5cbiAgICByZXR1cm4gYW5ub3RhdGlvblZpZXdzO1xuICB9LFxuXG4gIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogU29tZSBraW5kIG9mIGhhc2ggbG9va3VwIHdvdWxkIGJlIG1vcmUgZWZmaWNpZW50IGhlcmUsIG1pZ2h0IHdhbnQgdG8gXG4gIC8vICAgY2hhbmdlIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYW5ub3RhdGlvbnMgYXMgYW4gYXJyYXlcbiAgdmFsaWRhdGVBbm5vdGF0aW9uSWQ6IGZ1bmN0aW9uKGlkKSB7XG5cbiAgICBpZiAodGhpcy5nZXQoXCJhbm5vdGF0aW9uSGFzaFwiKVtpZF0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoYXQgYW5ub3RhdGlvbiBpZCBhbHJlYWR5IGV4aXN0czsgYW5ub3RhdGlvbiBub3QgYWRkZWRcIik7XG4gICAgfVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBbm5vdGF0aW9ucyIsInZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBCb29rbWFyayA9IHJlcXVpcmUoJy4vYm9va21hcmsnKVxuXG52YXIgQm9va21hcmtWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuXG4gIGVsOiBcIjxkaXY+PC9kaXY+XCIsXG5cbiAgZXZlbnRzOiB7XG4gICAgXCJtb3VzZWVudGVyXCI6IFwic2V0SG92ZXJCb29rbWFya1wiLFxuICAgIFwibW91c2VsZWF2ZVwiOiBcInNldEJhc2VCb29rbWFya1wiLFxuICAgIFwiY2xpY2tcIjogXCJjbGlja0hhbmRsZXJcIlxuICB9LFxuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAgIHRoaXMuYm9va21hcmsgPSBuZXcgQm9va21hcmsoe1xuICAgICAgQ0ZJOiBvcHRpb25zLkNGSSxcbiAgICAgIHRhcmdldEVsZW1lbnQ6IG9wdGlvbnMudGFyZ2V0RWxlbWVudCxcbiAgICAgIG9mZnNldFRvcEFkZGl0aW9uOiBvcHRpb25zLm9mZnNldFRvcEFkZGl0aW9uLFxuICAgICAgb2Zmc2V0TGVmdEFkZGl0aW9uOiBvcHRpb25zLm9mZnNldExlZnRBZGRpdGlvbixcbiAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgYmJQYWdlU2V0Vmlldzogb3B0aW9ucy5iYlBhZ2VTZXRWaWV3LFxuICAgICAgdHlwZTogb3B0aW9ucy50eXBlXG4gICAgfSk7XG4gIH0sXG5cbiAgcmVzZXRCb29rbWFyazogZnVuY3Rpb24ob2Zmc2V0VG9wLCBvZmZzZXRMZWZ0KSB7XG5cbiAgICBpZiAob2Zmc2V0VG9wKSB7XG4gICAgICB0aGlzLmJvb2ttYXJrLnNldCh7XG4gICAgICAgIG9mZnNldFRvcEFkZGl0aW9uOiBvZmZzZXRUb3BcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvZmZzZXRMZWZ0KSB7XG4gICAgICB0aGlzLmJvb2ttYXJrLnNldCh7XG4gICAgICAgIG9mZnNldExlZnRBZGRpdGlvbjogb2Zmc2V0TGVmdFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuc2V0Q1NTKCk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcblxuICAgIHRoaXMuc2V0Q1NTKCk7XG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH0sXG5cbiAgc2V0Q1NTOiBmdW5jdGlvbigpIHtcblxuICAgIHZhciBhYnNvbHV0ZVRvcDtcbiAgICB2YXIgYWJzb2x1dGVMZWZ0O1xuXG4gICAgaWYgKHRoaXMuYm9va21hcmsuZ2V0KFwidHlwZVwiKSA9PT0gXCJjb21tZW50XCIpIHtcbiAgICAgIGFic29sdXRlVG9wID0gdGhpcy5ib29rbWFyay5nZXRBYnNvbHV0ZVRvcCgpO1xuICAgICAgYWJzb2x1dGVMZWZ0ID0gdGhpcy5ib29rbWFyay5nZXRBYnNvbHV0ZUxlZnQoKTtcbiAgICAgIHRoaXMuJGVsLmNzcyh7XG4gICAgICAgIFwidG9wXCI6IGFic29sdXRlVG9wICsgXCJweFwiLFxuICAgICAgICBcImxlZnRcIjogYWJzb2x1dGVMZWZ0ICsgXCJweFwiLFxuICAgICAgICBcIndpZHRoXCI6IFwiNTBweFwiLFxuICAgICAgICBcImhlaWdodFwiOiBcIjUwcHhcIixcbiAgICAgICAgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCJcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJjb21tZW50XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5hZGRDbGFzcyhcImJvb2ttYXJrXCIpO1xuICAgIH1cbiAgfSxcblxuICBzZXRIb3ZlckJvb2ttYXJrOiBmdW5jdGlvbihldmVudCkge1xuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKHRoaXMuJGVsLmhhc0NsYXNzKFwiY29tbWVudFwiKSkge1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2xhc3MoXCJjb21tZW50XCIpO1xuICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJob3Zlci1jb21tZW50XCIpO1xuICAgIH1cbiAgfSxcblxuICBzZXRCYXNlQm9va21hcms6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy4kZWwuaGFzQ2xhc3MoXCJob3Zlci1jb21tZW50XCIpKSB7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDbGFzcyhcImhvdmVyLWNvbW1lbnRcIik7XG4gICAgICB0aGlzLiRlbC5hZGRDbGFzcyhcImNvbW1lbnRcIik7XG4gICAgfVxuICB9LFxuXG4gIGNsaWNrSGFuZGxlcjogZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHZhciB0eXBlO1xuICAgIGlmICh0aGlzLmJvb2ttYXJrLmdldChcInR5cGVcIikgPT09IFwiY29tbWVudFwiKSB7XG4gICAgICB0eXBlID0gXCJjb21tZW50XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSBcImJvb2ttYXJrXCI7XG4gICAgfVxuXG4gICAgdGhpcy5ib29rbWFyay5nZXQoXCJiYlBhZ2VTZXRWaWV3XCIpLnRyaWdnZXIoXCJhbm5vdGF0aW9uQ2xpY2tlZFwiLFxuICAgICAgdHlwZSxcbiAgICAgIHRoaXMuYm9va21hcmsuZ2V0KFwiQ0ZJXCIpLFxuICAgICAgdGhpcy5ib29rbWFyay5nZXQoXCJpZFwiKSxcbiAgICAgIHRoaXMuJGVsLmNzcyhcInRvcFwiKSxcbiAgICAgIHRoaXMuJGVsLmNzcyhcImxlZnRcIiksXG4gICAgICBldmVudFxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJvb2ttYXJrVmlldyIsInZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcblxudmFyIEJvb2ttYXJrID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgZGVmYXVsdHM6IHtcbiAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcbiAgICBcImJvb2ttYXJrQ2VudGVyaW5nQWRqdXN0bWVudFwiOiAxNSxcbiAgICBcImJvb2ttYXJrVG9wQWRqdXN0bWVudFwiOiA0NVxuICB9LFxuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHtcblxuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHRvcCBhbmQgbGVmdCBvZiB0aGUgYm9va21hcmtcbiAgICAvLyBUaGlzIHNob3VsZCBpbmNsdWRlIHRoZSBhZGRpdGlvbmFsIG9mZnNldCBwcm92aWRlZCBieSB0aGUgYW5ub3RhdGlvbnMgb2JqZWN0XG4gIH0sXG5cbiAgZ2V0QWJzb2x1dGVUb3A6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHRhcmdldEVsZW1lbnRUb3AgPSAkKHRoaXMuZ2V0KFwidGFyZ2V0RWxlbWVudFwiKSkub2Zmc2V0KCkudG9wO1xuICAgIHZhciBib29rbWFya0Fic29sdXRlVG9wID0gdGhpcy5nZXQoXCJvZmZzZXRUb3BBZGRpdGlvblwiKSArIHRhcmdldEVsZW1lbnRUb3AgLSB0aGlzLmdldChcImJvb2ttYXJrVG9wQWRqdXN0bWVudFwiKTtcbiAgICByZXR1cm4gYm9va21hcmtBYnNvbHV0ZVRvcDtcbiAgfSxcblxuICBnZXRBYnNvbHV0ZUxlZnQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHRhcmdldEVsZW1lbnRMZWZ0ID0gJCh0aGlzLmdldChcInRhcmdldEVsZW1lbnRcIikpLm9mZnNldCgpLmxlZnQ7XG4gICAgdmFyIGJvb2ttYXJrQWJzb2x1dGVMZWZ0ID0gdGhpcy5nZXQoXCJvZmZzZXRMZWZ0QWRkaXRpb25cIikgKyB0YXJnZXRFbGVtZW50TGVmdCAtIHRoaXMuZ2V0KFwiYm9va21hcmtDZW50ZXJpbmdBZGp1c3RtZW50XCIpO1xuICAgIHJldHVybiBib29rbWFya0Fic29sdXRlTGVmdDtcbiAgfSxcblxuICB0b0luZm86IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgaWQ6IHRoaXMuZ2V0KFwiaWRcIiksXG4gICAgICB0eXBlOiBcImJvb2ttYXJrXCIsXG4gICAgICBDRkk6IHRoaXMuZ2V0KFwiQ0ZJXCIpXG4gICAgfTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQm9va21hcmsiLCJ2YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxudmFyIEhpZ2hsaWdodFZpZXcgPSByZXF1aXJlKCcuL2hpZ2hsaWdodC12aWV3JylcbnZhciBUZXh0TGluZUluZmVycmVyID0gcmVxdWlyZSgnLi90ZXh0LWxpbmUtaW5mZXJyZXInKVxuXG52YXIgSGlnaGxpZ2h0R3JvdXAgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuXG4gIGRlZmF1bHRzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJzZWxlY3RlZE5vZGVzXCI6IFtdLFxuICAgICAgXCJoaWdobGlnaHRWaWV3c1wiOiBbXVxuICAgIH07XG4gIH0sXG5cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge1xuICAgIHRoaXMuc2V0KFwic2NhbGVcIiwgYXR0cmlidXRlcy5zY2FsZSk7XG4gICAgdGhpcy5jb25zdHJ1Y3RIaWdobGlnaHRWaWV3cygpO1xuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLSBQUklWQVRFIEhFTFBFUlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgaGlnaGxpZ2h0R3JvdXBDYWxsYmFjazogZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIC8vIFRyaWdnZXIgdGhpcyBldmVudCBvbiBlYWNoIG9mIHRoZSBoaWdobGlnaHQgdmlld3MgKGV4Y2VwdCB0cmlnZ2VyaW5nIGV2ZW50KVxuICAgIGlmIChldmVudC50eXBlID09PSBcImNsaWNrXCIpIHtcbiAgICAgIHRoYXQuZ2V0KFwiYmJQYWdlU2V0Vmlld1wiKS50cmlnZ2VyKFwiYW5ub3RhdGlvbkNsaWNrZWRcIiwgXCJoaWdobGlnaHRcIiwgdGhhdC5nZXQoXCJDRklcIiksIHRoYXQuZ2V0KFwiaWRcIiksIGV2ZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFRyaWdnZXIgdGhpcyBldmVudCBvbiBlYWNoIG9mIHRoZSBoaWdobGlnaHQgdmlld3MgKGV4Y2VwdCB0cmlnZ2VyaW5nIGV2ZW50KVxuICAgIGlmIChldmVudC50eXBlID09PSBcImNvbnRleHRtZW51XCIpIHtcbiAgICAgIHRoYXQuZ2V0KFwiYmJQYWdlU2V0Vmlld1wiKS50cmlnZ2VyKFwiYW5ub3RhdGlvblJpZ2h0Q2xpY2tlZFwiLCBcImhpZ2hsaWdodFwiLCB0aGF0LmdldChcIkNGSVwiKSwgdGhhdC5nZXQoXCJpZFwiKSwgZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gRXZlbnRzIHRoYXQgYXJlIGNhbGxlZCBvbiBlYWNoIG1lbWJlciBvZiB0aGUgZ3JvdXBcbiAgICBfLmVhY2godGhpcy5nZXQoXCJoaWdobGlnaHRWaWV3c1wiKSwgZnVuY3Rpb24oaGlnaGxpZ2h0Vmlldykge1xuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJtb3VzZWVudGVyXCIpIHtcbiAgICAgICAgaGlnaGxpZ2h0Vmlldy5zZXRIb3ZlckhpZ2hsaWdodCgpO1xuICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSBcIm1vdXNlbGVhdmVcIikge1xuICAgICAgICBoaWdobGlnaHRWaWV3LnNldEJhc2VIaWdobGlnaHQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBjb25zdHJ1Y3RIaWdobGlnaHRWaWV3czogZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdmFyIHJlY3RMaXN0ID0gW107XG4gICAgdmFyIGluZmVycmVyO1xuICAgIHZhciBpbmZlcnJlZExpbmVzO1xuXG4gICAgXy5lYWNoKHRoaXMuZ2V0KFwic2VsZWN0ZWROb2Rlc1wiKSwgZnVuY3Rpb24obm9kZSwgaW5kZXgpIHtcblxuICAgICAgdmFyIHJlY3RzO1xuICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTtcbiAgICAgIHJlY3RzID0gcmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKTtcblxuICAgICAgLy8gUkVGQUNUT1JJTkcgQ0FORElEQVRFOiBNYXliZSBhIGJldHRlciB3YXkgdG8gYXBwZW5kIGFuIGFycmF5IGhlcmVcbiAgICAgIF8uZWFjaChyZWN0cywgZnVuY3Rpb24ocmVjdCkge1xuICAgICAgICByZWN0TGlzdC5wdXNoKHJlY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpbmZlcnJlciA9IG5ldyBUZXh0TGluZUluZmVycmVyKCk7XG4gICAgaW5mZXJyZWRMaW5lcyA9IGluZmVycmVyLmluZmVyTGluZXMocmVjdExpc3QpO1xuXG4gICAgdmFyIHNjYWxlID0gdGhpcy5nZXQoXCJzY2FsZVwiKTtcblxuICAgIF8uZWFjaChpbmZlcnJlZExpbmVzLCBmdW5jdGlvbihsaW5lLCBpbmRleCkge1xuXG4gICAgICB2YXIgaGlnaGxpZ2h0VG9wID0gbGluZS5zdGFydFRvcCAvIHNjYWxlOztcbiAgICAgIHZhciBoaWdobGlnaHRMZWZ0ID0gbGluZS5sZWZ0IC8gc2NhbGU7O1xuICAgICAgdmFyIGhpZ2hsaWdodEhlaWdodCA9IGxpbmUuYXZnSGVpZ2h0IC8gc2NhbGU7XG4gICAgICB2YXIgaGlnaGxpZ2h0V2lkdGggPSBsaW5lLndpZHRoIC8gc2NhbGU7O1xuXG4gICAgICB2YXIgaGlnaGxpZ2h0VmlldyA9IG5ldyBIaWdobGlnaHRWaWV3KHtcbiAgICAgICAgQ0ZJOiB0aGF0LmdldChcIkNGSVwiKSxcbiAgICAgICAgdG9wOiBoaWdobGlnaHRUb3AgKyB0aGF0LmdldChcIm9mZnNldFRvcEFkZGl0aW9uXCIpLFxuICAgICAgICBsZWZ0OiBoaWdobGlnaHRMZWZ0ICsgdGhhdC5nZXQoXCJvZmZzZXRMZWZ0QWRkaXRpb25cIiksXG4gICAgICAgIGhlaWdodDogaGlnaGxpZ2h0SGVpZ2h0LFxuICAgICAgICB3aWR0aDogaGlnaGxpZ2h0V2lkdGgsXG4gICAgICAgIHN0eWxlczogdGhhdC5nZXQoJ3N0eWxlcycpLFxuICAgICAgICBoaWdobGlnaHRHcm91cENhbGxiYWNrOiB0aGF0LmhpZ2hsaWdodEdyb3VwQ2FsbGJhY2ssXG4gICAgICAgIGNhbGxiYWNrQ29udGV4dDogdGhhdFxuICAgICAgfSk7XG5cbiAgICAgIHRoYXQuZ2V0KFwiaGlnaGxpZ2h0Vmlld3NcIikucHVzaChoaWdobGlnaHRWaWV3KTtcbiAgICB9KTtcbiAgfSxcblxuICByZXNldEhpZ2hsaWdodHM6IGZ1bmN0aW9uKHZpZXdwb3J0RWxlbWVudCwgb2Zmc2V0VG9wLCBvZmZzZXRMZWZ0KSB7XG5cbiAgICBpZiAob2Zmc2V0VG9wKSB7XG4gICAgICB0aGlzLnNldCh7XG4gICAgICAgIG9mZnNldFRvcEFkZGl0aW9uOiBvZmZzZXRUb3BcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0TGVmdCkge1xuICAgICAgdGhpcy5zZXQoe1xuICAgICAgICBvZmZzZXRMZWZ0QWRkaXRpb246IG9mZnNldExlZnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuZGVzdHJveUN1cnJlbnRIaWdobGlnaHRzKCk7XG4gICAgdGhpcy5jb25zdHJ1Y3RIaWdobGlnaHRWaWV3cygpO1xuICAgIHRoaXMucmVuZGVySGlnaGxpZ2h0cyh2aWV3cG9ydEVsZW1lbnQpO1xuICB9LFxuXG4gIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogRW5zdXJlIHRoYXQgZXZlbnQgbGlzdGVuZXJzIGFyZSBiZWluZyBwcm9wZXJseSBjbGVhbmVkIHVwLiBcbiAgZGVzdHJveUN1cnJlbnRIaWdobGlnaHRzOiBmdW5jdGlvbigpIHtcblxuICAgIF8uZWFjaCh0aGlzLmdldChcImhpZ2hsaWdodFZpZXdzXCIpLCBmdW5jdGlvbihoaWdobGlnaHRWaWV3KSB7XG4gICAgICBoaWdobGlnaHRWaWV3LnJlbW92ZSgpO1xuICAgICAgaGlnaGxpZ2h0Vmlldy5vZmYoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZ2V0KFwiaGlnaGxpZ2h0Vmlld3NcIikubGVuZ3RoID0gMDtcbiAgfSxcblxuICByZW5kZXJIaWdobGlnaHRzOiBmdW5jdGlvbih2aWV3cG9ydEVsZW1lbnQpIHtcblxuICAgIF8uZWFjaCh0aGlzLmdldChcImhpZ2hsaWdodFZpZXdzXCIpLCBmdW5jdGlvbih2aWV3LCBpbmRleCkge1xuICAgICAgJCh2aWV3cG9ydEVsZW1lbnQpLmFwcGVuZCh2aWV3LnJlbmRlcigpKTtcbiAgICB9KTtcbiAgfSxcblxuICB0b0luZm86IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgaWQ6IHRoaXMuZ2V0KFwiaWRcIiksXG4gICAgICB0eXBlOiBcImhpZ2hsaWdodFwiLFxuICAgICAgQ0ZJOiB0aGlzLmdldChcIkNGSVwiKVxuICAgIH07XG4gIH0sXG5cbiAgc2V0U3R5bGVzOiBmdW5jdGlvbihzdHlsZXMpIHtcbiAgICB2YXIgaGlnaGxpZ2h0Vmlld3MgPSB0aGlzLmdldCgnaGlnaGxpZ2h0Vmlld3MnKTtcblxuICAgIHRoaXMuc2V0KHtcbiAgICAgIHN0eWxlczogc3R5bGVzXG4gICAgfSk7XG5cbiAgICBfLmVhY2goaGlnaGxpZ2h0Vmlld3MsIGZ1bmN0aW9uKHZpZXcsIGluZGV4KSB7XG4gICAgICB2aWV3LnNldFN0eWxlcyhzdHlsZXMpO1xuICAgIH0pO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBIaWdobGlnaHRHcm91cCIsInZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ0JhY2tib25lJylcbnZhciBIaWdobGlnaHQgPSByZXF1aXJlKCcuL2hpZ2hsaWdodCcpXG5cbnZhciBIaWdobGlnaHRWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuXG4gIGVsOiBcIjxkaXYgY2xhc3M9J2hpZ2hsaWdodCc+PC9kaXY+XCIsXG5cbiAgZXZlbnRzOiB7XG4gICAgXCJtb3VzZWVudGVyXCI6IFwiaGlnaGxpZ2h0RXZlbnRcIixcbiAgICBcIm1vdXNlbGVhdmVcIjogXCJoaWdobGlnaHRFdmVudFwiLFxuICAgIFwiY2xpY2tcIjogXCJoaWdobGlnaHRFdmVudFwiLFxuICAgIFwiY29udGV4dG1lbnVcIjogXCJoaWdobGlnaHRFdmVudFwiXG4gIH0sXG5cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuXG4gICAgdGhpcy5oaWdobGlnaHQgPSBuZXcgSGlnaGxpZ2h0KHtcbiAgICAgIENGSTogb3B0aW9ucy5DRkksXG4gICAgICB0b3A6IG9wdGlvbnMudG9wLFxuICAgICAgbGVmdDogb3B0aW9ucy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCxcbiAgICAgIHdpZHRoOiBvcHRpb25zLndpZHRoLFxuICAgICAgc3R5bGVzOiBvcHRpb25zLnN0eWxlcyxcbiAgICAgIGhpZ2hsaWdodEdyb3VwQ2FsbGJhY2s6IG9wdGlvbnMuaGlnaGxpZ2h0R3JvdXBDYWxsYmFjayxcbiAgICAgIGNhbGxiYWNrQ29udGV4dDogb3B0aW9ucy5jYWxsYmFja0NvbnRleHRcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgdGhpcy5zZXRDU1MoKTtcbiAgICByZXR1cm4gdGhpcy5lbDtcbiAgfSxcblxuICByZXNldFBvc2l0aW9uOiBmdW5jdGlvbih0b3AsIGxlZnQsIGhlaWdodCwgd2lkdGgpIHtcblxuICAgIHRoaXMuaGlnaGxpZ2h0LnNldCh7XG4gICAgICB0b3A6IHRvcCxcbiAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIHdpZHRoOiB3aWR0aFxuICAgIH0pO1xuICAgIHRoaXMuc2V0Q1NTKCk7XG4gIH0sXG5cbiAgc2V0U3R5bGVzOiBmdW5jdGlvbihzdHlsZXMpIHtcblxuICAgIHRoaXMuaGlnaGxpZ2h0LnNldCh7XG4gICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9LFxuXG4gIHNldENTUzogZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5oaWdobGlnaHQuZ2V0KFwic3R5bGVzXCIpIHx8IHt9O1xuXG4gICAgdGhpcy4kZWwuY3NzKHtcbiAgICAgIFwidG9wXCI6IHRoaXMuaGlnaGxpZ2h0LmdldChcInRvcFwiKSArIFwicHhcIixcbiAgICAgIFwibGVmdFwiOiB0aGlzLmhpZ2hsaWdodC5nZXQoXCJsZWZ0XCIpICsgXCJweFwiLFxuICAgICAgXCJoZWlnaHRcIjogdGhpcy5oaWdobGlnaHQuZ2V0KFwiaGVpZ2h0XCIpICsgXCJweFwiLFxuICAgICAgXCJ3aWR0aFwiOiB0aGlzLmhpZ2hsaWdodC5nZXQoXCJ3aWR0aFwiKSArIFwicHhcIixcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBzdHlsZXMuZmlsbF9jb2xvciB8fCBcIm5vcm1hbFwiLFxuICAgIH0pO1xuICB9LFxuXG4gIHNldEJhc2VIaWdobGlnaHQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJoaWdobGlnaHRcIik7XG4gICAgdGhpcy4kZWwucmVtb3ZlQ2xhc3MoXCJob3Zlci1oaWdobGlnaHRcIik7XG4gIH0sXG5cbiAgc2V0SG92ZXJIaWdobGlnaHQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJob3Zlci1oaWdobGlnaHRcIik7XG4gICAgdGhpcy4kZWwucmVtb3ZlQ2xhc3MoXCJoaWdobGlnaHRcIik7XG4gIH0sXG5cbiAgaGlnaGxpZ2h0RXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgaGlnaGxpZ2h0R3JvdXBDYWxsYmFjayA9IHRoaXMuaGlnaGxpZ2h0LmdldChcImhpZ2hsaWdodEdyb3VwQ2FsbGJhY2tcIik7XG4gICAgdmFyIGhpZ2hsaWdodEdyb3VwQ29udGV4dCA9IHRoaXMuaGlnaGxpZ2h0LmdldChcImNhbGxiYWNrQ29udGV4dFwiKTtcbiAgICBoaWdobGlnaHRHcm91cENvbnRleHQuaGlnaGxpZ2h0R3JvdXBDYWxsYmFjayhldmVudCk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhpZ2hsaWdodFZpZXciLCJ2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG5cbnZhciBIaWdobGlnaHQgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICBkZWZhdWx0czoge1xuICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHt9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBIaWdobGlnaHQiLCJ2YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxuXG5cbi8vIFJhdGlvbmFsZTogQW4gaW1hZ2UgYW5ub3RhdGlvbiBkb2VzIE5PVCBoYXZlIGEgdmlldywgYXMgd2UgZG9uJ3Qga25vdyB0aGUgc3RhdGUgb2YgYW4gaW1hZ2UgZWxlbWVudCB3aXRoaW4gYW4gRVBVQjsgaXQncyBlbnRpcmVseVxuLy8gICBwb3NzaWJsZSB0aGF0IGFuIEVQVUIgaW1hZ2UgZWxlbWVudCBjb3VsZCBoYXZlIGEgYmFja2JvbmUgdmlldyBhc3NvY2lhdGVkIHdpdGggaXQgYWxyZWFkeSwgd2hpY2ggd291bGQgY2F1c2UgcHJvYmxlbXMgaWYgd2UgXG4vLyAgIHRyaWVkIHRvIGFzc29jaWF0ZSBhbm90aGVyIGJhY2tib25lIHZpZXcuIEFzIHN1Y2gsIHRoaXMgbW9kZWwgbW9kaWZpZXMgQ1NTIHByb3BlcnRpZXMgZm9yIGFuIGFubm90YXRlZCBpbWFnZSBlbGVtZW50LlxuLy8gICBcbi8vICAgQW4gaW1hZ2UgYW5ub3RhdGlvbiB2aWV3IHRoYXQgbWFuYWdlcyBhbiBhYnNvbHV0ZWx5IHBvc2l0aW9uIGVsZW1lbnQgKHNpbWlsYXIgdG8gYm9va21hcmtzLCB1bmRlcmxpbmVzIGFuZCBoaWdobGlnaHRzKSBjYW4gYmVcbi8vICAgYWRkZWQgaWYgbW9yZSBmdW5jdGlvbmFsaXR5IGlzIHJlcXVpcmVkLiBcblxudmFyIEltYWdlQW5ub3RhdGlvbiA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG5cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge1xuXG4gICAgLy8gU2V0IGhhbmRsZXJzIGhlcmUuIENhbiB1c2UganF1ZXJ5IGhhbmRsZXJzXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciAkaW1hZ2VFbGVtZW50ID0gJCh0aGlzLmdldChcImltYWdlTm9kZVwiKSk7XG4gICAgJGltYWdlRWxlbWVudC5vbihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICB0aGF0LnNldE1vdXNlZW50ZXJCb3JkZXIoKTtcbiAgICB9KTtcbiAgICAkaW1hZ2VFbGVtZW50Lm9uKFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoYXQuc2V0TW91c2VsZWF2ZUJvcmRlcigpO1xuICAgIH0pO1xuICAgICRpbWFnZUVsZW1lbnQub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoYXQuZ2V0KFwiYmJQYWdlU2V0Vmlld1wiKS50cmlnZ2VyKFwiYW5ub3RhdGlvbkNsaWNrZWRcIiwgXCJpbWFnZVwiLCB0aGF0LmdldChcIkNGSVwiKSwgdGhhdC5nZXQoXCJpZFwiKSwgZXZlbnQpO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cbiAgICB0aGlzLnNldENTUygpO1xuICB9LFxuXG4gIHNldENTUzogZnVuY3Rpb24oKSB7XG5cbiAgICAkKHRoaXMuZ2V0KFwiaW1hZ2VOb2RlXCIpKS5jc3Moe1xuICAgICAgXCJib3JkZXJcIjogXCI1cHggc29saWQgcmdiKDI1NSwgMCwgMClcIixcbiAgICAgIFwiYm9yZGVyXCI6IFwiNXB4IHNvbGlkIHJnYmEoMjU1LCAwLCAwLCAwLjIpXCIsXG4gICAgICBcIi13ZWJraXQtYmFja2dyb3VuZC1jbGlwXCI6IFwicGFkZGluZy1ib3hcIixcbiAgICAgIFwiYmFja2dyb3VuZC1jbGlwXCI6IFwicGFkZGluZy1ib3hcIlxuICAgIH0pO1xuICB9LFxuXG4gIHNldE1vdXNlZW50ZXJCb3JkZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgJCh0aGlzLmdldChcImltYWdlTm9kZVwiKSkuY3NzKHtcbiAgICAgIFwiYm9yZGVyXCI6IFwiNXB4IHNvbGlkIHJnYmEoMjU1LCAwLCAwLCAwLjQpXCJcbiAgICB9KTtcbiAgfSxcblxuICBzZXRNb3VzZWxlYXZlQm9yZGVyOiBmdW5jdGlvbigpIHtcblxuICAgICQodGhpcy5nZXQoXCJpbWFnZU5vZGVcIikpLmNzcyh7XG4gICAgICBcImJvcmRlclwiOiBcIjVweCBzb2xpZCByZ2JhKDI1NSwgMCwgMCwgMC4yKVwiXG4gICAgfSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEltYWdlQW5ub3RhdGlvbiIsIi8vIFRoaXMgd2FzIHJlYWRpdW0tanMtc2hhcmVkL2xpYi9hbm5vdGF0aW9uc19tb2R1bGUuanNcbi8vIEl0IHdhcyByZW5hbWVkIHNsaWdodGx5IChubyBNb2R1bGUgYml0ICkgYW5kIHNwbGl0IGludG8gbXVsdGlwbGUgZmlsZXMgZm9yIHNpbXBsaWNpdHlcbi8vIEVwdWJBbm5vdGF0aW9uc01vZHVsZSBpcyBub3cgRXB1YkFubm90YXRpb25zLiBFcHViQW5ub3RhdGlvbnMgbmFtZXNwYWNlIHdhcyBkcm9wcGVkIGluIGZhdm91clxuLy8gb2YgZXhwbGljaXQgcmVxdWlyZXMgd2hlcmUgdXNlZC5cblxudmFyIFJlZmxvd2FibGVBbm5vdGF0aW9ucyA9IHJlcXVpcmUoJy4vcmVmbG93YWJsZS1hbm5vdGF0aW9ucycpXG5cbnZhciBFcHViQW5ub3RhdGlvbnMgPSBmdW5jdGlvbihjb250ZW50RG9jdW1lbnRET00sIGJiUGFnZVNldFZpZXcsIGFubm90YXRpb25DU1NVcmwpIHtcbiAgdmFyIHJlZmxvd2FibGVBbm5vdGF0aW9ucyA9IG5ldyBSZWZsb3dhYmxlQW5ub3RhdGlvbnMoe1xuICAgIGNvbnRlbnREb2N1bWVudERPTTogY29udGVudERvY3VtZW50RE9NLFxuICAgIGJiUGFnZVNldFZpZXc6IGJiUGFnZVNldFZpZXcsXG4gICAgYW5ub3RhdGlvbkNTU1VybDogYW5ub3RhdGlvbkNTU1VybCxcbiAgfSk7XG5cbiAgLy8gRGVzY3JpcHRpb246IFRoZSBwdWJsaWMgaW50ZXJmYWNlXG4gIHJldHVybiB7XG4gICAgYWRkU2VsZWN0aW9uSGlnaGxpZ2h0OiBmdW5jdGlvbihpZCwgdHlwZSwgc3R5bGVzKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmFkZFNlbGVjdGlvbkhpZ2hsaWdodChpZCwgdHlwZSwgc3R5bGVzKTtcbiAgICB9LFxuICAgIGFkZFNlbGVjdGlvbkJvb2ttYXJrOiBmdW5jdGlvbihpZCwgdHlwZSkge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5hZGRTZWxlY3Rpb25Cb29rbWFyayhpZCwgdHlwZSk7XG4gICAgfSxcbiAgICBhZGRTZWxlY3Rpb25JbWFnZUFubm90YXRpb246IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmFkZFNlbGVjdGlvbkltYWdlQW5ub3RhdGlvbihpZCk7XG4gICAgfSxcbiAgICBhZGRIaWdobGlnaHQ6IGZ1bmN0aW9uKENGSSwgaWQsIHR5cGUsIHN0eWxlcykge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5hZGRIaWdobGlnaHQoQ0ZJLCBpZCwgdHlwZSwgc3R5bGVzKTtcbiAgICB9LFxuICAgIGFkZEJvb2ttYXJrOiBmdW5jdGlvbihDRkksIGlkLCB0eXBlKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmFkZEJvb2ttYXJrKENGSSwgaWQsIHR5cGUpO1xuICAgIH0sXG4gICAgYWRkSW1hZ2VBbm5vdGF0aW9uOiBmdW5jdGlvbihDRkksIGlkKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmFkZEltYWdlQW5ub3RhdGlvbihDRkksIGlkKTtcbiAgICB9LFxuICAgIHVwZGF0ZUFubm90YXRpb25WaWV3OiBmdW5jdGlvbihpZCwgc3R5bGVzKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLnVwZGF0ZUFubm90YXRpb25WaWV3KGlkLCBzdHlsZXMpO1xuICAgIH0sXG4gICAgcmVkcmF3OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWZsb3dhYmxlQW5ub3RhdGlvbnMucmVkcmF3KCk7XG4gICAgfSxcbiAgICBnZXRCb29rbWFyazogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByZWZsb3dhYmxlQW5ub3RhdGlvbnMuYW5ub3RhdGlvbnMuZ2V0Qm9va21hcmsoaWQpO1xuICAgIH0sXG4gICAgZ2V0Qm9va21hcmtzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWZsb3dhYmxlQW5ub3RhdGlvbnMuYW5ub3RhdGlvbnMuZ2V0Qm9va21hcmtzKCk7XG4gICAgfSxcbiAgICBnZXRIaWdobGlnaHQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmFubm90YXRpb25zLmdldEhpZ2hsaWdodChpZCk7XG4gICAgfSxcbiAgICBnZXRIaWdobGlnaHRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWZsb3dhYmxlQW5ub3RhdGlvbnMuYW5ub3RhdGlvbnMuZ2V0SGlnaGxpZ2h0cygpO1xuICAgIH0sXG4gICAgZ2V0VW5kZXJsaW5lOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5hbm5vdGF0aW9ucy5nZXRVbmRlcmxpbmUoaWQpO1xuICAgIH0sXG4gICAgZ2V0VW5kZXJsaW5lczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmFubm90YXRpb25zLmdldFVuZGVybGluZXMoKTtcbiAgICB9LFxuICAgIGdldEltYWdlQW5ub3RhdGlvbjogZnVuY3Rpb24oKSB7XG5cbiAgICB9LFxuICAgIGdldEltYWdlQW5ub3RhdGlvbnM6IGZ1bmN0aW9uKCkge1xuXG4gICAgfSxcbiAgICByZW1vdmVBbm5vdGF0aW9uOiBmdW5jdGlvbihhbm5vdGF0aW9uSWQpIHtcbiAgICAgIHJldHVybiByZWZsb3dhYmxlQW5ub3RhdGlvbnMucmVtb3ZlKGFubm90YXRpb25JZCk7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50U2VsZWN0aW9uQ0ZJOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWZsb3dhYmxlQW5ub3RhdGlvbnMuZ2V0Q3VycmVudFNlbGVjdGlvbkNGSSgpO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudFNlbGVjdGlvbk9mZnNldENGSTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmdldEN1cnJlbnRTZWxlY3Rpb25PZmZzZXRDRkkoKTtcbiAgICB9LFxuICAgIHJlbW92ZUhpZ2hsaWdodDogZnVuY3Rpb24oYW5ub3RhdGlvbklkKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLnJlbW92ZUhpZ2hsaWdodChhbm5vdGF0aW9uSWQpO1xuICAgIH1cbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXB1YkFubm90YXRpb25zIiwidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciBBbm5vdGF0aW9ucyA9IHJlcXVpcmUoJy4vYW5ub3RhdGlvbnMnKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxudmFyIEVQVUJjZmkgPSByZXF1aXJlKCdlcHViLWNmaScpXG5cbnZhciBSZWZsb3dhYmxlQW5ub3RhdGlvbnMgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHtcblxuICAgIHRoaXMuZXB1YkNGSSA9IEVQVUJjZmk7XG4gICAgdGhpcy5hbm5vdGF0aW9ucyA9IG5ldyBBbm5vdGF0aW9ucyh7XG4gICAgICBvZmZzZXRUb3BBZGRpdGlvbjogMCxcbiAgICAgIG9mZnNldExlZnRBZGRpdGlvbjogMCxcbiAgICAgIHJlYWRlckJvdW5kRWxlbWVudDogJChcImh0bWxcIiwgdGhpcy5nZXQoXCJjb250ZW50RG9jdW1lbnRET01cIikpWzBdLFxuICAgICAgc2NhbGU6IDAsXG4gICAgICBiYlBhZ2VTZXRWaWV3OiB0aGlzLmdldChcImJiUGFnZVNldFZpZXdcIilcbiAgICB9KTtcbiAgICAvLyBpbmplY3QgYW5ub3RhdGlvbiBDU1MgaW50byBpZnJhbWUgXG5cblxuICAgIHZhciBhbm5vdGF0aW9uQ1NTVXJsID0gdGhpcy5nZXQoXCJhbm5vdGF0aW9uQ1NTVXJsXCIpO1xuICAgIGlmIChhbm5vdGF0aW9uQ1NTVXJsKSB7XG4gICAgICB0aGlzLmluamVjdEFubm90YXRpb25DU1MoYW5ub3RhdGlvbkNTU1VybCk7XG4gICAgfVxuXG4gICAgLy8gZW1pdCBhbiBldmVudCB3aGVuIHVzZXIgc2VsZWN0cyBzb21lIHRleHQuXG4gICAgdmFyIGVwdWJXaW5kb3cgPSAkKHRoaXMuZ2V0KFwiY29udGVudERvY3VtZW50RE9NXCIpKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZXB1YldpbmRvdy5vbihcIm1vdXNldXBcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciByYW5nZSA9IHNlbGYuZ2V0Q3VycmVudFNlbGVjdGlvblJhbmdlKCk7XG4gICAgICBpZiAocmFuZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocmFuZ2Uuc3RhcnRPZmZzZXQgLSByYW5nZS5lbmRPZmZzZXQpIHtcbiAgICAgICAgc2VsZi5hbm5vdGF0aW9ucy5nZXQoXCJiYlBhZ2VTZXRWaWV3XCIpLnRyaWdnZXIoXCJ0ZXh0U2VsZWN0aW9uRXZlbnRcIiwgZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuXG5cbiAgfSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbiAgLy8gIFwiUFVCTElDXCIgTUVUSE9EUyAoVEhFIEFQSSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgcmVkcmF3OiBmdW5jdGlvbigpIHtcblxuICAgIHZhciBsZWZ0QWRkaXRpb24gPSAtdGhpcy5nZXRQYWdpbmF0aW9uTGVmdE9mZnNldCgpO1xuICAgIHRoaXMuYW5ub3RhdGlvbnMucmVkcmF3QW5ub3RhdGlvbnMoMCwgbGVmdEFkZGl0aW9uKTtcbiAgfSxcblxuICByZW1vdmVIaWdobGlnaHQ6IGZ1bmN0aW9uKGFubm90YXRpb25JZCkge1xuICAgIHJldHVybiB0aGlzLmFubm90YXRpb25zLnJlbW92ZUhpZ2hsaWdodChhbm5vdGF0aW9uSWQpXG4gIH0sXG5cblxuXG4gIGFkZEhpZ2hsaWdodDogZnVuY3Rpb24oQ0ZJLCBpZCwgdHlwZSwgc3R5bGVzKSB7XG5cbiAgICB2YXIgQ0ZJUmFuZ2VJbmZvO1xuICAgIHZhciByYW5nZTtcbiAgICB2YXIgcmFuZ2VTdGFydE5vZGU7XG4gICAgdmFyIHJhbmdlRW5kTm9kZTtcbiAgICB2YXIgc2VsZWN0ZWRFbGVtZW50cztcbiAgICB2YXIgbGVmdEFkZGl0aW9uO1xuICAgIHZhciBzdGFydE1hcmtlckh0bWwgPSB0aGlzLmdldFJhbmdlU3RhcnRNYXJrZXIoQ0ZJLCBpZCk7XG4gICAgdmFyIGVuZE1hcmtlckh0bWwgPSB0aGlzLmdldFJhbmdlRW5kTWFya2VyKENGSSwgaWQpO1xuXG4gICAgLy8gVE9ETyB3ZWJraXQgc3BlY2lmaWM/XG4gICAgLy8gRklYTUUgQ2hlY2sgdGhpcyBwb2x5ZmlsbCBodHRwczovL2dpdGh1Yi5jb20vamZzaWlpL1hDU1NNYXRyaXhcbiAgICB2YXIgJGh0bWwgPSAkKHRoaXMuZ2V0KFwiY29udGVudERvY3VtZW50RE9NXCIpKTtcbiAgICB2YXIgbWF0cml4ID0gJCgnaHRtbCcsICRodG1sKS5jc3MoJy13ZWJraXQtdHJhbnNmb3JtJyk7XG4gICAgdmFyIHNjYWxlID0gbmV3IFdlYktpdENTU01hdHJpeChtYXRyaXgpLmE7XG4gICAgdGhpcy5zZXQoXCJzY2FsZVwiLCBzY2FsZSk7XG5cbiAgICB0cnkge1xuICAgICAgQ0ZJUmFuZ2VJbmZvID0gdGhpcy5lcHViQ0ZJLmluamVjdFJhbmdlRWxlbWVudHMoXG4gICAgICAgIENGSSxcbiAgICAgICAgdGhpcy5nZXQoXCJjb250ZW50RG9jdW1lbnRET01cIiksXG4gICAgICAgIHN0YXJ0TWFya2VySHRtbCxcbiAgICAgICAgZW5kTWFya2VySHRtbCwgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl1cbiAgICAgICk7XG5cbiAgICAgIC8vIEdldCBzdGFydCBhbmQgZW5kIG1hcmtlciBmb3IgdGhlIGlkLCB1c2luZyBpbmplY3RlZCBpbnRvIGVsZW1lbnRzXG4gICAgICAvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IEFic3RyYWN0IHJhbmdlIGNyZWF0aW9uIHRvIGFjY291bnQgZm9yIG5vIHByZXZpb3VzL25leHQgc2libGluZywgZm9yIGRpZmZlcmVudCB0eXBlcyBvZlxuICAgICAgLy8gICBzaWJpbGluZywgZXRjLiBcbiAgICAgIHJhbmdlU3RhcnROb2RlID0gQ0ZJUmFuZ2VJbmZvLnN0YXJ0RWxlbWVudC5uZXh0U2libGluZyA/IENGSVJhbmdlSW5mby5zdGFydEVsZW1lbnQubmV4dFNpYmxpbmcgOiBDRklSYW5nZUluZm8uc3RhcnRFbGVtZW50O1xuICAgICAgcmFuZ2VFbmROb2RlID0gQ0ZJUmFuZ2VJbmZvLmVuZEVsZW1lbnQucHJldmlvdXNTaWJsaW5nID8gQ0ZJUmFuZ2VJbmZvLmVuZEVsZW1lbnQucHJldmlvdXNTaWJsaW5nIDogQ0ZJUmFuZ2VJbmZvLmVuZEVsZW1lbnQ7XG4gICAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICByYW5nZS5zZXRTdGFydChyYW5nZVN0YXJ0Tm9kZSwgMCk7XG4gICAgICByYW5nZS5zZXRFbmQocmFuZ2VFbmROb2RlLCByYW5nZUVuZE5vZGUubGVuZ3RoKTtcblxuICAgICAgc2VsZWN0aW9uSW5mbyA9IHRoaXMuZ2V0U2VsZWN0aW9uSW5mbyhyYW5nZSk7XG4gICAgICBsZWZ0QWRkaXRpb24gPSAtdGhpcy5nZXRQYWdpbmF0aW9uTGVmdE9mZnNldCgpO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJoaWdobGlnaHRcIikge1xuICAgICAgICB0aGlzLmFubm90YXRpb25zLnNldCgnc2NhbGUnLCB0aGlzLmdldCgnc2NhbGUnKSk7XG4gICAgICAgIHRoaXMuYW5ub3RhdGlvbnMuYWRkSGlnaGxpZ2h0KENGSSwgc2VsZWN0aW9uSW5mby5zZWxlY3RlZEVsZW1lbnRzLCBpZCwgMCwgbGVmdEFkZGl0aW9uLCBDRklSYW5nZUluZm8uc3RhcnRFbGVtZW50LCBDRklSYW5nZUluZm8uZW5kRWxlbWVudCwgc3R5bGVzKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ1bmRlcmxpbmVcIikge1xuICAgICAgICB0aGlzLmFubm90YXRpb25zLmFkZFVuZGVybGluZShDRkksIHNlbGVjdGlvbkluZm8uc2VsZWN0ZWRFbGVtZW50cywgaWQsIDAsIGxlZnRBZGRpdGlvbiwgc3R5bGVzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgQ0ZJOiBDRkksXG4gICAgICAgIHNlbGVjdGVkRWxlbWVudHM6IHNlbGVjdGlvbkluZm8uc2VsZWN0ZWRFbGVtZW50c1xuICAgICAgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH0sXG5cbiAgYWRkQm9va21hcms6IGZ1bmN0aW9uKENGSSwgaWQsIHR5cGUpIHtcblxuICAgIHZhciBzZWxlY3RlZEVsZW1lbnRzO1xuICAgIHZhciBib29rbWFya01hcmtlckh0bWwgPSB0aGlzLmdldEJvb2ttYXJrTWFya2VyKENGSSwgaWQpO1xuICAgIHZhciAkaW5qZWN0ZWRFbGVtZW50O1xuICAgIHZhciBsZWZ0QWRkaXRpb247XG5cbiAgICB0cnkge1xuICAgICAgJGluamVjdGVkRWxlbWVudCA9IHRoaXMuZXB1YkNGSS5pbmplY3RFbGVtZW50KFxuICAgICAgICBDRkksXG4gICAgICAgIHRoaXMuZ2V0KFwiY29udGVudERvY3VtZW50RE9NXCIpLFxuICAgICAgICBib29rbWFya01hcmtlckh0bWwsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdXG4gICAgICApO1xuXG4gICAgICAvLyBBZGQgYm9va21hcmsgYW5ub3RhdGlvbiBoZXJlXG4gICAgICBsZWZ0QWRkaXRpb24gPSAtdGhpcy5nZXRQYWdpbmF0aW9uTGVmdE9mZnNldCgpO1xuICAgICAgdGhpcy5hbm5vdGF0aW9ucy5hZGRCb29rbWFyayhDRkksICRpbmplY3RlZEVsZW1lbnRbMF0sIGlkLCAwLCBsZWZ0QWRkaXRpb24sIHR5cGUpO1xuXG4gICAgICByZXR1cm4ge1xuXG4gICAgICAgIENGSTogQ0ZJLFxuICAgICAgICBzZWxlY3RlZEVsZW1lbnRzOiAkaW5qZWN0ZWRFbGVtZW50WzBdXG4gICAgICB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSxcblxuICBhZGRJbWFnZUFubm90YXRpb246IGZ1bmN0aW9uKENGSSwgaWQpIHtcblxuICAgIHZhciBzZWxlY3RlZEVsZW1lbnRzO1xuICAgIHZhciBib29rbWFya01hcmtlckh0bWwgPSB0aGlzLmdldEJvb2ttYXJrTWFya2VyKENGSSwgaWQpO1xuICAgIHZhciAkdGFyZ2V0SW1hZ2U7XG5cbiAgICB0cnkge1xuICAgICAgJHRhcmdldEltYWdlID0gdGhpcy5lcHViQ0ZJLmdldFRhcmdldEVsZW1lbnQoXG4gICAgICAgIENGSSxcbiAgICAgICAgdGhpcy5nZXQoXCJjb250ZW50RG9jdW1lbnRET01cIiksIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdXG4gICAgICApO1xuICAgICAgdGhpcy5hbm5vdGF0aW9ucy5hZGRJbWFnZUFubm90YXRpb24oQ0ZJLCAkdGFyZ2V0SW1hZ2VbMF0sIGlkKTtcblxuICAgICAgcmV0dXJuIHtcblxuICAgICAgICBDRkk6IENGSSxcbiAgICAgICAgc2VsZWN0ZWRFbGVtZW50czogJHRhcmdldEltYWdlWzBdXG4gICAgICB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSxcblxuICAvLyB0aGlzIHJldHVybnMgYSBwYXJ0aWFsIENGSSBvbmx5ISFcbiAgZ2V0Q3VycmVudFNlbGVjdGlvbkNGSTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSB0aGlzLmdldEN1cnJlbnRTZWxlY3Rpb25SYW5nZSgpO1xuICAgIHZhciBDRkk7XG4gICAgaWYgKGN1cnJlbnRTZWxlY3Rpb24pIHtcbiAgICAgIHNlbGVjdGlvbkluZm8gPSB0aGlzLmdldFNlbGVjdGlvbkluZm8oY3VycmVudFNlbGVjdGlvbik7XG4gICAgICBDRkkgPSBzZWxlY3Rpb25JbmZvLkNGSTtcbiAgICB9XG5cbiAgICByZXR1cm4gQ0ZJO1xuICB9LFxuXG4gIC8vIHRoaXMgcmV0dXJucyBhIHBhcnRpYWwgQ0ZJIG9ubHkhIVxuICBnZXRDdXJyZW50U2VsZWN0aW9uT2Zmc2V0Q0ZJOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IHRoaXMuZ2V0Q3VycmVudFNlbGVjdGlvblJhbmdlKCk7XG5cbiAgICB2YXIgQ0ZJO1xuICAgIGlmIChjdXJyZW50U2VsZWN0aW9uKSB7XG4gICAgICBDRkkgPSB0aGlzLmdlbmVyYXRlQ2hhck9mZnNldENGSShjdXJyZW50U2VsZWN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIENGSTtcbiAgfSxcblxuXG4gIC8vLyBUT0RPRE0gcmVmYWN0b3IgdGhoaXMgdXNpbmcgZ2V0Q3VycmVudFNlbGVjdGlvbkNGSSAoYWJvdmUpXG5cblxuICBhZGRTZWxlY3Rpb25IaWdobGlnaHQ6IGZ1bmN0aW9uKGlkLCB0eXBlLCBzdHlsZXMpIHtcblxuICAgIHZhciBhcmJpdHJhcnlQYWNrYWdlRG9jQ0ZJID0gXCIvOTkhXCJcbiAgICB2YXIgZ2VuZXJhdGVkQ29udGVudERvY0NGSTtcbiAgICB2YXIgQ0ZJO1xuICAgIHZhciBzZWxlY3Rpb25JbmZvO1xuICAgIHZhciBjdXJyZW50U2VsZWN0aW9uID0gdGhpcy5nZXRDdXJyZW50U2VsZWN0aW9uUmFuZ2UoKTtcbiAgICB2YXIgYW5ub3RhdGlvbkluZm87XG5cbiAgICBpZiAoY3VycmVudFNlbGVjdGlvbikge1xuXG4gICAgICBzZWxlY3Rpb25JbmZvID0gdGhpcy5nZXRTZWxlY3Rpb25JbmZvKGN1cnJlbnRTZWxlY3Rpb24pO1xuICAgICAgZ2VuZXJhdGVkQ29udGVudERvY0NGSSA9IHNlbGVjdGlvbkluZm8uQ0ZJO1xuICAgICAgQ0ZJID0gXCJlcHViY2ZpKFwiICsgYXJiaXRyYXJ5UGFja2FnZURvY0NGSSArIGdlbmVyYXRlZENvbnRlbnREb2NDRkkgKyBcIilcIjtcbiAgICAgIGlmICh0eXBlID09PSBcImhpZ2hsaWdodFwiKSB7XG4gICAgICAgIGFubm90YXRpb25JbmZvID0gdGhpcy5hZGRIaWdobGlnaHQoQ0ZJLCBpZCwgdHlwZSwgc3R5bGVzKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ1bmRlcmxpbmVcIikge1xuICAgICAgICBhbm5vdGF0aW9uSW5mbyA9IHRoaXMuYWRkSGlnaGxpZ2h0KENGSSwgaWQsIHR5cGUsIHN0eWxlcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJhdGlvbmFsZTogVGhlIGFubm90YXRpb25JbmZvIG9iamVjdCByZXR1cm5lZCBmcm9tIC5hZGRCb29rbWFyayguLi4pIGNvbnRhaW5zIHRoZSBzYW1lIHZhbHVlIG9mIFxuICAgICAgLy8gICB0aGUgQ0ZJIHZhcmlhYmxlIGluIHRoZSBjdXJyZW50IHNjb3BlLiBTaW5jZSB0aGlzIENGSSB2YXJpYWJsZSBjb250YWlucyBhIFwiaGFja2VkXCIgQ0ZJIHZhbHVlIC1cbiAgICAgIC8vICAgb25seSB0aGUgY29udGVudCBkb2N1bWVudCBwb3J0aW9uIGlzIHZhbGlkIC0gd2Ugd2FudCB0byByZXBsYWNlIHRoZSBhbm5vdGF0aW9uSW5mby5DRkkgcHJvcGVydHkgd2l0aFxuICAgICAgLy8gICB0aGUgcGFydGlhbCBjb250ZW50IGRvY3VtZW50IENGSSBwb3J0aW9uIHdlIG9yaWdpbmFsbHkgZ2VuZXJhdGVkLlxuICAgICAgYW5ub3RhdGlvbkluZm8uQ0ZJID0gZ2VuZXJhdGVkQ29udGVudERvY0NGSTtcbiAgICAgIHJldHVybiBhbm5vdGF0aW9uSW5mbztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90aGluZyBzZWxlY3RlZFwiKTtcbiAgICB9XG4gIH0sXG5cbiAgYWRkU2VsZWN0aW9uQm9va21hcms6IGZ1bmN0aW9uKGlkLCB0eXBlKSB7XG5cbiAgICB2YXIgYXJiaXRyYXJ5UGFja2FnZURvY0NGSSA9IFwiLzk5IVwiXG4gICAgdmFyIGdlbmVyYXRlZENvbnRlbnREb2NDRkk7XG4gICAgdmFyIENGSTtcbiAgICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IHRoaXMuZ2V0Q3VycmVudFNlbGVjdGlvblJhbmdlKCk7XG4gICAgdmFyIGFubm90YXRpb25JbmZvO1xuXG4gICAgaWYgKGN1cnJlbnRTZWxlY3Rpb24pIHtcblxuICAgICAgZ2VuZXJhdGVkQ29udGVudERvY0NGSSA9IHRoaXMuZ2VuZXJhdGVDaGFyT2Zmc2V0Q0ZJKGN1cnJlbnRTZWxlY3Rpb24pO1xuICAgICAgQ0ZJID0gXCJlcHViY2ZpKFwiICsgYXJiaXRyYXJ5UGFja2FnZURvY0NGSSArIGdlbmVyYXRlZENvbnRlbnREb2NDRkkgKyBcIilcIjtcbiAgICAgIGFubm90YXRpb25JbmZvID0gdGhpcy5hZGRCb29rbWFyayhDRkksIGlkLCB0eXBlKTtcblxuICAgICAgLy8gUmF0aW9uYWxlOiBUaGUgYW5ub3RhdGlvbkluZm8gb2JqZWN0IHJldHVybmVkIGZyb20gLmFkZEJvb2ttYXJrKC4uLikgY29udGFpbnMgdGhlIHNhbWUgdmFsdWUgb2YgXG4gICAgICAvLyAgIHRoZSBDRkkgdmFyaWFibGUgaW4gdGhlIGN1cnJlbnQgc2NvcGUuIFNpbmNlIHRoaXMgQ0ZJIHZhcmlhYmxlIGNvbnRhaW5zIGEgXCJoYWNrZWRcIiBDRkkgdmFsdWUgLVxuICAgICAgLy8gICBvbmx5IHRoZSBjb250ZW50IGRvY3VtZW50IHBvcnRpb24gaXMgdmFsaWQgLSB3ZSB3YW50IHRvIHJlcGxhY2UgdGhlIGFubm90YXRpb25JbmZvLkNGSSBwcm9wZXJ0eSB3aXRoXG4gICAgICAvLyAgIHRoZSBwYXJ0aWFsIGNvbnRlbnQgZG9jdW1lbnQgQ0ZJIHBvcnRpb24gd2Ugb3JpZ2luYWxseSBnZW5lcmF0ZWQuXG4gICAgICBhbm5vdGF0aW9uSW5mby5DRkkgPSBnZW5lcmF0ZWRDb250ZW50RG9jQ0ZJO1xuICAgICAgcmV0dXJuIGFubm90YXRpb25JbmZvO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3RoaW5nIHNlbGVjdGVkXCIpO1xuICAgIH1cbiAgfSxcblxuICBhZGRTZWxlY3Rpb25JbWFnZUFubm90YXRpb246IGZ1bmN0aW9uKGlkKSB7XG5cbiAgICB2YXIgYXJiaXRyYXJ5UGFja2FnZURvY0NGSSA9IFwiLzk5IVwiXG4gICAgdmFyIGdlbmVyYXRlZENvbnRlbnREb2NDRkk7XG4gICAgdmFyIENGSTtcbiAgICB2YXIgc2VsZWN0aW9uSW5mbztcbiAgICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IHRoaXMuZ2V0Q3VycmVudFNlbGVjdGlvblJhbmdlKCk7XG4gICAgdmFyIGFubm90YXRpb25JbmZvO1xuICAgIHZhciBmaXJzdFNlbGVjdGVkSW1hZ2U7XG5cbiAgICBpZiAoY3VycmVudFNlbGVjdGlvbikge1xuXG4gICAgICBzZWxlY3Rpb25JbmZvID0gdGhpcy5nZXRTZWxlY3Rpb25JbmZvKGN1cnJlbnRTZWxlY3Rpb24sIFtcImltZ1wiXSk7XG4gICAgICBmaXJzdFNlbGVjdGVkSW1hZ2UgPSBzZWxlY3Rpb25JbmZvLnNlbGVjdGVkRWxlbWVudHNbMF07XG4gICAgICBnZW5lcmF0ZWRDb250ZW50RG9jQ0ZJID0gdGhpcy5lcHViQ0ZJLmdlbmVyYXRlRWxlbWVudENGSUNvbXBvbmVudChcbiAgICAgICAgZmlyc3RTZWxlY3RlZEltYWdlLCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXVxuICAgICAgKTtcbiAgICAgIENGSSA9IFwiZXB1YmNmaShcIiArIGFyYml0cmFyeVBhY2thZ2VEb2NDRkkgKyBnZW5lcmF0ZWRDb250ZW50RG9jQ0ZJICsgXCIpXCI7XG4gICAgICBhbm5vdGF0aW9uSW5mbyA9IHRoaXMuYWRkSW1hZ2VBbm5vdGF0aW9uKENGSSwgaWQpO1xuXG4gICAgICAvLyBSYXRpb25hbGU6IFRoZSBhbm5vdGF0aW9uSW5mbyBvYmplY3QgcmV0dXJuZWQgZnJvbSAuYWRkQm9va21hcmsoLi4uKSBjb250YWlucyB0aGUgc2FtZSB2YWx1ZSBvZiBcbiAgICAgIC8vICAgdGhlIENGSSB2YXJpYWJsZSBpbiB0aGUgY3VycmVudCBzY29wZS4gU2luY2UgdGhpcyBDRkkgdmFyaWFibGUgY29udGFpbnMgYSBcImhhY2tlZFwiIENGSSB2YWx1ZSAtXG4gICAgICAvLyAgIG9ubHkgdGhlIGNvbnRlbnQgZG9jdW1lbnQgcG9ydGlvbiBpcyB2YWxpZCAtIHdlIHdhbnQgdG8gcmVwbGFjZSB0aGUgYW5ub3RhdGlvbkluZm8uQ0ZJIHByb3BlcnR5IHdpdGhcbiAgICAgIC8vICAgdGhlIHBhcnRpYWwgY29udGVudCBkb2N1bWVudCBDRkkgcG9ydGlvbiB3ZSBvcmlnaW5hbGx5IGdlbmVyYXRlZC5cbiAgICAgIGFubm90YXRpb25JbmZvLkNGSSA9IGdlbmVyYXRlZENvbnRlbnREb2NDRkk7XG4gICAgICByZXR1cm4gYW5ub3RhdGlvbkluZm87XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdGhpbmcgc2VsZWN0ZWRcIik7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZUFubm90YXRpb25WaWV3OiBmdW5jdGlvbihpZCwgc3R5bGVzKSB7XG5cbiAgICB2YXIgYW5ub3RhdGlvblZpZXdzID0gdGhpcy5hbm5vdGF0aW9ucy51cGRhdGVBbm5vdGF0aW9uVmlldyhpZCwgc3R5bGVzKTtcblxuICAgIHJldHVybiBhbm5vdGF0aW9uVmlld3M7XG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4gIC8vICBcIlBSSVZBVEVcIiBIRUxQRVJTICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIGdldFNlbGVjdGlvbkluZm86IGZ1bmN0aW9uKHNlbGVjdGVkUmFuZ2UsIGVsZW1lbnRUeXBlKSB7XG5cbiAgICAvLyBHZW5lcmF0ZSBDRkkgZm9yIHNlbGVjdGVkIHRleHRcbiAgICB2YXIgQ0ZJID0gdGhpcy5nZW5lcmF0ZVJhbmdlQ0ZJKHNlbGVjdGVkUmFuZ2UpO1xuICAgIHZhciBpbnRlcnZhbFN0YXRlID0ge1xuICAgICAgc3RhcnRFbGVtZW50Rm91bmQ6IGZhbHNlLFxuICAgICAgZW5kRWxlbWVudEZvdW5kOiBmYWxzZVxuICAgIH07XG4gICAgdmFyIHNlbGVjdGVkRWxlbWVudHMgPSBbXTtcblxuICAgIGlmICghZWxlbWVudFR5cGUpIHtcbiAgICAgIHZhciBlbGVtZW50VHlwZSA9IFtcInRleHRcIl07XG4gICAgfVxuXG4gICAgdGhpcy5maW5kU2VsZWN0ZWRFbGVtZW50cyhcbiAgICAgIHNlbGVjdGVkUmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIsXG4gICAgICBzZWxlY3RlZFJhbmdlLnN0YXJ0Q29udGFpbmVyLFxuICAgICAgc2VsZWN0ZWRSYW5nZS5lbmRDb250YWluZXIsXG4gICAgICBpbnRlcnZhbFN0YXRlLFxuICAgICAgc2VsZWN0ZWRFbGVtZW50cyxcbiAgICAgIGVsZW1lbnRUeXBlXG4gICAgKTtcblxuICAgIC8vIFJldHVybiBhIGxpc3Qgb2Ygc2VsZWN0ZWQgdGV4dCBub2RlcyBhbmQgdGhlIENGSVxuICAgIHJldHVybiB7XG4gICAgICBDRkk6IENGSSxcbiAgICAgIHNlbGVjdGVkRWxlbWVudHM6IHNlbGVjdGVkRWxlbWVudHNcbiAgICB9O1xuICB9LFxuXG4gIGdlbmVyYXRlUmFuZ2VDRkk6IGZ1bmN0aW9uKHNlbGVjdGVkUmFuZ2UpIHtcblxuICAgIHZhciBzdGFydE5vZGUgPSBzZWxlY3RlZFJhbmdlLnN0YXJ0Q29udGFpbmVyO1xuICAgIHZhciBlbmROb2RlID0gc2VsZWN0ZWRSYW5nZS5lbmRDb250YWluZXI7XG4gICAgdmFyIHN0YXJ0T2Zmc2V0O1xuICAgIHZhciBlbmRPZmZzZXQ7XG4gICAgdmFyIHJhbmdlQ0ZJQ29tcG9uZW50O1xuXG4gICAgaWYgKHN0YXJ0Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgJiYgZW5kTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcblxuICAgICAgc3RhcnRPZmZzZXQgPSBzZWxlY3RlZFJhbmdlLnN0YXJ0T2Zmc2V0O1xuICAgICAgZW5kT2Zmc2V0ID0gc2VsZWN0ZWRSYW5nZS5lbmRPZmZzZXQ7XG5cbiAgICAgIHJhbmdlQ0ZJQ29tcG9uZW50ID0gdGhpcy5lcHViQ0ZJLmdlbmVyYXRlQ2hhck9mZnNldFJhbmdlQ29tcG9uZW50KFxuICAgICAgICBzdGFydE5vZGUsXG4gICAgICAgIHN0YXJ0T2Zmc2V0LFxuICAgICAgICBlbmROb2RlLFxuICAgICAgICBlbmRPZmZzZXQsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdXG4gICAgICApO1xuICAgICAgcmV0dXJuIHJhbmdlQ0ZJQ29tcG9uZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWxlY3Rpb24gc3RhcnQgYW5kIGVuZCBtdXN0IGJlIHRleHQgbm9kZXNcIik7XG4gICAgfVxuICB9LFxuXG4gIGdlbmVyYXRlQ2hhck9mZnNldENGSTogZnVuY3Rpb24oc2VsZWN0ZWRSYW5nZSkge1xuXG4gICAgLy8gQ2hhcmFjdGVyIG9mZnNldFxuICAgIHZhciBzdGFydE5vZGUgPSBzZWxlY3RlZFJhbmdlLnN0YXJ0Q29udGFpbmVyO1xuICAgIHZhciBzdGFydE9mZnNldCA9IHNlbGVjdGVkUmFuZ2Uuc3RhcnRPZmZzZXQ7XG4gICAgdmFyIGNoYXJPZmZzZXRDRkk7XG5cbiAgICBpZiAoc3RhcnROb2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgY2hhck9mZnNldENGSSA9IHRoaXMuZXB1YkNGSS5nZW5lcmF0ZUNoYXJhY3Rlck9mZnNldENGSUNvbXBvbmVudChcbiAgICAgICAgc3RhcnROb2RlLFxuICAgICAgICBzdGFydE9mZnNldCwgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl1cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjaGFyT2Zmc2V0Q0ZJO1xuICB9LFxuXG4gIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogQ29udmVydCB0aGlzIHRvIGpxdWVyeVxuICBmaW5kU2VsZWN0ZWRFbGVtZW50czogZnVuY3Rpb24oY3VyckVsZW1lbnQsIHN0YXJ0RWxlbWVudCwgZW5kRWxlbWVudCwgaW50ZXJ2YWxTdGF0ZSwgc2VsZWN0ZWRFbGVtZW50cywgZWxlbWVudFR5cGVzKSB7XG5cbiAgICBpZiAoY3VyckVsZW1lbnQgPT09IHN0YXJ0RWxlbWVudCkge1xuICAgICAgaW50ZXJ2YWxTdGF0ZS5zdGFydEVsZW1lbnRGb3VuZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGludGVydmFsU3RhdGUuc3RhcnRFbGVtZW50Rm91bmQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuYWRkRWxlbWVudChjdXJyRWxlbWVudCwgc2VsZWN0ZWRFbGVtZW50cywgZWxlbWVudFR5cGVzKTtcbiAgICB9XG5cbiAgICBpZiAoY3VyckVsZW1lbnQgPT09IGVuZEVsZW1lbnQpIHtcbiAgICAgIGludGVydmFsU3RhdGUuZW5kRWxlbWVudEZvdW5kID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY3VyckVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgdGhpcy5maW5kU2VsZWN0ZWRFbGVtZW50cyhjdXJyRWxlbWVudC5maXJzdENoaWxkLCBzdGFydEVsZW1lbnQsIGVuZEVsZW1lbnQsIGludGVydmFsU3RhdGUsIHNlbGVjdGVkRWxlbWVudHMsIGVsZW1lbnRUeXBlcyk7XG4gICAgICBpZiAoaW50ZXJ2YWxTdGF0ZS5lbmRFbGVtZW50Rm91bmQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjdXJyRWxlbWVudC5uZXh0U2libGluZykge1xuICAgICAgdGhpcy5maW5kU2VsZWN0ZWRFbGVtZW50cyhjdXJyRWxlbWVudC5uZXh0U2libGluZywgc3RhcnRFbGVtZW50LCBlbmRFbGVtZW50LCBpbnRlcnZhbFN0YXRlLCBzZWxlY3RlZEVsZW1lbnRzLCBlbGVtZW50VHlwZXMpO1xuICAgICAgaWYgKGludGVydmFsU3RhdGUuZW5kRWxlbWVudEZvdW5kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgYWRkRWxlbWVudDogZnVuY3Rpb24oY3VyckVsZW1lbnQsIHNlbGVjdGVkRWxlbWVudHMsIGVsZW1lbnRUeXBlcykge1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIG5vZGUgaXMgb25lIG9mIHRoZSB0eXBlc1xuICAgIF8uZWFjaChlbGVtZW50VHlwZXMsIGZ1bmN0aW9uKGVsZW1lbnRUeXBlKSB7XG5cbiAgICAgIGlmIChlbGVtZW50VHlwZSA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgaWYgKGN1cnJFbGVtZW50Lm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICAgIHNlbGVjdGVkRWxlbWVudHMucHVzaChjdXJyRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgkKGN1cnJFbGVtZW50KS5pcyhlbGVtZW50VHlwZSkpIHtcbiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLnB1c2goY3VyckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gUmF0aW9uYWxlOiBUaGlzIGlzIGEgY3Jvc3MtYnJvd3NlciBtZXRob2QgdG8gZ2V0IHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGV4dFxuICBnZXRDdXJyZW50U2VsZWN0aW9uUmFuZ2U6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGN1cnJlbnRTZWxlY3Rpb247XG4gICAgdmFyIGlmcmFtZURvY3VtZW50ID0gdGhpcy5nZXQoXCJjb250ZW50RG9jdW1lbnRET01cIik7XG4gICAgaWYgKGlmcmFtZURvY3VtZW50LmdldFNlbGVjdGlvbikge1xuICAgICAgY3VycmVudFNlbGVjdGlvbiA9IGlmcmFtZURvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuXG4gICAgICBpZiAoY3VycmVudFNlbGVjdGlvbiAmJiBjdXJyZW50U2VsZWN0aW9uLnJhbmdlQ291bnQgJiYgKGN1cnJlbnRTZWxlY3Rpb24uYW5jaG9yT2Zmc2V0ICE9PSBjdXJyZW50U2VsZWN0aW9uLmZvY3VzT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gY3VycmVudFNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlmcmFtZURvY3VtZW50LnNlbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGlmcmFtZURvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcblxuICBnZXRQYWdpbmF0aW9uTGVmdE9mZnNldDogZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgJGh0bWxFbGVtZW50ID0gJChcImh0bWxcIiwgdGhpcy5nZXQoXCJjb250ZW50RG9jdW1lbnRET01cIikpO1xuICAgIHZhciBvZmZzZXRMZWZ0UGl4ZWxzID0gJGh0bWxFbGVtZW50LmNzcyhcImxlZnRcIik7XG4gICAgdmFyIG9mZnNldExlZnQgPSBwYXJzZUludChvZmZzZXRMZWZ0UGl4ZWxzLnJlcGxhY2UoXCJweFwiLCBcIlwiKSk7XG4gICAgcmV0dXJuIG9mZnNldExlZnQ7XG4gIH0sXG5cbiAgZ2V0Qm9va21hcmtNYXJrZXI6IGZ1bmN0aW9uKENGSSwgaWQpIHtcblxuICAgIHJldHVybiBcIjxzcGFuIGNsYXNzPSdib29rbWFyay1tYXJrZXIgY2ZpLW1hcmtlcicgaWQ9J1wiICsgaWQgKyBcIicgZGF0YS1jZmk9J1wiICsgQ0ZJICsgXCInPjwvc3Bhbj5cIjtcbiAgfSxcblxuICBnZXRSYW5nZVN0YXJ0TWFya2VyOiBmdW5jdGlvbihDRkksIGlkKSB7XG5cbiAgICByZXR1cm4gXCI8c3BhbiBjbGFzcz0ncmFuZ2Utc3RhcnQtbWFya2VyIGNmaS1tYXJrZXInIGlkPSdzdGFydC1cIiArIGlkICsgXCInIGRhdGEtY2ZpPSdcIiArIENGSSArIFwiJz48L3NwYW4+XCI7XG4gIH0sXG5cbiAgZ2V0UmFuZ2VFbmRNYXJrZXI6IGZ1bmN0aW9uKENGSSwgaWQpIHtcblxuICAgIHJldHVybiBcIjxzcGFuIGNsYXNzPSdyYW5nZS1lbmQtbWFya2VyIGNmaS1tYXJrZXInIGlkPSdlbmQtXCIgKyBpZCArIFwiJyBkYXRhLWNmaT0nXCIgKyBDRkkgKyBcIic+PC9zcGFuPlwiO1xuICB9LFxuXG4gIGluamVjdEFubm90YXRpb25DU1M6IGZ1bmN0aW9uKGFubm90YXRpb25DU1NVcmwpIHtcblxuICAgIHZhciAkY29udGVudERvY0hlYWQgPSAkKFwiaGVhZFwiLCB0aGlzLmdldChcImNvbnRlbnREb2N1bWVudERPTVwiKSk7XG4gICAgJGNvbnRlbnREb2NIZWFkLmFwcGVuZChcbiAgICAgICQoXCI8bGluay8+XCIsIHtcbiAgICAgICAgcmVsOiBcInN0eWxlc2hlZXRcIixcbiAgICAgICAgaHJlZjogYW5ub3RhdGlvbkNTU1VybCxcbiAgICAgICAgdHlwZTogXCJ0ZXh0L2Nzc1wiXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxvd2FibGVBbm5vdGF0aW9ucyIsInZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcblxuLy8gUmF0aW9uYWxlOiBUaGUgb3JkZXIgb2YgdGhlc2UgbWF0dGVyc1xudmFyIFRleHRMaW5lSW5mZXJyZXIgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHt9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tIFBVQkxJQyBJTlRFUkZBQ0UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBpbmZlckxpbmVzOiBmdW5jdGlvbihyZWN0TGlzdCkge1xuXG4gICAgdmFyIGluZmVycmVkTGluZXMgPSBbXTtcbiAgICB2YXIgbnVtUmVjdHMgPSByZWN0TGlzdC5sZW5ndGg7XG4gICAgdmFyIG51bUxpbmVzID0gMDtcbiAgICB2YXIgY3VyckxpbmU7XG4gICAgdmFyIGN1cnJSZWN0O1xuICAgIHZhciByZWN0QXBwZW5kZWQ7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCByZWN0XG4gICAgZm9yICh2YXIgY3VyclJlY3ROdW0gPSAwOyBjdXJyUmVjdE51bSA8PSBudW1SZWN0cyAtIDE7IGN1cnJSZWN0TnVtKyspIHtcbiAgICAgIGN1cnJSZWN0ID0gcmVjdExpc3RbY3VyclJlY3ROdW1dO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGUgcmVjdCBjYW4gYmUgYWRkZWQgdG8gYW55IG9mIHRoZSBjdXJyZW50IGxpbmVzXG4gICAgICByZWN0QXBwZW5kZWQgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIGN1cnJMaW5lTnVtID0gMDsgY3VyckxpbmVOdW0gPD0gbnVtTGluZXMgLSAxOyBjdXJyTGluZU51bSsrKSB7XG4gICAgICAgIGN1cnJMaW5lID0gaW5mZXJyZWRMaW5lc1tjdXJyTGluZU51bV07XG5cbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZVJlY3RJbkxpbmUoY3VyckxpbmUsIGN1cnJSZWN0LnRvcCwgY3VyclJlY3QubGVmdCwgY3VyclJlY3Qud2lkdGgsIGN1cnJSZWN0LmhlaWdodCkpIHtcbiAgICAgICAgICB0aGlzLmV4cGFuZExpbmUoY3VyckxpbmUsIGN1cnJSZWN0LmxlZnQsIGN1cnJSZWN0LnRvcCwgY3VyclJlY3Qud2lkdGgsIGN1cnJSZWN0LmhlaWdodCk7XG4gICAgICAgICAgcmVjdEFwcGVuZGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVjdEFwcGVuZGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gSWYgdGhlIHJlY3QgY2FuJ3QgYmUgYWRkZWQgdG8gYW55IGV4aXN0aW5nIGxpbmVzLCBjcmVhdGUgYSBuZXcgbGluZVxuICAgICAgZWxzZSB7XG4gICAgICAgIGluZmVycmVkTGluZXMucHVzaCh0aGlzLmNyZWF0ZU5ld0xpbmUoY3VyclJlY3QubGVmdCwgY3VyclJlY3QudG9wLCBjdXJyUmVjdC53aWR0aCwgY3VyclJlY3QuaGVpZ2h0KSk7XG4gICAgICAgIG51bUxpbmVzID0gbnVtTGluZXMgKyAxOyAvLyBVcGRhdGUgdGhlIG51bWJlciBvZiBsaW5lcywgc28gd2UncmUgbm90IHVzaW5nIC5sZW5ndGggb24gZXZlcnkgaXRlcmF0aW9uXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZmVycmVkTGluZXM7XG4gIH0sXG5cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBQUklWQVRFIEhFTFBFUlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgaW5jbHVkZVJlY3RJbkxpbmU6IGZ1bmN0aW9uKGN1cnJMaW5lLCByZWN0VG9wLCByZWN0TGVmdCwgcmVjdFdpZHRoLCByZWN0SGVpZ2h0KSB7XG5cbiAgICAvLyBpcyBvbiBhbiBleGlzdGluZyBsaW5lIDogYmFzZWQgb24gdmVydGljYWwgcG9zaXRpb25cbiAgICBpZiAodGhpcy5yZWN0SXNXaXRoaW5MaW5lVmVydGljYWxseShyZWN0VG9wLCByZWN0SGVpZ2h0LCBjdXJyTGluZS5tYXhUb3AsIGN1cnJMaW5lLm1heEJvdHRvbSkpIHtcbiAgICAgIGlmICh0aGlzLnJlY3RJc1dpdGhpbkxpbmVIb3Jpem9udGFsbHkocmVjdExlZnQsIHJlY3RXaWR0aCwgY3VyckxpbmUubGVmdCwgY3VyckxpbmUud2lkdGgsIGN1cnJMaW5lLmF2Z0hlaWdodCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIHJlY3RJc1dpdGhpbkxpbmVWZXJ0aWNhbGx5OiBmdW5jdGlvbihyZWN0VG9wLCByZWN0SGVpZ2h0LCBjdXJyTGluZU1heFRvcCwgY3VyckxpbmVNYXhCb3R0b20pIHtcblxuICAgIHZhciByZWN0Qm90dG9tID0gcmVjdFRvcCArIHJlY3RIZWlnaHQ7XG4gICAgdmFyIGxpbmVIZWlnaHQgPSBjdXJyTGluZU1heEJvdHRvbSAtIGN1cnJMaW5lTWF4VG9wO1xuICAgIHZhciBsaW5lSGVpZ2h0QWRqdXN0bWVudCA9IChsaW5lSGVpZ2h0ICogMC43NSkgLyAyO1xuICAgIHZhciByZWN0SGVpZ2h0QWRqdXN0bWVudCA9IChyZWN0SGVpZ2h0ICogMC43NSkgLyAyO1xuXG4gICAgcmVjdFRvcCA9IHJlY3RUb3AgKyByZWN0SGVpZ2h0QWRqdXN0bWVudDtcbiAgICByZWN0Qm90dG9tID0gcmVjdEJvdHRvbSAtIHJlY3RIZWlnaHRBZGp1c3RtZW50O1xuICAgIGN1cnJMaW5lTWF4VG9wID0gY3VyckxpbmVNYXhUb3AgKyBsaW5lSGVpZ2h0QWRqdXN0bWVudDtcbiAgICBjdXJyTGluZU1heEJvdHRvbSA9IGN1cnJMaW5lTWF4Qm90dG9tIC0gbGluZUhlaWdodEFkanVzdG1lbnQ7XG5cbiAgICBpZiAocmVjdFRvcCA9PT0gY3VyckxpbmVNYXhUb3AgJiYgcmVjdEJvdHRvbSA9PT0gY3VyckxpbmVNYXhCb3R0b20pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAocmVjdFRvcCA8IGN1cnJMaW5lTWF4VG9wICYmIHJlY3RCb3R0b20gPCBjdXJyTGluZU1heEJvdHRvbSAmJiByZWN0Qm90dG9tID4gY3VyckxpbmVNYXhUb3ApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAocmVjdFRvcCA+IGN1cnJMaW5lTWF4VG9wICYmIHJlY3RCb3R0b20gPiBjdXJyTGluZU1heEJvdHRvbSAmJiByZWN0VG9wIDwgY3VyckxpbmVNYXhCb3R0b20pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAocmVjdFRvcCA+IGN1cnJMaW5lTWF4VG9wICYmIHJlY3RCb3R0b20gPCBjdXJyTGluZU1heEJvdHRvbSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChyZWN0VG9wIDwgY3VyckxpbmVNYXhUb3AgJiYgcmVjdEJvdHRvbSA+IGN1cnJMaW5lTWF4Qm90dG9tKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcblxuICByZWN0SXNXaXRoaW5MaW5lSG9yaXpvbnRhbGx5OiBmdW5jdGlvbihyZWN0TGVmdCwgcmVjdFdpZHRoLCBjdXJyTGluZUxlZnQsIGN1cnJMaW5lV2lkdGgsIGN1cnJMaW5lQXZnSGVpZ2h0KSB7XG5cbiAgICB2YXIgbGluZUdhcEhldXJpc3RpYyA9IDIgKiBjdXJyTGluZUF2Z0hlaWdodDtcbiAgICB2YXIgcmVjdFJpZ2h0ID0gcmVjdExlZnQgKyByZWN0V2lkdGg7XG4gICAgdmFyIGN1cnJMaW5lUmlnaHQgPSByZWN0TGVmdCArIGN1cnJMaW5lV2lkdGg7XG5cbiAgICBpZiAoKGN1cnJMaW5lTGVmdCAtIHJlY3RSaWdodCkgPiBsaW5lR2FwSGV1cmlzdGljKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICgocmVjdExlZnQgLSBjdXJyTGluZVJpZ2h0KSA+IGxpbmVHYXBIZXVyaXN0aWMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuXG4gIGNyZWF0ZU5ld0xpbmU6IGZ1bmN0aW9uKHJlY3RMZWZ0LCByZWN0VG9wLCByZWN0V2lkdGgsIHJlY3RIZWlnaHQpIHtcblxuICAgIHZhciBtYXhCb3R0b20gPSByZWN0VG9wICsgcmVjdEhlaWdodDtcblxuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiByZWN0TGVmdCxcbiAgICAgIHN0YXJ0VG9wOiByZWN0VG9wLFxuICAgICAgd2lkdGg6IHJlY3RXaWR0aCxcbiAgICAgIGF2Z0hlaWdodDogcmVjdEhlaWdodCxcbiAgICAgIG1heFRvcDogcmVjdFRvcCxcbiAgICAgIG1heEJvdHRvbTogbWF4Qm90dG9tLFxuICAgICAgbnVtUmVjdHM6IDFcbiAgICB9O1xuICB9LFxuXG4gIGV4cGFuZExpbmU6IGZ1bmN0aW9uKGN1cnJMaW5lLCByZWN0TGVmdCwgcmVjdFRvcCwgcmVjdFdpZHRoLCByZWN0SGVpZ2h0KSB7XG5cbiAgICB2YXIgbGluZU9sZFJpZ2h0ID0gY3VyckxpbmUubGVmdCArIGN1cnJMaW5lLndpZHRoO1xuXG4gICAgLy8gVXBkYXRlIGFsbCB0aGUgcHJvcGVydGllcyBvZiB0aGUgY3VycmVudCBsaW5lIHdpdGggcmVjdCBkaW1lbnNpb25zXG4gICAgdmFyIHJlY3RSaWdodCA9IHJlY3RMZWZ0ICsgcmVjdFdpZHRoO1xuICAgIHZhciByZWN0Qm90dG9tID0gcmVjdFRvcCArIHJlY3RIZWlnaHQ7XG4gICAgdmFyIG51bVJlY3RzUGx1c09uZSA9IGN1cnJMaW5lLm51bVJlY3RzICsgMTtcblxuICAgIC8vIEF2ZXJhZ2UgaGVpZ2h0IGNhbGN1bGF0aW9uXG4gICAgdmFyIGN1cnJTdW1IZWlnaHRzID0gY3VyckxpbmUuYXZnSGVpZ2h0ICogY3VyckxpbmUubnVtUmVjdHM7XG4gICAgdmFyIGF2Z0hlaWdodCA9ICgoY3VyclN1bUhlaWdodHMgKyByZWN0SGVpZ2h0KSAvIG51bVJlY3RzUGx1c09uZSk7XG4gICAgY3VyckxpbmUuYXZnSGVpZ2h0ID0gYXZnSGVpZ2h0O1xuICAgIGN1cnJMaW5lLm51bVJlY3RzID0gbnVtUmVjdHNQbHVzT25lO1xuXG4gICAgLy8gRXhwYW5kIHRoZSBsaW5lIHZlcnRpY2FsbHlcbiAgICBjdXJyTGluZSA9IHRoaXMuZXhwYW5kTGluZVZlcnRpY2FsbHkoY3VyckxpbmUsIHJlY3RUb3AsIHJlY3RCb3R0b20pO1xuICAgIGN1cnJMaW5lID0gdGhpcy5leHBhbmRMaW5lSG9yaXpvbnRhbGx5KGN1cnJMaW5lLCByZWN0TGVmdCwgcmVjdFJpZ2h0KTtcblxuICAgIHJldHVybiBjdXJyTGluZTtcbiAgfSxcblxuICBleHBhbmRMaW5lVmVydGljYWxseTogZnVuY3Rpb24oY3VyckxpbmUsIHJlY3RUb3AsIHJlY3RCb3R0b20pIHtcblxuICAgIGlmIChyZWN0VG9wIDwgY3VyckxpbmUubWF4VG9wKSB7XG4gICAgICBjdXJyTGluZS5tYXhUb3AgPSByZWN0VG9wO1xuICAgIH1cbiAgICBpZiAocmVjdEJvdHRvbSA+IGN1cnJMaW5lLm1heEJvdHRvbSkge1xuICAgICAgY3VyckxpbmUubWF4Qm90dG9tID0gcmVjdEJvdHRvbTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VyckxpbmU7XG4gIH0sXG5cbiAgZXhwYW5kTGluZUhvcml6b250YWxseTogZnVuY3Rpb24oY3VyckxpbmUsIHJlY3RMZWZ0LCByZWN0UmlnaHQpIHtcblxuICAgIHZhciBuZXdMaW5lTGVmdCA9IGN1cnJMaW5lLmxlZnQgPD0gcmVjdExlZnQgPyBjdXJyTGluZS5sZWZ0IDogcmVjdExlZnQ7XG4gICAgdmFyIGxpbmVSaWdodCA9IGN1cnJMaW5lLmxlZnQgKyBjdXJyTGluZS53aWR0aDtcbiAgICB2YXIgbmV3TGluZVJpZ2h0ID0gbGluZVJpZ2h0ID49IHJlY3RSaWdodCA/IGxpbmVSaWdodCA6IHJlY3RSaWdodDtcbiAgICB2YXIgbmV3TGluZVdpZHRoID0gbmV3TGluZVJpZ2h0IC0gbmV3TGluZUxlZnQ7XG4gICAgY3VyckxpbmUubGVmdCA9IG5ld0xpbmVMZWZ0O1xuICAgIGN1cnJMaW5lLndpZHRoID0gbmV3TGluZVdpZHRoO1xuXG4gICAgcmV0dXJuIGN1cnJMaW5lO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0TGluZUluZmVycmVyIiwidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBUZXh0TGluZUluZmVycmVyID0gcmVxdWlyZSgnLi90ZXh0LWxpbmUtaW5mZXJyZXInKVxudmFyIFVuZGVybGluZVZpZXcgPSByZXF1aXJlKCcuL3VuZGVybGluZS12aWV3JylcblxudmFyIFVuZGVybGluZUdyb3VwID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBcInNlbGVjdGVkTm9kZXNcIjogW10sXG4gICAgICBcInVuZGVybGluZVZpZXdzXCI6IFtdXG4gICAgfTtcbiAgfSxcblxuICBpbml0aWFsaXplOiBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7XG5cbiAgICB0aGlzLmNvbnN0cnVjdFVuZGVybGluZVZpZXdzKCk7XG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tIFBSSVZBVEUgSEVMUEVSUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICB1bmRlcmxpbmVHcm91cENhbGxiYWNrOiBmdW5jdGlvbihldmVudCkge1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgLy8gVHJpZ2dlciB0aGlzIGV2ZW50IG9uIGVhY2ggb2YgdGhlIHVuZGVybGluZSB2aWV3cyAoZXhjZXB0IHRyaWdnZXJpbmcgZXZlbnQpXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIikge1xuICAgICAgdGhhdC5nZXQoXCJiYlBhZ2VTZXRWaWV3XCIpLnRyaWdnZXIoXCJhbm5vdGF0aW9uQ2xpY2tlZFwiLCBcInVuZGVybGluZVwiLCB0aGF0LmdldChcIkNGSVwiKSwgdGhhdC5nZXQoXCJpZFwiKSwgZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEV2ZW50cyB0aGF0IGFyZSBjYWxsZWQgb24gZWFjaCBtZW1iZXIgb2YgdGhlIGdyb3VwXG4gICAgXy5lYWNoKHRoaXMuZ2V0KFwidW5kZXJsaW5lVmlld3NcIiksIGZ1bmN0aW9uKHVuZGVybGluZVZpZXcpIHtcblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwibW91c2VlbnRlclwiKSB7XG4gICAgICAgIHVuZGVybGluZVZpZXcuc2V0SG92ZXJVbmRlcmxpbmUoKTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gXCJtb3VzZWxlYXZlXCIpIHtcbiAgICAgICAgdW5kZXJsaW5lVmlldy5zZXRCYXNlVW5kZXJsaW5lKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgY29uc3RydWN0VW5kZXJsaW5lVmlld3M6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciByZWN0TGlzdCA9IFtdO1xuICAgIHZhciBpbmZlcnJlcjtcbiAgICB2YXIgaW5mZXJyZWRMaW5lcztcblxuICAgIF8uZWFjaCh0aGlzLmdldChcInNlbGVjdGVkTm9kZXNcIiksIGZ1bmN0aW9uKG5vZGUsIGluZGV4KSB7XG5cbiAgICAgIHZhciByZWN0cztcbiAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XG4gICAgICByZWN0cyA9IHJhbmdlLmdldENsaWVudFJlY3RzKCk7XG5cbiAgICAgIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogTWF5YmUgYSBiZXR0ZXIgd2F5IHRvIGFwcGVuZCBhbiBhcnJheSBoZXJlXG4gICAgICBfLmVhY2gocmVjdHMsIGZ1bmN0aW9uKHJlY3QpIHtcbiAgICAgICAgcmVjdExpc3QucHVzaChyZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaW5mZXJyZXIgPSBuZXcgVGV4dExpbmVJbmZlcnJlcigpO1xuICAgIGluZmVycmVkTGluZXMgPSBpbmZlcnJlci5pbmZlckxpbmVzKHJlY3RMaXN0KTtcblxuICAgIF8uZWFjaChpbmZlcnJlZExpbmVzLCBmdW5jdGlvbihsaW5lLCBpbmRleCkge1xuXG4gICAgICB2YXIgdW5kZXJsaW5lVG9wID0gbGluZS5zdGFydFRvcDtcbiAgICAgIHZhciB1bmRlcmxpbmVMZWZ0ID0gbGluZS5sZWZ0O1xuICAgICAgdmFyIHVuZGVybGluZUhlaWdodCA9IGxpbmUuYXZnSGVpZ2h0O1xuICAgICAgdmFyIHVuZGVybGluZVdpZHRoID0gbGluZS53aWR0aDtcblxuICAgICAgdmFyIHVuZGVybGluZVZpZXcgPSBuZXcgVW5kZXJsaW5lVmlldyh7XG4gICAgICAgIENGSTogdGhhdC5nZXQoXCJDRklcIiksXG4gICAgICAgIHRvcDogdW5kZXJsaW5lVG9wICsgdGhhdC5nZXQoXCJvZmZzZXRUb3BBZGRpdGlvblwiKSxcbiAgICAgICAgbGVmdDogdW5kZXJsaW5lTGVmdCArIHRoYXQuZ2V0KFwib2Zmc2V0TGVmdEFkZGl0aW9uXCIpLFxuICAgICAgICBoZWlnaHQ6IHVuZGVybGluZUhlaWdodCxcbiAgICAgICAgd2lkdGg6IHVuZGVybGluZVdpZHRoLFxuICAgICAgICBzdHlsZXM6IHRoYXQuZ2V0KFwic3R5bGVzXCIpLFxuICAgICAgICB1bmRlcmxpbmVHcm91cENhbGxiYWNrOiB0aGF0LnVuZGVybGluZUdyb3VwQ2FsbGJhY2ssXG4gICAgICAgIGNhbGxiYWNrQ29udGV4dDogdGhhdFxuICAgICAgfSk7XG5cbiAgICAgIHRoYXQuZ2V0KFwidW5kZXJsaW5lVmlld3NcIikucHVzaCh1bmRlcmxpbmVWaWV3KTtcbiAgICB9KTtcbiAgfSxcblxuICByZXNldFVuZGVybGluZXM6IGZ1bmN0aW9uKHZpZXdwb3J0RWxlbWVudCwgb2Zmc2V0VG9wLCBvZmZzZXRMZWZ0KSB7XG5cbiAgICBpZiAob2Zmc2V0VG9wKSB7XG4gICAgICB0aGlzLnNldCh7XG4gICAgICAgIG9mZnNldFRvcEFkZGl0aW9uOiBvZmZzZXRUb3BcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0TGVmdCkge1xuICAgICAgdGhpcy5zZXQoe1xuICAgICAgICBvZmZzZXRMZWZ0QWRkaXRpb246IG9mZnNldExlZnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuZGVzdHJveUN1cnJlbnRVbmRlcmxpbmVzKCk7XG4gICAgdGhpcy5jb25zdHJ1Y3RVbmRlcmxpbmVWaWV3cygpO1xuICAgIHRoaXMucmVuZGVyVW5kZXJsaW5lcyh2aWV3cG9ydEVsZW1lbnQpO1xuICB9LFxuXG4gIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogRW5zdXJlIHRoYXQgZXZlbnQgbGlzdGVuZXJzIGFyZSBiZWluZyBwcm9wZXJseSBjbGVhbmVkIHVwLiBcbiAgZGVzdHJveUN1cnJlbnRVbmRlcmxpbmVzOiBmdW5jdGlvbigpIHtcblxuICAgIF8uZWFjaCh0aGlzLmdldChcInVuZGVybGluZVZpZXdzXCIpLCBmdW5jdGlvbih1bmRlcmxpbmVWaWV3KSB7XG4gICAgICB1bmRlcmxpbmVWaWV3LnJlbW92ZSgpO1xuICAgICAgdW5kZXJsaW5lVmlldy5vZmYoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZ2V0KFwidW5kZXJsaW5lVmlld3NcIikubGVuZ3RoID0gMDtcbiAgfSxcblxuICByZW5kZXJVbmRlcmxpbmVzOiBmdW5jdGlvbih2aWV3cG9ydEVsZW1lbnQpIHtcblxuICAgIF8uZWFjaCh0aGlzLmdldChcInVuZGVybGluZVZpZXdzXCIpLCBmdW5jdGlvbih2aWV3LCBpbmRleCkge1xuICAgICAgJCh2aWV3cG9ydEVsZW1lbnQpLmFwcGVuZCh2aWV3LnJlbmRlcigpKTtcbiAgICB9KTtcbiAgfSxcblxuICB0b0luZm86IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgaWQ6IHRoaXMuZ2V0KFwiaWRcIiksXG4gICAgICB0eXBlOiBcInVuZGVybGluZVwiLFxuICAgICAgQ0ZJOiB0aGlzLmdldChcIkNGSVwiKVxuICAgIH07XG4gIH0sXG5cbiAgc2V0U3R5bGVzOiBmdW5jdGlvbihzdHlsZXMpIHtcblxuICAgIHZhciB1bmRlcmxpbmVWaWV3cyA9IHRoaXMuZ2V0KCd1bmRlcmxpbmVWaWV3cycpO1xuXG4gICAgdGhpcy5zZXQoe1xuICAgICAgc3R5bGVzOiBzdHlsZXNcbiAgICB9KTtcblxuICAgIF8uZWFjaCh1bmRlcmxpbmVWaWV3cywgZnVuY3Rpb24odmlldywgaW5kZXgpIHtcbiAgICAgIHZpZXcuc2V0U3R5bGVzKHN0eWxlcyk7XG4gICAgfSk7XG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBVbmRlcmxpbmVHcm91cCIsInZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBVbmRlcmxpbmUgPSByZXF1aXJlKCcuL3VuZGVybGluZScpXG5cbnZhciBVbmRlcmxpbmVWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuXG4gIGVsOiBcIjxkaXYgY2xhc3M9J3VuZGVybGluZS1yYW5nZSc+IFxcXG4gICAgICAgICAgICAgPGRpdiBjbGFzcz0ndHJhbnNwYXJlbnQtcGFydCc+PC9kaXY+IFxcXG4gICAgICAgICAgICAgPGRpdiBjbGFzcz0ndW5kZXJsaW5lLXBhcnQnPjwvZGl2PiBcXFxuICAgICAgICAgIDwvZGl2PlwiLFxuXG4gIGV2ZW50czoge1xuICAgIFwibW91c2VlbnRlclwiOiBcInVuZGVybGluZUV2ZW50XCIsXG4gICAgXCJtb3VzZWxlYXZlXCI6IFwidW5kZXJsaW5lRXZlbnRcIixcbiAgICBcImNsaWNrXCI6IFwidW5kZXJsaW5lRXZlbnRcIlxuICB9LFxuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAgIHRoaXMudW5kZXJsaW5lID0gbmV3IFVuZGVybGluZSh7XG4gICAgICBDRkk6IG9wdGlvbnMuQ0ZJLFxuICAgICAgdG9wOiBvcHRpb25zLnRvcCxcbiAgICAgIGxlZnQ6IG9wdGlvbnMubGVmdCxcbiAgICAgIGhlaWdodDogb3B0aW9ucy5oZWlnaHQsXG4gICAgICB3aWR0aDogb3B0aW9ucy53aWR0aCxcbiAgICAgIHN0eWxlczogb3B0aW9ucy5zdHlsZXMsXG4gICAgICB1bmRlcmxpbmVHcm91cENhbGxiYWNrOiBvcHRpb25zLnVuZGVybGluZUdyb3VwQ2FsbGJhY2ssXG4gICAgICBjYWxsYmFja0NvbnRleHQ6IG9wdGlvbnMuY2FsbGJhY2tDb250ZXh0XG4gICAgfSk7XG5cbiAgICB0aGlzLiR0cmFuc3BhcmVudEVsZW1lbnQgPSAkKFwiLnRyYW5zcGFyZW50LXBhcnRcIiwgdGhpcy4kZWwpO1xuICAgIHRoaXMuJHVuZGVybGluZUVsZW1lbnQgPSAkKFwiLnVuZGVybGluZS1wYXJ0XCIsIHRoaXMuJGVsKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgdGhpcy5zZXRDU1MoKTtcbiAgICByZXR1cm4gdGhpcy5lbDtcbiAgfSxcblxuICByZXNldFBvc2l0aW9uOiBmdW5jdGlvbih0b3AsIGxlZnQsIGhlaWdodCwgd2lkdGgpIHtcblxuICAgIHRoaXMudW5kZXJsaW5lLnNldCh7XG4gICAgICB0b3A6IHRvcCxcbiAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIHdpZHRoOiB3aWR0aFxuICAgIH0pO1xuICAgIHRoaXMuc2V0Q1NTKCk7XG4gIH0sXG5cbiAgc2V0U3R5bGVzOiBmdW5jdGlvbihzdHlsZXMpIHtcblxuICAgIHRoaXMudW5kZXJsaW5lLnNldCh7XG4gICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9LFxuXG4gIHNldENTUzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMudW5kZXJsaW5lLmdldChcInN0eWxlc1wiKSB8fCB7fTtcblxuICAgIHRoaXMuJGVsLmNzcyh7XG4gICAgICBcInRvcFwiOiB0aGlzLnVuZGVybGluZS5nZXQoXCJ0b3BcIikgKyBcInB4XCIsXG4gICAgICBcImxlZnRcIjogdGhpcy51bmRlcmxpbmUuZ2V0KFwibGVmdFwiKSArIFwicHhcIixcbiAgICAgIFwiaGVpZ2h0XCI6IHRoaXMudW5kZXJsaW5lLmdldChcImhlaWdodFwiKSArIFwicHhcIixcbiAgICAgIFwid2lkdGhcIjogdGhpcy51bmRlcmxpbmUuZ2V0KFwid2lkdGhcIikgKyBcInB4XCIsXG4gICAgfSk7XG5cbiAgICAvLyBVbmRlcmxpbmUgcGFydFxuICAgIHRoaXMuJHVuZGVybGluZUVsZW1lbnQuY3NzKHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBzdHlsZXMuZmlsbF9jb2xvciB8fCBcIm5vcm1hbFwiLFxuICAgIH0pO1xuXG5cbiAgICB0aGlzLiR1bmRlcmxpbmVFbGVtZW50LmFkZENsYXNzKFwidW5kZXJsaW5lXCIpO1xuICB9LFxuXG4gIHVuZGVybGluZUV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdmFyIHVuZGVybGluZUdyb3VwQ2FsbGJhY2sgPSB0aGlzLnVuZGVybGluZS5nZXQoXCJ1bmRlcmxpbmVHcm91cENhbGxiYWNrXCIpO1xuICAgIHZhciB1bmRlcmxpbmVHcm91cENvbnRleHQgPSB0aGlzLnVuZGVybGluZS5nZXQoXCJjYWxsYmFja0NvbnRleHRcIik7XG4gICAgdW5kZXJsaW5lR3JvdXBDb250ZXh0LnVuZGVybGluZUdyb3VwQ2FsbGJhY2soZXZlbnQpO1xuICB9LFxuXG4gIHNldEJhc2VVbmRlcmxpbmU6IGZ1bmN0aW9uKCkge1xuXG4gICAgdGhpcy4kdW5kZXJsaW5lRWxlbWVudC5hZGRDbGFzcyhcInVuZGVybGluZVwiKTtcbiAgICB0aGlzLiR1bmRlcmxpbmVFbGVtZW50LnJlbW92ZUNsYXNzKFwiaG92ZXItdW5kZXJsaW5lXCIpO1xuICB9LFxuXG4gIHNldEhvdmVyVW5kZXJsaW5lOiBmdW5jdGlvbigpIHtcblxuICAgIHRoaXMuJHVuZGVybGluZUVsZW1lbnQuYWRkQ2xhc3MoXCJob3Zlci11bmRlcmxpbmVcIik7XG4gICAgdGhpcy4kdW5kZXJsaW5lRWxlbWVudC5yZW1vdmVDbGFzcyhcInVuZGVybGluZVwiKTtcbiAgfSxcbn0pO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVW5kZXJsaW5lVmlldyIsInZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcblxudmFyIFVuZGVybGluZSA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gIGRlZmF1bHRzOiB7XG4gICAgXCJpc1Zpc2libGVcIjogZmFsc2VcbiAgfSxcblxuICBpbml0aWFsaXplOiBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVW5kZXJsaW5lIiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbnZhciBVUkkgPSByZXF1aXJlKCdVUklqcycpO1xudmFyIENvbnRlbnRUeXBlRGlzY292ZXJ5ID0gcmVxdWlyZSgnLi9kaXNjb3Zlci1jb250ZW50LXR5cGUnKTtcblxuZnVuY3Rpb24gQ29udGVudERvY3VtZW50RmV0Y2hlcihwdWJsaWNhdGlvbkZldGNoZXIsIHNwaW5lSXRlbSwgbG9hZGVkRG9jdW1lbnRVcmksIHB1YmxpY2F0aW9uUmVzb3VyY2VzQ2FjaGUpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIF9jb250ZW50RG9jdW1lbnRQYXRoUmVsYXRpdmVUb1BhY2thZ2UgPSBzcGluZUl0ZW0uaHJlZjtcbiAgdmFyIF9wdWJsaWNhdGlvbkZldGNoZXIgPSBwdWJsaWNhdGlvbkZldGNoZXI7XG4gIHZhciBfY29udGVudERvY3VtZW50VGV4dDtcbiAgdmFyIF9zcmNNZWRpYVR5cGUgPSBzcGluZUl0ZW0ubWVkaWFfdHlwZTtcbiAgdmFyIF9jb250ZW50RG9jdW1lbnREb207XG4gIHZhciBfcHVibGljYXRpb25SZXNvdXJjZXNDYWNoZSA9IHB1YmxpY2F0aW9uUmVzb3VyY2VzQ2FjaGU7XG5cbiAgLy8gUFVCTElDIEFQSVxuXG4gIHRoaXMuZmV0Y2hDb250ZW50RG9jdW1lbnRBbmRSZXNvbHZlRG9tID0gZnVuY3Rpb24oY29udGVudERvY3VtZW50UmVzb2x2ZWRDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgIF9wdWJsaWNhdGlvbkZldGNoZXIucmVsYXRpdmVUb1BhY2thZ2VGZXRjaEZpbGVDb250ZW50cyhfY29udGVudERvY3VtZW50UGF0aFJlbGF0aXZlVG9QYWNrYWdlLCAndGV4dCcsXG4gICAgICBmdW5jdGlvbihjb250ZW50RG9jdW1lbnRUZXh0KSB7XG4gICAgICAgIF9jb250ZW50RG9jdW1lbnRUZXh0ID0gY29udGVudERvY3VtZW50VGV4dDtcbiAgICAgICAgc2VsZi5yZXNvbHZlSW50ZXJuYWxQYWNrYWdlUmVzb3VyY2VzKGNvbnRlbnREb2N1bWVudFJlc29sdmVkQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAgfSwgZXJyb3JDYWxsYmFja1xuICAgICk7XG4gIH07XG5cbiAgdGhpcy5yZXNvbHZlSW50ZXJuYWxQYWNrYWdlUmVzb3VyY2VzID0gZnVuY3Rpb24ocmVzb2x2ZWREb2N1bWVudENhbGxiYWNrLCBvbmVycm9yKSB7XG5cbiAgICBfY29udGVudERvY3VtZW50RG9tID0gX3B1YmxpY2F0aW9uRmV0Y2hlci5tYXJrdXBQYXJzZXIucGFyc2VNYXJrdXAoX2NvbnRlbnREb2N1bWVudFRleHQsIF9zcmNNZWRpYVR5cGUpO1xuICAgIHNldEJhc2VVcmkoX2NvbnRlbnREb2N1bWVudERvbSwgbG9hZGVkRG9jdW1lbnRVcmkpO1xuXG4gICAgdmFyIHJlc29sdXRpb25EZWZlcnJlZHMgPSBbXTtcblxuICAgIGlmIChfcHVibGljYXRpb25GZXRjaGVyLnNob3VsZEZldGNoTWVkaWFBc3NldHNQcm9ncmFtbWF0aWNhbGx5KCkpIHtcbiAgICAgIHJlc29sdmVEb2N1bWVudEltYWdlcyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKTtcbiAgICAgIHJlc29sdmVEb2N1bWVudEF1ZGlvcyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKTtcbiAgICAgIHJlc29sdmVEb2N1bWVudFZpZGVvcyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKTtcbiAgICB9XG4gICAgLy8gVE9ETzogcmVjdXJzaXZlIGZldGNoaW5nLCBwYXJzaW5nIGFuZCBET00gY29uc3RydWN0aW9uIG9mIGRvY3VtZW50cyBpbiBJRlJBTUVzLFxuICAgIC8vIHdpdGggQ1NTIHByZXByb2Nlc3NpbmcgYW5kIG9iZnVzY2F0ZWQgZm9udCBoYW5kbGluZ1xuICAgIHJlc29sdmVEb2N1bWVudElmcmFtZXMocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gICAgLy8gVE9ETzogcmVzb2x1dGlvbiAoZS5nLiB1c2luZyBET00gbXV0YXRpb24gZXZlbnRzKSBvZiBzY3JpcHRzIGxvYWRlZCBkeW5hbWljYWxseSBieSBzY3JpcHRzXG4gICAgcmVzb2x2ZURvY3VtZW50U2NyaXB0cyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKTtcbiAgICByZXNvbHZlRG9jdW1lbnRMaW5rU3R5bGVzaGVldHMocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gICAgcmVzb2x2ZURvY3VtZW50RW1iZWRkZWRTdHlsZXNoZWV0cyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKTtcblxuICAgICQud2hlbi5hcHBseSgkLCByZXNvbHV0aW9uRGVmZXJyZWRzKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZWREb2N1bWVudENhbGxiYWNrKF9jb250ZW50RG9jdW1lbnREb20pO1xuICAgIH0pO1xuXG4gIH07XG5cbiAgLy8gSU5URVJOQUwgRlVOQ1RJT05TXG5cbiAgZnVuY3Rpb24gc2V0QmFzZVVyaShkb2N1bWVudERvbSwgYmFzZVVSSSkge1xuICAgIHZhciBiYXNlRWxlbSA9IGRvY3VtZW50RG9tLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdiYXNlJylbMF07XG4gICAgaWYgKCFiYXNlRWxlbSkge1xuICAgICAgYmFzZUVsZW0gPSBkb2N1bWVudERvbS5jcmVhdGVFbGVtZW50KCdiYXNlJyk7XG5cbiAgICAgIHZhciBhbmNob3IgPSBkb2N1bWVudERvbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgYW5jaG9yLmluc2VydEJlZm9yZShiYXNlRWxlbSwgYW5jaG9yLmNoaWxkTm9kZXNbMF0pO1xuICAgIH1cbiAgICBiYXNlRWxlbS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBiYXNlVVJJKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9oYW5kbGVFcnJvcihlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm1lc3NhZ2UpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmV0Y2hSZXNvdXJjZUZvckVsZW1lbnQocmVzb2x2ZWRFbGVtLCByZWZBdHRyT3JpZ1ZhbCwgcmVmQXR0ciwgZmV0Y2hNb2RlLCByZXNvbHV0aW9uRGVmZXJyZWRzLFxuICAgIG9uZXJyb3IsIHJlc291cmNlRGF0YVByZXByb2Nlc3NpbmcpIHtcbiAgICB2YXIgcmVzb3VyY2VVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50ID0gKG5ldyBVUkkocmVmQXR0ck9yaWdWYWwpKS5hYnNvbHV0ZVRvKF9jb250ZW50RG9jdW1lbnRQYXRoUmVsYXRpdmVUb1BhY2thZ2UpLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIgY2FjaGVkUmVzb3VyY2VVcmwgPSBfcHVibGljYXRpb25SZXNvdXJjZXNDYWNoZS5nZXRSZXNvdXJjZVVSTChyZXNvdXJjZVVyaVJlbGF0aXZlVG9QYWNrYWdlRG9jdW1lbnQpO1xuXG4gICAgZnVuY3Rpb24gcmVwbGFjZVJlZkF0dHJJbkVsZW0obmV3UmVzb3VyY2VVcmwpIHtcbiAgICAgIC8vIFN0b3JlIG9yaWdpbmFsIHJlZkF0dHJWYWwgaW4gYSBzcGVjaWFsIGF0dHJpYnV0ZSB0byBwcm92aWRlIGFjY2VzcyB0byB0aGUgb3JpZ2luYWwgaHJlZjpcbiAgICAgICQocmVzb2x2ZWRFbGVtKS5kYXRhKCdlcHViWmlwT3JpZ0hyZWYnLCByZWZBdHRyT3JpZ1ZhbCk7XG4gICAgICAkKHJlc29sdmVkRWxlbSkuYXR0cihyZWZBdHRyLCBuZXdSZXNvdXJjZVVybCk7XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlZFJlc291cmNlVXJsKSB7XG4gICAgICByZXBsYWNlUmVmQXR0ckluRWxlbShjYWNoZWRSZXNvdXJjZVVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZXNvbHV0aW9uRGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgICByZXNvbHV0aW9uRGVmZXJyZWRzLnB1c2gocmVzb2x1dGlvbkRlZmVycmVkKTtcblxuICAgICAgX3B1YmxpY2F0aW9uRmV0Y2hlci5yZWxhdGl2ZVRvUGFja2FnZUZldGNoRmlsZUNvbnRlbnRzKHJlc291cmNlVXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCxcbiAgICAgICAgZmV0Y2hNb2RlLFxuICAgICAgICBmdW5jdGlvbihyZXNvdXJjZURhdGEpIHtcblxuICAgICAgICAgIC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gdG8gcmVwbGFjZSBlbGVtZW50J3MgcmVzb3VyY2UgVVJMIHdpdGggVVJMIG9mIGZldGNoZWQgZGF0YS5cbiAgICAgICAgICAvLyBUaGUgZnVuY3Rpb24gd2lsbCBlaXRoZXIgYmUgY2FsbGVkIGRpcmVjdGx5LCBpbW1lZGlhdGVseSAoaWYgbm8gcHJlcHJvY2Vzc2luZyBvZiByZXNvdXJjZURhdGEgaXMgaW4gZWZmZWN0KVxuICAgICAgICAgIC8vIG9yIGluZGlyZWN0bHksIGxhdGVyIGFmdGVyIHJlc291cmNlRGF0YSBwcmVwcm9jZXNzaW5nIGZpbmlzaGVzOlxuICAgICAgICAgIHZhciByZXBsYWNlUmVzb3VyY2VVUkwgPSBmdW5jdGlvbihmaW5hbFJlc291cmNlRGF0YSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRpbmcgYW4gb2JqZWN0IFVSTCByZXF1aXJlcyBhIEJsb2Igb2JqZWN0LCBzbyByZXNvdXJjZSBkYXRhIGZldGNoZWQgaW4gdGV4dCBtb2RlIG5lZWRzIHRvIGJlIHdyYXBwZWQgaW4gYSBCbG9iOlxuICAgICAgICAgICAgaWYgKGZldGNoTW9kZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgIHZhciB0ZXh0UmVzb3VyY2VDb250ZW50VHlwZSA9IENvbnRlbnRUeXBlRGlzY292ZXJ5LmlkZW50aWZ5Q29udGVudFR5cGVGcm9tRmlsZU5hbWUocmVzb3VyY2VVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50KTtcbiAgICAgICAgICAgICAgdmFyIGRlY2xhcmVkVHlwZSA9ICQocmVzb2x2ZWRFbGVtKS5hdHRyKCd0eXBlJyk7XG4gICAgICAgICAgICAgIGlmIChkZWNsYXJlZFR5cGUpIHtcbiAgICAgICAgICAgICAgICB0ZXh0UmVzb3VyY2VDb250ZW50VHlwZSA9IGRlY2xhcmVkVHlwZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmaW5hbFJlc291cmNlRGF0YSA9IG5ldyBCbG9iKFtmaW5hbFJlc291cmNlRGF0YV0sIHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0ZXh0UmVzb3VyY2VDb250ZW50VHlwZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlLEpTVW5yZXNvbHZlZEZ1bmN0aW9uXG4gICAgICAgICAgICB2YXIgcmVzb3VyY2VPYmplY3RVUkwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChmaW5hbFJlc291cmNlRGF0YSk7XG4gICAgICAgICAgICBfcHVibGljYXRpb25SZXNvdXJjZXNDYWNoZS5wdXRSZXNvdXJjZVVSTChyZXNvdXJjZVVyaVJlbGF0aXZlVG9QYWNrYWdlRG9jdW1lbnQsXG4gICAgICAgICAgICAgIHJlc291cmNlT2JqZWN0VVJMKTtcbiAgICAgICAgICAgIC8vIFRPRE86IHRha2UgY2FyZSBvZiByZWxlYXNpbmcgb2JqZWN0IFVSTHMgd2hlbiBubyBsb25nZXIgbmVlZGVkXG4gICAgICAgICAgICByZXBsYWNlUmVmQXR0ckluRWxlbShyZXNvdXJjZU9iamVjdFVSTCk7XG4gICAgICAgICAgICByZXNvbHV0aW9uRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocmVzb3VyY2VEYXRhUHJlcHJvY2Vzc2luZykge1xuICAgICAgICAgICAgcmVzb3VyY2VEYXRhUHJlcHJvY2Vzc2luZyhyZXNvdXJjZURhdGEsIHJlc291cmNlVXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCxcbiAgICAgICAgICAgICAgcmVwbGFjZVJlc291cmNlVVJMKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwbGFjZVJlc291cmNlVVJMKHJlc291cmNlRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBvbmVycm9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmZXRjaFJlc291cmNlRm9yQ3NzVXJsTWF0Y2goY3NzVXJsTWF0Y2gsIGNzc1Jlc291cmNlRG93bmxvYWREZWZlcnJlZHMsXG4gICAgc3R5bGVTaGVldFVyaVJlbGF0aXZlVG9QYWNrYWdlRG9jdW1lbnQsIHN0eWxlc2hlZXRDc3NSZXNvdXJjZVVybHNNYXAsXG4gICAgaXNTdHlsZVNoZWV0UmVzb3VyY2UpIHtcbiAgICB2YXIgb3JpZ01hdGNoZWRVcmxTdHJpbmcgPSBjc3NVcmxNYXRjaFswXTtcblxuICAgIHZhciBleHRyYWN0ZWRVcmxDYW5kaWRhdGVzID0gY3NzVXJsTWF0Y2guc2xpY2UoMik7XG4gICAgdmFyIGV4dHJhY3RlZFVybCA9IF8uZmluZChleHRyYWN0ZWRVcmxDYW5kaWRhdGVzLCBmdW5jdGlvbihtYXRjaEdyb3VwKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG1hdGNoR3JvdXAgIT09ICd1bmRlZmluZWQnXG4gICAgfSk7XG5cbiAgICB2YXIgZXh0cmFjdGVkVXJpID0gbmV3IFVSSShleHRyYWN0ZWRVcmwpO1xuICAgIHZhciBpc0Nzc1VybFJlbGF0aXZlID0gZXh0cmFjdGVkVXJpLnNjaGVtZSgpID09PSAnJztcbiAgICBpZiAoIWlzQ3NzVXJsUmVsYXRpdmUpIHtcbiAgICAgIC8vIEFic29sdXRlIFVSTHMgZG9uJ3QgbmVlZCBwcm9ncmFtbWF0aWMgZmV0Y2hpbmdcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlc291cmNlVXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCA9IChuZXcgVVJJKGV4dHJhY3RlZFVybCkpLmFic29sdXRlVG8oc3R5bGVTaGVldFVyaVJlbGF0aXZlVG9QYWNrYWdlRG9jdW1lbnQpLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIgY2FjaGVkUmVzb3VyY2VVUkwgPSBfcHVibGljYXRpb25SZXNvdXJjZXNDYWNoZS5nZXRSZXNvdXJjZVVSTChyZXNvdXJjZVVyaVJlbGF0aXZlVG9QYWNrYWdlRG9jdW1lbnQpO1xuXG5cbiAgICBpZiAoY2FjaGVkUmVzb3VyY2VVUkwpIHtcbiAgICAgIHN0eWxlc2hlZXRDc3NSZXNvdXJjZVVybHNNYXBbb3JpZ01hdGNoZWRVcmxTdHJpbmddID0ge1xuICAgICAgICBpc1N0eWxlU2hlZXRSZXNvdXJjZTogaXNTdHlsZVNoZWV0UmVzb3VyY2UsXG4gICAgICAgIHJlc291cmNlT2JqZWN0VVJMOiBjYWNoZWRSZXNvdXJjZVVSTFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNzc1VybEZldGNoRGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgICBjc3NSZXNvdXJjZURvd25sb2FkRGVmZXJyZWRzLnB1c2goY3NzVXJsRmV0Y2hEZWZlcnJlZCk7XG5cbiAgICAgIHZhciBwcm9jZXNzZWRCbG9iQ2FsbGJhY2sgPSBmdW5jdGlvbihyZXNvdXJjZURhdGFCbG9iKSB7XG4gICAgICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlLEpTVW5yZXNvbHZlZEZ1bmN0aW9uXG4gICAgICAgIHZhciByZXNvdXJjZU9iamVjdFVSTCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKHJlc291cmNlRGF0YUJsb2IpO1xuICAgICAgICBzdHlsZXNoZWV0Q3NzUmVzb3VyY2VVcmxzTWFwW29yaWdNYXRjaGVkVXJsU3RyaW5nXSA9IHtcbiAgICAgICAgICBpc1N0eWxlU2hlZXRSZXNvdXJjZTogaXNTdHlsZVNoZWV0UmVzb3VyY2UsXG4gICAgICAgICAgcmVzb3VyY2VPYmplY3RVUkw6IHJlc291cmNlT2JqZWN0VVJMXG4gICAgICAgIH07XG4gICAgICAgIF9wdWJsaWNhdGlvblJlc291cmNlc0NhY2hlLnB1dFJlc291cmNlVVJMKHJlc291cmNlVXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCwgcmVzb3VyY2VPYmplY3RVUkwpO1xuICAgICAgICBjc3NVcmxGZXRjaERlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICB2YXIgZmV0Y2hFcnJvckNhbGxiYWNrID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgX2hhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgY3NzVXJsRmV0Y2hEZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZmV0Y2hNb2RlO1xuICAgICAgdmFyIGZldGNoQ2FsbGJhY2s7XG4gICAgICBpZiAoaXNTdHlsZVNoZWV0UmVzb3VyY2UpIHtcbiAgICAgICAgLy8gVE9ETzogdGVzdCB3aGV0aGVyIHJlY3Vyc2lvbiB3b3JrcyBmb3IgbmVzdGVkIEBpbXBvcnQgcnVsZXMgd2l0aCBhcmJpdHJhcnkgaW5kaXJlY3Rpb24gZGVwdGguXG4gICAgICAgIGZldGNoTW9kZSA9ICd0ZXh0JztcbiAgICAgICAgZmV0Y2hDYWxsYmFjayA9IGZ1bmN0aW9uKHN0eWxlU2hlZXRSZXNvdXJjZURhdGEpIHtcbiAgICAgICAgICBwcmVwcm9jZXNzQ3NzU3R5bGVTaGVldERhdGEoc3R5bGVTaGVldFJlc291cmNlRGF0YSwgcmVzb3VyY2VVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50LFxuICAgICAgICAgICAgZnVuY3Rpb24ocHJlcHJvY2Vzc2VkU3R5bGVTaGVldERhdGEpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc291cmNlRGF0YUJsb2IgPSBuZXcgQmxvYihbcHJlcHJvY2Vzc2VkU3R5bGVTaGVldERhdGFdLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQvY3NzJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcHJvY2Vzc2VkQmxvYkNhbGxiYWNrKHJlc291cmNlRGF0YUJsb2IpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmV0Y2hNb2RlID0gJ2Jsb2InO1xuICAgICAgICBmZXRjaENhbGxiYWNrID0gcHJvY2Vzc2VkQmxvYkNhbGxiYWNrO1xuICAgICAgfVxuXG4gICAgICBfcHVibGljYXRpb25GZXRjaGVyLnJlbGF0aXZlVG9QYWNrYWdlRmV0Y2hGaWxlQ29udGVudHMocmVzb3VyY2VVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50LFxuICAgICAgICBmZXRjaE1vZGUsXG4gICAgICAgIGZldGNoQ2FsbGJhY2ssIGZldGNoRXJyb3JDYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlcHJvY2Vzc0Nzc1N0eWxlU2hlZXREYXRhKHN0eWxlU2hlZXRSZXNvdXJjZURhdGEsIHN0eWxlU2hlZXRVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50LFxuICAgIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNzc1VybFJlZ2V4cCA9IC9bVXVdW1JyXVtMbF1cXChcXHMqKFsnXShbXiddKylbJ118W1wiXShbXlwiXSspW1wiXXwoW14pXSspKVxccypcXCkvZztcbiAgICB2YXIgbm9uVXJsQ3NzSW1wb3J0UmVnZXhwID0gL0BbSWldW01tXVtQcF1bT29dW1JyXVtUdF1cXHMqKCcoW14nXSspJ3xcIihbXlwiXSspXCIpL2c7XG4gICAgdmFyIHN0eWxlc2hlZXRDc3NSZXNvdXJjZVVybHNNYXAgPSB7fTtcbiAgICB2YXIgY3NzUmVzb3VyY2VEb3dubG9hZERlZmVycmVkcyA9IFtdO1xuICAgIC8vIEdvIHRocm91Z2ggdGhlIHN0eWxlc2hlZXQgdGV4dCB1c2luZyBhbGwgcmVnZXhwcyBhbmQgcHJvY2VzcyBhY2NvcmRpbmcgdG8gdGhvc2UgcmVnZXhwIG1hdGNoZXMsIGlmIGFueTpcbiAgICBbbm9uVXJsQ3NzSW1wb3J0UmVnZXhwLCBjc3NVcmxSZWdleHBdLmZvckVhY2goZnVuY3Rpb24ocHJvY2Vzc2luZ1JlZ2V4cCkge1xuICAgICAgLy8gZXh0cmFjdCBhbGwgVVJMIHJlZmVyZW5jZXMgaW4gdGhlIENTUyBzaGVldCxcbiAgICAgIHZhciBjc3NVcmxNYXRjaCA9IHByb2Nlc3NpbmdSZWdleHAuZXhlYyhzdHlsZVNoZWV0UmVzb3VyY2VEYXRhKTtcbiAgICAgIHdoaWxlIChjc3NVcmxNYXRjaCAhPSBudWxsKSB7XG4gICAgICAgIC8vIHRoZW4gZmV0Y2ggYW5kIHJlcGxhY2UgdGhlbSB3aXRoIGNvcnJlc3BvbmRpbmcgb2JqZWN0IFVSTHM6XG4gICAgICAgIHZhciBpc1N0eWxlU2hlZXRSZXNvdXJjZSA9IGZhbHNlO1xuICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIG9mIEBpbXBvcnQtZWQgc3R5bGVzaGVldCBmaWxlcyAtIHJlY3Vyc2l2ZSBwcmVwcm9jZXNzaW5nOlxuICAgICAgICAvLyBUT0RPOiB3aWxsIG5vdCBwcm9wZXJseSBoYW5kbGUgQGltcG9ydCB1cmwoLi4uKTpcbiAgICAgICAgaWYgKHByb2Nlc3NpbmdSZWdleHAgPT0gbm9uVXJsQ3NzSW1wb3J0UmVnZXhwKSB7XG4gICAgICAgICAgLy8gVGhpcyByZXNvdXJjZSBVUkwgcG9pbnRzIHRvIGFuIEBpbXBvcnQtZWQgQ1NTIHN0eWxlc2hlZXQgZmlsZS4gTmVlZCB0byBwcmVwcm9jZXNzIGl0cyB0ZXh0XG4gICAgICAgICAgLy8gYWZ0ZXIgZmV0Y2hpbmcgYnV0IGJlZm9yZSBtYWtpbmcgYW4gb2JqZWN0IFVSTCBvZiBpdDpcbiAgICAgICAgICBpc1N0eWxlU2hlZXRSZXNvdXJjZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZmV0Y2hSZXNvdXJjZUZvckNzc1VybE1hdGNoKGNzc1VybE1hdGNoLCBjc3NSZXNvdXJjZURvd25sb2FkRGVmZXJyZWRzLFxuICAgICAgICAgIHN0eWxlU2hlZXRVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50LCBzdHlsZXNoZWV0Q3NzUmVzb3VyY2VVcmxzTWFwLCBpc1N0eWxlU2hlZXRSZXNvdXJjZSk7XG4gICAgICAgIGNzc1VybE1hdGNoID0gcHJvY2Vzc2luZ1JlZ2V4cC5leGVjKHN0eWxlU2hlZXRSZXNvdXJjZURhdGEpO1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICBpZiAoY3NzUmVzb3VyY2VEb3dubG9hZERlZmVycmVkcy5sZW5ndGggPiAwKSB7XG4gICAgICAkLndoZW4uYXBwbHkoJCwgY3NzUmVzb3VyY2VEb3dubG9hZERlZmVycmVkcykuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgb3JpZ01hdGNoZWRVcmxTdHJpbmcgaW4gc3R5bGVzaGVldENzc1Jlc291cmNlVXJsc01hcCkge1xuICAgICAgICAgIHZhciBwcm9jZXNzZWRSZXNvdXJjZURlc2NyaXB0b3IgPSBzdHlsZXNoZWV0Q3NzUmVzb3VyY2VVcmxzTWFwW29yaWdNYXRjaGVkVXJsU3RyaW5nXTtcblxuXG4gICAgICAgICAgdmFyIHByb2Nlc3NlZFVybFN0cmluZztcbiAgICAgICAgICBpZiAocHJvY2Vzc2VkUmVzb3VyY2VEZXNjcmlwdG9yLmlzU3R5bGVTaGVldFJlc291cmNlKSB7XG4gICAgICAgICAgICBwcm9jZXNzZWRVcmxTdHJpbmcgPSAnQGltcG9ydCBcIicgKyBwcm9jZXNzZWRSZXNvdXJjZURlc2NyaXB0b3IucmVzb3VyY2VPYmplY3RVUkwgKyAnXCInO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzZWRVcmxTdHJpbmcgPSBcInVybCgnXCIgKyBwcm9jZXNzZWRSZXNvdXJjZURlc2NyaXB0b3IucmVzb3VyY2VPYmplY3RVUkwgKyBcIicpXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmlnTWF0Y2hlZFVybFN0cmluZ0VzY2FwZWQgPSBvcmlnTWF0Y2hlZFVybFN0cmluZy5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZyxcbiAgICAgICAgICAgIFwiXFxcXCQmXCIpO1xuICAgICAgICAgIHZhciBvcmlnTWF0Y2hlZFVybFN0cmluZ1JlZ0V4cCA9IG5ldyBSZWdFeHAob3JpZ01hdGNoZWRVcmxTdHJpbmdFc2NhcGVkLCAnZycpO1xuICAgICAgICAgIC8vbm9pbnNwZWN0aW9uIEpTQ2hlY2tGdW5jdGlvblNpZ25hdHVyZXNcbiAgICAgICAgICBzdHlsZVNoZWV0UmVzb3VyY2VEYXRhID1cbiAgICAgICAgICAgIHN0eWxlU2hlZXRSZXNvdXJjZURhdGEucmVwbGFjZShvcmlnTWF0Y2hlZFVybFN0cmluZ1JlZ0V4cCwgcHJvY2Vzc2VkVXJsU3RyaW5nLCAnZycpO1xuXG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2soc3R5bGVTaGVldFJlc291cmNlRGF0YSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soc3R5bGVTaGVldFJlc291cmNlRGF0YSk7XG4gICAgfVxuICB9XG5cblxuICBmdW5jdGlvbiByZXNvbHZlUmVzb3VyY2VFbGVtZW50cyhlbGVtTmFtZSwgcmVmQXR0ciwgZmV0Y2hNb2RlLCByZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yLFxuICAgIHJlc291cmNlRGF0YVByZXByb2Nlc3NpbmcpIHtcblxuICAgIHZhciByZXNvbHZlZEVsZW1zID0gJChlbGVtTmFtZSArICdbJyArIHJlZkF0dHIgKyAnXScsIF9jb250ZW50RG9jdW1lbnREb20pO1xuXG4gICAgcmVzb2x2ZWRFbGVtcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCByZXNvbHZlZEVsZW0pIHtcbiAgICAgIHZhciByZWZBdHRyT3JpZ1ZhbCA9ICQocmVzb2x2ZWRFbGVtKS5hdHRyKHJlZkF0dHIpO1xuICAgICAgdmFyIHJlZkF0dHJVcmkgPSBuZXcgVVJJKHJlZkF0dHJPcmlnVmFsKTtcblxuICAgICAgaWYgKHJlZkF0dHJVcmkuc2NoZW1lKCkgPT09ICcnKSB7XG4gICAgICAgIC8vIFJlbGF0aXZlIFVSSSwgZmV0Y2ggZnJvbSBwYWNrZWQgRVBVQiBhcmNoaXZlOlxuXG4gICAgICAgIGZldGNoUmVzb3VyY2VGb3JFbGVtZW50KHJlc29sdmVkRWxlbSwgcmVmQXR0ck9yaWdWYWwsIHJlZkF0dHIsIGZldGNoTW9kZSwgcmVzb2x1dGlvbkRlZmVycmVkcyxcbiAgICAgICAgICBvbmVycm9yLCByZXNvdXJjZURhdGFQcmVwcm9jZXNzaW5nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVEb2N1bWVudEltYWdlcyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKSB7XG4gICAgcmVzb2x2ZVJlc291cmNlRWxlbWVudHMoJ2ltZycsICdzcmMnLCAnYmxvYicsIHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZURvY3VtZW50QXVkaW9zKHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpIHtcbiAgICByZXNvbHZlUmVzb3VyY2VFbGVtZW50cygnYXVkaW8nLCAnc3JjJywgJ2Jsb2InLCByZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVEb2N1bWVudFZpZGVvcyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKSB7XG4gICAgcmVzb2x2ZVJlc291cmNlRWxlbWVudHMoJ3ZpZGVvJywgJ3NyYycsICdibG9iJywgcmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gICAgcmVzb2x2ZVJlc291cmNlRWxlbWVudHMoJ3ZpZGVvJywgJ3Bvc3RlcicsICdibG9iJywgcmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlRG9jdW1lbnRTY3JpcHRzKHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpIHtcbiAgICByZXNvbHZlUmVzb3VyY2VFbGVtZW50cygnc2NyaXB0JywgJ3NyYycsICdibG9iJywgcmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlRG9jdW1lbnRJZnJhbWVzKHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpIHtcbiAgICByZXNvbHZlUmVzb3VyY2VFbGVtZW50cygnaWZyYW1lJywgJ3NyYycsICdibG9iJywgcmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlRG9jdW1lbnRMaW5rU3R5bGVzaGVldHMocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcikge1xuICAgIHJlc29sdmVSZXNvdXJjZUVsZW1lbnRzKCdsaW5rJywgJ2hyZWYnLCAndGV4dCcsIHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IsXG4gICAgICBwcmVwcm9jZXNzQ3NzU3R5bGVTaGVldERhdGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZURvY3VtZW50RW1iZWRkZWRTdHlsZXNoZWV0cyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKSB7XG4gICAgdmFyIHJlc29sdmVkRWxlbXMgPSAkKCdzdHlsZScsIF9jb250ZW50RG9jdW1lbnREb20pO1xuICAgIHJlc29sdmVkRWxlbXMuZWFjaChmdW5jdGlvbihpbmRleCwgcmVzb2x2ZWRFbGVtKSB7XG4gICAgICB2YXIgcmVzb2x1dGlvbkRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgICAgcmVzb2x1dGlvbkRlZmVycmVkcy5wdXNoKHJlc29sdXRpb25EZWZlcnJlZCk7XG4gICAgICB2YXIgc3R5bGVTaGVldERhdGEgPSAkKHJlc29sdmVkRWxlbSkudGV4dCgpO1xuICAgICAgcHJlcHJvY2Vzc0Nzc1N0eWxlU2hlZXREYXRhKHN0eWxlU2hlZXREYXRhLCBfY29udGVudERvY3VtZW50UGF0aFJlbGF0aXZlVG9QYWNrYWdlLFxuICAgICAgICBmdW5jdGlvbihyZXNvbHZlZFN0eWxlc2hlZXREYXRhKSB7XG4gICAgICAgICAgJChyZXNvbHZlZEVsZW0pLnRleHQocmVzb2x2ZWRTdHlsZXNoZWV0RGF0YSk7XG4gICAgICAgICAgcmVzb2x1dGlvbkRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb250ZW50RG9jdW1lbnRGZXRjaGVyOyIsIi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG52YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xudmFyIFVSSSA9IHJlcXVpcmUoJ1VSSWpzJyk7XG5cbnZhciBfaW5zdGFuY2UgPSB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIENvbnRlbnRUeXBlRGlzY292ZXJ5KCkge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBDb250ZW50VHlwZURpc2NvdmVyeS5zdWZmaXhDb250ZW50VHlwZU1hcCA9IHtcbiAgICBjc3M6ICd0ZXh0L2NzcycsXG4gICAgZXB1YjogJ2FwcGxpY2F0aW9uL2VwdWIremlwJyxcbiAgICBnaWY6ICdpbWFnZS9naWYnLFxuICAgIGh0bWw6ICd0ZXh0L2h0bWwnLFxuICAgIGpwZzogJ2ltYWdlL2pwZWcnLFxuICAgIGpwZWc6ICdpbWFnZS9qcGVnJyxcbiAgICBuY3g6ICdhcHBsaWNhdGlvbi94LWR0Ym5jeCt4bWwnLFxuICAgIG9wZjogJ2FwcGxpY2F0aW9uL29lYnBzLXBhY2thZ2UreG1sJyxcbiAgICBwbmc6ICdpbWFnZS9wbmcnLFxuICAgIHN2ZzogJ2ltYWdlL3N2Zyt4bWwnLFxuICAgIHhodG1sOiAnYXBwbGljYXRpb24veGh0bWwreG1sJ1xuICB9O1xuXG4gIHRoaXMuaWRlbnRpZnlDb250ZW50VHlwZUZyb21GaWxlTmFtZSA9IGZ1bmN0aW9uKGNvbnRlbnRVcmwpIHtcbiAgICB2YXIgY29udGVudFVybFN1ZmZpeCA9IFVSSShjb250ZW50VXJsKS5zdWZmaXgoKTtcbiAgICB2YXIgY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJztcbiAgICBpZiAodHlwZW9mIENvbnRlbnRUeXBlRGlzY292ZXJ5LnN1ZmZpeENvbnRlbnRUeXBlTWFwW2NvbnRlbnRVcmxTdWZmaXhdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29udGVudFR5cGUgPSBDb250ZW50VHlwZURpc2NvdmVyeS5zdWZmaXhDb250ZW50VHlwZU1hcFtjb250ZW50VXJsU3VmZml4XTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRUeXBlO1xuICB9O1xuXG4gIHRoaXMuaWRlbnRpZnlDb250ZW50VHlwZSA9IGZ1bmN0aW9uKGNvbnRlbnRVcmwpIHtcbiAgICAvLyBUT0RPOiBNYWtlIHRoZSBjYWxsIGFzeW5jaHJvbm91cyAod2hpY2ggd291bGQgcmVxdWlyZSBhIGNhbGxiYWNrIGFuZCB3b3VsZCBwcm9iYWJseSBtYWtlIHNlbnNlXG4gICAgLy8gd2hlbiBjYWxsaW5nIGZ1bmN0aW9ucyBhcmUgYWxzbyByZW1vZGVsbGVkIGZvciBhc3luYykuXG5cbiAgICB2YXIgY29udGVudFR5cGUgPSAkLmFqYXgoe1xuICAgICAgdHlwZTogXCJIRUFEXCIsXG4gICAgICB1cmw6IGNvbnRlbnRVcmwsXG4gICAgICBhc3luYzogZmFsc2VcbiAgICB9KS5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSBudWxsKSB7XG4gICAgICBjb250ZW50VHlwZSA9IHNlbGYuaWRlbnRpZnlDb250ZW50VHlwZUZyb21GaWxlTmFtZShjb250ZW50VXJsKTtcbiAgICAgIGNvbnNvbGUubG9nKCdndWVzc2VkIGNvbnRlbnRUeXBlIFsnICsgY29udGVudFR5cGUgKyAnXSBmcm9tIFVSSSBbJyArIGNvbnRlbnRVcmwgK1xuICAgICAgICAnXS4gQ29uZmlndXJpbmcgdGhlIHdlYiBzZXJ2ZXIgdG8gcHJvdmlkZSB0aGUgY29udGVudCB0eXBlIGlzIHJlY29tbWVuZGVkLicpO1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRlbnRUeXBlO1xuICB9XG5cbn07XG5cbmlmICghX2luc3RhbmNlKSB7XG4gIF9pbnN0YW5jZSA9IG5ldyBDb250ZW50VHlwZURpc2NvdmVyeSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnN0YW5jZTsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcblxuZnVuY3Rpb24gRW5jcnlwdGlvbkhhbmRsZXIoZW5jcnlwdGlvbkRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBFTkNSWVBUSU9OX01FVEhPRFMgPSB7XG4gICAgJ2h0dHA6Ly93d3cuaWRwZi5vcmcvMjAwOC9lbWJlZGRpbmcnOiBlbWJlZGRlZEZvbnREZW9iZnVzY2F0ZUlkcGYsXG4gICAgJ2h0dHA6Ly9ucy5hZG9iZS5jb20vcGRmL2VuYyNSQyc6IGVtYmVkZGVkRm9udERlb2JmdXNjYXRlQWRvYmVcbiAgfTtcblxuICAvLyBJTlRFUk5BTCBGVU5DVElPTlNcblxuICBmdW5jdGlvbiBibG9iMkJpbkFycmF5KGJsb2IsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJyYXlCdWZmZXIgPSB0aGlzLnJlc3VsdDtcbiAgICAgIGNhbGxiYWNrKG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgfTtcbiAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpO1xuICB9XG5cbiAgZnVuY3Rpb24geG9yT2JmdXNjYXRlZEJsb2Iob2JmdXNjYXRlZFJlc291cmNlQmxvYiwgcHJlZml4TGVuZ3RoLCB4b3JLZXksIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9iZnVzY2F0ZWRQcmVmaXhCbG9iID0gb2JmdXNjYXRlZFJlc291cmNlQmxvYi5zbGljZSgwLCBwcmVmaXhMZW5ndGgpO1xuICAgIGJsb2IyQmluQXJyYXkob2JmdXNjYXRlZFByZWZpeEJsb2IsIGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICB2YXIgbWFza2xlbiA9IHhvcktleS5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJ5dGVzW2ldID0gYnl0ZXNbaV0gXiAoeG9yS2V5W2kgJSBtYXNrbGVuXSk7XG4gICAgICB9XG4gICAgICB2YXIgZGVvYmZ1c2NhdGVkUHJlZml4QmxvYiA9IG5ldyBCbG9iKFtieXRlc10sIHtcbiAgICAgICAgdHlwZTogb2JmdXNjYXRlZFJlc291cmNlQmxvYi50eXBlXG4gICAgICB9KTtcbiAgICAgIHZhciByZW1haW5kZXJCbG9iID0gb2JmdXNjYXRlZFJlc291cmNlQmxvYi5zbGljZShwcmVmaXhMZW5ndGgpO1xuICAgICAgdmFyIGRlb2JmdXNjYXRlZEJsb2IgPSBuZXcgQmxvYihbZGVvYmZ1c2NhdGVkUHJlZml4QmxvYiwgcmVtYWluZGVyQmxvYl0sIHtcbiAgICAgICAgdHlwZTogb2JmdXNjYXRlZFJlc291cmNlQmxvYi50eXBlXG4gICAgICB9KTtcblxuICAgICAgY2FsbGJhY2soZGVvYmZ1c2NhdGVkQmxvYik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbWJlZGRlZEZvbnREZW9iZnVzY2F0ZUlkcGYob2JmdXNjYXRlZFJlc291cmNlQmxvYiwgY2FsbGJhY2spIHtcblxuICAgIHZhciBwcmVmaXhMZW5ndGggPSAxMDQwO1xuICAgIC8vIFNoYW1lbGVzc2x5IGNvcGllZCBmcm9tXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWRpdW0vcmVhZGl1bS1jaHJvbWUtZXh0ZW5zaW9uL2Jsb2IvMjZkNGIwY2FmZDI1NGNmYTkzYmY3ZjYyMjU4ODdiODMwNTI2NDJlMC9zY3JpcHRzL21vZGVscy9wYXRoX3Jlc29sdmVyLmpzI0wxMDIgOlxuICAgIHhvck9iZnVzY2F0ZWRCbG9iKG9iZnVzY2F0ZWRSZXNvdXJjZUJsb2IsIHByZWZpeExlbmd0aCwgZW5jcnlwdGlvbkRhdGEudWlkSGFzaCwgY2FsbGJhY2spO1xuICB9XG5cbiAgZnVuY3Rpb24gdXJuVXVpZFRvQnl0ZUFycmF5KGlkKSB7XG4gICAgdmFyIHV1aWRSZWdleHAgPSAvKHVybjp1dWlkOik/KFswLTlhLWZdezh9KS0oWzAtOWEtZl17NH0pLShbMC05YS1mXXs0fSktKFswLTlhLWZdezR9KS0oWzAtOWEtZl17MTJ9KS9pO1xuICAgIHZhciBtYXRjaFJlc3VsdHMgPSB1dWlkUmVnZXhwLmV4ZWMoaWQpO1xuICAgIHZhciByYXdVdWlkID0gbWF0Y2hSZXN1bHRzWzJdICsgbWF0Y2hSZXN1bHRzWzNdICsgbWF0Y2hSZXN1bHRzWzRdICsgbWF0Y2hSZXN1bHRzWzVdICsgbWF0Y2hSZXN1bHRzWzZdO1xuICAgIGlmICghcmF3VXVpZCB8fCByYXdVdWlkLmxlbmd0aCAhPSAzMikge1xuICAgICAgY29uc29sZS5lcnJvcignQmFkIFVVSUQgZm9ybWF0IGZvciBJRCA6JyArIGlkKTtcbiAgICB9XG4gICAgdmFyIGJ5dGVBcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgdmFyIGJ5dGVIZXggPSByYXdVdWlkLnN1YnN0cihpICogMiwgMik7XG4gICAgICB2YXIgYnl0ZU51bWJlciA9IHBhcnNlSW50KGJ5dGVIZXgsIDE2KTtcbiAgICAgIGJ5dGVBcnJheS5wdXNoKGJ5dGVOdW1iZXIpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZUFycmF5O1xuICB9XG5cbiAgZnVuY3Rpb24gZW1iZWRkZWRGb250RGVvYmZ1c2NhdGVBZG9iZShvYmZ1c2NhdGVkUmVzb3VyY2VCbG9iLCBjYWxsYmFjaykge1xuXG4gICAgLy8gZXh0cmFjdCB0aGUgVVVJRCBhbmQgY29udmVydCB0byBiaWctZW5kaWFuIGJpbmFyeSBmb3JtICgxNiBieXRlcyk6XG4gICAgdmFyIHVpZFdvcmRBcnJheSA9IHVyblV1aWRUb0J5dGVBcnJheShlbmNyeXB0aW9uRGF0YS51aWQpO1xuICAgIHZhciBwcmVmaXhMZW5ndGggPSAxMDI0O1xuICAgIHhvck9iZnVzY2F0ZWRCbG9iKG9iZnVzY2F0ZWRSZXNvdXJjZUJsb2IsIHByZWZpeExlbmd0aCwgdWlkV29yZEFycmF5LCBjYWxsYmFjaylcbiAgfVxuXG5cbiAgLy8gUFVCTElDIEFQSVxuXG4gIHRoaXMuaXNFbmNyeXB0aW9uU3BlY2lmaWVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGVuY3J5cHRpb25EYXRhICYmIGVuY3J5cHRpb25EYXRhLmVuY3J5cHRpb25zO1xuICB9O1xuXG5cbiAgdGhpcy5nZXRFbmNyeXB0aW9uTWV0aG9kRm9yUmVsYXRpdmVQYXRoID0gZnVuY3Rpb24ocGF0aFJlbGF0aXZlVG9Sb290KSB7XG4gICAgaWYgKHNlbGYuaXNFbmNyeXB0aW9uU3BlY2lmaWVkKCkpIHtcbiAgICAgIHJldHVybiBlbmNyeXB0aW9uRGF0YS5lbmNyeXB0aW9uc1twYXRoUmVsYXRpdmVUb1Jvb3RdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldERlY3J5cHRpb25GdW5jdGlvbkZvclJlbGF0aXZlUGF0aCA9IGZ1bmN0aW9uKHBhdGhSZWxhdGl2ZVRvUm9vdCkge1xuICAgIHZhciBlbmNyeXB0aW9uTWV0aG9kID0gc2VsZi5nZXRFbmNyeXB0aW9uTWV0aG9kRm9yUmVsYXRpdmVQYXRoKHBhdGhSZWxhdGl2ZVRvUm9vdCk7XG4gICAgaWYgKGVuY3J5cHRpb25NZXRob2QgJiYgRU5DUllQVElPTl9NRVRIT0RTW2VuY3J5cHRpb25NZXRob2RdKSB7XG4gICAgICByZXR1cm4gRU5DUllQVElPTl9NRVRIT0RTW2VuY3J5cHRpb25NZXRob2RdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxufTtcblxuRW5jcnlwdGlvbkhhbmRsZXIuQ3JlYXRlRW5jcnlwdGlvbkRhdGEgPSBmdW5jdGlvbihpZCwgZW5jcnlwdGlvbkRvbSkge1xuXG4gIHZhciBlbmNyeXB0aW9uRGF0YSA9IHtcbiAgICB1aWQ6IGlkLFxuICAgIHVpZEhhc2g6IHdpbmRvdy5DcnlwdG8uU0hBMSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoaWQudHJpbSgpKSksIHtcbiAgICAgIGFzQnl0ZXM6IHRydWVcbiAgICB9KSxcbiAgICBlbmNyeXB0aW9uczogdW5kZWZpbmVkXG4gIH07XG5cbiAgdmFyIGVuY3J5cHRlZERhdGEgPSAkKCdFbmNyeXB0ZWREYXRhJywgZW5jcnlwdGlvbkRvbSk7XG4gIGVuY3J5cHRlZERhdGEuZWFjaChmdW5jdGlvbihpbmRleCwgZW5jcnlwdGVkRGF0YSkge1xuICAgIHZhciBlbmNyeXB0aW9uQWxnb3JpdGhtID0gJCgnRW5jcnlwdGlvbk1ldGhvZCcsIGVuY3J5cHRlZERhdGEpLmZpcnN0KCkuYXR0cignQWxnb3JpdGhtJyk7XG5cbiAgICAvLyBGb3Igc29tZSByZWFzb24sIGpRdWVyeSBzZWxlY3RvciBcIlwiIGFnYWluc3QgWE1MIERPTSBzb21ldGltZXMgZG9lc24ndCBtYXRjaCBwcm9wZXJseVxuICAgIHZhciBjaXBoZXJSZWZlcmVuY2UgPSAkKCdDaXBoZXJSZWZlcmVuY2UnLCBlbmNyeXB0ZWREYXRhKTtcbiAgICBjaXBoZXJSZWZlcmVuY2UuZWFjaChmdW5jdGlvbihpbmRleCwgQ2lwaGVyUmVmZXJlbmNlKSB7XG4gICAgICB2YXIgY2lwaGVyUmVmZXJlbmNlVVJJID0gJChDaXBoZXJSZWZlcmVuY2UpLmF0dHIoJ1VSSScpO1xuICAgICAgY29uc29sZS5sb2coJ0VuY3J5cHRpb24vb2JmdXNjYXRpb24gYWxnb3JpdGhtICcgKyBlbmNyeXB0aW9uQWxnb3JpdGhtICsgJyBzcGVjaWZpZWQgZm9yICcgK1xuICAgICAgICBjaXBoZXJSZWZlcmVuY2VVUkkpO1xuXG4gICAgICBpZiAoIWVuY3J5cHRpb25EYXRhLmVuY3J5cHRpb25zKSB7XG4gICAgICAgIGVuY3J5cHRpb25EYXRhLmVuY3J5cHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIGVuY3J5cHRpb25EYXRhLmVuY3J5cHRpb25zW2NpcGhlclJlZmVyZW5jZVVSSV0gPSBlbmNyeXB0aW9uQWxnb3JpdGhtO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZW5jcnlwdGlvbkRhdGE7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVuY3J5cHRpb25IYW5kbGVyOyIsIi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG5mdW5jdGlvbiBNYXJrdXBQYXJzZXIoKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucGFyc2VYbWwgPSBmdW5jdGlvbih4bWxTdHJpbmcpIHtcbiAgICByZXR1cm4gc2VsZi5wYXJzZU1hcmt1cCh4bWxTdHJpbmcsICd0ZXh0L3htbCcpO1xuICB9O1xuXG4gIHRoaXMucGFyc2VNYXJrdXAgPSBmdW5jdGlvbihtYXJrdXBTdHJpbmcsIGNvbnRlbnRUeXBlKSB7XG4gICAgdmFyIHBhcnNlciA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyO1xuICAgIHJldHVybiBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKG1hcmt1cFN0cmluZywgY29udGVudFR5cGUpO1xuICB9O1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcmt1cFBhcnNlcjsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyIFVSSSA9IHJlcXVpcmUoJ1VSSWpzJyk7XG52YXIgQ29udGVudFR5cGVEaXNjb3ZlcnkgPSByZXF1aXJlKCcuL2Rpc2NvdmVyLWNvbnRlbnQtdHlwZScpO1xuXG5mdW5jdGlvbiBQbGFpblJlc291cmNlRmV0Y2hlcihwYXJlbnRGZXRjaGVyLCBiYXNlVXJsKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgX3BhY2thZ2VEb2N1bWVudEFic29sdXRlVXJsO1xuICB2YXIgX3BhY2thZ2VEb2N1bWVudFJlbGF0aXZlUGF0aDtcblxuICAvLyBJTlRFUk5BTCBGVU5DVElPTlNcblxuICBmdW5jdGlvbiBmZXRjaEZpbGVDb250ZW50cyhwYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCByZWFkQ2FsbGJhY2ssIG9uZXJyb3IpIHtcbiAgICB2YXIgZmlsZVVybCA9IHNlbGYucmVzb2x2ZVVSSShwYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290KTtcblxuICAgIGlmICh0eXBlb2YgcGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93ICdGZXRjaGVkIGZpbGUgcmVsYXRpdmUgcGF0aCBpcyB1bmRlZmluZWQhJztcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4oJ0dFVCcsIGZpbGVVcmwsIHRydWUpO1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgIHhoci5vbmVycm9yID0gb25lcnJvcjtcblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbihsb2FkRXZlbnQpIHtcbiAgICAgIHJlYWRDYWxsYmFjayh4aHIucmVzcG9uc2UpO1xuICAgIH07XG5cbiAgICB4aHIuc2VuZCgpO1xuICB9XG5cblxuICAvLyBQVUJMSUMgQVBJXG5cbiAgdGhpcy5pbml0aWFsaXplID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICAgIHBhcmVudEZldGNoZXIuZ2V0WG1sRmlsZURvbSgnTUVUQS1JTkYvY29udGFpbmVyLnhtbCcsIGZ1bmN0aW9uKGNvbnRhaW5lclhtbERvbSkge1xuICAgICAgX3BhY2thZ2VEb2N1bWVudFJlbGF0aXZlUGF0aCA9IHBhcmVudEZldGNoZXIuZ2V0Um9vdEZpbGUoY29udGFpbmVyWG1sRG9tKTtcbiAgICAgIF9wYWNrYWdlRG9jdW1lbnRBYnNvbHV0ZVVybCA9IHNlbGYucmVzb2x2ZVVSSShfcGFja2FnZURvY3VtZW50UmVsYXRpdmVQYXRoKTtcblxuICAgICAgY2FsbGJhY2soKTtcblxuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwidW5hYmxlIHRvIGZpbmQgcGFja2FnZSBkb2N1bWVudDogXCIgKyBlcnJvcik7XG4gICAgICBfcGFja2FnZURvY3VtZW50QWJzb2x1dGVVcmwgPSBiYXNlVXJsO1xuXG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMucmVzb2x2ZVVSSSA9IGZ1bmN0aW9uKHBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QpIHtcbiAgICByZXR1cm4gYmFzZVVybCArIFwiL1wiICsgcGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdDtcbiAgfTtcblxuXG4gIHRoaXMuZ2V0UGFja2FnZVVybCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcGFja2FnZURvY3VtZW50QWJzb2x1dGVVcmw7XG4gIH07XG5cbiAgdGhpcy5mZXRjaEZpbGVDb250ZW50c1RleHQgPSBmdW5jdGlvbihwYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBmZXRjaENhbGxiYWNrLCBvbmVycm9yKSB7XG4gICAgdmFyIGZpbGVVcmwgPSBzZWxmLnJlc29sdmVVUkkocGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCk7XG5cbiAgICBpZiAodHlwZW9mIGZpbGVVcmwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyAnRmV0Y2hlZCBmaWxlIFVSTCBpcyB1bmRlZmluZWQhJztcbiAgICB9XG4gICAgJC5hamF4KHtcbiAgICAgIC8vIGVuY29kaW5nOiBcIlVURi04XCIsXG4gICAgICAvLyBtaW1lVHlwZTogXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PVVURi04XCIsXG4gICAgICAvLyBiZWZvcmVTZW5kOiBmdW5jdGlvbiggeGhyICkge1xuICAgICAgLy8gICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOFwiKTtcbiAgICAgIC8vIH0sXG4gICAgICBpc0xvY2FsOiBmaWxlVXJsLmluZGV4T2YoXCJodHRwXCIpID09PSAwID8gZmFsc2UgOiB0cnVlLFxuICAgICAgdXJsOiBmaWxlVXJsLFxuICAgICAgZGF0YVR5cGU6ICd0ZXh0JywgLy9odHRwczovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS5hamF4L1xuICAgICAgYXN5bmM6IHRydWUsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgZmV0Y2hDYWxsYmFjayhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIHN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igd2hlbiBBSkFYIGZldGNoaW5nICcgKyBmaWxlVXJsKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihzdGF0dXMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yVGhyb3duKTtcblxuICAgICAgICAvLyAvLyBpc0xvY2FsID0gZmFsc2Ugd2l0aCBjdXN0b20gVVJJIHNjaGVtZSAvIHByb3RvY29sIHJlc3VsdHMgaW4gZmFsc2UgZmFpbCBvbiBGaXJlZm94IChDaHJvbWUgb2theSlcbiAgICAgICAgLy8gaWYgKHN0YXR1cyA9PT0gXCJlcnJvclwiICYmICghZXJyb3JUaHJvd24gfHwgIWVycm9yVGhyb3duLmxlbmd0aCkgJiYgeGhyLnJlc3BvbnNlVGV4dCAmJiB4aHIucmVzcG9uc2VUZXh0Lmxlbmd0aClcbiAgICAgICAgLy8ge1xuICAgICAgICAvLyAgICAgY29uc29sZS5lcnJvcih4aHIpO1xuICAgICAgICAvLyAgICAgaWYgKHR5cGVvZiB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUuZXJyb3IoeGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtcbiAgICAgICAgLy8gICAgIGlmICh0eXBlb2YgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycyAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS5lcnJvcih4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpO1xuICAgICAgICAvLyAgICAgaWYgKHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLmVycm9yKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAvLyAgICAgXG4gICAgICAgIC8vICAgICAvLyBzdWNjZXNzXG4gICAgICAgIC8vICAgICBmZXRjaENhbGxiYWNrKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAvLyAgICAgcmV0dXJuO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgb25lcnJvcihlcnJvclRocm93bik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5mZXRjaEZpbGVDb250ZW50c0Jsb2IgPSBmdW5jdGlvbihwYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBmZXRjaENhbGxiYWNrLCBvbmVycm9yKSB7XG5cbiAgICB2YXIgZGVjcnlwdGlvbkZ1bmN0aW9uID0gcGFyZW50RmV0Y2hlci5nZXREZWNyeXB0aW9uRnVuY3Rpb25Gb3JSZWxhdGl2ZVBhdGgocGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCk7XG4gICAgaWYgKGRlY3J5cHRpb25GdW5jdGlvbikge1xuICAgICAgdmFyIG9yaWdGZXRjaENhbGxiYWNrID0gZmV0Y2hDYWxsYmFjaztcbiAgICAgIGZldGNoQ2FsbGJhY2sgPSBmdW5jdGlvbih1bmVuY3J5cHRlZEJsb2IpIHtcbiAgICAgICAgZGVjcnlwdGlvbkZ1bmN0aW9uKHVuZW5jcnlwdGVkQmxvYiwgZnVuY3Rpb24oZGVjcnlwdGVkQmxvYikge1xuICAgICAgICAgIG9yaWdGZXRjaENhbGxiYWNrKGRlY3J5cHRlZEJsb2IpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZldGNoRmlsZUNvbnRlbnRzKHBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QsIGZ1bmN0aW9uKGNvbnRlbnRzQXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRzQXJyYXlCdWZmZXJdLCB7XG4gICAgICAgIHR5cGU6IENvbnRlbnRUeXBlRGlzY292ZXJ5LmlkZW50aWZ5Q29udGVudFR5cGVGcm9tRmlsZU5hbWUocGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdClcbiAgICAgIH0pO1xuICAgICAgZmV0Y2hDYWxsYmFjayhibG9iKTtcbiAgICB9LCBvbmVycm9yKTtcbiAgfTtcblxuICB0aGlzLmdldFBhY2thZ2VEb20gPSBmdW5jdGlvbihjYWxsYmFjaywgb25lcnJvcikge1xuICAgIHNlbGYuZmV0Y2hGaWxlQ29udGVudHNUZXh0KF9wYWNrYWdlRG9jdW1lbnRSZWxhdGl2ZVBhdGgsIGZ1bmN0aW9uKHBhY2thZ2VYbWwpIHtcbiAgICAgIHZhciBwYWNrYWdlRG9tID0gcGFyZW50RmV0Y2hlci5tYXJrdXBQYXJzZXIucGFyc2VYbWwocGFja2FnZVhtbCk7XG4gICAgICBjYWxsYmFjayhwYWNrYWdlRG9tKTtcbiAgICB9LCBvbmVycm9yKTtcbiAgfTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQbGFpblJlc291cmNlRmV0Y2hlcjsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnZhciBDb250ZW50RG9jdW1lbnRGZXRjaGVyID0gcmVxdWlyZSgnLi9jb250ZW50LWRvY3VtZW50LWZldGNoZXInKTtcbnZhciBFbmNyeXB0aW9uSGFuZGxlciA9IHJlcXVpcmUoJy4vZW5jcnlwdGlvbi1oYW5kbGVyJyk7XG52YXIgTWFya3VwUGFyc2VyID0gcmVxdWlyZSgnLi9tYXJrdXAtcGFyc2VyJyk7XG52YXIgUGxhaW5SZXNvdXJjZUZldGNoZXIgPSByZXF1aXJlKCcuL3BsYWluLXJlc291cmNlLWZldGNoZXInKTtcbnZhciBSZXNvdXJjZUNhY2hlID0gcmVxdWlyZSgnLi9yZXNvdXJjZS1jYWNoZScpO1xudmFyIFVSSSA9IHJlcXVpcmUoJ1VSSWpzJyk7XG52YXIgWmlwUmVzb3VyY2VGZXRjaGVyID0gcmVxdWlyZSgnLi96aXAtcmVzb3VyY2UtZmV0Y2hlcicpO1xuXG5mdW5jdGlvbiBQdWJsaWNhdGlvbkZldGNoZXIoYm9va1Jvb3QsIGpzTGliUm9vdCkge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBzZWxmLmNvbnRlbnRUeXBlUGFja2FnZVJlYWRTdHJhdGVneU1hcCA9IHtcbiAgICAnYXBwbGljYXRpb24vb2VicHMtcGFja2FnZSt4bWwnOiAnZXhwbG9kZWQnLFxuICAgICdhcHBsaWNhdGlvbi9lcHViK3ppcCc6ICd6aXBwZWQnLFxuICAgICdhcHBsaWNhdGlvbi96aXAnOiAnemlwcGVkJ1xuICB9O1xuXG4gIHZhciBfc2hvdWxkQ29uc3RydWN0RG9tUHJvZ3JhbW1hdGljYWxseTtcbiAgdmFyIF9yZXNvdXJjZUZldGNoZXI7XG4gIHZhciBfZW5jcnlwdGlvbkhhbmRsZXI7XG4gIHZhciBfcGFja2FnZUZ1bGxQYXRoO1xuICB2YXIgX3BhY2thZ2VEb207XG4gIHZhciBfcGFja2FnZURvbUluaXRpYWxpemF0aW9uRGVmZXJyZWQ7XG4gIHZhciBfcHVibGljYXRpb25SZXNvdXJjZXNDYWNoZSA9IG5ldyBSZXNvdXJjZUNhY2hlO1xuXG5cbiAgdGhpcy5tYXJrdXBQYXJzZXIgPSBuZXcgTWFya3VwUGFyc2VyKCk7XG5cbiAgdGhpcy5pbml0aWFsaXplID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICAgIHZhciBpc0VwdWJFeHBsb2RlZCA9IGlzRXhwbG9kZWQoKTtcblxuICAgIC8vIE5vbiBleHBsb2RlZCBFUFVCcyAoaS5lLiB6aXBwZWQgLmVwdWIgZG9jdW1lbnRzKSBzaG91bGQgYmUgZmV0Y2hlZCBpbiBhIHByb2dyYW1tYXRpY2FsIG1hbm5lcjpcbiAgICBfc2hvdWxkQ29uc3RydWN0RG9tUHJvZ3JhbW1hdGljYWxseSA9ICFpc0VwdWJFeHBsb2RlZDtcbiAgICBjcmVhdGVSZXNvdXJjZUZldGNoZXIoaXNFcHViRXhwbG9kZWQsIGNhbGxiYWNrKTtcbiAgfTtcblxuXG5cbiAgLy8gSU5URVJOQUwgRlVOQ1RJT05TXG5cbiAgZnVuY3Rpb24gX2hhbmRsZUVycm9yKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGlmIChlcnIubWVzc2FnZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnIuc3RhY2spIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2spO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cblxuICBmdW5jdGlvbiBpc0V4cGxvZGVkKCkge1xuXG4gICAgdmFyIGV4dCA9IFwiLmVwdWJcIjtcbiAgICByZXR1cm4gYm9va1Jvb3QuaW5kZXhPZihleHQsIGJvb2tSb290Lmxlbmd0aCAtIGV4dC5sZW5ndGgpID09PSAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlRmV0Y2hlcihpc0V4cGxvZGVkLCBjYWxsYmFjaykge1xuICAgIGlmIChpc0V4cGxvZGVkKSB7XG4gICAgICBjb25zb2xlLmxvZygndXNpbmcgbmV3IFBsYWluUmVzb3VyY2VGZXRjaGVyJyk7XG4gICAgICBfcmVzb3VyY2VGZXRjaGVyID0gbmV3IFBsYWluUmVzb3VyY2VGZXRjaGVyKHNlbGYsIGJvb2tSb290KTtcbiAgICAgIF9yZXNvdXJjZUZldGNoZXIuaW5pdGlhbGl6ZShmdW5jdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2soX3Jlc291cmNlRmV0Y2hlcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ3VzaW5nIG5ldyBaaXBSZXNvdXJjZUZldGNoZXInKTtcbiAgICAgIF9yZXNvdXJjZUZldGNoZXIgPSBuZXcgWmlwUmVzb3VyY2VGZXRjaGVyKHNlbGYsIGJvb2tSb290LCBqc0xpYlJvb3QpO1xuICAgICAgY2FsbGJhY2soX3Jlc291cmNlRmV0Y2hlcik7XG4gICAgfVxuICB9XG5cbiAgLy8gUFVCTElDIEFQSVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZG9jdW1lbnRzIGZldGNoZWQgdXNpbmcgdGhpcyBmZXRjaGVyIHJlcXVpcmUgc3BlY2lhbCBwcm9ncmFtbWF0aWMgaGFuZGxpbmcuXG4gICAqIChyZXNvbHZpbmcgb2YgaW50ZXJuYWwgcmVzb3VyY2UgcmVmZXJlbmNlcykuXG4gICAqIEByZXR1cm5zIHsqfSB0cnVlIGlmIGRvY3VtZW50cyBmZXRjaGVkIHVzaW5nIHRoaXMgZmV0Y2hlciByZXF1aXJlIHNwZWNpYWwgcHJvZ3JhbW1hdGljIGhhbmRsaW5nXG4gICAqIChyZXNvbHZpbmcgb2YgaW50ZXJuYWwgcmVzb3VyY2UgcmVmZXJlbmNlcykuIFR5cGljYWxseSBuZWVkZWQgZm9yIHppcHBlZCBFUFVCcyBvciBleHBsb2RlZCBFUFVCcyB0aGF0IGNvbnRhaW5cbiAgICogZW5jcnlwdGVkIHJlc291cmNlcyBzcGVjaWZpZWQgaW4gTUVUQS1JTkYvZW5jcnlwdGlvbi54bWwuXG4gICAqXG4gICAqIGZhbHNlIGlmIGRvY3VtZW50cyBjYW4gYmUgZmVkIGRpcmVjdGx5IGludG8gYSB3aW5kb3cgb3IgaWZyYW1lIGJ5IHNyYyBVUkwgd2l0aG91dCB1c2luZyBzcGVjaWFsIGZldGNoaW5nIGxvZ2ljLlxuICAgKi9cbiAgdGhpcy5zaG91bGRDb25zdHJ1Y3REb21Qcm9ncmFtbWF0aWNhbGx5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9zaG91bGRDb25zdHJ1Y3REb21Qcm9ncmFtbWF0aWNhbGx5O1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgbWVkaWEgYXNzZXRzIChhdWRpbywgdmlkZW8sIGltYWdlcykgd2l0aGluIGNvbnRlbnQgZG9jdW1lbnRzIHJlcXVpcmUgc3BlY2lhbFxuICAgKiBwcm9ncmFtbWF0aWMgaGFuZGxpbmcuXG4gICAqIEByZXR1cm5zIHsqfSB0cnVlIGlmIGNvbnRlbnQgZG9jdW1lbnRzIGZldGNoZWQgdXNpbmcgdGhpcyBmZXRjaGVyIHJlcXVpcmUgcHJvZ3JhbW1hdGljIGZldGNoaW5nXG4gICAqIG9mIG1lZGlhIGFzc2V0cy4gVHlwaWNhbGx5IG5lZWRlZCBmb3IgemlwcGVkIEVQVUJzLlxuICAgKlxuICAgKiBmYWxzZSBpZiBwYXRocyB0byBtZWRpYSBhc3NldHMgYXJlIGFjY2Vzc2libGUgZGlyZWN0bHkgZm9yIHRoZSBicm93c2VyIHRocm91Z2ggdGhlaXIgcGF0aHMgcmVsYXRpdmUgdG9cbiAgICogdGhlIGJhc2UgVVJJIG9mIHRoZWlyIGNvbnRlbnQgZG9jdW1lbnQuXG4gICAqL1xuICB0aGlzLnNob3VsZEZldGNoTWVkaWFBc3NldHNQcm9ncmFtbWF0aWNhbGx5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9zaG91bGRDb25zdHJ1Y3REb21Qcm9ncmFtbWF0aWNhbGx5ICYmICFpc0V4cGxvZGVkKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRCb29rUm9vdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBib29rUm9vdDtcbiAgfTtcblxuICB0aGlzLmdldEpzTGliUm9vdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBqc0xpYlJvb3Q7XG4gIH1cblxuICB0aGlzLmdldFBhY2thZ2VVcmwgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3Jlc291cmNlRmV0Y2hlci5nZXRQYWNrYWdlVXJsKCk7XG4gIH07XG5cbiAgdGhpcy5mZXRjaENvbnRlbnREb2N1bWVudCA9IGZ1bmN0aW9uKGF0dGFjaGVkRGF0YSwgbG9hZGVkRG9jdW1lbnRVcmksIGNvbnRlbnREb2N1bWVudFJlc29sdmVkQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcblxuICAgIHZhciBjb250ZW50RG9jdW1lbnRGZXRjaGVyID0gbmV3IENvbnRlbnREb2N1bWVudEZldGNoZXIoc2VsZiwgYXR0YWNoZWREYXRhLnNwaW5lSXRlbSwgbG9hZGVkRG9jdW1lbnRVcmksIF9wdWJsaWNhdGlvblJlc291cmNlc0NhY2hlKTtcbiAgICBjb250ZW50RG9jdW1lbnRGZXRjaGVyLmZldGNoQ29udGVudERvY3VtZW50QW5kUmVzb2x2ZURvbShjb250ZW50RG9jdW1lbnRSZXNvbHZlZENhbGxiYWNrLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIF9oYW5kbGVFcnJvcihlcnIpO1xuICAgICAgZXJyb3JDYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZ2V0RmlsZUNvbnRlbnRzRnJvbVBhY2thZ2UgPSBmdW5jdGlvbihmaWxlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgY2FsbGJhY2ssIG9uZXJyb3IpIHtcblxuICAgIF9yZXNvdXJjZUZldGNoZXIuZmV0Y2hGaWxlQ29udGVudHNUZXh0KGZpbGVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBmdW5jdGlvbihmaWxlQ29udGVudHMpIHtcbiAgICAgIGNhbGxiYWNrKGZpbGVDb250ZW50cyk7XG4gICAgfSwgb25lcnJvcik7XG4gIH07XG5cblxuXG4gIHRoaXMuZ2V0WG1sRmlsZURvbSA9IGZ1bmN0aW9uKHhtbEZpbGVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBjYWxsYmFjaywgb25lcnJvcikge1xuICAgIHNlbGYuZ2V0RmlsZUNvbnRlbnRzRnJvbVBhY2thZ2UoeG1sRmlsZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QsIGZ1bmN0aW9uKHhtbEZpbGVDb250ZW50cykge1xuICAgICAgdmFyIGZpbGVEb20gPSBzZWxmLm1hcmt1cFBhcnNlci5wYXJzZVhtbCh4bWxGaWxlQ29udGVudHMpO1xuICAgICAgY2FsbGJhY2soZmlsZURvbSk7XG4gICAgfSwgb25lcnJvcik7XG4gIH07XG5cbiAgdGhpcy5nZXRQYWNrYWdlRnVsbFBhdGggPSBmdW5jdGlvbihjYWxsYmFjaywgb25lcnJvcikge1xuICAgIHNlbGYuZ2V0WG1sRmlsZURvbSgnTUVUQS1JTkYvY29udGFpbmVyLnhtbCcsIGZ1bmN0aW9uKGNvbnRhaW5lclhtbERvbSkge1xuICAgICAgdmFyIHBhY2thZ2VGdWxsUGF0aCA9IHNlbGYuZ2V0Um9vdEZpbGUoY29udGFpbmVyWG1sRG9tKTtcbiAgICAgIGNhbGxiYWNrKHBhY2thZ2VGdWxsUGF0aCk7XG4gICAgfSwgb25lcnJvcik7XG4gIH07XG5cbiAgdGhpcy5nZXRSb290RmlsZSA9IGZ1bmN0aW9uKGNvbnRhaW5lclhtbERvbSkge1xuICAgIHZhciByb290RmlsZSA9ICQoJ3Jvb3RmaWxlJywgY29udGFpbmVyWG1sRG9tKTtcbiAgICB2YXIgcGFja2FnZUZ1bGxQYXRoID0gcm9vdEZpbGUuYXR0cignZnVsbC1wYXRoJyk7XG4gICAgcmV0dXJuIHBhY2thZ2VGdWxsUGF0aDtcbiAgfTtcblxuICB0aGlzLmdldFBhY2thZ2VEb20gPSBmdW5jdGlvbihjYWxsYmFjaywgb25lcnJvcikge1xuICAgIGlmIChfcGFja2FnZURvbSkge1xuICAgICAgY2FsbGJhY2soX3BhY2thZ2VEb20pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiB1c2UgalF1ZXJ5J3MgRGVmZXJyZWRcbiAgICAgIC8vIFJlZ2lzdGVyIGFsbCBjYWxsYmFja3MgaW50ZXJlc3RlZCBpbiBpbml0aWFsaXplZCBwYWNrYWdlRG9tLCBsYXVuY2ggaXRzIGluc3RhbnRpYXRpb24gb25seSBvbmNlXG4gICAgICAvLyBhbmQgYnJvYWRjYXN0IHRvIGFsbCBjYWxsYmFja3MgcmVnaXN0ZXJlZCBkdXJpbmcgdGhlIGluaXRpYWxpemF0aW9uIG9uY2UgaXQncyBkb25lOlxuICAgICAgaWYgKF9wYWNrYWdlRG9tSW5pdGlhbGl6YXRpb25EZWZlcnJlZCkge1xuICAgICAgICBfcGFja2FnZURvbUluaXRpYWxpemF0aW9uRGVmZXJyZWQuZG9uZShjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcGFja2FnZURvbUluaXRpYWxpemF0aW9uRGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgIF9wYWNrYWdlRG9tSW5pdGlhbGl6YXRpb25EZWZlcnJlZC5kb25lKGNhbGxiYWNrKTtcbiAgICAgICAgc2VsZi5nZXRQYWNrYWdlRnVsbFBhdGgoZnVuY3Rpb24ocGFja2FnZUZ1bGxQYXRoKSB7XG4gICAgICAgICAgX3BhY2thZ2VGdWxsUGF0aCA9IHBhY2thZ2VGdWxsUGF0aDtcbiAgICAgICAgICBzZWxmLmdldFhtbEZpbGVEb20ocGFja2FnZUZ1bGxQYXRoLCBmdW5jdGlvbihwYWNrYWdlRG9tKSB7XG4gICAgICAgICAgICBfcGFja2FnZURvbSA9IHBhY2thZ2VEb207XG4gICAgICAgICAgICBfcGFja2FnZURvbUluaXRpYWxpemF0aW9uRGVmZXJyZWQucmVzb2x2ZShwYWNrYWdlRG9tKTtcbiAgICAgICAgICAgIF9wYWNrYWdlRG9tSW5pdGlhbGl6YXRpb25EZWZlcnJlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KVxuICAgICAgICB9LCBvbmVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jb252ZXJ0UGF0aFJlbGF0aXZlVG9QYWNrYWdlVG9SZWxhdGl2ZVRvQmFzZSA9IGZ1bmN0aW9uKHJlbGF0aXZlVG9QYWNrYWdlUGF0aCkge1xuICAgIHJldHVybiBuZXcgVVJJKHJlbGF0aXZlVG9QYWNrYWdlUGF0aCkuYWJzb2x1dGVUbyhfcGFja2FnZUZ1bGxQYXRoKS50b1N0cmluZygpO1xuICB9O1xuXG4gIHRoaXMucmVsYXRpdmVUb1BhY2thZ2VGZXRjaEZpbGVDb250ZW50cyA9IGZ1bmN0aW9uKHJlbGF0aXZlVG9QYWNrYWdlUGF0aCwgZmV0Y2hNb2RlLCBmZXRjaENhbGxiYWNrLCBvbmVycm9yKSB7XG5cbiAgICBpZiAoIW9uZXJyb3IpIHtcbiAgICAgIG9uZXJyb3IgPSBfaGFuZGxlRXJyb3I7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhSZWxhdGl2ZVRvRXB1YlJvb3QgPSBkZWNvZGVVUklDb21wb25lbnQoc2VsZi5jb252ZXJ0UGF0aFJlbGF0aXZlVG9QYWNrYWdlVG9SZWxhdGl2ZVRvQmFzZShyZWxhdGl2ZVRvUGFja2FnZVBhdGgpKTtcbiAgICAvLyBJbiBjYXNlIHdlIHJlY2VpdmVkIGFuIGFic29sdXRlIHBhdGgsIGNvbnZlcnQgaXQgdG8gcmVsYXRpdmUgZm9ybSBvciB0aGUgZmV0Y2ggd2lsbCBmYWlsOlxuICAgIGlmIChwYXRoUmVsYXRpdmVUb0VwdWJSb290LmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICBwYXRoUmVsYXRpdmVUb0VwdWJSb290ID0gcGF0aFJlbGF0aXZlVG9FcHViUm9vdC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIHZhciBmZXRjaEZ1bmN0aW9uID0gX3Jlc291cmNlRmV0Y2hlci5mZXRjaEZpbGVDb250ZW50c1RleHQ7XG4gICAgaWYgKGZldGNoTW9kZSA9PT0gJ2Jsb2InKSB7XG4gICAgICBmZXRjaEZ1bmN0aW9uID0gX3Jlc291cmNlRmV0Y2hlci5mZXRjaEZpbGVDb250ZW50c0Jsb2I7XG4gICAgfSBlbHNlIGlmIChmZXRjaE1vZGUgPT09ICdkYXRhNjR1cmknKSB7XG4gICAgICBmZXRjaEZ1bmN0aW9uID0gX3Jlc291cmNlRmV0Y2hlci5mZXRjaEZpbGVDb250ZW50c0RhdGE2NFVyaTtcbiAgICB9XG4gICAgZmV0Y2hGdW5jdGlvbi5jYWxsKF9yZXNvdXJjZUZldGNoZXIsIHBhdGhSZWxhdGl2ZVRvRXB1YlJvb3QsIGZldGNoQ2FsbGJhY2ssIG9uZXJyb3IpO1xuICB9O1xuXG5cblxuICB0aGlzLmdldFJlbGF0aXZlWG1sRmlsZURvbSA9IGZ1bmN0aW9uKGZpbGVQYXRoLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgIHNlbGYuZ2V0WG1sRmlsZURvbShzZWxmLmNvbnZlcnRQYXRoUmVsYXRpdmVUb1BhY2thZ2VUb1JlbGF0aXZlVG9CYXNlKGZpbGVQYXRoKSwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlYWRFbmNyaXB0aW9uRGF0YShjYWxsYmFjaykge1xuICAgIHNlbGYuZ2V0WG1sRmlsZURvbSgnTUVUQS1JTkYvZW5jcnlwdGlvbi54bWwnLCBmdW5jdGlvbihlbmNyeXB0aW9uRG9tLCBlcnJvcikge1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkRvY3VtZW50IGRvZXNuJ3QgbWFrZSB1c2Ugb2YgZW5jcnlwdGlvbi5cIik7XG4gICAgICAgIF9lbmNyeXB0aW9uSGFuZGxlciA9IG5ldyBFbmNyeXB0aW9uSGFuZGxlcih1bmRlZmluZWQpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSBlbHNlIHtcblxuICAgICAgICB2YXIgZW5jcnlwdGlvbnMgPSBbXTtcblxuXG4gICAgICAgIHZhciBlbmNyeXB0ZWREYXRhID0gJCgnRW5jcnlwdGVkRGF0YScsIGVuY3J5cHRpb25Eb20pO1xuICAgICAgICBlbmNyeXB0ZWREYXRhLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVuY3J5cHRlZERhdGEpIHtcbiAgICAgICAgICB2YXIgZW5jcnlwdGlvbkFsZ29yaXRobSA9ICQoJ0VuY3J5cHRpb25NZXRob2QnLCBlbmNyeXB0ZWREYXRhKS5maXJzdCgpLmF0dHIoJ0FsZ29yaXRobScpO1xuXG4gICAgICAgICAgZW5jcnlwdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBhbGdvcml0aG06IGVuY3J5cHRpb25BbGdvcml0aG1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIEZvciBzb21lIHJlYXNvbiwgalF1ZXJ5IHNlbGVjdG9yIFwiXCIgYWdhaW5zdCBYTUwgRE9NIHNvbWV0aW1lcyBkb2Vzbid0IG1hdGNoIHByb3Blcmx5XG4gICAgICAgICAgdmFyIGNpcGhlclJlZmVyZW5jZSA9ICQoJ0NpcGhlclJlZmVyZW5jZScsIGVuY3J5cHRlZERhdGEpO1xuICAgICAgICAgIGNpcGhlclJlZmVyZW5jZS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBDaXBoZXJSZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHZhciBjaXBoZXJSZWZlcmVuY2VVUkkgPSAkKENpcGhlclJlZmVyZW5jZSkuYXR0cignVVJJJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRW5jcnlwdGlvbi9vYmZ1c2NhdGlvbiBhbGdvcml0aG0gJyArIGVuY3J5cHRpb25BbGdvcml0aG0gKyAnIHNwZWNpZmllZCBmb3IgJyArXG4gICAgICAgICAgICAgIGNpcGhlclJlZmVyZW5jZVVSSSk7XG4gICAgICAgICAgICBlbmNyeXB0aW9uc1tjaXBoZXJSZWZlcmVuY2VVUkldID0gZW5jcnlwdGlvbkFsZ29yaXRobTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8vIEN1cnJlbnRseSBuZWVkZWQgZm9yIGRlb2JmdXNjYXRpbmcgZm9udHNcbiAgdGhpcy5zZXRQYWNrYWdlTWV0YWRhdGEgPSBmdW5jdGlvbihwYWNrYWdlTWV0YWRhdGEsIHNldHRpbmdGaW5pc2hlZENhbGxiYWNrKSB7XG5cbiAgICBzZWxmLmdldFhtbEZpbGVEb20oJ01FVEEtSU5GL2VuY3J5cHRpb24ueG1sJywgZnVuY3Rpb24oZW5jcnlwdGlvbkRvbSkge1xuXG4gICAgICB2YXIgZW5jcnlwdGlvbkRhdGEgPSBFbmNyeXB0aW9uSGFuZGxlci5DcmVhdGVFbmNyeXB0aW9uRGF0YShwYWNrYWdlTWV0YWRhdGEuaWQsIGVuY3J5cHRpb25Eb20pO1xuXG4gICAgICBfZW5jcnlwdGlvbkhhbmRsZXIgPSBuZXcgRW5jcnlwdGlvbkhhbmRsZXIoZW5jcnlwdGlvbkRhdGEpO1xuXG4gICAgICBpZiAoX2VuY3J5cHRpb25IYW5kbGVyLmlzRW5jcnlwdGlvblNwZWNpZmllZCgpKSB7XG4gICAgICAgIC8vIEVQVUJzIHRoYXQgdXNlIGVuY3J5cHRpb24gZm9yIGFueSByZXNvdXJjZXMgc2hvdWxkIGJlIGZldGNoZWQgaW4gYSBwcm9ncmFtbWF0aWNhbCBtYW5uZXI6XG4gICAgICAgIF9zaG91bGRDb25zdHJ1Y3REb21Qcm9ncmFtbWF0aWNhbGx5ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgc2V0dGluZ0ZpbmlzaGVkQ2FsbGJhY2soKTtcblxuXG4gICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcblxuICAgICAgY29uc29sZS5sb2coXCJEb2N1bWVudCBkb2Vzbid0IG1ha2UgdXNlIG9mIGVuY3J5cHRpb24uXCIpO1xuICAgICAgX2VuY3J5cHRpb25IYW5kbGVyID0gbmV3IEVuY3J5cHRpb25IYW5kbGVyKHVuZGVmaW5lZCk7XG5cbiAgICAgIHNldHRpbmdGaW5pc2hlZENhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5nZXREZWNyeXB0aW9uRnVuY3Rpb25Gb3JSZWxhdGl2ZVBhdGggPSBmdW5jdGlvbihwYXRoUmVsYXRpdmVUb1Jvb3QpIHtcbiAgICByZXR1cm4gX2VuY3J5cHRpb25IYW5kbGVyLmdldERlY3J5cHRpb25GdW5jdGlvbkZvclJlbGF0aXZlUGF0aChwYXRoUmVsYXRpdmVUb1Jvb3QpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFB1YmxpY2F0aW9uRmV0Y2hlcjsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuZnVuY3Rpb24gUmVzb3VyY2VDYWNoZSgpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBfcmVzb3VyY2VzSGFzaCA9IHt9O1xuXG4gIHRoaXMuZ2V0UmVzb3VyY2VVUkwgPSBmdW5jdGlvbihyZXNvdXJjZUFic29sdXRlSHJlZikge1xuICAgIHZhciByZXNvdXJjZU9iamVjdFVybCA9IF9yZXNvdXJjZXNIYXNoW3Jlc291cmNlQWJzb2x1dGVIcmVmXTtcbiAgICByZXR1cm4gcmVzb3VyY2VPYmplY3RVcmw7XG4gIH07XG5cbiAgdGhpcy5wdXRSZXNvdXJjZVVSTCA9IGZ1bmN0aW9uKHJlc291cmNlQWJzb2x1dGVIcmVmLCByZXNvdXJjZU9iamVjdFVybCkge1xuICAgIF9yZXNvdXJjZXNIYXNoW3Jlc291cmNlQWJzb2x1dGVIcmVmXSA9IHJlc291cmNlT2JqZWN0VXJsO1xuICB9O1xuICAvLyBUT0RPOiBtZXRob2RzIHRvIGV2aWN0IHJlc291cmNlLCBkZXN0cm95IGNhY2hlIGFuZCByZWxlYXNlIG9iamVjdCBVUkxzIHVzaW5nIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKCksIGF1dG9tYXRpY1xuICAvLyBjYWNoZSBzaXplIGFjY291bnRpbmcgYW5kIG1hbmFnZW1lbnQgYWxnb3JpdGhtcyBsaWtlIExSVS5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzb3VyY2VDYWNoZTsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyIFVSSSA9IHJlcXVpcmUoJ1VSSWpzJyk7XG52YXIgQ29udGVudFR5cGVEaXNjb3ZlcnkgPSByZXF1aXJlKCcuL2Rpc2NvdmVyLWNvbnRlbnQtdHlwZScpO1xuXG5mdW5jdGlvbiBaaXBSZXNvdXJjZUZldGNoZXIocGFyZW50RmV0Y2hlciwgYmFzZVVybCwgbGliRGlyKSB7XG5cbiAgdmFyIF9jaGVja0NyYzMyID0gZmFsc2U7XG4gIHZhciBfemlwRnM7XG5cbiAgLy8gSU5URVJOQUwgRlVOQ1RJT05TXG5cbiAgLy8gRGVzY3JpcHRpb246IHBlcmZvcm0gYSBmdW5jdGlvbiB3aXRoIGFuIGluaXRpYWxpemVkIHppcCBmaWxlc3lzdGVtLCBtYWtpbmcgc3VyZSB0aGF0IHN1Y2ggZmlsZXN5c3RlbSBpcyBpbml0aWFsaXplZC5cbiAgLy8gTm90ZSB0aGF0IGR1ZSB0byBhIHJhY2UgY29uZGl0aW9uLCBtb3JlIHRoYW4gb25lIHppcCBmaWxlc3lzdGVtIG1heSBiZSBpbnN0YW50aWF0ZWQuXG4gIC8vIEhvd2V2ZXIsIHRoZSBsYXN0IG9uZSB0byBiZSBzZXQgb24gdGhlIG1vZGVsIG9iamVjdCB3aWxsIHByZXZhaWwgYW5kIG90aGVycyB3b3VsZCBiZSBnYXJiYWdlIGNvbGxlY3RlZCBsYXRlci5cbiAgZnVuY3Rpb24gd2l0aFppcEZzUGVyZm9ybShjYWxsYmFjaywgb25lcnJvcikge1xuXG4gICAgaWYgKF96aXBGcykge1xuXG4gICAgICBjYWxsYmFjayhfemlwRnMsIG9uZXJyb3IpO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgemlwLndvcmtlclNjcmlwdHNQYXRoID0gbGliRGlyO1xuICAgICAgX3ppcEZzID0gbmV3IHppcC5mcy5GUygpO1xuICAgICAgX3ppcEZzLmltcG9ydEh0dHBDb250ZW50KGJhc2VVcmwsIHRydWUsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGNhbGxiYWNrKF96aXBGcywgb25lcnJvcik7XG5cbiAgICAgIH0sIG9uZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmV0Y2hGaWxlQ29udGVudHMocmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCByZWFkQ2FsbGJhY2ssIG9uZXJyb3IpIHtcblxuICAgIGlmICh0eXBlb2YgcmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgJ0ZldGNoZWQgZmlsZSByZWxhdGl2ZSBwYXRoIGlzIHVuZGVmaW5lZCEnO1xuICAgIH1cblxuICAgIHdpdGhaaXBGc1BlcmZvcm0oZnVuY3Rpb24oemlwRnMsIG9uZXJyb3IpIHtcbiAgICAgIHZhciBlbnRyeSA9IHppcEZzLmZpbmQocmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290KTtcbiAgICAgIGlmICh0eXBlb2YgZW50cnkgPT09ICd1bmRlZmluZWQnIHx8IGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgIG9uZXJyb3IobmV3IEVycm9yKCdFbnRyeSAnICsgcmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290ICsgJyBub3QgZm91bmQgaW4gemlwICcgKyBiYXNlVXJsKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZW50cnkuZGlyZWN0b3J5KSB7XG4gICAgICAgICAgb25lcnJvcihuZXcgRXJyb3IoJ0VudHJ5ICcgKyByZWxhdGl2ZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QgKyAnIGlzIGEgZGlyZWN0b3J5IHdoaWxlIGEgZmlsZSBoYXMgYmVlbiBleHBlY3RlZCcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWFkQ2FsbGJhY2soZW50cnkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgb25lcnJvcik7XG4gIH1cblxuXG4gIC8vIFBVQkxJQyBBUElcblxuICB0aGlzLmdldFBhY2thZ2VVcmwgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFzZVVybDtcbiAgfTtcblxuICB0aGlzLmZldGNoRmlsZUNvbnRlbnRzVGV4dCA9IGZ1bmN0aW9uKHJlbGF0aXZlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgZmV0Y2hDYWxsYmFjaywgb25lcnJvcikge1xuXG4gICAgZmV0Y2hGaWxlQ29udGVudHMocmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBmdW5jdGlvbihlbnRyeSkge1xuICAgICAgZW50cnkuZ2V0VGV4dChmZXRjaENhbGxiYWNrLCB1bmRlZmluZWQsIF9jaGVja0NyYzMyKTtcbiAgICB9LCBvbmVycm9yKVxuICB9O1xuXG4gIHRoaXMuZmV0Y2hGaWxlQ29udGVudHNEYXRhNjRVcmkgPSBmdW5jdGlvbihyZWxhdGl2ZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QsIGZldGNoQ2FsbGJhY2ssIG9uZXJyb3IpIHtcbiAgICBmZXRjaEZpbGVDb250ZW50cyhyZWxhdGl2ZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICBlbnRyeS5nZXREYXRhNjRVUkkoQ29udGVudFR5cGVEaXNjb3ZlcnkuaWRlbnRpZnlDb250ZW50VHlwZUZyb21GaWxlTmFtZShyZWxhdGl2ZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QpLFxuICAgICAgICBmZXRjaENhbGxiYWNrLCB1bmRlZmluZWQsIF9jaGVja0NyYzMyKTtcbiAgICB9LCBvbmVycm9yKVxuICB9O1xuXG4gIHRoaXMuZmV0Y2hGaWxlQ29udGVudHNCbG9iID0gZnVuY3Rpb24ocmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBmZXRjaENhbGxiYWNrLCBvbmVycm9yKSB7XG4gICAgdmFyIGRlY3J5cHRpb25GdW5jdGlvbiA9IHBhcmVudEZldGNoZXIuZ2V0RGVjcnlwdGlvbkZ1bmN0aW9uRm9yUmVsYXRpdmVQYXRoKHJlbGF0aXZlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCk7XG4gICAgaWYgKGRlY3J5cHRpb25GdW5jdGlvbikge1xuICAgICAgdmFyIG9yaWdGZXRjaENhbGxiYWNrID0gZmV0Y2hDYWxsYmFjaztcbiAgICAgIGZldGNoQ2FsbGJhY2sgPSBmdW5jdGlvbih1bmVuY3J5cHRlZEJsb2IpIHtcbiAgICAgICAgZGVjcnlwdGlvbkZ1bmN0aW9uKHVuZW5jcnlwdGVkQmxvYiwgZnVuY3Rpb24oZGVjcnlwdGVkQmxvYikge1xuICAgICAgICAgIG9yaWdGZXRjaENhbGxiYWNrKGRlY3J5cHRlZEJsb2IpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZldGNoRmlsZUNvbnRlbnRzKHJlbGF0aXZlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgIGVudHJ5LmdldEJsb2IoQ29udGVudFR5cGVEaXNjb3ZlcnkuaWRlbnRpZnlDb250ZW50VHlwZUZyb21GaWxlTmFtZShyZWxhdGl2ZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QpLCBmZXRjaENhbGxiYWNrLFxuICAgICAgICB1bmRlZmluZWQsIF9jaGVja0NyYzMyKTtcbiAgICB9LCBvbmVycm9yKVxuICB9O1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFppcFJlc291cmNlRmV0Y2hlcjsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcblxuZnVuY3Rpb24gTWFuaWZlc3QobWFuaWZlc3RKc29uKSB7XG5cbiAgdmFyIF9tYW5pZmVzdEluZGV4QnlJZCA9IHt9O1xuICB2YXIgX25hdkl0ZW07XG5cbiAgdGhpcy5tYW5pZmVzdExlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBtYW5pZmVzdEpzb24ubGVuZ3RoO1xuICB9O1xuXG4gIHRoaXMuZ2V0TWFuaWZlc3RJdGVtQnlJZHJlZiA9IGZ1bmN0aW9uKGlkcmVmKSB7XG4gICAgcmV0dXJuIF9tYW5pZmVzdEluZGV4QnlJZFtpZHJlZl07XG4gIH07XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBtYW5pZmVzdCBpdGVtcyBhbmQgYXBwbHkgY2FsbGJhY2sgKHN5bmNocm9ub3VzbHkpIG9uIGVhY2ggb25lIG9mIHRoZW0uXG4gICAqIEBwYXJhbSBpdGVyYXRvckNhbGxiYWNrIHRoZSBpdGVyYXRvciBjYWxsYmFjayBmdW5jdGlvbiwgd2lsbCBiZSBjYWxsZWQgb25jZSBmb3IgZWFjaCBtYW5pZmVzdCBpdGVtLFxuICAgKiBhbmQgdGhlIGl0ZW0gd2lsbCBiZSBwYXNzZWQgYXMgdGhlIChvbmUgYW5kIG9ubHkpIGFyZ3VtZW50LlxuICAgKiBAcmV0dXJucyB0aGUgTWFuaWZlc3Qgb2JqZWN0IGZvciBjaGFpbmluZy5cbiAgICovXG4gIHRoaXMuZWFjaCA9IGZ1bmN0aW9uKGl0ZXJhdG9yQ2FsbGJhY2spIHtcbiAgICBfLmVhY2gobWFuaWZlc3RKc29uLCBpdGVyYXRvckNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB0aGlzLmdldE5hdkl0ZW0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX25hdkl0ZW07XG4gIH07XG5cbiAgLy8gSW5pdGlhbGl6ZSBpbmRleGVzXG4gIHRoaXMuZWFjaChmdW5jdGlvbihtYW5pZmVzdEl0ZW0pIHtcbiAgICBfbWFuaWZlc3RJbmRleEJ5SWRbbWFuaWZlc3RJdGVtLmlkXSA9IG1hbmlmZXN0SXRlbTtcblxuICAgIGlmIChtYW5pZmVzdEl0ZW0ucHJvcGVydGllcyAmJiBtYW5pZmVzdEl0ZW0ucHJvcGVydGllcy5pbmRleE9mKFwibmF2XCIpICE9PSAtMSkge1xuICAgICAgX25hdkl0ZW0gPSBtYW5pZmVzdEl0ZW07XG4gICAgfVxuICB9KTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYW5pZmVzdDsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcblxuZnVuY3Rpb24gTWV0YWRhdGEoKSB7XG5cbiAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gIHZhciBfbWVkaWFJdGVtSW5kZXhCeVJlZmluZXNJZCA9IHt9O1xuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgbWVkaWEgaXRlbXMgYW5kIGFwcGx5IGNhbGxiYWNrIChzeW5jaHJvbm91c2x5KSBvbiBlYWNoIG9uZSBvZiB0aGVtLlxuICAgKiBAcGFyYW0gaXRlcmF0b3JDYWxsYmFjayB0aGUgaXRlcmF0b3IgY2FsbGJhY2sgZnVuY3Rpb24sIHdpbGwgYmUgY2FsbGVkIG9uY2UgZm9yIGVhY2ggbWVkaWEgaXRlbSxcbiAgICogYW5kIHRoZSBpdGVtIHdpbGwgYmUgcGFzc2VkIGFzIHRoZSAob25lIGFuZCBvbmx5KSBhcmd1bWVudC5cbiAgICogQHJldHVybnMgdGhlIE1ldGFkYXRhIG9iamVjdCBmb3IgY2hhaW5pbmcuXG4gICAqL1xuICB0aGlzLmVhY2hNZWRpYUl0ZW0gPSBmdW5jdGlvbihpdGVyYXRvckNhbGxiYWNrKSB7XG4gICAgaWYgKHRoYXQubWVkaWFJdGVtcykge1xuICAgICAgXy5lYWNoKHRoYXQubWVkaWFJdGVtcywgaXRlcmF0b3JDYWxsYmFjayk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHRoaXMuZ2V0TWVkaWFJdGVtQnlSZWZpbmVzSWQgPSBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBfbWVkaWFJdGVtSW5kZXhCeVJlZmluZXNJZFtpZF07XG4gIH07XG5cbiAgdGhpcy5zZXRNb01hcCA9IGZ1bmN0aW9uKG1lZGlhT3ZlcmxheXNNYXApIHtcbiAgICB0aGF0Lm1lZGlhX292ZXJsYXkuc21pbF9tb2RlbHMgPSBtZWRpYU92ZXJsYXlzTWFwO1xuICB9O1xuXG4gIC8vIEluaXRpYWxpemUgaW5kZXhlc1xuICB0aGlzLmVhY2hNZWRpYUl0ZW0oZnVuY3Rpb24oaXRlbSkge1xuICAgIHZhciBpZCA9IGl0ZW0ucmVmaW5lcztcbiAgICB2YXIgaGFzaCA9IGlkLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaCA+PSAwKSB7XG4gICAgICB2YXIgc3RhcnQgPSBoYXNoICsgMTtcbiAgICAgIHZhciBlbmQgPSBpZC5sZW5ndGggLSAxO1xuICAgICAgaWQgPSBpZC5zdWJzdHIoc3RhcnQsIGVuZCk7XG4gICAgfVxuICAgIGlkID0gaWQudHJpbSgpO1xuXG4gICAgX21lZGlhSXRlbUluZGV4QnlSZWZpbmVzSWRbaWRdID0gaXRlbTtcbiAgfSk7XG5cblxufTtcbm1vZHVsZS5leHBvcnRzID0gTWV0YWRhdGE7IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG52YXIgTWFuaWZlc3QgPSByZXF1aXJlKCcuL21hbmlmZXN0JylcbnZhciBNYXJrdXBQYXJzZXIgPSByZXF1aXJlKCcuLi9lcHViLWZldGNoL21hcmt1cC1wYXJzZXInKVxudmFyIE1ldGFkYXRhID0gcmVxdWlyZSgnLi9tZXRhZGF0YScpXG52YXIgVVJJID0gcmVxdWlyZSgnVVJJanMnKVxudmFyIFBhY2thZ2VEb2N1bWVudCA9IHJlcXVpcmUoJy4vcGFja2FnZS1kb2N1bWVudCcpXG52YXIgU21pbERvY3VtZW50UGFyc2VyID0gcmVxdWlyZSgnLi9zbWlsLWRvY3VtZW50LXBhcnNlcicpXG5cbi8vIGBQYWNrYWdlRG9jdW1lbnRQYXJzZXJgIGlzIHVzZWQgdG8gcGFyc2UgdGhlIHhtbCBvZiBhbiBlcHViIHBhY2thZ2Vcbi8vIGRvY3VtZW50IGFuZCBidWlsZCBhIGphdmFzY3JpcHQgb2JqZWN0LiBUaGUgY29uc3RydWN0b3IgYWNjZXB0cyBhblxuLy8gaW5zdGFuY2Ugb2YgYFVSSWAgdGhhdCBpcyB1c2VkIHRvIHJlc29sdmUgcGF0aHMgZHVyaW5nIHRoZSBwcm9jZXNzXG5mdW5jdGlvbiBQYWNrYWdlRG9jdW1lbnRQYXJzZXIoYm9va1Jvb3QsIHB1YmxpY2F0aW9uRmV0Y2hlcikge1xuXG4gIHZhciBfcGFja2FnZUZldGNoZXIgPSBwdWJsaWNhdGlvbkZldGNoZXI7XG4gIHZhciBfZGVmZXJyZWRYbWxEb20gPSAkLkRlZmVycmVkKCk7XG4gIHZhciBfeG1sRG9tO1xuXG4gIGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljYXRpb25GZXRjaGVyLmdldFBhY2thZ2VEb20oZnVuY3Rpb24ocGFja2FnZURvbSkge1xuICAgIF94bWxEb20gPSBwYWNrYWdlRG9tO1xuICAgIF9kZWZlcnJlZFhtbERvbS5yZXNvbHZlKHBhY2thZ2VEb20pO1xuICB9LCBvbkVycm9yKTtcblxuICBmdW5jdGlvbiBmaWxsU21pbERhdGEocGFja2FnZURvY3VtZW50LCBjYWxsYmFjaykge1xuXG4gICAgdmFyIHNtaWxQYXJzZXIgPSBuZXcgU21pbERvY3VtZW50UGFyc2VyKHBhY2thZ2VEb2N1bWVudCwgcHVibGljYXRpb25GZXRjaGVyKTtcblxuICAgIHNtaWxQYXJzZXIuZmlsbFNtaWxEYXRhKGZ1bmN0aW9uKCkge1xuXG4gICAgICAvLyByZXR1cm4gdGhlIHBhcnNlIHJlc3VsdFxuICAgICAgY2FsbGJhY2socGFja2FnZURvY3VtZW50KTtcbiAgICB9KTtcblxuICB9XG5cbiAgLy8gUGFyc2UgYW4gWE1MIHBhY2thZ2UgZG9jdW1lbnQgaW50byBhIGphdmFzY3JpcHQgb2JqZWN0XG4gIHRoaXMucGFyc2UgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gICAgX2RlZmVycmVkWG1sRG9tLmRvbmUoZnVuY3Rpb24oeG1sRG9tKSB7XG4gICAgICB2YXIgbWV0YWRhdGEgPSBnZXRNZXRhZGF0YSh4bWxEb20pO1xuXG4gICAgICB2YXIgc3BpbmVFbGVtID0geG1sRG9tLmdldEVsZW1lbnRzQnlUYWdOYW1lTlMoXCIqXCIsIFwic3BpbmVcIilbMF07XG4gICAgICB2YXIgcGFnZV9wcm9nX2RpciA9IGdldEVsZW1BdHRyKHhtbERvbSwgJ3NwaW5lJywgXCJwYWdlLXByb2dyZXNzaW9uLWRpcmVjdGlvblwiKTtcblxuICAgICAgLy8gVE9ETzogQmluZGluZ3MgYXJlIHVudXNlZFxuICAgICAgdmFyIGJpbmRpbmdzID0gZ2V0SnNvbkJpbmRpbmdzKHhtbERvbSk7XG5cbiAgICAgIHZhciBtYW5pZmVzdCA9IG5ldyBNYW5pZmVzdChnZXRKc29uTWFuaWZlc3QoeG1sRG9tKSk7XG4gICAgICB2YXIgc3BpbmUgPSBnZXRKc29uU3BpbmUoeG1sRG9tLCBtYW5pZmVzdCwgbWV0YWRhdGEpO1xuXG4gICAgICAvLyB0cnkgdG8gZmluZCBhIGNvdmVyIGltYWdlXG4gICAgICB2YXIgY292ZXIgPSBnZXRDb3ZlckhyZWYoeG1sRG9tKTtcbiAgICAgIGlmIChjb3Zlcikge1xuICAgICAgICBtZXRhZGF0YS5jb3Zlcl9ocmVmID0gY292ZXI7XG4gICAgICB9XG5cbiAgICAgICQud2hlbih1cGRhdGVNZXRhZGF0YVdpdGhJQm9va1Byb3BlcnRpZXMobWV0YWRhdGEpKS50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIF9wYWNrYWdlRmV0Y2hlci5zZXRQYWNrYWdlTWV0YWRhdGEobWV0YWRhdGEsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBwYWNrYWdlRG9jdW1lbnQgPSBuZXcgUGFja2FnZURvY3VtZW50KHB1YmxpY2F0aW9uRmV0Y2hlci5nZXRQYWNrYWdlVXJsKCksXG4gICAgICAgICAgICBwdWJsaWNhdGlvbkZldGNoZXIsIG1ldGFkYXRhLCBzcGluZSwgbWFuaWZlc3QpO1xuXG4gICAgICAgICAgcGFja2FnZURvY3VtZW50LnNldFBhZ2VQcm9ncmVzc2lvbkRpcmVjdGlvbihwYWdlX3Byb2dfZGlyKTtcbiAgICAgICAgICBmaWxsU21pbERhdGEocGFja2FnZURvY3VtZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiB1cGRhdGVNZXRhZGF0YVdpdGhJQm9va1Byb3BlcnRpZXMobWV0YWRhdGEpIHtcblxuICAgIHZhciBkZmYgPSAkLkRlZmVycmVkKCk7XG5cbiAgICAvL2lmIGxheW91dCBub3Qgc2V0XG4gICAgaWYgKCFtZXRhZGF0YS5yZW5kaXRpb25fbGF5b3V0KSB7XG4gICAgICB2YXIgcGF0aFRvSUJvb2tzU3BlY2lmaWNYbWwgPSBcIi9NRVRBLUlORi9jb20uYXBwbGUuaWJvb2tzLmRpc3BsYXktb3B0aW9ucy54bWxcIjtcblxuICAgICAgcHVibGljYXRpb25GZXRjaGVyLnJlbGF0aXZlVG9QYWNrYWdlRmV0Y2hGaWxlQ29udGVudHMocGF0aFRvSUJvb2tzU3BlY2lmaWNYbWwsICd0ZXh0JywgZnVuY3Rpb24oaWJvb2tQcm9wVGV4dCkge1xuICAgICAgICBpZiAoaWJvb2tQcm9wVGV4dCkge1xuICAgICAgICAgIHZhciBwYXJzZXIgPSBuZXcgTWFya3VwUGFyc2VyKCk7XG4gICAgICAgICAgdmFyIHByb3BNb2RlbCA9IHBhcnNlci5wYXJzZVhtbChpYm9va1Byb3BUZXh0KTtcbiAgICAgICAgICB2YXIgZml4TGF5b3V0UHJvcCA9ICQoXCJvcHRpb25bbmFtZT1maXhlZC1sYXlvdXRdXCIsIHByb3BNb2RlbClbMF07XG4gICAgICAgICAgaWYgKGZpeExheW91dFByb3ApIHtcbiAgICAgICAgICAgIHZhciBmaXhMYXlvdXRWYWwgPSAkKGZpeExheW91dFByb3ApLnRleHQoKTtcbiAgICAgICAgICAgIGlmIChmaXhMYXlvdXRWYWwgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLnJlbmRpdGlvbl9sYXlvdXQgPSBcInByZS1wYWdpbmF0ZWRcIjtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1c2luZyBjb20uYXBwbGUuaWJvb2tzLmRpc3BsYXktb3B0aW9ucy54bWwgZml4ZWQtbGF5b3V0IHByb3BlcnR5XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRmZi5yZXNvbHZlKCk7XG5cbiAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29tLmFwcGxlLmlib29rcy5kaXNwbGF5LW9wdGlvbnMueG1sIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgZGZmLnJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZmYucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBkZmYucHJvbWlzZSgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBnZXRKc29uU3BpbmUoeG1sRG9tLCBtYW5pZmVzdCwgbWV0YWRhdGEpIHtcblxuICAgIHZhciAkc3BpbmVFbGVtZW50cztcbiAgICB2YXIganNvblNwaW5lID0gW107XG5cbiAgICAkc3BpbmVFbGVtZW50cyA9ICQoZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKHhtbERvbSwgXCJzcGluZVwiKSkuY2hpbGRyZW4oKTtcbiAgICAkLmVhY2goJHNwaW5lRWxlbWVudHMsIGZ1bmN0aW9uKHNwaW5lRWxlbWVudEluZGV4LCBjdXJyU3BpbmVFbGVtZW50KSB7XG5cbiAgICAgIHZhciAkY3VyclNwaW5lRWxlbWVudCA9ICQoY3VyclNwaW5lRWxlbWVudCk7XG4gICAgICB2YXIgaWRyZWYgPSAkY3VyclNwaW5lRWxlbWVudC5hdHRyKFwiaWRyZWZcIikgPyAkY3VyclNwaW5lRWxlbWVudC5hdHRyKFwiaWRyZWZcIikgOiBcIlwiO1xuICAgICAgdmFyIG1hbmlmZXN0SXRlbSA9IG1hbmlmZXN0LmdldE1hbmlmZXN0SXRlbUJ5SWRyZWYoaWRyZWYpO1xuXG4gICAgICB2YXIgaWQgPSAkY3VyclNwaW5lRWxlbWVudC5hdHRyKFwiaWRcIik7XG4gICAgICB2YXIgdmlld3BvcnQgPSB1bmRlZmluZWQ7XG4gICAgICBfLmVhY2gobWV0YWRhdGEucmVuZGl0aW9uX3ZpZXdwb3J0cywgZnVuY3Rpb24odnApIHtcbiAgICAgICAgaWYgKHZwLnJlZmluZXMgPT0gaWQpIHtcbiAgICAgICAgICB2aWV3cG9ydCA9IHZwLnZpZXdwb3J0O1xuICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBicmVha1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIHNwaW5lSXRlbSA9IHtcbiAgICAgICAgcmVuZGl0aW9uX3ZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgICAgaWRyZWY6IGlkcmVmLFxuICAgICAgICBocmVmOiBtYW5pZmVzdEl0ZW0uaHJlZixcbiAgICAgICAgbWFuaWZlc3RfaWQ6IG1hbmlmZXN0SXRlbS5pZCxcbiAgICAgICAgbWVkaWFfdHlwZTogbWFuaWZlc3RJdGVtLm1lZGlhX3R5cGUsXG4gICAgICAgIG1lZGlhX292ZXJsYXlfaWQ6IG1hbmlmZXN0SXRlbS5tZWRpYV9vdmVybGF5X2lkLFxuICAgICAgICBsaW5lYXI6ICRjdXJyU3BpbmVFbGVtZW50LmF0dHIoXCJsaW5lYXJcIikgPyAkY3VyclNwaW5lRWxlbWVudC5hdHRyKFwibGluZWFyXCIpIDogXCJcIixcbiAgICAgICAgcHJvcGVydGllczogJGN1cnJTcGluZUVsZW1lbnQuYXR0cihcInByb3BlcnRpZXNcIikgPyAkY3VyclNwaW5lRWxlbWVudC5hdHRyKFwicHJvcGVydGllc1wiKSA6IFwiXCJcbiAgICAgIH07XG5cbiAgICAgIHZhciBwYXJzZWRQcm9wZXJ0aWVzID0gcGFyc2VQcm9wZXJ0aWVzU3RyaW5nKHNwaW5lSXRlbS5wcm9wZXJ0aWVzKTtcbiAgICAgIF8uZXh0ZW5kKHNwaW5lSXRlbSwgcGFyc2VkUHJvcGVydGllcyk7XG5cbiAgICAgIGpzb25TcGluZS5wdXNoKHNwaW5lSXRlbSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ganNvblNwaW5lO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKHJvb3RFbGVtZW50LCBsb2NhbE5hbWUsIHByZWRpY2F0ZSkge1xuICAgIHZhciBlbGVtZW50cyA9IHJvb3RFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lTlMoXCIqXCIsIGxvY2FsTmFtZSk7XG4gICAgaWYgKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIF8uZmluZChlbGVtZW50cywgcHJlZGljYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnRzWzBdO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbHRlclhtbEVsZW1zQnlMb2NhbE5hbWVBbnlOUyhyb290RWxlbWVudCwgbG9jYWxOYW1lLCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgZWxlbWVudHMgPSByb290RWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZU5TKFwiKlwiLCBsb2NhbE5hbWUpO1xuICAgIHJldHVybiBfLmZpbHRlcihlbGVtZW50cywgcHJlZGljYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEVsZW1UZXh0KHJvb3RFbGVtZW50LCBsb2NhbE5hbWUsIHByZWRpY2F0ZSkge1xuICAgIHZhciBmb3VuZEVsZW1lbnQgPSBmaW5kWG1sRWxlbUJ5TG9jYWxOYW1lQW55TlMocm9vdEVsZW1lbnQsIGxvY2FsTmFtZSwgcHJlZGljYXRlKTtcbiAgICBpZiAoZm91bmRFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZm91bmRFbGVtZW50LnRleHRDb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RWxlbUF0dHIocm9vdEVsZW1lbnQsIGxvY2FsTmFtZSwgYXR0ck5hbWUsIHByZWRpY2F0ZSkge1xuICAgIHZhciBmb3VuZEVsZW1lbnQgPSBmaW5kWG1sRWxlbUJ5TG9jYWxOYW1lQW55TlMocm9vdEVsZW1lbnQsIGxvY2FsTmFtZSwgcHJlZGljYXRlKTtcbiAgICBpZiAoZm91bmRFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZm91bmRFbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNZXRhRWxlbVByb3BlcnR5VGV4dChyb290RWxlbWVudCwgYXR0clByb3BlcnR5VmFsdWUpIHtcblxuICAgIHZhciBmb3VuZEVsZW1lbnQgPSBmaW5kWG1sRWxlbUJ5TG9jYWxOYW1lQW55TlMocm9vdEVsZW1lbnQsIFwibWV0YVwiLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJwcm9wZXJ0eVwiKSA9PT0gYXR0clByb3BlcnR5VmFsdWU7XG4gICAgfSk7XG5cbiAgICBpZiAoZm91bmRFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZm91bmRFbGVtZW50LnRleHRDb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cblxuICBmdW5jdGlvbiBnZXRNZXRhZGF0YSh4bWxEb20pIHtcblxuICAgIHZhciBtZXRhZGF0YSA9IG5ldyBNZXRhZGF0YSgpO1xuICAgIHZhciBtZXRhZGF0YUVsZW0gPSBmaW5kWG1sRWxlbUJ5TG9jYWxOYW1lQW55TlMoeG1sRG9tLCBcIm1ldGFkYXRhXCIpO1xuICAgIHZhciBwYWNrYWdlRWxlbSA9IGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyh4bWxEb20sIFwicGFja2FnZVwiKTtcbiAgICB2YXIgc3BpbmVFbGVtID0gZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKHhtbERvbSwgXCJzcGluZVwiKTtcblxuXG4gICAgbWV0YWRhdGEuYXV0aG9yID0gZ2V0RWxlbVRleHQobWV0YWRhdGFFbGVtLCBcImNyZWF0b3JcIik7XG4gICAgbWV0YWRhdGEuZGVzY3JpcHRpb24gPSBnZXRFbGVtVGV4dChtZXRhZGF0YUVsZW0sIFwiZGVzY3JpcHRpb25cIik7XG4gICAgbWV0YWRhdGEuZXB1Yl92ZXJzaW9uID1cbiAgICAgIHBhY2thZ2VFbGVtLmdldEF0dHJpYnV0ZShcInZlcnNpb25cIikgPyBwYWNrYWdlRWxlbS5nZXRBdHRyaWJ1dGUoXCJ2ZXJzaW9uXCIpIDogXCJcIjtcbiAgICBtZXRhZGF0YS5pZCA9IGdldEVsZW1UZXh0KG1ldGFkYXRhRWxlbSwgXCJpZGVudGlmaWVyXCIpO1xuICAgIG1ldGFkYXRhLmxhbmd1YWdlID0gZ2V0RWxlbVRleHQobWV0YWRhdGFFbGVtLCBcImxhbmd1YWdlXCIpO1xuICAgIG1ldGFkYXRhLm1vZGlmaWVkX2RhdGUgPSBnZXRNZXRhRWxlbVByb3BlcnR5VGV4dChtZXRhZGF0YUVsZW0sIFwiZGN0ZXJtczptb2RpZmllZFwiKTtcbiAgICBtZXRhZGF0YS5uY3ggPSBzcGluZUVsZW0uZ2V0QXR0cmlidXRlKFwidG9jXCIpID8gc3BpbmVFbGVtLmdldEF0dHJpYnV0ZShcInRvY1wiKSA6IFwiXCI7XG4gICAgbWV0YWRhdGEucHViZGF0ZSA9IGdldEVsZW1UZXh0KG1ldGFkYXRhRWxlbSwgXCJkYXRlXCIpO1xuICAgIG1ldGFkYXRhLnB1Ymxpc2hlciA9IGdldEVsZW1UZXh0KG1ldGFkYXRhRWxlbSwgXCJwdWJsaXNoZXJcIik7XG4gICAgbWV0YWRhdGEucmlnaHRzID0gZ2V0RWxlbVRleHQobWV0YWRhdGFFbGVtLCBcInJpZ2h0c1wiKTtcbiAgICBtZXRhZGF0YS50aXRsZSA9IGdldEVsZW1UZXh0KG1ldGFkYXRhRWxlbSwgXCJ0aXRsZVwiKTtcblxuICAgIG1ldGFkYXRhLnJlbmRpdGlvbl9vcmllbnRhdGlvbiA9IGdldE1ldGFFbGVtUHJvcGVydHlUZXh0KG1ldGFkYXRhRWxlbSwgXCJyZW5kaXRpb246b3JpZW50YXRpb25cIik7XG4gICAgbWV0YWRhdGEucmVuZGl0aW9uX2xheW91dCA9IGdldE1ldGFFbGVtUHJvcGVydHlUZXh0KG1ldGFkYXRhRWxlbSwgXCJyZW5kaXRpb246bGF5b3V0XCIpO1xuICAgIG1ldGFkYXRhLnJlbmRpdGlvbl9zcHJlYWQgPSBnZXRNZXRhRWxlbVByb3BlcnR5VGV4dChtZXRhZGF0YUVsZW0sIFwicmVuZGl0aW9uOnNwcmVhZFwiKTtcbiAgICBtZXRhZGF0YS5yZW5kaXRpb25fZmxvdyA9IGdldE1ldGFFbGVtUHJvcGVydHlUZXh0KG1ldGFkYXRhRWxlbSwgXCJyZW5kaXRpb246Zmxvd1wiKTtcblxuXG5cblxuXG5cbiAgICAvL2h0dHA6Ly93d3cuaWRwZi5vcmcvZXB1Yi8zMDEvc3BlYy9lcHViLXB1YmxpY2F0aW9ucy5odG1sI2Z4bC1wcm9wZXJ0eS12aWV3cG9ydFxuXG4gICAgLy9tZXRhZGF0YS5yZW5kaXRpb25fdmlld3BvcnQgPSBnZXRNZXRhRWxlbVByb3BlcnR5VGV4dChtZXRhZGF0YUVsZW0sIFwicmVuZGl0aW9uOnZpZXdwb3J0XCIpO1xuICAgIG1ldGFkYXRhLnJlbmRpdGlvbl92aWV3cG9ydCA9IGdldEVsZW1UZXh0KG1ldGFkYXRhRWxlbSwgXCJtZXRhXCIsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInByb3BlcnR5XCIpID09PSBcInJlbmRpdGlvbjp2aWV3cG9ydFwiICYmICFlbGVtZW50Lmhhc0F0dHJpYnV0ZShcInJlZmluZXNcIilcbiAgICB9KTtcblxuICAgIHZhciB2aWV3cG9ydHMgPSBbXTtcbiAgICB2YXIgdmlld3BvcnRNZXRhRWxlbXMgPSBmaWx0ZXJYbWxFbGVtc0J5TG9jYWxOYW1lQW55TlMobWV0YWRhdGFFbGVtLCBcIm1ldGFcIiwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgPT09IFwicmVuZGl0aW9uOnZpZXdwb3J0XCIgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJyZWZpbmVzXCIpO1xuICAgIH0pO1xuICAgIF8uZWFjaCh2aWV3cG9ydE1ldGFFbGVtcywgZnVuY3Rpb24oY3Vyckl0ZW0pIHtcbiAgICAgIHZhciBpZCA9IGN1cnJJdGVtLmdldEF0dHJpYnV0ZShcInJlZmluZXNcIik7XG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgdmFyIGhhc2ggPSBpZC5pbmRleE9mKCcjJyk7XG4gICAgICAgIGlmIChoYXNoID49IDApIHtcbiAgICAgICAgICB2YXIgc3RhcnQgPSBoYXNoICsgMTtcbiAgICAgICAgICB2YXIgZW5kID0gaWQubGVuZ3RoIC0gMTtcbiAgICAgICAgICBpZCA9IGlkLnN1YnN0cihzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBpZCA9IGlkLnRyaW0oKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHZwID0ge1xuICAgICAgICByZWZpbmVzOiBpZCxcbiAgICAgICAgdmlld3BvcnQ6IGN1cnJJdGVtLnRleHRDb250ZW50XG4gICAgICB9O1xuICAgICAgdmlld3BvcnRzLnB1c2godnApO1xuICAgIH0pO1xuXG4gICAgbWV0YWRhdGEucmVuZGl0aW9uX3ZpZXdwb3J0cyA9IHZpZXdwb3J0cztcblxuXG5cblxuXG5cbiAgICAvLyBNZWRpYSBwYXJ0XG4gICAgbWV0YWRhdGEubWVkaWFJdGVtcyA9IFtdO1xuXG4gICAgdmFyIG92ZXJsYXlFbGVtcyA9IGZpbHRlclhtbEVsZW1zQnlMb2NhbE5hbWVBbnlOUyhtZXRhZGF0YUVsZW0sIFwibWV0YVwiLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJwcm9wZXJ0eVwiKSA9PT0gXCJtZWRpYTpkdXJhdGlvblwiICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKFwicmVmaW5lc1wiKTtcbiAgICB9KTtcblxuICAgIF8uZWFjaChvdmVybGF5RWxlbXMsIGZ1bmN0aW9uKGN1cnJJdGVtKSB7XG4gICAgICBtZXRhZGF0YS5tZWRpYUl0ZW1zLnB1c2goe1xuICAgICAgICByZWZpbmVzOiBjdXJySXRlbS5nZXRBdHRyaWJ1dGUoXCJyZWZpbmVzXCIpLFxuICAgICAgICBkdXJhdGlvbjogU21pbERvY3VtZW50UGFyc2VyLnJlc29sdmVDbG9ja1ZhbHVlKGN1cnJJdGVtLnRleHRDb250ZW50KVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBtZXRhZGF0YS5tZWRpYV9vdmVybGF5ID0ge1xuICAgICAgZHVyYXRpb246IFNtaWxEb2N1bWVudFBhcnNlci5yZXNvbHZlQ2xvY2tWYWx1ZShcbiAgICAgICAgZ2V0RWxlbVRleHQobWV0YWRhdGFFbGVtLCBcIm1ldGFcIiwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInByb3BlcnR5XCIpID09PSBcIm1lZGlhOmR1cmF0aW9uXCIgJiYgIWVsZW1lbnQuaGFzQXR0cmlidXRlKFwicmVmaW5lc1wiKVxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIG5hcnJhdG9yOiBnZXRNZXRhRWxlbVByb3BlcnR5VGV4dChtZXRhZGF0YUVsZW0sIFwibWVkaWE6bmFycmF0b3JcIiksXG4gICAgICBhY3RpdmVDbGFzczogZ2V0TWV0YUVsZW1Qcm9wZXJ0eVRleHQobWV0YWRhdGFFbGVtLCBcIm1lZGlhOmFjdGl2ZS1jbGFzc1wiKSxcbiAgICAgIHBsYXliYWNrQWN0aXZlQ2xhc3M6IGdldE1ldGFFbGVtUHJvcGVydHlUZXh0KG1ldGFkYXRhRWxlbSwgXCJtZWRpYTpwbGF5YmFjay1hY3RpdmUtY2xhc3NcIiksXG4gICAgICBzbWlsX21vZGVsczogW10sXG4gICAgICBza2lwcGFibGVzOiBbXCJzaWRlYmFyXCIsIFwicHJhY3RpY2VcIiwgXCJtYXJnaW5hbGlhXCIsIFwiYW5ub3RhdGlvblwiLCBcImhlbHBcIiwgXCJub3RlXCIsIFwiZm9vdG5vdGVcIiwgXCJyZWFybm90ZVwiLFxuICAgICAgICBcInRhYmxlXCIsIFwidGFibGUtcm93XCIsIFwidGFibGUtY2VsbFwiLCBcImxpc3RcIiwgXCJsaXN0LWl0ZW1cIiwgXCJwYWdlYnJlYWtcIlxuICAgICAgXSxcbiAgICAgIGVzY2FwYWJsZXM6IFtcInNpZGViYXJcIiwgXCJiaWJsaW9ncmFwaHlcIiwgXCJ0b2NcIiwgXCJsb2lcIiwgXCJhcHBlbmRpeFwiLCBcImxhbmRtYXJrc1wiLCBcImxvdFwiLCBcImluZGV4XCIsXG4gICAgICAgIFwiY29sb3Bob25cIiwgXCJlcGlncmFwaFwiLCBcImNvbmNsdXNpb25cIiwgXCJhZnRlcndvcmRcIiwgXCJ3YXJuaW5nXCIsIFwiZXBpbG9ndWVcIiwgXCJmb3Jld29yZFwiLFxuICAgICAgICBcImludHJvZHVjdGlvblwiLCBcInByb2xvZ3VlXCIsIFwicHJlZmFjZVwiLCBcInByZWFtYmxlXCIsIFwibm90aWNlXCIsIFwiZXJyYXRhXCIsIFwiY29weXJpZ2h0LXBhZ2VcIixcbiAgICAgICAgXCJhY2tub3dsZWRnbWVudHNcIiwgXCJvdGhlci1jcmVkaXRzXCIsIFwidGl0bGVwYWdlXCIsIFwiaW1wcmltYXR1clwiLCBcImNvbnRyaWJ1dG9yc1wiLCBcImhhbGZ0aXRsZXBhZ2VcIixcbiAgICAgICAgXCJkZWRpY2F0aW9uXCIsIFwiaGVscFwiLCBcImFubm90YXRpb25cIiwgXCJtYXJnaW5hbGlhXCIsIFwicHJhY3RpY2VcIiwgXCJub3RlXCIsIFwiZm9vdG5vdGVcIiwgXCJyZWFybm90ZVwiLFxuICAgICAgICBcImZvb3Rub3Rlc1wiLCBcInJlYXJub3Rlc1wiLCBcImJyaWRnZWhlYWRcIiwgXCJwYWdlLWxpc3RcIiwgXCJ0YWJsZVwiLCBcInRhYmxlLXJvd1wiLCBcInRhYmxlLWNlbGxcIiwgXCJsaXN0XCIsXG4gICAgICAgIFwibGlzdC1pdGVtXCIsIFwiZ2xvc3NhcnlcIlxuICAgICAgXVxuICAgIH07XG5cbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRKc29uTWFuaWZlc3QoeG1sRG9tKSB7XG5cbiAgICB2YXIgJG1hbmlmZXN0SXRlbXMgPSAkKGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyh4bWxEb20sIFwibWFuaWZlc3RcIikpLmNoaWxkcmVuKCk7XG4gICAgdmFyIGpzb25NYW5pZmVzdCA9IFtdO1xuXG4gICAgJC5lYWNoKCRtYW5pZmVzdEl0ZW1zLCBmdW5jdGlvbihtYW5pZmVzdEVsZW1lbnRJbmRleCwgY3Vyck1hbmlmZXN0RWxlbWVudCkge1xuXG4gICAgICB2YXIgJGN1cnJNYW5pZmVzdEVsZW1lbnQgPSAkKGN1cnJNYW5pZmVzdEVsZW1lbnQpO1xuICAgICAgdmFyIGN1cnJNYW5pZmVzdEVsZW1lbnRIcmVmID0gJGN1cnJNYW5pZmVzdEVsZW1lbnQuYXR0cihcImhyZWZcIikgPyAkY3Vyck1hbmlmZXN0RWxlbWVudC5hdHRyKFwiaHJlZlwiKSA6XG4gICAgICAgIFwiXCI7XG4gICAgICB2YXIgbWFuaWZlc3RJdGVtID0ge1xuXG4gICAgICAgIGhyZWY6IGN1cnJNYW5pZmVzdEVsZW1lbnRIcmVmLFxuICAgICAgICBpZDogJGN1cnJNYW5pZmVzdEVsZW1lbnQuYXR0cihcImlkXCIpID8gJGN1cnJNYW5pZmVzdEVsZW1lbnQuYXR0cihcImlkXCIpIDogXCJcIixcbiAgICAgICAgbWVkaWFfb3ZlcmxheV9pZDogJGN1cnJNYW5pZmVzdEVsZW1lbnQuYXR0cihcIm1lZGlhLW92ZXJsYXlcIikgP1xuICAgICAgICAgICRjdXJyTWFuaWZlc3RFbGVtZW50LmF0dHIoXCJtZWRpYS1vdmVybGF5XCIpIDogXCJcIixcbiAgICAgICAgbWVkaWFfdHlwZTogJGN1cnJNYW5pZmVzdEVsZW1lbnQuYXR0cihcIm1lZGlhLXR5cGVcIikgPyAkY3Vyck1hbmlmZXN0RWxlbWVudC5hdHRyKFwibWVkaWEtdHlwZVwiKSA6IFwiXCIsXG4gICAgICAgIHByb3BlcnRpZXM6ICRjdXJyTWFuaWZlc3RFbGVtZW50LmF0dHIoXCJwcm9wZXJ0aWVzXCIpID8gJGN1cnJNYW5pZmVzdEVsZW1lbnQuYXR0cihcInByb3BlcnRpZXNcIikgOiBcIlwiXG4gICAgICB9O1xuICAgICAgLy8gY29uc29sZS5sb2coJ3B1c2hpbmcgbWFuaWZlc3QgaXRlbSB0byBKU09OIG1hbmlmZXN0LiBjdXJyTWFuaWZlc3RFbGVtZW50SHJlZjogWycgKyBjdXJyTWFuaWZlc3RFbGVtZW50SHJlZiArIFxuICAgICAgLy8gICAgICddLCBtYW5pZmVzdEl0ZW0uaHJlZjogWycgKyBtYW5pZmVzdEl0ZW0uaHJlZiArXG4gICAgICAvLyAgICAgJ10sIG1hbmlmZXN0SXRlbTonKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKG1hbmlmZXN0SXRlbSk7XG4gICAgICBqc29uTWFuaWZlc3QucHVzaChtYW5pZmVzdEl0ZW0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGpzb25NYW5pZmVzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEpzb25CaW5kaW5ncyh4bWxEb20pIHtcblxuICAgIHZhciAkYmluZGluZ3MgPSAkKGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyh4bWxEb20sIFwiYmluZGluZ3NcIikpLmNoaWxkcmVuKCk7XG4gICAgdmFyIGpzb25CaW5kaW5ncyA9IFtdO1xuXG4gICAgJC5lYWNoKCRiaW5kaW5ncywgZnVuY3Rpb24oYmluZGluZ0VsZW1lbnRJbmRleCwgY3VyckJpbmRpbmdFbGVtZW50KSB7XG5cbiAgICAgIHZhciAkY3VyckJpbmRpbmdFbGVtZW50ID0gJChjdXJyQmluZGluZ0VsZW1lbnQpO1xuICAgICAgdmFyIGJpbmRpbmcgPSB7XG5cbiAgICAgICAgaGFuZGxlcjogJGN1cnJCaW5kaW5nRWxlbWVudC5hdHRyKFwiaGFuZGxlclwiKSA/ICRjdXJyQmluZGluZ0VsZW1lbnQuYXR0cihcImhhbmRsZXJcIikgOiBcIlwiLFxuICAgICAgICBtZWRpYV90eXBlOiAkY3VyckJpbmRpbmdFbGVtZW50LmF0dHIoXCJtZWRpYS10eXBlXCIpID8gJGN1cnJCaW5kaW5nRWxlbWVudC5hdHRyKFwibWVkaWEtdHlwZVwiKSA6IFwiXCJcbiAgICAgIH07XG5cbiAgICAgIGpzb25CaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGpzb25CaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENvdmVySHJlZih4bWxEb20pIHtcblxuICAgIHZhciBtYW5pZmVzdDtcbiAgICB2YXIgJGltYWdlTm9kZTtcbiAgICBtYW5pZmVzdCA9IGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyh4bWxEb20sIFwibWFuaWZlc3RcIik7XG5cbiAgICAvLyBlcHViMyBzcGVjIGZvciBhIGNvdmVyIGltYWdlIGlzIGxpa2UgdGhpczpcbiAgICAvKjxpdGVtIHByb3BlcnRpZXM9XCJjb3Zlci1pbWFnZVwiIGlkPVwiY2lcIiBocmVmPVwiY292ZXIuc3ZnXCIgbWVkaWEtdHlwZT1cImltYWdlL3N2Zyt4bWxcIiAvPiovXG4gICAgJGltYWdlTm9kZSA9ICQoZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKG1hbmlmZXN0LCBcIml0ZW1cIiwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgdmFyIGF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInByb3BlcnRpZXNcIik7XG4gICAgICByZXR1cm4gYXR0ciAmJiBfLmNvbnRhaW5zKGF0dHIuc3BsaXQoXCIgXCIpLCBcImNvdmVyLWltYWdlXCIpO1xuICAgIH0pKTtcbiAgICBpZiAoJGltYWdlTm9kZS5sZW5ndGggPT09IDEgJiYgJGltYWdlTm9kZS5hdHRyKFwiaHJlZlwiKSkge1xuICAgICAgcmV0dXJuICRpbWFnZU5vZGUuYXR0cihcImhyZWZcIik7XG4gICAgfVxuXG4gICAgLy8gc29tZSBlcHViMidzIGNvdmVyIGltYWdlIGlzIGxpa2UgdGhpczpcbiAgICAvKjxtZXRhIG5hbWU9XCJjb3ZlclwiIGNvbnRlbnQ9XCJjb3Zlci1pbWFnZS1pdGVtLWlkXCIgLz4qL1xuICAgIHZhciBtZXRhTm9kZSA9ICQoZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKHhtbERvbSwgXCJtZXRhXCIsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09IFwiY292ZXJcIjtcbiAgICB9KSk7XG4gICAgdmFyIGNvbnRlbnRBdHRyID0gbWV0YU5vZGUuYXR0cihcImNvbnRlbnRcIik7XG4gICAgaWYgKG1ldGFOb2RlLmxlbmd0aCA9PT0gMSAmJiBjb250ZW50QXR0cikge1xuICAgICAgJGltYWdlTm9kZSA9ICQoZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKG1hbmlmZXN0LCBcIml0ZW1cIiwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gY29udGVudEF0dHI7XG4gICAgICB9KSk7XG4gICAgICBpZiAoJGltYWdlTm9kZS5sZW5ndGggPT09IDEgJiYgJGltYWdlTm9kZS5hdHRyKFwiaHJlZlwiKSkge1xuICAgICAgICByZXR1cm4gJGltYWdlTm9kZS5hdHRyKFwiaHJlZlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0aGF0IGRpZG4ndCBzZWVtIHRvIHdvcmsgc28sIGl0IHRoaW5rIGVwdWIyIGp1c3QgdXNlcyBpdGVtIHdpdGggaWQ9Y292ZXJcbiAgICAkaW1hZ2VOb2RlID0gJChmaW5kWG1sRWxlbUJ5TG9jYWxOYW1lQW55TlMobWFuaWZlc3QsIFwiaXRlbVwiLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gXCJjb3ZlclwiO1xuICAgIH0pKTtcbiAgICBpZiAoJGltYWdlTm9kZS5sZW5ndGggPT09IDEgJiYgJGltYWdlTm9kZS5hdHRyKFwiaHJlZlwiKSkge1xuICAgICAgcmV0dXJuICRpbWFnZU5vZGUuYXR0cihcImhyZWZcIik7XG4gICAgfVxuXG4gICAgLy8gc2VlbXMgbGlrZSB0aGVyZSBpc24ndCBvbmUsIHRoYXRzIG9rLi4uXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVByb3BlcnRpZXNTdHJpbmcoc3RyKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcbiAgICB2YXIgYWxsUHJvcFN0cnMgPSBzdHIuc3BsaXQoXCIgXCIpOyAvLyBzcGxpdCBpdCBvbiB3aGl0ZSBzcGFjZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsUHJvcFN0cnMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX09SSUVOVEFUSU9OX0xBTkRTQ0FQRVxuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInJlbmRpdGlvbjpvcmllbnRhdGlvbi1sYW5kc2NhcGVcIikgcHJvcGVydGllcy5yZW5kaXRpb25fb3JpZW50YXRpb24gPSBcImxhbmRzY2FwZVwiO1xuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5SRU5ESVRJT05fT1JJRU5UQVRJT05fUE9SVFJBSVRcbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJyZW5kaXRpb246b3JpZW50YXRpb24tcG9ydHJhaXRcIikgcHJvcGVydGllcy5yZW5kaXRpb25fb3JpZW50YXRpb24gPSBcInBvcnRyYWl0XCI7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlJFTkRJVElPTl9PUklFTlRBVElPTl9BVVRPXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOm9yaWVudGF0aW9uLWF1dG9cIikgcHJvcGVydGllcy5yZW5kaXRpb25fb3JpZW50YXRpb24gPSBcImF1dG9cIjtcblxuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5SRU5ESVRJT05fU1BSRUFEX05PTkVcbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJyZW5kaXRpb246c3ByZWFkLW5vbmVcIikgcHJvcGVydGllcy5yZW5kaXRpb25fc3ByZWFkID0gXCJub25lXCI7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlJFTkRJVElPTl9TUFJFQURfTEFORFNDQVBFXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOnNwcmVhZC1sYW5kc2NhcGVcIikgcHJvcGVydGllcy5yZW5kaXRpb25fc3ByZWFkID0gXCJsYW5kc2NhcGVcIjtcblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX1NQUkVBRF9QT1JUUkFJVFxuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInJlbmRpdGlvbjpzcHJlYWQtcG9ydHJhaXRcIikgcHJvcGVydGllcy5yZW5kaXRpb25fc3ByZWFkID0gXCJwb3J0cmFpdFwiO1xuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5SRU5ESVRJT05fU1BSRUFEX0JPVEhcbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJyZW5kaXRpb246c3ByZWFkLWJvdGhcIikgcHJvcGVydGllcy5yZW5kaXRpb25fc3ByZWFkID0gXCJib3RoXCI7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlJFTkRJVElPTl9TUFJFQURfQVVUT1xuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInJlbmRpdGlvbjpzcHJlYWQtYXV0b1wiKSBwcm9wZXJ0aWVzLnJlbmRpdGlvbl9zcHJlYWQgPSBcImF1dG9cIjtcblxuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5SRU5ESVRJT05fRkxPV19QQUdJTkFURURcbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJyZW5kaXRpb246Zmxvdy1wYWdpbmF0ZWRcIikgcHJvcGVydGllcy5yZW5kaXRpb25fZmxvdyA9IFwicGFnaW5hdGVkXCI7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlJFTkRJVElPTl9GTE9XX1NDUk9MTEVEX0NPTlRJTlVPVVNcbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJyZW5kaXRpb246Zmxvdy1zY3JvbGxlZC1jb250aW51b3VzXCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX2Zsb3cgPSBcInNjcm9sbGVkLWNvbnRpbnVvdXNcIjtcblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX0ZMT1dfU0NST0xMRURfRE9DXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOmZsb3ctc2Nyb2xsZWQtZG9jXCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX2Zsb3cgPSBcInNjcm9sbGVkLWRvY1wiO1xuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5SRU5ESVRJT05fRkxPV19BVVRPXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOmZsb3ctYXV0b1wiKSBwcm9wZXJ0aWVzLnJlbmRpdGlvbl9mbG93ID0gXCJhdXRvXCI7XG5cblxuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5TUFJFQURfQ0VOVEVSXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOnBhZ2Utc3ByZWFkLWNlbnRlclwiKSBwcm9wZXJ0aWVzLnBhZ2Vfc3ByZWFkID0gXCJwYWdlLXNwcmVhZC1jZW50ZXJcIjtcblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uU1BSRUFEX0xFRlRcbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJwYWdlLXNwcmVhZC1sZWZ0XCIpIHByb3BlcnRpZXMucGFnZV9zcHJlYWQgPSBcInBhZ2Utc3ByZWFkLWxlZnRcIjtcblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uU1BSRUFEX1JJR0hUXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicGFnZS1zcHJlYWQtcmlnaHRcIikgcHJvcGVydGllcy5wYWdlX3NwcmVhZCA9IFwicGFnZS1zcHJlYWQtcmlnaHRcIjtcblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX0xBWU9VVF9SRUZMT1dBQkxFXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOmxheW91dC1yZWZsb3dhYmxlXCIpIHtcbiAgICAgICAgcHJvcGVydGllcy5maXhlZF9mbG93ID0gZmFsc2U7IC8vIFRPRE86IG9ubHkgdXNlZCBpbiBzcGVjIHRlc3RzIVxuICAgICAgICBwcm9wZXJ0aWVzLnJlbmRpdGlvbl9sYXlvdXQgPSBcInJlZmxvd2FibGVcIjtcbiAgICAgIH1cblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX0xBWU9VVF9QUkVQQUdJTkFURURcbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJyZW5kaXRpb246bGF5b3V0LXByZS1wYWdpbmF0ZWRcIikge1xuICAgICAgICBwcm9wZXJ0aWVzLmZpeGVkX2Zsb3cgPSB0cnVlOyAvLyBUT0RPOiBvbmx5IHVzZWQgaW4gc3BlYyB0ZXN0cyFcbiAgICAgICAgcHJvcGVydGllcy5yZW5kaXRpb25fbGF5b3V0ID0gXCJwcmUtcGFnaW5hdGVkXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGFja2FnZURvY3VtZW50UGFyc2VyOyIsIi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG52YXIgVVJJID0gcmVxdWlyZSgnVVJJanMnKVxuXG4vLyBEZXNjcmlwdGlvbjogVGhpcyBtb2RlbCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIG5hdmlnYXRpbmcgYW4gRVBVQidzIHBhY2thZ2UgZG9jdW1lbnRcbmZ1bmN0aW9uIFBhY2thZ2VEb2N1bWVudChwYWNrYWdlRG9jdW1lbnRVUkwsIHJlc291cmNlRmV0Y2hlciwgbWV0YWRhdGEsIHNwaW5lLCBtYW5pZmVzdCkge1xuXG4gIHZhciBfcGFnZV9wcm9nX2RpcjtcblxuICB0aGlzLm1hbmlmZXN0ID0gbWFuaWZlc3Q7XG5cbiAgdGhpcy5nZXRTaGFyZWRKc1BhY2thZ2VEYXRhID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgcGFja2FnZURvY1Jvb3QgPSBwYWNrYWdlRG9jdW1lbnRVUkwuc3Vic3RyKDAsIHBhY2thZ2VEb2N1bWVudFVSTC5sYXN0SW5kZXhPZihcIi9cIikpO1xuICAgIHJldHVybiB7XG4gICAgICByb290VXJsOiBwYWNrYWdlRG9jUm9vdCxcbiAgICAgIHJlbmRpdGlvbl92aWV3cG9ydDogbWV0YWRhdGEucmVuZGl0aW9uX3ZpZXdwb3J0LFxuICAgICAgcmVuZGl0aW9uX2xheW91dDogbWV0YWRhdGEucmVuZGl0aW9uX2xheW91dCxcbiAgICAgIHJlbmRpdGlvbl9vcmllbnRhdGlvbjogbWV0YWRhdGEucmVuZGl0aW9uX29yaWVudGF0aW9uLFxuICAgICAgcmVuZGl0aW9uX2Zsb3c6IG1ldGFkYXRhLnJlbmRpdGlvbl9mbG93LFxuICAgICAgcmVuZGl0aW9uX3NwcmVhZDogbWV0YWRhdGEucmVuZGl0aW9uX3NwcmVhZCxcbiAgICAgIG1lZGlhX292ZXJsYXk6IG1ldGFkYXRhLm1lZGlhX292ZXJsYXksXG4gICAgICBzcGluZToge1xuICAgICAgICBkaXJlY3Rpb246IHRoaXMuZ2V0UGFnZVByb2dyZXNzaW9uRGlyZWN0aW9uKCksXG4gICAgICAgIGl0ZW1zOiBzcGluZVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBzcGluZSBpdGVtIGRhdGEgaW4gcmVhZGl1bS1zaGFyZWQtanMgYWNjZXB0ZWQgZm9ybWF0LlxuICAgKiBAcGFyYW0gc3BpbmVJbmRleCB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gd2l0aGluIHRoZSBzcGluZVxuICAgKiBAcmV0dXJucyBTcGluZSBpdGVtIGRhdGEgaW4gcmVhZGl1bS1zaGFyZWQtanMgYWNjZXB0ZWQgZm9ybWF0LlxuICAgKi9cbiAgdGhpcy5nZXRTcGluZUl0ZW0gPSBmdW5jdGlvbihzcGluZUluZGV4KSB7XG4gICAgdmFyIHNwaW5lSXRlbSA9IHNwaW5lW3NwaW5lSW5kZXhdO1xuICAgIHJldHVybiBzcGluZUl0ZW07XG4gIH07XG5cbiAgdGhpcy5zZXRQYWdlUHJvZ3Jlc3Npb25EaXJlY3Rpb24gPSBmdW5jdGlvbihwYWdlX3Byb2dfZGlyKSB7XG4gICAgX3BhZ2VfcHJvZ19kaXIgPSBwYWdlX3Byb2dfZGlyO1xuICB9O1xuXG5cbiAgdGhpcy5nZXRQYWdlUHJvZ3Jlc3Npb25EaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoX3BhZ2VfcHJvZ19kaXIgPT09IFwicnRsXCIpIHtcbiAgICAgIHJldHVybiBcInJ0bFwiO1xuICAgIH0gZWxzZSBpZiAoX3BhZ2VfcHJvZ19kaXIgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICByZXR1cm4gXCJkZWZhdWx0XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImx0clwiO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnNwaW5lTGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNwaW5lLmxlbmd0aDtcbiAgfTtcblxuICB0aGlzLmdldE1ldGFkYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuXG4gIHRoaXMuZ2V0VG9jID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRUb2NJdGVtKCk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmhyZWY7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHRoaXMuZ2V0VG9jVGV4dCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRvYyA9IHRoaXMuZ2V0VG9jKCk7XG5cbiAgICByZXNvdXJjZUZldGNoZXIucmVsYXRpdmVUb1BhY2thZ2VGZXRjaEZpbGVDb250ZW50cyh0b2MsICd0ZXh0JywgZnVuY3Rpb24odG9jRG9jdW1lbnRUZXh0KSB7XG4gICAgICBjYWxsYmFjayh0b2NEb2N1bWVudFRleHQpXG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFUlJPUiBmZXRjaGluZyBUT0MgZnJvbSBbJyArIHRvYyArICddOicpO1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmdldFRvY0RvbSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgICB0aGlzLmdldFRvY1RleHQoZnVuY3Rpb24odG9jVGV4dCkge1xuICAgICAgaWYgKHR5cGVvZiB0b2NUZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdG9jRG9tID0gKG5ldyBET01QYXJzZXIoKSkucGFyc2VGcm9tU3RyaW5nKHRvY1RleHQsIFwidGV4dC94bWxcIik7XG4gICAgICAgIGNhbGxiYWNrKHRvY0RvbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8vIFVudXNlZD9cbiAgdGhpcy5nZW5lcmF0ZVRvY0xpc3RET00gPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB0aGlzLmdldFRvY0RvbShmdW5jdGlvbih0b2NEb20pIHtcbiAgICAgIGlmICh0b2NEb20pIHtcbiAgICAgICAgaWYgKHRvY0lzTmN4KCkpIHtcbiAgICAgICAgICB2YXIgJG5jeE9yZGVyZWRMaXN0O1xuICAgICAgICAgICRuY3hPcmRlcmVkTGlzdCA9IGdldE5jeE9yZGVyZWRMaXN0KCQoXCJuYXZNYXBcIiwgdG9jRG9tKSk7XG4gICAgICAgICAgY2FsbGJhY2soJG5jeE9yZGVyZWRMaXN0WzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcGFja2FnZURvY3VtZW50QWJzb2x1dGVVUkwgPSBuZXcgVVJJKHBhY2thZ2VEb2N1bWVudFVSTCkuYWJzb2x1dGVUbyhkb2N1bWVudC5VUkwpO1xuICAgICAgICAgIHZhciB0b2NEb2N1bWVudEFic29sdXRlVVJMID0gbmV3IFVSSSh0aGF0LmdldFRvYygpKS5hYnNvbHV0ZVRvKHBhY2thZ2VEb2N1bWVudEFic29sdXRlVVJMKTtcbiAgICAgICAgICAvLyBhZGQgYSBCQVNFIHRhZyB0byBjaGFuZ2UgdGhlIFRPQyBkb2N1bWVudCdzIGJhc2VVUkkuXG4gICAgICAgICAgdmFyIG9sZEJhc2VUYWcgPSAkKHRvY0RvbSkucmVtb3ZlKCdiYXNlJyk7XG4gICAgICAgICAgdmFyIG5ld0Jhc2VUYWcgPSAkKCc8YmFzZT48L2Jhc2U+Jyk7XG4gICAgICAgICAgJChuZXdCYXNlVGFnKS5hdHRyKCdocmVmJywgdG9jRG9jdW1lbnRBYnNvbHV0ZVVSTCk7XG4gICAgICAgICAgJCh0b2NEb20pLmZpbmQoJ2hlYWQnKS5hcHBlbmQobmV3QmFzZVRhZyk7XG4gICAgICAgICAgLy8gVE9ETzogZml4IFRPQyBocmVmcyBib3RoIGZvciBleHBsb2RlZCBpbiB6aXBwZWQgRVBVQnNcbiAgICAgICAgICBjYWxsYmFjayh0b2NEb20pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvY0lzTmN4KCkge1xuXG4gICAgdmFyIHRvY0l0ZW0gPSBnZXRUb2NJdGVtKCk7XG4gICAgdmFyIGNvbnRlbnREb2NVUkkgPSB0b2NJdGVtLmhyZWY7XG4gICAgdmFyIGZpbGVFeHRlbnNpb24gPSBjb250ZW50RG9jVVJJLnN1YnN0cihjb250ZW50RG9jVVJJLmxhc3RJbmRleE9mKCcuJykgKyAxKTtcblxuICAgIHJldHVybiBmaWxlRXh0ZW5zaW9uLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSBcIm5jeFwiO1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUFJJVkFURSBIRUxQRVJTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgZnVuY3Rpb24gZ2V0TmN4T3JkZXJlZExpc3QoJG5hdk1hcERPTSkge1xuXG4gICAgdmFyICRvbCA9ICQoXCI8b2w+PC9vbD5cIik7XG4gICAgJC5lYWNoKCRuYXZNYXBET00uY2hpbGRyZW4oXCJuYXZQb2ludFwiKSwgZnVuY3Rpb24oaW5kZXgsIG5hdlBvaW50KSB7XG4gICAgICBhZGROYXZQb2ludEVsZW1lbnRzKCQobmF2UG9pbnQpLCAkb2wpO1xuICAgIH0pO1xuICAgIHJldHVybiAkb2w7XG4gIH1cblxuICAvLyBEZXNjcmlwdGlvbjogQ29uc3RydWN0cyBhbiBodG1sIHJlcHJlc2VudGF0aW9uIG9mIE5DWCBuYXZQb2ludHMsIGJhc2VkIG9uIGFuIG9iamVjdCBvZiBuYXZQb2ludCBpbmZvcm1hdGlvblxuICAvLyBSYXRpb25hbGU6IFRoaXMgaXMgYSByZWN1cnNpdmUgbWV0aG9kLCBhcyBOQ1ggbmF2UG9pbnQgZWxlbWVudHMgY2FuIG5lc3QgMCBvciBtb3JlIG9mIHRoZW1zZWx2ZXMgYXMgY2hpbGRyZW5cbiAgZnVuY3Rpb24gYWRkTmF2UG9pbnRFbGVtZW50cygkbmF2UG9pbnRET00sICRvbCkge1xuXG4gICAgLy8gQWRkIHRoZSBjdXJyZW50IG5hdlBvaW50IGVsZW1lbnQgdG8gdGhlIFRPQyBodG1sXG4gICAgdmFyIG5hdlRleHQgPSAkbmF2UG9pbnRET00uY2hpbGRyZW4oXCJuYXZMYWJlbFwiKS50ZXh0KCkudHJpbSgpO1xuICAgIHZhciBuYXZIcmVmID0gJG5hdlBvaW50RE9NLmNoaWxkcmVuKFwiY29udGVudFwiKS5hdHRyKFwic3JjXCIpO1xuICAgIHZhciAkbmF2UG9pbnRMaSA9ICQoJzxsaSBjbGFzcz1cIm5hdi1lbGVtXCI+PC9saT4nKS5hcHBlbmQoXG4gICAgICAkKCc8YT48L2E+Jywge1xuICAgICAgICBocmVmOiBuYXZIcmVmLFxuICAgICAgICB0ZXh0OiBuYXZUZXh0XG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBBcHBlbmQgbmF2IHBvaW50IGluZm9cbiAgICAkb2wuYXBwZW5kKCRuYXZQb2ludExpKTtcblxuICAgIC8vIEFwcGVuZCBvcmRlcmVkIGxpc3Qgb2YgbmF2IHBvaW50c1xuICAgIGlmICgkbmF2UG9pbnRET00uY2hpbGRyZW4oXCJuYXZQb2ludFwiKS5sZW5ndGggPiAwKSB7XG5cbiAgICAgIHZhciAkbmV3TGkgPSAkKFwiPGxpPjwvbGk+XCIpO1xuICAgICAgdmFyICRuZXdPbCA9ICQoXCI8b2w+PC9vbD5cIik7XG4gICAgICAkLmVhY2goJG5hdlBvaW50RE9NLmNoaWxkcmVuKFwibmF2UG9pbnRcIiksIGZ1bmN0aW9uKG5hdkluZGV4LCBuYXZQb2ludCkge1xuICAgICAgICAkbmV3T2wuYXBwZW5kKGFkZE5hdlBvaW50RWxlbWVudHMoJChuYXZQb2ludCksICRuZXdPbCkpO1xuICAgICAgfSk7XG5cbiAgICAgICRuZXdMaS5hcHBlbmQoJG5ld09sKTtcbiAgICAgICRvbC5hcHBlbmQoJG5ld0xpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUb2NJdGVtKCkge1xuXG4gICAgdmFyIGl0ZW0gPSBtYW5pZmVzdC5nZXROYXZJdGVtKCk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIHZhciBzcGluZV9pZCA9IG1ldGFkYXRhLm5jeDtcbiAgICBpZiAoc3BpbmVfaWQgJiYgc3BpbmVfaWQubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIG1hbmlmZXN0LmdldE1hbmlmZXN0SXRlbUJ5SWRyZWYoc3BpbmVfaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGFja2FnZURvY3VtZW50OyIsIi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxuXG4vLyBgU21pbERvY3VtZW50UGFyc2VyYCBpcyB1c2VkIHRvIHBhcnNlIHRoZSB4bWwgb2YgYW4gZXB1YiBwYWNrYWdlXG4vLyBkb2N1bWVudCBhbmQgYnVpbGQgYSBqYXZhc2NyaXB0IG9iamVjdC4gVGhlIGNvbnN0cnVjdG9yIGFjY2VwdHMgYW5cbi8vIGluc3RhbmNlIG9mIGBVUklgIHRoYXQgaXMgdXNlZCB0byByZXNvbHZlIHBhdGhzIGR1cmluZyB0aGUgcHJvY2Vzc1xuZnVuY3Rpb24gU21pbERvY3VtZW50UGFyc2VyKHBhY2thZ2VEb2N1bWVudCwgcHVibGljYXRpb25GZXRjaGVyKSB7XG5cbiAgLy8gUGFyc2UgYSBtZWRpYSBvdmVybGF5IG1hbmlmZXN0IGl0ZW0gWE1MXG4gIHRoaXMucGFyc2UgPSBmdW5jdGlvbihzcGluZUl0ZW0sIG1hbmlmZXN0SXRlbVNNSUwsIHNtaWxKc29uLCBkZWZlcnJlZCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcHVibGljYXRpb25GZXRjaGVyLmdldFJlbGF0aXZlWG1sRmlsZURvbShtYW5pZmVzdEl0ZW1TTUlMLmhyZWYsIGZ1bmN0aW9uKHhtbERvbSkge1xuXG4gICAgICB2YXIgc21pbCA9ICQoXCJzbWlsXCIsIHhtbERvbSlbMF07XG4gICAgICBzbWlsSnNvbi5zbWlsVmVyc2lvbiA9IHNtaWwuZ2V0QXR0cmlidXRlKCd2ZXJzaW9uJyk7XG5cbiAgICAgIC8vdmFyIGJvZHkgPSAkKFwiYm9keVwiLCB4bWxEb20pWzBdO1xuICAgICAgc21pbEpzb24uY2hpbGRyZW4gPSB0aGF0LmdldENoaWxkcmVuKHNtaWwpO1xuICAgICAgc21pbEpzb24uaHJlZiA9IG1hbmlmZXN0SXRlbVNNSUwuaHJlZjtcbiAgICAgIHNtaWxKc29uLmlkID0gbWFuaWZlc3RJdGVtU01JTC5pZDtcbiAgICAgIHNtaWxKc29uLnNwaW5lSXRlbUlkID0gc3BpbmVJdGVtLmlkcmVmO1xuXG4gICAgICB2YXIgbWVkaWFJdGVtID0gcGFja2FnZURvY3VtZW50LmdldE1ldGFkYXRhKCkuZ2V0TWVkaWFJdGVtQnlSZWZpbmVzSWQobWFuaWZlc3RJdGVtU01JTC5pZCk7XG4gICAgICBpZiAobWVkaWFJdGVtKSB7XG4gICAgICAgIHNtaWxKc29uLmR1cmF0aW9uID0gbWVkaWFJdGVtLmR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhkZWZlcnJlZCwgc21pbEpzb24pO1xuICAgIH0sIGZ1bmN0aW9uKGZldGNoRXJyb3IpIHtcbiAgICAgIGVycm9yQ2FsbGJhY2soZGVmZXJyZWQsIGZldGNoRXJyb3IpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzYWZlQ29weVByb3BlcnR5ID0gZnVuY3Rpb24ocHJvcGVydHksIGZyb21Ob2RlLCB0b0l0ZW0sIGlzUmVxdWlyZWQsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciBwcm9wUGFyc2UgPSBwcm9wZXJ0eS5zcGxpdCgnOicpO1xuICAgIHZhciBkZXN0UHJvcGVydHkgPSBwcm9wUGFyc2VbcHJvcFBhcnNlLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKGRlc3RQcm9wZXJ0eSA9PT0gXCJ0eXBlXCIpIHtcbiAgICAgIGRlc3RQcm9wZXJ0eSA9IFwiZXB1YnR5cGVcIjtcbiAgICB9XG5cbiAgICBpZiAoZnJvbU5vZGUuZ2V0QXR0cmlidXRlKHByb3BlcnR5KSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIHRvSXRlbVtkZXN0UHJvcGVydHldID0gZnJvbU5vZGUuZ2V0QXR0cmlidXRlKHByb3BlcnR5KTtcbiAgICB9IGVsc2UgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgIGlmIChkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0b0l0ZW1bZGVzdFByb3BlcnR5XSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVxdWlyZWQgcHJvcGVydHkgXCIgKyBwcm9wZXJ0eSArIFwiIG5vdCBmb3VuZCBpbiBzbWlsIG5vZGUgXCIgKyBmcm9tTm9kZS5ub2RlTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuXG4gICAgJC5lYWNoKGVsZW1lbnQuY2hpbGROb2RlcywgZnVuY3Rpb24oZWxlbWVudEluZGV4LCBjdXJyRWxlbWVudCkge1xuXG4gICAgICBpZiAoY3VyckVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHsgLy8gRUxFTUVOVFxuICAgICAgICB2YXIgaXRlbSA9IHRoYXQuY3JlYXRlSXRlbUZyb21FbGVtZW50KGN1cnJFbGVtZW50KTtcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICB0aGlzLmNyZWF0ZUl0ZW1Gcm9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICB2YXIgaXRlbSA9IHt9O1xuICAgIGl0ZW0ubm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gICAgdmFyIGlzQm9keSA9IGZhbHNlO1xuICAgIGlmIChpdGVtLm5vZGVUeXBlID09PSBcImJvZHlcIikge1xuICAgICAgaXNCb2R5ID0gdHJ1ZTtcbiAgICAgIGl0ZW0ubm9kZVR5cGUgPSBcInNlcVwiO1xuICAgIH1cblxuICAgIGlmIChpdGVtLm5vZGVUeXBlID09PSBcInNlcVwiKSB7XG5cbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJlcHViOnRleHRyZWZcIiwgZWxlbWVudCwgaXRlbSwgIWlzQm9keSk7XG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwiaWRcIiwgZWxlbWVudCwgaXRlbSk7XG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwiZXB1Yjp0eXBlXCIsIGVsZW1lbnQsIGl0ZW0pO1xuXG4gICAgICBpdGVtLmNoaWxkcmVuID0gdGhhdC5nZXRDaGlsZHJlbihlbGVtZW50KTtcblxuICAgIH0gZWxzZSBpZiAoaXRlbS5ub2RlVHlwZSA9PT0gXCJwYXJcIikge1xuXG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwiaWRcIiwgZWxlbWVudCwgaXRlbSk7XG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwiZXB1Yjp0eXBlXCIsIGVsZW1lbnQsIGl0ZW0pO1xuXG4gICAgICBpdGVtLmNoaWxkcmVuID0gdGhhdC5nZXRDaGlsZHJlbihlbGVtZW50KTtcblxuICAgIH0gZWxzZSBpZiAoaXRlbS5ub2RlVHlwZSA9PT0gXCJ0ZXh0XCIpIHtcblxuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcInNyY1wiLCBlbGVtZW50LCBpdGVtLCB0cnVlKTtcbiAgICAgIHZhciBzcmNQYXJ0cyA9IGl0ZW0uc3JjLnNwbGl0KCcjJyk7XG4gICAgICBpdGVtLnNyY0ZpbGUgPSBzcmNQYXJ0c1swXTtcbiAgICAgIGl0ZW0uc3JjRnJhZ21lbnRJZCA9IChzcmNQYXJ0cy5sZW5ndGggPT09IDIpID8gc3JjUGFydHNbMV0gOiBcIlwiO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImlkXCIsIGVsZW1lbnQsIGl0ZW0pO1xuICAgICAgLy8gc2FmZUNvcHlQcm9wZXJ0eShcImVwdWI6dGV4dHJlZlwiLCBlbGVtZW50LCBpdGVtKTtcblxuICAgIH0gZWxzZSBpZiAoaXRlbS5ub2RlVHlwZSA9PT0gXCJhdWRpb1wiKSB7XG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwic3JjXCIsIGVsZW1lbnQsIGl0ZW0sIHRydWUpO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImlkXCIsIGVsZW1lbnQsIGl0ZW0pO1xuICAgICAgaXRlbS5jbGlwQmVnaW4gPSBTbWlsRG9jdW1lbnRQYXJzZXIucmVzb2x2ZUNsb2NrVmFsdWUoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjbGlwQmVnaW5cIikpO1xuICAgICAgaXRlbS5jbGlwRW5kID0gU21pbERvY3VtZW50UGFyc2VyLnJlc29sdmVDbG9ja1ZhbHVlKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY2xpcEVuZFwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlRmFrZVNtaWxKc29uKHNwaW5lSXRlbSkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogXCJcIixcbiAgICAgIGhyZWY6IFwiXCIsXG4gICAgICBzcGluZUl0ZW1JZDogc3BpbmVJdGVtLmlkcmVmLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIG5vZGVUeXBlOiAnc2VxJyxcbiAgICAgICAgdGV4dHJlZjogc3BpbmVJdGVtLmhyZWYsXG4gICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgIG5vZGVUeXBlOiAncGFyJyxcbiAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgIG5vZGVUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBzcmM6IHNwaW5lSXRlbS5ocmVmLFxuICAgICAgICAgICAgc3JjRmlsZTogc3BpbmVJdGVtLmhyZWYsXG4gICAgICAgICAgICBzcmNGcmFnbWVudElkOiBcIlwiXG4gICAgICAgICAgfV1cbiAgICAgICAgfV1cbiAgICAgIH1dXG4gICAgfTtcbiAgfVxuXG4gIHRoaXMuZmlsbFNtaWxEYXRhID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICBpZiAocGFja2FnZURvY3VtZW50LnNwaW5lTGVuZ3RoKCkgPD0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYWxsRmFrZVNtaWwgPSB0cnVlO1xuICAgIHZhciBtb19tYXAgPSBbXTtcbiAgICB2YXIgcGFyc2luZ0RlZmVycmVkcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgc3BpbmVJZHggPSAwOyBzcGluZUlkeCA8IHBhY2thZ2VEb2N1bWVudC5zcGluZUxlbmd0aCgpOyBzcGluZUlkeCsrKSB7XG4gICAgICB2YXIgc3BpbmVJdGVtID0gcGFja2FnZURvY3VtZW50LmdldFNwaW5lSXRlbShzcGluZUlkeCk7XG5cbiAgICAgIGlmIChzcGluZUl0ZW0ubWVkaWFfb3ZlcmxheV9pZCkge1xuICAgICAgICB2YXIgbWFuaWZlc3RJdGVtU01JTCA9IHBhY2thZ2VEb2N1bWVudC5tYW5pZmVzdC5nZXRNYW5pZmVzdEl0ZW1CeUlkcmVmKHNwaW5lSXRlbS5tZWRpYV9vdmVybGF5X2lkKTtcblxuICAgICAgICBpZiAoIW1hbmlmZXN0SXRlbVNNSUwpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IGZpbmQgU01JTCBtYW5pZmVzdCBpdGVtIGZvciBzcGluZS9tYW5pZmVzdCBpdGVtPyEgXCIgKyBzcGluZUl0ZW0ubWVkaWFfb3ZlcmxheV9pZCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy9BU1NFUlQgbWFuaWZlc3RJdGVtU01JTC5tZWRpYV90eXBlID09PSBcImFwcGxpY2F0aW9uL3NtaWwreG1sXCJcblxuICAgICAgICB2YXIgcGFyc2luZ0RlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICBwYXJzaW5nRGVmZXJyZWQubWVkaWFfb3ZlcmxheV9pZCA9IHNwaW5lSXRlbS5tZWRpYV9vdmVybGF5X2lkO1xuICAgICAgICBwYXJzaW5nRGVmZXJyZWRzLnB1c2gocGFyc2luZ0RlZmVycmVkKTtcbiAgICAgICAgdmFyIHNtaWxKc29uID0ge307XG5cbiAgICAgICAgLy8gUHVzaCB0aGUgaG9sZGVyIG9iamVjdCBvbnRvIHRoZSBtYXAgZWFybHkgc28gdGhhdCBvcmRlciBpc24ndCBkaXN0dXJiZWQgYnkgYXN5bmNocm9uaWNpdHk6XG4gICAgICAgIG1vX21hcC5wdXNoKHNtaWxKc29uKTtcblxuICAgICAgICAvLyBUaGUgbG9jYWwgcGFyc2luZ0RlZmVycmVkIHZhcmlhYmxlIHdpbGwgaGF2ZSBpdHMgdmFsdWUgcmVwbGFjZWQgb24gbmV4dCBsb29wIGl0ZXJhdGlvbi5cbiAgICAgICAgLy8gTXVzdCBwYXNzIHRoZSBwYXJzaW5nRGVmZXJyZWQgdGhyb3VnaCBhc3luYyBjYWxscyBhcyBhbiBhcmd1bWVudCBhbmQgaXQgYXJyaXZlcyBiYWNrIGFzIG15RGVmZXJyZWQuXG4gICAgICAgIHRoYXQucGFyc2Uoc3BpbmVJdGVtLCBtYW5pZmVzdEl0ZW1TTUlMLCBzbWlsSnNvbiwgcGFyc2luZ0RlZmVycmVkLCBmdW5jdGlvbihteURlZmVycmVkLCBzbWlsSnNvbikge1xuICAgICAgICAgIGFsbEZha2VTbWlsID0gZmFsc2U7XG4gICAgICAgICAgbXlEZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKG15RGVmZXJyZWQsIHBhcnNlRXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igd2hlbiBwYXJzaW5nIFNNSUwgbWFuaWZlc3QgaXRlbSAnICsgbWFuaWZlc3RJdGVtU01JTC5ocmVmICsgJzonKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhwYXJzZUVycm9yKTtcbiAgICAgICAgICBteURlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb19tYXAucHVzaChtYWtlRmFrZVNtaWxKc29uKHNwaW5lSXRlbSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgICQud2hlbi5hcHBseSgkLCBwYXJzaW5nRGVmZXJyZWRzKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgcGFja2FnZURvY3VtZW50LmdldE1ldGFkYXRhKCkuc2V0TW9NYXAobW9fbWFwKTtcbiAgICAgIGlmIChhbGxGYWtlU21pbCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk5vIE1lZGlhIE92ZXJsYXlzXCIpO1xuICAgICAgICBwYWNrYWdlRG9jdW1lbnQuZ2V0TWV0YWRhdGEoKS5zZXRNb01hcChbXSk7XG4gICAgICB9XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBwYXJzZSB0aGUgdGltZXN0YW1wIGFuZCByZXR1cm4gdGhlIHZhbHVlIGluIHNlY29uZHNcbi8vIHN1cHBvcnRzIHRoaXMgc3ludGF4OlxuLy8gaHR0cDovL2lkcGYub3JnL2VwdWIvMzAvc3BlYy9lcHViMzAtbWVkaWFvdmVybGF5cy5odG1sI2FwcC1jbG9jay1leGFtcGxlc1xuU21pbERvY3VtZW50UGFyc2VyLnJlc29sdmVDbG9ja1ZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuIDA7XG5cbiAgdmFyIGhvdXJzID0gMDtcbiAgdmFyIG1pbnMgPSAwO1xuICB2YXIgc2VjcyA9IDA7XG5cbiAgaWYgKHZhbHVlLmluZGV4T2YoXCJtaW5cIikgIT0gLTEpIHtcbiAgICBtaW5zID0gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMCwgdmFsdWUuaW5kZXhPZihcIm1pblwiKSkpO1xuICB9IGVsc2UgaWYgKHZhbHVlLmluZGV4T2YoXCJtc1wiKSAhPSAtMSkge1xuICAgIHZhciBtcyA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDAsIHZhbHVlLmluZGV4T2YoXCJtc1wiKSkpO1xuICAgIHNlY3MgPSBtcyAvIDEwMDA7XG4gIH0gZWxzZSBpZiAodmFsdWUuaW5kZXhPZihcInNcIikgIT0gLTEpIHtcbiAgICBzZWNzID0gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMCwgdmFsdWUuaW5kZXhPZihcInNcIikpKTtcbiAgfSBlbHNlIGlmICh2YWx1ZS5pbmRleE9mKFwiaFwiKSAhPSAtMSkge1xuICAgIGhvdXJzID0gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMCwgdmFsdWUuaW5kZXhPZihcImhcIikpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBwYXJzZSBhcyBoaDptbTpzcy5mcmFjdGlvblxuICAgIC8vIHRoaXMgYWxzbyB3b3JrcyBmb3Igc2Vjb25kcy1vbmx5LCBlLmcuIDEyLjM0NVxuICAgIHZhciBhcnIgPSB2YWx1ZS5zcGxpdChcIjpcIik7XG4gICAgc2VjcyA9IHBhcnNlRmxvYXQoYXJyLnBvcCgpKTtcbiAgICBpZiAoYXJyLmxlbmd0aCA+IDApIHtcbiAgICAgIG1pbnMgPSBwYXJzZUZsb2F0KGFyci5wb3AoKSk7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaG91cnMgPSBwYXJzZUZsb2F0KGFyci5wb3AoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHZhciB0b3RhbCA9IGhvdXJzICogMzYwMCArIG1pbnMgKiA2MCArIHNlY3M7XG4gIHJldHVybiB0b3RhbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTbWlsRG9jdW1lbnRQYXJzZXI7IiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFJlYWRlcjogcmVxdWlyZSgnLi9yZWFkZXInKSxcbiAgU0RLOiByZXF1aXJlKCcuL3NkaycpXG59IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBTREsgPSByZXF1aXJlKCcuL3NkaycpXG52YXIgUGFja2FnZVBhcnNlciA9IHJlcXVpcmUoJy4vZXB1Yi9wYWNrYWdlLWRvY3VtZW50LXBhcnNlcicpXG52YXIgUHVibGljYXRpb25GZXRjaGVyID0gcmVxdWlyZSgnLi9lcHViLWZldGNoL3B1YmxpY2F0aW9uLWZldGNoZXInKVxuXG5pZiAod2luZG93KSB7XG4gIC8vcG9seWZpbGwgdG8gc3VwcG9ydCBTYWZhcmkgNlxuICBpZiAoJ1VSTCcgaW4gd2luZG93ID09PSBmYWxzZSkge1xuICAgIGlmICgnd2Via2l0VVJMJyBpbiB3aW5kb3cgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBFcnJvcignQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdpbmRvdy5VUkwnKTtcbiAgICB9XG5cbiAgICB3aW5kb3cuVVJMID0gd2luZG93LndlYmtpdFVSTDtcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkZXIocmVhZGl1bU9wdGlvbnMsIHJlYWRlck9wdGlvbnMpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIF9jdXJyZW50UHVibGljYXRpb25GZXRjaGVyO1xuXG4gIHZhciBqc0xpYlJvb3QgPSByZWFkaXVtT3B0aW9ucy5qc0xpYlJvb3Q7XG5cbiAgaWYgKCFyZWFkaXVtT3B0aW9ucy51c2VTaW1wbGVMb2FkZXIpIHtcbiAgICAvLyBUT0RPIFdlJ3JlIG5vdCBidW5kbGluZyBJZnJhbWVaaXBMb2FkZXJcbiAgICByZWFkZXJPcHRpb25zLmlmcmFtZUxvYWRlciA9IG5ldyBJZnJhbWVaaXBMb2FkZXIoU0RLLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfY3VycmVudFB1YmxpY2F0aW9uRmV0Y2hlcjtcbiAgICB9LCB7XG4gICAgICBtYXRoSmF4VXJsOiByZWFkZXJPcHRpb25zLm1hdGhKYXhVcmxcbiAgICB9KTs7XG4gIH0gZWxzZSB7XG4gICAgcmVhZGVyT3B0aW9ucy5pZnJhbWVMb2FkZXIgPSBuZXcgU0RLLlZpZXdzLklGcmFtZUxvYWRlcigpO1xuICB9XG5cblxuICB0aGlzLnJlYWRlciA9IG5ldyBTREsuVmlld3MuUmVhZGVyVmlldyhyZWFkZXJPcHRpb25zKTtcblxuICB0aGlzLm9wZW5QYWNrYWdlRG9jdW1lbnQgPSBmdW5jdGlvbihib29rUm9vdCwgY2FsbGJhY2ssIG9wZW5QYWdlUmVxdWVzdCkge1xuXG4gICAgX2N1cnJlbnRQdWJsaWNhdGlvbkZldGNoZXIgPSBuZXcgUHVibGljYXRpb25GZXRjaGVyKGJvb2tSb290LCBqc0xpYlJvb3QpO1xuXG4gICAgX2N1cnJlbnRQdWJsaWNhdGlvbkZldGNoZXIuaW5pdGlhbGl6ZShmdW5jdGlvbigpIHtcblxuICAgICAgdmFyIF9wYWNrYWdlUGFyc2VyID0gbmV3IFBhY2thZ2VQYXJzZXIoYm9va1Jvb3QsIF9jdXJyZW50UHVibGljYXRpb25GZXRjaGVyKTtcblxuICAgICAgX3BhY2thZ2VQYXJzZXIucGFyc2UoZnVuY3Rpb24ocGFja2FnZURvY3VtZW50KSB7XG4gICAgICAgIHZhciBvcGVuQm9va09wdGlvbnMgPSByZWFkaXVtT3B0aW9ucy5vcGVuQm9va09wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBvcGVuQm9va0RhdGEgPSAkLmV4dGVuZChwYWNrYWdlRG9jdW1lbnQuZ2V0U2hhcmVkSnNQYWNrYWdlRGF0YSgpLCBvcGVuQm9va09wdGlvbnMpO1xuXG4gICAgICAgIGlmIChvcGVuUGFnZVJlcXVlc3QpIHtcbiAgICAgICAgICBvcGVuQm9va0RhdGEub3BlblBhZ2VSZXF1ZXN0ID0gb3BlblBhZ2VSZXF1ZXN0O1xuICAgICAgICB9XG4gICAgICAgIHNlbGYucmVhZGVyLm9wZW5Cb29rKG9wZW5Cb29rRGF0YSk7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgcGFja2FnZURvY3VtZW50VXJsOiBfY3VycmVudFB1YmxpY2F0aW9uRmV0Y2hlci5nZXRQYWNrYWdlVXJsKCksXG4gICAgICAgICAgbWV0YWRhdGE6IHBhY2thZ2VEb2N1bWVudC5nZXRNZXRhZGF0YSgpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgLy8gZ2l2ZXMgY2FsbGVyIGFjY2VzcyB0byBkb2N1bWVudCBtZXRhZGF0YSBsaWtlIHRoZSB0YWJsZSBvZiBjb250ZW50c1xuICAgICAgICAgIGNhbGxiYWNrKHBhY2thZ2VEb2N1bWVudCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLy93ZSBuZWVkIGdsb2JhbCBhY2Nlc3MgdG8gdGhlIHJlYWRlciBvYmplY3QgZm9yIGF1dG9tYXRpb24gdGVzdCBiZWluZyBhYmxlIHRvIGNhbGwgaXQncyBBUElzXG4gIFNESy5yZWFkZXIgPSB0aGlzLnJlYWRlcjtcblxuICBTREsudHJpZ2dlcihTREsuRXZlbnRzLlJFQURFUl9JTklUSUFMSVpFRCwgdGhpcy5yZWFkZXIpO1xufTtcblxuUmVhZGVyLnZlcnNpb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRlcjsiLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciBTdHlsZSA9IHJlcXVpcmUoJy4uL21vZGVscy9zdHlsZScpXG5cbi8qKlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdHlsZUNvbGxlY3Rpb24oKSB7XG5cbiAgdmFyIF9zdHlsZXMgPSBbXTtcblxuICB0aGlzLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgX3N0eWxlcy5sZW5ndGggPSAwO1xuXG4gIH07XG5cbiAgdGhpcy5maW5kU3R5bGUgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuXG4gICAgdmFyIGNvdW50ID0gX3N0eWxlcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBpZiAoX3N0eWxlc1tpXS5zZWxlY3RvciA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIF9zdHlsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLmFkZFN0eWxlID0gZnVuY3Rpb24oc2VsZWN0b3IsIGRlY2xhcmF0aW9ucykge1xuXG4gICAgdmFyIHN0eWxlID0gdGhpcy5maW5kU3R5bGUoc2VsZWN0b3IpO1xuXG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICBzdHlsZS5zZXREZWNsYXJhdGlvbnMoZGVjbGFyYXRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUgPSBuZXcgU3R5bGUoc2VsZWN0b3IsIGRlY2xhcmF0aW9ucyk7XG4gICAgICBfc3R5bGVzLnB1c2goc3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfTtcblxuICB0aGlzLnJlbW92ZVN0eWxlID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblxuICAgIHZhciBjb3VudCA9IF9zdHlsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG5cbiAgICAgIGlmIChfc3R5bGVzW2ldLnNlbGVjdG9yID09PSBzZWxlY3Rvcikge1xuICAgICAgICBfc3R5bGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldFN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfc3R5bGVzO1xuICB9O1xuXG4gIHRoaXMucmVzZXRTdHlsZVZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGNvdW50ID0gX3N0eWxlcy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcblxuICAgICAgdmFyIHN0eWxlID0gX3N0eWxlc1tpXTtcbiAgICAgIHZhciBkZWNsYXJhdGlvbnMgPSBzdHlsZS5kZWNsYXJhdGlvbnM7XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gZGVjbGFyYXRpb25zKSB7XG4gICAgICAgIGlmIChkZWNsYXJhdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICBkZWNsYXJhdGlvbnNbcHJvcF0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0eWxlQ29sbGVjdGlvbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAvKipcbiAgICogQGV2ZW50XG4gICAqL1xuICBSRUFERVJfSU5JVElBTElaRUQ6IFwiUmVhZGVySW5pdGlhbGl6ZWRcIixcbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyB0cmlnZ2VyZWQgb24gZXZlcnkgcGFnZSB0dXJub3Zlci4gSXQgaW5jbHVkZXMgc3BpbmUgaW5mb3JtYXRpb24gYW5kIHN1Y2guXG4gICAqIEBldmVudFxuICAgKi9cbiAgUEFHSU5BVElPTl9DSEFOR0VEOiBcIlBhZ2luYXRpb25DaGFuZ2VkXCIsXG4gIC8qKlxuICAgKiBAZXZlbnRcbiAgICovXG4gIFNFVFRJTkdTX0FQUExJRUQ6IFwiU2V0dGluZ3NBcHBsaWVkXCIsXG4gIC8qKlxuICAgKiBAZXZlbnRcbiAgICovXG4gIEZYTF9WSUVXX1JFU0laRUQ6IFwiRlhMVmlld1Jlc2l6ZWRcIixcbiAgLyoqXG4gICAqIEBldmVudFxuICAgKi9cbiAgUkVBREVSX1ZJRVdfQ1JFQVRFRDogXCJSZWFkZXJWaWV3Q3JlYXRlZFwiLFxuICAvKipcbiAgICogQGV2ZW50XG4gICAqL1xuICBSRUFERVJfVklFV19ERVNUUk9ZRUQ6IFwiUmVhZGVyVmlld0Rlc3Ryb3llZFwiLFxuICAvKipcbiAgICogQGV2ZW50XG4gICAqL1xuICBDT05URU5UX0RPQ1VNRU5UX0xPQURfU1RBUlQ6IFwiQ29udGVudERvY3VtZW50TG9hZFN0YXJ0XCIsXG4gIC8qKlxuICAgKiBAZXZlbnRcbiAgICovXG4gIENPTlRFTlRfRE9DVU1FTlRfTE9BREVEOiBcIkNvbnRlbnREb2N1bWVudExvYWRlZFwiLFxuICAvKipcbiAgICogQGV2ZW50XG4gICAqL1xuICBNRURJQV9PVkVSTEFZX1NUQVRVU19DSEFOR0VEOiBcIk1lZGlhT3ZlcmxheVN0YXR1c0NoYW5nZWRcIixcbiAgLyoqXG4gICAqIEBldmVudFxuICAgKi9cbiAgTUVESUFfT1ZFUkxBWV9UVFNfU1BFQUs6IFwiTWVkaWFPdmVybGF5VFRTU3BlYWtcIixcbiAgLyoqXG4gICAqIEBldmVudFxuICAgKi9cbiAgTUVESUFfT1ZFUkxBWV9UVFNfU1RPUDogXCJNZWRpYU92ZXJsYXlUVFNTdG9wXCJcbn0iLCIvKipcbiAqXG4gKiBAcGFyYW0gc3RyXG4gKiBAcGFyYW0gc3VmZml4XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gQmVnaW5zV2l0aChzdHIsIHN1ZmZpeCkge1xuXG4gIHJldHVybiBzdHIuaW5kZXhPZihzdWZmaXgpID09PSAwO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCZWdpbnNXaXRoIiwiLy9zY2FsZSwgbGVmdCwgdG9wLCBhbmdsZSwgb3JpZ2luXG5mdW5jdGlvbiBDU1NUcmFuc2Zvcm1TdHJpbmcob3B0aW9ucykge1xuICB2YXIgZW5hYmxlM0QgPSBvcHRpb25zLmVuYWJsZTNEID8gdHJ1ZSA6IGZhbHNlO1xuXG4gIHZhciB0cmFuc2xhdGUsIHNjYWxlLCByb3RhdGlvbixcbiAgICBvcmlnaW4gPSBvcHRpb25zLm9yaWdpbjtcblxuICBpZiAob3B0aW9ucy5sZWZ0IHx8IG9wdGlvbnMudG9wKSB7XG4gICAgdmFyIGxlZnQgPSBvcHRpb25zLmxlZnQgfHwgMCxcbiAgICAgIHRvcCA9IG9wdGlvbnMudG9wIHx8IDA7XG5cbiAgICB0cmFuc2xhdGUgPSBlbmFibGUzRCA/IChcInRyYW5zbGF0ZTNEKFwiICsgbGVmdCArIFwicHgsIFwiICsgdG9wICsgXCJweCwgMClcIikgOiAoXCJ0cmFuc2xhdGUoXCIgKyBsZWZ0ICsgXCJweCwgXCIgKyB0b3AgKyBcInB4KVwiKTtcbiAgfVxuICBpZiAob3B0aW9ucy5zY2FsZSkge1xuICAgIHNjYWxlID0gZW5hYmxlM0QgPyAoXCJzY2FsZTNEKFwiICsgb3B0aW9ucy5zY2FsZSArIFwiLCBcIiArIG9wdGlvbnMuc2NhbGUgKyBcIiwgMClcIikgOiAoXCJzY2FsZShcIiArIG9wdGlvbnMuc2NhbGUgKyBcIilcIik7XG4gIH1cbiAgaWYgKG9wdGlvbnMuYW5nbGUpIHtcbiAgICByb3RhdGlvbiA9IGVuYWJsZTNEID8gKFwicm90YXRlM0QoMCwwLFwiICsgb3B0aW9ucy5hbmdsZSArIFwiZGVnKVwiKSA6IChcInJvdGF0ZShcIiArIG9wdGlvbnMuYW5nbGUgKyBcImRlZylcIik7XG4gIH1cblxuICBpZiAoISh0cmFuc2xhdGUgfHwgc2NhbGUgfHwgcm90YXRpb24pKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgdmFyIHRyYW5zZm9ybVN0cmluZyA9ICh0cmFuc2xhdGUgJiYgc2NhbGUpID8gKHRyYW5zbGF0ZSArIFwiIFwiICsgc2NhbGUpIDogKHRyYW5zbGF0ZSA/IHRyYW5zbGF0ZSA6IHNjYWxlKTsgLy8gdGhlIG9yZGVyIGlzIGltcG9ydGFudCFcbiAgaWYgKHJvdGF0aW9uKSB7XG4gICAgdHJhbnNmb3JtU3RyaW5nID0gdHJhbnNmb3JtU3RyaW5nICsgXCIgXCIgKyByb3RhdGlvbjtcbiAgICAvL3RyYW5zZm9ybVN0cmluZyA9IHJvdGF0aW9uICsgXCIgXCIgKyB0cmFuc2Zvcm1TdHJpbmc7XG4gIH1cblxuICB2YXIgY3NzID0ge307XG4gIGNzc1sndHJhbnNmb3JtJ10gPSB0cmFuc2Zvcm1TdHJpbmc7XG4gIGNzc1sndHJhbnNmb3JtLW9yaWdpbiddID0gb3JpZ2luID8gb3JpZ2luIDogKGVuYWJsZTNEID8gJzAgMCAwJyA6ICcwIDAnKTtcbiAgcmV0dXJuIGNzcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTVHJhbnNmb3JtU3RyaW5nIiwidmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcblxuZnVuY3Rpb24gQ1NTVHJhbnNpdGlvbigkZWwsIHRyYW5zKSB7XG5cbiAgLy8gZG9lcyBub3Qgd29yayFcbiAgLy8kZWwuY3NzKCd0cmFuc2l0aW9uJywgdHJhbnMpO1xuXG4gIHZhciBjc3MgPSB7fTtcbiAgLy8gZW1wdHkgJycgcHJlZml4IEZJUlNUIVxuICBfLmVhY2goWycnLCAnLXdlYmtpdC0nLCAnLW1vei0nLCAnLW1zLSddLCBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICBjc3NbcHJlZml4ICsgJ3RyYW5zaXRpb24nXSA9IHByZWZpeCArIHRyYW5zO1xuICB9KTtcbiAgJGVsLmNzcyhjc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1RyYW5zaXRpb24iLCJ2YXIgZ2V0T3JpZW50YXRpb24gPSByZXF1aXJlKCcuL2dldC1vcmllbnRhdGlvbicpXG52YXIgU3BpbmVJdGVtQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vbW9kZWxzL3NwaW5lLWl0ZW0tY29uc3RhbnRzJylcbnZhciBWaWV3c0NvbnN0YW50cyA9IHJlcXVpcmUoJy4uL3ZpZXdzL2NvbnN0YW50cycpXG5cbi8qKlxuICpcbiAqIEBwYXJhbSAkdmlld3BvcnRcbiAqIEBwYXJhbSBzcGluZUl0ZW1cbiAqIEBwYXJhbSBzZXR0aW5nc1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbi8vQmFzZWQgb24gaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXQvY2NjP2tleT0wQW9QTVVrUWhjNHdjZERJMGFuRnZXbTk2TjB4UlQxODRaRTk2TVhGUmRGRSZ1c3A9ZHJpdmVfd2ViI2dpZD0wIGRvY1xuLy8gUmV0dXJucyBmYWxzeSBhbmQgdHJ1dGh5XG4vLyB0cnVlIGFuZCBmYWxzZSBtZWFuIHRoYXQgdGhlIHN5bnRoZXRpYy1zcHJlYWQgb3Igc2luZ2xlLXBhZ2UgaXMgXCJmb3JjZWRcIiAodG8gYmUgcmVzcGVjdGVkIHdoYXRldmVyIHRoZSBleHRlcm5hbCBjb25kaXRpb25zKVxuLy8gMSBhbmQgMCBtZWFuIHRoYXQgdGhlIHN5bnRoZXRpYy1zcHJlYWQgb3Igc2luZ2xlLXBhZ2UgaXMgXCJub3QgZm9yY2VkXCIgKGlzIGFsbG93ZWQgdG8gYmUgb3ZlcnJpZGVuIGJ5IGV4dGVybmFsIGNvbmRpdGlvbnMsIHN1Y2ggYXMgb3B0aW11bSBjb2x1bW4gd2lkdGggLyB0ZXh0IGxpbmUgbnVtYmVyIG9mIGNoYXJhY3RlcnMsIGV0Yy4pXG5mdW5jdGlvbiBkZWR1Y2VTeW50aGV0aWNTcHJlYWQoJHZpZXdwb3J0LCBzcGluZUl0ZW0sIHNldHRpbmdzKSB7XG5cbiAgaWYgKCEkdmlld3BvcnQgfHwgJHZpZXdwb3J0Lmxlbmd0aCA9PSAwKSB7XG4gICAgcmV0dXJuIDA7IC8vIG5vbi1mb3JjZWRcbiAgfVxuXG4gIC8vaHR0cDovL3d3dy5pZHBmLm9yZy9lcHViL2Z4bC8jcHJvcGVydHktc3ByZWFkLXZhbHVlc1xuXG4gIHZhciByZW5kaXRpb25fc3ByZWFkID0gc3BpbmVJdGVtID8gc3BpbmVJdGVtLmdldFJlbmRpdGlvblNwcmVhZCgpIDogdW5kZWZpbmVkO1xuXG4gIGlmIChyZW5kaXRpb25fc3ByZWFkID09PSBTcGluZUl0ZW1Db25zdGFudHMuUkVORElUSU9OX1NQUkVBRF9OT05FKSB7XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBmb3JjZWRcblxuICAgIC8vXCJSZWFkaW5nIFN5c3RlbXMgbXVzdCBub3QgaW5jb3Jwb3JhdGUgdGhpcyBzcGluZSBpdGVtIGluIGEgc3ludGhldGljIHNwcmVhZC5cIlxuICB9XG5cbiAgaWYgKHNldHRpbmdzLnN5bnRoZXRpY1NwcmVhZCA9PSBcImRvdWJsZVwiKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIGZvcmNlZFxuICB9IGVsc2UgaWYgKHNldHRpbmdzLnN5bnRoZXRpY1NwcmVhZCA9PSBcInNpbmdsZVwiKSB7XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBmb3JjZWRcbiAgfVxuXG4gIGlmICghc3BpbmVJdGVtKSB7XG4gICAgcmV0dXJuIDA7IC8vIG5vbi1mb3JjZWRcbiAgfVxuXG4gIGlmIChyZW5kaXRpb25fc3ByZWFkID09PSBTcGluZUl0ZW1Db25zdGFudHMuUkVORElUSU9OX1NQUkVBRF9CT1RIKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIGZvcmNlZFxuXG4gICAgLy9cIlJlYWRpbmcgU3lzdGVtcyBzaG91bGQgaW5jb3Jwb3JhdGUgdGhpcyBzcGluZSBpdGVtIGluIGEgc3ludGhldGljIHNwcmVhZCByZWdhcmRsZXNzIG9mIGRldmljZSBvcmllbnRhdGlvbi5cIlxuICB9XG5cbiAgdmFyIG9yaWVudGF0aW9uID0gZ2V0T3JpZW50YXRpb24oJHZpZXdwb3J0KTtcblxuICBpZiAocmVuZGl0aW9uX3NwcmVhZCA9PT0gU3BpbmVJdGVtQ29uc3RhbnRzLlJFTkRJVElPTl9TUFJFQURfTEFORFNDQVBFKSB7XG4gICAgcmV0dXJuIG9yaWVudGF0aW9uID09PSBWaWV3c0NvbnN0YW50cy5PUklFTlRBVElPTl9MQU5EU0NBUEU7IC8vIGZvcmNlZFxuXG4gICAgLy9cIlJlYWRpbmcgU3lzdGVtcyBzaG91bGQgaW5jb3Jwb3JhdGUgdGhpcyBzcGluZSBpdGVtIGluIGEgc3ludGhldGljIHNwcmVhZCBvbmx5IHdoZW4gdGhlIGRldmljZSBpcyBpbiBsYW5kc2NhcGUgb3JpZW50YXRpb24uXCJcbiAgfVxuXG4gIGlmIChyZW5kaXRpb25fc3ByZWFkID09PSBTcGluZUl0ZW1Db25zdGFudHMuUkVORElUSU9OX1NQUkVBRF9QT1JUUkFJVCkge1xuICAgIHJldHVybiBvcmllbnRhdGlvbiA9PT0gVmlld3NDb25zdGFudHMuT1JJRU5UQVRJT05fUE9SVFJBSVQ7IC8vIGZvcmNlZFxuXG4gICAgLy9cIlJlYWRpbmcgU3lzdGVtcyBzaG91bGQgaW5jb3Jwb3JhdGUgdGhpcyBzcGluZSBpdGVtIGluIGEgc3ludGhldGljIHNwcmVhZCBvbmx5IHdoZW4gdGhlIGRldmljZSBpcyBpbiBwb3J0cmFpdCBvcmllbnRhdGlvbi5cIlxuICB9XG5cbiAgaWYgKCFyZW5kaXRpb25fc3ByZWFkIHx8IHJlbmRpdGlvbl9zcHJlYWQgPT09IFNwaW5lSXRlbUNvbnN0YW50cy5SRU5ESVRJT05fU1BSRUFEX0FVVE8pIHtcbiAgICAvLyBpZiBubyBzcHJlYWQgc2V0IGluIGRvY3VtZW50IGFuZCB1c2VyIGRpZG4ndCBzZXQgaW4gaW4gc2V0dGluZyB3ZSB3aWxsIGRvIGRvdWJsZSBmb3IgbGFuZHNjYXBlXG4gICAgdmFyIGxhbmRzY2FwZSA9IG9yaWVudGF0aW9uID09PSBWaWV3c0NvbnN0YW50cy5PUklFTlRBVElPTl9MQU5EU0NBUEU7XG4gICAgcmV0dXJuIGxhbmRzY2FwZSA/IDEgOiAwOyAvLyBub24tZm9yY2VkXG5cbiAgICAvL1wiUmVhZGluZyBTeXN0ZW1zIG1heSB1c2Ugc3ludGhldGljIHNwcmVhZHMgaW4gc3BlY2lmaWMgb3IgYWxsIGRldmljZSBvcmllbnRhdGlvbnMgYXMgcGFydCBvZiBhIGRpc3BsYXkgYXJlYSB1dGlsaXphdGlvbiBvcHRpbWl6YXRpb24gcHJvY2Vzcy5cIlxuICB9XG5cbiAgY29uc29sZS53YXJuKFwiSGVscGVycy5kZWR1Y2VTeW50aGV0aWNTcHJlYWQ6IHNwcmVhZCBwcm9wZXJ0aWVzPyFcIik7XG4gIHJldHVybiAwOyAvLyBub24tZm9yY2VkXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZHVjZVN5bnRoZXRpY1NwcmVhZCIsIi8qKlxuICpcbiAqIEBwYXJhbSBzdHJcbiAqIEBwYXJhbSBzdWZmaXhcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiBFbmRzV2l0aChzdHIsIHN1ZmZpeCkge1xuICByZXR1cm4gc3RyLmluZGV4T2Yoc3VmZml4LCBzdHIubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCkgIT09IC0xO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbmRzV2l0aCIsIi8vVE9ETzogY29uc2lkZXIgdXNpbmcgQ1NTT00gZXNjYXBlKCkgb3IgcG9seWZpbGxcbi8vaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvQ1NTLmVzY2FwZS9ibG9iL21hc3Rlci9jc3MuZXNjYXBlLmpzXG4vL2h0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2Nzcy1lc2NhcGVzXG4vKipcbiAqXG4gKiBAcGFyYW0gc2VsXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVKUXVlcnlTZWxlY3RvcihzZWwpIHtcbiAgLy9odHRwOi8vYXBpLmpxdWVyeS5jb20vY2F0ZWdvcnkvc2VsZWN0b3JzL1xuICAvLyFcIiMkJSYnKCkqKywuLzo7PD0+P0BbXFxdXmB7fH1+XG4gIC8vIGRvdWJsZSBiYWNrc2xhc2ggZXNjYXBlXG5cbiAgaWYgKCFzZWwpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgdmFyIHNlbGVjdG9yID0gc2VsLnJlcGxhY2UoLyhbOyYsXFwuXFwrXFwqXFx+XFw/JzpcIlxcIVxcXiMkJUBcXFtcXF1cXChcXCk8PT5cXHxcXC9cXFxce31gXSkvZywgJ1xcXFwkMScpO1xuXG4gIC8vIGlmIChzZWxlY3RvciAhPT0gc2VsKVxuICAvLyB7XG4gIC8vICAgICBjb25zb2xlLmRlYnVnKFwiLS0tLSBTRUxFQ1RPUiBFU0NBUEVEXCIpO1xuICAvLyAgICAgY29uc29sZS5kZWJ1ZyhcIjE6IFwiICsgc2VsKTtcbiAgLy8gICAgIGNvbnNvbGUuZGVidWcoXCIyOiBcIiArIHNlbGVjdG9yKTtcbiAgLy8gfVxuICAvLyBlbHNlXG4gIC8vIHtcbiAgLy8gICAgIGNvbnNvbGUuZGVidWcoXCItLS0tIFNFTEVDVE9SIE9LQVk6IFwiICsgc2VsKTtcbiAgLy8gfVxuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn07XG4vLyBURVNUUyBCRUxPVyBBTEwgV09SS0lORyBGSU5FIDopXG4vLyAoUmVnRXhwIHR5cG9zIGFyZSBoYXJkIHRvIHNwb3QhKVxuLy8gZXNjYXBlU2VsZWN0b3IoJyEnKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCdcIicpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJyMnKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCckJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignJScpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJyYnKTtcbi8vIGVzY2FwZVNlbGVjdG9yKFwiJ1wiKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCcoJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignKScpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJyonKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCcrJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignLCcpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJy4nKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCcvJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignOicpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJzsnKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCc8Jyk7XG4vLyBlc2NhcGVTZWxlY3RvcignPScpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJz4nKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCc/Jyk7XG4vLyBlc2NhcGVTZWxlY3RvcignQCcpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJ1snKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCdcXFxcJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignXScpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJ14nKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCdgJyk7XG4vLyBlc2NhcGVTZWxlY3RvcigneycpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJ3wnKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCd9Jyk7XG4vLyBlc2NhcGVTZWxlY3RvcignficpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVzY2FwZUpRdWVyeVNlbGVjdG9yIiwiZnVuY3Rpb24gZXh0ZW5kZWRUaHJvdHRsZShzdGFydENiLCB0aWNrQ2IsIGVuZENiLCB0aWNrUmF0ZSwgd2FpdFRocmVzaG9sZCwgY29udGV4dCkge1xuICBpZiAoIXRpY2tSYXRlKSB0aWNrUmF0ZSA9IDI1MDtcbiAgaWYgKCF3YWl0VGhyZXNob2xkKSB3YWl0VGhyZXNob2xkID0gdGlja1JhdGU7XG5cbiAgdmFyIGZpcnN0ID0gdHJ1ZSxcbiAgICBsYXN0LFxuICAgIGRlZmVyVGltZXI7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdHggPSBjb250ZXh0IHx8IHRoaXMsXG4gICAgICBub3cgPSAoRGF0ZS5ub3cgJiYgRGF0ZS5ub3coKSkgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgaWYgKCEobGFzdCAmJiBub3cgPCBsYXN0ICsgdGlja1JhdGUpKSB7XG4gICAgICBsYXN0ID0gbm93O1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIHN0YXJ0Q2IuYXBwbHkoY3R4LCBhcmdzKTtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpY2tDYi5hcHBseShjdHgsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChkZWZlclRpbWVyKTtcbiAgICBkZWZlclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGxhc3QgPSBub3c7XG4gICAgICBmaXJzdCA9IHRydWU7XG4gICAgICBlbmRDYi5hcHBseShjdHgsIGFyZ3MpO1xuICAgIH0sIHdhaXRUaHJlc2hvbGQpO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHRlbmRlZFRocm90dGxlIiwidmFyIFZpZXdzQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vdmlld3MvY29uc3RhbnRzJylcblxuLyoqXG4gKlxuICogQHBhcmFtICR2aWV3cG9ydFxuICogQHJldHVybnMge1JlYWRpdW1TREsuVmlld3MuT1JJRU5UQVRJT05fTEFORFNDQVBFfFJlYWRpdW1TREsuVmlld3MuT1JJRU5UQVRJT05fUE9SVFJBSVR9XG4gKi9cbmZ1bmN0aW9uIGdldE9yaWVudGF0aW9uKCR2aWV3cG9ydCkge1xuXG4gIHZhciB2aWV3cG9ydFdpZHRoID0gJHZpZXdwb3J0LndpZHRoKCk7XG4gIHZhciB2aWV3cG9ydEhlaWdodCA9ICR2aWV3cG9ydC5oZWlnaHQoKTtcblxuICBpZiAoIXZpZXdwb3J0V2lkdGggfHwgIXZpZXdwb3J0SGVpZ2h0KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB2aWV3cG9ydFdpZHRoID49IHZpZXdwb3J0SGVpZ2h0ID8gVmlld3NDb25zdGFudHMuT1JJRU5UQVRJT05fTEFORFNDQVBFIDogVmlld3NDb25zdGFudHMuT1JJRU5UQVRJT05fUE9SVFJBSVQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE9yaWVudGF0aW9uIiwiLy8gIExhdW5jaGVyT1NYXG4vL1xuLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQmVnaW5zV2l0aDogcmVxdWlyZSgnLi9iZWdpbnMtd2l0aCcpLFxuICBDU1NUcmFuc2l0aW9uOiByZXF1aXJlKCcuL2Nzcy10cmFuc2l0aW9uJyksXG4gIENTU1RyYW5zZm9ybVN0cmluZzogcmVxdWlyZSgnLi9jc3MtdHJhbnNmb3JtLXN0cmluZycpLFxuICBkZWR1Y2VTeW50aGV0aWNTcHJlYWQ6IHJlcXVpcmUoJy4vZGVkdWNlLXN5bnRoZXRpYy1zcHJlYWQnKSxcbiAgRW5kc1dpdGg6IHJlcXVpcmUoJy4vZW5kcy13aXRoJyksXG4gIGVzY2FwZUpRdWVyeVNlbGVjdG9yOiByZXF1aXJlKCcuL2VzY2FwZS1qcXVlcnktc2VsZWN0b3InKSxcbiAgZXh0ZW5kZWRUaHJvdHRsZTogcmVxdWlyZSgnLi9leHRlbmRlZC10aHJvdHRsZScpLFxuICBnZXRPcmllbnRhdGlvbjogcmVxdWlyZSgnLi9nZXQtb3JpZW50YXRpb24nKSxcbiAgaXNJZnJhbWVBbGl2ZTogcmVxdWlyZSgnLi9pcy1pZnJhbWUtYWxpdmUnKSxcbiAgaXNSZW5kaXRpb25TcHJlYWRQZXJtaXR0ZWRGb3JJdGVtOiByZXF1aXJlKCcuL2lzLXJlbmRpdGlvbi1zcHJlYWQtcGVybWl0dGVkLWZvci1pdGVtJyksXG4gIGxvYWRUZW1wbGF0ZTogcmVxdWlyZSgnLi9sb2FkLXRlbXBsYXRlJyksXG4gIE1hcmdpbnM6IHJlcXVpcmUoJy4vbWFyZ2lucycpLFxuICBSZWN0OiByZXF1aXJlKCcuL3JlY3QnKSxcbiAgUmVtb3ZlRnJvbVN0cmluZzogcmVxdWlyZSgnLi9yZW1vdmUtZnJvbS1zdHJpbmcnKSxcbiAgUmVzb2x2ZUNvbnRlbnRSZWY6IHJlcXVpcmUoJy4vcmVzb2x2ZS1jb250ZW50LXJlZicpLFxuICBzZXRTdHlsZXM6IHJlcXVpcmUoJy4vc2V0LXN0eWxlcycpLFxuICB0cmlnZ2VyTGF5b3V0OiByZXF1aXJlKCcuL3RyaWdnZXItbGF5b3V0JyksXG4gIFVwZGF0ZUh0bWxGb250U2l6ZTogcmVxdWlyZSgnLi91cGRhdGUtaHRtbC1mb250LXNpemUnKVxufSIsIi8qKlxuICpcbiAqIEBwYXJhbSBpZnJhbWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0lmcmFtZUFsaXZlKGlmcmFtZSkge1xuICB2YXIgdyA9IHVuZGVmaW5lZDtcbiAgdmFyIGQgPSB1bmRlZmluZWQ7XG4gIHRyeSB7XG4gICAgdyA9IGlmcmFtZS5jb250ZW50V2luZG93O1xuICAgIGQgPSBpZnJhbWUuY29udGVudERvY3VtZW50O1xuICB9IGNhdGNoIChleCkge1xuICAgIGNvbnNvbGUuZXJyb3IoZXgpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB3ICYmIGQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJZnJhbWVBbGl2ZSIsInZhciBTcGluZUl0ZW1Db25zdGFudHMgPSByZXF1aXJlKCcuLi9tb2RlbHMvc3BpbmUtaXRlbS1jb25zdGFudHMnKVxudmFyIFZpZXdzQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vdmlld3MvY29uc3RhbnRzJylcblxuLyoqXG4gKlxuICogQHBhcmFtIGl0ZW1cbiAqIEBwYXJhbSBvcmllbnRhdGlvblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzUmVuZGl0aW9uU3ByZWFkUGVybWl0dGVkRm9ySXRlbShpdGVtLCBvcmllbnRhdGlvbikge1xuXG4gIHZhciByZW5kaXRpb25fc3ByZWFkID0gaXRlbS5nZXRSZW5kaXRpb25TcHJlYWQoKTtcblxuICByZXR1cm4gIXJlbmRpdGlvbl9zcHJlYWQgfHwgcmVuZGl0aW9uX3NwcmVhZCA9PSBTcGluZUl0ZW1Db25zdGFudHMuUkVORElUSU9OX1NQUkVBRF9CT1RIIHx8IHJlbmRpdGlvbl9zcHJlYWQgPT0gU3BpbmVJdGVtQ29uc3RhbnRzLlJFTkRJVElPTl9TUFJFQURfQVVUTyB8fCAocmVuZGl0aW9uX3NwcmVhZCA9PSBTcGluZUl0ZW1Db25zdGFudHMuUkVORElUSU9OX1NQUkVBRF9MQU5EU0NBUEUgJiYgb3JpZW50YXRpb24gPT0gVmlld3NDb25zdGFudHMuT1JJRU5UQVRJT05fTEFORFNDQVBFKSB8fCAocmVuZGl0aW9uX3NwcmVhZCA9PSBTcGluZUl0ZW1Db25zdGFudHMuUkVORElUSU9OX1NQUkVBRF9QT1JUUkFJVCAmJiBvcmllbnRhdGlvbiA9PSBWaWV3c0NvbnN0YW50cy5PUklFTlRBVElPTl9QT1JUUkFJVCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUmVuZGl0aW9uU3ByZWFkUGVybWl0dGVkRm9ySXRlbSIsIi8qKlxuICpcbiAqIEBwYXJhbSBuYW1lXG4gKiBAcGFyYW0gcGFyYW1zXG4gKiBAcmV0dXJucyB7SGVscGVycy5sb2FkVGVtcGxhdGUuY2FjaGV9XG4gKi9cbmZ1bmN0aW9uIGxvYWRUZW1wbGF0ZShuYW1lLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGxvYWRUZW1wbGF0ZS5jYWNoZVtuYW1lXTtcbn07XG5cbi8qKlxuICpcbiAqIEB0eXBlIHt7Zml4ZWRfYm9va19mcmFtZTogc3RyaW5nLCBzaW5nbGVfcGFnZV9mcmFtZTogc3RyaW5nLCBzY3JvbGxlZF9ib29rX2ZyYW1lOiBzdHJpbmcsIHJlZmxvd2FibGVfYm9va19mcmFtZTogc3RyaW5nLCByZWZsb3dhYmxlX2Jvb2tfcGFnZV9mcmFtZTogc3RyaW5nfX1cbiAqL1xubG9hZFRlbXBsYXRlLmNhY2hlID0ge1xuICBcImZpeGVkX2Jvb2tfZnJhbWVcIjogJzxkaXYgaWQ9XCJmaXhlZC1ib29rLWZyYW1lXCIgY2xhc3M9XCJjbGVhcmZpeCBib29rLWZyYW1lIGZpeGVkLWJvb2stZnJhbWVcIj48L2Rpdj4nLFxuXG4gIFwic2luZ2xlX3BhZ2VfZnJhbWVcIjogJzxkaXY+PGRpdiBpZD1cInNjYWxlclwiPjxpZnJhbWUgc2Nyb2xsaW5nPVwibm9cIiBjbGFzcz1cImlmcmFtZS1maXhlZFwiPjwvaWZyYW1lPjwvZGl2PjwvZGl2PicsXG4gIC8vXCJzaW5nbGVfcGFnZV9mcmFtZVwiIDogJzxkaXY+PGlmcmFtZSBzY3JvbGxpbmc9XCJub1wiIGNsYXNzPVwiaWZyYW1lLWZpeGVkXCIgaWQ9XCJzY2FsZXJcIj48L2lmcmFtZT48L2Rpdj4nLFxuXG4gIFwic2Nyb2xsZWRfYm9va19mcmFtZVwiOiAnPGRpdiBpZD1cInJlZmxvd2FibGUtYm9vay1mcmFtZVwiIGNsYXNzPVwiY2xlYXJmaXggYm9vay1mcmFtZSByZWZsb3dhYmxlLWJvb2stZnJhbWVcIj48ZGl2IGlkPVwic2Nyb2xsZWQtY29udGVudC1mcmFtZVwiPjwvZGl2PjwvZGl2PicsXG4gIFwicmVmbG93YWJsZV9ib29rX2ZyYW1lXCI6ICc8ZGl2IGlkPVwicmVmbG93YWJsZS1ib29rLWZyYW1lXCIgY2xhc3M9XCJjbGVhcmZpeCBib29rLWZyYW1lIHJlZmxvd2FibGUtYm9vay1mcmFtZVwiPjwvZGl2PicsXG4gIFwicmVmbG93YWJsZV9ib29rX3BhZ2VfZnJhbWVcIjogJzxkaXYgaWQ9XCJyZWZsb3dhYmxlLWNvbnRlbnQtZnJhbWVcIiBjbGFzcz1cInJlZmxvd2FibGUtY29udGVudC1mcmFtZVwiPjxpZnJhbWUgc2Nyb2xsaW5nPVwibm9cIiBpZD1cImVwdWJDb250ZW50SWZyYW1lXCI+PC9pZnJhbWU+PC9kaXY+J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBsb2FkVGVtcGxhdGU7IiwiLyoqXG4gKlxuICogQHBhcmFtIG1hcmdpblxuICogQHBhcmFtIGJvcmRlclxuICogQHBhcmFtIHBhZGRpbmdcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYXJnaW5zKG1hcmdpbiwgYm9yZGVyLCBwYWRkaW5nKSB7XG5cbiAgdGhpcy5tYXJnaW4gPSBtYXJnaW47XG4gIHRoaXMuYm9yZGVyID0gYm9yZGVyO1xuICB0aGlzLnBhZGRpbmcgPSBwYWRkaW5nO1xuXG4gIHRoaXMubGVmdCA9IHRoaXMubWFyZ2luLmxlZnQgKyB0aGlzLmJvcmRlci5sZWZ0ICsgdGhpcy5wYWRkaW5nLmxlZnQ7XG4gIHRoaXMucmlnaHQgPSB0aGlzLm1hcmdpbi5yaWdodCArIHRoaXMuYm9yZGVyLnJpZ2h0ICsgdGhpcy5wYWRkaW5nLnJpZ2h0O1xuICB0aGlzLnRvcCA9IHRoaXMubWFyZ2luLnRvcCArIHRoaXMuYm9yZGVyLnRvcCArIHRoaXMucGFkZGluZy50b3A7XG4gIHRoaXMuYm90dG9tID0gdGhpcy5tYXJnaW4uYm90dG9tICsgdGhpcy5ib3JkZXIuYm90dG9tICsgdGhpcy5wYWRkaW5nLmJvdHRvbTtcblxuICB0aGlzLndpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubGVmdCArIHRoaXMucmlnaHQ7XG4gIH07XG5cbiAgdGhpcy5oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50b3AgKyB0aGlzLmJvdHRvbTtcbiAgfVxufTtcblxuLyoqXG4gKlxuICogQHBhcmFtICRlbGVtZW50XG4gKiBAcmV0dXJucyB7SGVscGVycy5SZWN0fVxuICovXG5NYXJnaW5zLmZyb21FbGVtZW50ID0gZnVuY3Rpb24oJGVsZW1lbnQpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKCRlbGVtZW50Lm1hcmdpbigpLCAkZWxlbWVudC5ib3JkZXIoKSwgJGVsZW1lbnQucGFkZGluZygpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge0hlbHBlcnMuUmVjdH1cbiAqL1xuTWFyZ2lucy5lbXB0eSA9IGZ1bmN0aW9uKCkge1xuXG4gIHJldHVybiBuZXcgdGhpcyh7XG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAwXG4gIH0sIHtcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IDBcbiAgfSwge1xuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogMFxuICB9KTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXJnaW5zIiwiLyoqXG4gKlxuICogQHBhcmFtIGxlZnRcbiAqIEBwYXJhbSB0b3BcbiAqIEBwYXJhbSB3aWR0aFxuICogQHBhcmFtIGhlaWdodFxuICogQGNvbnN0cnVjdG9yXG4gKi9cblxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG52YXIgalF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbmZ1bmN0aW9uIFJlY3QobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KSB7XG5cbiAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgdGhpcy50b3AgPSB0b3A7XG4gIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgdGhpcy5yaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmxlZnQgKyB0aGlzLndpZHRoO1xuICB9O1xuXG4gIHRoaXMuYm90dG9tID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9wICsgdGhpcy5oZWlnaHQ7XG4gIH07XG5cbiAgdGhpcy5pc092ZXJsYXAgPSBmdW5jdGlvbihyZWN0LCB0b2xlcmFuY2UpIHtcblxuICAgIGlmICh0b2xlcmFuY2UgPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0b2xlcmFuY2UgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiAhKHJlY3QucmlnaHQoKSA8IHRoaXMubGVmdCArIHRvbGVyYW5jZSB8fFxuICAgICAgcmVjdC5sZWZ0ID4gdGhpcy5yaWdodCgpIC0gdG9sZXJhbmNlIHx8XG4gICAgICByZWN0LmJvdHRvbSgpIDwgdGhpcy50b3AgKyB0b2xlcmFuY2UgfHxcbiAgICAgIHJlY3QudG9wID4gdGhpcy5ib3R0b20oKSAtIHRvbGVyYW5jZSk7XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSAkZWxlbWVudFxuICogQHJldHVybnMge0hlbHBlcnMuUmVjdH1cbiAqL1xuLy9UaGlzIG1ldGhvZCB0cmVhdHMgbXVsdGljb2x1bW4gdmlldyBhcyBvbmUgbG9uZyBjb2x1bW4gYW5kIGZpbmRzIHRoZSByZWN0YW5nbGUgb2YgdGhlIGVsZW1lbnQgaW4gdGhpcyBcImxvbmdcIiBjb2x1bW5cbi8vd2UgYXJlIG5vdCB1c2luZyBqUXVlcnkgT2Zmc2V0KCkgYW5kIHdpZHRoKCkvaGVpZ2h0KCkgZnVuY3Rpb24gYmVjYXVzZSBmb3IgbXVsdGljb2x1bW4gcmVuZGl0aW9uX2xheW91dCBpdCBwcm9kdWNlcyByZWN0YW5nbGUgYXMgYSBib3VuZGluZyBib3ggb2YgZWxlbWVudCB0aGF0XG4vLyByZWZsb3dzIGJldHdlZW4gY29sdW1ucyB0aGlzIGlzIGluY29uc3RhbnQgYW5kIGRpZmZpY3VsdCB0byBhbmFseXplIC5cblJlY3QuZnJvbUVsZW1lbnQgPSBmdW5jdGlvbigkZWxlbWVudCkge1xuXG4gIHZhciBlO1xuICBpZiAoXy5pc0FycmF5KCRlbGVtZW50KSB8fCAkZWxlbWVudCBpbnN0YW5jZW9mIGpRdWVyeSlcbiAgICBlID0gJGVsZW1lbnRbMF07XG4gIGVsc2VcbiAgICBlID0gJGVsZW1lbnQ7XG4gIC8vIFRPRE9ETSB0aGlzIGlzIHNvbWV3aGF0IGhhY2t5LiBUZXh0IChyYW5nZT8pIGVsZW1lbnRzIGRvbid0IGhhdmUgYSBwb3NpdGlvbiBzbyB3ZSBoYXZlIHRvIGFzayB0aGUgcGFyZW50LlxuICBpZiAoZS5ub2RlVHlwZSA9PT0gMykge1xuICAgIGUgPSAkZWxlbWVudC5wYXJlbnQoKVswXTtcbiAgfVxuXG5cbiAgdmFyIG9mZnNldExlZnQgPSBlLm9mZnNldExlZnQ7XG4gIHZhciBvZmZzZXRUb3AgPSBlLm9mZnNldFRvcDtcbiAgdmFyIG9mZnNldFdpZHRoID0gZS5vZmZzZXRXaWR0aDtcbiAgdmFyIG9mZnNldEhlaWdodCA9IGUub2Zmc2V0SGVpZ2h0O1xuXG4gIHdoaWxlIChlID0gZS5vZmZzZXRQYXJlbnQpIHtcbiAgICBvZmZzZXRMZWZ0ICs9IGUub2Zmc2V0TGVmdDtcbiAgICBvZmZzZXRUb3AgKz0gZS5vZmZzZXRUb3A7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlY3Qob2Zmc2V0TGVmdCwgb2Zmc2V0VG9wLCBvZmZzZXRXaWR0aCwgb2Zmc2V0SGVpZ2h0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVjdFxuIiwiLyoqXG4gKlxuICogQHBhcmFtIHN0clxuICogQHBhcmFtIHRvUmVtb3ZlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiBSZW1vdmVGcm9tU3RyaW5nKHN0ciwgdG9SZW1vdmUpIHtcblxuICB2YXIgc3RhcnRJeCA9IHN0ci5pbmRleE9mKHRvUmVtb3ZlKTtcblxuICBpZiAoc3RhcnRJeCA9PSAtMSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCBzdGFydEl4KSArIHN0ci5zdWJzdHJpbmcoc3RhcnRJeCArIHRvUmVtb3ZlLmxlbmd0aCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbW92ZUZyb21TdHJpbmciLCIvKipcbiAqXG4gKiBAcGFyYW0gY29udGVudFJlZlxuICogQHBhcmFtIHNvdXJjZUZpbGVIcmVmXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJlc29sdmVDb250ZW50UmVmKGNvbnRlbnRSZWYsIHNvdXJjZUZpbGVIcmVmKSB7XG5cbiAgaWYgKCFzb3VyY2VGaWxlSHJlZikge1xuICAgIHJldHVybiBjb250ZW50UmVmO1xuICB9XG5cbiAgdmFyIHNvdXJjZVBhcnRzID0gc291cmNlRmlsZUhyZWYuc3BsaXQoXCIvXCIpO1xuICBzb3VyY2VQYXJ0cy5wb3AoKTsgLy9yZW1vdmUgc291cmNlIGZpbGUgbmFtZVxuXG4gIHZhciBwYXRoQ29tcG9uZW50cyA9IGNvbnRlbnRSZWYuc3BsaXQoXCIvXCIpO1xuXG4gIHdoaWxlIChzb3VyY2VQYXJ0cy5sZW5ndGggPiAwICYmIHBhdGhDb21wb25lbnRzWzBdID09PSBcIi4uXCIpIHtcblxuICAgIHNvdXJjZVBhcnRzLnBvcCgpO1xuICAgIHBhdGhDb21wb25lbnRzLnNwbGljZSgwLCAxKTtcbiAgfVxuXG4gIHZhciBjb21iaW5lZCA9IHNvdXJjZVBhcnRzLmNvbmNhdChwYXRoQ29tcG9uZW50cyk7XG5cbiAgcmV0dXJuIGNvbWJpbmVkLmpvaW4oXCIvXCIpO1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc29sdmVDb250ZW50UmVmXG4iLCIvKipcbiAqXG4gKiBAcGFyYW0gc3R5bGVzXG4gKiBAcGFyYW0gJGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKHN0eWxlcywgJGVsZW1lbnQpIHtcblxuICB2YXIgY291bnQgPSBzdHlsZXMubGVuZ3RoO1xuXG4gIGlmICghY291bnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZXNbaV07XG4gICAgaWYgKHN0eWxlLnNlbGVjdG9yKSB7XG4gICAgICAkKHN0eWxlLnNlbGVjdG9yLCAkZWxlbWVudCkuY3NzKHN0eWxlLmRlY2xhcmF0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbGVtZW50LmNzcyhzdHlsZS5kZWNsYXJhdGlvbnMpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFN0eWxlcyIsIi8qKlxuICpcbiAqIEBwYXJhbSAkaWZyYW1lXG4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJMYXlvdXQoJGlmcmFtZSkge1xuXG4gIHZhciBkb2MgPSAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcblxuICBpZiAoIWRvYykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzcyA9IHVuZGVmaW5lZDtcbiAgdHJ5IHtcbiAgICBzcyA9IGRvYy5zdHlsZVNoZWV0cyAmJiBkb2Muc3R5bGVTaGVldHMubGVuZ3RoID8gZG9jLnN0eWxlU2hlZXRzWzBdIDogdW5kZWZpbmVkO1xuICAgIGlmICghc3MpIHtcbiAgICAgIHZhciBzdHlsZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jLmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gICAgICBzcyA9IHN0eWxlLnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChzcylcbiAgICAgIHNzLmluc2VydFJ1bGUoJ2JvZHk6Zmlyc3QtY2hpbGQ6OmJlZm9yZSB7Y29udGVudDpcXCdSRUFESVVNXFwnO2NvbG9yOiByZWQ7Zm9udC13ZWlnaHQ6IGJvbGQ7fScsIHNzLmNzc1J1bGVzLmxlbmd0aCk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgY29uc29sZS5lcnJvcihleCk7XG4gIH1cblxuICB0cnkge1xuICAgIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsIFwic3R5bGVcIik7XG4gICAgZWwuYXBwZW5kQ2hpbGQoZG9jLmNyZWF0ZVRleHROb2RlKFwiKnt9XCIpKTtcbiAgICBkb2MuYm9keS5hcHBlbmRDaGlsZChlbCk7XG4gICAgZG9jLmJvZHkucmVtb3ZlQ2hpbGQoZWwpO1xuXG4gICAgaWYgKHNzKVxuICAgICAgc3MuZGVsZXRlUnVsZShzcy5jc3NSdWxlcy5sZW5ndGggLSAxKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBjb25zb2xlLmVycm9yKGV4KTtcbiAgfVxuXG4gIGlmIChkb2MuYm9keSkge1xuICAgIHZhciB2YWwgPSBkb2MuYm9keS5vZmZzZXRUb3A7IC8vIHRyaWdnZXJzIGxheW91dFxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdHJpZ2dlckxheW91dCIsInZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnJlcXVpcmUoJy4uLy4uLy4uL2xpYi9qcXVlcnktc2l6ZXMnKVxuXG5mdW5jdGlvbiBVcGRhdGVIdG1sRm9udFNpemUoJGVwdWJIdG1sLCBmb250U2l6ZSkge1xuICB2YXIgZmFjdG9yID0gZm9udFNpemUgLyAxMDA7XG4gIHZhciB3aW4gPSAkZXB1Ykh0bWxbMF0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyICR0ZXh0YmxvY2tzID0gJCgncCwgZGl2LCBzcGFuLCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBsaSwgYmxvY2txdW90ZSwgdGQsIHByZScsICRlcHViSHRtbCk7XG4gIHZhciBvcmlnaW5hbExpbmVIZWlnaHQ7XG5cblxuICAvLyBuZWVkIHRvIGRvIHR3byBwYXNzZXMgYmVjYXVzZSBpdCBpcyBwb3NzaWJsZSB0byBoYXZlIG5lc3RlZCB0ZXh0IGJsb2Nrcy4gXG4gIC8vIElmIHlvdSBjaGFuZ2UgdGhlIGZvbnQgc2l6ZSBvZiB0aGUgcGFyZW50IHRoaXMgd2lsbCB0aGVuIGNyZWF0ZSBhbiBpbmFjY3VyYXRlXG4gIC8vIGZvbnQgc2l6ZSBmb3IgYW55IGNoaWxkcmVuLiBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAkdGV4dGJsb2Nrcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbGUgPSAkdGV4dGJsb2Nrc1tpXSxcbiAgICAgIGZvbnRTaXplQXR0ciA9IGVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtZm9udC1zaXplJyk7XG5cbiAgICBpZiAoIWZvbnRTaXplQXR0cikge1xuICAgICAgdmFyIHN0eWxlID0gd2luLmdldENvbXB1dGVkU3R5bGUoZWxlKTtcbiAgICAgIHZhciBvcmlnaW5hbEZvbnRTaXplID0gcGFyc2VJbnQoc3R5bGUuZm9udFNpemUpO1xuICAgICAgb3JpZ2luYWxMaW5lSGVpZ2h0ID0gcGFyc2VJbnQoc3R5bGUubGluZUhlaWdodCk7XG5cbiAgICAgIGVsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtZm9udC1zaXplJywgb3JpZ2luYWxGb250U2l6ZSk7XG4gICAgICAvLyBnZXRDb21wdXRlZFN0eWxlIHdpbGwgbm90IGNhbGN1bGF0ZSB0aGUgbGluZS1oZWlnaHQgaWYgdGhlIHZhbHVlIGlzICdub3JtYWwnLiBJbiB0aGlzIGNhc2UgcGFyc2VJbnQgd2lsbCByZXR1cm4gTmFOXG4gICAgICBpZiAob3JpZ2luYWxMaW5lSGVpZ2h0KSB7XG4gICAgICAgIGVsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtbGluZS1oZWlnaHQnLCBvcmlnaW5hbExpbmVIZWlnaHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHJlc2V0IHZhcmlhYmxlIHNvIHRoZSBiZWxvdyBsb2dpYyB3b3Jrcy4gQWxsIHZhcmlhYmxlcyBpbiBKUyBhcmUgZnVuY3Rpb24gc2NvcGVkLiBcbiAgb3JpZ2luYWxMaW5lSGVpZ2h0ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAkdGV4dGJsb2Nrcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbGUgPSAkdGV4dGJsb2Nrc1tpXSxcbiAgICAgIGZvbnRTaXplQXR0ciA9IGVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtZm9udC1zaXplJyksXG4gICAgICBsaW5lSGVpZ2h0QXR0ciA9IGVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtbGluZS1oZWlnaHQnKSxcbiAgICAgIG9yaWdpbmFsRm9udFNpemUgPSBOdW1iZXIoZm9udFNpemVBdHRyKTtcblxuICAgIGlmIChsaW5lSGVpZ2h0QXR0cikge1xuICAgICAgb3JpZ2luYWxMaW5lSGVpZ2h0ID0gTnVtYmVyKGxpbmVIZWlnaHRBdHRyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3JpZ2luYWxMaW5lSGVpZ2h0ID0gMDtcbiAgICB9XG5cbiAgICBlbGUuc3R5bGUuZm9udFNpemUgPSAob3JpZ2luYWxGb250U2l6ZSAqIGZhY3RvcikgKyAncHgnO1xuICAgIGlmIChvcmlnaW5hbExpbmVIZWlnaHQpIHtcbiAgICAgIGVsZS5zdHlsZS5saW5lSGVpZ2h0ID0gKG9yaWdpbmFsTGluZUhlaWdodCAqIGZhY3RvcikgKyAncHgnO1xuICAgIH1cblxuICB9XG4gICRlcHViSHRtbC5jc3MoXCJmb250LXNpemVcIiwgZm9udFNpemUgKyBcIiVcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXBkYXRlSHRtbEZvbnRTaXplIiwidmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyksXG4gIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxuXG52YXIgUmVhZGl1bVNESyA9IHtcbiAgVmlld3M6IHJlcXVpcmUoJy4vdmlld3MnKSxcbiAgRXZlbnRzOiByZXF1aXJlKCcuL2V2ZW50cycpLFxuICB2ZXJzaW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIwLjguMFwiO1xuICB9XG59XG5cbnJlcXVpcmUoJy4vbmF2aWdhdG9yLXNoaW0nKVxuXG5fLmV4dGVuZChSZWFkaXVtU0RLLCBCYWNrYm9uZS5FdmVudHMpXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGl1bVNESyIsIiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBFdmVudHNcbiAgICAgKlxuICAgICAqIEBkZXNjIFNob3VsZCBub3QgYmUgdHJpZ2dlcmVkIG91dHNpZGUgb2Yge0BsaW5rIFJlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlld30uXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqL1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEBldmVudFxuICAgICAgICovXG4gICAgICBDVVJSRU5UX1ZJRVdfUEFHSU5BVElPTl9DSEFOR0VEOiBcIkN1cnJlbnRWaWV3UGFnaW5hdGlvbkNoYW5nZWRcIixcbiAgICB9IiwiLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG5cbi8qKlxuICogQGNsYXNzIFJlYWRpdW1TREsuTW9kZWxzLkJvb2ttYXJrRGF0YVxuICovXG5mdW5jdGlvbiBCb29rbWFya0RhdGEoaWRyZWYsIGNvbnRlbnRDRkkpIHtcblxuICAvKipcbiAgICogc3BpbmUgaXRlbSBpZHJlZlxuICAgKiBAcHJvcGVydHkgaWRyZWZcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMuaWRyZWYgPSBpZHJlZjtcblxuICAvKipcbiAgICogY2ZpIG9mIHRoZSBmaXJzdCB2aXNpYmxlIGVsZW1lbnRcbiAgICogQHByb3BlcnR5IGNvbnRlbnRDRklcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMuY29udGVudENGSSA9IGNvbnRlbnRDRkk7XG5cbiAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb29rbWFya0RhdGEiLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbi8qKlxuICogVXNlZCB0byByZXBvcnQgcGFnaW5hdGlvbiBzdGF0ZSBiYWNrIHRvIHRoZSBob3N0IGFwcGxpY2F0aW9uXG4gKlxuICogQGNsYXNzIFJlYWRpdW1TREsuTW9kZWxzLkN1cnJlbnRQYWdlc0luZm9cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lfSBzcGluZVxuICogQHBhcmFtIHtib29sZWFufSBpc0ZpeGVkTGF5b3V0IGlzIGZpeGVkIG9yIHJlZmxvd2FibGUgc3BpbmUgaXRlbVxuICovXG5cbmZ1bmN0aW9uIEN1cnJlbnRQYWdlc0luZm8oc3BpbmUsIGlzRml4ZWRMYXlvdXQpIHtcblxuXG4gIHRoaXMuaXNSaWdodFRvTGVmdCA9IHNwaW5lLmlzUmlnaHRUb0xlZnQoKTtcbiAgdGhpcy5pc0ZpeGVkTGF5b3V0ID0gaXNGaXhlZExheW91dDtcbiAgdGhpcy5zcGluZUl0ZW1Db3VudCA9IHNwaW5lLml0ZW1zLmxlbmd0aFxuICB0aGlzLm9wZW5QYWdlcyA9IFtdO1xuXG4gIHRoaXMuYWRkT3BlblBhZ2UgPSBmdW5jdGlvbihzcGluZUl0ZW1QYWdlSW5kZXgsIHNwaW5lSXRlbVBhZ2VDb3VudCwgaWRyZWYsIHNwaW5lSXRlbUluZGV4KSB7XG4gICAgdGhpcy5vcGVuUGFnZXMucHVzaCh7XG4gICAgICBzcGluZUl0ZW1QYWdlSW5kZXg6IHNwaW5lSXRlbVBhZ2VJbmRleCxcbiAgICAgIHNwaW5lSXRlbVBhZ2VDb3VudDogc3BpbmVJdGVtUGFnZUNvdW50LFxuICAgICAgaWRyZWY6IGlkcmVmLFxuICAgICAgc3BpbmVJdGVtSW5kZXg6IHNwaW5lSXRlbUluZGV4XG4gICAgfSk7XG5cbiAgICB0aGlzLnNvcnQoKTtcbiAgfTtcblxuICB0aGlzLmNhbkdvTGVmdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmlzUmlnaHRUb0xlZnQgPyB0aGlzLmNhbkdvTmV4dCgpIDogdGhpcy5jYW5Hb1ByZXYoKTtcbiAgfTtcblxuICB0aGlzLmNhbkdvUmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1JpZ2h0VG9MZWZ0ID8gdGhpcy5jYW5Hb1ByZXYoKSA6IHRoaXMuY2FuR29OZXh0KCk7XG4gIH07XG5cbiAgdGhpcy5jYW5Hb05leHQgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmICh0aGlzLm9wZW5QYWdlcy5sZW5ndGggPT0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBsYXN0T3BlblBhZ2UgPSB0aGlzLm9wZW5QYWdlc1t0aGlzLm9wZW5QYWdlcy5sZW5ndGggLSAxXTtcblxuICAgIC8vIFRPRE86IGhhbmRsaW5nIG9mIG5vbi1saW5lYXIgc3BpbmUgaXRlbXMgKFwiYW5jaWxsYXJ5XCIgZG9jdW1lbnRzKSwgYWxsb3dpbmcgcGFnZSB0dXJuIHdpdGhpbiB0aGUgcmVmbG93YWJsZSBYSFRNTCwgYnV0IHByZXZlbnRpbmcgcHJldmlvdXMvbmV4dCBhY2Nlc3MgdG8gc2libGluZyBzcGluZSBpdGVtcy4gQWxzbyBuZWVkcyBcImdvIGJhY2tcIiBmZWF0dXJlIHRvIG5hdmlnYXRlIHRvIHNvdXJjZSBoeXBlcmxpbmsgbG9jYXRpb24gdGhhdCBsZWQgdG8gdGhlIG5vbi1saW5lYXIgZG9jdW1lbnQuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFkaXVtL3JlYWRpdW0tc2hhcmVkLWpzL2lzc3Vlcy8yNlxuXG4gICAgLy8gUmVtb3ZlZCwgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWQgcHJvcGVybHkgYXMgcGVyIGFib3ZlLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhZGl1bS9yZWFkaXVtLXNoYXJlZC1qcy9pc3N1ZXMvMTA4XG4gICAgLy8gaWYoIXNwaW5lLmlzVmFsaWRMaW5lYXJJdGVtKGxhc3RPcGVuUGFnZS5zcGluZUl0ZW1JbmRleCkpXG4gICAgLy8gICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBsYXN0T3BlblBhZ2Uuc3BpbmVJdGVtSW5kZXggPCBzcGluZS5sYXN0KCkuaW5kZXggfHwgbGFzdE9wZW5QYWdlLnNwaW5lSXRlbVBhZ2VJbmRleCA8IGxhc3RPcGVuUGFnZS5zcGluZUl0ZW1QYWdlQ291bnQgLSAxO1xuICB9O1xuXG4gIHRoaXMuY2FuR29QcmV2ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAodGhpcy5vcGVuUGFnZXMubGVuZ3RoID09IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgZmlyc3RPcGVuUGFnZSA9IHRoaXMub3BlblBhZ2VzWzBdO1xuXG4gICAgLy8gVE9ETzogaGFuZGxpbmcgb2Ygbm9uLWxpbmVhciBzcGluZSBpdGVtcyAoXCJhbmNpbGxhcnlcIiBkb2N1bWVudHMpLCBhbGxvd2luZyBwYWdlIHR1cm4gd2l0aGluIHRoZSByZWZsb3dhYmxlIFhIVE1MLCBidXQgcHJldmVudGluZyBwcmV2aW91cy9uZXh0IGFjY2VzcyB0byBzaWJsaW5nIHNwaW5lIGl0ZW1zLiBBbHNvIG5lZWRzIFwiZ28gYmFja1wiIGZlYXR1cmUgdG8gbmF2aWdhdGUgdG8gc291cmNlIGh5cGVybGluayBsb2NhdGlvbiB0aGF0IGxlZCB0byB0aGUgbm9uLWxpbmVhciBkb2N1bWVudC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWRpdW0vcmVhZGl1bS1zaGFyZWQtanMvaXNzdWVzLzI2XG5cbiAgICAvLyBSZW1vdmVkLCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZCBwcm9wZXJseSBhcyBwZXIgYWJvdmUuXG4gICAgLy8gLy9odHRwczovL2dpdGh1Yi5jb20vcmVhZGl1bS9yZWFkaXVtLXNoYXJlZC1qcy9pc3N1ZXMvMTA4XG4gICAgLy8gaWYoIXNwaW5lLmlzVmFsaWRMaW5lYXJJdGVtKGZpcnN0T3BlblBhZ2Uuc3BpbmVJdGVtSW5kZXgpKVxuICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gc3BpbmUuZmlyc3QoKS5pbmRleCA8IGZpcnN0T3BlblBhZ2Uuc3BpbmVJdGVtSW5kZXggfHwgMCA8IGZpcnN0T3BlblBhZ2Uuc3BpbmVJdGVtUGFnZUluZGV4O1xuICB9O1xuXG4gIHRoaXMuc29ydCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdGhpcy5vcGVuUGFnZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cbiAgICAgIGlmIChhLnNwaW5lSXRlbUluZGV4ICE9IGIuc3BpbmVJdGVtSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGEuc3BpbmVJdGVtSW5kZXggLSBiLnNwaW5lSXRlbUluZGV4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYS5wYWdlSW5kZXggLSBiLnBhZ2VJbmRleDtcblxuICAgIH0pO1xuXG4gIH07XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDdXJyZW50UGFnZXNJbmZvIiwiLy8gIExhdW5jaGVyT1NYXG4vL1xuLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gTW9kaWZpZWQgYnkgRGFuaWVsIFdlY2tcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuLyoqXG4gKlxuICogQHBhcmFtIHBhY2thZ2VcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbnZhciBTbWlsTW9kZWwgPSByZXF1aXJlKCcuL3NtaWwtbW9kZWwnKVxuXG52YXIgTWVkaWFPdmVybGF5ID0gZnVuY3Rpb24ocGFja2FnZSkge1xuXG4gIHRoaXMucGFja2FnZSA9IHBhY2thZ2U7XG5cblxuICB0aGlzLnBhcmFsbGVsQXQgPSBmdW5jdGlvbih0aW1lTWlsbGlzZWNvbmRzKSB7XG4gICAgdmFyIG9mZnNldCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc21pbF9tb2RlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzbWlsRGF0YSA9IHRoaXMuc21pbF9tb2RlbHNbaV07XG5cbiAgICAgIHZhciB0aW1lQWRqdXN0ZWQgPSB0aW1lTWlsbGlzZWNvbmRzIC0gb2Zmc2V0O1xuXG4gICAgICB2YXIgcGFyYSA9IHNtaWxEYXRhLnBhcmFsbGVsQXQodGltZUFkanVzdGVkKTtcbiAgICAgIGlmIChwYXJhKSB7XG4gICAgICAgIHJldHVybiBwYXJhO1xuICAgICAgfVxuXG4gICAgICBvZmZzZXQgKz0gc21pbERhdGEuZHVyYXRpb25NaWxsaXNlY29uZHNfQ2FsY3VsYXRlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5wZXJjZW50VG9Qb3NpdGlvbiA9IGZ1bmN0aW9uKHBlcmNlbnQsIHNtaWxEYXRhLCBwYXIsIG1pbGxpc2Vjb25kcykge1xuICAgIGlmIChwZXJjZW50IDwgMC4wIHx8IHBlcmNlbnQgPiAxMDAuMCkge1xuICAgICAgcGVyY2VudCA9IDAuMDtcbiAgICB9XG5cbiAgICB2YXIgdG90YWwgPSB0aGlzLmR1cmF0aW9uTWlsbGlzZWNvbmRzX0NhbGN1bGF0ZWQoKTtcblxuICAgIHZhciB0aW1lTXMgPSB0b3RhbCAqIChwZXJjZW50IC8gMTAwLjApO1xuXG4gICAgcGFyLnBhciA9IHRoaXMucGFyYWxsZWxBdCh0aW1lTXMpO1xuICAgIGlmICghcGFyLnBhcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzbWlsRGF0YVBhciA9IHBhci5wYXIuZ2V0U21pbCgpO1xuICAgIGlmICghc21pbERhdGFQYXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc21pbERhdGFPZmZzZXQgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNtaWxfbW9kZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzbWlsRGF0YS5zbWlsRGF0YSA9IHRoaXMuc21pbF9tb2RlbHNbaV07XG4gICAgICBpZiAoc21pbERhdGEuc21pbERhdGEgPT0gc21pbERhdGFQYXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzbWlsRGF0YU9mZnNldCArPSBzbWlsRGF0YS5zbWlsRGF0YS5kdXJhdGlvbk1pbGxpc2Vjb25kc19DYWxjdWxhdGVkKCk7XG4gICAgfVxuXG4gICAgbWlsbGlzZWNvbmRzLm1pbGxpc2Vjb25kcyA9IHRpbWVNcyAtIChzbWlsRGF0YU9mZnNldCArIHNtaWxEYXRhLnNtaWxEYXRhLmNsaXBPZmZzZXQocGFyLnBhcikpO1xuICB9O1xuXG4gIHRoaXMuZHVyYXRpb25NaWxsaXNlY29uZHNfQ2FsY3VsYXRlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b3RhbCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc21pbF9tb2RlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzbWlsRGF0YSA9IHRoaXMuc21pbF9tb2RlbHNbaV07XG5cbiAgICAgIHRvdGFsICs9IHNtaWxEYXRhLmR1cmF0aW9uTWlsbGlzZWNvbmRzX0NhbGN1bGF0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdG90YWw7XG4gIH07XG5cbiAgdGhpcy5zbWlsQXQgPSBmdW5jdGlvbihzbWlsSW5kZXgpIHtcbiAgICBpZiAoc21pbEluZGV4IDwgMCB8fCBzbWlsSW5kZXggPj0gdGhpcy5zbWlsX21vZGVscy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc21pbF9tb2RlbHNbc21pbEluZGV4XTtcbiAgfVxuXG4gIHRoaXMucG9zaXRpb25Ub1BlcmNlbnQgPSBmdW5jdGlvbihzbWlsSW5kZXgsIHBhckluZGV4LCBtaWxsaXNlY29uZHMpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIj4+Pj4+Pj4+Pj5cIik7XG4gICAgLy8gY29uc29sZS5sb2cobWlsbGlzZWNvbmRzKTtcbiAgICAvLyBjb25zb2xlLmxvZyhzbWlsSW5kZXgpO1xuICAgIC8vIGNvbnNvbGUubG9nKHBhckluZGV4KTtcbiAgICAvLyBjb25zb2xlLmxvZyhcIi0tLS0tLS1cIik7XG5cbiAgICBpZiAoc21pbEluZGV4ID49IHRoaXMuc21pbF9tb2RlbHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gLTEuMDtcbiAgICB9XG5cbiAgICB2YXIgc21pbERhdGFPZmZzZXQgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc21pbEluZGV4OyBpKyspIHtcbiAgICAgIHZhciBzZCA9IHRoaXMuc21pbF9tb2RlbHNbaV07XG4gICAgICBzbWlsRGF0YU9mZnNldCArPSBzZC5kdXJhdGlvbk1pbGxpc2Vjb25kc19DYWxjdWxhdGVkKCk7XG4gICAgfVxuXG4gICAgLy9jb25zb2xlLmxvZyhzbWlsRGF0YU9mZnNldCk7XG5cbiAgICB2YXIgc21pbERhdGEgPSB0aGlzLnNtaWxfbW9kZWxzW3NtaWxJbmRleF07XG5cbiAgICB2YXIgcGFyID0gc21pbERhdGEubnRoUGFyYWxsZWwocGFySW5kZXgpO1xuICAgIGlmICghcGFyKSB7XG4gICAgICByZXR1cm4gLTEuMDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0ID0gc21pbERhdGFPZmZzZXQgKyBzbWlsRGF0YS5jbGlwT2Zmc2V0KHBhcikgKyBtaWxsaXNlY29uZHM7XG5cbiAgICAvL2NvbnNvbGUubG9nKG9mZnNldCk7XG5cbiAgICB2YXIgdG90YWwgPSB0aGlzLmR1cmF0aW9uTWlsbGlzZWNvbmRzX0NhbGN1bGF0ZWQoKTtcblxuICAgIC8vL2NvbnNvbGUubG9nKHRvdGFsKTtcblxuICAgIHZhciBwZXJjZW50ID0gKG9mZnNldCAvIHRvdGFsKSAqIDEwMDtcblxuICAgIC8vY29uc29sZS5sb2coXCI8PDw8PDw8PDw8PCBcIiArIHBlcmNlbnQpO1xuXG4gICAgcmV0dXJuIHBlcmNlbnQ7XG4gIH07XG5cbiAgdGhpcy5zbWlsX21vZGVscyA9IFtdO1xuXG4gIHRoaXMuc2tpcHBhYmxlcyA9IFtdO1xuICB0aGlzLmVzY2FwYWJsZXMgPSBbXTtcblxuICB0aGlzLmR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICB0aGlzLm5hcnJhdG9yID0gdW5kZWZpbmVkO1xuXG5cbiAgdGhpcy5hY3RpdmVDbGFzcyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wbGF5YmFja0FjdGl2ZUNsYXNzID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMuREVCVUcgPSBmYWxzZTtcblxuXG4gIHRoaXMuZ2V0U21pbEJ5U3BpbmVJdGVtID0gZnVuY3Rpb24oc3BpbmVJdGVtKSB7XG4gICAgaWYgKCFzcGluZUl0ZW0pIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgY291bnQgPSB0aGlzLnNtaWxfbW9kZWxzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIHZhciBzbWlsID0gdGhpcy5zbWlsX21vZGVsc1tpXTtcbiAgICAgIGlmIChzbWlsLnNwaW5lSXRlbUlkID09PSBzcGluZUl0ZW0uaWRyZWYpIHtcbiAgICAgICAgaWYgKHNwaW5lSXRlbS5tZWRpYV9vdmVybGF5X2lkICE9PSBzbWlsLmlkKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlNNSUwgSU5DT1JSRUNUIElEPz8gXCIgKyBzcGluZUl0ZW0ubWVkaWFfb3ZlcmxheV9pZCArIFwiIC8vLyBcIiArIHNtaWwuaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzbWlsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLypcbiAgdGhpcy5nZXRTbWlsQnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgICBmb3IodmFyIGkgPSAwLCBjb3VudCA9IHRoaXMuc21pbF9tb2RlbHMubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuXG4gICAgICAgICAgdmFyIHNtaWwgPSB0aGlzLnNtaWxfbW9kZWxzW2ldO1xuICAgICAgICAgIGlmKHNtaWwuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzbWlsO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbiAgKi9cblxuICB0aGlzLmdldE5leHRTbWlsID0gZnVuY3Rpb24oc21pbCkge1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5zbWlsX21vZGVscy5pbmRleE9mKHNtaWwpO1xuICAgIGlmIChpbmRleCA9PSAtMSB8fCBpbmRleCA9PSB0aGlzLnNtaWxfbW9kZWxzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc21pbF9tb2RlbHNbaW5kZXggKyAxXTtcbiAgfVxuXG4gIHRoaXMuZ2V0UHJldmlvdXNTbWlsID0gZnVuY3Rpb24oc21pbCkge1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5zbWlsX21vZGVscy5pbmRleE9mKHNtaWwpO1xuICAgIGlmIChpbmRleCA9PSAtMSB8fCBpbmRleCA9PSAwKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNtaWxfbW9kZWxzW2luZGV4IC0gMV07XG4gIH1cbn07XG5cbk1lZGlhT3ZlcmxheS5mcm9tRFRPID0gZnVuY3Rpb24obW9EVE8sIHBhY2thZ2UpIHtcblxuICB2YXIgbW8gPSBuZXcgTWVkaWFPdmVybGF5KHBhY2thZ2UpO1xubW8uREVCVUcgPSB0cnVlO1xuICBpZiAoIW1vRFRPKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIk5vIE1lZGlhIE92ZXJsYXkuXCIpO1xuICAgIHJldHVybiBtbztcbiAgfVxuXG4gIGNvbnNvbGUuZGVidWcoXCJNZWRpYSBPdmVybGF5IElOSVQuLi5cIiwgbW9EVE8sIHBhY2thZ2UpO1xuXG4gIGlmIChtby5ERUJVRylcbiAgICBjb25zb2xlLmRlYnVnKEpTT04uc3RyaW5naWZ5KG1vRFRPKSk7XG5cbiAgbW8uZHVyYXRpb24gPSBtb0RUTy5kdXJhdGlvbjtcbiAgaWYgKG1vLmR1cmF0aW9uICYmIG1vLmR1cmF0aW9uLmxlbmd0aCAmJiBtby5kdXJhdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlNNSUwgdG90YWwgZHVyYXRpb24gaXMgc3RyaW5nLCBwYXJzaW5nIGZsb2F0Li4uIChcIiArIG1vLmR1cmF0aW9uICsgXCIpXCIpO1xuICAgIG1vLmR1cmF0aW9uID0gcGFyc2VGbG9hdChtby5kdXJhdGlvbik7XG4gIH1cbiAgaWYgKG1vLkRFQlVHKVxuICAgIGNvbnNvbGUuZGVidWcoXCJNZWRpYSBPdmVybGF5IER1cmF0aW9uIChUT1RBTCk6IFwiICsgbW8uZHVyYXRpb24pO1xuXG4gIG1vLm5hcnJhdG9yID0gbW9EVE8ubmFycmF0b3I7XG4gIGlmIChtby5ERUJVRylcbiAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBOYXJyYXRvcjogXCIgKyBtby5uYXJyYXRvcik7XG5cbiAgbW8uYWN0aXZlQ2xhc3MgPSBtb0RUTy5hY3RpdmVDbGFzcztcbiAgaWYgKG1vLkRFQlVHKVxuICAgIGNvbnNvbGUuZGVidWcoXCJNZWRpYSBPdmVybGF5IEFjdGl2ZS1DbGFzczogXCIgKyBtby5hY3RpdmVDbGFzcyk7XG5cbiAgbW8ucGxheWJhY2tBY3RpdmVDbGFzcyA9IG1vRFRPLnBsYXliYWNrQWN0aXZlQ2xhc3M7XG4gIGlmIChtby5ERUJVRylcbiAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBQbGF5YmFjay1BY3RpdmUtQ2xhc3M6IFwiICsgbW8ucGxheWJhY2tBY3RpdmVDbGFzcyk7XG5cbiAgdmFyIGNvdW50ID0gbW9EVE8uc21pbF9tb2RlbHMubGVuZ3RoO1xuICBpZiAobW8uREVCVUcpXG4gICAgY29uc29sZS5kZWJ1ZyhcIk1lZGlhIE92ZXJsYXkgU01JTCBjb3VudDogXCIgKyBjb3VudCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgdmFyIHNtaWxNb2RlbCA9IFNtaWxNb2RlbC5mcm9tU21pbERUTyhtb0RUTy5zbWlsX21vZGVsc1tpXSwgbW8pO1xuICAgIG1vLnNtaWxfbW9kZWxzLnB1c2goc21pbE1vZGVsKTtcblxuICAgIGlmIChtby5ERUJVRylcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJNZWRpYSBPdmVybGF5IER1cmF0aW9uIChTUElORSBJVEVNKTogXCIgKyBzbWlsTW9kZWwuZHVyYXRpb24pO1xuICB9XG5cbiAgY291bnQgPSBtb0RUTy5za2lwcGFibGVzLmxlbmd0aDtcbiAgaWYgKG1vLkRFQlVHKVxuICAgIGNvbnNvbGUuZGVidWcoXCJNZWRpYSBPdmVybGF5IFNLSVBQQUJMRVMgY291bnQ6IFwiICsgY291bnQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIG1vLnNraXBwYWJsZXMucHVzaChtb0RUTy5za2lwcGFibGVzW2ldKTtcblxuICAgIC8vaWYgKG1vLkRFQlVHKVxuICAgIC8vICAgIGNvbnNvbGUuZGVidWcoXCJNZWRpYSBPdmVybGF5IFNLSVBQQUJMRTogXCIgKyBtby5za2lwcGFibGVzW2ldKTtcbiAgfVxuXG4gIGNvdW50ID0gbW9EVE8uZXNjYXBhYmxlcy5sZW5ndGg7XG4gIGlmIChtby5ERUJVRylcbiAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBFU0NBUEFCTEVTIGNvdW50OiBcIiArIGNvdW50KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICBtby5lc2NhcGFibGVzLnB1c2gobW9EVE8uZXNjYXBhYmxlc1tpXSk7XG5cbiAgICAvL2lmIChtby5ERUJVRylcbiAgICAvLyAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBFU0NBUEFCTEU6IFwiICsgbW8uZXNjYXBhYmxlc1tpXSk7XG4gIH1cblxuICByZXR1cm4gbW87XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lZGlhT3ZlcmxheVxuIiwiLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG52YXIgSGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMnKVxudmFyIE1lZGlhT3ZlcmxheSA9IHJlcXVpcmUoJy4vbWVkaWEtb3ZlcmxheScpXG52YXIgU3BpbmUgPSByZXF1aXJlKCcuL3NwaW5lJylcbnZhciBTcGluZUl0ZW1Db25zdGFudHMgPSByZXF1aXJlKCcuL3NwaW5lLWl0ZW0tY29uc3RhbnRzJylcblxuLyoqXG4gKlxuICogQGNsYXNzIFJlYWRpdW1TREsuTW9kZWxzLlBhY2thZ2VcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbnZhciBQYWNrYWdlID0gZnVuY3Rpb24ocGFja2FnZURhdGEpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5zcGluZSA9IHVuZGVmaW5lZDtcblxuICB0aGlzLnJvb3RVcmwgPSB1bmRlZmluZWQ7XG4gIHRoaXMucm9vdFVybE1PID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMubWVkaWFfb3ZlcmxheSA9IHVuZGVmaW5lZDtcblxuICB0aGlzLnJlbmRpdGlvbl92aWV3cG9ydCA9IHVuZGVmaW5lZDtcblxuICB0aGlzLnJlbmRpdGlvbl9mbG93ID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMucmVuZGl0aW9uX2xheW91dCA9IHVuZGVmaW5lZDtcblxuICAvL1RPRE86IHVudXNlZCB5ZXQhXG4gIHRoaXMucmVuZGl0aW9uX3NwcmVhZCA9IHVuZGVmaW5lZDtcblxuICAvL1RPRE86IHVudXNlZCB5ZXQhXG4gIHRoaXMucmVuZGl0aW9uX29yaWVudGF0aW9uID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMucmVzb2x2ZVJlbGF0aXZlVXJsTU8gPSBmdW5jdGlvbihyZWxhdGl2ZVVybCkge1xuXG4gICAgaWYgKHNlbGYucm9vdFVybE1PICYmIHNlbGYucm9vdFVybE1PLmxlbmd0aCA+IDApIHtcblxuICAgICAgaWYgKEhlbHBlcnMuRW5kc1dpdGgoc2VsZi5yb290VXJsTU8sIFwiL1wiKSkge1xuICAgICAgICByZXR1cm4gc2VsZi5yb290VXJsTU8gKyByZWxhdGl2ZVVybDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzZWxmLnJvb3RVcmxNTyArIFwiL1wiICsgcmVsYXRpdmVVcmw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYucmVzb2x2ZVJlbGF0aXZlVXJsKHJlbGF0aXZlVXJsKTtcbiAgfTtcblxuICB0aGlzLnJlc29sdmVSZWxhdGl2ZVVybCA9IGZ1bmN0aW9uKHJlbGF0aXZlVXJsKSB7XG5cbiAgICBpZiAoc2VsZi5yb290VXJsKSB7XG5cbiAgICAgIGlmIChIZWxwZXJzLkVuZHNXaXRoKHNlbGYucm9vdFVybCwgXCIvXCIpKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnJvb3RVcmwgKyByZWxhdGl2ZVVybDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzZWxmLnJvb3RVcmwgKyBcIi9cIiArIHJlbGF0aXZlVXJsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZWxhdGl2ZVVybDtcbiAgfTtcblxuICB0aGlzLmlzRml4ZWRMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5yZW5kaXRpb25fbGF5b3V0ID09PSBTcGluZUl0ZW1Db25zdGFudHMuUkVORElUSU9OX0xBWU9VVF9QUkVQQUdJTkFURUQ7XG4gIH07XG5cbiAgdGhpcy5pc1JlZmxvd2FibGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXNlbGYuaXNGaXhlZExheW91dCgpO1xuICB9O1xuXG5cbiAgaWYgKHBhY2thZ2VEYXRhKSB7XG5cbiAgICB0aGlzLnJvb3RVcmwgPSBwYWNrYWdlRGF0YS5yb290VXJsO1xuICAgIHRoaXMucm9vdFVybE1PID0gcGFja2FnZURhdGEucm9vdFVybE1PO1xuXG4gICAgdGhpcy5yZW5kaXRpb25fdmlld3BvcnQgPSBwYWNrYWdlRGF0YS5yZW5kaXRpb25fdmlld3BvcnQ7XG5cbiAgICB0aGlzLnJlbmRpdGlvbl9sYXlvdXQgPSBwYWNrYWdlRGF0YS5yZW5kaXRpb25fbGF5b3V0O1xuXG4gICAgdGhpcy5yZW5kaXRpb25fZmxvdyA9IHBhY2thZ2VEYXRhLnJlbmRpdGlvbl9mbG93O1xuICAgIHRoaXMucmVuZGl0aW9uX29yaWVudGF0aW9uID0gcGFja2FnZURhdGEucmVuZGl0aW9uX29yaWVudGF0aW9uO1xuICAgIHRoaXMucmVuZGl0aW9uX3NwcmVhZCA9IHBhY2thZ2VEYXRhLnJlbmRpdGlvbl9zcHJlYWQ7XG5cbiAgICB0aGlzLnNwaW5lID0gbmV3IFNwaW5lKHRoaXMsIHBhY2thZ2VEYXRhLnNwaW5lKTtcblxuICAgIHRoaXMubWVkaWFfb3ZlcmxheSA9IE1lZGlhT3ZlcmxheS5mcm9tRFRPKHBhY2thZ2VEYXRhLm1lZGlhX292ZXJsYXksIHRoaXMpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhY2thZ2UiLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2Ygb3BlbmluZyBwYWdlIHJlcXVlc3RcbiAqIFByb3ZpZGVzIHRoZSBzcGluZSBpdGVtIHRvIGJlIG9wZW5lZCBhbmQgb25lIG9mIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqICBzcGluZUl0ZW1QYWdlSW5kZXgge051bWJlcn0sXG4gKiAgZWxlbWVudElkIHtTdHJpbmd9LFxuICogIGVsZW1lbnRDZmkge1N0cmluZ30sXG4gKiAgZmlyc3RQYWdlIHtib29sfSxcbiAqICBsYXN0UGFnZSB7Ym9vbH1cbiAqXG4gKiBAcGFyYW0ge1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbX0gc3BpbmVJdGVtXG4gKiBAcGFyYW0ge29iamVjdH0gW2luaXRpYXRvcl1cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFBhZ2VPcGVuUmVxdWVzdCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgaW5pdGlhdG9yKSB7XG5cbiAgdGhpcy5zcGluZUl0ZW0gPSBzcGluZUl0ZW07XG4gIHRoaXMuc3BpbmVJdGVtUGFnZUluZGV4ID0gdW5kZWZpbmVkO1xuICB0aGlzLmVsZW1lbnRJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5lbGVtZW50Q2ZpID0gdW5kZWZpbmVkO1xuICB0aGlzLmZpcnN0UGFnZSA9IGZhbHNlO1xuICB0aGlzLmxhc3RQYWdlID0gZmFsc2U7XG4gIHRoaXMuaW5pdGlhdG9yID0gaW5pdGlhdG9yO1xuXG4gIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNwaW5lSXRlbVBhZ2VJbmRleCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVsZW1lbnRJZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVsZW1lbnRDZmkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5maXJzdFBhZ2UgPSBmYWxzZTtcbiAgICB0aGlzLmxhc3RQYWdlID0gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5zZXRGaXJzdFBhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5maXJzdFBhZ2UgPSB0cnVlO1xuICB9O1xuXG4gIHRoaXMuc2V0TGFzdFBhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5sYXN0UGFnZSA9IHRydWU7XG4gIH07XG5cbiAgdGhpcy5zZXRQYWdlSW5kZXggPSBmdW5jdGlvbihwYWdlSW5kZXgpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5zcGluZUl0ZW1QYWdlSW5kZXggPSBwYWdlSW5kZXg7XG4gIH07XG5cbiAgdGhpcy5zZXRFbGVtZW50SWQgPSBmdW5jdGlvbihlbGVtZW50SWQpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5lbGVtZW50SWQgPSBlbGVtZW50SWQ7XG4gIH07XG5cbiAgdGhpcy5zZXRFbGVtZW50Q2ZpID0gZnVuY3Rpb24oZWxlbWVudENmaSkge1xuXG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuZWxlbWVudENmaSA9IGVsZW1lbnRDZmk7XG4gIH07XG5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlT3BlblJlcXVlc3QiLCIvLyAgTGF1bmNoZXJPU1hcbi8vXG4vLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyBNb2RpZmllZCBieSBEYW5pZWwgV2Vja1xuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG52YXIgZXNjYXBlSlF1ZXJ5U2VsZWN0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2VzY2FwZS1qcXVlcnktc2VsZWN0b3InKVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gc21pbFxuICogQGNvbnN0cnVjdG9yXG4gKi9cblxuZnVuY3Rpb24gU21pbEl0ZXJhdG9yKHNtaWwpIHtcblxuICB0aGlzLnNtaWwgPSBzbWlsO1xuICB0aGlzLmN1cnJlbnRQYXIgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY3VycmVudFBhciA9IGZpbmRQYXJOb2RlKDAsIHRoaXMuc21pbCwgZmFsc2UpO1xuICB9O1xuXG4gIC8qXG4gIHRoaXMuZmlyc3REZWVwID0gZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgICB2YXIgcGFyID0gY29udGFpbmVyLm5vZGVUeXBlID09PSBcInBhclwiID8gY29udGFpbmVyIDogZmluZFBhck5vZGUoMCwgY29udGFpbmVyLCBmYWxzZSk7XG5cbiAgICAgIHJldHVybiBwYXI7XG4gIH07XG4gICovXG4gIC8vXG4gIC8vICAgIHRoaXMuZW5zdXJlTmV4dFZhbGlkVGV4dEVsZW1lbnQgPSBmdW5jdGlvbigpXG4gIC8vICAgIHtcbiAgLy8gICAgICAgIGlmICghdGhpcy5jdXJyZW50UGFyKVxuICAvLyAgICAgICAge1xuICAvLyAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJQYXIgaXRlcmF0b3IgaXMgb3V0IG9mIHJhbmdlXCIpO1xuICAvLyAgICAgICAgICAgIHJldHVybjtcbiAgLy8gICAgICAgIH1cbiAgLy9cbiAgLy8gICAgICAgIHdoaWxlICh0aGlzLmN1cnJlbnRQYXIgJiYgIXRoaXMuY3VycmVudFBhci5lbGVtZW50KVxuICAvLyAgICAgICAge1xuICAvLyAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAvLyAgICAgICAgfVxuICAvLyAgICB9O1xuXG4gIHRoaXMuZmluZFRleHRJZCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRQYXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJQYXIgaXRlcmF0b3IgaXMgb3V0IG9mIHJhbmdlXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB3aGlsZSAodGhpcy5jdXJyZW50UGFyKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50UGFyLmVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGlkID09PSB0aGlzLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkKSAvL3RoaXMuY3VycmVudFBhci5lbGVtZW50LmlkXG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9VVEVSIG1hdGNoXG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmN1cnJlbnRQYXIuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgICAgaWYgKHBhcmVudC5pZCAmJiBwYXJlbnQuaWQgPT0gaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSU5ORVIgbWF0Y2hcbiAgICAgICAgLy92YXIgaW5zaWRlID0gdGhpcy5jdXJyZW50UGFyLmVsZW1lbnQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgIHZhciBpbnNpZGUgPSAkKFwiI1wiICsgZXNjYXBlSlF1ZXJ5U2VsZWN0b3IoaWQpLCB0aGlzLmN1cnJlbnRQYXIuZWxlbWVudCk7XG4gICAgICAgIGlmIChpbnNpZGUgJiYgaW5zaWRlLmxlbmd0aCAmJiBpbnNpZGVbMF0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm5leHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0aGlzLm5leHQgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmICghdGhpcy5jdXJyZW50UGFyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwiUGFyIGl0ZXJhdG9yIGlzIG91dCBvZiByYW5nZVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRQYXIgPSBmaW5kUGFyTm9kZSh0aGlzLmN1cnJlbnRQYXIuaW5kZXggKyAxLCB0aGlzLmN1cnJlbnRQYXIucGFyZW50LCBmYWxzZSk7XG4gIH07XG5cbiAgdGhpcy5wcmV2aW91cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKCF0aGlzLmN1cnJlbnRQYXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJQYXIgaXRlcmF0b3IgaXMgb3V0IG9mIHJhbmdlXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudFBhciA9IGZpbmRQYXJOb2RlKHRoaXMuY3VycmVudFBhci5pbmRleCAtIDEsIHRoaXMuY3VycmVudFBhci5wYXJlbnQsIHRydWUpO1xuICB9O1xuXG4gIHRoaXMuaXNMYXN0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoIXRoaXMuY3VycmVudFBhcikge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIlBhciBpdGVyYXRvciBpcyBvdXQgb2YgcmFuZ2VcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZpbmRQYXJOb2RlKHRoaXMuY3VycmVudFBhci5pbmRleCArIDEsIHRoaXMuY3VycmVudFBhci5wYXJlbnQsIGZhbHNlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdGhpcy5nb1RvUGFyID0gZnVuY3Rpb24ocGFyKSB7XG5cbiAgICB3aGlsZSAodGhpcy5jdXJyZW50UGFyKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50UGFyID09IHBhcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGZpbmRQYXJOb2RlKHN0YXJ0SW5kZXgsIGNvbnRhaW5lciwgcHJldmlvdXMpIHtcblxuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4LCBjb3VudCA9IGNvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGg7IGkgPj0gMCAmJiBpIDwgY291bnQ7IGkgKz0gKHByZXZpb3VzID8gLTEgOiAxKSkge1xuXG4gICAgICB2YXIgbm9kZSA9IGNvbnRhaW5lci5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IFwicGFyXCIpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG5cbiAgICAgIC8vIGFzc2VydChub2RlLm5vZGVUeXBlID09IFwic2VxXCIpXG4gICAgICBub2RlID0gZmluZFBhck5vZGUocHJldmlvdXMgPyBub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDEgOiAwLCBub2RlLCBwcmV2aW91cyk7XG5cbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb250YWluZXIucGFyZW50KSB7XG4gICAgICByZXR1cm4gZmluZFBhck5vZGUoY29udGFpbmVyLmluZGV4ICsgKHByZXZpb3VzID8gLTEgOiAxKSwgY29udGFpbmVyLnBhcmVudCwgcHJldmlvdXMpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB0aGlzLnJlc2V0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNtaWxJdGVyYXRvclxuIiwidmFyIE1lZGlhTm9kZSA9IHJlcXVpcmUoJy4vbWVkaWEtbm9kZScpXG5cbmZ1bmN0aW9uIEF1ZGlvTm9kZShwYXJlbnQpIHtcblxuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICB0aGlzLm5vZGVUeXBlID0gXCJhdWRpb1wiO1xuXG4gIHRoaXMuY2xpcEJlZ2luID0gMDtcblxuICB0aGlzLk1BWCA9IDEyMzQ1Njc4OTAuMTsgLy9OdW1iZXIuTUFYX1ZBTFVFIC0gMC4xOyAvL0luZmluaXR5O1xuICB0aGlzLmNsaXBFbmQgPSB0aGlzLk1BWDtcblxuXG4gIHRoaXMuY2xpcER1cmF0aW9uTWlsbGlzZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIF9jbGlwQmVnaW5NaWxsaXNlY29uZHMgPSB0aGlzLmNsaXBCZWdpbiAqIDEwMDA7XG4gICAgdmFyIF9jbGlwRW5kTWlsbGlzZWNvbmRzID0gdGhpcy5jbGlwRW5kICogMTAwMDtcblxuICAgIGlmICh0aGlzLmNsaXBFbmQgPj0gdGhpcy5NQVggfHwgX2NsaXBFbmRNaWxsaXNlY29uZHMgPD0gX2NsaXBCZWdpbk1pbGxpc2Vjb25kcykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jbGlwRW5kTWlsbGlzZWNvbmRzIC0gX2NsaXBCZWdpbk1pbGxpc2Vjb25kcztcbiAgfTtcbn07XG5cbkF1ZGlvTm9kZS5wcm90b3R5cGUgPSBuZXcgTWVkaWFOb2RlKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXVkaW9Ob2RlIiwiLy8gIExhdW5jaGVyT1NYXG4vL1xuLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gTW9kaWZpZWQgYnkgRGFuaWVsIFdlY2tcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyIEF1ZGlvTm9kZSA9IHJlcXVpcmUoJy4vYXVkaW8tbm9kZScpXG52YXIgVGV4dE5vZGUgPSByZXF1aXJlKCcuL3RleHQtbm9kZScpXG52YXIgU2VxTm9kZSA9IHJlcXVpcmUoJy4vc2VxLW5vZGUnKVxudmFyIFBhck5vZGUgPSByZXF1aXJlKCcuL3Bhci1ub2RlJylcblxuZnVuY3Rpb24gU21pbE1vZGVsKCkge1xuXG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuXG5cblxuICB0aGlzLmNoaWxkcmVuID0gW107IC8vY29sbGVjdGlvbiBvZiBzZXEgb3IgcGFyIHNtaWwgbm9kZXNcbiAgdGhpcy5pZCA9IHVuZGVmaW5lZDsgLy9tYW5pZmVzdCBpdGVtIGlkXG4gIHRoaXMuaHJlZiA9IHVuZGVmaW5lZDsgLy9ocmVmIG9mIHRoZSAuc21pbCBzb3VyY2UgZmlsZVxuICB0aGlzLmR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICB0aGlzLm1vID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMucGFyYWxsZWxBdCA9IGZ1bmN0aW9uKHRpbWVNaWxsaXNlY29uZHMpIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXS5wYXJhbGxlbEF0KHRpbWVNaWxsaXNlY29uZHMpO1xuICB9O1xuXG4gIHRoaXMubnRoUGFyYWxsZWwgPSBmdW5jdGlvbihpbmRleCkge1xuICAgIHZhciBjb3VudCA9IHtcbiAgICAgIGNvdW50OiAtMVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0ubnRoUGFyYWxsZWwoaW5kZXgsIGNvdW50KTtcbiAgfTtcblxuICB0aGlzLmNsaXBPZmZzZXQgPSBmdW5jdGlvbihwYXIpIHtcbiAgICB2YXIgb2Zmc2V0ID0ge1xuICAgICAgb2Zmc2V0OiAwXG4gICAgfTtcbiAgICBpZiAodGhpcy5jaGlsZHJlblswXS5jbGlwT2Zmc2V0KG9mZnNldCwgcGFyKSkge1xuICAgICAgcmV0dXJuIG9mZnNldC5vZmZzZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgdGhpcy5kdXJhdGlvbk1pbGxpc2Vjb25kc19DYWxjdWxhdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0uZHVyYXRpb25NaWxsaXNlY29uZHMoKTtcbiAgfTtcblxuXG4gIHZhciBfZXB1YnR5cGVTeW5jcyA9IFtdO1xuICAvLyBcbiAgLy8gdGhpcy5jbGVhclN5bmNzID0gZnVuY3Rpb24oKVxuICAvLyB7XG4gIC8vICAgICBfZXB1YnR5cGVTeW5jcyA9IFtdO1xuICAvLyB9O1xuXG4gIHRoaXMuaGFzU3luYyA9IGZ1bmN0aW9uKGVwdWJ0eXBlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfZXB1YnR5cGVTeW5jcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKF9lcHVidHlwZVN5bmNzW2ldID09PSBlcHVidHlwZSkge1xuICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJoYXNTeW5jIE9LOiBbXCIrZXB1YnR5cGUrXCJdXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL2NvbnNvbGUuZGVidWcoXCJoYXNTeW5jPz86IFtcIitlcHVidHlwZStcIl0gXCIgKyBfZXB1YnR5cGVTeW5jcyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHRoaXMuYWRkU3luYyA9IGZ1bmN0aW9uKGVwdWJ0eXBlcykge1xuICAgIGlmICghZXB1YnR5cGVzKSByZXR1cm47XG5cbiAgICAvL2NvbnNvbGUuZGVidWcoXCJhZGRTeW5jczogXCIrZXB1YnR5cGVzKTtcblxuICAgIHZhciBwYXJ0cyA9IGVwdWJ0eXBlcy5zcGxpdCgnICcpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlcHVidHlwZSA9IHBhcnRzW2ldLnRyaW0oKTtcblxuICAgICAgaWYgKGVwdWJ0eXBlLmxlbmd0aCA+IDAgJiYgIXRoaXMuaGFzU3luYyhlcHVidHlwZSkpIHtcbiAgICAgICAgX2VwdWJ0eXBlU3luY3MucHVzaChlcHVidHlwZSk7XG5cbiAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiYWRkU3luYzogXCIrZXB1YnR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxufTtcblxuU21pbE1vZGVsLmZyb21TbWlsRFRPID0gZnVuY3Rpb24oc21pbERUTywgbW8pIHtcblxuICBpZiAobW8uREVCVUcpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBEVE8gaW1wb3J0Li4uXCIpO1xuICB9XG5cbiAgdmFyIGluZGVudCA9IDA7XG4gIHZhciBnZXRJbmRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluZGVudDsgaSsrKSB7XG4gICAgICBzdHIgKz0gXCIgICBcIjtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHZhciBzbWlsTW9kZWwgPSBuZXcgU21pbE1vZGVsKCk7XG4gIHNtaWxNb2RlbC5pZCA9IHNtaWxEVE8uaWQ7XG4gIHNtaWxNb2RlbC5zcGluZUl0ZW1JZCA9IHNtaWxEVE8uc3BpbmVJdGVtSWQ7XG4gIHNtaWxNb2RlbC5ocmVmID0gc21pbERUTy5ocmVmO1xuXG4gIHNtaWxNb2RlbC5zbWlsVmVyc2lvbiA9IHNtaWxEVE8uc21pbFZlcnNpb247XG5cbiAgc21pbE1vZGVsLmR1cmF0aW9uID0gc21pbERUTy5kdXJhdGlvbjtcbiAgaWYgKHNtaWxNb2RlbC5kdXJhdGlvbiAmJiBzbWlsTW9kZWwuZHVyYXRpb24ubGVuZ3RoICYmIHNtaWxNb2RlbC5kdXJhdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlNNSUwgZHVyYXRpb24gaXMgc3RyaW5nLCBwYXJzaW5nIGZsb2F0Li4uIChcIiArIHNtaWxNb2RlbC5kdXJhdGlvbiArIFwiKVwiKTtcbiAgICBzbWlsTW9kZWwuZHVyYXRpb24gPSBwYXJzZUZsb2F0KHNtaWxNb2RlbC5kdXJhdGlvbik7XG4gIH1cblxuICBzbWlsTW9kZWwubW8gPSBtbzsgLy9SZWFkaXVtU0RLLk1vZGVscy5NZWRpYU92ZXJsYXlcblxuICBpZiAoc21pbE1vZGVsLm1vLkRFQlVHKSB7XG4gICAgY29uc29sZS5sb2coXCJKUyBNTyBzbWlsVmVyc2lvbj1cIiArIHNtaWxNb2RlbC5zbWlsVmVyc2lvbik7XG4gICAgY29uc29sZS5sb2coXCJKUyBNTyBpZD1cIiArIHNtaWxNb2RlbC5pZCk7XG4gICAgY29uc29sZS5sb2coXCJKUyBNTyBzcGluZUl0ZW1JZD1cIiArIHNtaWxNb2RlbC5zcGluZUl0ZW1JZCk7XG4gICAgY29uc29sZS5sb2coXCJKUyBNTyBocmVmPVwiICsgc21pbE1vZGVsLmhyZWYpO1xuICAgIGNvbnNvbGUubG9nKFwiSlMgTU8gZHVyYXRpb249XCIgKyBzbWlsTW9kZWwuZHVyYXRpb24pO1xuICB9XG5cbiAgdmFyIHNhZmVDb3B5UHJvcGVydHkgPSBmdW5jdGlvbihwcm9wZXJ0eSwgZnJvbSwgdG8sIGlzUmVxdWlyZWQpIHtcblxuICAgIGlmICgocHJvcGVydHkgaW4gZnJvbSkpIHsgLy8gJiYgZnJvbVtwcm9wZXJ0eV0gIT09IFwiXCJcblxuICAgICAgaWYgKCEocHJvcGVydHkgaW4gdG8pKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJwcm9wZXJ0eSBcIiArIHByb3BlcnR5ICsgXCIgbm90IGRlY2xhcmVkIGluIHNtaWwgbm9kZSBcIiArIHRvLm5vZGVUeXBlKTtcbiAgICAgIH1cblxuICAgICAgdG9bcHJvcGVydHldID0gZnJvbVtwcm9wZXJ0eV07XG5cbiAgICAgIGlmIChzbWlsTW9kZWwubW8uREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coZ2V0SW5kZW50KCkgKyBcIkpTIE1POiBbXCIgKyBwcm9wZXJ0eSArIFwiPVwiICsgdG9bcHJvcGVydHldICsgXCJdXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgY29uc29sZS5sb2coXCJSZXF1aXJlZCBwcm9wZXJ0eSBcIiArIHByb3BlcnR5ICsgXCIgbm90IGZvdW5kIGluIHNtaWwgbm9kZSBcIiArIGZyb20ubm9kZVR5cGUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3JlYXRlTm9kZUZyb21EVE8gPSBmdW5jdGlvbihub2RlRFRPLCBwYXJlbnQpIHtcblxuICAgIHZhciBub2RlO1xuXG4gICAgaWYgKG5vZGVEVE8ubm9kZVR5cGUgPT0gXCJzZXFcIikge1xuXG4gICAgICBpZiAoc21pbE1vZGVsLm1vLkRFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdldEluZGVudCgpICsgXCJKUyBNTyBzZXFcIik7XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBuZXcgU2VxTm9kZShwYXJlbnQpO1xuXG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwidGV4dHJlZlwiLCBub2RlRFRPLCBub2RlLCAoKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSA/IHRydWUgOiBmYWxzZSkpO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImlkXCIsIG5vZGVEVE8sIG5vZGUpO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImVwdWJ0eXBlXCIsIG5vZGVEVE8sIG5vZGUpO1xuXG4gICAgICBpZiAobm9kZS5lcHVidHlwZSkge1xuICAgICAgICBub2RlLmdldFNtaWwoKS5hZGRTeW5jKG5vZGUuZXB1YnR5cGUpO1xuICAgICAgfVxuXG4gICAgICBpbmRlbnQrKztcbiAgICAgIGNvcHlDaGlsZHJlbihub2RlRFRPLCBub2RlKTtcbiAgICAgIGluZGVudC0tO1xuICAgIH0gZWxzZSBpZiAobm9kZURUTy5ub2RlVHlwZSA9PSBcInBhclwiKSB7XG5cbiAgICAgIGlmIChzbWlsTW9kZWwubW8uREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coZ2V0SW5kZW50KCkgKyBcIkpTIE1PIHBhclwiKTtcbiAgICAgIH1cblxuICAgICAgbm9kZSA9IG5ldyBQYXJOb2RlKHBhcmVudCk7XG5cbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJpZFwiLCBub2RlRFRPLCBub2RlKTtcbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJlcHVidHlwZVwiLCBub2RlRFRPLCBub2RlKTtcblxuICAgICAgaWYgKG5vZGUuZXB1YnR5cGUpIHtcbiAgICAgICAgbm9kZS5nZXRTbWlsKCkuYWRkU3luYyhub2RlLmVwdWJ0eXBlKTtcbiAgICAgIH1cblxuICAgICAgaW5kZW50Kys7XG4gICAgICBjb3B5Q2hpbGRyZW4obm9kZURUTywgbm9kZSk7XG4gICAgICBpbmRlbnQtLTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG5cbiAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IFwidGV4dFwiKSB7XG4gICAgICAgICAgbm9kZS50ZXh0ID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGQubm9kZVR5cGUgPT0gXCJhdWRpb1wiKSB7XG4gICAgICAgICAgbm9kZS5hdWRpbyA9IGNoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmV4cGVjdGVkIHNtaWwgbm9kZSB0eXBlOiBcIiArIGNoaWxkLm5vZGVUeXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vXG4gICAgICB2YXIgZm9yY2VUVFMgPSBmYWxzZTsgLy8gZm9yIHRlc3Rpbmcgb25seSFcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgaWYgKGZvcmNlVFRTIHx8ICFub2RlLmF1ZGlvKSB7XG4gICAgICAgIC8vIHN5bnRoZXRpYyBzcGVlY2ggKHBsYXliYWNrIHVzaW5nIFRUUyBlbmdpbmUpLCBvciBlbWJlZGRlZCBtZWRpYSwgb3IgYmxhbmsgcGFnZVxuICAgICAgICB2YXIgZmFrZUF1ZGlvID0gbmV3IEF1ZGlvTm9kZShub2RlKTtcblxuICAgICAgICBmYWtlQXVkaW8uY2xpcEJlZ2luID0gMDtcbiAgICAgICAgZmFrZUF1ZGlvLmNsaXBFbmQgPSBmYWtlQXVkaW8uTUFYO1xuICAgICAgICBmYWtlQXVkaW8uc3JjID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIG5vZGUuYXVkaW8gPSBmYWtlQXVkaW87XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlRFRPLm5vZGVUeXBlID09IFwidGV4dFwiKSB7XG5cbiAgICAgIGlmIChzbWlsTW9kZWwubW8uREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coZ2V0SW5kZW50KCkgKyBcIkpTIE1PIHRleHRcIik7XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBuZXcgVGV4dE5vZGUocGFyZW50KTtcblxuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcInNyY1wiLCBub2RlRFRPLCBub2RlLCB0cnVlKTtcbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJzcmNGaWxlXCIsIG5vZGVEVE8sIG5vZGUsIHRydWUpO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcInNyY0ZyYWdtZW50SWRcIiwgbm9kZURUTywgbm9kZSwgZmFsc2UpO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImlkXCIsIG5vZGVEVE8sIG5vZGUpO1xuXG4gICAgICBub2RlLnVwZGF0ZU1lZGlhTWFuaWZlc3RJdGVtSWQoKTtcbiAgICB9IGVsc2UgaWYgKG5vZGVEVE8ubm9kZVR5cGUgPT0gXCJhdWRpb1wiKSB7XG5cbiAgICAgIGlmIChzbWlsTW9kZWwubW8uREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coZ2V0SW5kZW50KCkgKyBcIkpTIE1PIGF1ZGlvXCIpO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbmV3IEF1ZGlvTm9kZShwYXJlbnQpO1xuXG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwic3JjXCIsIG5vZGVEVE8sIG5vZGUsIHRydWUpO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImlkXCIsIG5vZGVEVE8sIG5vZGUpO1xuXG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwiY2xpcEJlZ2luXCIsIG5vZGVEVE8sIG5vZGUpO1xuICAgICAgaWYgKG5vZGUuY2xpcEJlZ2luICYmIG5vZGUuY2xpcEJlZ2luLmxlbmd0aCAmJiBub2RlLmNsaXBCZWdpbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJTTUlMIGNsaXBCZWdpbiBpcyBzdHJpbmcsIHBhcnNpbmcgZmxvYXQuLi4gKFwiICsgbm9kZS5jbGlwQmVnaW4gKyBcIilcIik7XG4gICAgICAgIG5vZGUuY2xpcEJlZ2luID0gcGFyc2VGbG9hdChub2RlLmNsaXBCZWdpbik7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5jbGlwQmVnaW4gPCAwKSB7XG4gICAgICAgIGlmIChzbWlsTW9kZWwubW8uREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhnZXRJbmRlbnQoKSArIFwiSlMgTU8gY2xpcEJlZ2luIGFkanVzdGVkIHRvIFpFUk9cIik7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5jbGlwQmVnaW4gPSAwO1xuICAgICAgfVxuXG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwiY2xpcEVuZFwiLCBub2RlRFRPLCBub2RlKTtcbiAgICAgIGlmIChub2RlLmNsaXBFbmQgJiYgbm9kZS5jbGlwRW5kLmxlbmd0aCAmJiBub2RlLmNsaXBFbmQubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiU01JTCBjbGlwRW5kIGlzIHN0cmluZywgcGFyc2luZyBmbG9hdC4uLiAoXCIgKyBub2RlLmNsaXBFbmQgKyBcIilcIik7XG4gICAgICAgIG5vZGUuY2xpcEVuZCA9IHBhcnNlRmxvYXQobm9kZS5jbGlwRW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmNsaXBFbmQgPD0gbm9kZS5jbGlwQmVnaW4pIHtcbiAgICAgICAgaWYgKHNtaWxNb2RlbC5tby5ERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGdldEluZGVudCgpICsgXCJKUyBNTyBjbGlwRW5kIGFkanVzdGVkIHRvIE1BWFwiKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLmNsaXBFbmQgPSBub2RlLk1BWDtcbiAgICAgIH1cblxuICAgICAgLy9ub2RlLnVwZGF0ZU1lZGlhTWFuaWZlc3RJdGVtSWQoKTsgT05MWSBYSFRNTCBTUElORSBJVEVNUyBcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgc21pbCBub2RlIHR5cGU6IFwiICsgbm9kZURUTy5ub2RlVHlwZSk7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuXG4gIH07XG5cbiAgdmFyIGNvcHlDaGlsZHJlbiA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG5cbiAgICB2YXIgY291bnQgPSBmcm9tLmNoaWxkcmVuLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgdmFyIG5vZGUgPSBjcmVhdGVOb2RlRnJvbURUTyhmcm9tLmNoaWxkcmVuW2ldLCB0byk7XG4gICAgICBub2RlLmluZGV4ID0gaTtcbiAgICAgIHRvLmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgfVxuXG4gIH07XG5cbiAgY29weUNoaWxkcmVuKHNtaWxEVE8sIHNtaWxNb2RlbCk7XG5cbiAgcmV0dXJuIHNtaWxNb2RlbDtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbWlsTW9kZWwiLCJ2YXIgU21pbE5vZGUgPSByZXF1aXJlKCcuL3NtaWwtbm9kZScpXG5cbmZ1bmN0aW9uIE1lZGlhTm9kZShwYXJlbnQpIHtcblxuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICB0aGlzLnNyYyA9IFwiXCI7XG59O1xuXG5NZWRpYU5vZGUucHJvdG90eXBlID0gbmV3IFNtaWxOb2RlKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWVkaWFOb2RlIiwidmFyIFRpbWVDb250YWluZXJOb2RlID0gcmVxdWlyZSgnLi90aW1lLWNvbnRhaW5lci1ub2RlJylcblxuZnVuY3Rpb24gUGFyTm9kZShwYXJlbnQpIHtcblxuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICB0aGlzLmNoaWxkcmVuID0gW107XG4gIHRoaXMubm9kZVR5cGUgPSBcInBhclwiO1xuICB0aGlzLnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuYXVkaW8gPSB1bmRlZmluZWQ7XG4gIHRoaXMuZWxlbWVudCA9IHVuZGVmaW5lZDtcblxuXG4gIHRoaXMuZ2V0Rmlyc3RTZXFBbmNlc3RvcldpdGhFcHViVHlwZSA9IGZ1bmN0aW9uKGVwdWJ0eXBlLCBpbmNsdWRlU2VsZikge1xuICAgIGlmICghZXB1YnR5cGUpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgcGFyZW50ID0gaW5jbHVkZVNlbGYgPyB0aGlzIDogdGhpcy5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5lcHVidHlwZSAmJiBwYXJlbnQuZXB1YnR5cGUuaW5kZXhPZihlcHVidHlwZSkgPj0gMCkge1xuICAgICAgICByZXR1cm4gcGFyZW50OyAvLyBhc3NlcnQocGFyZW50Lm5vZGVUeXBlID09PSBcInNlcVwiKVxuICAgICAgfVxuXG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59O1xuXG5QYXJOb2RlLnByb3RvdHlwZSA9IG5ldyBUaW1lQ29udGFpbmVyTm9kZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhck5vZGUiLCJ2YXIgVGltZUNvbnRhaW5lck5vZGUgPSByZXF1aXJlKCcuL3RpbWUtY29udGFpbmVyLW5vZGUnKVxuXG5mdW5jdGlvbiBTZXFOb2RlKHBhcmVudCkge1xuXG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXG4gIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgdGhpcy5ub2RlVHlwZSA9IFwic2VxXCI7XG4gIHRoaXMudGV4dHJlZiA9IFwiXCI7XG5cbiAgdGhpcy5kdXJhdGlvbk1pbGxpc2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzbWlsRGF0YSA9IHRoaXMuZ2V0U21pbCgpO1xuXG4gICAgdmFyIHRvdGFsID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBcInBhclwiKSB7XG4gICAgICAgIGlmICghY29udGFpbmVyLmF1ZGlvKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRhaW5lci50ZXh0ICYmICghY29udGFpbmVyLnRleHQubWFuaWZlc3RJdGVtSWQgfHwgY29udGFpbmVyLnRleHQubWFuaWZlc3RJdGVtSWQgIT0gc21pbERhdGEuc3BpbmVJdGVtSWQpKSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coY29udGFpbmVyLnRleHQpO1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNtaWxEYXRhLnNwaW5lSXRlbUlkKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjbGlwRHVyID0gY29udGFpbmVyLmF1ZGlvLmNsaXBEdXJhdGlvbk1pbGxpc2Vjb25kcygpO1xuICAgICAgICB0b3RhbCArPSBjbGlwRHVyO1xuICAgICAgfSBlbHNlIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IFwic2VxXCIpIHtcbiAgICAgICAgdG90YWwgKz0gY29udGFpbmVyLmR1cmF0aW9uTWlsbGlzZWNvbmRzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvdGFsO1xuICB9O1xuXG4gIHRoaXMuY2xpcE9mZnNldCA9IGZ1bmN0aW9uKG9mZnNldCwgcGFyKSB7XG4gICAgdmFyIHNtaWxEYXRhID0gdGhpcy5nZXRTbWlsKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gXCJwYXJcIikge1xuICAgICAgICBpZiAoY29udGFpbmVyID09IHBhcikge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250YWluZXIuYXVkaW8pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250YWluZXIudGV4dCAmJiAoIWNvbnRhaW5lci50ZXh0Lm1hbmlmZXN0SXRlbUlkIHx8IGNvbnRhaW5lci50ZXh0Lm1hbmlmZXN0SXRlbUlkICE9IHNtaWxEYXRhLnNwaW5lSXRlbUlkKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsaXBEdXIgPSBjb250YWluZXIuYXVkaW8uY2xpcER1cmF0aW9uTWlsbGlzZWNvbmRzKCk7XG4gICAgICAgIG9mZnNldC5vZmZzZXQgKz0gY2xpcER1cjtcbiAgICAgIH0gZWxzZSBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBcInNlcVwiKSB7XG4gICAgICAgIHZhciBmb3VuZCA9IGNvbnRhaW5lci5jbGlwT2Zmc2V0KG9mZnNldCwgcGFyKTtcbiAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5wYXJhbGxlbEF0ID0gZnVuY3Rpb24odGltZU1pbGxpc2Vjb25kcykge1xuICAgIHZhciBzbWlsRGF0YSA9IHRoaXMuZ2V0U21pbCgpO1xuXG4gICAgdmFyIG9mZnNldCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0aW1lQWRqdXN0ZWQgPSB0aW1lTWlsbGlzZWNvbmRzIC0gb2Zmc2V0O1xuXG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gXCJwYXJcIikge1xuICAgICAgICBpZiAoIWNvbnRhaW5lci5hdWRpbykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRhaW5lci50ZXh0ICYmICghY29udGFpbmVyLnRleHQubWFuaWZlc3RJdGVtSWQgfHwgY29udGFpbmVyLnRleHQubWFuaWZlc3RJdGVtSWQgIT0gc21pbERhdGEuc3BpbmVJdGVtSWQpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2xpcER1ciA9IGNvbnRhaW5lci5hdWRpby5jbGlwRHVyYXRpb25NaWxsaXNlY29uZHMoKTtcblxuICAgICAgICBpZiAoY2xpcER1ciA+IDAgJiYgdGltZUFkanVzdGVkIDw9IGNsaXBEdXIpIHtcbiAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgb2Zmc2V0ICs9IGNsaXBEdXI7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gXCJzZXFcIikge1xuICAgICAgICB2YXIgcGFyYSA9IGNvbnRhaW5lci5wYXJhbGxlbEF0KHRpbWVBZGp1c3RlZCk7XG4gICAgICAgIGlmIChwYXJhKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmE7XG4gICAgICAgIH1cblxuICAgICAgICBvZmZzZXQgKz0gY29udGFpbmVyLmR1cmF0aW9uTWlsbGlzZWNvbmRzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLm50aFBhcmFsbGVsID0gZnVuY3Rpb24oaW5kZXgsIGNvdW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gXCJwYXJcIikge1xuICAgICAgICBjb3VudC5jb3VudCsrO1xuXG4gICAgICAgIGlmIChjb3VudC5jb3VudCA9PSBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBcInNlcVwiKSB7XG4gICAgICAgIHZhciBwYXJhID0gY29udGFpbmVyLm50aFBhcmFsbGVsKGluZGV4LCBjb3VudCk7XG4gICAgICAgIGlmIChwYXJhKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG59O1xuXG5TZXFOb2RlLnByb3RvdHlwZSA9IG5ldyBUaW1lQ29udGFpbmVyTm9kZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRpbWVDb250YWluZXJOb2RlIiwiZnVuY3Rpb24gU21pbE5vZGUocGFyZW50KSB7XG5cbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgdGhpcy5pZCA9IFwiXCI7XG5cbiAgLy9yb290IG5vZGUgaXMgYSBzbWlsIG1vZGVsXG4gIHRoaXMuZ2V0U21pbCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIG5vZGUgPSB0aGlzO1xuICAgIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIHRoaXMuaGFzQW5jZXN0b3IgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQgPT0gbm9kZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNtaWxOb2RlIiwidmFyIE1lZGlhTm9kZSA9IHJlcXVpcmUoJy4vbWVkaWEtbm9kZScpXG52YXIgUmVzb2x2ZUNvbnRlbnRSZWYgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL3Jlc29sdmUtY29udGVudC1yZWYnKVxuXG5mdW5jdGlvbiBUZXh0Tm9kZShwYXJlbnQpIHtcblxuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICB0aGlzLm5vZGVUeXBlID0gXCJ0ZXh0XCI7XG4gIHRoaXMuc3JjRmlsZSA9IFwiXCI7XG4gIHRoaXMuc3JjRnJhZ21lbnRJZCA9IFwiXCI7XG5cblxuICB0aGlzLm1hbmlmZXN0SXRlbUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLnVwZGF0ZU1lZGlhTWFuaWZlc3RJdGVtSWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc21pbERhdGEgPSB0aGlzLmdldFNtaWwoKTtcblxuICAgIGlmICghc21pbERhdGEuaHJlZiB8fCAhc21pbERhdGEuaHJlZi5sZW5ndGgpIHtcbiAgICAgIHJldHVybjsgLy8gQmxhbmsgTU8gcGFnZSBwbGFjZWhvbGRlciwgbm8gcmVhbCBTTUlMXG4gICAgfVxuXG4gICAgLy8gdmFyIHNyY1BhcnRzID0gaXRlbS5zcmMuc3BsaXQoJyMnKTtcbiAgICAvLyAgICAgICAgIGl0ZW0uc3JjRmlsZSA9IHNyY1BhcnRzWzBdO1xuICAgIC8vICAgICAgICAgaXRlbS5zcmNGcmFnbWVudElkID0gKHNyY1BhcnRzLmxlbmd0aCA9PT0gMikgPyBzcmNQYXJ0c1sxXSA6IFwiXCI7XG5cbiAgICB2YXIgc3JjID0gdGhpcy5zcmNGaWxlID8gdGhpcy5zcmNGaWxlIDogdGhpcy5zcmM7XG4gICAgLy8gY29uc29sZS5sb2coXCJzcmM6IFwiICsgc3JjKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcInNtaWxEYXRhLmhyZWY6IFwiICsgc21pbERhdGEuaHJlZik7XG4gICAgdmFyIHJlZiA9IFJlc29sdmVDb250ZW50UmVmKHNyYywgc21pbERhdGEuaHJlZik7XG4gICAgLy9jb25zb2xlLmxvZyhcInJlZjogXCIgKyByZWYpO1xuICAgIHZhciBmdWxsID0gc21pbERhdGEubW8ucGFja2FnZS5yZXNvbHZlUmVsYXRpdmVVcmxNTyhyZWYpO1xuICAgIC8vIGNvbnNvbGUubG9nKFwiZnVsbDogXCIgKyBmdWxsKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcIi0tLVwiKTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNtaWxEYXRhLm1vLnBhY2thZ2Uuc3BpbmUuaXRlbXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBpdGVtID0gc21pbERhdGEubW8ucGFja2FnZS5zcGluZS5pdGVtc1tqXTtcbiAgICAgIC8vY29uc29sZS5sb2coXCJpdGVtLmhyZWY6IFwiICsgaXRlbS5ocmVmKTtcbiAgICAgIHZhciB1cmwgPSBzbWlsRGF0YS5tby5wYWNrYWdlLnJlc29sdmVSZWxhdGl2ZVVybChpdGVtLmhyZWYpO1xuICAgICAgLy9jb25zb2xlLmxvZyhcInVybDogXCIgKyB1cmwpO1xuICAgICAgaWYgKHVybCA9PT0gZnVsbCkge1xuICAgICAgICAvL2NvbnNvbGUuZXJyb3IoXCJGT1VORDogXCIgKyBpdGVtLmlkcmVmKTtcbiAgICAgICAgdGhpcy5tYW5pZmVzdEl0ZW1JZCA9IGl0ZW0uaWRyZWY7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IHNldCB0aGUgTWVkaWEgTWFuaWZlc3RJdGVtSWQ/IFwiICsgdGhpcy5zcmMgKyBcIiAmJiBcIiArIHNtaWxEYXRhLmhyZWYpO1xuXG4gICAgLy8gICAgICAgIHRocm93IFwiQlJFQUtcIjtcbiAgfTtcblxufTtcblxuVGV4dE5vZGUucHJvdG90eXBlID0gbmV3IE1lZGlhTm9kZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHROb2RlIiwidmFyIFNtaWxOb2RlID0gcmVxdWlyZSgnLi9zbWlsLW5vZGUnKVxuXG5mdW5jdGlvbiBUaW1lQ29udGFpbmVyTm9kZShwYXJlbnQpIHtcblxuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICB0aGlzLmNoaWxkcmVuID0gdHlwZW9mIHRoaXMuY2hpbGRyZW4gPT09ICd1bmRlZmluZWQnID8gW10gOiB0aGlzLmNoaWxkcmVuO1xuICB0aGlzLmluZGV4ID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMuZXB1YnR5cGUgPSBcIlwiO1xuXG4gIHRoaXMuaXNFc2NhcGFibGUgPSBmdW5jdGlvbih1c2VyRXNjYXBhYmxlcykge1xuICAgIGlmICh0aGlzLmVwdWJ0eXBlID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHNtaWxNb2RlbCA9IHRoaXMuZ2V0U21pbCgpO1xuICAgIGlmICghc21pbE1vZGVsLm1vKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGFyciA9IHNtaWxNb2RlbC5tby5lc2NhcGFibGVzO1xuICAgIGlmICh1c2VyRXNjYXBhYmxlcy5sZW5ndGggPiAwKSB7XG4gICAgICBhcnIgPSB1c2VyRXNjYXBhYmxlcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZXB1YnR5cGUuaW5kZXhPZihhcnJbaV0pID49IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHRoaXMuaXNTa2lwcGFibGUgPSBmdW5jdGlvbih1c2VyU2tpcHBhYmxlcykge1xuICAgIGlmICh0aGlzLmVwdWJ0eXBlID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHNtaWxNb2RlbCA9IHRoaXMuZ2V0U21pbCgpO1xuICAgIGlmICghc21pbE1vZGVsLm1vKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGFyciA9IHNtaWxNb2RlbC5tby5za2lwcGFibGVzO1xuICAgIGlmICh1c2VyU2tpcHBhYmxlcy5sZW5ndGggPiAwKSB7XG4gICAgICBhcnIgPSB1c2VyU2tpcHBhYmxlcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZXB1YnR5cGUuaW5kZXhPZihhcnJbaV0pID49IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufTtcblxuVGltZUNvbnRhaW5lck5vZGUucHJvdG90eXBlID0gbmV3IFNtaWxOb2RlKClcblxubW9kdWxlLmV4cG9ydHMgPSBUaW1lQ29udGFpbmVyTm9kZSIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBSRU5ESVRJT05fTEFZT1VUX1JFRkxPV0FCTEU6IFwicmVmbG93YWJsZVwiLFxuICBSRU5ESVRJT05fTEFZT1VUX1BSRVBBR0lOQVRFRDogXCJwcmUtcGFnaW5hdGVkXCIsXG5cbiAgUkVORElUSU9OX09SSUVOVEFUSU9OX0xBTkRTQ0FQRTogXCJsYW5kc2NhcGVcIixcbiAgUkVORElUSU9OX09SSUVOVEFUSU9OX1BPUlRSQUlUOiBcInBvcnRyYWl0XCIsXG4gIFJFTkRJVElPTl9PUklFTlRBVElPTl9BVVRPOiBcImF1dG9cIixcblxuICBTUFJFQURfTEVGVDogXCJwYWdlLXNwcmVhZC1sZWZ0XCIsXG4gIFNQUkVBRF9SSUdIVDogXCJwYWdlLXNwcmVhZC1yaWdodFwiLFxuICBTUFJFQURfQ0VOVEVSOiBcInBhZ2Utc3ByZWFkLWNlbnRlclwiLFxuXG4gIFJFTkRJVElPTl9TUFJFQURfTk9ORTogXCJub25lXCIsXG4gIFJFTkRJVElPTl9TUFJFQURfTEFORFNDQVBFOiBcImxhbmRzY2FwZVwiLFxuICBSRU5ESVRJT05fU1BSRUFEX1BPUlRSQUlUOiBcInBvcnRyYWl0XCIsXG4gIFJFTkRJVElPTl9TUFJFQURfQk9USDogXCJib3RoXCIsXG4gIFJFTkRJVElPTl9TUFJFQURfQVVUTzogXCJhdXRvXCIsXG5cbiAgUkVORElUSU9OX0ZMT1dfUEFHSU5BVEVEOiBcInBhZ2luYXRlZFwiLFxuICBSRU5ESVRJT05fRkxPV19TQ1JPTExFRF9DT05USU5VT1VTOiBcInNjcm9sbGVkLWNvbnRpbnVvdXNcIixcbiAgUkVORElUSU9OX0ZMT1dfU0NST0xMRURfRE9DOiBcInNjcm9sbGVkLWRvY1wiLFxuICBSRU5ESVRJT05fRkxPV19BVVRPOiBcImF1dG9cIlxufSIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyIENvbnN0YW50cyA9IHJlcXVpcmUoJy4vc3BpbmUtaXRlbS1jb25zdGFudHMnKVxuXG4vKipcbiAqIFdyYXBwZXIgb2YgdGhlIFNwaW5lSXRlbSBvYmplY3QgcmVjZWl2ZWQgZnJvbSB0aGUgaG9zdCBhcHBsaWNhdGlvblxuICpcbiAqIEBjbGFzcyBTcGluZUl0ZW1cbiAqXG4gKiBAcGFyYW0gaXRlbURhdGEgc3BpbmUgaXRlbSBwcm9wZXJ0aWVzIGNvbnRhaW5lclxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge1NwaW5lfSBzcGluZVxuICpcbiAqL1xudmFyIFNwaW5lSXRlbSA9IGZ1bmN0aW9uKGl0ZW1EYXRhLCBpbmRleCwgc3BpbmUpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5pZHJlZiA9IGl0ZW1EYXRhLmlkcmVmO1xuICB0aGlzLmhyZWYgPSBpdGVtRGF0YS5ocmVmO1xuXG4gIHRoaXMubGluZWFyID0gaXRlbURhdGEubGluZWFyID8gaXRlbURhdGEubGluZWFyLnRvTG93ZXJDYXNlKCkgOiBpdGVtRGF0YS5saW5lYXI7XG5cbiAgdGhpcy5wYWdlX3NwcmVhZCA9IGl0ZW1EYXRhLnBhZ2Vfc3ByZWFkO1xuXG4gIHRoaXMucmVuZGl0aW9uX3ZpZXdwb3J0ID0gaXRlbURhdGEucmVuZGl0aW9uX3ZpZXdwb3J0O1xuXG4gIHRoaXMucmVuZGl0aW9uX3NwcmVhZCA9IGl0ZW1EYXRhLnJlbmRpdGlvbl9zcHJlYWQ7XG5cbiAgLy9UT0RPOiB1bnVzZWQgeWV0IVxuICB0aGlzLnJlbmRpdGlvbl9vcmllbnRhdGlvbiA9IGl0ZW1EYXRhLnJlbmRpdGlvbl9vcmllbnRhdGlvbjtcblxuICB0aGlzLnJlbmRpdGlvbl9sYXlvdXQgPSBpdGVtRGF0YS5yZW5kaXRpb25fbGF5b3V0O1xuXG4gIHRoaXMucmVuZGl0aW9uX2Zsb3cgPSBpdGVtRGF0YS5yZW5kaXRpb25fZmxvdztcblxuXG5cbiAgdGhpcy5tZWRpYV9vdmVybGF5X2lkID0gaXRlbURhdGEubWVkaWFfb3ZlcmxheV9pZDtcblxuICB0aGlzLm1lZGlhX3R5cGUgPSBpdGVtRGF0YS5tZWRpYV90eXBlO1xuXG4gIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgdGhpcy5zcGluZSA9IHNwaW5lO1xuXG4gIHZhbGlkYXRlU3ByZWFkKCk7XG5cbiAgdGhpcy5zZXRTcHJlYWQgPSBmdW5jdGlvbihzcHJlYWQpIHtcbiAgICB0aGlzLnBhZ2Vfc3ByZWFkID0gc3ByZWFkO1xuXG4gICAgdmFsaWRhdGVTcHJlYWQoKTtcbiAgfTtcblxuICB0aGlzLmlzUmVuZGl0aW9uU3ByZWFkQWxsb3dlZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHJlbmRpdGlvbl9zcHJlYWQgPSBzZWxmLmdldFJlbmRpdGlvblNwcmVhZCgpO1xuICAgIHJldHVybiAhcmVuZGl0aW9uX3NwcmVhZCB8fCByZW5kaXRpb25fc3ByZWFkICE9IENvbnN0YW50cy5SRU5ESVRJT05fU1BSRUFEX05PTkU7XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVTcHJlYWQoKSB7XG5cbiAgICBpZiAoIXNlbGYucGFnZV9zcHJlYWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5wYWdlX3NwcmVhZCAhPSBDb25zdGFudHMuU1BSRUFEX0xFRlQgJiZcbiAgICAgIHNlbGYucGFnZV9zcHJlYWQgIT0gQ29uc3RhbnRzLlNQUkVBRF9SSUdIVCAmJlxuICAgICAgc2VsZi5wYWdlX3NwcmVhZCAhPSBDb25zdGFudHMuU1BSRUFEX0NFTlRFUikge1xuXG4gICAgICBjb25zb2xlLmVycm9yKHNlbGYucGFnZV9zcHJlYWQgKyBcIiBpcyBub3QgYSByZWNvZ25pemVkIHNwcmVhZCB0eXBlXCIpO1xuICAgIH1cblxuICB9XG5cbiAgdGhpcy5pc0xlZnRQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYucGFnZV9zcHJlYWQgPT0gQ29uc3RhbnRzLlNQUkVBRF9MRUZUO1xuICB9O1xuXG4gIHRoaXMuaXNSaWdodFBhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5wYWdlX3NwcmVhZCA9PSBDb25zdGFudHMuU1BSRUFEX1JJR0hUO1xuICB9O1xuXG4gIHRoaXMuaXNDZW50ZXJQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYucGFnZV9zcHJlYWQgPT0gQ29uc3RhbnRzLlNQUkVBRF9DRU5URVI7XG4gIH07XG5cbiAgdGhpcy5pc1JlZmxvd2FibGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXNlbGYuaXNGaXhlZExheW91dCgpO1xuICB9O1xuXG4gIHRoaXMuaXNGaXhlZExheW91dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gY2Fubm90IHVzZSBpc1Byb3BlcnR5VmFsdWVTZXRGb3JJdGVtT3JQYWNrYWdlKCkgaGVyZSFcblxuICAgIHZhciBpc0xheW91dEV4cGxpY2l0bHlEZWZpbmVkID0gc2VsZi5nZXRSZW5kaXRpb25MYXlvdXQoKTtcblxuICAgIGlmIChpc0xheW91dEV4cGxpY2l0bHlEZWZpbmVkKSB7XG5cbiAgICAgIGlmIChzZWxmLnJlbmRpdGlvbl9sYXlvdXQpIHtcbiAgICAgICAgaWYgKHNlbGYucmVuZGl0aW9uX2xheW91dCA9PT0gQ29uc3RhbnRzLlJFTkRJVElPTl9MQVlPVVRfUFJFUEFHSU5BVEVEKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHNlbGYucmVuZGl0aW9uX2xheW91dCA9PT0gQ29uc3RhbnRzLlJFTkRJVElPTl9MQVlPVVRfUkVGTE9XQUJMRSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZi5zcGluZS5wYWNrYWdlLmlzRml4ZWRMYXlvdXQoKTtcbiAgICB9XG5cbiAgICAvLyBpZiBpbWFnZSBvciBzdmcgdXNlIGZpeGVkIGxheW91dFxuICAgIHJldHVybiBzZWxmLm1lZGlhX3R5cGUuaW5kZXhPZihcImltYWdlL1wiKSA+PSAwO1xuXG4gIH07XG5cbiAgdGhpcy5nZXRSZW5kaXRpb25GbG93ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoc2VsZi5yZW5kaXRpb25fZmxvdykge1xuICAgICAgcmV0dXJuIHNlbGYucmVuZGl0aW9uX2Zsb3c7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuc3BpbmUucGFja2FnZS5yZW5kaXRpb25fZmxvdztcbiAgfTtcblxuICB0aGlzLmdldFJlbmRpdGlvblZpZXdwb3J0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoc2VsZi5yZW5kaXRpb25fdmlld3BvcnQpIHtcbiAgICAgIHJldHVybiBzZWxmLnJlbmRpdGlvbl92aWV3cG9ydDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5zcGluZS5wYWNrYWdlLnJlbmRpdGlvbl92aWV3cG9ydDtcbiAgfTtcblxuICB0aGlzLmdldFJlbmRpdGlvblNwcmVhZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKHNlbGYucmVuZGl0aW9uX3NwcmVhZCkge1xuICAgICAgcmV0dXJuIHNlbGYucmVuZGl0aW9uX3NwcmVhZDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5zcGluZS5wYWNrYWdlLnJlbmRpdGlvbl9zcHJlYWQ7XG4gIH07XG5cbiAgdGhpcy5nZXRSZW5kaXRpb25PcmllbnRhdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKHNlbGYucmVuZGl0aW9uX29yaWVudGF0aW9uKSB7XG4gICAgICByZXR1cm4gc2VsZi5yZW5kaXRpb25fb3JpZW50YXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuc3BpbmUucGFja2FnZS5yZW5kaXRpb25fb3JpZW50YXRpb247XG4gIH07XG5cbiAgdGhpcy5nZXRSZW5kaXRpb25MYXlvdXQgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmIChzZWxmLnJlbmRpdGlvbl9sYXlvdXQpIHtcbiAgICAgIHJldHVybiBzZWxmLnJlbmRpdGlvbl9sYXlvdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuc3BpbmUucGFja2FnZS5yZW5kaXRpb25fbGF5b3V0O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGlzUHJvcGVydHlWYWx1ZVNldEZvckl0ZW1PclBhY2thZ2UocHJvcE5hbWUsIHByb3BWYWx1ZSkge1xuXG4gICAgaWYgKHNlbGZbcHJvcE5hbWVdKSB7XG4gICAgICByZXR1cm4gc2VsZltwcm9wTmFtZV0gPT09IHByb3BWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5zcGluZS5wYWNrYWdlW3Byb3BOYW1lXSkge1xuICAgICAgcmV0dXJuIHNlbGYuc3BpbmUucGFja2FnZVtwcm9wTmFtZV0gPT09IHByb3BWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0aGlzLmlzRmxvd1Njcm9sbGVkQ29udGludW91cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIGlzUHJvcGVydHlWYWx1ZVNldEZvckl0ZW1PclBhY2thZ2UoXCJyZW5kaXRpb25fZmxvd1wiLCBDb25zdGFudHMuUkVORElUSU9OX0ZMT1dfU0NST0xMRURfQ09OVElOVU9VUyk7XG4gIH07XG5cbiAgdGhpcy5pc0Zsb3dTY3JvbGxlZERvYyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIGlzUHJvcGVydHlWYWx1ZVNldEZvckl0ZW1PclBhY2thZ2UoXCJyZW5kaXRpb25fZmxvd1wiLCBDb25zdGFudHMuUkVORElUSU9OX0ZMT1dfU0NST0xMRURfRE9DKTtcbiAgfTtcbn07XG5cblNwaW5lSXRlbS5hbHRlcm5hdGVTcHJlYWQgPSBmdW5jdGlvbihzcHJlYWQpIHtcblxuICBpZiAoc3ByZWFkID09PSBDb25zdGFudHMuU1BSRUFEX0xFRlQpIHtcbiAgICByZXR1cm4gQ29uc3RhbnRzLlNQUkVBRF9SSUdIVDtcbiAgfVxuXG4gIGlmIChzcHJlYWQgPT09IENvbnN0YW50cy5TUFJFQURfUklHSFQpIHtcbiAgICByZXR1cm4gQ29uc3RhbnRzLlNQUkVBRF9MRUZUO1xuICB9XG5cbiAgcmV0dXJuIHNwcmVhZDtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTcGluZUl0ZW0iLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbi8qKlxuICogIFdyYXBwZXIgb2YgdGhlIHNwaW5lIG9iamVjdCByZWNlaXZlZCBmcm9tIGhvc3RpbmcgYXBwbGljYXRpb25cbiAqXG4gKiAgQGNsYXNzICBSZWFkaXVtU0RLLk1vZGVscy5TcGluZVxuICovXG5cbnZhciBTcGluZUl0ZW0gPSByZXF1aXJlKCcuL3NwaW5lLWl0ZW0nKVxudmFyIFNwaW5lSXRlbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vc3BpbmUtaXRlbS1jb25zdGFudHMnKVxuXG5mdW5jdGlvbiBTcGluZShlcHViUGFja2FnZSwgc3BpbmVEVE8pIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLypcbiAgICogQ29sbGVjdGlvbiBvZiBzcGluZSBpdGVtc1xuICAgKiBAcHJvcGVydHkgaXRlbXNcbiAgICogQHR5cGUge0FycmF5fVxuICAgKi9cbiAgdGhpcy5pdGVtcyA9IFtdO1xuXG4gIC8qXG4gICAqIFBhZ2UgcHJvZ3Jlc3Npb24gZGlyZWN0aW9uIGx0cnxydGx8ZGVmYXVsdFxuICAgKiBAcHJvcGVydHkgZGlyZWN0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmRpcmVjdGlvbiA9IFwibHRyXCI7XG5cbiAgLypcbiAgICogQHByb3BlcnR5IHBhY2thZ2VcbiAgICogQHR5cGUge1JlYWRpdW1TREsuTW9kZWxzLlBhY2thZ2V9XG4gICAqXG4gICAqL1xuICB0aGlzLnBhY2thZ2UgPSBlcHViUGFja2FnZTtcblxuICB2YXIgX2hhbmRsZUxpbmVhciA9IGZhbHNlO1xuXG4gIHRoaXMuaGFuZGxlTGluZWFyID0gZnVuY3Rpb24oaGFuZGxlTGluZWFyKSB7XG4gICAgX2hhbmRsZUxpbmVhciA9IGhhbmRsZUxpbmVhcjtcbiAgfTtcblxuICBmdW5jdGlvbiBpc1ZhbGlkTGluZWFySXRlbShpdGVtKSB7XG4gICAgcmV0dXJuICFfaGFuZGxlTGluZWFyIHx8IGl0ZW0ubGluZWFyICE9PSBcIm5vXCI7XG4gIH1cblxuXG4gIHRoaXMuaXNWYWxpZExpbmVhckl0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgaWYgKCFpc1ZhbGlkSW5kZXgoaW5kZXgpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBpc1ZhbGlkTGluZWFySXRlbSh0aGlzLml0ZW0oaW5kZXgpKTtcbiAgfTtcblxuICB0aGlzLnByZXZJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuXG4gICAgcmV0dXJuIGxvb2tGb3JQcmV2VmFsaWRJdGVtKGl0ZW0uaW5kZXggLSAxKTtcbiAgfTtcblxuICBmdW5jdGlvbiBsb29rRm9yTmV4dFZhbGlkSXRlbShpeCkge1xuXG4gICAgaWYgKCFpc1ZhbGlkSW5kZXgoaXgpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBpdGVtID0gc2VsZi5pdGVtc1tpeF07XG5cbiAgICBpZiAoaXNWYWxpZExpbmVhckl0ZW0oaXRlbSkpIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIHJldHVybiBsb29rRm9yTmV4dFZhbGlkSXRlbShpdGVtLmluZGV4ICsgMSk7XG4gIH1cblxuICBmdW5jdGlvbiBsb29rRm9yUHJldlZhbGlkSXRlbShpeCkge1xuXG4gICAgaWYgKCFpc1ZhbGlkSW5kZXgoaXgpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBpdGVtID0gc2VsZi5pdGVtc1tpeF07XG5cbiAgICBpZiAoaXNWYWxpZExpbmVhckl0ZW0oaXRlbSkpIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIHJldHVybiBsb29rRm9yUHJldlZhbGlkSXRlbShpdGVtLmluZGV4IC0gMSk7XG4gIH1cblxuICB0aGlzLm5leHRJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuXG4gICAgcmV0dXJuIGxvb2tGb3JOZXh0VmFsaWRJdGVtKGl0ZW0uaW5kZXggKyAxKTtcbiAgfTtcblxuICB0aGlzLmdldEl0ZW1VcmwgPSBmdW5jdGlvbihpdGVtKSB7XG5cbiAgICByZXR1cm4gc2VsZi5wYWNrYWdlLnJlc29sdmVSZWxhdGl2ZVVybChpdGVtLmhyZWYpO1xuXG4gIH07XG5cbiAgZnVuY3Rpb24gaXNWYWxpZEluZGV4KGluZGV4KSB7XG5cbiAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHNlbGYuaXRlbXMubGVuZ3RoO1xuICB9XG5cbiAgdGhpcy5maXJzdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIGxvb2tGb3JOZXh0VmFsaWRJdGVtKDApO1xuICB9O1xuXG4gIHRoaXMubGFzdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIGxvb2tGb3JQcmV2VmFsaWRJdGVtKHRoaXMuaXRlbXMubGVuZ3RoIC0gMSk7XG4gIH07XG5cbiAgdGhpcy5pc0ZpcnN0SXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblxuICAgIHJldHVybiBzZWxmLmZpcnN0KCkgPT09IGl0ZW07XG4gIH07XG5cbiAgdGhpcy5pc0xhc3RJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuXG4gICAgcmV0dXJuIHNlbGYubGFzdCgpID09PSBpdGVtO1xuICB9O1xuXG4gIHRoaXMuaXRlbSA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICBpZiAoaXNWYWxpZEluZGV4KGluZGV4KSlcbiAgICAgIHJldHVybiBzZWxmLml0ZW1zW2luZGV4XTtcblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5pc1JpZ2h0VG9MZWZ0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICByZXR1cm4gc2VsZi5kaXJlY3Rpb24gPT0gXCJydGxcIjtcbiAgfTtcblxuICB0aGlzLmlzTGVmdFRvUmlnaHQgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiAhc2VsZi5pc1JpZ2h0VG9MZWZ0KCk7XG4gIH07XG5cbiAgdGhpcy5nZXRJdGVtQnlJZCA9IGZ1bmN0aW9uKGlkcmVmKSB7XG5cbiAgICB2YXIgbGVuZ3RoID0gc2VsZi5pdGVtcy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc2VsZi5pdGVtc1tpXS5pZHJlZiA9PSBpZHJlZikge1xuXG4gICAgICAgIHJldHVybiBzZWxmLml0ZW1zW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5nZXRJdGVtQnlIcmVmID0gZnVuY3Rpb24oaHJlZikge1xuXG4gICAgdmFyIGxlbmd0aCA9IHNlbGYuaXRlbXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHNlbGYuaXRlbXNbaV0uaHJlZiA9PSBocmVmKSB7XG5cbiAgICAgICAgcmV0dXJuIHNlbGYuaXRlbXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICBmdW5jdGlvbiB1cGRhdGVTcGluZUl0ZW1zU3ByZWFkKCkge1xuXG4gICAgdmFyIGxlbiA9IHNlbGYuaXRlbXMubGVuZ3RoO1xuXG4gICAgdmFyIGlzRmlyc3RQYWdlSW5TcHJlYWQgPSBmYWxzZTtcbiAgICB2YXIgYmFzZVNpZGUgPSBzZWxmLmlzTGVmdFRvUmlnaHQoKSA/IFNwaW5lSXRlbUNvbnN0YW50cy5TUFJFQURfTEVGVCA6IFNwaW5lSXRlbUNvbnN0YW50cy5TUFJFQURfUklHSFQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgIHZhciBzcGluZUl0ZW0gPSBzZWxmLml0ZW1zW2ldO1xuICAgICAgaWYgKCFzcGluZUl0ZW0ucGFnZV9zcHJlYWQpIHtcblxuICAgICAgICB2YXIgc3ByZWFkID0gc3BpbmVJdGVtLmlzUmVuZGl0aW9uU3ByZWFkQWxsb3dlZCgpID8gKGlzRmlyc3RQYWdlSW5TcHJlYWQgPyBiYXNlU2lkZSA6IFNwaW5lSXRlbS5hbHRlcm5hdGVTcHJlYWQoYmFzZVNpZGUpKSA6IFNwaW5lSXRlbUNvbnN0YW50cy5TUFJFQURfQ0VOVEVSO1xuICAgICAgICBzcGluZUl0ZW0uc2V0U3ByZWFkKHNwcmVhZCk7XG4gICAgICB9XG5cbiAgICAgIGlzRmlyc3RQYWdlSW5TcHJlYWQgPSAhc3BpbmVJdGVtLmlzUmVuZGl0aW9uU3ByZWFkQWxsb3dlZCgpIHx8IHNwaW5lSXRlbS5wYWdlX3NwcmVhZCAhPSBiYXNlU2lkZTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3BpbmVEVE8pIHtcblxuICAgIGlmIChzcGluZURUTy5kaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMuZGlyZWN0aW9uID0gc3BpbmVEVE8uZGlyZWN0aW9uO1xuICAgIH1cblxuICAgIHZhciBsZW5ndGggPSBzcGluZURUTy5pdGVtcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBuZXcgU3BpbmVJdGVtKHNwaW5lRFRPLml0ZW1zW2ldLCBpLCB0aGlzKTtcbiAgICAgIHRoaXMuaXRlbXMucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICB1cGRhdGVTcGluZUl0ZW1zU3ByZWFkKCk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTcGluZSIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuLy8gVGhpcyBmaWxlIHdhcyByZWFkaXVtLWpzLXNoYXJlZC9qcy9tb2RlbHMvZml4ZWRfcGFnZV9zcHJlYWQuanNcblxudmFyIFBPU0lUSU9OX0xFRlQgPSBcImxlZnRcIjtcbnZhciBQT1NJVElPTl9SSUdIVCA9IFwicmlnaHRcIjtcbnZhciBQT1NJVElPTl9DRU5URVIgPSBcImNlbnRlclwiO1xuXG4vKipcbiAqXG4gKlxuICpcbiAqIEBwYXJhbSB7UmVhZGl1bVNESy5Nb2RlbHMuU3BpbmV9IHNwaW5lXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG52YXIgU3ByZWFkID0gZnVuY3Rpb24oc3BpbmUsIGlzU3ludGhldGljU3ByZWFkKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuc3BpbmUgPSBzcGluZTtcblxuICB0aGlzLmxlZnRJdGVtID0gdW5kZWZpbmVkO1xuICB0aGlzLnJpZ2h0SXRlbSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jZW50ZXJJdGVtID0gdW5kZWZpbmVkO1xuXG4gIHZhciBfaXNTeW50aGV0aWNTcHJlYWQgPSBpc1N5bnRoZXRpY1NwcmVhZDtcblxuICB0aGlzLnNldFN5bnRoZXRpY1NwcmVhZCA9IGZ1bmN0aW9uKGlzU3ludGhldGljU3ByZWFkKSB7XG4gICAgX2lzU3ludGhldGljU3ByZWFkID0gaXNTeW50aGV0aWNTcHJlYWQ7XG4gIH07XG5cbiAgdGhpcy5pc1N5bnRoZXRpY1NwcmVhZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfaXNTeW50aGV0aWNTcHJlYWQ7XG4gIH07XG5cbiAgdGhpcy5vcGVuRmlyc3QgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmICh0aGlzLnNwaW5lLml0ZW1zLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXNldEl0ZW1zKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3Blbkl0ZW0odGhpcy5zcGluZS5maXJzdCgpKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vcGVuTGFzdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKHRoaXMuc3BpbmUuaXRlbXMubGVuZ3RoID09IDApIHtcbiAgICAgIHJlc2V0SXRlbXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGVuSXRlbSh0aGlzLnNwaW5lLmxhc3QoKSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub3Blbkl0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG5cbiAgICByZXNldEl0ZW1zKCk7XG5cbiAgICB2YXIgcG9zaXRpb24gPSBnZXRJdGVtUG9zaXRpb24oaXRlbSk7XG4gICAgc2V0SXRlbVRvUG9zaXRpb24oaXRlbSwgcG9zaXRpb24pO1xuXG4gICAgaWYgKHBvc2l0aW9uICE9IFBPU0lUSU9OX0NFTlRFUiAmJiB0aGlzLnNwaW5lLmlzVmFsaWRMaW5lYXJJdGVtKGl0ZW0uaW5kZXgpKSB7IC8vICYmIGl0ZW0uaXNSZW5kaXRpb25TcHJlYWRBbGxvd2VkKCkgbm90IG5lY2Vzc2FyeSwgc2VlIGdldEl0ZW1Qb3NpdGlvbigpIGJlbG93XG4gICAgICB2YXIgbmVpZ2hib3VyID0gZ2V0TmVpZ2hib3VySXRlbShpdGVtKTtcbiAgICAgIGlmIChuZWlnaGJvdXIpIHtcbiAgICAgICAgdmFyIG5laWdoYm91clBvcyA9IGdldEl0ZW1Qb3NpdGlvbihuZWlnaGJvdXIpO1xuICAgICAgICBpZiAobmVpZ2hib3VyUG9zICE9IHBvc2l0aW9uICYmIG5laWdoYm91clBvcyAhPSBQT1NJVElPTl9DRU5URVIgJiYgIW5laWdoYm91ci5pc1JlZmxvd2FibGUoKSAmJiBuZWlnaGJvdXIuaXNSZW5kaXRpb25TcHJlYWRBbGxvd2VkKCkpIHtcbiAgICAgICAgICBzZXRJdGVtVG9Qb3NpdGlvbihuZWlnaGJvdXIsIG5laWdoYm91clBvcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVzZXRJdGVtcygpIHtcblxuICAgIHNlbGYubGVmdEl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgc2VsZi5yaWdodEl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgc2VsZi5jZW50ZXJJdGVtID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SXRlbVRvUG9zaXRpb24oaXRlbSwgcG9zaXRpb24pIHtcblxuICAgIGlmIChwb3NpdGlvbiA9PSBQT1NJVElPTl9MRUZUKSB7XG4gICAgICBzZWxmLmxlZnRJdGVtID0gaXRlbTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09IFBPU0lUSU9OX1JJR0hUKSB7XG4gICAgICBzZWxmLnJpZ2h0SXRlbSA9IGl0ZW07XG4gICAgfSBlbHNlIHtcblxuICAgICAgaWYgKHBvc2l0aW9uICE9IFBPU0lUSU9OX0NFTlRFUikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5yZWNvZ25pemVkIHBvc2l0aW9uIHZhbHVlXCIpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLmNlbnRlckl0ZW0gPSBpdGVtO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEl0ZW1Qb3NpdGlvbihpdGVtKSB7XG5cbiAgICAvLyBpbmNsdWRlcyAhaXRlbS5pc1JlbmRpdGlvblNwcmVhZEFsbG93ZWQoKSAoXCJyZW5kaXRpb246c3ByZWFkLW5vbmVcIikgPT0+IGZvcmNlIGNlbnRlciBwb3NpdGlvblxuICAgIGlmICghX2lzU3ludGhldGljU3ByZWFkKSB7XG4gICAgICByZXR1cm4gUE9TSVRJT05fQ0VOVEVSO1xuICAgIH1cblxuICAgIGlmIChpdGVtLmlzTGVmdFBhZ2UoKSkge1xuICAgICAgcmV0dXJuIFBPU0lUSU9OX0xFRlQ7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW0uaXNSaWdodFBhZ2UoKSkge1xuICAgICAgcmV0dXJuIFBPU0lUSU9OX1JJR0hUO1xuICAgIH1cblxuICAgIHJldHVybiBQT1NJVElPTl9DRU5URVI7XG4gIH1cblxuICB0aGlzLm9wZW5OZXh0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgaXRlbXMgPSB0aGlzLnZhbGlkSXRlbXMoKTtcblxuICAgIGlmIChpdGVtcy5sZW5ndGggPT0gMCkge1xuXG4gICAgICB0aGlzLm9wZW5GaXJzdCgpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIHZhciBuZXh0SXRlbSA9IHRoaXMuc3BpbmUubmV4dEl0ZW0oaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0pO1xuICAgICAgaWYgKG5leHRJdGVtKSB7XG5cbiAgICAgICAgdGhpcy5vcGVuSXRlbShuZXh0SXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub3BlblByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBpdGVtcyA9IHRoaXMudmFsaWRJdGVtcygpO1xuXG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA9PSAwKSB7XG4gICAgICB0aGlzLm9wZW5MYXN0KCk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgdmFyIHByZXZJdGVtID0gdGhpcy5zcGluZS5wcmV2SXRlbShpdGVtc1swXSk7XG4gICAgICBpZiAocHJldkl0ZW0pIHtcblxuICAgICAgICB0aGlzLm9wZW5JdGVtKHByZXZJdGVtKTtcblxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLnZhbGlkSXRlbXMgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBhcnIgPSBbXTtcblxuICAgIGlmICh0aGlzLmxlZnRJdGVtKSBhcnIucHVzaCh0aGlzLmxlZnRJdGVtKTtcbiAgICBpZiAodGhpcy5yaWdodEl0ZW0pIGFyci5wdXNoKHRoaXMucmlnaHRJdGVtKTtcbiAgICBpZiAodGhpcy5jZW50ZXJJdGVtKSBhcnIucHVzaCh0aGlzLmNlbnRlckl0ZW0pO1xuXG4gICAgYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFycjtcbiAgfTtcblxuICBmdW5jdGlvbiBnZXROZWlnaGJvdXJJdGVtKGl0ZW0pIHtcblxuICAgIGlmIChpdGVtLmlzTGVmdFBhZ2UoKSkge1xuICAgICAgcmV0dXJuIHNlbGYuc3BpbmUuaXNSaWdodFRvTGVmdCgpID8gc2VsZi5zcGluZS5wcmV2SXRlbShpdGVtKSA6IHNlbGYuc3BpbmUubmV4dEl0ZW0oaXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW0uaXNSaWdodFBhZ2UoKSkge1xuICAgICAgcmV0dXJuIHNlbGYuc3BpbmUuaXNSaWdodFRvTGVmdCgpID8gc2VsZi5zcGluZS5uZXh0SXRlbShpdGVtKSA6IHNlbGYuc3BpbmUucHJldkl0ZW0oaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNwcmVhZCIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuLyoqXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yXG4gKiBAcGFyYW0gZGVjbGFyYXRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFN0eWxlID0gZnVuY3Rpb24oc2VsZWN0b3IsIGRlY2xhcmF0aW9ucykge1xuXG4gIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgdGhpcy5kZWNsYXJhdGlvbnMgPSBkZWNsYXJhdGlvbnM7XG5cbiAgdGhpcy5zZXREZWNsYXJhdGlvbnMgPSBmdW5jdGlvbihkZWNsYXJhdGlvbnMpIHtcblxuICAgIGZvciAodmFyIHByb3AgaW4gZGVjbGFyYXRpb25zKSB7XG4gICAgICBpZiAoZGVjbGFyYXRpb25zLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHRoaXMuZGVjbGFyYXRpb25zW3Byb3BdID0gZGVjbGFyYXRpb25zW3Byb3BdO1xuICAgICAgfVxuICAgIH1cblxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0eWxlIiwiLy8gIExhdW5jaGVyT1NYXG4vL1xuLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG5cbi8vIERlc2NyaXB0aW9uOiBQYXJzZSB0aGUgZXB1YiBcInN3aXRjaFwiIHRhZ3MgYW5kIGhpZGVcbi8vIGNhc2VzIHRoYXQgYXJlIG5vdCBzdXBwb3J0ZWRcbmZ1bmN0aW9uIGFwcGx5KGRvbSkge1xuXG5cbiAgLy8gaGVscGVyIG1ldGhvZCwgcmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gY2FzZSBub2RlXG4gIC8vIGlzIHN1cHBvcnRlZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gIGZ1bmN0aW9uIGlzU3VwcG9ydGVkKGNhc2VOb2RlKSB7XG5cbiAgICB2YXIgbnMgPSBjYXNlTm9kZS5hdHRyaWJ1dGVzW1wicmVxdWlyZWQtbmFtZXNwYWNlXCJdO1xuICAgIGlmICghbnMpIHtcbiAgICAgIC8vIHRoZSBuYW1lc3BhY2Ugd2FzIG5vdCBzcGVjaWZpZWQsIHRoYXQgc2hvdWxkXG4gICAgICAvLyBuZXZlciBoYXBwZW4sIHdlIGRvbid0IHN1cHBvcnQgaXQgdGhlblxuICAgICAgY29uc29sZS5sb2coXCJFbmNvdW50ZXJlZCBhIGNhc2Ugc3RhdGVtZW50IHdpdGggbm8gcmVxdWlyZWQtbmFtZXNwYWNlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBhbGwgdGhlIHhtbG5zIHRoYXQgcmVhZGl1bSBpcyBrbm93biB0byBzdXBwb3J0XG4gICAgLy8gVE9ETyB0aGlzIGlzIGdvaW5nIHRvIHJlcXVpcmUgbWFpbnRlbmFuY2VcbiAgICB2YXIgc3VwcG9ydGVkTmFtZXNwYWNlcyA9IFtcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIl07XG4gICAgcmV0dXJuIF8uaW5jbHVkZShzdXBwb3J0ZWROYW1lc3BhY2VzLCBucyk7XG4gIH1cblxuICAkKCdzd2l0Y2gnLCBkb20pLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAvLyBrZWVwIHRyYWNrIG9mIHdoZXRoZXIgb3Igbm93IHdlIGZvdW5kIG9uZVxuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuXG4gICAgJCgnY2FzZScsIHRoaXMpLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAgIGlmICghZm91bmQgJiYgaXNTdXBwb3J0ZWQodGhpcykpIHtcbiAgICAgICAgZm91bmQgPSB0cnVlOyAvLyB3ZSBmb3VuZCB0aGUgbm9kZSwgZG9uJ3QgcmVtb3ZlIGl0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKHRoaXMpLnJlbW92ZSgpOyAvLyByZW1vdmUgdGhlIG5vZGUgZnJvbSB0aGUgZG9tXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByb3AoXCJoaWRkZW5cIiwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZm91bmQpIHtcbiAgICAgIC8vIGlmIHdlIGZvdW5kIGEgc3VwcG9ydGVkIGNhc2UsIHJlbW92ZSB0aGUgZGVmYXVsdFxuICAgICAgJCgnZGVmYXVsdCcsIHRoaXMpLnJlbW92ZSgpO1xuICAgICAgLy8gICAgICAgICAgICAgICAgJCgnZGVmYXVsdCcsIHRoaXMpLnByb3AoXCJoaWRkZW5cIiwgdHJ1ZSk7XG4gICAgfVxuICB9KVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFwcGx5OiBhcHBseVxufSIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIGVzY2FwZUpRdWVyeVNlbGVjdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9lc2NhcGUtanF1ZXJ5LXNlbGVjdG9yJylcbnZhciBUcmlnZ2VyID0gcmVxdWlyZSgnLi90cmlnZ2VyJylcblxuLyoqXG4gKiBTZXR0ZXIgZm90IGVwdWIgVHJpZ2dlcnNcbiAqXG4gKlxuICogQHBhcmFtIGRvbU5vZGVcbiAqL1xuXG52YXIgVHJpZ2dlciA9IGZ1bmN0aW9uKGRvbU5vZGUpIHtcbiAgdmFyICRlbCA9ICQoZG9tTm9kZSk7XG4gIHRoaXMuYWN0aW9uID0gJGVsLmF0dHIoXCJhY3Rpb25cIik7XG4gIHRoaXMucmVmID0gJGVsLmF0dHIoXCJyZWZcIik7XG4gIHRoaXMuZXZlbnQgPSAkZWwuYXR0cihcImV2OmV2ZW50XCIpO1xuICB0aGlzLm9ic2VydmVyID0gJGVsLmF0dHIoXCJldjpvYnNlcnZlclwiKTtcbiAgdGhpcy5yZWYgPSAkZWwuYXR0cihcInJlZlwiKTtcbn07XG5cblRyaWdnZXIucmVnaXN0ZXIgPSBmdW5jdGlvbihkb20pIHtcbiAgJCgndHJpZ2dlcicsIGRvbSkuZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJpZ2dlciA9IG5ldyBUcmlnZ2VyKHRoaXMpO1xuICAgIHRyaWdnZXIuc3Vic2NyaWJlKGRvbSk7XG4gIH0pO1xufTtcblxuVHJpZ2dlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24oZG9tKSB7XG4gIHZhciBzZWxlY3RvciA9IFwiI1wiICsgdGhpcy5vYnNlcnZlcjtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICAkKHNlbGVjdG9yLCBkb20pLm9uKHRoaXMuZXZlbnQsIGZ1bmN0aW9uKCkge1xuICAgIHRoYXQuZXhlY3V0ZShkb20pO1xuICB9KTtcbn07XG5cblRyaWdnZXIucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbihkb20pIHtcbiAgdmFyICR0YXJnZXQgPSAkKFwiI1wiICsgZXNjYXBlSlF1ZXJ5U2VsZWN0b3IodGhpcy5yZWYpLCBkb20pO1xuICBzd2l0Y2ggKHRoaXMuYWN0aW9uKSB7XG4gICAgY2FzZSBcInNob3dcIjpcbiAgICAgICR0YXJnZXQuY3NzKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaGlkZVwiOlxuICAgICAgJHRhcmdldC5jc3MoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBsYXlcIjpcbiAgICAgICR0YXJnZXRbMF0uY3VycmVudFRpbWUgPSAwO1xuICAgICAgJHRhcmdldFswXS5wbGF5KCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicGF1c2VcIjpcbiAgICAgICR0YXJnZXRbMF0ucGF1c2UoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJyZXN1bWVcIjpcbiAgICAgICR0YXJnZXRbMF0ucGxheSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm11dGVcIjpcbiAgICAgICR0YXJnZXRbMF0ubXV0ZWQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInVubXV0ZVwiOlxuICAgICAgJHRhcmdldFswXS5tdXRlZCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnNvbGUubG9nKFwiZG8gbm90IG5vIGhvdyB0byBoYW5kbGUgdHJpZ2dlciBcIiArIHRoaXMuYWN0aW9uKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmlnZ2VyIiwiLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG4vKipcbiAqXG4gKiBAcGFyYW0gc2V0dGluZ3NEYXRhXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFZpZXdlclNldHRpbmdzID0gZnVuY3Rpb24oc2V0dGluZ3NEYXRhKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuc3ludGhldGljU3ByZWFkID0gXCJhdXRvXCI7XG4gIHRoaXMuZm9udFNpemUgPSAxMDA7XG4gIHRoaXMuY29sdW1uR2FwID0gMjA7XG5cbiAgdGhpcy5tZWRpYU92ZXJsYXlzUHJlc2VydmVQbGF5YmFja1doZW5TY3JvbGwgPSBmYWxzZTtcblxuICB0aGlzLm1lZGlhT3ZlcmxheXNTa2lwU2tpcHBhYmxlcyA9IGZhbHNlO1xuICB0aGlzLm1lZGlhT3ZlcmxheXNFc2NhcGVFc2NhcGFibGVzID0gdHJ1ZTtcblxuICB0aGlzLm1lZGlhT3ZlcmxheXNTa2lwcGFibGVzID0gW107XG4gIHRoaXMubWVkaWFPdmVybGF5c0VzY2FwYWJsZXMgPSBbXTtcblxuICB0aGlzLm1lZGlhT3ZlcmxheXNFbmFibGVDbGljayA9IHRydWU7XG4gIHRoaXMubWVkaWFPdmVybGF5c1JhdGUgPSAxO1xuICB0aGlzLm1lZGlhT3ZlcmxheXNWb2x1bWUgPSAxMDA7XG5cbiAgdGhpcy5tZWRpYU92ZXJsYXlzU3luY2hyb25pemF0aW9uR3JhbnVsYXJpdHkgPSBcIlwiO1xuXG4gIHRoaXMubWVkaWFPdmVybGF5c0F1dG9tYXRpY1BhZ2VUdXJuID0gdHJ1ZTtcblxuICB0aGlzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QgPSBmYWxzZTtcblxuICAvLyAtMSA9PT4gZGlzYWJsZVxuICAvLyBbMC4uLm5dID09PiBpbmRleCBvZiB0cmFuc2l0aW9uIGluIHByZS1kZWZpbmVkIGFycmF5XG4gIHRoaXMucGFnZVRyYW5zaXRpb24gPSAtMTtcblxuICB0aGlzLnNjcm9sbCA9IFwiYXV0b1wiO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkQXJyYXkoc3RyKSB7XG4gICAgdmFyIHJldEFyciA9IFtdO1xuICAgIHZhciBhcnIgPSBzdHIuc3BsaXQoL1tcXHMsO10rLyk7IC8vJywnXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gYXJyW2ldLnRyaW0oKTtcbiAgICAgIGlmIChpdGVtICE9PSBcIlwiKSB7XG4gICAgICAgIHJldEFyci5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0QXJyO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFwUHJvcGVydHkocHJvcE5hbWUsIHNldHRpbmdzRGF0YSwgZnVuY3Rpb25Ub0FwcGx5KSB7XG5cbiAgICBpZiAoc2V0dGluZ3NEYXRhW3Byb3BOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoZnVuY3Rpb25Ub0FwcGx5KSB7XG5cbiAgICAgICAgc2VsZltwcm9wTmFtZV0gPSBmdW5jdGlvblRvQXBwbHkoc2V0dGluZ3NEYXRhW3Byb3BOYW1lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmW3Byb3BOYW1lXSA9IHNldHRpbmdzRGF0YVtwcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKHNldHRpbmdzRGF0YSkge1xuXG4gICAgbWFwUHJvcGVydHkoXCJjb2x1bW5HYXBcIiwgc2V0dGluZ3NEYXRhKTtcbiAgICBtYXBQcm9wZXJ0eShcImZvbnRTaXplXCIsIHNldHRpbmdzRGF0YSk7XG4gICAgbWFwUHJvcGVydHkoXCJtZWRpYU92ZXJsYXlzUHJlc2VydmVQbGF5YmFja1doZW5TY3JvbGxcIiwgc2V0dGluZ3NEYXRhKTtcbiAgICBtYXBQcm9wZXJ0eShcIm1lZGlhT3ZlcmxheXNTa2lwU2tpcHBhYmxlc1wiLCBzZXR0aW5nc0RhdGEpO1xuICAgIG1hcFByb3BlcnR5KFwibWVkaWFPdmVybGF5c0VzY2FwZUVzY2FwYWJsZXNcIiwgc2V0dGluZ3NEYXRhKTtcbiAgICBtYXBQcm9wZXJ0eShcIm1lZGlhT3ZlcmxheXNTa2lwcGFibGVzXCIsIHNldHRpbmdzRGF0YSwgYnVpbGRBcnJheSk7XG4gICAgbWFwUHJvcGVydHkoXCJtZWRpYU92ZXJsYXlzRXNjYXBhYmxlc1wiLCBzZXR0aW5nc0RhdGEsIGJ1aWxkQXJyYXkpO1xuICAgIG1hcFByb3BlcnR5KFwibWVkaWFPdmVybGF5c0VuYWJsZUNsaWNrXCIsIHNldHRpbmdzRGF0YSk7XG4gICAgbWFwUHJvcGVydHkoXCJtZWRpYU92ZXJsYXlzUmF0ZVwiLCBzZXR0aW5nc0RhdGEpO1xuICAgIG1hcFByb3BlcnR5KFwibWVkaWFPdmVybGF5c1ZvbHVtZVwiLCBzZXR0aW5nc0RhdGEpO1xuICAgIG1hcFByb3BlcnR5KFwibWVkaWFPdmVybGF5c1N5bmNocm9uaXphdGlvbkdyYW51bGFyaXR5XCIsIHNldHRpbmdzRGF0YSk7XG4gICAgbWFwUHJvcGVydHkoXCJtZWRpYU92ZXJsYXlzQXV0b21hdGljUGFnZVR1cm5cIiwgc2V0dGluZ3NEYXRhKTtcbiAgICBtYXBQcm9wZXJ0eShcInNjcm9sbFwiLCBzZXR0aW5nc0RhdGEpO1xuICAgIG1hcFByb3BlcnR5KFwic3ludGhldGljU3ByZWFkXCIsIHNldHRpbmdzRGF0YSk7XG4gICAgbWFwUHJvcGVydHkoXCJwYWdlVHJhbnNpdGlvblwiLCBzZXR0aW5nc0RhdGEpO1xuICAgIG1hcFByb3BlcnR5KFwiZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRFwiLCBzZXR0aW5nc0RhdGEpO1xuICB9O1xuXG4gIHRoaXMudXBkYXRlKHNldHRpbmdzRGF0YSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdlclNldHRpbmdzOyIsImlmIChuYXZpZ2F0b3IpIHtcbiAgLy9UaGlzIGlzIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgcmVhZGluZyBzeXN0ZW0gb2JqZWN0IHRoYXQgd2lsbCBiZSBhdmFpbGFibGUgZm9yIHRoZSBwdWJsaWNhdGlvbidzIGphdmFzY3JpcHQgdG8gYW5hbHl6ZSBhdCBydW50aW1lXG4gIC8vVG8gZXh0ZW5kL21vZGlmeS9yZXBsYWNlIHRoaXMgb2JqZWN0IHJlYWRpbmcgc3lzdGVtIHNob3VsZCBzdWJzY3JpYmUgUmVhZGl1bVNESy5FdmVudHMuUkVBREVSX0lOSVRJQUxJWkVEIGFuZCBhcHBseSBjaGFuZ2VzIGluIHJlYWN0aW9uIHRvIHRoaXMgZXZlbnRcbiAgbmF2aWdhdG9yLmVwdWJSZWFkaW5nU3lzdGVtID0ge1xuICAgIG5hbWU6IFwiXCIsXG4gICAgdmVyc2lvbjogXCIwLjAuMFwiLFxuICAgIGxheW91dFN0eWxlOiBcInBhZ2luYXRlZFwiLFxuXG4gICAgaGFzRmVhdHVyZTogZnVuY3Rpb24oZmVhdHVyZSwgdmVyc2lvbikge1xuXG4gICAgICAvLyBmb3Igbm93IGFsbCBmZWF0dXJlcyBtdXN0IGJlIHZlcnNpb24gMS4wIHNvIGZhaWwgZmFzdCBpZiB0aGUgdXNlciBoYXMgYXNrZWQgZm9yIHNvbWV0aGluZyBlbHNlXG4gICAgICBpZiAodmVyc2lvbiAmJiB2ZXJzaW9uICE9PSBcIjEuMFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZlYXR1cmUgPT09IFwiZG9tLW1hbmlwdWxhdGlvblwiKSB7XG4gICAgICAgIC8vIFNjcmlwdHMgbWF5IG1ha2Ugc3RydWN0dXJhbCBjaGFuZ2VzIHRvIHRoZSBkb2N1bWVudD8/P3MgRE9NIChhcHBsaWVzIHRvIHNwaW5lLWxldmVsIHNjcmlwdGluZyBvbmx5KS5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoZmVhdHVyZSA9PT0gXCJsYXlvdXQtY2hhbmdlc1wiKSB7XG4gICAgICAgIC8vIFNjcmlwdHMgbWF5IG1vZGlmeSBhdHRyaWJ1dGVzIGFuZCBDU1Mgc3R5bGVzIHRoYXQgYWZmZWN0IGNvbnRlbnQgbGF5b3V0IChhcHBsaWVzIHRvIHNwaW5lLWxldmVsIHNjcmlwdGluZyBvbmx5KS5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoZmVhdHVyZSA9PT0gXCJ0b3VjaC1ldmVudHNcIikge1xuICAgICAgICAvLyBUaGUgZGV2aWNlIHN1cHBvcnRzIHRvdWNoIGV2ZW50cyBhbmQgdGhlIFJlYWRpbmcgU3lzdGVtIHBhc3NlcyB0b3VjaCBldmVudHMgdG8gdGhlIGNvbnRlbnQuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmZWF0dXJlID09PSBcIm1vdXNlLWV2ZW50c1wiKSB7XG4gICAgICAgIC8vIFRoZSBkZXZpY2Ugc3VwcG9ydHMgbW91c2UgZXZlbnRzIGFuZCB0aGUgUmVhZGluZyBTeXN0ZW0gcGFzc2VzIG1vdXNlIGV2ZW50cyB0byB0aGUgY29udGVudC5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoZmVhdHVyZSA9PT0gXCJrZXlib2FyZC1ldmVudHNcIikge1xuICAgICAgICAvLyBUaGUgZGV2aWNlIHN1cHBvcnRzIGtleWJvYXJkIGV2ZW50cyBhbmQgdGhlIFJlYWRpbmcgU3lzdGVtIHBhc3NlcyBrZXlib2FyZCBldmVudHMgdG8gdGhlIGNvbnRlbnQuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmVhdHVyZSA9PT0gXCJzcGluZS1zY3JpcHRpbmdcIikge1xuICAgICAgICAvL1NwaW5lLWxldmVsIHNjcmlwdGluZyBpcyBzdXBwb3J0ZWQuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufSIsIi8vICBDcmVhdGVkIGJ5IERtaXRyeSBNYXJrdXNoZXZpY2ggKGRtaXRyeW1AZXZpZGVudHBvaW50LmNvbSlcbi8vIFxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG4vKlxuXG5cblxuIyBIaWdobGlnaHRpbmcgaW4gUmVhZGl1bSAtIEEgcHJpbWVyXG5cblBsZWFzZSBub3RlOlxuXG4tIG9ubHkgc2ltcGxlIHRleHQgaGlnaGxpZ2h0aW5nIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWRcbi0gaXQncyB0aGUgam9iIG9mIHRoZSByZWFkaW5nIHN5c3RlbSB0byBrZWVwIHRyYWNrIG9mIGFubm90YXRpb25zLiByZWFkaXVtLWpzIHNpbXBseSBkaXNwbGF5cyB5b3VyIGFubm90YXRpb25zLlxuLSBmdWxsIENGSXMgZm9yIGFubm90YXRpb25zIGFyZSBub3QgY3VycmVudGx5IGF2YWlsYWJsZS4gV2UgdXNlIHNvIGNhbGxlZCBcInBhcnRpYWwgQ0ZJXCJzLCBhIHR1cGxlIGNvbnRhaW5pbmcgaWRyZWYgb2YgdGhlIHNwaW5lIGl0ZW0gYW5kIHRoZSBDRkkgZGVmaW5pdGlvbiByZWxhdGl2ZSB0byB0aGUgcm9vdCBvZiB0aGUgc3BpbmUgaXRlbS5cblxuQ3VycmVudGx5LCB0aGUgQVBJIGV4cG9zZWQgdmlhIGBSZWFkZXJWaWV3YCBleHBvc2VzIDQgZnVuY3Rpb25zIGFuZCAxIGV2ZW4gd2hpY2ggc2hvdWxkIGJlIHN1ZmZpY2llbnQgZm9yIGEgc2ltcGxlIGhpZ2hsaWdodGluZyB3b3JrZmxvdy5cblxuXG4jIEFQSVxuXG5Gb3IgdGhlIHB1cnBvc2VzIG9mIHRoZSBleGFtcGxlcyBiZWxvdywgYFJSZWFkZXJgIGlzIGEgcHJldmlvdXNseSBpbnN0YW50aWF0ZWQgYFJlYWRlclZpZXdgIGluc3RhbmNlLlxuXG5cbiMjIElzIGFueXRoaW5nIHNlbGVjdGVkIChnZXRDdXJyZW50U2VsZWN0aW9uQ2ZpKCkpXG5cbkJlZm9yZSBwcm9jZWVkaW5nIHdpdGggdGhlIGhpZ2hsaWdodGluZyB3b3JrZmxvdyBpdCBpcyBzb21ldGltZXMgbmVjZXNzYXJ5IHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB1c2VyIGhhcyBpbiBmYWN0IHNlbGVjdGVkIGFueXRoaW5nLiBUaGlzIGNhbiBiZSBhY2NvbXBsaXNoZWQgd2l0aCB0aGUgZm9sbG93aW5nOlxuXG5cblx0PiBSUmVhZGVyLmdldEN1cnJlbnRTZWxlY3Rpb25DZmkoKVxuXHRPYmplY3Qge2lkcmVmOiBcImlkLWlkMjYwNDc0M1wiLCBjZmk6IFwiLzQvMi82LC8xOjc0LC8xOjEyOVwifVxuXG5UaGUgcmVzcG9uc2UgY29udGFpbnMgYSBwYXJ0aWFsIENGSSB0aGF0IGlzIHN1ZmZpY2llbnQgdG8gY3JlYXRlIGEgaGlnaGxpZ2h0IGJhc2VkIG9uIHNlbGVjdGlvbi4gSWYgbm90aGluZyBpcyBzZWxlY3RlZCAqdW5kZWZpbmVkKiBpcyByZXR1cm5lZC4gXG5cbllvdSBjYW4gYWxzbyB1c2UgcGFydGlhbCBDZmkgd2l0aCBgb3BlblNwaW5lSXRlbUVsZW1lbnRDZmkoKWAgdG8gbmF2aWdhdGUgdG8gd2hlcmUgdGhpcyBzZWxlY3Rpb24gaXMgbGF0ZXIuXG5cbiMjIEhpZ2hsaWdodGluZyAoYWRkSGlnaGxpZ2h0IGFuZCBhZGRTZWxlY3Rpb25IaWdobGlnaHQpXG5cbk9uY2Ugd2UndmUgZGV0ZXJtaW5lZCB3aGF0IG5lZWRzIHRvIGJlIGhpZ2hsaWdodGVkIChieSBnZW5lcmF0aW5nIGEgcGFydGlhbCBDRkkgZnJvbSBhIHNlbGVjdGlvbiwgb3IgaGF2aW5nIGFuIGV4aXN0aW5nIHBhcnRpYWwgQ0ZJIHN0b3JlZCBleHRlcm5hbGx5KSB3ZSBjYW4gYWRkIGl0IHRvIHRoZSByZWFkZXIgYnkgY2FsbGluZyBgYWRkSGlnaGxpZ2h0KClgOlxuXG5cdD4gUlJlYWRlci5hZGRIaWdobGlnaHQoJ2lkLWlkMjYwNDc0MycsIFwiLzQvMi82LC8xOjc0LC8xOjEyOVwiLCAxMjMsIFwiaGlnaGxpZ2h0XCIpXG5cdE9iamVjdCB7Q0ZJOiBcIi80LzIvNiwvMTo3NCwvMToxMjlcIiwgc2VsZWN0ZWRFbGVtZW50czogQXJyYXlbMV0sIGlkcmVmOiBcImlkLWlkMjYwNDc0M1wifVxuXG4qYWRkSGlnaGxpZ2gqdCB0YWtlcyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG5cbi0gKmlkLWlkMjYwNDc0MyogLSBgaWRyZWZgIGlzIHRoZSBpZHJlZiB2YWx1ZSBmcm9tIGBnZXRDdXJyZW50U2VsZWN0aW9uQ2ZpKClcbi0gKiAvNC8yLzYsLzE6NzQsLzE6MTI5KiAtIGBjZmlgIGlzIHRoZSBjZmkgdmFsdWUgZnJvbSBgZ2V0Q3VycmVudFNlbGVjdGlvbkNmaSgpXG4tICoxMjMqIC0gYGlkYCBpcyB0aGUgdW5pcXVlIGlkIHRoYXQgZGVmaW5lcyB0aGlzIGFubm90YXRpb25cbi0gKmhpZ2hsaWdodCogLSAndHlwZScgb2YgYW5ub3RhdGlvbi4gb25seSAnaGlnaGxpZ2h0JyBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLlxuXG4jIyMgYWRkU2VsZWN0aW9IaWdobGlnaHRcblxuQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBjYWxsIGFkZFNlbGVjdGlvbkhpZ2hsaWdodCgpLiBJdCBjb21iaW5lcyBib3RoIGdldEN1cnJlbnRTZWxlY3Rpb25DZmkoKSBhbmQgYWRkSGlnaGxpZ2h0IGludG8gb25lIGNhbGw6XG5cblx0PiBSUmVhZGVyLmFkZFNlbGVjdGlvbkhpZ2hsaWdodCgxMjQsIFwiaGlnaGxpZ2h0XCIpXG5cdE9iamVjdCB7Q0ZJOiBcIi80LzIvNCwvMTo0MzcsLzE6NTAzXCIsIHNlbGVjdGVkRWxlbWVudHM6IEFycmF5WzFdLCBpZHJlZjogXCJpZC1pZDI2MDQ3NDNcIn1cblxuTm90ZSB0aGF0IGl0IHByb3ZpZGVzIG5vIHZhbGlkYXRpb24uIElmIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuXG5cbiMjIFJlbW92aW5nIGhpZ2hsaWdodHMgXG5cblRvIHJlbW92ZSB0aGUgaGlnaGxpZ2h0LCBjYWxsIGByZW1vdmVIaWdobGlnaHRgOlxuXG5cdD4gUlJlYWRlci5yZW1vdmVIaWdobGlnaHQoMTIzKVxuXHR1bmRlZmluZWRcblxuXG4jIEhhbmRsaW5nIGFubm90YXRpb24gY2xpY2sgZXZlbnRzXG5cbldoZW4gYSB1c2VyIGNsaWNrcyBvbiBhIGhpZ2hsaWdodCBgYW5ub3RhdGlvbkNsaWNrZWRgIGV2ZW50IGlzIGRpc3BhdGNoZWQgd2l0aCB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcblxuLSB0eXBlIG9mIGFubm90YXRpb25cbi0gaWRyZWYgb2YgdGhlIHNwaW5lIGl0ZW1cbi0gcGFydGlhbCBDZmkgb2YgdGhlIGFubm90YXRpb25cbi0gYW5ub3RhdGlvbmRJZFxuXG5cblx0PiBSUmVhZGVyLm9uKCdhbm5vdGF0aW9uQ2xpY2tlZCcsIGZ1bmN0aW9uKHR5cGUsIGlkcmVmLCBjZmksIGFubm90YXRpb25JZCkgeyBjb25zb2xlLmxvZyAodHlwZSwgaWRyZWYsIGNmaSwgYW5ub3RhdGlvbklkKX0pO1xuXHRSZWFkaXVtU0RLLlZpZXdzLlJlYWRlclZpZXcge29uOiBmdW5jdGlvbiwgb25jZTogZnVuY3Rpb24sIG9mZjogZnVuY3Rpb24sIHRyaWdnZXI6IGZ1bmN0aW9uLCBsaXN0ZW5UbzogZnVuY3Rpb24/Pz99XG5cdFxuVGhlbiB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgaGlnaGxpZ2h0IHRoZSBmb2xsb3dpbmcgd2lsbCBzaG93IHVwIGluIHRoZSBjb25zb2xlOlxuXG5cdGhpZ2hsaWdodCBpZC1pZDI2MDQ3NDMgLzQvMi82LC8xOjc0LC8xOjEyOSAxMjMgXG5cdFxuXG4qL1xuXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxudmFyIEVwdWJBbm5vdGF0aW9ucyA9IHJlcXVpcmUoJy4uLy4uL2VwdWItYW5ub3RhdGlvbnMnKVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gcHJveHlPYmpcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQW5ub3RhdGlvbnNNYW5hZ2VyKHByb3h5T2JqLCBvcHRpb25zKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgbGl2ZUFubm90YXRpb25zID0ge307XG4gIHZhciBzcGluZXMgPSB7fTtcbiAgdmFyIHByb3h5ID0gcHJveHlPYmo7XG4gIHZhciBhbm5vdGF0aW9uQ1NTVXJsID0gb3B0aW9ucy5hbm5vdGF0aW9uQ1NTVXJsO1xuXG4gIGlmICghYW5ub3RhdGlvbkNTU1VybCkge1xuICAgIGNvbnNvbGUud2FybihcIldBUk5JTkchIEFubm90YXRpb25zIENTUyBub3Qgc3VwcGxpZWQuIEhpZ2hsaWdodGluZyBpcyBub3QgZ29pbmcgdG8gd29yay5cIik7XG4gIH1cblxuICBfLmV4dGVuZChzZWxmLCBCYWNrYm9uZS5FdmVudHMpO1xuXG4gIC8vIHdlIHdhbnQgdG8gYnViYmxlIHVwIGFsbCBvZiB0aGUgZXZlbnRzIHRoYXQgYW5ub3RhdGlvbnMgbW9kdWxlIG1heSB0cmlnZ2VyIHVwLlxuICB0aGlzLm9uKFwiYWxsXCIsIGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAvLyBtYW5nbGUgYW5ub3RhdGlvbkNsaWNrZWQgZXZlbnQuIFdoYXQgcmVhbGx5IG5lZWRzIHRvIGhhcHBlbiBpcywgdGhlIGFubm90YXRpb25fbW9kdWxlIG5lZWRzIHRvIHJldHVybiBhIFxuICAgIC8vIGJhcmUgQ2ZpLCBhbmQgdGhpcyBjbGFzcyBzaG91bGQgYXBwZW5kIHRoZSBpZHJlZi5cbiAgICB2YXIgYW5ub3RhdGlvbkNsaWNrZWRFdmVudCA9ICdhbm5vdGF0aW9uQ2xpY2tlZCc7XG4gICAgaWYgKGFyZ3MubGVuZ3RoICYmIGFyZ3NbMF0gPT09IGFubm90YXRpb25DbGlja2VkRXZlbnQpIHtcbiAgICAgIGZvciAodmFyIHNwaW5lSW5kZXggaW4gbGl2ZUFubm90YXRpb25zKSB7XG4gICAgICAgIHZhciBqUXVlcnlFdmVudCA9IGFyZ3NbNF07XG4gICAgICAgIHZhciBhbm5vdGF0aW9uSWQgPSBhcmdzWzNdO1xuICAgICAgICB2YXIgZnVsbEZha2VDZmkgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgdHlwZSA9IGFyZ3NbMV07XG4gICAgICAgIGlmIChsaXZlQW5ub3RhdGlvbnNbc3BpbmVJbmRleF0uZ2V0SGlnaGxpZ2h0KGFubm90YXRpb25JZCkpIHtcbiAgICAgICAgICB2YXIgaWRyZWYgPSBzcGluZXNbc3BpbmVJbmRleF0uaWRyZWY7XG4gICAgICAgICAgdmFyIHBhcnRpYWxDZmkgPSBnZXRQYXJ0aWFsQ2ZpKGZ1bGxGYWtlQ2ZpKTtcbiAgICAgICAgICBhcmdzID0gW2Fubm90YXRpb25DbGlja2VkRXZlbnQsIHR5cGUsIGlkcmVmLCBwYXJ0aWFsQ2ZpLCBhbm5vdGF0aW9uSWQsIGpRdWVyeUV2ZW50XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzZWxmWyd0cmlnZ2VyJ10uYXBwbHkocHJveHksIGFyZ3MpO1xuICB9KTtcblxuICB0aGlzLmF0dGFjaEFubm90YXRpb25zID0gZnVuY3Rpb24oJGlmcmFtZSwgc3BpbmVJdGVtKSB7XG4gICAgdmFyIGVwdWJEb2N1bWVudCA9ICRpZnJhbWVbMF0uY29udGVudERvY3VtZW50O1xuICAgIGxpdmVBbm5vdGF0aW9uc1tzcGluZUl0ZW0uaW5kZXhdID0gbmV3IEVwdWJBbm5vdGF0aW9ucyhlcHViRG9jdW1lbnQsIHNlbGYsIGFubm90YXRpb25DU1NVcmwpO1xuICAgIHNwaW5lc1tzcGluZUl0ZW0uaW5kZXhdID0gc3BpbmVJdGVtO1xuXG4gICAgLy8gY2hlY2sgdG8gc2VlIHdoaWNoIHNwaW5lIGluZGVjaWVzIGNhbiBiZSBjdWxsZWQgZGVwZW5kaW5nIG9uIHRoZSBkaXN0YW5jZSBmcm9tIGN1cnJlbnQgc3BpbmUgaXRlbVxuICAgIGZvciAodmFyIHNwaW5lSW5kZXggaW4gbGl2ZUFubm90YXRpb25zKSB7XG4gICAgICBpZiAoTWF0aC5hYnMoc3BpbmVJbmRleCAtIHNwaW5lSW5kZXguaW5kZXgpID4gMykge1xuICAgICAgICBkZWxldGUgbGl2ZUFubm90YXRpb25zW3NwaW5lSW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuXG4gIHRoaXMuZ2V0Q3VycmVudFNlbGVjdGlvbkNmaSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHNwaW5lIGluIGxpdmVBbm5vdGF0aW9ucykge1xuICAgICAgdmFyIGFubm90YXRpb25zRm9yVmlldyA9IGxpdmVBbm5vdGF0aW9uc1tzcGluZV07XG4gICAgICB2YXIgcGFydGlhbENmaSA9IGFubm90YXRpb25zRm9yVmlldy5nZXRDdXJyZW50U2VsZWN0aW9uQ0ZJKCk7XG4gICAgICBpZiAocGFydGlhbENmaSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFwiaWRyZWZcIjogc3BpbmVzW3NwaW5lXS5pZHJlZixcbiAgICAgICAgICBcImNmaVwiOiBwYXJ0aWFsQ2ZpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5hZGRTZWxlY3Rpb25IaWdobGlnaHQgPSBmdW5jdGlvbihpZCwgdHlwZSkge1xuICAgIGZvciAoc3BpbmUgaW4gbGl2ZUFubm90YXRpb25zKSB7XG4gICAgICB2YXIgYW5ub3RhdGlvbnNGb3JWaWV3ID0gbGl2ZUFubm90YXRpb25zW3NwaW5lXTtcbiAgICAgIGlmIChhbm5vdGF0aW9uc0ZvclZpZXcuZ2V0Q3VycmVudFNlbGVjdGlvbkNGSSgpKSB7XG4gICAgICAgIHZhciBhbm5vdGF0aW9uID0gYW5ub3RhdGlvbnNGb3JWaWV3LmFkZFNlbGVjdGlvbkhpZ2hsaWdodChpZCwgdHlwZSk7XG4gICAgICAgIGFubm90YXRpb24uaWRyZWYgPSBzcGluZXNbc3BpbmVdLmlkcmVmO1xuICAgICAgICByZXR1cm4gYW5ub3RhdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLmFkZEhpZ2hsaWdodCA9IGZ1bmN0aW9uKHNwaW5lSWRSZWYsIHBhcnRpYWxDZmksIGlkLCB0eXBlLCBzdHlsZXMpIHtcbiAgICBmb3IgKHZhciBzcGluZSBpbiBsaXZlQW5ub3RhdGlvbnMpIHtcbiAgICAgIGlmIChzcGluZXNbc3BpbmVdLmlkcmVmID09PSBzcGluZUlkUmVmKSB7XG4gICAgICAgIHZhciBmYWtlQ2ZpID0gXCJlcHViY2ZpKC85OSFcIiArIHBhcnRpYWxDZmkgKyBcIilcIjtcbiAgICAgICAgdmFyIGFubm90YXRpb25zRm9yVmlldyA9IGxpdmVBbm5vdGF0aW9uc1tzcGluZV07XG4gICAgICAgIHZhciBhbm5vdGF0aW9uID0gYW5ub3RhdGlvbnNGb3JWaWV3LmFkZEhpZ2hsaWdodChmYWtlQ2ZpLCBpZCwgdHlwZSwgc3R5bGVzKTtcbiAgICAgICAgYW5ub3RhdGlvbi5pZHJlZiA9IHNwaW5lSWRSZWY7XG4gICAgICAgIGFubm90YXRpb24uQ0ZJID0gZ2V0UGFydGlhbENmaShhbm5vdGF0aW9uLkNGSSk7XG4gICAgICAgIHJldHVybiBhbm5vdGF0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHRoaXMucmVtb3ZlSGlnaGxpZ2h0ID0gZnVuY3Rpb24oaWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgIGZvciAodmFyIHNwaW5lIGluIGxpdmVBbm5vdGF0aW9ucykge1xuICAgICAgdmFyIGFubm90YXRpb25zRm9yVmlldyA9IGxpdmVBbm5vdGF0aW9uc1tzcGluZV07XG4gICAgICByZXN1bHQgPSBhbm5vdGF0aW9uc0ZvclZpZXcucmVtb3ZlSGlnaGxpZ2h0KGlkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuXG5cbiAgZnVuY3Rpb24gZ2V0UGFydGlhbENmaShDRkkpIHtcbiAgICB2YXIgY2ZpV3JhcHBlclBhdHRlcm4gPSBuZXcgUmVnRXhwKFwiXi4qIVwiKVxuICAgICAgLy8gcmVtb3ZlIGVwdWJjZmkoIGFuZCBpbmRpcmVjdGlvbiBzdGVwXG4gICAgdmFyIHBhcnRpYWxseU5ha2VkQ2ZpID0gQ0ZJLnJlcGxhY2UoY2ZpV3JhcHBlclBhdHRlcm4sIFwiXCIpO1xuICAgIC8vIHJlbW92ZSBsYXN0IHBhcmVuXG4gICAgdmFyIG5ha2VkQ2ZpID0gcGFydGlhbGx5TmFrZWRDZmkuc3Vic3RyaW5nKDAsIHBhcnRpYWxseU5ha2VkQ2ZpLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBuYWtlZENmaTtcbiAgfVxuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQW5ub3RhdGlvbnNNYW5hZ2VyIiwiLy8gIExhdW5jaGVyT1NYXG4vL1xuLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gTW9kaWZpZWQgYnkgRGFuaWVsIFdlY2ssIEFuZHJleSBLYXZhcm1hXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cblxudmFyIF9pT1MgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC8oaVBhZHxpUGhvbmV8aVBvZCkvZykgPyB0cnVlIDogZmFsc2U7XG52YXIgX0FuZHJvaWQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignYW5kcm9pZCcpID4gLTE7XG52YXIgX2lzTW9iaWxlID0gX2lPUyB8fCBfQW5kcm9pZDtcblxuLy92YXIgX2lzUmVhZGl1bUpTID0gdHlwZW9mIHdpbmRvdy5yZXF1aXJlanMgIT09IFwidW5kZWZpbmVkXCI7XG5cbnZhciBERUJVRyA9IGZhbHNlO1xuXG52YXIgX2F1ZGlvRWxlbWVudCA9IG5ldyBBdWRpbygpO1xuXG5pZiAoREVCVUcpIHtcbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiMCkgbG9hZFwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibG9hZHN0YXJ0XCIsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUuZGVidWcoXCIxKSBsb2Fkc3RhcnRcIik7XG4gIH0pO1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImR1cmF0aW9uY2hhbmdlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUuZGVidWcoXCIyKSBkdXJhdGlvbmNoYW5nZVwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVkbWV0YWRhdGFcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIjMpIGxvYWRlZG1ldGFkYXRhXCIpO1xuICB9KTtcblxuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZWRkYXRhXCIsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUuZGVidWcoXCI0KSBsb2FkZWRkYXRhXCIpO1xuICB9KTtcblxuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiNSkgcHJvZ3Jlc3NcIik7XG4gIH0pO1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNhbnBsYXlcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIjYpIGNhbnBsYXlcIik7XG4gIH0pO1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNhbnBsYXl0aHJvdWdoXCIsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUuZGVidWcoXCI3KSBjYW5wbGF5dGhyb3VnaFwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicGxheVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiOCkgcGxheVwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicGF1c2VcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIjkpIHBhdXNlXCIpO1xuICB9KTtcblxuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJlbmRlZFwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiMTApIGVuZGVkXCIpO1xuICB9KTtcblxuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWVrZWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIlgpIHNlZWtlZFwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidGltZXVwZGF0ZVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiWSkgdGltZXVwZGF0ZVwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Vla2luZ1wiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiWikgc2Vla2luZ1wiKTtcbiAgfSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBvblN0YXR1c0NoYW5nZWRcbiAqIEBwYXJhbSBvblBvc2l0aW9uQ2hhbmdlZFxuICogQHBhcmFtIG9uQXVkaW9FbmRlZFxuICogQHBhcmFtIG9uQXVkaW9QbGF5XG4gKiBAcGFyYW0gb25BdWRpb1BhdXNlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXVkaW9QbGF5ZXIob25TdGF0dXNDaGFuZ2VkLCBvblBvc2l0aW9uQ2hhbmdlZCwgb25BdWRpb0VuZGVkLCBvbkF1ZGlvUGxheSwgb25BdWRpb1BhdXNlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvL19hdWRpb0VsZW1lbnQuc2V0QXR0cmlidXRlKFwicHJlbG9hZFwiLCBcImF1dG9cIik7XG5cbiAgdmFyIF9jdXJyZW50RXB1YlNyYyA9IHVuZGVmaW5lZDtcblxuICB2YXIgX2N1cnJlbnRTbWlsU3JjID0gdW5kZWZpbmVkO1xuICB0aGlzLmN1cnJlbnRTbWlsU3JjID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9jdXJyZW50U21pbFNyYztcbiAgfTtcblxuICB2YXIgX3JhdGUgPSAxLjA7XG4gIHRoaXMuc2V0UmF0ZSA9IGZ1bmN0aW9uKHJhdGUpIHtcbiAgICBfcmF0ZSA9IHJhdGU7XG4gICAgaWYgKF9yYXRlIDwgMC41KSB7XG4gICAgICBfcmF0ZSA9IDAuNTtcbiAgICB9XG4gICAgaWYgKF9yYXRlID4gNC4wKSB7XG4gICAgICBfcmF0ZSA9IDQuMDtcbiAgICB9XG5cbiAgICBfYXVkaW9FbGVtZW50LnBsYXliYWNrUmF0ZSA9IF9yYXRlO1xuICB9XG4gIHNlbGYuc2V0UmF0ZShfcmF0ZSk7XG4gIHRoaXMuZ2V0UmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcmF0ZTtcbiAgfVxuXG5cbiAgdmFyIF92b2x1bWUgPSAxMDAuMDtcbiAgdGhpcy5zZXRWb2x1bWUgPSBmdW5jdGlvbih2b2x1bWUpIHtcbiAgICBfdm9sdW1lID0gdm9sdW1lO1xuICAgIGlmIChfdm9sdW1lIDwgMC4wKSB7XG4gICAgICBfdm9sdW1lID0gMC4wO1xuICAgIH1cbiAgICBpZiAoX3ZvbHVtZSA+IDEuMCkge1xuICAgICAgX3ZvbHVtZSA9IDEuMDtcbiAgICB9XG4gICAgX2F1ZGlvRWxlbWVudC52b2x1bWUgPSBfdm9sdW1lO1xuICB9XG4gIHNlbGYuc2V0Vm9sdW1lKF92b2x1bWUpO1xuICB0aGlzLmdldFZvbHVtZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfdm9sdW1lO1xuICB9XG5cbiAgdGhpcy5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwidGhpcy5wbGF5KClcIik7XG4gICAgfVxuXG4gICAgaWYgKCFfY3VycmVudEVwdWJTcmMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGFydFRpbWVyKCk7XG5cbiAgICBzZWxmLnNldFZvbHVtZShfdm9sdW1lKTtcbiAgICBzZWxmLnNldFJhdGUoX3JhdGUpO1xuXG4gICAgX2F1ZGlvRWxlbWVudC5wbGF5KCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICB0aGlzLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwidGhpcy5wYXVzZSgpXCIpO1xuICAgIH1cblxuICAgIHN0b3BUaW1lcigpO1xuXG4gICAgX2F1ZGlvRWxlbWVudC5wYXVzZSgpO1xuICB9O1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncGxheScsIG9uUGxheSwgZmFsc2UpO1xuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgb25QYXVzZSwgZmFsc2UpO1xuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgb25FbmRlZCwgZmFsc2UpO1xuXG4gIGZ1bmN0aW9uIG9uUGxheSgpIHtcbiAgICBvblN0YXR1c0NoYW5nZWQoe1xuICAgICAgaXNQbGF5aW5nOiB0cnVlXG4gICAgfSk7XG4gICAgb25BdWRpb1BsYXkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUGF1c2UoKSB7XG4gICAgb25BdWRpb1BhdXNlKCk7XG4gICAgb25TdGF0dXNDaGFuZ2VkKHtcbiAgICAgIGlzUGxheWluZzogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRW5kZWQoKSB7XG4gICAgaWYgKF9hdWRpb0VsZW1lbnQubW9TZWVraW5nKSB7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIm9uRW5kZWQoKSBza2lwcGVkIChzdGlsbCBzZWVraW5nLi4uKVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0b3BUaW1lcigpO1xuXG4gICAgb25BdWRpb0VuZGVkKCk7XG4gICAgb25TdGF0dXNDaGFuZ2VkKHtcbiAgICAgIGlzUGxheWluZzogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfaW50ZXJ2YWxUaW1lclNraXBzID0gMDtcblxuICB2YXIgX2ludGVydmFsVGltZXIgPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gc3RhcnRUaW1lcigpIHtcbiAgICBpZiAoX2ludGVydmFsVGltZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfaW50ZXJ2YWxUaW1lciA9IHNldEludGVydmFsKFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChfYXVkaW9FbGVtZW50Lm1vU2Vla2luZykge1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiaW50ZXJ2YWwgdGltZXIgc2tpcHBlZCAoc3RpbGwgc2Vla2luZy4uLilcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX2ludGVydmFsVGltZXJTa2lwcysrO1xuICAgICAgICAgIGlmIChfaW50ZXJ2YWxUaW1lclNraXBzID4gMTAwMCkge1xuICAgICAgICAgICAgX2ludGVydmFsVGltZXJTa2lwcyA9IDA7XG4gICAgICAgICAgICBzdG9wVGltZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGN1cnJlbnRUaW1lID0gX2F1ZGlvRWxlbWVudC5jdXJyZW50VGltZTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGV4Lm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gICAgICAgICAgICAgICAgaWYgKERFQlVHKVxuICAgICAgICAvLyAgICAgICAgICAgICAgICB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiY3VycmVudFRpbWU6IFwiICsgY3VycmVudFRpbWUpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lKSB7XG4gICAgICAgICAgb25Qb3NpdGlvbkNoYW5nZWQoY3VycmVudFRpbWUsIDEpO1xuICAgICAgICB9XG4gICAgICB9LCAyMCk7XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wVGltZXIoKSB7XG4gICAgaWYgKF9pbnRlcnZhbFRpbWVyKSB7XG4gICAgICBjbGVhckludGVydmFsKF9pbnRlcnZhbFRpbWVyKTtcbiAgICB9XG4gICAgX2ludGVydmFsVGltZXIgPSB1bmRlZmluZWQ7XG4gIH1cblxuICB0aGlzLmlzUGxheWluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfaW50ZXJ2YWxUaW1lciAhPT0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJ0aGlzLnJlc2V0KClcIik7XG4gICAgfVxuXG4gICAgdGhpcy5wYXVzZSgpO1xuXG4gICAgX2F1ZGlvRWxlbWVudC5tb1NlZWtpbmcgPSB1bmRlZmluZWQ7XG5cbiAgICBfY3VycmVudFNtaWxTcmMgPSB1bmRlZmluZWQ7XG4gICAgX2N1cnJlbnRFcHViU3JjID0gdW5kZWZpbmVkO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIF9hdWRpb0VsZW1lbnQuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiXCIpO1xuICAgIH0sIDEpO1xuICB9O1xuXG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibG9hZHN0YXJ0XCIsIGZ1bmN0aW9uKCkge1xuICAgIF90b3VjaEluaXRlZCA9IHRydWU7XG4gIH0pO1xuICB2YXIgX3RvdWNoSW5pdGVkID0gZmFsc2U7XG4gIHRoaXMudG91Y2hJbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFfaU9TKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKF90b3VjaEluaXRlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF90b3VjaEluaXRlZCA9IHRydWU7XG5cbiAgICBfYXVkaW9FbGVtZW50LnNldEF0dHJpYnV0ZShcInNyY1wiLCBcInRvdWNoL2luaXQvaHRtbDUvYXVkaW8ubXAzXCIpO1xuICAgIF9hdWRpb0VsZW1lbnQubG9hZCgpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgX3BsYXlJZCA9IDA7XG5cbiAgdmFyIF9zZWVrUXVldWluZyA9IDA7XG5cbiAgdGhpcy5wbGF5RmlsZSA9IGZ1bmN0aW9uKHNtaWxTcmMsIGVwdWJTcmMsIHNlZWtCZWdpbikgLy9lbGVtZW50XG4gICAge1xuICAgICAgX3BsYXlJZCsrO1xuICAgICAgaWYgKF9wbGF5SWQgPiA5OTk5OSkge1xuICAgICAgICBfcGxheUlkID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHBsYXlJZCA9IF9wbGF5SWQ7XG5cbiAgICAgIGlmIChfYXVkaW9FbGVtZW50Lm1vU2Vla2luZykge1xuICAgICAgICBfc2Vla1F1ZXVpbmcrKztcbiAgICAgICAgaWYgKF9zZWVrUXVldWluZyA+IE1BWF9TRUVLX1JFVFJJRVMpIHtcbiAgICAgICAgICBfc2Vla1F1ZXVpbmcgPSAwO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJ0aGlzLnBsYXlGaWxlKFwiICsgZXB1YlNyYyArIFwiKVwiICsgXCIgQFwiICsgc2Vla0JlZ2luICsgXCIgKFBPU1RQT05FLCBTRUVLSU5HLi4uKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5wbGF5RmlsZShzbWlsU3JjLCBlcHViU3JjLCBzZWVrQmVnaW4pO1xuICAgICAgICB9LCAyMCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfYXVkaW9FbGVtZW50Lm1vU2Vla2luZyA9IHt9O1xuXG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcInRoaXMucGxheUZpbGUoXCIgKyBlcHViU3JjICsgXCIpXCIgKyBcIiBAXCIgKyBzZWVrQmVnaW4gKyBcIiAjXCIgKyBwbGF5SWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXVkaW9OZWVkc05ld1NyYyA9ICFfY3VycmVudEVwdWJTcmMgfHwgX2N1cnJlbnRFcHViU3JjICE9PSBlcHViU3JjO1xuXG4gICAgICBpZiAoIWF1ZGlvTmVlZHNOZXdTcmMpIHtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5kZWJ1ZyhcInRoaXMucGxheUZpbGUoKSBTQU1FIFNSQ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGF1c2UoKTtcblxuICAgICAgICBfY3VycmVudFNtaWxTcmMgPSBzbWlsU3JjO1xuICAgICAgICBfY3VycmVudEVwdWJTcmMgPSBlcHViU3JjO1xuXG4gICAgICAgIHBsYXlTZWVrQ3VycmVudFRpbWUoc2Vla0JlZ2luLCBwbGF5SWQsIGZhbHNlKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwidGhpcy5wbGF5RmlsZSgpIE5FVyBTUkNcIik7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJfY3VycmVudEVwdWJTcmM6IFwiICsgX2N1cnJlbnRFcHViU3JjKTtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcImVwdWJTcmM6IFwiICsgZXB1YlNyYyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIF9hdWRpb0VsZW1lbnQubW9TZWVraW5nID0ge307XG5cbiAgICAgIF9jdXJyZW50U21pbFNyYyA9IHNtaWxTcmM7XG4gICAgICBfY3VycmVudEVwdWJTcmMgPSBlcHViU3JjO1xuXG4gICAgICAvL2VsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoX2F1ZGlvRWxlbWVudCwgZWxlbWVudCk7IC8vZWxlbWVudC5wYXJlbnROb2RlLmNoaWxkTm9kZXNbMF0pO1xuXG4gICAgICBpZiAoIV9BbmRyb2lkKSB7XG4gICAgICAgIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncGxheScsIG9uUGxheVRvRm9yY2VQcmVsb2FkLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgICQoX2F1ZGlvRWxlbWVudCkub24oX3JlYWR5RXZlbnQsIHtcbiAgICAgICAgc2Vla0JlZ2luOiBzZWVrQmVnaW4sXG4gICAgICAgIHBsYXlJZDogcGxheUlkXG4gICAgICB9LCBvblJlYWR5VG9TZWVrKTtcblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgX2F1ZGlvRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgX2N1cnJlbnRFcHViU3JjKTtcbiAgICAgICAgLy8gX2F1ZGlvRWxlbWVudC5zcmMgPSBfY3VycmVudEVwdWJTcmM7XG4gICAgICAgIC8vICQoX2F1ZGlvRWxlbWVudCkuYXR0cihcInNyY1wiLCBfY3VycmVudEVwdWJTcmMpO1xuXG4gICAgICAgIC8vIGlmIChfQW5kcm9pZClcbiAgICAgICAgLy8ge1xuICAgICAgICAvLyAgICAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBvblJlYWR5VG9QbGF5VG9Gb3JjZVByZWxvYWQsIGZhbHNlKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIF9hdWRpb0VsZW1lbnQubG9hZCgpO1xuXG4gICAgICAgIGlmICghX0FuZHJvaWQpIHtcbiAgICAgICAgICBwbGF5VG9Gb3JjZVByZWxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfSwgMSk7XG4gICAgfTtcblxuICAvLyB2YXIgb25SZWFkeVRvUGxheVRvRm9yY2VQcmVsb2FkID0gZnVuY3Rpb24gKClcbiAgLy8ge1xuICAvLyAgICAgX2F1ZGlvRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBvblJlYWR5VG9QbGF5VG9Gb3JjZVByZWxvYWQsIGZhbHNlKTtcbiAgLy8gICAgIFxuICAvLyAgICAgaWYgKERFQlVHKVxuICAvLyAgICAge1xuICAvLyAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJvblJlYWR5VG9QbGF5VG9Gb3JjZVByZWxvYWRcIik7XG4gIC8vICAgICB9XG4gIC8vICAgICBcbiAgLy8gICAgIHBsYXlUb0ZvcmNlUHJlbG9hZCgpO1xuICAvLyB9O1xuXG4gIHZhciBwbGF5VG9Gb3JjZVByZWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJwbGF5VG9Gb3JjZVByZWxvYWRcIik7XG4gICAgfVxuXG4gICAgLy9fYXVkaW9FbGVtZW50LnZvbHVtZSA9IDA7XG4gICAgLy9fYXVkaW9FbGVtZW50LnBsYXkoKTtcbiAgICB2YXIgdm9sID0gX3ZvbHVtZTtcbiAgICBfdm9sdW1lID0gMDtcbiAgICBzZWxmLnBsYXkoKTtcbiAgICBfdm9sdW1lID0gdm9sO1xuICB9O1xuXG4gIHZhciBvblBsYXlUb0ZvcmNlUHJlbG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIF9hdWRpb0VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGxheScsIG9uUGxheVRvRm9yY2VQcmVsb2FkLCBmYWxzZSk7XG5cbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJvblBsYXlUb0ZvcmNlUHJlbG9hZFwiKTtcbiAgICB9XG4gICAgX2F1ZGlvRWxlbWVudC5wYXVzZSgpOyAvLyBub3RlOiBpbnRlcnZhbCB0aW1lciBjb250aW51ZXMgKGltbWVkaWF0ZWx5IGZvbGxvd3Mgc2VsZi5wbGF5KCkpXG4gIH07XG5cbiAgdmFyIF9yZWFkeUV2ZW50ID0gX0FuZHJvaWQgPyBcImNhbnBsYXl0aHJvdWdoXCIgOiBcImNhbnBsYXlcIjtcblxuICBmdW5jdGlvbiBvblJlYWR5VG9TZWVrXyhldmVudCkge1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIm9uUmVhZHlUb1NlZWsgI1wiICsgZXZlbnQuZGF0YS5wbGF5SWQpO1xuICAgIH1cbiAgICBwbGF5U2Vla0N1cnJlbnRUaW1lKGV2ZW50LmRhdGEuc2Vla0JlZ2luLCBldmVudC5kYXRhLnBsYXlJZCwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblJlYWR5VG9TZWVrKGV2ZW50KSB7XG4gICAgJChfYXVkaW9FbGVtZW50KS5vZmYoX3JlYWR5RXZlbnQsIG9uUmVhZHlUb1NlZWspO1xuXG4gICAgaWYgKCFfQW5kcm9pZCkge1xuICAgICAgb25SZWFkeVRvU2Vla18oZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIm9uUmVhZHlUb1NlZWsgQU5EUk9JRCAuLi4gd2FpdGluZyBhIGJpdCAuLi4gI1wiICsgZXZlbnQuZGF0YS5wbGF5SWQpO1xuICAgICAgfVxuXG4gICAgICAvL3NlbGYucGxheSgpO1xuICAgICAgcGxheVRvRm9yY2VQcmVsb2FkKCk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIG9uUmVhZHlUb1NlZWtfKGV2ZW50KTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXlTZWVrQ3VycmVudFRpbWUobmV3Q3VycmVudFRpbWUsIHBsYXlJZCwgaXNOZXdTcmMpIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJwbGF5U2Vla0N1cnJlbnRUaW1lKCkgI1wiICsgcGxheUlkKTtcbiAgICB9XG5cbiAgICBpZiAobmV3Q3VycmVudFRpbWUgPT0gMCkge1xuICAgICAgbmV3Q3VycmVudFRpbWUgPSAwLjAxO1xuICAgIH1cblxuICAgIGlmIChNYXRoLmFicyhuZXdDdXJyZW50VGltZSAtIF9hdWRpb0VsZW1lbnQuY3VycmVudFRpbWUpIDwgMC4zKSB7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcInBsYXlTZWVrQ3VycmVudFRpbWUoKSBDT05USU5VRVwiKTtcbiAgICAgIH1cblxuICAgICAgX2F1ZGlvRWxlbWVudC5tb1NlZWtpbmcgPSB1bmRlZmluZWQ7XG4gICAgICBzZWxmLnBsYXkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZXYgPSBpc05ld1NyYyA/IF9zZWVrZWRFdmVudDEgOiBfc2Vla2VkRXZlbnQyO1xuXG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwicGxheVNlZWtDdXJyZW50VGltZSgpIE5FRUQgU0VFSywgRVY6IFwiICsgZXYpO1xuICAgIH1cblxuICAgIHNlbGYucGF1c2UoKTtcblxuICAgICQoX2F1ZGlvRWxlbWVudCkub24oZXYsIHtcbiAgICAgIG5ld0N1cnJlbnRUaW1lOiBuZXdDdXJyZW50VGltZSxcbiAgICAgIHBsYXlJZDogcGxheUlkLFxuICAgICAgaXNOZXdTcmM6IGlzTmV3U3JjXG4gICAgfSwgb25TZWVrZWQpO1xuXG4gICAgdHJ5IHtcbiAgICAgIF9hdWRpb0VsZW1lbnQuY3VycmVudFRpbWUgPSBuZXdDdXJyZW50VGltZTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgY29uc29sZS5lcnJvcihleC5tZXNzYWdlKTtcblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBfYXVkaW9FbGVtZW50LmN1cnJlbnRUaW1lID0gbmV3Q3VycmVudFRpbWU7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihleC5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSwgNSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIE1BWF9TRUVLX1JFVFJJRVMgPSAxMDtcbiAgdmFyIF9zZWVrZWRFdmVudDEgPSBfaU9TID8gXCJjYW5wbGF5dGhyb3VnaFwiIDogXCJzZWVrZWRcIjsgLy9cInByb2dyZXNzXCJcbiAgdmFyIF9zZWVrZWRFdmVudDIgPSBfaU9TID8gXCJ0aW1ldXBkYXRlXCIgOiBcInNlZWtlZFwiO1xuXG4gIGZ1bmN0aW9uIG9uU2Vla2VkKGV2ZW50KSB7XG4gICAgdmFyIGV2ID0gZXZlbnQuZGF0YS5pc05ld1NyYyA/IF9zZWVrZWRFdmVudDEgOiBfc2Vla2VkRXZlbnQyO1xuXG4gICAgdmFyIG5vdFJldHJ5ID0gZXZlbnQuZGF0YS5zZWVrUmV0cmllcyA9PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAobm90UmV0cnkgfHwgZXZlbnQuZGF0YS5zZWVrUmV0cmllcyA9PSBNQVhfU0VFS19SRVRSSUVTKSAvLyBmaXJzdCByZXRyeVxuICAgIHtcbiAgICAgICQoX2F1ZGlvRWxlbWVudCkub2ZmKGV2LCBvblNlZWtlZCk7XG4gICAgfVxuXG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwib25TZWVrZWQoKSAjXCIgKyBldmVudC5kYXRhLnBsYXlJZCArIFwiIEZJUlNUPyBcIiArIG5vdFJldHJ5ICsgXCIgRVY6IFwiICsgZXYpO1xuICAgIH1cblxuICAgIHZhciBjdXJUaW1lID0gX2F1ZGlvRWxlbWVudC5jdXJyZW50VGltZTtcbiAgICB2YXIgZGlmZiA9IE1hdGguYWJzKGV2ZW50LmRhdGEubmV3Q3VycmVudFRpbWUgLSBjdXJUaW1lKTtcblxuICAgIGlmICgobm90UmV0cnkgfHwgZXZlbnQuZGF0YS5zZWVrUmV0cmllcyA+PSAwKSAmJlxuICAgICAgZGlmZiA+PSAxKSB7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIm9uU2Vla2VkKCkgdGltZSBkaWZmOiBcIiArIGV2ZW50LmRhdGEubmV3Q3VycmVudFRpbWUgKyBcIiB2cy4gXCIgKyBjdXJUaW1lICsgXCIgKFwiICsgZGlmZiArIFwiKVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vdFJldHJ5KSB7XG4gICAgICAgIGV2ZW50LmRhdGEuc2Vla1JldHJpZXMgPSBNQVhfU0VFS19SRVRSSUVTO1xuXG4gICAgICAgIC8vIGlmIChERUJVRylcbiAgICAgICAgLy8ge1xuICAgICAgICAvLyAgICAgY29uc29sZS5kZWJ1ZyhcIm9uU2Vla2VkKCkgZmFpbCA9PiBmaXJzdCByZXRyeSwgRVY6IFwiICsgX3NlZWtlZEV2ZW50Mik7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBldmVudC5kYXRhLmlzTmV3U3JjID0gZmFsc2U7XG4gICAgICAgIC8vJChfYXVkaW9FbGVtZW50KS5vbihfc2Vla2VkRXZlbnQyLCBldmVudC5kYXRhLCBvblNlZWtlZCk7XG4gICAgICB9XG5cbiAgICAgIC8vZWxzZVxuICAgICAge1xuICAgICAgICBldmVudC5kYXRhLnNlZWtSZXRyaWVzLS07XG5cbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5kZWJ1ZyhcIm9uU2Vla2VkKCkgRkFJTCA9PiByZXRyeSBhZ2FpbiAodGltZW91dClcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG9uU2Vla2VkKGV2ZW50KTtcbiAgICAgICAgfSwgX0FuZHJvaWQgPyAxMDAwIDogMjAwKTtcbiAgICAgIH1cblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgX2F1ZGlvRWxlbWVudC5wYXVzZSgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIF9hdWRpb0VsZW1lbnQuY3VycmVudFRpbWUgPSBldmVudC5kYXRhLm5ld0N1cnJlbnRUaW1lO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXgubWVzc2FnZSk7XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgX2F1ZGlvRWxlbWVudC5jdXJyZW50VGltZSA9IGV2ZW50LmRhdGEubmV3Q3VycmVudFRpbWU7XG4gICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGV4Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDQpO1xuICAgICAgICB9XG4gICAgICB9LCA1KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJvblNlZWtlZCgpIFNUQVRFOlwiKTtcbiAgICAgICAgY29uc29sZS5kZWJ1Zyhub3RSZXRyeSk7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoZXZlbnQuZGF0YS5zZWVrUmV0cmllcyk7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoZGlmZik7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaWZmID49IDEpIHtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5kZWJ1ZyhcIm9uU2Vla2VkKCkgQUJPUlQsIFRSWSBBR0FJTiBGUk9NIFNDUkFUQ0ghXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNtaWxTcmMgPSBfY3VycmVudFNtaWxTcmM7XG4gICAgICAgIHZhciBlcHViU3JjID0gX2N1cnJlbnRFcHViU3JjO1xuICAgICAgICB2YXIgc2Vla0JlZ2luID0gZXZlbnQuZGF0YS5uZXdDdXJyZW50VGltZTtcblxuICAgICAgICBzZWxmLnJlc2V0KCk7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLnBsYXlGaWxlKHNtaWxTcmMsIGVwdWJTcmMsIHNlZWtCZWdpbik7XG4gICAgICAgIH0sIDEwKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwib25TZWVrZWQoKSBPS0FZID0+IHBsYXkhXCIpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5kYXRhLnNlZWtSZXRyaWVzID0gdW5kZWZpbmVkO1xuXG4gICAgICBzZWxmLnBsYXkoKTtcblxuICAgICAgX2F1ZGlvRWxlbWVudC5tb1NlZWtpbmcgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1ZGlvUGxheWVyIiwiLy8gIExhdW5jaGVyT1NYXG4vL1xuLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgUmVjdCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVjdCcpXG5cbi8qKlxuICogQ0ZJIG5hdmlnYXRpb24gaGVscGVyIGNsYXNzXG4gKlxuICogQHBhcmFtICR2aWV3cG9ydFxuICogQHBhcmFtICRpZnJhbWVcbiAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgc2V0dGluZ3MgZm9yIE5hdmlnYXRpb25Mb2dpYyBvYmplY3RcbiAqICAgICAgLSByZWN0YW5nbGVCYXNlZCAgICBJZiB0cnV0aHksIGNsaWVudFJlY3QtYmFzZWQgZ2VvbWV0cnkgd2lsbCBiZSB1c2VkXG4gKiAgICAgIC0gcGFnaW5hdGlvbkluZm8gICAgTGF5b3V0IGRldGFpbHMsIHVzZWQgYnkgY2xpZW50UmVjdC1iYXNlZCBnZW9tZXRyeVxuICogQGNvbnN0cnVjdG9yXG4gKi9cblxuZnVuY3Rpb24gQ2ZpTmF2aWdhdGlvbkxvZ2ljKCR2aWV3cG9ydCwgJGlmcmFtZSwgb3B0aW9ucykge1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHRoaXMuZ2V0Um9vdEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH07XG5cbiAgLy8gRklYRUQgTEFZT1VUIGlmICghb3B0aW9ucy5yZWN0YW5nbGVCYXNlZCkgYWxlcnQoXCIhISFvcHRpb25zLnJlY3RhbmdsZUJhc2VkXCIpO1xuXG4gIHZhciB2aXNpYmlsaXR5Q2hlY2tlckZ1bmMgPSBvcHRpb25zLnJlY3RhbmdsZUJhc2VkID8gY2hlY2tWaXNpYmlsaXR5QnlSZWN0YW5nbGVzIDogY2hlY2tWaXNpYmlsaXR5QnlWZXJ0aWNhbE9mZnNldHM7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCBwYWdlcyBhcmUgcmVuZGVyZWQgcmlnaHQtdG8tbGVmdFxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGlzUGFnZVByb2dyZXNzaW9uUmlnaHRUb0xlZnQoKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMucGFnaW5hdGlvbkluZm8gJiYgISFvcHRpb25zLnBhZ2luYXRpb25JbmZvLnJpZ2h0VG9MZWZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCBwYWdlcyBhcmUgcmVuZGVyZWQgd2l0aCB2ZXJ0aWNhbCB3cml0aW5nIG1vZGVcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBpc1ZlcnRpY2FsV3JpdGluZ01vZGUoKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMucGFnaW5hdGlvbkluZm8gJiYgISFvcHRpb25zLnBhZ2luYXRpb25JbmZvLmlzVmVydGljYWxXcml0aW5nTW9kZTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCBhIChmdWxseSBhZGp1c3RlZCkgcmVjdGFuZ2xlIGlzIGF0IGxlYXN0IHBhcnRseSB2aXNpYmxlXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmcmFtZURpbWVuc2lvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNWd21dICAgICAgICAgICBpc1ZlcnRpY2FsV3JpdGluZ01vZGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBpc1JlY3RWaXNpYmxlKHJlY3QsIGZyYW1lRGltZW5zaW9ucywgaXNWd20pIHtcbiAgICBpZiAoaXNWd20pIHtcbiAgICAgIHJldHVybiByZWN0LnRvcCA+PSAwICYmIHJlY3QudG9wIDwgZnJhbWVEaW1lbnNpb25zLmhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIHJlY3QubGVmdCA+PSAwICYmIHJlY3QubGVmdCA8IGZyYW1lRGltZW5zaW9ucy53aWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBSZXRyaWV2ZXMgX2N1cnJlbnRfIGZ1bGwgd2lkdGggb2YgYSBjb2x1bW4gKGluY2x1ZGluZyBpdHMgZ2FwKVxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBGdWxsIHdpZHRoIG9mIGEgY29sdW1uIGluIHBpeGVsc1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0Q29sdW1uRnVsbFdpZHRoKCkge1xuXG4gICAgaWYgKCFvcHRpb25zLnBhZ2luYXRpb25JbmZvIHx8IGlzVmVydGljYWxXcml0aW5nTW9kZSgpKSB7XG4gICAgICByZXR1cm4gJGlmcmFtZS53aWR0aCgpO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zLnBhZ2luYXRpb25JbmZvLmNvbHVtbldpZHRoICsgb3B0aW9ucy5wYWdpbmF0aW9uSW5mby5jb2x1bW5HYXA7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogUmV0cmlldmVzIF9jdXJyZW50XyBvZmZzZXQgb2YgYSB2aWV3cG9ydFxuICAgKiAocmVsYXRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjaGFwdGVyKVxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmlzaWJsZUNvbnRlbnRPZmZzZXRzKCkge1xuICAgIGlmIChpc1ZlcnRpY2FsV3JpdGluZ01vZGUoKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiAob3B0aW9ucy5wYWdpbmF0aW9uSW5mbyA/IG9wdGlvbnMucGFnaW5hdGlvbkluZm8ucGFnZU9mZnNldCA6IDApXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogKG9wdGlvbnMucGFnaW5hdGlvbkluZm8gPyBvcHRpb25zLnBhZ2luYXRpb25JbmZvLnBhZ2VPZmZzZXQgOiAwKSAqIChpc1BhZ2VQcm9ncmVzc2lvblJpZ2h0VG9MZWZ0KCkgPyAtMSA6IDEpXG4gICAgfTtcbiAgfVxuXG4gIC8vIE9sZCAob2Zmc2V0VG9wLWJhc2VkKSBhbGdvcml0aG0sIHVzZWZ1bCBpbiB0b3AtdG8tYm90dG9tIGxheW91dHNcbiAgZnVuY3Rpb24gY2hlY2tWaXNpYmlsaXR5QnlWZXJ0aWNhbE9mZnNldHMoXG4gICAgJGVsZW1lbnQsIHZpc2libGVDb250ZW50T2Zmc2V0cywgc2hvdWxkQ2FsY3VsYXRlVmlzaWJpbGl0eU9mZnNldCkge1xuXG4gICAgdmFyIGVsZW1lbnRSZWN0ID0gUmVjdC5mcm9tRWxlbWVudCgkZWxlbWVudCk7XG4gICAgaWYgKF8uaXNOYU4oZWxlbWVudFJlY3QubGVmdCkpIHtcbiAgICAgIC8vIHRoaXMgaXMgYWN0dWFsbHkgYSBwb2ludCBlbGVtZW50LCBkb2VzbnQgaGF2ZSBhIGJvdW5kaW5nIHJlY3RhbmdsZVxuICAgICAgZWxlbWVudFJlY3QgPSBuZXcgUmVjdChcbiAgICAgICAgJGVsZW1lbnQucG9zaXRpb24oKS50b3AsICRlbGVtZW50LnBvc2l0aW9uKCkubGVmdCwgMCwgMCk7XG4gICAgfVxuICAgIHZhciB0b3BPZmZzZXQgPSB2aXNpYmxlQ29udGVudE9mZnNldHMudG9wIHx8IDA7XG4gICAgdmFyIGlzQmVsb3dWaXNpYmxlVG9wID0gZWxlbWVudFJlY3QuYm90dG9tKCkgPiB0b3BPZmZzZXQ7XG4gICAgdmFyIGlzQWJvdmVWaXNpYmxlQm90dG9tID0gdmlzaWJsZUNvbnRlbnRPZmZzZXRzLmJvdHRvbSAhPT0gdW5kZWZpbmVkID8gZWxlbWVudFJlY3QudG9wIDwgdmlzaWJsZUNvbnRlbnRPZmZzZXRzLmJvdHRvbSA6IHRydWU7IC8vdGhpcyBjaGVjayBhbHdheXMgcGFzc2VkLCBpZiBjb3JyZXNwb25kaW5nIG9mZnNldCBpc24ndCBzZXRcblxuICAgIHZhciBwZXJjZW50T2ZFbGVtZW50SGVpZ2h0ID0gMDtcbiAgICBpZiAoaXNCZWxvd1Zpc2libGVUb3AgJiYgaXNBYm92ZVZpc2libGVCb3R0b20pIHsgLy8gZWxlbWVudCBpcyB2aXNpYmxlXG4gICAgICBpZiAoIXNob3VsZENhbGN1bGF0ZVZpc2liaWxpdHlPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudFJlY3QudG9wIDw9IHRvcE9mZnNldCkge1xuICAgICAgICBwZXJjZW50T2ZFbGVtZW50SGVpZ2h0ID0gTWF0aC5jZWlsKFxuICAgICAgICAgIDEwMCAqICh0b3BPZmZzZXQgLSBlbGVtZW50UmVjdC50b3ApIC8gZWxlbWVudFJlY3QuaGVpZ2h0XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gYmVsb3cgZ29lcyBhbm90aGVyIGFsZ29yaXRobSwgd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBnZXRWaXNpYmxlRWxlbWVudHMgcGF0dGVybixcbiAgICAgICAgLy8gYnV0IGl0IHNlZW1zIHRvIGJlIGEgYml0IGluY29ycmVjdFxuICAgICAgICAvLyAoYXMgc3BhdGlhbCBvZmZzZXQgc2hvdWxkIGJlIG1lYXN1cmVkIGF0IHRoZSBmaXJzdCB2aXNpYmxlIHBvaW50IG9mIHRoZSBlbGVtZW50KTpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gdmFyIHZpc2libGVUb3AgPSBNYXRoLm1heChlbGVtZW50UmVjdC50b3AsIHZpc2libGVDb250ZW50T2Zmc2V0cy50b3ApO1xuICAgICAgICAvLyB2YXIgdmlzaWJsZUJvdHRvbSA9IE1hdGgubWluKGVsZW1lbnRSZWN0LmJvdHRvbSgpLCB2aXNpYmxlQ29udGVudE9mZnNldHMuYm90dG9tKTtcbiAgICAgICAgLy8gdmFyIHZpc2libGVIZWlnaHQgPSB2aXNpYmxlQm90dG9tIC0gdmlzaWJsZVRvcDtcbiAgICAgICAgLy8gdmFyIHBlcmNlbnRWaXNpYmxlID0gTWF0aC5yb3VuZCgodmlzaWJsZUhlaWdodCAvIGVsZW1lbnRSZWN0LmhlaWdodCkgKiAxMDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDEwMCAtIHBlcmNlbnRPZkVsZW1lbnRIZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiAwOyAvLyBlbGVtZW50IGlzbid0IHZpc2libGVcbiAgfVxuXG4gIC8qKlxuICAgKiBOZXcgKHJlY3RhbmdsZS1iYXNlZCkgYWxnb3JpdGhtLCB1c2VmdWwgaW4gbXVsdGktY29sdW1uIGxheW91dHNcbiAgICpcbiAgICogTm90ZTogdGhlIHNlY29uZCBwYXJhbSAocHJvcHMpIGlzIGlnbm9yZWQgaW50ZW50aW9uYWxseVxuICAgKiAobm8gbmVlZCB0byB1c2UgdGhvc2UgaW4gbm9ybWFsaXphdGlvbilcbiAgICpcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBfcHJvcHNcbiAgICogQHBhcmFtIHtib29sZWFufSBzaG91bGRDYWxjdWxhdGVWaXNpYmlsaXR5UGVyY2VudGFnZVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfG51bGx9XG4gICAqICAgICAgMCBmb3Igbm9uLXZpc2libGUgZWxlbWVudHMsXG4gICAqICAgICAgMCA8IG4gPD0gMTAwIGZvciB2aXNpYmxlIGVsZW1lbnRzXG4gICAqICAgICAgKHdpbGwganVzdCBnaXZlIDEwMCwgaWYgYHNob3VsZENhbGN1bGF0ZVZpc2liaWxpdHlQZXJjZW50YWdlYCA9PiBmYWxzZSlcbiAgICogICAgICBudWxsIGZvciBlbGVtZW50cyB3aXRoIGRpc3BsYXk6bm9uZVxuICAgKi9cbiAgZnVuY3Rpb24gY2hlY2tWaXNpYmlsaXR5QnlSZWN0YW5nbGVzKFxuICAgICRlbGVtZW50LCBfcHJvcHMsIHNob3VsZENhbGN1bGF0ZVZpc2liaWxpdHlQZXJjZW50YWdlKSB7XG5cbiAgICB2YXIgZWxlbWVudFJlY3RhbmdsZXMgPSBnZXROb3JtYWxpemVkUmVjdGFuZ2xlcygkZWxlbWVudCk7XG4gICAgdmFyIGNsaWVudFJlY3RhbmdsZXMgPSBlbGVtZW50UmVjdGFuZ2xlcy5jbGllbnRSZWN0YW5nbGVzO1xuICAgIGlmIChjbGllbnRSZWN0YW5nbGVzLmxlbmd0aCA9PT0gMCkgeyAvLyBlbGVtZW50cyB3aXRoIGRpc3BsYXk6bm9uZSwgZXRjLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGlzUnRsID0gaXNQYWdlUHJvZ3Jlc3Npb25SaWdodFRvTGVmdCgpO1xuICAgIHZhciBpc1Z3bSA9IGlzVmVydGljYWxXcml0aW5nTW9kZSgpO1xuICAgIHZhciBjb2x1bW5GdWxsV2lkdGggPSBnZXRDb2x1bW5GdWxsV2lkdGgoKTtcbiAgICB2YXIgZnJhbWVEaW1lbnNpb25zID0ge1xuICAgICAgd2lkdGg6ICRpZnJhbWUud2lkdGgoKSxcbiAgICAgIGhlaWdodDogJGlmcmFtZS5oZWlnaHQoKVxuICAgIH07XG5cbiAgICBpZiAoY2xpZW50UmVjdGFuZ2xlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIGJlY2F1c2Ugb2Ygd2Via2l0IGluY29uc2lzdGVuY3ksIHRoYXQgc2luZ2xlIHJlY3RhbmdsZSBzaG91bGQgYmUgYWRqdXN0ZWRcbiAgICAgIC8vIHVudGlsIGl0IGhpdHMgdGhlIGVuZCBPUiB3aWxsIGJlIGJhc2VkIG9uIHRoZSBGSVJTVCBjb2x1bW4gdGhhdCBpcyB2aXNpYmxlXG4gICAgICBhZGp1c3RSZWN0YW5nbGUoY2xpZW50UmVjdGFuZ2xlc1swXSwgZnJhbWVEaW1lbnNpb25zLCBjb2x1bW5GdWxsV2lkdGgsXG4gICAgICAgIGlzUnRsLCBpc1Z3bSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gZm9yIGFuIGVsZW1lbnQgc3BsaXQgYmV0d2VlbiBzZXZlcmFsIENTUyBjb2x1bW5zLFxuICAgIC8vIGJvdGggRmlyZWZveCBhbmQgSUUgcHJvZHVjZSBhcyBtYW55IGNsaWVudCByZWN0YW5nbGVzO1xuICAgIC8vIGVhY2ggb2YgdGhvc2Ugc2hvdWxkIGJlIGNoZWNrZWRcbiAgICB2YXIgdmlzaWJpbGl0eVBlcmNlbnRhZ2UgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2xpZW50UmVjdGFuZ2xlcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIGlmIChpc1JlY3RWaXNpYmxlKGNsaWVudFJlY3RhbmdsZXNbaV0sIGZyYW1lRGltZW5zaW9ucywgaXNWd20pKSB7XG4gICAgICAgIHZpc2liaWxpdHlQZXJjZW50YWdlID0gc2hvdWxkQ2FsY3VsYXRlVmlzaWJpbGl0eVBlcmNlbnRhZ2UgPyBtZWFzdXJlVmlzaWJpbGl0eVBlcmNlbnRhZ2VCeVJlY3RhbmdsZXMoY2xpZW50UmVjdGFuZ2xlcywgaSkgOiAxMDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmlzaWJpbGl0eVBlcmNlbnRhZ2U7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgYSBwYWdlIGluZGV4ICgwLWJhc2VkKSBmb3IgYSBzcGVjaWZpYyBlbGVtZW50LlxuICAgKiBDYWxjdWxhdGlvbnMgYXJlIGJhc2VkIG9uIHJlY3RhbmdsZXMgcmV0cmlldmVkIHdpdGggZ2V0Q2xpZW50UmVjdHMoKSBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudFxuICAgKiBAcGFyYW0ge251bWJlcn0gc3BhdGlhbFZlcnRpY2FsT2Zmc2V0XG4gICAqIEByZXR1cm5zIHtudW1iZXJ8bnVsbH1cbiAgICovXG4gIGZ1bmN0aW9uIGZpbmRQYWdlQnlSZWN0YW5nbGVzKCRlbGVtZW50LCBzcGF0aWFsVmVydGljYWxPZmZzZXQpIHtcbiAgICB2YXIgdmlzaWJsZUNvbnRlbnRPZmZzZXRzID0gZ2V0VmlzaWJsZUNvbnRlbnRPZmZzZXRzKCk7XG4gICAgdmFyIGVsZW1lbnRSZWN0YW5nbGVzID0gZ2V0Tm9ybWFsaXplZFJlY3RhbmdsZXMoJGVsZW1lbnQsIHZpc2libGVDb250ZW50T2Zmc2V0cyk7XG4gICAgdmFyIGNsaWVudFJlY3RhbmdsZXMgPSBlbGVtZW50UmVjdGFuZ2xlcy5jbGllbnRSZWN0YW5nbGVzO1xuICAgIGlmIChjbGllbnRSZWN0YW5nbGVzLmxlbmd0aCA9PT0gMCkgeyAvLyBlbGVtZW50cyB3aXRoIGRpc3BsYXk6bm9uZSwgZXRjLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGlzUnRsID0gaXNQYWdlUHJvZ3Jlc3Npb25SaWdodFRvTGVmdCgpO1xuICAgIHZhciBpc1Z3bSA9IGlzVmVydGljYWxXcml0aW5nTW9kZSgpO1xuICAgIHZhciBjb2x1bW5GdWxsV2lkdGggPSBnZXRDb2x1bW5GdWxsV2lkdGgoKTtcblxuICAgIHZhciBmcmFtZUhlaWdodCA9ICRpZnJhbWUuaGVpZ2h0KCk7XG4gICAgdmFyIGZyYW1lV2lkdGggPSAkaWZyYW1lLndpZHRoKCk7XG5cbiAgICBpZiAoc3BhdGlhbFZlcnRpY2FsT2Zmc2V0KSB7XG4gICAgICB0cmltUmVjdGFuZ2xlc0J5VmVydE9mZnNldChjbGllbnRSZWN0YW5nbGVzLCBzcGF0aWFsVmVydGljYWxPZmZzZXQsXG4gICAgICAgIGZyYW1lSGVpZ2h0LCBjb2x1bW5GdWxsV2lkdGgsIGlzUnRsLCBpc1Z3bSk7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0UmVjdGFuZ2xlID0gXy5maXJzdChjbGllbnRSZWN0YW5nbGVzKTtcbiAgICBpZiAoY2xpZW50UmVjdGFuZ2xlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGFkanVzdFJlY3RhbmdsZShmaXJzdFJlY3RhbmdsZSwge1xuICAgICAgICBoZWlnaHQ6IGZyYW1lSGVpZ2h0LFxuICAgICAgICB3aWR0aDogZnJhbWVXaWR0aFxuICAgICAgfSwgY29sdW1uRnVsbFdpZHRoLCBpc1J0bCwgaXNWd20pO1xuICAgIH1cblxuICAgIHZhciBwYWdlSW5kZXg7XG5cbiAgICBpZiAoaXNWd20pIHtcbiAgICAgIHZhciB0b3BPZmZzZXQgPSBmaXJzdFJlY3RhbmdsZS50b3A7XG4gICAgICBwYWdlSW5kZXggPSBNYXRoLmZsb29yKHRvcE9mZnNldCAvIGZyYW1lSGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlZnRPZmZzZXQgPSBmaXJzdFJlY3RhbmdsZS5sZWZ0O1xuICAgICAgaWYgKGlzUnRsKSB7XG4gICAgICAgIGxlZnRPZmZzZXQgPSAoY29sdW1uRnVsbFdpZHRoICogKG9wdGlvbnMucGFnaW5hdGlvbkluZm8gPyBvcHRpb25zLnBhZ2luYXRpb25JbmZvLnZpc2libGVDb2x1bW5Db3VudCA6IDEpKSAtIGxlZnRPZmZzZXQ7XG4gICAgICB9XG4gICAgICBwYWdlSW5kZXggPSBNYXRoLmZsb29yKGxlZnRPZmZzZXQgLyBjb2x1bW5GdWxsV2lkdGgpO1xuICAgIH1cblxuICAgIGlmIChwYWdlSW5kZXggPCAwKSB7XG4gICAgICBwYWdlSW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAocGFnZUluZGV4ID49IChvcHRpb25zLnBhZ2luYXRpb25JbmZvID8gb3B0aW9ucy5wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudCA6IDEpKSB7XG4gICAgICBwYWdlSW5kZXggPSAob3B0aW9ucy5wYWdpbmF0aW9uSW5mbyA/IChvcHRpb25zLnBhZ2luYXRpb25JbmZvLmNvbHVtbkNvdW50IC0gMSkgOiAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFnZUluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIENhbGN1bGF0ZXMgdGhlIHZpc2liaWxpdHkgb2Zmc2V0IHBlcmNlbnRhZ2UgYmFzZWQgb24gQ2xpZW50UmVjdCBkaW1lbnNpb25zXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNsaWVudFJlY3RhbmdsZXMgKHNob3VsZCBhbHJlYWR5IGJlIG5vcm1hbGl6ZWQpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmaXJzdFZpc2libGVSZWN0SW5kZXhcbiAgICogQHJldHVybnMge251bWJlcn0gLSB2aXNpYmlsaXR5IHBlcmNlbnRhZ2UgKDAgPCBuIDw9IDEwMClcbiAgICovXG4gIGZ1bmN0aW9uIG1lYXN1cmVWaXNpYmlsaXR5UGVyY2VudGFnZUJ5UmVjdGFuZ2xlcyhcbiAgICBjbGllbnRSZWN0YW5nbGVzLCBmaXJzdFZpc2libGVSZWN0SW5kZXgpIHtcblxuICAgIHZhciBoZWlnaHRUb3RhbCA9IDA7XG4gICAgdmFyIGhlaWdodFZpc2libGUgPSAwO1xuXG4gICAgaWYgKGNsaWVudFJlY3RhbmdsZXMubGVuZ3RoID4gMSkge1xuICAgICAgXy5lYWNoKGNsaWVudFJlY3RhbmdsZXMsIGZ1bmN0aW9uKHJlY3QsIGluZGV4KSB7XG4gICAgICAgIGhlaWdodFRvdGFsICs9IHJlY3QuaGVpZ2h0O1xuICAgICAgICBpZiAoaW5kZXggPj0gZmlyc3RWaXNpYmxlUmVjdEluZGV4KSB7XG4gICAgICAgICAgLy8gaW4gdGhpcyBjYXNlLCBhbGwgdGhlIHJlY3RhbmdsZXMgYWZ0ZXIgdGhlIGZpcnN0IHZpc2libGVcbiAgICAgICAgICAvLyBzaG91bGQgYmUgY291bnRlZCBhcyB2aXNpYmxlXG4gICAgICAgICAgaGVpZ2h0VmlzaWJsZSArPSByZWN0LmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNob3VsZCBhbHJlYWR5IGJlIG5vcm1hbGl6ZWQgYW5kIGFkanVzdGVkXG4gICAgICBoZWlnaHRUb3RhbCA9IGNsaWVudFJlY3RhbmdsZXNbMF0uaGVpZ2h0O1xuICAgICAgaGVpZ2h0VmlzaWJsZSA9IGNsaWVudFJlY3RhbmdsZXNbMF0uaGVpZ2h0IC0gTWF0aC5tYXgoXG4gICAgICAgIDAsIC1jbGllbnRSZWN0YW5nbGVzWzBdLnRvcCk7XG4gICAgfVxuICAgIHJldHVybiBoZWlnaHRWaXNpYmxlID09PSBoZWlnaHRUb3RhbCA/IDEwMCAvLyB0cml2aWFsIGNhc2U6IGVsZW1lbnQgaXMgMTAwJSB2aXNpYmxlXG4gICAgICA6IE1hdGguZmxvb3IoMTAwICogaGVpZ2h0VmlzaWJsZSAvIGhlaWdodFRvdGFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBSZXRyaWV2ZXMgdGhlIHBvc2l0aW9uIG9mICRlbGVtZW50IGluIG11bHRpLWNvbHVtbiBsYXlvdXRcbiAgICpcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Zpc2libGVDb250ZW50T2Zmc2V0c11cbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIGdldE5vcm1hbGl6ZWRSZWN0YW5nbGVzKCRlbCwgdmlzaWJsZUNvbnRlbnRPZmZzZXRzKSB7XG5cbiAgICB2aXNpYmxlQ29udGVudE9mZnNldHMgPSB2aXNpYmxlQ29udGVudE9mZnNldHMgfHwge307XG4gICAgdmFyIGxlZnRPZmZzZXQgPSB2aXNpYmxlQ29udGVudE9mZnNldHMubGVmdCB8fCAwO1xuICAgIHZhciB0b3BPZmZzZXQgPSB2aXNpYmxlQ29udGVudE9mZnNldHMudG9wIHx8IDA7XG5cbiAgICAvLyB1bmlvbiBvZiBhbGwgcmVjdGFuZ2xlcyB3cmFwcGluZyB0aGUgZWxlbWVudFxuICAgIHZhciB3cmFwcGVyUmVjdGFuZ2xlID0gbm9ybWFsaXplUmVjdGFuZ2xlKFxuICAgICAgJGVsWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBsZWZ0T2Zmc2V0LCB0b3BPZmZzZXQpO1xuXG4gICAgLy8gYWxsIHRoZSBzZXBhcmF0ZSByZWN0YW5nbGVzIChmb3IgZGV0ZWN0aW5nIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50XG4gICAgLy8gc3BsaXQgYmV0d2VlbiBzZXZlcmFsIGNvbHVtbnMpXG4gICAgdmFyIGNsaWVudFJlY3RhbmdsZXMgPSBbXTtcbiAgICB2YXIgY2xpZW50UmVjdExpc3QgPSAkZWxbMF0uZ2V0Q2xpZW50UmVjdHMoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNsaWVudFJlY3RMaXN0Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgaWYgKGNsaWVudFJlY3RMaXN0W2ldLmhlaWdodCA+IDApIHtcbiAgICAgICAgLy8gRmlyZWZveCBzb21ldGltZXMgZ2V0cyBpdCB3cm9uZyxcbiAgICAgICAgLy8gYWRkaW5nIGxpdGVyYWxseSBlbXB0eSAoaGVpZ2h0ID0gMCkgY2xpZW50IHJlY3RhbmdsZSBwcmVjZWRpbmcgdGhlIHJlYWwgb25lLFxuICAgICAgICAvLyB0aGF0IGVtcHR5IGNsaWVudCByZWN0YW5sZSBzaG91bGRuJ3QgYmUgcmV0cmlldmVkXG4gICAgICAgIGNsaWVudFJlY3RhbmdsZXMucHVzaChcbiAgICAgICAgICBub3JtYWxpemVSZWN0YW5nbGUoY2xpZW50UmVjdExpc3RbaV0sIGxlZnRPZmZzZXQsIHRvcE9mZnNldCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjbGllbnRSZWN0YW5nbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gc29tZXRpbWVzIGFuIGVsZW1lbnQgaXMgZWl0aGVyIGhpZGRlbiBvciBlbXB0eSwgYW5kIHRoYXQgbWVhbnNcbiAgICAgIC8vIFdlYmtpdC1iYXNlZCBicm93c2VycyBmYWlsIHRvIGFzc2lnbiBwcm9wZXIgY2xpZW50UmVjdHMgdG8gaXRcbiAgICAgIC8vIGluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGdvIGZvciBpdHMgc2libGluZyAoaWYgaXQgZXhpc3RzKVxuICAgICAgJGVsID0gJGVsLm5leHQoKTtcbiAgICAgIGlmICgkZWwubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBnZXROb3JtYWxpemVkUmVjdGFuZ2xlcygkZWwsIHZpc2libGVDb250ZW50T2Zmc2V0cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHdyYXBwZXJSZWN0YW5nbGU6IHdyYXBwZXJSZWN0YW5nbGUsXG4gICAgICBjbGllbnRSZWN0YW5nbGVzOiBjbGllbnRSZWN0YW5nbGVzXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBDb252ZXJ0cyBUZXh0UmVjdGFuZ2xlIG9iamVjdCBpbnRvIGEgcGxhaW4gb2JqZWN0LFxuICAgKiB0YWtpbmcgY29udGVudCBvZmZzZXRzICg9c2Nyb2xscywgcG9zaXRpb24gc2hpZnRzIGV0Yy4pIGludG8gYWNjb3VudFxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRSZWN0YW5nbGV9IHRleHRSZWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0T2Zmc2V0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0b3BPZmZzZXRcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVJlY3RhbmdsZSh0ZXh0UmVjdCwgbGVmdE9mZnNldCwgdG9wT2Zmc2V0KSB7XG5cbiAgICB2YXIgcGxhaW5SZWN0T2JqZWN0ID0ge1xuICAgICAgbGVmdDogdGV4dFJlY3QubGVmdCxcbiAgICAgIHJpZ2h0OiB0ZXh0UmVjdC5yaWdodCxcbiAgICAgIHRvcDogdGV4dFJlY3QudG9wLFxuICAgICAgYm90dG9tOiB0ZXh0UmVjdC5ib3R0b20sXG4gICAgICB3aWR0aDogdGV4dFJlY3QucmlnaHQgLSB0ZXh0UmVjdC5sZWZ0LFxuICAgICAgaGVpZ2h0OiB0ZXh0UmVjdC5ib3R0b20gLSB0ZXh0UmVjdC50b3BcbiAgICB9O1xuICAgIG9mZnNldFJlY3RhbmdsZShwbGFpblJlY3RPYmplY3QsIGxlZnRPZmZzZXQsIHRvcE9mZnNldCk7XG4gICAgcmV0dXJuIHBsYWluUmVjdE9iamVjdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBPZmZzZXRzIHBsYWluIG9iamVjdCAod2hpY2ggcmVwcmVzZW50cyBhIFRleHRSZWN0YW5nbGUpLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVjdFxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdE9mZnNldFxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9wT2Zmc2V0XG4gICAqL1xuICBmdW5jdGlvbiBvZmZzZXRSZWN0YW5nbGUocmVjdCwgbGVmdE9mZnNldCwgdG9wT2Zmc2V0KSB7XG5cbiAgICByZWN0LmxlZnQgKz0gbGVmdE9mZnNldDtcbiAgICByZWN0LnJpZ2h0ICs9IGxlZnRPZmZzZXQ7XG4gICAgcmVjdC50b3AgKz0gdG9wT2Zmc2V0O1xuICAgIHJlY3QuYm90dG9tICs9IHRvcE9mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKlxuICAgKiBXaGVuIGVsZW1lbnQgaXMgc3BpbGxlZCBvdmVyIHR3byBvciBtb3JlIGNvbHVtbnMsXG4gICAqIG1vc3Qgb2YgdGhlIHRpbWUgV2Via2l0LWJhc2VkIGJyb3dzZXJzXG4gICAqIHN0aWxsIGFzc2lnbiBhIHNpbmdsZSBjbGllbnRSZWN0YW5nbGUgdG8gaXQsIHNldHRpbmcgaXRzIGB0b3BgIHByb3BlcnR5IHRvIG5lZ2F0aXZlIHZhbHVlXG4gICAqIChzbyBpdCBsb29rcyBsaWtlIGl0J3MgcmVuZGVyZWQgYmFzZWQgb24gdGhlIHNlY29uZCBjb2x1bW4pXG4gICAqIEFsYXMsIHNvbWV0aW1lcyB0aGV5IGRlY2lkZSB0byBjb250aW51ZSB0aGUgbGVmdG1vc3QgY29sdW1uIC0gZnJvbSBfYmVsb3dfIGl0cyByZWFsIGhlaWdodC5cbiAgICogSW4gdGhpcyBjYXNlLCBgYm90dG9tYCBwcm9wZXJ0eSBpcyBhY3R1YWxseSBncmVhdGVyIHRoYW4gZWxlbWVudCdzIGhlaWdodCBhbmQgaGFkIHRvIGJlIGFkanVzdGVkIGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBVZ2guXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmcmFtZURpbWVuc2lvbnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkZ1bGxXaWR0aFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUnRsXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWd20gICAgICAgICAgICAgICBpc1ZlcnRpY2FsV3JpdGluZ01vZGVcbiAgICogQHBhcmFtIHtib29sZWFufSBzaG91bGRMb29rRm9yRmlyc3RWaXNpYmxlQ29sdW1uXG4gICAqICAgICAgSWYgc2V0LCB0aGVyZSdsbCBiZSB0d28tcGhhc2UgYWRqdXN0bWVudFxuICAgKiAgICAgICh0byBhbGlnbiBhIHJlY3RhbmdsZSB3aXRoIGEgdmlld3BvcnQpXG5cbiAgICovXG4gIGZ1bmN0aW9uIGFkanVzdFJlY3RhbmdsZShyZWN0LCBmcmFtZURpbWVuc2lvbnMsIGNvbHVtbkZ1bGxXaWR0aCwgaXNSdGwsIGlzVndtLFxuICAgIHNob3VsZExvb2tGb3JGaXJzdFZpc2libGVDb2x1bW4pIHtcblxuICAgIC8vIFJlY3RhbmdsZSBhZGp1c3RtZW50IGlzIG5vdCBuZWVkZWQgaW4gVldNIHNpbmNlIGl0IGRvZXMgbm90IGRlYWwgd2l0aCBjb2x1bW5zXG4gICAgaWYgKGlzVndtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzUnRsKSB7XG4gICAgICBjb2x1bW5GdWxsV2lkdGggKj0gLTE7IC8vIGhvcml6b250YWwgc2hpZnRzIGFyZSByZXZlcnRlZCBpbiBSVEwgbW9kZVxuICAgIH1cblxuICAgIC8vIGZpcnN0IHdlIGdvIGxlZnQvcmlnaHQgKHJlYmFzaW5nIG9udG8gdGhlIHZlcnkgZmlyc3QgY29sdW1uIGF2YWlsYWJsZSlcbiAgICB3aGlsZSAocmVjdC50b3AgPCAwKSB7XG4gICAgICBvZmZzZXRSZWN0YW5nbGUocmVjdCwgLWNvbHVtbkZ1bGxXaWR0aCwgZnJhbWVEaW1lbnNpb25zLmhlaWdodCk7XG4gICAgfVxuXG4gICAgLy8gLi4uIHRoZW4sIGlmIG5lY2Vzc2FyeSAoZm9yIHZpc2liaWxpdHkgb2Zmc2V0IGNoZWNrcyksXG4gICAgLy8gZWFjaCBjb2x1bW4gaXMgdHJpZWQgYWdhaW4gKG5vdyBpbiByZXZlcnNlIG9yZGVyKVxuICAgIC8vIHRoZSBsb29wIHdpbGwgYmUgc3RvcHBlZCB3aGVuIHRoZSBjb2x1bW4gaXMgYWxpZ25lZCB3aXRoIGEgdmlld3BvcnRcbiAgICAvLyAoaS5lLiwgaXMgdGhlIGZpcnN0IHZpc2libGUgb25lKS5cbiAgICBpZiAoc2hvdWxkTG9va0ZvckZpcnN0VmlzaWJsZUNvbHVtbikge1xuICAgICAgd2hpbGUgKHJlY3QuYm90dG9tID49IGZyYW1lRGltZW5zaW9ucy5oZWlnaHQpIHtcbiAgICAgICAgaWYgKGlzUmVjdFZpc2libGUocmVjdCwgZnJhbWVEaW1lbnNpb25zLCBpc1Z3bSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXRSZWN0YW5nbGUocmVjdCwgY29sdW1uRnVsbFdpZHRoLCAtZnJhbWVEaW1lbnNpb25zLmhlaWdodCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIFRyaW1zIHRoZSByZWN0YW5nbGUocykgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSByZWN0c1xuICAgKiBAcGFyYW0ge251bWJlcn0gdmVydGljYWxPZmZzZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyYW1lSGVpZ2h0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5GdWxsV2lkdGhcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1J0bFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzVndtICAgICAgICAgICAgICAgaXNWZXJ0aWNhbFdyaXRpbmdNb2RlXG4gICAqL1xuICBmdW5jdGlvbiB0cmltUmVjdGFuZ2xlc0J5VmVydE9mZnNldChcbiAgICByZWN0cywgdmVydGljYWxPZmZzZXQsIGZyYW1lSGVpZ2h0LCBjb2x1bW5GdWxsV2lkdGgsIGlzUnRsLCBpc1Z3bSkge1xuXG4gICAgLy9UT0RPOiBTdXBwb3J0IHZlcnRpY2FsIHdyaXRpbmcgbW9kZVxuICAgIGlmIChpc1Z3bSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0b3RhbEhlaWdodCA9IF8ucmVkdWNlKHJlY3RzLCBmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICAgIHJldHVybiBwcmV2ICsgY3VyLmhlaWdodDtcbiAgICB9LCAwKTtcblxuICAgIHZhciBoZWlnaHRUb0hpZGUgPSB0b3RhbEhlaWdodCAqIHZlcnRpY2FsT2Zmc2V0IC8gMTAwO1xuICAgIGlmIChyZWN0cy5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgaGVpZ2h0QWNjdW0gPSAwO1xuICAgICAgZG8ge1xuICAgICAgICBoZWlnaHRBY2N1bSArPSByZWN0c1swXS5oZWlnaHQ7XG4gICAgICAgIGlmIChoZWlnaHRBY2N1bSA+IGhlaWdodFRvSGlkZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlY3RzLnNoaWZ0KCk7XG4gICAgICB9IHdoaWxlIChyZWN0cy5sZW5ndGggPiAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmViYXNlIHRvIHRoZSBsYXN0IHBvc3NpYmxlIGNvbHVtblxuICAgICAgLy8gKHNvIHRoYXQgYWRkaW5nIHRvIHRvcCB3aWxsIGJlIHByb3Blcmx5IHByb2Nlc3NlZCBsYXRlcilcbiAgICAgIGlmIChpc1J0bCkge1xuICAgICAgICBjb2x1bW5GdWxsV2lkdGggKj0gLTE7XG4gICAgICB9XG4gICAgICB3aGlsZSAocmVjdHNbMF0uYm90dG9tID49IGZyYW1lSGVpZ2h0KSB7XG4gICAgICAgIG9mZnNldFJlY3RhbmdsZShyZWN0c1swXSwgY29sdW1uRnVsbFdpZHRoLCAtZnJhbWVIZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICByZWN0c1swXS50b3AgKz0gaGVpZ2h0VG9IaWRlO1xuICAgICAgcmVjdHNbMF0uaGVpZ2h0IC09IGhlaWdodFRvSGlkZTtcbiAgICB9XG4gIH1cblxuICAvL3dlIGxvb2sgZm9yIHRleHQgYW5kIGltYWdlc1xuICB0aGlzLmZpbmRGaXJzdFZpc2libGVFbGVtZW50ID0gZnVuY3Rpb24ocHJvcHMpIHtcblxuICAgIGlmICh0eXBlb2YgcHJvcHMgIT09ICdvYmplY3QnKSB7XG4gICAgICAvLyBjb21wYXRpYmlsaXR5IHdpdGggbGVnYWN5IGNvZGUsIGBwcm9wc2AgaXMgYHRvcE9mZnNldGAgYWN0dWFsbHlcbiAgICAgIHByb3BzID0ge1xuICAgICAgICB0b3A6IHByb3BzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciAkZWxlbWVudHM7XG4gICAgdmFyICRmaXJzdFZpc2libGVUZXh0Tm9kZSA9IG51bGw7XG4gICAgdmFyIHBlcmNlbnRPZkVsZW1lbnRIZWlnaHQgPSAwO1xuXG4gICAgJGVsZW1lbnRzID0gJChcImJvZHlcIiwgdGhpcy5nZXRSb290RWxlbWVudCgpKS5maW5kKFwiOm5vdChpZnJhbWUpXCIpLmNvbnRlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlzVmFsaWRUZXh0Tm9kZSh0aGlzKSB8fCB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbWcnO1xuICAgIH0pO1xuXG4gICAgLy8gRmluZCB0aGUgZmlyc3QgdmlzaWJsZSB0ZXh0IG5vZGVcbiAgICAkLmVhY2goJGVsZW1lbnRzLCBmdW5jdGlvbigpIHtcblxuICAgICAgdmFyICRlbGVtZW50O1xuXG4gICAgICBpZiAodGhpcy5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHsgLy90ZXh0IG5vZGVcbiAgICAgICAgJGVsZW1lbnQgPSAkKHRoaXMpLnBhcmVudCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsZW1lbnQgPSAkKHRoaXMpOyAvL2ltYWdlXG4gICAgICB9XG5cbiAgICAgIHZhciB2aXNpYmlsaXR5UmVzdWx0ID0gdmlzaWJpbGl0eUNoZWNrZXJGdW5jKCRlbGVtZW50LCBwcm9wcywgdHJ1ZSk7XG4gICAgICBpZiAodmlzaWJpbGl0eVJlc3VsdCkge1xuICAgICAgICAkZmlyc3RWaXNpYmxlVGV4dE5vZGUgPSAkZWxlbWVudDtcbiAgICAgICAgcGVyY2VudE9mRWxlbWVudEhlaWdodCA9IDEwMCAtIHZpc2liaWxpdHlSZXN1bHQ7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICRlbGVtZW50OiAkZmlyc3RWaXNpYmxlVGV4dE5vZGUsXG4gICAgICBwZXJjZW50WTogcGVyY2VudE9mRWxlbWVudEhlaWdodFxuICAgIH07XG4gIH07XG5cbiAgdGhpcy5nZXRGaXJzdFZpc2libGVFbGVtZW50Q2ZpID0gZnVuY3Rpb24odG9wT2Zmc2V0KSB7XG5cbiAgICB2YXIgZm91bmRFbGVtZW50ID0gdGhpcy5maW5kRmlyc3RWaXNpYmxlRWxlbWVudCh0b3BPZmZzZXQpO1xuXG4gICAgaWYgKCFmb3VuZEVsZW1lbnQuJGVsZW1lbnQpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiQ291bGQgbm90IGdlbmVyYXRlIENGSSBubyB2aXNpYmxlIGVsZW1lbnQgb24gcGFnZVwiKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy9ub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICB2YXIgY2ZpID0gRVBVQmNmaS5HZW5lcmF0b3IuZ2VuZXJhdGVFbGVtZW50Q0ZJQ29tcG9uZW50KGZvdW5kRWxlbWVudC4kZWxlbWVudFswXSk7XG5cbiAgICBpZiAoY2ZpWzBdID09IFwiIVwiKSB7XG4gICAgICBjZmkgPSBjZmkuc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIHJldHVybiBjZmkgKyBcIkAwOlwiICsgZm91bmRFbGVtZW50LnBlcmNlbnRZO1xuICB9O1xuXG4gIHRoaXMuZ2V0UGFnZUZvckVsZW1lbnRDZmkgPSBmdW5jdGlvbihjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgdmFyIGNmaVBhcnRzID0gc3BsaXRDZmkoY2ZpKTtcblxuICAgIHZhciAkZWxlbWVudCA9IGdldEVsZW1lbnRCeVBhcnRpYWxDZmkoY2ZpUGFydHMuY2ZpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgaWYgKCEkZWxlbWVudCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldFBhZ2VGb3JQb2ludE9uRWxlbWVudCgkZWxlbWVudCwgY2ZpUGFydHMueCwgY2ZpUGFydHMueSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0RWxlbWVudEJ5UGFydGlhbENmaShjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgdmFyIGNvbnRlbnREb2MgPSAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcblxuICAgIHZhciB3cmFwcGVkQ2ZpID0gXCJlcHViY2ZpKFwiICsgY2ZpICsgXCIpXCI7XG4gICAgLy9ub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICB2YXIgJGVsZW1lbnQgPSBFUFVCY2ZpLmdldFRhcmdldEVsZW1lbnRXaXRoUGFydGlhbENGSSh3cmFwcGVkQ2ZpLCBjb250ZW50RG9jLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgaWYgKCEkZWxlbWVudCB8fCAkZWxlbWVudC5sZW5ndGggPT0gMCkge1xuICAgICAgY29uc29sZS5sb2coXCJDYW4ndCBmaW5kIGVsZW1lbnQgZm9yIENGSTogXCIgKyBjZmkpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gJGVsZW1lbnQ7XG4gIH1cblxuICB0aGlzLmdldEVsZW1lbnRCeUNmaSA9IGZ1bmN0aW9uKGNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICB2YXIgY2ZpUGFydHMgPSBzcGxpdENmaShjZmkpO1xuICAgIHJldHVybiBnZXRFbGVtZW50QnlQYXJ0aWFsQ2ZpKGNmaVBhcnRzLmNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgfTtcblxuICB0aGlzLmdldFBhZ2VGb3JFbGVtZW50ID0gZnVuY3Rpb24oJGVsZW1lbnQpIHtcblxuICAgIHJldHVybiB0aGlzLmdldFBhZ2VGb3JQb2ludE9uRWxlbWVudCgkZWxlbWVudCwgMCwgMCk7XG4gIH07XG5cbiAgdGhpcy5nZXRQYWdlRm9yUG9pbnRPbkVsZW1lbnQgPSBmdW5jdGlvbigkZWxlbWVudCwgeCwgeSkge1xuXG4gICAgdmFyIHBhZ2VJbmRleDtcbiAgICBpZiAob3B0aW9ucy5yZWN0YW5nbGVCYXNlZCkge1xuICAgICAgcGFnZUluZGV4ID0gZmluZFBhZ2VCeVJlY3RhbmdsZXMoJGVsZW1lbnQsIHkpO1xuICAgICAgaWYgKHBhZ2VJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0ltcG9zc2libGUgdG8gbG9jYXRlIGEgaGlkZGVuIGVsZW1lbnQ6ICcsICRlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFnZUluZGV4O1xuICAgIH1cblxuICAgIHZhciBwb3NJbkVsZW1lbnQgPSB0aGlzLmdldFZlcnRpY2FsT2Zmc2V0Rm9yUG9pbnRPbkVsZW1lbnQoJGVsZW1lbnQsIHgsIHkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHBvc0luRWxlbWVudCAvICR2aWV3cG9ydC5oZWlnaHQoKSk7XG4gIH07XG5cbiAgdGhpcy5nZXRWZXJ0aWNhbE9mZnNldEZvckVsZW1lbnQgPSBmdW5jdGlvbigkZWxlbWVudCkge1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0VmVydGljYWxPZmZzZXRGb3JQb2ludE9uRWxlbWVudCgkZWxlbWVudCwgMCwgMCk7XG4gIH07XG5cbiAgdGhpcy5nZXRWZXJ0aWNhbE9mZnNldEZvclBvaW50T25FbGVtZW50ID0gZnVuY3Rpb24oJGVsZW1lbnQsIHgsIHkpIHtcblxuICAgIHZhciBlbGVtZW50UmVjdCA9IFJlY3QuZnJvbUVsZW1lbnQoJGVsZW1lbnQpO1xuICAgIHJldHVybiBNYXRoLmNlaWwoZWxlbWVudFJlY3QudG9wICsgeSAqIGVsZW1lbnRSZWN0LmhlaWdodCAvIDEwMCk7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKGlkKSB7XG5cbiAgICB2YXIgY29udGVudERvYyA9ICRpZnJhbWVbMF0uY29udGVudERvY3VtZW50O1xuXG4gICAgdmFyICRlbGVtZW50ID0gJChjb250ZW50RG9jLmdldEVsZW1lbnRCeUlkKGlkKSk7XG4gICAgLy8kKFwiI1wiICsgSGVscGVycy5lc2NhcGVKUXVlcnlTZWxlY3RvcihpZCksIGNvbnRlbnREb2MpO1xuXG4gICAgaWYgKCRlbGVtZW50Lmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiAkZWxlbWVudDtcbiAgfTtcblxuICB0aGlzLmdldFBhZ2VGb3JFbGVtZW50SWQgPSBmdW5jdGlvbihpZCkge1xuXG4gICAgdmFyICRlbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgaWYgKCEkZWxlbWVudCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldFBhZ2VGb3JFbGVtZW50KCRlbGVtZW50KTtcbiAgfTtcblxuICBmdW5jdGlvbiBzcGxpdENmaShjZmkpIHtcblxuICAgIHZhciByZXQgPSB7XG4gICAgICBjZmk6IFwiXCIsXG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG5cbiAgICB2YXIgaXggPSBjZmkuaW5kZXhPZihcIkBcIik7XG5cbiAgICBpZiAoaXggIT0gLTEpIHtcbiAgICAgIHZhciB0ZXJtaW51cyA9IGNmaS5zdWJzdHJpbmcoaXggKyAxKTtcblxuICAgICAgdmFyIGNvbEl4ID0gdGVybWludXMuaW5kZXhPZihcIjpcIik7XG4gICAgICBpZiAoY29sSXggIT0gLTEpIHtcbiAgICAgICAgcmV0LnggPSBwYXJzZUludCh0ZXJtaW51cy5zdWJzdHIoMCwgY29sSXgpKTtcbiAgICAgICAgcmV0LnkgPSBwYXJzZUludCh0ZXJtaW51cy5zdWJzdHIoY29sSXggKyAxKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlVuZXhwZWN0ZWQgdGVybWluYXRpbmcgc3RlcCBmb3JtYXRcIik7XG4gICAgICB9XG5cbiAgICAgIHJldC5jZmkgPSBjZmkuc3Vic3RyaW5nKDAsIGl4KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICByZXQuY2ZpID0gY2ZpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyByZXR1cm5zIHJhdyBET00gZWxlbWVudCAobm90ICQgalF1ZXJ5LXdyYXBwZWQpXG4gIHRoaXMuZ2V0Rmlyc3RWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudCA9IGZ1bmN0aW9uKHZpc2libGVDb250ZW50T2Zmc2V0cykge1xuICAgIHZhciBkb2NFbGVtZW50ID0gdGhpcy5nZXRSb290RWxlbWVudCgpO1xuICAgIGlmICghZG9jRWxlbWVudCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIHZhciAkcm9vdCA9ICQoXCJib2R5XCIsIGRvY0VsZW1lbnQpO1xuICAgIGlmICghJHJvb3QgfHwgISRyb290Lmxlbmd0aCB8fCAhJHJvb3RbMF0pIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICB2YXIgZmlyc3RQYXJ0aWFsID0gdW5kZWZpbmVkO1xuXG4gICAgZnVuY3Rpb24gdHJhdmVyc2VBcnJheShhcnIpIHtcbiAgICAgIGlmICghYXJyIHx8ICFhcnIubGVuZ3RoKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgY291bnQgPSBhcnIubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICB2YXIgaXRlbSA9IGFycltpXTtcbiAgICAgICAgaWYgKCFpdGVtKSBjb250aW51ZTtcblxuICAgICAgICB2YXIgJGl0ZW0gPSAkKGl0ZW0pO1xuXG4gICAgICAgIGlmICgkaXRlbS5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiKSkge1xuICAgICAgICAgIHZhciB2aXNpYmxlID0gdGhhdC5nZXRFbGVtZW50VmlzaWJpbGl0eSgkaXRlbSwgdmlzaWJsZUNvbnRlbnRPZmZzZXRzKTtcbiAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgaWYgKCFmaXJzdFBhcnRpYWwpIGZpcnN0UGFydGlhbCA9IGl0ZW07XG5cbiAgICAgICAgICAgIGlmICh2aXNpYmxlID09IDEwMCkgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBlbGVtID0gdHJhdmVyc2VBcnJheShpdGVtLmNoaWxkcmVuKTtcbiAgICAgICAgICBpZiAoZWxlbSkgcmV0dXJuIGVsZW07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgZWwgPSB0cmF2ZXJzZUFycmF5KFskcm9vdFswXV0pO1xuICAgIGlmICghZWwpIGVsID0gZmlyc3RQYXJ0aWFsO1xuICAgIHJldHVybiBlbDtcblxuICAgIC8vIHZhciAkZWxlbWVudHMgPSB0aGlzLmdldE1lZGlhT3ZlcmxheUVsZW1lbnRzKCRyb290KTtcbiAgICAvLyByZXR1cm4gdGhpcy5nZXRWaXNpYmxlRWxlbWVudHMoJGVsZW1lbnRzLCB2aXNpYmxlQ29udGVudE9mZnNldHMpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RWxlbWVudFZpc2liaWxpdHkgPSBmdW5jdGlvbigkZWxlbWVudCwgdmlzaWJsZUNvbnRlbnRPZmZzZXRzKSB7XG4gICAgcmV0dXJuIHZpc2liaWxpdHlDaGVja2VyRnVuYygkZWxlbWVudCwgdmlzaWJsZUNvbnRlbnRPZmZzZXRzLCB0cnVlKTtcbiAgfTtcblxuICAvLyAvKipcbiAgLy8gICogQGRlcHJlY2F0ZWRcbiAgLy8gICovXG4gIC8vIHRoaXMuZ2V0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnRzID0gZnVuY3Rpb24odmlzaWJsZUNvbnRlbnRPZmZzZXRzKSB7XG4gIC8vIFxuICAvLyAgICAgdmFyICRlbGVtZW50cyA9IHRoaXMuZ2V0TWVkaWFPdmVybGF5RWxlbWVudHMoJChcImJvZHlcIiwgdGhpcy5nZXRSb290RWxlbWVudCgpKSk7XG4gIC8vICAgICByZXR1cm4gdGhpcy5nZXRWaXNpYmxlRWxlbWVudHMoJGVsZW1lbnRzLCB2aXNpYmxlQ29udGVudE9mZnNldHMpO1xuICAvLyBcbiAgLy8gfTtcblxuICB0aGlzLmlzRWxlbWVudFZpc2libGUgPSB2aXNpYmlsaXR5Q2hlY2tlckZ1bmM7XG5cbiAgdGhpcy5nZXRBbGxWaXNpYmxlRWxlbWVudHNXaXRoU2VsZWN0b3IgPSBmdW5jdGlvbihzZWxlY3RvciwgdmlzaWJsZUNvbnRlbnRPZmZzZXQpIHtcbiAgICB2YXIgZWxlbWVudHMgPSAkKHNlbGVjdG9yLCB0aGlzLmdldFJvb3RFbGVtZW50KCkpLmZpbHRlcihmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICB2YXIgJG5ld0VsZW1lbnRzID0gW107XG4gICAgJC5lYWNoKGVsZW1lbnRzLCBmdW5jdGlvbigpIHtcbiAgICAgICRuZXdFbGVtZW50cy5wdXNoKCQodGhpcykpO1xuICAgIH0pO1xuICAgIHZhciB2aXNpYmxlRGl2cyA9IHRoaXMuZ2V0VmlzaWJsZUVsZW1lbnRzKCRuZXdFbGVtZW50cywgdmlzaWJsZUNvbnRlbnRPZmZzZXQpO1xuICAgIHJldHVybiB2aXNpYmxlRGl2cztcblxuICB9O1xuXG4gIHRoaXMuZ2V0VmlzaWJsZUVsZW1lbnRzID0gZnVuY3Rpb24oJGVsZW1lbnRzLCB2aXNpYmxlQ29udGVudE9mZnNldHMpIHtcblxuICAgIHZhciB2aXNpYmxlRWxlbWVudHMgPSBbXTtcblxuICAgIC8vIEZpbmQgdGhlIGZpcnN0IHZpc2libGUgdGV4dCBub2RlXG4gICAgJC5lYWNoKCRlbGVtZW50cywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJGVsZW1lbnQgPSB0aGlzO1xuICAgICAgdmFyIHZpc2liaWxpdHlQZXJjZW50YWdlID0gdmlzaWJpbGl0eUNoZWNrZXJGdW5jKFxuICAgICAgICAkZWxlbWVudCwgdmlzaWJsZUNvbnRlbnRPZmZzZXRzLCB0cnVlKTtcblxuICAgICAgaWYgKHZpc2liaWxpdHlQZXJjZW50YWdlKSB7XG4gICAgICAgIHZhciAkdmlzaWJsZUVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICAgICAgdmlzaWJsZUVsZW1lbnRzLnB1c2goe1xuICAgICAgICAgIGVsZW1lbnQ6ICR2aXNpYmxlRWxlbWVudFswXSwgLy8gRE9NIEVsZW1lbnQgaXMgcHVzaGVkXG4gICAgICAgICAgcGVyY2VudFZpc2libGU6IHZpc2liaWxpdHlQZXJjZW50YWdlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgZWxlbWVudCdzIHBvc2l0aW9uIGNhbm5vdCBiZSBkZXRlcm1pbmVkLCBqdXN0IGdvIHRvIG5leHQgb25lXG4gICAgICBpZiAodmlzaWJpbGl0eVBlcmNlbnRhZ2UgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnRpbnVlIGlmIG5vIHZpc2libGVFbGVtZW50cyBoYXZlIGJlZW4gZm91bmQgeWV0LFxuICAgICAgLy8gc3RvcCBvdGhlcndpc2VcbiAgICAgIHJldHVybiB2aXNpYmxlRWxlbWVudHMubGVuZ3RoID09PSAwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpc2libGVFbGVtZW50cztcbiAgfTtcblxuICB0aGlzLmdldFZpc2libGVUZXh0RWxlbWVudHMgPSBmdW5jdGlvbih2aXNpYmxlQ29udGVudE9mZnNldHMpIHtcblxuICAgIHZhciAkZWxlbWVudHMgPSB0aGlzLmdldFRleHRFbGVtZW50cygkKFwiYm9keVwiLCB0aGlzLmdldFJvb3RFbGVtZW50KCkpKTtcblxuICAgIHJldHVybiB0aGlzLmdldFZpc2libGVFbGVtZW50cygkZWxlbWVudHMsIHZpc2libGVDb250ZW50T2Zmc2V0cyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICB0aGlzLmdldE1lZGlhT3ZlcmxheUVsZW1lbnRzID0gZnVuY3Rpb24oJHJvb3QpIHtcblxuICAgIHZhciAkZWxlbWVudHMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHRyYXZlcnNlQ29sbGVjdGlvbihlbGVtZW50cykge1xuXG4gICAgICBpZiAoZWxlbWVudHMgPT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcblxuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnRzW2ldKTtcblxuICAgICAgICBpZiAoJGVsZW1lbnQuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIikpIHtcbiAgICAgICAgICAkZWxlbWVudHMucHVzaCgkZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhdmVyc2VDb2xsZWN0aW9uKCRlbGVtZW50WzBdLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJhdmVyc2VDb2xsZWN0aW9uKFskcm9vdFswXV0pO1xuXG4gICAgcmV0dXJuICRlbGVtZW50cztcbiAgfTtcblxuICB0aGlzLmdldFRleHRFbGVtZW50cyA9IGZ1bmN0aW9uKCRyb290KSB7XG5cbiAgICB2YXIgJHRleHRFbGVtZW50cyA9IFtdO1xuXG4gICAgJHJvb3QuZmluZChcIjpub3QoaWZyYW1lKVwiKS5jb250ZW50cygpLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAgIGlmIChpc1ZhbGlkVGV4dE5vZGUodGhpcykpIHtcbiAgICAgICAgJHRleHRFbGVtZW50cy5wdXNoKCQodGhpcykucGFyZW50KCkpO1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICByZXR1cm4gJHRleHRFbGVtZW50cztcblxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzVmFsaWRUZXh0Tm9kZShub2RlKSB7XG5cbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcblxuICAgICAgLy8gSGV1cmlzdGljIHRvIGZpbmQgYSB0ZXh0IG5vZGUgd2l0aCBhY3R1YWwgdGV4dFxuICAgICAgdmFyIG5vZGVUZXh0ID0gbm9kZS5ub2RlVmFsdWUucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgICAgbm9kZVRleHQgPSBub2RlVGV4dC5yZXBsYWNlKC8gL2csIFwiXCIpO1xuXG4gICAgICByZXR1cm4gbm9kZVRleHQubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgfVxuXG4gIHRoaXMuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG5cbiAgICB2YXIgJGVsZW1lbnQgPSAkKHNlbGVjdG9yLCB0aGlzLmdldFJvb3RFbGVtZW50KCkpO1xuXG4gICAgaWYgKCRlbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiAkZWxlbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENmaU5hdmlnYXRpb25Mb2dpY1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIE9SSUVOVEFUSU9OX0xBTkRTQ0FQRTogXCJvcmllbnRhdGlvbl9sYW5kc2NhcGVcIixcbiAgT1JJRU5UQVRJT05fUE9SVFJBSVQ6IFwib3JpZW50YXRpb25fcG9ydHJhaXRcIlxufSIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBCb29rbWFya0RhdGEgPSByZXF1aXJlKCcuLi9tb2RlbHMvYm9va21hcmstZGF0YScpXG52YXIgQ3VycmVudFBhZ2VzSW5mbyA9IHJlcXVpcmUoJy4uL21vZGVscy9jdXJyZW50LXBhZ2VzLWluZm8nKVxudmFyIENTU1RyYW5zaXRpb24gPSByZXF1aXJlKCcuLi9oZWxwZXJzL2Nzcy10cmFuc2l0aW9uJylcbnZhciBkZWR1Y2VTeW50aGV0aWNTcHJlYWQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2RlZHVjZS1zeW50aGV0aWMtc3ByZWFkJylcbnZhciBFdmVudHMgPSByZXF1aXJlKCcuLi9ldmVudHMnKVxudmFyIEludGVybmFsRXZlbnRzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwtZXZlbnRzJylcbnZhciBsb2FkVGVtcGxhdGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2xvYWQtdGVtcGxhdGUnKVxudmFyIE1hcmdpbnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21hcmdpbnMnKVxudmFyIE9uZVBhZ2VWaWV3ID0gcmVxdWlyZSgnLi9vbmUtcGFnZS12aWV3JylcbnZhciBQYWdlT3BlblJlcXVlc3QgPSByZXF1aXJlKCcuLi9tb2RlbHMvcGFnZS1vcGVuLXJlcXVlc3QnKVxudmFyIHNldFN0eWxlcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvc2V0LXN0eWxlcycpXG52YXIgU3ByZWFkID0gcmVxdWlyZSgnLi4vbW9kZWxzL3NwcmVhZCcpXG5cbi8qKlxuICogVmlldyBmb3IgcmVuZGVyaW5nIGZpeGVkIGxheW91dCBwYWdlIHNwcmVhZFxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBwYXJhbSByZWFkZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBGaXhlZFZpZXcob3B0aW9ucywgcmVhZGVyKSB7XG5cbiAgXy5leHRlbmQodGhpcywgQmFja2JvbmUuRXZlbnRzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIF8kZWw7XG4gIHZhciBfJHZpZXdwb3J0ID0gb3B0aW9ucy4kdmlld3BvcnQ7XG4gIHZhciBfc3BpbmUgPSBvcHRpb25zLnNwaW5lO1xuICB2YXIgX3VzZXJTdHlsZXMgPSBvcHRpb25zLnVzZXJTdHlsZXM7XG4gIHZhciBfYm9va1N0eWxlcyA9IG9wdGlvbnMuYm9va1N0eWxlcztcbiAgdmFyIF96b29tID0gb3B0aW9ucy56b29tIHx8IHtcbiAgICBzdHlsZTogJ2RlZmF1bHQnXG4gIH07XG4gIHZhciBfY3VycmVudFNjYWxlO1xuICB2YXIgX2lmcmFtZUxvYWRlciA9IG9wdGlvbnMuaWZyYW1lTG9hZGVyO1xuICB2YXIgX3ZpZXdTZXR0aW5ncyA9IHVuZGVmaW5lZDtcblxuICB2YXIgX2xlZnRQYWdlVmlldyA9IGNyZWF0ZU9uZVBhZ2VWaWV3KFwiZml4ZWQtcGFnZS1mcmFtZS1sZWZ0XCIpO1xuICB2YXIgX3JpZ2h0UGFnZVZpZXcgPSBjcmVhdGVPbmVQYWdlVmlldyhcImZpeGVkLXBhZ2UtZnJhbWUtcmlnaHRcIik7XG4gIHZhciBfY2VudGVyUGFnZVZpZXcgPSBjcmVhdGVPbmVQYWdlVmlldyhcImZpeGVkLXBhZ2UtZnJhbWUtY2VudGVyXCIpO1xuXG4gIHZhciBfcGFnZVZpZXdzID0gW107XG4gIF9wYWdlVmlld3MucHVzaChfbGVmdFBhZ2VWaWV3KTtcbiAgX3BhZ2VWaWV3cy5wdXNoKF9yaWdodFBhZ2VWaWV3KTtcbiAgX3BhZ2VWaWV3cy5wdXNoKF9jZW50ZXJQYWdlVmlldyk7XG5cbiAgdmFyIF9zcHJlYWQgPSBuZXcgU3ByZWFkKF9zcGluZSwgZmFsc2UpO1xuICB2YXIgX2Jvb2tNYXJnaW5zO1xuICB2YXIgX2NvbnRlbnRNZXRhU2l6ZTtcbiAgdmFyIF9pc1JlZHJvd2luZyA9IGZhbHNlO1xuICB2YXIgX3JlZHJhd1JlcXVlc3QgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBjcmVhdGVPbmVQYWdlVmlldyhlbGVtZW50Q2xhc3MpIHtcblxuICAgIHZhciBwYWdlVmlldyA9IG5ldyBPbmVQYWdlVmlldyhvcHRpb25zLCBbZWxlbWVudENsYXNzXSxcbiAgICAgIGZhbHNlLCAvL2VuYWJsZUJvb2tTdHlsZU92ZXJyaWRlc1xuICAgICAgcmVhZGVyXG4gICAgKTtcblxuICAgIHBhZ2VWaWV3Lm9uKE9uZVBhZ2VWaWV3LlNQSU5FX0lURU1fT1BFTl9TVEFSVCwgZnVuY3Rpb24oJGlmcmFtZSwgc3BpbmVJdGVtKSB7XG5cbiAgICAgIHNlbGYudHJpZ2dlcihFdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FEX1NUQVJULCAkaWZyYW1lLCBzcGluZUl0ZW0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhZ2VWaWV3O1xuICB9XG5cbiAgdGhpcy5pc1JlZmxvd2FibGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5zZXRab29tID0gZnVuY3Rpb24oem9vbSkge1xuICAgIF96b29tID0gem9vbTtcblxuICAgIHJlc2l6ZUJvb2soZmFsc2UpO1xuICB9XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciB0ZW1wbGF0ZSA9IGxvYWRUZW1wbGF0ZShcImZpeGVkX2Jvb2tfZnJhbWVcIiwge30pO1xuXG4gICAgXyRlbCA9ICQodGVtcGxhdGUpO1xuXG4gICAgQ1NTVHJhbnNpdGlvbihfJGVsLCBcImFsbCAwIGVhc2UgMFwiKTtcblxuICAgIF8kZWwuY3NzKFwib3ZlcmZsb3dcIiwgXCJoaWRkZW5cIik7XG5cbiAgICAvLyBSZW1vdmVkLCBzZWUgb25lX3BhZ2Vfdmlld0ByZW5kZXIoKVxuICAgIC8vIHZhciBzZXR0aW5ncyA9IHJlYWRlci52aWV3ZXJTZXR0aW5ncygpO1xuICAgIC8vIGlmICghc2V0dGluZ3MgfHwgdHlwZW9mIHNldHRpbmdzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgLy8ge1xuICAgIC8vICAgICAvL2RlZmF1bHRzXG4gICAgLy8gICAgIHNldHRpbmdzID0gbmV3IFZpZXdlclNldHRpbmdzKHt9KTtcbiAgICAvLyB9XG4gICAgLy8gaWYgKHNldHRpbmdzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QpIHtcbiAgICAvL1xuICAgIC8vICAgICAvLyBUaGlzIGZpeGVzIHJlbmRlcmluZyBpc3N1ZXMgd2l0aCBXZWJWaWV3IChuYXRpdmUgYXBwcyksIHdoaWNoIGNyb3BzIGNvbnRlbnQgZW1iZWRkZWQgaW4gaWZyYW1lcyB1bmxlc3MgR1BVIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiBpcyBlbmFibGVkIGZvciBDU1MgcmVuZGVyaW5nLlxuICAgIC8vICAgICBfJGVsLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVooMClcIik7XG4gICAgLy8gfVxuXG4gICAgXyR2aWV3cG9ydC5hcHBlbmQoXyRlbCk7XG5cbiAgICBzZWxmLmFwcGx5U3R5bGVzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgXyRlbC5yZW1vdmUoKTtcbiAgfTtcblxuXG4gIHRoaXMuc2V0Vmlld1NldHRpbmdzID0gZnVuY3Rpb24oc2V0dGluZ3MpIHtcblxuICAgIF92aWV3U2V0dGluZ3MgPSBzZXR0aW5ncztcblxuICAgIF9zcHJlYWQuc2V0U3ludGhldGljU3ByZWFkKGRlZHVjZVN5bnRoZXRpY1NwcmVhZChfJHZpZXdwb3J0LCBnZXRGaXJzdFZpc2libGVJdGVtKCksIF92aWV3U2V0dGluZ3MpID09IHRydWUpOyAvLyBmb3JjZSBib29sZWFuIHZhbHVlIChmcm9tIHRydXRoeS9mYWxzZXkgcmV0dXJuIHZhbHVlKVxuXG4gICAgdmFyIHZpZXdzID0gZ2V0RGlzcGxheWluZ1ZpZXdzKCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gdmlld3MubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgdmlld3NbaV0uc2V0Vmlld1NldHRpbmdzKHNldHRpbmdzKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0Rmlyc3RWaXNpYmxlSXRlbSgpIHtcblxuICAgIHZhciB2aXNpYmxlSXRlbXMgPSBfc3ByZWFkLnZhbGlkSXRlbXMoKTtcbiAgICByZXR1cm4gdmlzaWJsZUl0ZW1zWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVkcmF3KGluaXRpYXRvciwgcGFnaW5hdGlvblJlcXVlc3QpIHtcblxuICAgIGlmIChfaXNSZWRyb3dpbmcpIHtcbiAgICAgIF9yZWRyYXdSZXF1ZXN0ID0ge1xuICAgICAgICBpbml0aWF0b3I6IGluaXRpYXRvcixcbiAgICAgICAgcGFnaW5hdGlvblJlcXVlc3Q6IHBhZ2luYXRpb25SZXF1ZXN0XG4gICAgICB9O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9pc1JlZHJvd2luZyA9IHRydWU7XG5cbiAgICB2YXIgY29udGV4dCA9IHtcbiAgICAgIGlzRWxlbWVudEFkZGVkOiBmYWxzZVxuICAgIH07XG5cbiAgICB2YXIgcGFnZUxvYWREZWZlcnJhbHMgPSBjcmVhdGVQYWdlTG9hZERlZmVycmFscyhbe1xuICAgICAgcGFnZVZpZXc6IF9sZWZ0UGFnZVZpZXcsXG4gICAgICBzcGluZUl0ZW06IF9zcHJlYWQubGVmdEl0ZW0sXG4gICAgICBjb250ZXh0OiBjb250ZXh0XG4gICAgfSwge1xuICAgICAgcGFnZVZpZXc6IF9yaWdodFBhZ2VWaWV3LFxuICAgICAgc3BpbmVJdGVtOiBfc3ByZWFkLnJpZ2h0SXRlbSxcbiAgICAgIGNvbnRleHQ6IGNvbnRleHRcbiAgICB9LCB7XG4gICAgICBwYWdlVmlldzogX2NlbnRlclBhZ2VWaWV3LFxuICAgICAgc3BpbmVJdGVtOiBfc3ByZWFkLmNlbnRlckl0ZW0sXG4gICAgICBjb250ZXh0OiBjb250ZXh0XG4gICAgfV0pO1xuXG4gICAgJC53aGVuLmFwcGx5KCQsIHBhZ2VMb2FkRGVmZXJyYWxzKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgX2lzUmVkcm93aW5nID0gZmFsc2U7XG5cbiAgICAgIGlmIChfcmVkcmF3UmVxdWVzdCkge1xuICAgICAgICB2YXIgcDEgPSBfcmVkcmF3UmVxdWVzdC5pbml0aWF0b3I7XG4gICAgICAgIHZhciBwMiA9IF9yZWRyYXdSZXF1ZXN0LnBhZ2luYXRpb25SZXF1ZXN0O1xuICAgICAgICBfcmVkcmF3UmVxdWVzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmVkcmF3KHAxLCBwMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29udGV4dC5pc0VsZW1lbnRBZGRlZCkge1xuICAgICAgICAgIHNlbGYuYXBwbHlTdHlsZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYWdpbmF0aW9uUmVxdWVzdCkge1xuICAgICAgICAgIG9uUGFnZXNMb2FkZWQoaW5pdGlhdG9yLCBwYWdpbmF0aW9uUmVxdWVzdC5zcGluZUl0ZW0sIHBhZ2luYXRpb25SZXF1ZXN0LmVsZW1lbnRJZClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvblBhZ2VzTG9hZGVkKGluaXRpYXRvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0pO1xuXG4gIH1cblxuICAvLyBkaXI6IDAgPT4gbmV3IG9yIHNhbWUgcGFnZSwgMSA9PiBwcmV2aW91cywgMiA9PiBuZXh0XG4gIHZhciB1cGRhdGVQYWdlU3dpdGNoRGlyID0gZnVuY3Rpb24oZGlyLCBoYXNDaGFuZ2VkKSB7XG4gICAgLy8gaXJyZXNwZWN0aXZlIG9mIGRpc3BsYXkgc3RhdGVcbiAgICBpZiAoX2xlZnRQYWdlVmlldykgX2xlZnRQYWdlVmlldy51cGRhdGVQYWdlU3dpdGNoRGlyKGRpciwgaGFzQ2hhbmdlZCk7XG4gICAgaWYgKF9yaWdodFBhZ2VWaWV3KSBfcmlnaHRQYWdlVmlldy51cGRhdGVQYWdlU3dpdGNoRGlyKGRpciwgaGFzQ2hhbmdlZCk7XG4gICAgaWYgKF9jZW50ZXJQYWdlVmlldykgX2NlbnRlclBhZ2VWaWV3LnVwZGF0ZVBhZ2VTd2l0Y2hEaXIoZGlyLCBoYXNDaGFuZ2VkKTtcblxuICAgIC8vIHZhciB2aWV3cyA9IGdldERpc3BsYXlpbmdWaWV3cygpO1xuICAgIC8vIGZvcih2YXIgaSA9IDAsIGNvdW50ID0gdmlld3MubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgIC8vICAgICB2aWV3c1tpXS51cGRhdGVQYWdlU3dpdGNoRGlyKGRpciwgaGFzQ2hhbmdlZCk7XG4gICAgLy8gfVxuICB9O1xuXG5cbiAgdGhpcy5hcHBseVN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgc2V0U3R5bGVzKF91c2VyU3R5bGVzLmdldFN0eWxlcygpLCBfJGVsLnBhcmVudCgpKTtcblxuICAgIHVwZGF0ZUJvb2tNYXJnaW5zKCk7XG4gICAgdXBkYXRlQ29udGVudE1ldGFTaXplKCk7XG5cbiAgICByZXNpemVCb29rKCk7XG4gIH07XG5cbiAgdGhpcy5hcHBseUJvb2tTdHlsZXMgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciB2aWV3cyA9IGdldERpc3BsYXlpbmdWaWV3cygpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gdmlld3MubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgdmlld3NbaV0uYXBwbHlCb29rU3R5bGVzKCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBhZ2VMb2FkRGVmZXJyYWxzKHZpZXdJdGVtUGFpcnMpIHtcblxuICAgIHZhciBwYWdlTG9hZERlZmVycmFscyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3SXRlbVBhaXJzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgIHZhciBkZmQgPSB1cGRhdGVQYWdlVmlld0Zvckl0ZW0odmlld0l0ZW1QYWlyc1tpXS5wYWdlVmlldywgdmlld0l0ZW1QYWlyc1tpXS5zcGluZUl0ZW0sIHZpZXdJdGVtUGFpcnNbaV0uY29udGV4dCk7XG4gICAgICBwYWdlTG9hZERlZmVycmFscy5wdXNoKGRmZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhZ2VMb2FkRGVmZXJyYWxzO1xuXG4gIH1cblxuICBmdW5jdGlvbiBvblBhZ2VzTG9hZGVkKGluaXRpYXRvciwgcGFnaW5hdGlvblJlcXVlc3Rfc3BpbmVJdGVtLCBwYWdpbmF0aW9uUmVxdWVzdF9lbGVtZW50SWQpIHtcblxuICAgIHVwZGF0ZUNvbnRlbnRNZXRhU2l6ZSgpO1xuICAgIHJlc2l6ZUJvb2soKTtcblxuICAgIHNlbGYudHJpZ2dlcihJbnRlcm5hbEV2ZW50cy5DVVJSRU5UX1ZJRVdfUEFHSU5BVElPTl9DSEFOR0VELCB7XG4gICAgICBwYWdpbmF0aW9uSW5mbzogc2VsZi5nZXRQYWdpbmF0aW9uSW5mbygpLFxuICAgICAgaW5pdGlhdG9yOiBpbml0aWF0b3IsXG4gICAgICBzcGluZUl0ZW06IHBhZ2luYXRpb25SZXF1ZXN0X3NwaW5lSXRlbSxcbiAgICAgIGVsZW1lbnRJZDogcGFnaW5hdGlvblJlcXVlc3RfZWxlbWVudElkXG4gICAgfSk7XG4gIH1cblxuICB0aGlzLm9uVmlld3BvcnRSZXNpemUgPSBmdW5jdGlvbigpIHtcblxuICAgIC8vYmVjYXVzZSBjaGFuZ2Ugb2YgdGhlIHZpZXdwb3J0IG9yaWVudGF0aW9uIGNhbiBhbHRlciBwYWdpbmF0aW9uIGJlaGF2aW91ciB3ZSBoYXZlIHRvIGNoZWNrIGlmXG4gICAgLy92aXNpYmxlIGNvbnRlbnQgc3RheXMgc2FtZVxuXG4gICAgdmFyIGZpcnN0VmlzaWJsZUl0ZW0gPSBnZXRGaXJzdFZpc2libGVJdGVtKCk7XG4gICAgaWYgKCFmaXJzdFZpc2libGVJdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlzU3ludGhldGljU3ByZWFkID0gZGVkdWNlU3ludGhldGljU3ByZWFkKF8kdmlld3BvcnQsIGZpcnN0VmlzaWJsZUl0ZW0sIF92aWV3U2V0dGluZ3MpID09IHRydWU7IC8vIGZvcmNlIGJvb2xlYW4gdmFsdWUgKGZyb20gdHJ1dGh5L2ZhbHNleSByZXR1cm4gdmFsdWUpXG5cbiAgICBpZiAoaXNTcHJlYWRDaGFuZ2VkKGZpcnN0VmlzaWJsZUl0ZW0sIGlzU3ludGhldGljU3ByZWFkKSkge1xuICAgICAgX3NwcmVhZC5zZXRTeW50aGV0aWNTcHJlYWQoaXNTeW50aGV0aWNTcHJlYWQpO1xuICAgICAgdmFyIHBhZ2luYXRpb25SZXF1ZXN0ID0gbmV3IFBhZ2VPcGVuUmVxdWVzdChmaXJzdFZpc2libGVJdGVtLCBzZWxmKTtcbiAgICAgIHNlbGYub3BlblBhZ2UocGFnaW5hdGlvblJlcXVlc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNpemVCb29rKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBpc1NwcmVhZENoYW5nZWQoZmlyc3RWaXNpYmxlSXRlbSwgaXNTeW50aGV0aWNTcHJlYWQpIHtcblxuICAgIHZhciB0bXBTcHJlYWQgPSBuZXcgU3ByZWFkKF9zcGluZSwgaXNTeW50aGV0aWNTcHJlYWQpO1xuICAgIHRtcFNwcmVhZC5vcGVuSXRlbShmaXJzdFZpc2libGVJdGVtKTtcblxuICAgIHJldHVybiBfc3ByZWFkLmxlZnRJdGVtICE9IHRtcFNwcmVhZC5sZWZ0SXRlbSB8fCBfc3ByZWFkLnJpZ2h0SXRlbSAhPSB0bXBTcHJlYWQucmlnaHRJdGVtIHx8IF9zcHJlYWQuY2VudGVySXRlbSAhPSB0bXBTcHJlYWQuY2VudGVySXRlbTtcbiAgfVxuXG4gIHRoaXMuZ2V0Vmlld1NjYWxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9jdXJyZW50U2NhbGU7XG4gIH07XG5cbiAgZnVuY3Rpb24gaXNDb250ZW50UmVuZGVyZWQoKSB7XG5cbiAgICBpZiAoIV9jb250ZW50TWV0YVNpemUgfHwgIV9ib29rTWFyZ2lucykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB2aWV3cG9ydFdpZHRoID0gXyR2aWV3cG9ydC53aWR0aCgpO1xuICAgIHZhciB2aWV3cG9ydEhlaWdodCA9IF8kdmlld3BvcnQuaGVpZ2h0KCk7XG5cbiAgICByZXR1cm4gdmlld3BvcnRXaWR0aCAmJiB2aWV3cG9ydEhlaWdodDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZUJvb2sodmlld3BvcnRJc1Jlc2l6aW5nKSB7XG5cbiAgICB1cGRhdGVQYWdlU3dpdGNoRGlyKDAsIGZhbHNlKTtcblxuICAgIGlmICghaXNDb250ZW50UmVuZGVyZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2aWV3cG9ydFdpZHRoID0gXyR2aWV3cG9ydC53aWR0aCgpO1xuICAgIHZhciB2aWV3cG9ydEhlaWdodCA9IF8kdmlld3BvcnQuaGVpZ2h0KCk7XG5cbiAgICB2YXIgbGVmdFBhZ2VNYXJnaW5zID0gX2xlZnRQYWdlVmlldy5pc0Rpc3BsYXlpbmcoKSA/IE1hcmdpbnMuZnJvbUVsZW1lbnQoX2xlZnRQYWdlVmlldy5lbGVtZW50KCkpIDogTWFyZ2lucy5lbXB0eSgpO1xuICAgIHZhciByaWdodFBhZ2VNYXJnaW5zID0gX3JpZ2h0UGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkgPyBNYXJnaW5zLmZyb21FbGVtZW50KF9yaWdodFBhZ2VWaWV3LmVsZW1lbnQoKSkgOiBNYXJnaW5zLmVtcHR5KCk7XG4gICAgdmFyIGNlbnRlclBhZ2VNYXJnaW5zID0gX2NlbnRlclBhZ2VWaWV3LmlzRGlzcGxheWluZygpID8gTWFyZ2lucy5mcm9tRWxlbWVudChfY2VudGVyUGFnZVZpZXcuZWxlbWVudCgpKSA6IE1hcmdpbnMuZW1wdHkoKTtcblxuICAgIHZhciBwYWdlTWFyZ2lucyA9IGdldE1heFBhZ2VNYXJnaW5zKGxlZnRQYWdlTWFyZ2lucywgcmlnaHRQYWdlTWFyZ2lucywgY2VudGVyUGFnZU1hcmdpbnMpO1xuXG4gICAgdmFyIHBvdGVudGlhbFRhcmdldEVsZW1lbnRTaXplID0ge1xuICAgICAgd2lkdGg6IHZpZXdwb3J0V2lkdGggLSBfYm9va01hcmdpbnMud2lkdGgoKSxcbiAgICAgIGhlaWdodDogdmlld3BvcnRIZWlnaHQgLSBfYm9va01hcmdpbnMuaGVpZ2h0KClcbiAgICB9O1xuXG4gICAgdmFyIHBvdGVudGlhbENvbnRlbnRTaXplID0ge1xuICAgICAgd2lkdGg6IHBvdGVudGlhbFRhcmdldEVsZW1lbnRTaXplLndpZHRoIC0gcGFnZU1hcmdpbnMud2lkdGgoKSxcbiAgICAgIGhlaWdodDogcG90ZW50aWFsVGFyZ2V0RWxlbWVudFNpemUuaGVpZ2h0IC0gcGFnZU1hcmdpbnMuaGVpZ2h0KClcbiAgICB9O1xuXG4gICAgaWYgKHBvdGVudGlhbFRhcmdldEVsZW1lbnRTaXplLndpZHRoIDw9IDAgfHwgcG90ZW50aWFsVGFyZ2V0RWxlbWVudFNpemUuaGVpZ2h0IDw9IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaG9yU2NhbGUgPSBwb3RlbnRpYWxDb250ZW50U2l6ZS53aWR0aCAvIF9jb250ZW50TWV0YVNpemUud2lkdGg7XG4gICAgdmFyIHZlclNjYWxlID0gcG90ZW50aWFsQ29udGVudFNpemUuaGVpZ2h0IC8gX2NvbnRlbnRNZXRhU2l6ZS5oZWlnaHQ7XG5cbiAgICBfJHZpZXdwb3J0LmNzcyhcIm92ZXJmbG93XCIsIFwiYXV0b1wiKTtcblxuICAgIHZhciBzY2FsZTtcbiAgICBpZiAoX3pvb20uc3R5bGUgPT0gJ2ZpdC13aWR0aCcpIHtcbiAgICAgIHNjYWxlID0gaG9yU2NhbGU7XG4gICAgfSBlbHNlIGlmIChfem9vbS5zdHlsZSA9PSAnZml0LWhlaWdodCcpIHtcbiAgICAgIHNjYWxlID0gdmVyU2NhbGU7XG4gICAgfSBlbHNlIGlmIChfem9vbS5zdHlsZSA9PSAndXNlcicpIHtcbiAgICAgIHNjYWxlID0gX3pvb20uc2NhbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlID0gTWF0aC5taW4oaG9yU2NhbGUsIHZlclNjYWxlKTtcblxuICAgICAgLy8gbm8gbmVlZCBmb3IgcGFuIGR1cmluZyBcInZpZXdwb3J0IGZpdFwiIHpvb21cbiAgICAgIF8kdmlld3BvcnQuY3NzKFwib3ZlcmZsb3dcIiwgXCJoaWRkZW5cIik7XG4gICAgfVxuXG4gICAgX2N1cnJlbnRTY2FsZSA9IHNjYWxlO1xuXG4gICAgdmFyIGNvbnRlbnRTaXplID0ge1xuICAgICAgd2lkdGg6IF9jb250ZW50TWV0YVNpemUud2lkdGggKiBzY2FsZSxcbiAgICAgIGhlaWdodDogX2NvbnRlbnRNZXRhU2l6ZS5oZWlnaHQgKiBzY2FsZVxuICAgIH07XG5cbiAgICB2YXIgdGFyZ2V0RWxlbWVudFNpemUgPSB7XG4gICAgICB3aWR0aDogY29udGVudFNpemUud2lkdGggKyBwYWdlTWFyZ2lucy53aWR0aCgpLFxuICAgICAgaGVpZ2h0OiBjb250ZW50U2l6ZS5oZWlnaHQgKyBwYWdlTWFyZ2lucy5oZWlnaHQoKVxuICAgIH07XG5cbiAgICB2YXIgYm9va1NpemUgPSB7XG4gICAgICB3aWR0aDogdGFyZ2V0RWxlbWVudFNpemUud2lkdGggKyBfYm9va01hcmdpbnMud2lkdGgoKSxcbiAgICAgIGhlaWdodDogdGFyZ2V0RWxlbWVudFNpemUuaGVpZ2h0ICsgX2Jvb2tNYXJnaW5zLmhlaWdodCgpXG4gICAgfTtcblxuXG4gICAgdmFyIGJvb2tMZWZ0ID0gTWF0aC5mbG9vcigodmlld3BvcnRXaWR0aCAtIGJvb2tTaXplLndpZHRoKSAvIDIpO1xuICAgIHZhciBib29rVG9wID0gTWF0aC5mbG9vcigodmlld3BvcnRIZWlnaHQgLSBib29rU2l6ZS5oZWlnaHQpIC8gMik7XG5cbiAgICBpZiAoYm9va0xlZnQgPCAwKSBib29rTGVmdCA9IDA7XG4gICAgaWYgKGJvb2tUb3AgPCAwKSBib29rVG9wID0gMDtcblxuICAgIF8kZWwuY3NzKFwibGVmdFwiLCBib29rTGVmdCArIFwicHhcIik7XG4gICAgXyRlbC5jc3MoXCJ0b3BcIiwgYm9va1RvcCArIFwicHhcIik7XG4gICAgXyRlbC5jc3MoXCJ3aWR0aFwiLCB0YXJnZXRFbGVtZW50U2l6ZS53aWR0aCArIFwicHhcIik7XG4gICAgXyRlbC5jc3MoXCJoZWlnaHRcIiwgdGFyZ2V0RWxlbWVudFNpemUuaGVpZ2h0ICsgXCJweFwiKTtcblxuICAgIHZhciBsZWZ0ID0gX2Jvb2tNYXJnaW5zLnBhZGRpbmcubGVmdDtcbiAgICB2YXIgdG9wID0gX2Jvb2tNYXJnaW5zLnBhZGRpbmcudG9wO1xuXG4gICAgdmFyIHRyYW5zRnVuYyA9IHZpZXdwb3J0SXNSZXNpemluZyA/IFwidHJhbnNmb3JtQ29udGVudEltbWVkaWF0ZVwiIDogXCJ0cmFuc2Zvcm1Db250ZW50XCI7XG5cbiAgICBpZiAoX2xlZnRQYWdlVmlldy5pc0Rpc3BsYXlpbmcoKSkge1xuXG4gICAgICBfbGVmdFBhZ2VWaWV3W3RyYW5zRnVuY10oc2NhbGUsIGxlZnQsIHRvcCk7XG4gICAgfVxuXG4gICAgaWYgKF9yaWdodFBhZ2VWaWV3LmlzRGlzcGxheWluZygpKSB7XG5cbiAgICAgIGxlZnQgKz0gX2NvbnRlbnRNZXRhU2l6ZS5zZXBhcmF0b3JQb3NpdGlvbiAqIHNjYWxlO1xuXG4gICAgICBpZiAoX2xlZnRQYWdlVmlldy5pc0Rpc3BsYXlpbmcoKSkge1xuICAgICAgICBsZWZ0ICs9IGxlZnRQYWdlTWFyZ2lucy5sZWZ0O1xuICAgICAgfVxuXG4gICAgICBfcmlnaHRQYWdlVmlld1t0cmFuc0Z1bmNdKHNjYWxlLCBsZWZ0LCB0b3ApO1xuICAgIH1cblxuICAgIGlmIChfY2VudGVyUGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkpIHtcblxuICAgICAgX2NlbnRlclBhZ2VWaWV3W3RyYW5zRnVuY10oc2NhbGUsIGxlZnQsIHRvcCk7XG4gICAgfVxuXG4gICAgc2VsZi50cmlnZ2VyKEV2ZW50cy5GWExfVklFV19SRVNJWkVEKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1heFBhZ2VNYXJnaW5zKGxlZnRQYWdlTWFyZ2lucywgcmlnaHRQYWdlTWFyZ2lucywgY2VudGVyUGFnZU1hcmdpbnMpIHtcblxuICAgIHZhciBzdW1NYXJnaW4gPSB7XG4gICAgICBsZWZ0OiBNYXRoLm1heChsZWZ0UGFnZU1hcmdpbnMubWFyZ2luLmxlZnQsIHJpZ2h0UGFnZU1hcmdpbnMubWFyZ2luLmxlZnQsIGNlbnRlclBhZ2VNYXJnaW5zLm1hcmdpbi5sZWZ0KSxcbiAgICAgIHJpZ2h0OiBNYXRoLm1heChsZWZ0UGFnZU1hcmdpbnMubWFyZ2luLnJpZ2h0LCByaWdodFBhZ2VNYXJnaW5zLm1hcmdpbi5yaWdodCwgY2VudGVyUGFnZU1hcmdpbnMubWFyZ2luLnJpZ2h0KSxcbiAgICAgIHRvcDogTWF0aC5tYXgobGVmdFBhZ2VNYXJnaW5zLm1hcmdpbi50b3AsIHJpZ2h0UGFnZU1hcmdpbnMubWFyZ2luLnRvcCwgY2VudGVyUGFnZU1hcmdpbnMubWFyZ2luLnRvcCksXG4gICAgICBib3R0b206IE1hdGgubWF4KGxlZnRQYWdlTWFyZ2lucy5tYXJnaW4uYm90dG9tLCByaWdodFBhZ2VNYXJnaW5zLm1hcmdpbi5ib3R0b20sIGNlbnRlclBhZ2VNYXJnaW5zLm1hcmdpbi5ib3R0b20pXG4gICAgfTtcblxuICAgIHZhciBzdW1Cb3JkZXIgPSB7XG4gICAgICBsZWZ0OiBNYXRoLm1heChsZWZ0UGFnZU1hcmdpbnMuYm9yZGVyLmxlZnQsIHJpZ2h0UGFnZU1hcmdpbnMuYm9yZGVyLmxlZnQsIGNlbnRlclBhZ2VNYXJnaW5zLmJvcmRlci5sZWZ0KSxcbiAgICAgIHJpZ2h0OiBNYXRoLm1heChsZWZ0UGFnZU1hcmdpbnMuYm9yZGVyLnJpZ2h0LCByaWdodFBhZ2VNYXJnaW5zLmJvcmRlci5yaWdodCwgY2VudGVyUGFnZU1hcmdpbnMuYm9yZGVyLnJpZ2h0KSxcbiAgICAgIHRvcDogTWF0aC5tYXgobGVmdFBhZ2VNYXJnaW5zLmJvcmRlci50b3AsIHJpZ2h0UGFnZU1hcmdpbnMuYm9yZGVyLnRvcCwgY2VudGVyUGFnZU1hcmdpbnMuYm9yZGVyLnRvcCksXG4gICAgICBib3R0b206IE1hdGgubWF4KGxlZnRQYWdlTWFyZ2lucy5ib3JkZXIuYm90dG9tLCByaWdodFBhZ2VNYXJnaW5zLmJvcmRlci5ib3R0b20sIGNlbnRlclBhZ2VNYXJnaW5zLmJvcmRlci5ib3R0b20pXG4gICAgfTtcblxuICAgIHZhciBzdW1QQWRkaW5nID0ge1xuICAgICAgbGVmdDogTWF0aC5tYXgobGVmdFBhZ2VNYXJnaW5zLnBhZGRpbmcubGVmdCwgcmlnaHRQYWdlTWFyZ2lucy5wYWRkaW5nLmxlZnQsIGNlbnRlclBhZ2VNYXJnaW5zLnBhZGRpbmcubGVmdCksXG4gICAgICByaWdodDogTWF0aC5tYXgobGVmdFBhZ2VNYXJnaW5zLnBhZGRpbmcucmlnaHQsIHJpZ2h0UGFnZU1hcmdpbnMucGFkZGluZy5yaWdodCwgY2VudGVyUGFnZU1hcmdpbnMucGFkZGluZy5yaWdodCksXG4gICAgICB0b3A6IE1hdGgubWF4KGxlZnRQYWdlTWFyZ2lucy5wYWRkaW5nLnRvcCwgcmlnaHRQYWdlTWFyZ2lucy5wYWRkaW5nLnRvcCwgY2VudGVyUGFnZU1hcmdpbnMucGFkZGluZy50b3ApLFxuICAgICAgYm90dG9tOiBNYXRoLm1heChsZWZ0UGFnZU1hcmdpbnMucGFkZGluZy5ib3R0b20sIHJpZ2h0UGFnZU1hcmdpbnMucGFkZGluZy5ib3R0b20sIGNlbnRlclBhZ2VNYXJnaW5zLnBhZGRpbmcuYm90dG9tKVxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IE1hcmdpbnMoc3VtTWFyZ2luLCBzdW1Cb3JkZXIsIHN1bVBBZGRpbmcpO1xuXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDb250ZW50TWV0YVNpemUoKSB7XG5cbiAgICBfY29udGVudE1ldGFTaXplID0ge307XG5cbiAgICBpZiAoX2NlbnRlclBhZ2VWaWV3LmlzRGlzcGxheWluZygpKSB7XG4gICAgICBfY29udGVudE1ldGFTaXplLndpZHRoID0gX2NlbnRlclBhZ2VWaWV3Lm1ldGFfd2lkdGgoKTtcbiAgICAgIF9jb250ZW50TWV0YVNpemUuaGVpZ2h0ID0gX2NlbnRlclBhZ2VWaWV3Lm1ldGFfaGVpZ2h0KCk7XG4gICAgICBfY29udGVudE1ldGFTaXplLnNlcGFyYXRvclBvc2l0aW9uID0gMDtcbiAgICB9IGVsc2UgaWYgKF9sZWZ0UGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkgJiYgX3JpZ2h0UGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkpIHtcbiAgICAgIGlmIChfbGVmdFBhZ2VWaWV3Lm1ldGFfaGVpZ2h0KCkgPT0gX3JpZ2h0UGFnZVZpZXcubWV0YV9oZWlnaHQoKSkge1xuICAgICAgICBfY29udGVudE1ldGFTaXplLndpZHRoID0gX2xlZnRQYWdlVmlldy5tZXRhX3dpZHRoKCkgKyBfcmlnaHRQYWdlVmlldy5tZXRhX3dpZHRoKCk7XG4gICAgICAgIF9jb250ZW50TWV0YVNpemUuaGVpZ2h0ID0gX2xlZnRQYWdlVmlldy5tZXRhX2hlaWdodCgpO1xuICAgICAgICBfY29udGVudE1ldGFTaXplLnNlcGFyYXRvclBvc2l0aW9uID0gX2xlZnRQYWdlVmlldy5tZXRhX3dpZHRoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL25vcm1hbGl6ZSBieSBoZWlnaHRcbiAgICAgICAgX2NvbnRlbnRNZXRhU2l6ZS53aWR0aCA9IF9sZWZ0UGFnZVZpZXcubWV0YV93aWR0aCgpICsgX3JpZ2h0UGFnZVZpZXcubWV0YV93aWR0aCgpICogKF9sZWZ0UGFnZVZpZXcubWV0YV9oZWlnaHQoKSAvIF9yaWdodFBhZ2VWaWV3Lm1ldGFfaGVpZ2h0KCkpO1xuICAgICAgICBfY29udGVudE1ldGFTaXplLmhlaWdodCA9IF9sZWZ0UGFnZVZpZXcubWV0YV9oZWlnaHQoKTtcbiAgICAgICAgX2NvbnRlbnRNZXRhU2l6ZS5zZXBhcmF0b3JQb3NpdGlvbiA9IF9sZWZ0UGFnZVZpZXcubWV0YV93aWR0aCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX2xlZnRQYWdlVmlldy5pc0Rpc3BsYXlpbmcoKSkge1xuICAgICAgX2NvbnRlbnRNZXRhU2l6ZS53aWR0aCA9IF9sZWZ0UGFnZVZpZXcubWV0YV93aWR0aCgpICogMjtcbiAgICAgIF9jb250ZW50TWV0YVNpemUuaGVpZ2h0ID0gX2xlZnRQYWdlVmlldy5tZXRhX2hlaWdodCgpO1xuICAgICAgX2NvbnRlbnRNZXRhU2l6ZS5zZXBhcmF0b3JQb3NpdGlvbiA9IF9sZWZ0UGFnZVZpZXcubWV0YV93aWR0aCgpO1xuICAgIH0gZWxzZSBpZiAoX3JpZ2h0UGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkpIHtcbiAgICAgIF9jb250ZW50TWV0YVNpemUud2lkdGggPSBfcmlnaHRQYWdlVmlldy5tZXRhX3dpZHRoKCkgKiAyO1xuICAgICAgX2NvbnRlbnRNZXRhU2l6ZS5oZWlnaHQgPSBfcmlnaHRQYWdlVmlldy5tZXRhX2hlaWdodCgpO1xuICAgICAgX2NvbnRlbnRNZXRhU2l6ZS5zZXBhcmF0b3JQb3NpdGlvbiA9IF9yaWdodFBhZ2VWaWV3Lm1ldGFfd2lkdGgoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2NvbnRlbnRNZXRhU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUJvb2tNYXJnaW5zKCkge1xuICAgIF9ib29rTWFyZ2lucyA9IE1hcmdpbnMuZnJvbUVsZW1lbnQoXyRlbCk7XG4gIH1cblxuICAvLyBkaXI6IDAgPT4gbmV3IG9yIHNhbWUgcGFnZSwgMSA9PiBwcmV2aW91cywgMiA9PiBuZXh0XG4gIHRoaXMub3BlblBhZ2UgPSBmdW5jdGlvbihwYWdpbmF0aW9uUmVxdWVzdCwgZGlyKSB7XG5cbiAgICBpZiAoIXBhZ2luYXRpb25SZXF1ZXN0LnNwaW5lSXRlbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsZWZ0SXRlbSA9IF9zcHJlYWQubGVmdEl0ZW07XG4gICAgdmFyIHJpZ2h0SXRlbSA9IF9zcHJlYWQucmlnaHRJdGVtO1xuICAgIHZhciBjZW50ZXJJdGVtID0gX3NwcmVhZC5jZW50ZXJJdGVtO1xuXG4gICAgdmFyIGlzU3ludGhldGljU3ByZWFkID0gZGVkdWNlU3ludGhldGljU3ByZWFkKF8kdmlld3BvcnQsIHBhZ2luYXRpb25SZXF1ZXN0LnNwaW5lSXRlbSwgX3ZpZXdTZXR0aW5ncykgPT0gdHJ1ZTsgLy8gZm9yY2UgYm9vbGVhbiB2YWx1ZSAoZnJvbSB0cnV0aHkvZmFsc2V5IHJldHVybiB2YWx1ZSlcbiAgICBfc3ByZWFkLnNldFN5bnRoZXRpY1NwcmVhZChpc1N5bnRoZXRpY1NwcmVhZCk7XG4gICAgX3NwcmVhZC5vcGVuSXRlbShwYWdpbmF0aW9uUmVxdWVzdC5zcGluZUl0ZW0pO1xuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBsZWZ0SXRlbSAhPT0gX3NwcmVhZC5sZWZ0SXRlbSB8fCByaWdodEl0ZW0gIT09IF9zcHJlYWQucmlnaHRJdGVtIHx8IGNlbnRlckl0ZW0gIT09IF9zcHJlYWQuY2VudGVySXRlbTtcblxuICAgIGlmIChkaXIgPT09IG51bGwgfHwgdHlwZW9mIGRpciA9PT0gXCJ1bmRlZmluZWRcIikgZGlyID0gMDtcblxuICAgIHVwZGF0ZVBhZ2VTd2l0Y2hEaXIoZGlyID09PSAwID8gMCA6IChfc3ByZWFkLnNwaW5lLmlzUmlnaHRUb0xlZnQoKSA/IChkaXIgPT09IDEgPyAyIDogMSkgOiBkaXIpLCBoYXNDaGFuZ2VkKTtcblxuICAgIHJlZHJhdyhwYWdpbmF0aW9uUmVxdWVzdC5pbml0aWF0b3IsIHBhZ2luYXRpb25SZXF1ZXN0KTtcbiAgfTtcblxuXG4gIHRoaXMub3BlblBhZ2VQcmV2ID0gZnVuY3Rpb24oaW5pdGlhdG9yKSB7XG5cbiAgICBfc3ByZWFkLm9wZW5QcmV2KCk7XG5cbiAgICB1cGRhdGVQYWdlU3dpdGNoRGlyKF9zcHJlYWQuc3BpbmUuaXNSaWdodFRvTGVmdCgpID8gMiA6IDEsIHRydWUpO1xuXG4gICAgcmVkcmF3KGluaXRpYXRvciwgdW5kZWZpbmVkKTtcbiAgfTtcblxuICB0aGlzLm9wZW5QYWdlTmV4dCA9IGZ1bmN0aW9uKGluaXRpYXRvcikge1xuXG4gICAgX3NwcmVhZC5vcGVuTmV4dCgpO1xuXG4gICAgdXBkYXRlUGFnZVN3aXRjaERpcihfc3ByZWFkLnNwaW5lLmlzUmlnaHRUb0xlZnQoKSA/IDEgOiAyLCB0cnVlKTtcblxuICAgIHJlZHJhdyhpbml0aWF0b3IsIHVuZGVmaW5lZCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdXBkYXRlUGFnZVZpZXdGb3JJdGVtKHBhZ2VWaWV3LCBpdGVtLCBjb250ZXh0KSB7XG5cbiAgICB2YXIgZGZkID0gJC5EZWZlcnJlZCgpO1xuXG4gICAgaWYgKCFpdGVtKSB7XG4gICAgICBpZiAocGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkpIHtcbiAgICAgICAgcGFnZVZpZXcucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGRmZC5yZXNvbHZlKCk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgaWYgKCFwYWdlVmlldy5pc0Rpc3BsYXlpbmcoKSkge1xuXG4gICAgICAgIF8kZWwuYXBwZW5kKHBhZ2VWaWV3LnJlbmRlcigpLmVsZW1lbnQoKSk7XG5cbiAgICAgICAgY29udGV4dC5pc0VsZW1lbnRBZGRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHBhZ2VWaWV3LmxvYWRTcGluZUl0ZW0oaXRlbSwgZnVuY3Rpb24oc3VjY2VzcywgJGlmcmFtZSwgc3BpbmVJdGVtLCBpc05ld0NvbnRlbnREb2N1bWVudExvYWRlZCwgY29udGV4dCkge1xuXG4gICAgICAgIGlmIChzdWNjZXNzICYmIGlzTmV3Q29udGVudERvY3VtZW50TG9hZGVkKSB7XG5cbiAgICAgICAgICAvL2lmIHdlIGEgcmUgbG9hZGluZyBmaXhlZCB2aWV3IG1ldGEgc2l6ZSBzaG91bGQgYmUgZGVmaW5lZFxuICAgICAgICAgIGlmICghcGFnZVZpZXcubWV0YV9oZWlnaHQoKSB8fCAhcGFnZVZpZXcubWV0YV93aWR0aCgpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBkb2N1bWVudCBcIiArIHNwaW5lSXRlbS5ocmVmICsgXCI6IHZpZXdwb3J0IGlzIG5vdCBzcGVjaWZpZWQhXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYudHJpZ2dlcihFdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FERUQsICRpZnJhbWUsIHNwaW5lSXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZmQucmVzb2x2ZSgpO1xuXG4gICAgICB9LCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGZkLnByb21pc2UoKTtcbiAgfVxuXG4gIHRoaXMuZ2V0UGFnaW5hdGlvbkluZm8gPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBwYWdpbmF0aW9uSW5mbyA9IG5ldyBDdXJyZW50UGFnZXNJbmZvKF9zcGluZSwgdHJ1ZSk7XG5cbiAgICB2YXIgc3ByZWFkSXRlbXMgPSBbX3NwcmVhZC5sZWZ0SXRlbSwgX3NwcmVhZC5yaWdodEl0ZW0sIF9zcHJlYWQuY2VudGVySXRlbV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwcmVhZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgIHZhciBzcHJlYWRJdGVtID0gc3ByZWFkSXRlbXNbaV07XG5cbiAgICAgIGlmIChzcHJlYWRJdGVtKSB7XG4gICAgICAgIHBhZ2luYXRpb25JbmZvLmFkZE9wZW5QYWdlKDAsIDEsIHNwcmVhZEl0ZW0uaWRyZWYsIHNwcmVhZEl0ZW0uaW5kZXgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYWdpbmF0aW9uSW5mbztcbiAgfTtcblxuICB0aGlzLmJvb2ttYXJrQ3VycmVudFBhZ2UgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciB2aWV3cyA9IGdldERpc3BsYXlpbmdWaWV3cygpO1xuXG4gICAgaWYgKHZpZXdzLmxlbmd0aCA+IDApIHtcblxuICAgICAgdmFyIGlkcmVmID0gdmlld3NbMF0uY3VycmVudFNwaW5lSXRlbSgpLmlkcmVmO1xuICAgICAgdmFyIGNmaSA9IHZpZXdzWzBdLmdldEZpcnN0VmlzaWJsZUVsZW1lbnRDZmkoKTtcblxuICAgICAgaWYgKGNmaSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2ZpID0gXCJcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBCb29rbWFya0RhdGEoaWRyZWYsIGNmaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBCb29rbWFya0RhdGEoXCJcIiwgXCJcIik7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0RGlzcGxheWluZ1ZpZXdzKCkge1xuXG4gICAgdmFyIHZpZXdzVG9DaGVjayA9IFtdO1xuXG4gICAgaWYgKF9zcGluZS5pc0xlZnRUb1JpZ2h0KCkpIHtcbiAgICAgIHZpZXdzVG9DaGVjayA9IFtfbGVmdFBhZ2VWaWV3LCBfY2VudGVyUGFnZVZpZXcsIF9yaWdodFBhZ2VWaWV3XTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmlld3NUb0NoZWNrID0gW19yaWdodFBhZ2VWaWV3LCBfY2VudGVyUGFnZVZpZXcsIF9sZWZ0UGFnZVZpZXddO1xuICAgIH1cblxuICAgIHZhciB2aWV3cyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gdmlld3NUb0NoZWNrLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGlmICh2aWV3c1RvQ2hlY2tbaV0uaXNEaXNwbGF5aW5nKCkpIHtcbiAgICAgICAgdmlld3MucHVzaCh2aWV3c1RvQ2hlY2tbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2aWV3cztcbiAgfVxuXG4gIHRoaXMuZ2V0TG9hZGVkU3BpbmVJdGVtcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIF9zcHJlYWQudmFsaWRJdGVtcygpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgc2VsZWN0b3IpIHtcblxuICAgIHZhciB2aWV3cyA9IGdldERpc3BsYXlpbmdWaWV3cygpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gdmlld3MubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuXG4gICAgICB2YXIgdmlldyA9IHZpZXdzW2ldO1xuICAgICAgaWYgKHZpZXcuY3VycmVudFNwaW5lSXRlbSgpID09IHNwaW5lSXRlbSkge1xuICAgICAgICByZXR1cm4gdmlldy5nZXRFbGVtZW50KHNwaW5lSXRlbSwgc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnRCeUlkID0gZnVuY3Rpb24oc3BpbmVJdGVtLCBpZCkge1xuXG4gICAgdmFyIHZpZXdzID0gZ2V0RGlzcGxheWluZ1ZpZXdzKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgY291bnQgPSB2aWV3cy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG5cbiAgICAgIHZhciB2aWV3ID0gdmlld3NbaV07XG4gICAgICBpZiAodmlldy5jdXJyZW50U3BpbmVJdGVtKCkgPT0gc3BpbmVJdGVtKSB7XG4gICAgICAgIHJldHVybiB2aWV3LmdldEVsZW1lbnRCeUlkKHNwaW5lSXRlbSwgaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnRCeUNmaSA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgY2ZpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgIHZhciB2aWV3cyA9IGdldERpc3BsYXlpbmdWaWV3cygpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gdmlld3MubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuXG4gICAgICB2YXIgdmlldyA9IHZpZXdzW2ldO1xuICAgICAgaWYgKHZpZXcuY3VycmVudFNwaW5lSXRlbSgpID09IHNwaW5lSXRlbSkge1xuICAgICAgICByZXR1cm4gdmlldy5nZXRFbGVtZW50QnlDZmkoc3BpbmVJdGVtLCBjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS5lcnJvcihcInNwaW5lIGl0ZW0gaXMgbm90IGxvYWRlZFwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHRoaXMuZ2V0Rmlyc3RWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHZpZXdzID0gZ2V0RGlzcGxheWluZ1ZpZXdzKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgY291bnQgPSB2aWV3cy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICB2YXIgZWwgPSB2aWV3c1tpXS5nZXRGaXJzdFZpc2libGVNZWRpYU92ZXJsYXlFbGVtZW50KCk7XG4gICAgICBpZiAoZWwpIHJldHVybiBlbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHRoaXMuaW5zdXJlRWxlbWVudFZpc2liaWxpdHkgPSBmdW5jdGlvbihzcGluZUl0ZW1JZCwgZWxlbWVudCwgaW5pdGlhdG9yKSB7XG5cbiAgICAvL1RPRE86IGR1cmluZyB6b29tK3BhbiwgcGxheWluZyBlbGVtZW50IG1pZ2h0IG5vdCBhY3R1YWx5IGJlIHZpc2libGVcblxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRml4ZWRWaWV3IiwidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciBVUkkgPSByZXF1aXJlKCdVUklqcycpXG5cbmZ1bmN0aW9uIElGcmFtZUxvYWRlcigpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBldmVudExpc3RlbmVycyA9IHt9O1xuXG5cbiAgdGhpcy5hZGRJRnJhbWVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaywgY29udGV4dCkge1xuXG4gICAgaWYgKGV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICBldmVudExpc3RlbmVyc1tldmVudE5hbWVdID0gW107XG4gICAgfVxuXG4gICAgZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXS5wdXNoKHtcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgIGNvbnRleHQ6IGNvbnRleHRcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnVwZGF0ZUlmcmFtZUV2ZW50cyA9IGZ1bmN0aW9uKGlmcmFtZSkge1xuXG4gICAgXy5lYWNoKGV2ZW50TGlzdGVuZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgY291bnQgPSB2YWx1ZS5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICQoaWZyYW1lLmNvbnRlbnRXaW5kb3cpLm9mZihrZXkpO1xuICAgICAgICAkKGlmcmFtZS5jb250ZW50V2luZG93KS5vbihrZXksIHZhbHVlW2ldLmNhbGxiYWNrLCB2YWx1ZVtpXS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmxvYWRJZnJhbWUgPSBmdW5jdGlvbihpZnJhbWUsIHNyYywgY2FsbGJhY2ssIGNvbnRleHQsIGF0dGFjaGVkRGF0YSkge1xuXG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZShcImRhdGEtYmFzZVVyaVwiLCBpZnJhbWUuYmFzZVVSSSk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZShcImRhdGEtc3JjXCIsIHNyYyk7XG5cbiAgICB2YXIgbG9hZGVkRG9jdW1lbnRVcmkgPSBuZXcgVVJJKHNyYykuYWJzb2x1dGVUbyhpZnJhbWUuYmFzZVVSSSkudG9TdHJpbmcoKTtcblxuICAgIHNlbGYuX2xvYWRJZnJhbWVXaXRoVXJpKGlmcmFtZSwgYXR0YWNoZWREYXRhLCBsb2FkZWREb2N1bWVudFVyaSwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZG9jID0gaWZyYW1lLmNvbnRlbnREb2N1bWVudCB8fCBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgICAgICQoJ3N2ZycsIGRvYykubG9hZChmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2xvYWRlZCcpO1xuICAgICAgfSk7XG4gICAgICBjYWxsYmFjay5jYWxsKGNvbnRleHQsIHRydWUsIGF0dGFjaGVkRGF0YSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5fbG9hZElmcmFtZVdpdGhVcmkgPSBmdW5jdGlvbihpZnJhbWUsIGF0dGFjaGVkRGF0YSwgY29udGVudFVyaSwgY2FsbGJhY2spIHtcblxuICAgIGlmcmFtZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgc2VsZi51cGRhdGVJZnJhbWVFdmVudHMoaWZyYW1lKTtcblxuICAgICAgdmFyIG1hdGhKYXggPSBpZnJhbWUuY29udGVudFdpbmRvdy5NYXRoSmF4O1xuICAgICAgaWYgKG1hdGhKYXgpIHtcbiAgICAgICAgLy8gSWYgTWF0aEpheCBpcyBiZWluZyB1c2VkLCBkZWxheSB0aGUgY2FsbGJhY2sgdW50aWwgaXQgaGFzIGNvbXBsZXRlZCByZW5kZXJpbmdcbiAgICAgICAgdmFyIG1hdGhKYXhDYWxsYmFjayA9IF8ub25jZShjYWxsYmFjayk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbWF0aEpheC5IdWIuUXVldWUobWF0aEpheENhbGxiYWNrKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGhKYXggZmFpbCFcIik7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPciBhdCBhbiA4IHNlY29uZCB0aW1lb3V0LCB3aGljaCBldmVyIGNvbWVzIGZpcnN0XG4gICAgICAgIC8vd2luZG93LnNldFRpbWVvdXQobWF0aEpheENhbGxiYWNrLCA4MDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgY29udGVudFVyaSk7XG5cbiAgfTtcblxuXG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJRnJhbWVMb2FkZXIiLCIvLyBUT0RPIFJlbW92ZSB3aGVuIGFsbCB1bmRlcnNjb3JlIGRlcHMgYXJlIGdvbmVcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG5cbnZhciBWaWV3cyA9IHtcbiAgSUZyYW1lTG9hZGVyOiByZXF1aXJlKCcuL2lmcmFtZS1sb2FkZXInKSxcbiAgUmVhZGVyVmlldzogcmVxdWlyZSgnLi9yZWFkZXItdmlldycpXG59XG5cbnZhciBWaWV3c0NvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJylcblxuXy5leHRlbmQoVmlld3MsIFZpZXdzQ29uc3RhbnRzKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdzIiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBJbnRlcnByZXRlciA9IHJlcXVpcmUoJ2VwdWItY2ZpJykuSW50ZXJwcmV0ZXJcbnZhciBVUkkgPSByZXF1aXJlKCdVUklqcycpXG5cbi8qKlxuICpcbiAqIEBwYXJhbSByZWFkZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBJbnRlcm5hbExpbmtzU3VwcG9ydChyZWFkZXIpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gc3BsaXRDZmkoZnVsbENmaSkge1xuXG4gICAgdmFyIHN0YXJ0SXggPSBmdWxsQ2ZpLmluZGV4T2YoXCIoXCIpO1xuICAgIHZhciBidW5nSXggPSBmdWxsQ2ZpLmluZGV4T2YoXCIhXCIpO1xuICAgIHZhciBlbmRJeCA9IGZ1bGxDZmkuaW5kZXhPZihcIilcIik7XG5cbiAgICBpZiAoYnVuZ0l4ID09IC0xKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChlbmRJeCA9PSAtMSkge1xuICAgICAgZW5kSXggPSBmdWxsQ2ZpLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICBzcGluZUl0ZW1DZmk6IGZ1bGxDZmkuc3Vic3RyaW5nKHN0YXJ0SXggKyAxLCBidW5nSXgpLFxuICAgICAgZWxlbWVudENmaTogZnVsbENmaS5zdWJzdHJpbmcoYnVuZ0l4ICsgMSwgZW5kSXgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QWJzb2x1dGVVcmlSZWxhdGl2ZVRvU3BpbmVJdGVtKGhyZWZVcmksIHNwaW5lSXRlbSkge1xuXG4gICAgdmFyIGZ1bGxQYXRoID0gcmVhZGVyLnBhY2thZ2UoKS5yZXNvbHZlUmVsYXRpdmVVcmwoc3BpbmVJdGVtLmhyZWYpO1xuXG4gICAgdmFyIGFic1VybCA9IGhyZWZVcmkuYWJzb2x1dGVUbyhmdWxsUGF0aCk7XG5cbiAgICByZXR1cm4gYWJzVXJsO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0RlZXBMaW5rKGhyZWZVcmksIHNwaW5lSXRlbSkge1xuXG4gICAgdmFyIGFic29sdXRlT3BmVXJpID0gZ2V0QWJzb2x1dGVVcmlSZWxhdGl2ZVRvU3BpbmVJdGVtKGhyZWZVcmksIHNwaW5lSXRlbSk7XG5cbiAgICBpZiAoIWFic29sdXRlT3BmVXJpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHJlc29sdmUgXCIgKyBocmVmVXJpLmhyZWYoKSlcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZnVsbENmaSA9IGhyZWZVcmkuZnJhZ21lbnQoKTtcblxuICAgIHZhciBhYnNQYXRoID0gYWJzb2x1dGVPcGZVcmkudG9TdHJpbmcoKTtcblxuICAgIGFic1BhdGggPSBSZW1vdmVGcm9tU3RyaW5nKGFic1BhdGgsIFwiI1wiICsgZnVsbENmaSk7XG5cbiAgICByZWFkT3BmRmlsZShhYnNQYXRoLCBmdW5jdGlvbihvcGZUZXh0KSB7XG5cbiAgICAgIGlmICghb3BmVGV4dCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJzZXIgPSBuZXcgd2luZG93LkRPTVBhcnNlcjtcbiAgICAgIHZhciBwYWNrYWdlRG9tID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhvcGZUZXh0LCAndGV4dC94bWwnKTtcbiAgICAgIHZhciBjZmkgPSBzcGxpdENmaShmdWxsQ2ZpKTtcblxuICAgICAgaWYgKCFjZmkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHNwbGl0IGNmaTpcIiArIGZ1bGxDZmkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZW50RG9jUmVmID0gSW50ZXJwcmV0ZXIuZ2V0Q29udGVudERvY0hyZWYoXCJlcHViY2ZpKFwiICsgY2ZpLnNwaW5lSXRlbUNmaSArIFwiKVwiLCBwYWNrYWdlRG9tKTtcblxuICAgICAgaWYgKGNvbnRlbnREb2NSZWYpIHtcblxuICAgICAgICB2YXIgbmV3U3BpbmVJdGVtID0gcmVhZGVyLnNwaW5lKCkuZ2V0SXRlbUJ5SHJlZihjb250ZW50RG9jUmVmKTtcbiAgICAgICAgaWYgKG5ld1NwaW5lSXRlbSkge1xuXG4gICAgICAgICAgcmVhZGVyLm9wZW5TcGluZUl0ZW1FbGVtZW50Q2ZpKG5ld1NwaW5lSXRlbS5pZHJlZiwgY2ZpLmVsZW1lbnRDZmksIHNlbGYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBmaW5kIHNwaW5lSXRlbSB3aXRoIGhyZWY9XCIgKyBjb250ZW50RG9jUmVmKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gZmluZCBkb2N1bWVudCByZWYgZnJvbSBcIiArIGZ1bGxDZmkgKyBcIiBjZmlcIik7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZE9wZkZpbGUocGF0aCwgY2FsbGJhY2spIHtcblxuICAgICQuYWpheCh7XG4gICAgICAvLyBlbmNvZGluZzogXCJVVEYtOFwiLFxuICAgICAgLy8gbWltZVR5cGU6IFwidGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOFwiLFxuICAgICAgLy8gYmVmb3JlU2VuZDogZnVuY3Rpb24oIHhociApIHtcbiAgICAgIC8vICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9VVRGLThcIik7XG4gICAgICAvLyB9LFxuICAgICAgaXNMb2NhbDogcGF0aC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgIHVybDogcGF0aCxcbiAgICAgIGRhdGFUeXBlOiAndGV4dCcsXG4gICAgICBhc3luYzogdHJ1ZSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIHN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igd2hlbiBBSkFYIGZldGNoaW5nICcgKyBwYXRoKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihzdGF0dXMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yVGhyb3duKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vY2hlY2tzIGlmIGhyZWYgaW5jbHVkZXMgcGF0aCB0byBvcGYgZmlsZSBhbmQgZnVsbCBjZmlcbiAgZnVuY3Rpb24gaXNEZWVwTGlrSHJlZih1cmkpIHtcblxuICAgIHZhciBmaWxlTmFtZSA9IHVyaS5maWxlbmFtZSgpO1xuICAgIHJldHVybiBmaWxlTmFtZSAmJiBFbmRzV2l0aChmaWxlTmFtZSwgXCIub3BmXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0xpbmtXaXRoSGFzaChocmVmVXJpLCBzcGluZUl0ZW0pIHtcblxuICAgIHZhciBmaWxlTmFtZSA9IGhyZWZVcmkuZmlsZW5hbWUoKTtcblxuICAgIHZhciBpZHJlZjtcblxuICAgIC8vcmVmZXJlbmNlIHRvIGFub3RoZXIgZmlsZVxuICAgIGlmIChmaWxlTmFtZSkge1xuICAgICAgdmFyIG5vcm1hbGl6ZWRVcmkgPSBuZXcgVVJJKGhyZWZVcmksIHNwaW5lSXRlbS5ocmVmKTtcblxuICAgICAgdmFyIHBhdGhuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KG5vcm1hbGl6ZWRVcmkucGF0aG5hbWUoKSk7XG5cbiAgICAgIHZhciBuZXdTcGluZUl0ZW0gPSByZWFkZXIuc3BpbmUoKS5nZXRJdGVtQnlIcmVmKHBhdGhuYW1lKTtcblxuICAgICAgaWYgKCFuZXdTcGluZUl0ZW0pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcInNwaW5lIGl0ZW0gd2l0aCBocmVmPVwiICsgcGF0aG5hbWUgKyBcIiBub3QgZm91bmRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWRyZWYgPSBuZXdTcGluZUl0ZW0uaWRyZWY7XG4gICAgfSBlbHNlIHsgLy9odXNoIGluIHRoZSBzYW1lIGZpbGVcbiAgICAgIGlkcmVmID0gc3BpbmVJdGVtLmlkcmVmO1xuICAgIH1cblxuICAgIHZhciBoYXNoRnJhZyA9IGhyZWZVcmkuZnJhZ21lbnQoKTtcblxuICAgIHJlYWRlci5vcGVuU3BpbmVJdGVtRWxlbWVudElkKGlkcmVmLCBoYXNoRnJhZywgc2VsZik7XG5cbiAgfVxuXG4gIHRoaXMucHJvY2Vzc0xpbmtFbGVtZW50cyA9IGZ1bmN0aW9uKCRpZnJhbWUsIHNwaW5lSXRlbSkge1xuXG4gICAgdmFyIGVwdWJDb250ZW50RG9jdW1lbnQgPSAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcblxuICAgICQoJ2EnLCBlcHViQ29udGVudERvY3VtZW50KS5jbGljayhmdW5jdGlvbihjbGlja0V2ZW50KSB7XG4gICAgICAvLyBDaGVjayBmb3IgYm90aCBocmVmIGFuZCB4bGluazpocmVmIGF0dHJpYnV0ZSBhbmQgZ2V0IHZhbHVlXG4gICAgICB2YXIgaHJlZjtcbiAgICAgIGlmIChjbGlja0V2ZW50LmN1cnJlbnRUYXJnZXQuYXR0cmlidXRlc1tcInhsaW5rOmhyZWZcIl0pIHtcblxuICAgICAgICBocmVmID0gY2xpY2tFdmVudC5jdXJyZW50VGFyZ2V0LmF0dHJpYnV0ZXNbXCJ4bGluazpocmVmXCJdLnZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHJlZiA9IGNsaWNrRXZlbnQuY3VycmVudFRhcmdldC5hdHRyaWJ1dGVzW1wiaHJlZlwiXS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG92ZXJyaWRlQ2xpY2tFdmVudCA9IGZhbHNlO1xuICAgICAgdmFyIGhyZWZVcmkgPSBuZXcgVVJJKGhyZWYpO1xuICAgICAgdmFyIGhyZWZJc1JlbGF0aXZlID0gaHJlZlVyaS5pcygncmVsYXRpdmUnKTtcblxuICAgICAgaWYgKGhyZWZJc1JlbGF0aXZlKSB7XG5cbiAgICAgICAgaWYgKGlzRGVlcExpa0hyZWYoaHJlZlVyaSkpIHtcbiAgICAgICAgICBwcm9jZXNzRGVlcExpbmsoaHJlZlVyaSwgc3BpbmVJdGVtKTtcbiAgICAgICAgICBvdmVycmlkZUNsaWNrRXZlbnQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3NMaW5rV2l0aEhhc2goaHJlZlVyaSwgc3BpbmVJdGVtKTtcbiAgICAgICAgICBvdmVycmlkZUNsaWNrRXZlbnQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0J3MgYW4gYWJzb2x1dGUgVVJMIHRvIGEgcmVtb3RlIHNpdGUgLSBvcGVuIGl0IGluIGEgc2VwYXJhdGUgd2luZG93IG91dHNpZGUgdGhlIHJlYWRlclxuICAgICAgICB3aW5kb3cub3BlbihocmVmLCAnX2JsYW5rJyk7XG4gICAgICAgIG92ZXJyaWRlQ2xpY2tFdmVudCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvdmVycmlkZUNsaWNrRXZlbnQpIHtcbiAgICAgICAgY2xpY2tFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjbGlja0V2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVybmFsTGlua3NTdXBwb3J0IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgRVBVQmNmaSA9IHJlcXVpcmUoJ2VwdWItY2ZpJylcbnZhciBTbWlsSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9tb2RlbHMvc21pbC1pdGVyYXRvcicpO1xudmFyIFJlc29sdmVDb250ZW50UmVmID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZXNvbHZlLWNvbnRlbnQtcmVmJylcblxuXG4vKipcbiAqXG4gKiBAcGFyYW0gbWVkaWFPdmVybGF5XG4gKiBAcGFyYW0gbWVkaWFPdmVybGF5UGxheWVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWVkaWFPdmVybGF5RGF0YUluamVjdG9yKG1lZGlhT3ZlcmxheSwgbWVkaWFPdmVybGF5UGxheWVyKSB7XG5cbiAgdGhpcy5hdHRhY2hNZWRpYU92ZXJsYXlEYXRhID0gZnVuY3Rpb24oJGlmcmFtZSwgc3BpbmVJdGVtLCBtZWRpYU92ZXJsYXlTZXR0aW5ncykge1xuXG4gICAgdmFyIGNvbnRlbnREb2NFbGVtZW50ID0gJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgaWYgKCFzcGluZUl0ZW0ubWVkaWFfb3ZlcmxheV9pZCAmJiBtZWRpYU92ZXJsYXkuc21pbF9tb2RlbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyICRib2R5ID0gJChcImJvZHlcIiwgY29udGVudERvY0VsZW1lbnQpO1xuICAgIGlmICgkYm9keS5sZW5ndGggPT0gMCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIiEgQk9EWSA/Pz9cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjbGljayA9ICRib2R5LmRhdGEoXCJtZWRpYU92ZXJsYXlDbGlja1wiKTtcbiAgICAgIGlmIChjbGljaykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dBUk5dIGFscmVhZHkgbWVkaWFPdmVybGF5Q2xpY2tcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkYm9keS5kYXRhKFwibWVkaWFPdmVybGF5Q2xpY2tcIiwge1xuICAgICAgICAgIHBpbmc6IFwicG9uZ1wiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjbGlja0V2ZW50ID0gJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID8gJ3RvdWNoc3RhcnQnIDogJ2NsaWNrJztcbiAgICAgICAgJGJvZHkuYmluZChjbGlja0V2ZW50LCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIHZhciBlbGVtID0gJCh0aGlzKVswXTsgLy8gYm9keVxuICAgICAgICAgIGVsZW0gPSBldmVudC50YXJnZXQ7IC8vIGJvZHkgZGVzY2VuZGFudFxuXG4gICAgICAgICAgaWYgKCFlbGVtKSB7XG4gICAgICAgICAgICBtZWRpYU92ZXJsYXlQbGF5ZXIudG91Y2hJbml0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJNTyBDTElDSzogXCIgKyBlbGVtLmlkKTtcblxuICAgICAgICAgIHZhciBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHZhciBlbCA9IGVsZW07XG5cbiAgICAgICAgICB2YXIgaW5MaW5rID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYVwiKSB7XG4gICAgICAgICAgICBpbkxpbmsgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoaWxlICghKGRhdGEgPSAkKGVsKS5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiKSkpIHtcbiAgICAgICAgICAgIGlmIChlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImFcIikge1xuICAgICAgICAgICAgICBpbkxpbmsgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiAoZGF0YS5wYXIgfHwgZGF0YS5wYXJzKSkge1xuICAgICAgICAgICAgaWYgKGVsICE9PSBlbGVtKSB7XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJNTyBDTElDSyBSRURJUkVDVDogXCIgKyBlbC5pZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghbWVkaWFPdmVybGF5U2V0dGluZ3MubWVkaWFPdmVybGF5c0VuYWJsZUNsaWNrKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTU8gQ0xJQ0sgRElTQUJMRURcIik7XG4gICAgICAgICAgICAgIG1lZGlhT3ZlcmxheVBsYXllci50b3VjaEluaXQoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbkxpbmspIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJNTyBDTElDS0VEIExJTktcIik7XG4gICAgICAgICAgICAgIG1lZGlhT3ZlcmxheVBsYXllci50b3VjaEluaXQoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXIgPSBkYXRhLnBhciA/IGRhdGEucGFyIDogZGF0YS5wYXJzWzBdO1xuXG4gICAgICAgICAgICBpZiAoZGF0YS5wYXJzICYmICh0eXBlb2YgcmFuZ3kgIT09IFwidW5kZWZpbmVkXCIpKSB7XG4gICAgICAgICAgICAgIHZhciB3YXNQYXVzZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAvLyBUbyByZW1vdmUgaGlnaGxpZ2h0IHdoaWNoIG1heSBoYXZlIGFsdGVyZWQgRE9NIChhbmQgYnJlYWsgQ0ZJIGV4cHJlc3Npb25zKVxuICAgICAgICAgICAgICBpZiAobWVkaWFPdmVybGF5UGxheWVyLmlzUGxheWluZ0NmaSgpKSB7XG4gICAgICAgICAgICAgICAgd2FzUGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBtZWRpYU92ZXJsYXlQbGF5ZXIucGF1c2UoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAvLyBcbiAgICAgICAgICAgICAgLy8gdmFyIHAgPSB7eDogZXZlbnQucGFnZVgsIHk6IGV2ZW50LnBhZ2VZfTtcbiAgICAgICAgICAgICAgLy8gaWYgKHdlYmtpdENvbnZlcnRQb2ludEZyb21QYWdlVG9Ob2RlKVxuICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgIC8vICAgICBwID0gd2Via2l0Q29udmVydFBvaW50RnJvbVBhZ2VUb05vZGUoZWxlbS5vd25lckRvY3VtZW50LmJvZHksIG5ldyBXZWJLaXRQb2ludChldmVudC5wYWdlWCwgZXZlbnQucGFnZVkpKTtcbiAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAvLyBcbiAgICAgICAgICAgICAgLy8gdmFyIGRpdiA9IGVsZW0ub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkNMSUNLRURcIik7XG4gICAgICAgICAgICAgIC8vIGlmIChkaXYpXG4gICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgLy8gICAgIGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpdik7XG4gICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgLy8gXG4gICAgICAgICAgICAgIC8vIGRpdiA9IGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsICdkaXYnKTtcbiAgICAgICAgICAgICAgLy8gZGl2LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiYmFja2dyb3VuZC1jb2xvcjogcmVkOyBwb3NpdGlvbjogYWJzb2x1dGU7IHotaW5kZXg6IDk5OTsgd2lkdGg6IDUwcHg7IGhlaWdodDogNTBweDsgbGVmdDogXCIgKyBwLnggKyBcInB4OyB0b3A6IFwiICsgcC55ICsgXCJweDtcIik7XG4gICAgICAgICAgICAgIC8vIGRpdi5pZCA9IFwiQ0xJQ0tFRFwiO1xuICAgICAgICAgICAgICAvLyBkaXYuc2V0QXR0cmlidXRlKFwiaWRcIiwgZGl2LmlkKTtcbiAgICAgICAgICAgICAgLy8gdmFyIGRpdlR4dCA9IGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIiBcIik7XG4gICAgICAgICAgICAgIC8vIGRpdi5hcHBlbmRDaGlsZChkaXZUeHQpO1xuICAgICAgICAgICAgICAvLyBlbGVtLm93bmVyRG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbiAgICAgICAgICAgICAgLy9yYW5neS5pbml0KCk7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gVEhJUyBXT1JLUyAoc2FtZSBhcyBSYW5neSdzIG1ldGhvZCBiZWxvdylcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0ub3duZXJEb2N1bWVudC5jYXJldFJhbmdlRnJvbVBvaW50KVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBlbGVtLm93bmVyRG9jdW1lbnQuY2FyZXRSYW5nZUZyb21Qb2ludChldmVudC5wYWdlWCwgZXZlbnQucGFnZVkpO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQucmFuZ2VQYXJlbnQpXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGV2ZW50LnJhbmdlUGFyZW50LCBldmVudC5yYW5nZU9mZnNldCk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIi0tLS0tLSAxXCIpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVsZW0ub3duZXJEb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZXZlbnQucGFnZVgpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50LnBhZ2VZKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyLnN0YXJ0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIi0tLS0tLVwiKTtcblxuICAgICAgICAgICAgICAgIHZhciBwb3MgPSByYW5neS5wb3NpdGlvbkZyb21Qb2ludChldmVudC5wYWdlWCwgZXZlbnQucGFnZVksIGVsZW0ub3duZXJEb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCItLS0tLS0gMlwiKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwb3Mubm9kZS50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocG9zLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCItLS0tLS1cIik7XG5cbiAgICAgICAgICAgICAgICBwYXIgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpUGFyID0gMDsgaVBhciA8IGRhdGEucGFycy5sZW5ndGg7IGlQYXIrKykge1xuICAgICAgICAgICAgICAgICAgdmFyIHAgPSBkYXRhLnBhcnNbaVBhcl07XG5cbiAgICAgICAgICAgICAgICAgIHZhciBzdGFydENGSSA9IFwiZXB1YmNmaShcIiArIHAuY2ZpLnBhcnRpYWxTdGFydENmaSArIFwiKVwiO1xuICAgICAgICAgICAgICAgICAgdmFyIGluZm9TdGFydCA9IEVQVUJjZmkuZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJKHN0YXJ0Q0ZJLCBlbGVtLm93bmVyRG9jdW1lbnQsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdKTtcbiAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coaW5mb1N0YXJ0KTtcblxuICAgICAgICAgICAgICAgICAgdmFyIGVuZENGSSA9IFwiZXB1YmNmaShcIiArIHAuY2ZpLnBhcnRpYWxFbmRDZmkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgIHZhciBpbmZvRW5kID0gRVBVQmNmaS5nZXRUZXh0VGVybWludXNJbmZvV2l0aFBhcnRpYWxDRkkoZW5kQ0ZJLCBlbGVtLm93bmVyRG9jdW1lbnQsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdKTtcbiAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coaW5mb0VuZCk7XG5cbiAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHJhbmd5LmNyZWF0ZVJhbmdlKGVsZW0ub3duZXJEb2N1bWVudCk7IC8vY3JlYXRlTmF0aXZlUmFuZ2VcbiAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKFxuICAgICAgICAgICAgICAgICAgICBpbmZvU3RhcnQudGV4dE5vZGVbMF0sIGluZm9TdGFydC50ZXh0T2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmZvRW5kLnRleHROb2RlWzBdLCBpbmZvRW5kLnRleHRPZmZzZXRcbiAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChyYW5nZS5pc1BvaW50SW5SYW5nZShwb3Mubm9kZSwgcG9zLm9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocC5jZmkucGFydGlhbFN0YXJ0Q2ZpKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocC5jZmkucGFydGlhbEVuZENmaSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIERPVUJMRSBDSEVDSyBXSVRIIGdldENsaWVudFJlY3RzID8/XG5cbiAgICAgICAgICAgICAgICAgICAgcGFyID0gcDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghcGFyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdhc1BhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgbWVkaWFPdmVybGF5UGxheWVyLnRvZ2dsZU1lZGlhT3ZlcmxheSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmIChlbCAmJiBlbCAhPSBlbGVtICYmIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYm9keVwiICYmIHBhciAmJiAhcGFyLmdldFNtaWwoKS5pZCkge1xuICAgICAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJNTyBDTElDS0VEIEJMQU5LIEJPRFlcIik7XG4gICAgICAgICAgICAgIG1lZGlhT3ZlcmxheVBsYXllci50b3VjaEluaXQoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lZGlhT3ZlcmxheVBsYXllci5wbGF5VXNlclBhcihwYXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZWFkYWxvdWQgPSAkKGVsZW0pLmF0dHIoXCJpYm9va3M6cmVhZGFsb3VkXCIpO1xuICAgICAgICAgICAgaWYgKCFyZWFkYWxvdWQpIHtcbiAgICAgICAgICAgICAgcmVhZGFsb3VkID0gJChlbGVtKS5hdHRyKFwiZXB1YjpyZWFkYWxvdWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVhZGFsb3VkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJNTyByZWFkYWxvdWQgYXR0cjogXCIgKyByZWFkYWxvdWQpO1xuXG4gICAgICAgICAgICAgIHZhciBpc1BsYXlpbmcgPSBtZWRpYU92ZXJsYXlQbGF5ZXIuaXNQbGF5aW5nKCk7XG4gICAgICAgICAgICAgIGlmIChyZWFkYWxvdWQgPT09IFwic3RhcnRcIiAmJiAhaXNQbGF5aW5nIHx8XG4gICAgICAgICAgICAgICAgcmVhZGFsb3VkID09PSBcInN0b3BcIiAmJiBpc1BsYXlpbmcgfHxcbiAgICAgICAgICAgICAgICByZWFkYWxvdWQgPT09IFwic3RhcnRzdG9wXCIpIHtcbiAgICAgICAgICAgICAgICBtZWRpYU92ZXJsYXlQbGF5ZXIudG9nZ2xlTWVkaWFPdmVybGF5KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZWRpYU92ZXJsYXlQbGF5ZXIudG91Y2hJbml0KCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzbWlsID0gbWVkaWFPdmVybGF5LmdldFNtaWxCeVNwaW5lSXRlbShzcGluZUl0ZW0pO1xuICAgIGlmICghc21pbCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk5PIFNNSUw/PyBcIiArIHNwaW5lSXRlbS5pZHJlZiArIFwiIC8vLyBcIiArIHNwaW5lSXRlbS5tZWRpYV9vdmVybGF5X2lkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdHJhdmVyc2VTbWlsU2VxcyA9IGZ1bmN0aW9uKHJvb3QpIHtcbiAgICAgIGlmICghcm9vdCkgcmV0dXJuO1xuXG4gICAgICBpZiAocm9vdC5ub2RlVHlwZSAmJiByb290Lm5vZGVUeXBlID09PSBcInNlcVwiKSB7XG4gICAgICAgIC8vIGlmIChyb290LmVsZW1lbnQpXG4gICAgICAgIC8vIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoXCJXQVJOOiBzZXEuZWxlbWVudCBhbHJlYWR5IHNldDogXCIgKyByb290LnRleHRyZWYpO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgaWYgKHJvb3QudGV4dHJlZikge1xuICAgICAgICAgIHZhciBwYXJ0cyA9IHJvb3QudGV4dHJlZi5zcGxpdCgnIycpO1xuICAgICAgICAgIHZhciBmaWxlID0gcGFydHNbMF07XG4gICAgICAgICAgdmFyIGZyYWdtZW50SWQgPSAocGFydHMubGVuZ3RoID09PSAyKSA/IHBhcnRzWzFdIDogXCJcIjtcbiAgICAgICAgICAvLyBcbiAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKHJvb3QudGV4dHJlZik7XG4gICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyhmcmFnbWVudElkKTtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIi0tLS0gU0hPVUxEIEJFIEVRVUFMOlwiKTtcbiAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKGZpbGUpO1xuICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcocGFyLnRleHQuc3JjRmlsZSk7XG4gICAgICAgICAgLy8gXG4gICAgICAgICAgLy8gaWYgKGZpbGUgIT09IHBhci50ZXh0LnNyY0ZpbGUpXG4gICAgICAgICAgLy8ge1xuICAgICAgICAgIC8vICAgICBjb25zb2xlLmVycm9yKFwiYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkgdGV4dHJlZi5maWxlICE9PSBwYXIudGV4dC5zcmNGaWxlID8/P1wiKTtcbiAgICAgICAgICAvLyAgICAgcmV0dXJuIHBhcjtcbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgLy8gXG4gICAgICAgICAgLy8gaWYgKCFmcmFnbWVudElkKVxuICAgICAgICAgIC8vIHtcbiAgICAgICAgICAvLyAgICAgY29uc29sZS5lcnJvcihcImFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5ICFmcmFnbWVudElkID8/P1wiKTtcbiAgICAgICAgICAvLyAgICAgcmV0dXJuIHBhcjtcbiAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICBpZiAoZmlsZSAmJiBmcmFnbWVudElkKSB7XG4gICAgICAgICAgICB2YXIgdGV4dFJlbGF0aXZlUmVmID0gUmVzb2x2ZUNvbnRlbnRSZWYoZmlsZSwgc21pbC5ocmVmKTtcbiAgICAgICAgICAgIHZhciBzYW1lID0gdGV4dFJlbGF0aXZlUmVmID09PSBzcGluZUl0ZW0uaHJlZjtcbiAgICAgICAgICAgIGlmIChzYW1lKSB7XG4gICAgICAgICAgICAgIHJvb3QuZWxlbWVudCA9ICRpZnJhbWVbMF0uY29udGVudERvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZyYWdtZW50SWQpO1xuXG4gICAgICAgICAgICAgIGlmICghcm9vdC5lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInNlcS50ZXh0cmVmICFlbGVtZW50PyBcIiArIHJvb3QudGV4dHJlZik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyB2YXIgc2VsZWN0b3IgPSBcIiNcIiArIFJlYWRpdW1TREsuSGVscGVycy5lc2NhcGVKUXVlcnlTZWxlY3RvcihmcmFnbWVudElkKTtcbiAgICAgICAgICAgICAgLy8gdmFyICRlbGVtZW50ID0gJChzZWxlY3RvciwgZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgICAgICAgICAgIC8vIGlmICgkZWxlbWVudClcbiAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAvLyAgICAgc2VxLmVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocm9vdC5jaGlsZHJlbiAmJiByb290LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvb3QuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSByb290LmNoaWxkcmVuW2ldO1xuICAgICAgICAgIHRyYXZlcnNlU21pbFNlcXMoY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB0cmF2ZXJzZVNtaWxTZXFzKHNtaWwpO1xuXG4gICAgLy9jb25zb2xlLmRlYnVnKFwiW1tNTyBBVFRBQ0hdXSBcIiArIHNwaW5lSXRlbS5pZHJlZiArIFwiIC8vLyBcIiArIHNwaW5lSXRlbS5tZWRpYV9vdmVybGF5X2lkICsgXCIgPT09IFwiICsgc21pbC5pZCk7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBTbWlsSXRlcmF0b3Ioc21pbCk7XG5cbiAgICB2YXIgZmFrZU9wZlJvb3QgPSBcIi85OSFcIjtcbiAgICB2YXIgZXB1YkNmaVByZWZpeCA9IFwiZXB1YmNmaVwiO1xuXG4gICAgd2hpbGUgKGl0ZXIuY3VycmVudFBhcikge1xuICAgICAgaXRlci5jdXJyZW50UGFyLmVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICBpdGVyLmN1cnJlbnRQYXIuY2ZpID0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAodHJ1ZSkgeyAvL2l0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQgKGluY2x1ZGVzIGVtcHR5IGZyYWcgSUQpXG5cbiAgICAgICAgdmFyIHRleHRSZWxhdGl2ZVJlZiA9IFJlc29sdmVDb250ZW50UmVmKGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZpbGUsIGl0ZXIuc21pbC5ocmVmKTtcblxuICAgICAgICB2YXIgc2FtZSA9IHRleHRSZWxhdGl2ZVJlZiA9PT0gc3BpbmVJdGVtLmhyZWY7XG4gICAgICAgIGlmIChzYW1lKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdEJvZHkgPSAhaXRlci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZCB8fCBpdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkLmxlbmd0aCA9PSAwO1xuICAgICAgICAgIHZhciBzZWxlY3RJZCA9IGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQuaW5kZXhPZihlcHViQ2ZpUHJlZml4KSA9PSAwID8gdW5kZWZpbmVkIDogaXRlci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZDtcblxuICAgICAgICAgIHZhciAkZWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB2YXIgaXNDZmlUZXh0UmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoIXNlbGVjdEJvZHkgJiYgIXNlbGVjdElkKSB7XG4gICAgICAgICAgICBpZiAoaXRlci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZC5pbmRleE9mKGVwdWJDZmlQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJ0aWFsID0gaXRlci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZC5zdWJzdHIoZXB1YkNmaVByZWZpeC5sZW5ndGggKyAxLCBpdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkLmxlbmd0aCAtIGVwdWJDZmlQcmVmaXgubGVuZ3RoIC0gMik7XG5cbiAgICAgICAgICAgICAgaWYgKHBhcnRpYWwuaW5kZXhPZihmYWtlT3BmUm9vdCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsID0gcGFydGlhbC5zdWJzdHIoZmFrZU9wZlJvb3QubGVuZ3RoLCBwYXJ0aWFsLmxlbmd0aCAtIGZha2VPcGZSb290Lmxlbmd0aCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhwYXJ0aWFsKTtcbiAgICAgICAgICAgICAgdmFyIHBhcnRzID0gcGFydGlhbC5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgIGlmIChwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxTdGFydENmaSA9IHBhcnRzWzBdICsgcGFydHNbMV07XG4gICAgICAgICAgICAgICAgICB2YXIgc3RhcnRDRkkgPSBcImVwdWJjZmkoXCIgKyBwYXJ0aWFsU3RhcnRDZmkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgIHZhciBpbmZvU3RhcnQgPSBFUFVCY2ZpLmdldFRleHRUZXJtaW51c0luZm9XaXRoUGFydGlhbENGSShzdGFydENGSSwgJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdKTtcbiAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coaW5mb1N0YXJ0KTtcblxuICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxFbmRDZmkgPSBwYXJ0c1swXSArIHBhcnRzWzJdO1xuICAgICAgICAgICAgICAgICAgdmFyIGVuZENGSSA9IFwiZXB1YmNmaShcIiArIHBhcnRpYWxFbmRDZmkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgIHZhciBpbmZvRW5kID0gRVBVQmNmaS5nZXRUZXh0VGVybWludXNJbmZvV2l0aFBhcnRpYWxDRkkoZW5kQ0ZJLCAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudCwgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl0pO1xuICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhpbmZvRW5kKTtcblxuICAgICAgICAgICAgICAgICAgdmFyIGNmaVRleHRQYXJlbnQgPSBpbmZvU3RhcnQudGV4dE5vZGVbMF0ucGFyZW50Tm9kZTtcblxuICAgICAgICAgICAgICAgICAgaXRlci5jdXJyZW50UGFyLmNmaSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc21pbFRleHRTcmNDZmk6IGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQsXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpYWxSYW5nZUNmaTogcGFydGlhbCxcbiAgICAgICAgICAgICAgICAgICAgcGFydGlhbFN0YXJ0Q2ZpOiBwYXJ0aWFsU3RhcnRDZmksXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpYWxFbmRDZmk6IHBhcnRpYWxFbmRDZmksXG5cbiAgICAgICAgICAgICAgICAgICAgY2ZpVGV4dFBhcmVudDogY2ZpVGV4dFBhcmVudFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRleHROb2RlIGJlY29tZXMgaW52YWxpZCBhZnRlciBoaWdobGlnaHRpbmchIChkeW5hbWljIHNwYW4gaW5zZXJ0aW9uL3JlbW92YWwgY2hhbmdlcyBET00pXG4gICAgICAgICAgICAgICAgICAgIC8vIGNmaVJhbmdlU3RhcnQ6IGluZm9TdGFydCxcbiAgICAgICAgICAgICAgICAgICAgLy8gY2ZpUmFuZ2VFbmQ6IGluZm9FbmRcbiAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIC8vIFRPRE86IG5vdCBqdXN0IHN0YXJ0IHRleHROb2RlLCBidXQgYWxsIG9mIHRoZW0gYmV0d2VlbiBzdGFydCBhbmQgZW5kLi4uXG4gICAgICAgICAgICAgICAgICAvLyAuLi50aGF0IGJlaW5nIHNhaWQsIENGSSB0ZXh0IHJhbmdlcyBsaWtlbHkgdG8gYmUgdXNlZCBvbmx5IHdpdGhpbiBhIHNpbmdsZSBjb21tb24gcGFyZW50LFxuICAgICAgICAgICAgICAgICAgLy8gc28gdGhpcyBpcyBhbiBhY2NlcHRhYmxlIGltcGxlbWVudGF0aW9uIHNob3J0Y3V0IGZvciB0aGlzIENGSSBleHBlcmltZW50YXRpb24gKHdvcmQtbGV2ZWwgdGV4dC9hdWRpbyBzeW5jaHJvbmlzYXRpb24pLlxuICAgICAgICAgICAgICAgICAgaXNDZmlUZXh0UmFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgJGVsZW1lbnQgPSAkKGNmaVRleHRQYXJlbnQpO1xuICAgICAgICAgICAgICAgICAgdmFyIG1vZGF0YSA9ICRlbGVtZW50LmRhdGEoXCJtZWRpYU92ZXJsYXlEYXRhXCIpO1xuICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgIHBhcnM6IFtpdGVyLmN1cnJlbnRQYXJdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRlbGVtZW50LmRhdGEoXCJtZWRpYU92ZXJsYXlEYXRhXCIsIG1vZGF0YSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kYXRhLnBhcikge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV0FSTl0gbm9uLUNGSSBNTyBEQVRBIGFscmVhZHkgZXhpc3RzIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICBtb2RhdGEucGFyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RhdGEucGFycykge1xuICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGlQYXJzID0gMDsgaVBhcnMgPCBtb2RhdGEucGFycy5sZW5ndGg7IGlQYXJzKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXIgPSBtb2RhdGEucGFyc1tpUGFyc107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXIgPT09IGl0ZXIuY3VycmVudFBhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV0FSTl0gbWVkaWFPdmVybGF5RGF0YSBDRkkgUEFSIGFscmVhZHkgcmVnaXN0ZXJlZCFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIG1vZGF0YS5wYXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbW9kYXRhLnBhcnMucHVzaChpdGVyLmN1cnJlbnRQYXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB2YXIgY2ZpID0gXCJlcHViY2ZpKFwiICsgcGFydGlhbCArIFwiKVwiO1xuICAgICAgICAgICAgICAgICAgJGVsZW1lbnQgPSBFUFVCY2ZpLmdldFRhcmdldEVsZW1lbnRXaXRoUGFydGlhbENGSShjZmksICRpZnJhbWVbMF0uY29udGVudERvY3VtZW50LCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlNNSUwgdGV4dEBzcmMgQ0ZJIGZyYWdtZW50IGlkZW50aWZpZXIgc2NoZW1lIG5vdCBzdXBwb3J0ZWQ6IFwiICsgaXRlci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RCb2R5KSB7XG4gICAgICAgICAgICAgICRlbGVtZW50ID0gJGJvZHk7IC8vJChcImJvZHlcIiwgY29udGVudERvY0VsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJGVsZW1lbnQgPSAkKCRpZnJhbWVbMF0uY29udGVudERvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdElkKSk7XG4gICAgICAgICAgICAgIC8vJGVsZW1lbnQgPSAkKFwiI1wiICsgUmVhZGl1bVNESy5IZWxwZXJzLmVzY2FwZUpRdWVyeVNlbGVjdG9yKGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQpLCBjb250ZW50RG9jRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCRlbGVtZW50ICYmICRlbGVtZW50Lmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgaWYgKCFpc0NmaVRleHRSYW5nZSkge1xuICAgICAgICAgICAgICBpZiAoaXRlci5jdXJyZW50UGFyLmVsZW1lbnQgJiYgaXRlci5jdXJyZW50UGFyLmVsZW1lbnQgIT09ICRlbGVtZW50WzBdKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkRJRkZFUkVOVCBFTEVNRU5UUz8/ISBcIiArIGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQgKyBcIiAvLy8gXCIgKyBpdGVyLmN1cnJlbnRQYXIuZWxlbWVudC5pZCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgbmFtZSA9ICRlbGVtZW50WzBdLm5vZGVOYW1lID8gJGVsZW1lbnRbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwiYXVkaW9cIiB8fCBuYW1lID09PSBcInZpZGVvXCIpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5hdHRyKFwicHJlbG9hZFwiLCBcImF1dG9cIik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpdGVyLmN1cnJlbnRQYXIuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuXG4gICAgICAgICAgICAgIHZhciBtb2RhdGEgPSAkZWxlbWVudC5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiKTtcbiAgICAgICAgICAgICAgaWYgKG1vZGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV0FSTl0gTU8gREFUQSBhbHJlYWR5IGV4aXN0cy5cIik7XG5cbiAgICAgICAgICAgICAgICBpZiAobW9kYXRhLnBhciAmJiBtb2RhdGEucGFyICE9PSBpdGVyLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJESUZGRVJFTlQgUEFSUz8/IVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAkZWxlbWVudC5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiLCB7XG4gICAgICAgICAgICAgICAgcGFyOiBpdGVyLmN1cnJlbnRQYXJcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICRlbGVtZW50LmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgdmFyIGVsZW0gPSAkKHRoaXMpWzBdO1xuICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhcIk1PIENMSUNLIChFTEVNKTogXCIgKyBlbGVtLmlkKTtcblxuICAgICAgICAgICAgICAgdmFyIHBhciA9ICQodGhpcykuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIikucGFyO1xuICAgICAgICAgICAgICAgbWVkaWFPdmVybGF5UGxheWVyLnBsYXlVc2VyUGFyKHBhcik7XG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCIhISBDQU5OT1QgRklORCBFTEVNRU5UOiBcIiArIGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQgKyBcIiA9PSBcIiArIGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZpbGUgKyBcIiAvLy8gXCIgKyBzcGluZUl0ZW0uaHJlZik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIltJTkZPXSBcIiArIHNwaW5lSXRlbS5ocmVmICsgXCIgIT0gXCIgKyB0ZXh0UmVsYXRpdmVSZWYgKyBcIiAjIFwiICsgaXRlci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaXRlci5uZXh0KCk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lZGlhT3ZlcmxheURhdGFJbmplY3RvclxuIiwiLy8gIExhdW5jaGVyT1NYXG4vL1xuLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gTW9kaWZpZWQgYnkgRGFuaWVsIFdlY2tcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIHJhbmd5ID0gcmVxdWlyZSgncmFuZ3knKVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gcmVhZGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWVkaWFPdmVybGF5RWxlbWVudEhpZ2hsaWdodGVyKHJlYWRlcikge1xuXG4gIHRoaXMuaW5jbHVkZVBhcldoZW5BZGp1c3RpbmdUb1NlcVN5bmNHcmFudWxhcml0eSA9IHRydWU7XG5cbiAgdmFyIERFRkFVTFRfTU9fQUNUSVZFX0NMQVNTID0gXCJtby1hY3RpdmUtZGVmYXVsdFwiO1xuICB2YXIgREVGQVVMVF9NT19TVUJfU1lOQ19DTEFTUyA9IFwibW8tc3ViLXN5bmNcIjtcblxuICAvL3ZhciBCQUNLX0NPTE9SID0gXCIjOTlDQ0NDXCI7XG5cbiAgdmFyIF9oaWdobGlnaHRlZEVsZW1lbnRQYXIgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNFbGVtZW50SGlnaGxpZ2h0ZWQgPSBmdW5jdGlvbihwYXIpIHtcbiAgICByZXR1cm4gX2hpZ2hsaWdodGVkRWxlbWVudFBhciAmJiBwYXIgPT09IF9oaWdobGlnaHRlZEVsZW1lbnRQYXI7XG4gIH07XG5cbiAgdmFyIF9oaWdobGlnaHRlZENmaVBhciA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0NmaUhpZ2hsaWdodGVkID0gZnVuY3Rpb24ocGFyKSB7XG4gICAgcmV0dXJuIF9oaWdobGlnaHRlZENmaVBhciAmJiBwYXIgPT09IF9oaWdobGlnaHRlZENmaVBhcjtcbiAgfTtcblxuICB2YXIgX2FjdGl2ZUNsYXNzID0gXCJcIjtcbiAgdmFyIF9wbGF5YmFja0FjdGl2ZUNsYXNzID0gXCJcIjtcblxuICB2YXIgX3JlYWRlciA9IHJlYWRlcjtcblxuICB2YXIgVVNFX1JBTkdZID0gdHJ1ZSAmJiAodHlwZW9mIHJhbmd5ICE9PSBcInVuZGVmaW5lZFwiKTtcbiAgdmFyIF9yYW5neUNTUyA9IHVuZGVmaW5lZDtcbiAgdmFyIF9yYW5neVJhbmdlID0gdW5kZWZpbmVkO1xuXG4gIHZhciBISUdITElHSFRfSUQgPSBcIk1PX1NQRUFLXCI7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciAkdXNlclN0eWxlID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMucmVEbyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vdGhpcy5yZXNldCgpO1xuXG4gICAgaWYgKCR1c2VyU3R5bGUpIHtcbiAgICAgICR1c2VyU3R5bGUucmVtb3ZlKCk7XG4gICAgfVxuICAgICR1c2VyU3R5bGUgPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgaGUgPSBfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyO1xuICAgIHZhciBoYyA9IF9oaWdobGlnaHRlZENmaVBhcjtcbiAgICB2YXIgYzEgPSBfYWN0aXZlQ2xhc3M7XG4gICAgdmFyIGMyID0gX3BsYXliYWNrQWN0aXZlQ2xhc3M7XG5cbiAgICBpZiAoX2hpZ2hsaWdodGVkRWxlbWVudFBhcikge1xuICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICB0aGlzLmhpZ2hsaWdodEVsZW1lbnQoaGUsIGMxLCBjMik7XG4gICAgfSBlbHNlIGlmIChfaGlnaGxpZ2h0ZWRDZmlQYXIpIHtcbiAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgdGhpcy5oaWdobGlnaHRDZmkoaGMsIGMxLCBjMik7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGVuc3VyZVVzZXJTdHlsZSgkZWxlbWVudCwgaGFzQXV0aG9yU3R5bGUsIG92ZXJyaWRlV2l0aFVzZXJTdHlsZSkge1xuICAgIGlmICgkdXNlclN0eWxlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoJHVzZXJTdHlsZVswXS5vd25lckRvY3VtZW50ID09PSAkZWxlbWVudFswXS5vd25lckRvY3VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG5cbiAgICAgIH1cbiAgICB9XG5cblxuICAgICRoZWFkID0gJChcImhlYWRcIiwgJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuXG4gICAgJHVzZXJTdHlsZSA9ICQoXCI8c3R5bGUgdHlwZT0ndGV4dC9jc3MnPiA8L3N0eWxlPlwiKTtcblxuICAgICR1c2VyU3R5bGUuYXBwZW5kKFwiLlwiICsgREVGQVVMVF9NT19BQ1RJVkVfQ0xBU1MgKyBcIiB7XCIpO1xuXG4gICAgdmFyIGZhbGxiYWNrVXNlclN0eWxlID0gXCJiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3cgIWltcG9ydGFudDsgY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7IGJvcmRlci1yYWRpdXM6IDAuNGVtO1wiO1xuXG4gICAgdmFyIHN0eWxlID0gb3ZlcnJpZGVXaXRoVXNlclN0eWxlOyAvL19yZWFkZXIudXNlclN0eWxlcygpLmZpbmRTdHlsZShcIi5cIiArIERFRkFVTFRfTU9fQUNUSVZFX0NMQVNTKTtcbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgIHZhciBhdExlYXN0T25lID0gZmFsc2U7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlLmRlY2xhcmF0aW9ucykge1xuICAgICAgICBpZiAoIXN0eWxlLmRlY2xhcmF0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYXRMZWFzdE9uZSA9IHRydWU7XG4gICAgICAgICR1c2VyU3R5bGUuYXBwZW5kKHByb3AgKyBcIjogXCIgKyBzdHlsZS5kZWNsYXJhdGlvbnNbcHJvcF0gKyBcIjsgXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWF0TGVhc3RPbmUgJiYgIWhhc0F1dGhvclN0eWxlKSB7XG4gICAgICAgICR1c2VyU3R5bGUuYXBwZW5kKGZhbGxiYWNrVXNlclN0eWxlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFoYXNBdXRob3JTdHlsZSkge1xuICAgICAgJHVzZXJTdHlsZS5hcHBlbmQoZmFsbGJhY2tVc2VyU3R5bGUpO1xuICAgIH1cblxuICAgICR1c2VyU3R5bGUuYXBwZW5kKFwifVwiKTtcblxuXG4gICAgLy8gLS0tLSBDRklcbiAgICAvLyR1c2VyU3R5bGUuYXBwZW5kKFwiIC5oaWdobGlnaHQge2JhY2tncm91bmQtY29sb3I6IGJsdWU7IGJvcmRlcjogMnggc29saWQgZ3JlZW47fVwiKTsgLy8uaG92ZXItaGlnaGxpZ2h0XG5cblxuICAgICR1c2VyU3R5bGUuYXBwZW5kVG8oJGhlYWQpO1xuXG4gICAgLy9jb25zb2xlLmRlYnVnKCR1c2VyU3R5bGVbMF0udGV4dENvbnRlbnQpO1xuICB9O1xuXG4gIHRoaXMuaGlnaGxpZ2h0RWxlbWVudCA9IGZ1bmN0aW9uKHBhciwgYWN0aXZlQ2xhc3MsIHBsYXliYWNrQWN0aXZlQ2xhc3MpIHtcblxuICAgIGlmICghcGFyIHx8IHBhciA9PT0gX2hpZ2hsaWdodGVkRWxlbWVudFBhcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXQoKTtcblxuICAgIF9oaWdobGlnaHRlZEVsZW1lbnRQYXIgPSBwYXI7XG4gICAgX2hpZ2hsaWdodGVkQ2ZpUGFyID0gdW5kZWZpbmVkO1xuXG4gICAgX2FjdGl2ZUNsYXNzID0gYWN0aXZlQ2xhc3M7XG4gICAgX3BsYXliYWNrQWN0aXZlQ2xhc3MgPSBwbGF5YmFja0FjdGl2ZUNsYXNzO1xuXG4gICAgdmFyIHNlcSA9IHRoaXMuYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkoX2hpZ2hsaWdodGVkRWxlbWVudFBhcik7XG4gICAgdmFyIGVsZW1lbnQgPSBzZXEuZWxlbWVudDtcblxuICAgIGlmIChfcGxheWJhY2tBY3RpdmVDbGFzcyAmJiBfcGxheWJhY2tBY3RpdmVDbGFzcyAhPT0gXCJcIikge1xuICAgICAgLy9jb25zb2xlLmRlYnVnKFwiTU8gcGxheWJhY2tBY3RpdmVDbGFzczogXCIgKyBfcGxheWJhY2tBY3RpdmVDbGFzcyk7XG4gICAgICAkKGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmFkZENsYXNzKF9wbGF5YmFja0FjdGl2ZUNsYXNzKTtcbiAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIk1PIHBsYXliYWNrQWN0aXZlQ2xhc3MgMjogXCIgKyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgfVxuXG4gICAgdmFyICRoZWwgPSAkKGVsZW1lbnQpO1xuXG4gICAgdmFyIGhhc0F1dGhvclN0eWxlID0gX2FjdGl2ZUNsYXNzICYmIF9hY3RpdmVDbGFzcyAhPT0gXCJcIjtcbiAgICB2YXIgb3ZlcnJpZGVXaXRoVXNlclN0eWxlID0gX3JlYWRlci51c2VyU3R5bGVzKCkuZmluZFN0eWxlKFwiLlwiICsgREVGQVVMVF9NT19BQ1RJVkVfQ0xBU1MpO1xuXG4gICAgZW5zdXJlVXNlclN0eWxlKCRoZWwsIGhhc0F1dGhvclN0eWxlLCBvdmVycmlkZVdpdGhVc2VyU3R5bGUpO1xuXG4gICAgaWYgKG92ZXJyaWRlV2l0aFVzZXJTdHlsZSB8fCAhaGFzQXV0aG9yU3R5bGUpIHtcbiAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIk1PIGFjdGl2ZSBOTyBDTEFTUzogXCIgKyBfYWN0aXZlQ2xhc3MpO1xuXG4gICAgICBpZiAoaGFzQXV0aG9yU3R5bGUpIHtcbiAgICAgICAgJGhlbC5hZGRDbGFzcyhfYWN0aXZlQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICAkaGVsLmFkZENsYXNzKERFRkFVTFRfTU9fQUNUSVZFX0NMQVNTKTtcblxuICAgICAgLy8kKGVsZW1lbnQpLmNzcyhcImJhY2tncm91bmRcIiwgQkFDS19DT0xPUik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIk1PIGFjdGl2ZUNsYXNzOiBcIiArIF9hY3RpdmVDbGFzcyk7XG4gICAgICAkaGVsLmFkZENsYXNzKF9hY3RpdmVDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaW5jbHVkZVBhcldoZW5BZGp1c3RpbmdUb1NlcVN5bmNHcmFudWxhcml0eSB8fCBfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyICE9PSBzZXEpIHtcbiAgICAgICQoX2hpZ2hsaWdodGVkRWxlbWVudFBhci5lbGVtZW50KS5hZGRDbGFzcyhERUZBVUxUX01PX1NVQl9TWU5DX0NMQVNTKTtcbiAgICB9XG5cbiAgICAvLyAtLS0tIENGSVxuICAgIC8vICAgICAgICAgdHJ5XG4gICAgLy8gICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICAgLy8gLy9ub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICAvLyAgICAgICAgICAgICAvLyB2YXIgY2ZpID0gRVBVQmNmaS5HZW5lcmF0b3IuZ2VuZXJhdGVFbGVtZW50Q0ZJQ29tcG9uZW50KGVsZW1lbnQpOyAvLyRoZWxbMF1cbiAgICAvLyAgICAgICAgICAgICAvLyBpZihjZmlbMF0gPT0gXCIhXCIpIHtcbiAgICAvLyAgICAgICAgICAgICAvLyAgICAgY2ZpID0gY2ZpLnN1YnN0cmluZygxKTtcbiAgICAvLyAgICAgICAgICAgICAvLyB9XG4gICAgLy8gXG4gICAgLy8gLy9jb25zb2xlLmxvZyhlbGVtZW50KTtcbiAgICAvLyAgICAgICAgIFxuICAgIC8vICAgICAgICAgICAgIHZhciBmaXJzdFRleHROb2RlID0gZ2V0Rmlyc3RUZXh0Tm9kZShlbGVtZW50KTtcbiAgICAvLyAgICAgICAgICAgICB2YXIgdHh0Rmlyc3QgPSBmaXJzdFRleHROb2RlLnRleHRDb250ZW50O1xuICAgIC8vIC8vY29uc29sZS5sb2codHh0Rmlyc3QpO1xuICAgIC8vIFxuICAgIC8vICAgICAgICAgICAgIHZhciBsYXN0VGV4dE5vZGUgPSBnZXRMYXN0VGV4dE5vZGUoZWxlbWVudCk7XG4gICAgLy8gICAgICAgICAgICAgdmFyIHR4dExhc3QgPSBsYXN0VGV4dE5vZGUudGV4dENvbnRlbnQ7XG4gICAgLy8gLy9jb25zb2xlLmxvZyh0eHRMYXN0KTtcbiAgICAvLyAgICAgICAgIFxuICAgIC8vICAgICAgICAgICAgIHZhciBjZmkgPSBFUFVCY2ZpLkdlbmVyYXRvci5nZW5lcmF0ZUNoYXJPZmZzZXRSYW5nZUNvbXBvbmVudChcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZpcnN0VGV4dE5vZGUsIFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgMCwgXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBsYXN0VGV4dE5vZGUsIFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgdHh0TGFzdC5sZW5ndGgsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBbXCJjZmktbWFya2VyXCJdLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgW10sXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBbXCJNYXRoSmF4X01lc3NhZ2VcIl1cbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgLy8gICAgICAgICAgICAgXG4gICAgLy8gICAgICAgICAgICAgdmFyIGlkID0gJGhlbC5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiKS5wYXIuZ2V0U21pbCgpLnNwaW5lSXRlbUlkO1xuICAgIC8vICAgICAgICAgICAgIF9yZWFkZXIuYWRkSGlnaGxpZ2h0KGlkLCBjZmksIEhJR0hMSUdIVF9JRCxcbiAgICAvLyAgICAgICAgICAgICBcImhpZ2hsaWdodFwiLCAvL1widW5kZXJsaW5lXCJcbiAgICAvLyAgICAgICAgICAgICB1bmRlZmluZWQgLy8gc3R5bGVzXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIGNhdGNoKGVycm9yKVxuICAgIC8vICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIC8vICAgICAgICAgXG4gICAgLy8gICAgICAgICAgICAgcmVtb3ZlSGlnaGxpZ2h0KCk7XG4gICAgLy8gICAgICAgICB9XG4gIH07XG5cbiAgdGhpcy5oaWdobGlnaHRDZmkgPSBmdW5jdGlvbihwYXIsIGFjdGl2ZUNsYXNzLCBwbGF5YmFja0FjdGl2ZUNsYXNzKSB7XG5cbiAgICBpZiAoIXBhciB8fCBwYXIgPT09IF9oaWdobGlnaHRlZENmaVBhcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXQoKTtcblxuICAgIF9oaWdobGlnaHRlZEVsZW1lbnRQYXIgPSB1bmRlZmluZWQ7XG4gICAgX2hpZ2hsaWdodGVkQ2ZpUGFyID0gcGFyO1xuXG4gICAgX2FjdGl2ZUNsYXNzID0gYWN0aXZlQ2xhc3M7XG4gICAgX3BsYXliYWNrQWN0aXZlQ2xhc3MgPSBwbGF5YmFja0FjdGl2ZUNsYXNzO1xuXG4gICAgdmFyICRoZWwgPSAkKF9oaWdobGlnaHRlZENmaVBhci5jZmkuY2ZpVGV4dFBhcmVudCk7XG5cbiAgICB2YXIgaGFzQXV0aG9yU3R5bGUgPSBfYWN0aXZlQ2xhc3MgJiYgX2FjdGl2ZUNsYXNzICE9PSBcIlwiO1xuICAgIHZhciBvdmVycmlkZVdpdGhVc2VyU3R5bGUgPSBfcmVhZGVyLnVzZXJTdHlsZXMoKS5maW5kU3R5bGUoXCIuXCIgKyBERUZBVUxUX01PX0FDVElWRV9DTEFTUyk7IC8vIFRPRE86IHBlcmZvcm1hbmNlIGlzc3VlP1xuXG4gICAgZW5zdXJlVXNlclN0eWxlKCRoZWwsIGhhc0F1dGhvclN0eWxlLCBvdmVycmlkZVdpdGhVc2VyU3R5bGUpO1xuXG4gICAgdmFyIGNsYXp6ID0gKG92ZXJyaWRlV2l0aFVzZXJTdHlsZSB8fCAhaGFzQXV0aG9yU3R5bGUpID8gKChoYXNBdXRob3JTdHlsZSA/IChfYWN0aXZlQ2xhc3MgKyBcIiBcIikgOiBcIlwiKSArIERFRkFVTFRfTU9fQUNUSVZFX0NMQVNTKSA6IF9hY3RpdmVDbGFzcztcblxuICAgIGlmIChVU0VfUkFOR1kpIHtcbiAgICAgIHZhciBkb2MgPSBfaGlnaGxpZ2h0ZWRDZmlQYXIuY2ZpLmNmaVRleHRQYXJlbnQub3duZXJEb2N1bWVudDtcblxuICAgICAgX3Jhbmd5UmFuZ2UgPSByYW5neS5jcmVhdGVSYW5nZShkb2MpOyAvL2NyZWF0ZU5hdGl2ZVJhbmdlXG5cbiAgICAgIHZhciBzdGFydENGSSA9IFwiZXB1YmNmaShcIiArIF9oaWdobGlnaHRlZENmaVBhci5jZmkucGFydGlhbFN0YXJ0Q2ZpICsgXCIpXCI7XG4gICAgICB2YXIgaW5mb1N0YXJ0ID0gRVBVQmNmaS5nZXRUZXh0VGVybWludXNJbmZvV2l0aFBhcnRpYWxDRkkoc3RhcnRDRkksIGRvYywgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl0pO1xuICAgICAgLy9jb25zb2xlLmxvZyhpbmZvU3RhcnQpO1xuXG4gICAgICB2YXIgZW5kQ0ZJID0gXCJlcHViY2ZpKFwiICsgX2hpZ2hsaWdodGVkQ2ZpUGFyLmNmaS5wYXJ0aWFsRW5kQ2ZpICsgXCIpXCI7XG4gICAgICB2YXIgaW5mb0VuZCA9IEVQVUJjZmkuZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJKGVuZENGSSwgZG9jLCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXSk7XG4gICAgICAvL2NvbnNvbGUubG9nKGluZm9FbmQpO1xuXG4gICAgICBfcmFuZ3lSYW5nZS5zZXRTdGFydEFuZEVuZChcbiAgICAgICAgaW5mb1N0YXJ0LnRleHROb2RlWzBdLCBpbmZvU3RhcnQudGV4dE9mZnNldCxcbiAgICAgICAgaW5mb0VuZC50ZXh0Tm9kZVswXSwgaW5mb0VuZC50ZXh0T2Zmc2V0XG4gICAgICApO1xuXG4gICAgICBpZiAoZmFsc2UgJiYgLy8gd2UgdXNlIENzc0NsYXNzQXBwbGllciBpbnN0ZWFkLCBiZWNhdXNlIHN1cnJvdW5kQ29udGVudHMoKSBoYXMgbm8gdHJpdmlhbCB1bmRvU3Vycm91bmRDb250ZW50cygpIGZ1bmN0aW9uIChpbmMuIHRleHQgbm9kZXMgbm9ybWFsaXNhdGlvbiwgZXRjLilcbiAgICAgICAgX3Jhbmd5UmFuZ2UuY2FuU3Vycm91bmRDb250ZW50cygpKSB7XG4gICAgICAgIF9yYW5neVJhbmdlLk1PX2NyZWF0ZUNzc0NsYXNzQXBwbGllciA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBzcGFuID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiwgJ3NwYW4nKTtcbiAgICAgICAgc3Bhbi5pZCA9IEhJR0hMSUdIVF9JRDtcbiAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBzcGFuLmlkKTtcbiAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBjbGF6eiArIFwiIG1vLWNmaS1oaWdobGlnaHRcIik7XG5cbiAgICAgICAgX3Jhbmd5UmFuZ2Uuc3Vycm91bmRDb250ZW50cyhzcGFuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9yYW5neVJhbmdlLk1PX2NyZWF0ZUNzc0NsYXNzQXBwbGllciA9IHRydWU7XG5cbiAgICAgICAgaWYgKCFfcmFuZ3lDU1MgfHwgX3Jhbmd5Q1NTLmNzc0NsYXNzICE9PSBjbGF6eikge1xuICAgICAgICAgIF9yYW5neUNTUyA9IHJhbmd5LmNyZWF0ZUNzc0NsYXNzQXBwbGllcihjbGF6eiwge1xuICAgICAgICAgICAgZWxlbWVudFRhZ05hbWU6IFwic3BhblwiLFxuICAgICAgICAgICAgZWxlbWVudFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm1vLWNmaS1oaWdobGlnaHRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlnbm9yZVdoaXRlU3BhY2U6IHRydWUsXG4gICAgICAgICAgICBhcHBseVRvRWRpdGFibGVPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZTogdHJ1ZVxuICAgICAgICAgIH0sIFtcInNwYW5cIl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgX3Jhbmd5Q1NTLmFwcGx5VG9SYW5nZShfcmFuZ3lSYW5nZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vdmFyIGlkID0gJGhlbC5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiKS5wYXIuZ2V0U21pbCgpLnNwaW5lSXRlbUlkO1xuICAgICAgICB2YXIgaWQgPSBwYXIuZ2V0U21pbCgpLnNwaW5lSXRlbUlkO1xuICAgICAgICBfcmVhZGVyLmFkZEhpZ2hsaWdodChpZCwgcGFyLmNmaS5wYXJ0aWFsUmFuZ2VDZmksIEhJR0hMSUdIVF9JRCxcbiAgICAgICAgICBcImhpZ2hsaWdodFwiLCAvL1widW5kZXJsaW5lXCJcbiAgICAgICAgICB1bmRlZmluZWQgLy8gc3R5bGVzXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gLS0tLSBDRklcbiAgLy8gICAgIFxuICAvLyAgICAgZnVuY3Rpb24gZ2V0Rmlyc3RUZXh0Tm9kZShub2RlKVxuICAvLyAgICAge1xuICAvLyAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSlcbiAgLy8gICAgICAgICB7XG4gIC8vICAgICAgICAgICAgIGlmIChub2RlLnRleHRDb250ZW50LnRyaW0oKS5sZW5ndGggPiAwKVxuICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICAgIFxuICAvLyAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKVxuICAvLyAgICAgICAgIHtcbiAgLy8gICAgICAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZE5vZGVzW2ldO1xuICAvLyAgICAgICAgICAgICB2YXIgZmlyc3QgPSBnZXRGaXJzdFRleHROb2RlKGNoaWxkKTtcbiAgLy8gICAgICAgICAgICAgaWYgKGZpcnN0KVxuICAvLyAgICAgICAgICAgICB7XG4gIC8vICAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3Q7XG4gIC8vICAgICAgICAgICAgIH1cbiAgLy8gICAgICAgICB9XG4gIC8vICAgICAgICAgXG4gIC8vICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgLy8gICAgIH1cbiAgLy8gICAgIFxuICAvLyAgICAgZnVuY3Rpb24gZ2V0TGFzdFRleHROb2RlKG5vZGUpXG4gIC8vICAgICB7XG4gIC8vICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKVxuICAvLyAgICAgICAgIHtcbiAgLy8gICAgICAgICAgICAgaWYgKG5vZGUudGV4dENvbnRlbnQudHJpbSgpLmxlbmd0aCA+IDApXG4gIC8vICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgLy8gICAgICAgICB9XG4gIC8vICAgICAgICAgXG4gIC8vICAgICAgICAgZm9yICh2YXIgaSA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pXG4gIC8vICAgICAgICAge1xuICAvLyAgICAgICAgICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkTm9kZXNbaV07XG4gIC8vICAgICAgICAgICAgIHZhciBsYXN0ID0gZ2V0TGFzdFRleHROb2RlKGNoaWxkKTtcbiAgLy8gICAgICAgICAgICAgaWYgKGxhc3QpXG4gIC8vICAgICAgICAgICAgIHtcbiAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBsYXN0O1xuICAvLyAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICAgIFxuICAvLyAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIC8vICAgICB9XG4gIC8vICAgICBcblxuICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoX2hpZ2hsaWdodGVkQ2ZpUGFyKSB7XG4gICAgICB2YXIgZG9jID0gX2hpZ2hsaWdodGVkQ2ZpUGFyLmNmaS5jZmlUZXh0UGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICBpZiAoVVNFX1JBTkdZKSB7XG4gICAgICAgIGlmIChfcmFuZ3lDU1MgJiYgX3Jhbmd5UmFuZ2UuTU9fY3JlYXRlQ3NzQ2xhc3NBcHBsaWVyKSB7XG4gICAgICAgICAgX3Jhbmd5Q1NTLnVuZG9Ub1JhbmdlKF9yYW5neVJhbmdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgd2hpbGUgKCh0b1JlbW92ZSA9IGRvYy5nZXRFbGVtZW50QnlJZChISUdITElHSFRfSUQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHR4dCA9IHRvUmVtb3ZlLnRleHRDb250ZW50OyAvLyBUT0RPOiBpbm5lckhUTUw/IG9yIGJldHRlcjogaGFzQ2hpbGROb2RlcyBsb29wICsgZGV0YWNoIGFuZCByZS1hdHRhY2hcbiAgICAgICAgICAgIHZhciB0eHROb2RlID0gZG9jLmNyZWF0ZVRleHROb2RlKHR4dCk7XG5cbiAgICAgICAgICAgIHRvUmVtb3ZlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHR4dE5vZGUsIHRvUmVtb3ZlKTtcbiAgICAgICAgICAgIHR4dE5vZGUucGFyZW50Tm9kZS5ub3JtYWxpemUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL19yYW5neUNTUyA9IHVuZGVmaW5lZDtcbiAgICAgICAgX3Jhbmd5UmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIF9yZWFkZXIucmVtb3ZlSGlnaGxpZ2h0KEhJR0hMSUdIVF9JRCk7XG5cbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgd2hpbGUgKCh0b1JlbW92ZSA9IGRvYy5nZXRFbGVtZW50QnlJZChcInN0YXJ0LVwiICsgSElHSExJR0hUX0lEKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidG9SZW1vdmUgU1RBUlRcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0b1JlbW92ZSk7XG4gICAgICAgICAgICB0b1JlbW92ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvUmVtb3ZlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKCh0b1JlbW92ZSA9IGRvYy5nZXRFbGVtZW50QnlJZChcImVuZC1cIiArIEhJR0hMSUdIVF9JRCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRvUmVtb3ZlIEVORFwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRvUmVtb3ZlKTtcbiAgICAgICAgICAgIHRvUmVtb3ZlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodG9SZW1vdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfaGlnaGxpZ2h0ZWRDZmlQYXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG5cblxuXG4gICAgaWYgKF9oaWdobGlnaHRlZEVsZW1lbnRQYXIpIHtcblxuICAgICAgdmFyIHNlcSA9IHRoaXMuYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkoX2hpZ2hsaWdodGVkRWxlbWVudFBhcik7XG4gICAgICB2YXIgZWxlbWVudCA9IHNlcS5lbGVtZW50O1xuICAgICAgaWYgKHRoaXMuaW5jbHVkZVBhcldoZW5BZGp1c3RpbmdUb1NlcVN5bmNHcmFudWxhcml0eSB8fCBfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyICE9PSBzZXEpIHtcbiAgICAgICAgJChfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyLmVsZW1lbnQpLnJlbW92ZUNsYXNzKERFRkFVTFRfTU9fU1VCX1NZTkNfQ0xBU1MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3BsYXliYWNrQWN0aXZlQ2xhc3MgJiYgX3BsYXliYWNrQWN0aXZlQ2xhc3MgIT09IFwiXCIpIHtcbiAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiTU8gUkVTRVQgcGxheWJhY2tBY3RpdmVDbGFzczogXCIgKyBfcGxheWJhY2tBY3RpdmVDbGFzcyk7XG4gICAgICAgICQoZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkucmVtb3ZlQ2xhc3MoX3BsYXliYWNrQWN0aXZlQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2FjdGl2ZUNsYXNzICYmIF9hY3RpdmVDbGFzcyAhPT0gXCJcIikge1xuICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJNTyBSRVNFVCBhY3RpdmVDbGFzczogXCIgKyBfYWN0aXZlQ2xhc3MpO1xuICAgICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKF9hY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICAvL2Vsc2VcbiAgICAgIC8ve1xuICAgICAgLy9jb25zb2xlLmRlYnVnKFwiTU8gUkVTRVQgYWN0aXZlIE5PIENMQVNTOiBcIiArIF9hY3RpdmVDbGFzcyk7XG4gICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKERFRkFVTFRfTU9fQUNUSVZFX0NMQVNTKTtcbiAgICAgIC8vJChlbGVtZW50KS5jc3MoXCJiYWNrZ3JvdW5kXCIsICcnKTtcbiAgICAgIC8vfVxuXG4gICAgICBfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIF9hY3RpdmVDbGFzcyA9IFwiXCI7XG4gICAgX3BsYXliYWNrQWN0aXZlQ2xhc3MgPSBcIlwiO1xuICB9O1xuXG4gIHRoaXMuYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkgPSBmdW5jdGlvbihwYXIpIHtcbiAgICBpZiAoIXBhcikgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIHZhciBzeW5jID0gX3JlYWRlci52aWV3ZXJTZXR0aW5ncygpLm1lZGlhT3ZlcmxheXNTeW5jaHJvbml6YXRpb25HcmFudWxhcml0eTtcbiAgICBpZiAoc3luYyAmJiBzeW5jLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBlbGVtZW50ID0gcGFyLmVsZW1lbnQgfHwgKHBhci5jZmkgPyBwYXIuY2ZpLmNmaVRleHRQYXJlbnQgOiB1bmRlZmluZWQpO1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJhZGp1c3RQYXJUb1NlcVN5bmNHcmFudWxhcml0eSAhZWxlbWVudCA/Pz9cIik7XG4gICAgICAgIHJldHVybiBwYXI7IC8vIHNob3VsZCBuZXZlciBoYXBwZW4hXG4gICAgICB9XG5cbiAgICAgIHZhciBzZXEgPSBwYXIuZ2V0Rmlyc3RTZXFBbmNlc3RvcldpdGhFcHViVHlwZShzeW5jLCB0aGlzLmluY2x1ZGVQYXJXaGVuQWRqdXN0aW5nVG9TZXFTeW5jR3JhbnVsYXJpdHkpO1xuICAgICAgaWYgKHNlcSAmJiBzZXEuZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gc2VxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYXI7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lZGlhT3ZlcmxheUVsZW1lbnRIaWdobGlnaHRlciIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vIE1vZGlmaWVkIGJ5IERhbmllbCBXZWNrXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciBBdWRpb1BsYXllciA9IHJlcXVpcmUoJy4vYXVkaW8tcGxheWVyJylcbnZhciBFdmVudHMgPSByZXF1aXJlKCcuLi9ldmVudHMnKVxudmFyIE1lZGlhT3ZlcmxheUVsZW1lbnRIaWdobGlnaHRlciA9IHJlcXVpcmUoJy4vbWVkaWEtb3ZlcmxheS1lbGVtZW50LWhpZ2hsaWdodGVyJylcbnZhciBSZXNvbHZlQ29udGVudFJlZiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVzb2x2ZS1jb250ZW50LXJlZicpXG52YXIgU2Nyb2xsVmlldyA9IHJlcXVpcmUoJy4vc2Nyb2xsLXZpZXcnKVxudmFyIFNtaWxJdGVyYXRvciA9IHJlcXVpcmUoJy4uL21vZGVscy9zbWlsLWl0ZXJhdG9yJylcblxuLyoqXG4gKlxuICogQHBhcmFtIHJlYWRlclxuICogQHBhcmFtIG9uU3RhdHVzQ2hhbmdlZFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1lZGlhT3ZlcmxheVBsYXllcihyZWFkZXIsIG9uU3RhdHVzQ2hhbmdlZCkge1xuXG5cbiAgdmFyIF9zbWlsSXRlcmF0b3IgPSB1bmRlZmluZWQ7XG5cbiAgdmFyIF9hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcihvblN0YXR1c0NoYW5nZWQsIG9uQXVkaW9Qb3NpdGlvbkNoYW5nZWQsIG9uQXVkaW9FbmRlZCwgb25QbGF5LCBvblBhdXNlKTtcblxuICB2YXIgX3R0c0lzUGxheWluZyA9IGZhbHNlO1xuICB2YXIgX2N1cnJlbnRUVFMgPSB1bmRlZmluZWQ7XG4gIHZhciBfZW5hYmxlSFRNTFNwZWVjaCA9IHRydWUgJiYgdHlwZW9mIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMgIT09IFwidW5kZWZpbmVkXCIgJiYgc3BlZWNoU3ludGhlc2lzICE9IG51bGw7IC8vIHNldCB0byBmYWxzZSB0byBmb3JjZSBcIm5hdGl2ZVwiIHBsYXRmb3JtIFRUUyBlbmdpbmUsIHJhdGhlciB0aGFuIEhUTUwgU3BlZWNoIEFQSVxuXG4gIHZhciBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlID0gdW5kZWZpbmVkO1xuICAvL3ZhciBfc2tpcFRUU0VuZEV2ZW50ID0gZmFsc2U7XG4gIHZhciBUT0tFTklaRV9UVFMgPSBmYWxzZTtcblxuICB2YXIgX2VtYmVkZGVkSXNQbGF5aW5nID0gZmFsc2U7XG4gIHZhciBfY3VycmVudEVtYmVkZGVkID0gdW5kZWZpbmVkO1xuXG5cbiAgdGhpcy5pc1BsYXlpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX2F1ZGlvUGxheWVyLmlzUGxheWluZygpIHx8IF90dHNJc1BsYXlpbmcgfHwgX2VtYmVkZGVkSXNQbGF5aW5nIHx8IF9ibGFua1BhZ2VQbGF5ZXI7XG4gIH1cblxuICAvL3ZhciBfY3VycmVudFBhZ2luYXRpb24gPSB1bmRlZmluZWQ7XG4gIHZhciBfcGFja2FnZSA9IHJlYWRlci5wYWNrYWdlKCk7XG4gIHZhciBfc2V0dGluZ3MgPSByZWFkZXIudmlld2VyU2V0dGluZ3MoKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgX2VsZW1lbnRIaWdobGlnaHRlciA9IG5ldyBNZWRpYU92ZXJsYXlFbGVtZW50SGlnaGxpZ2h0ZXIocmVhZGVyKTtcblxuICByZWFkZXIub24oRXZlbnRzLlJFQURFUl9WSUVXX0RFU1RST1lFRCwgZnVuY3Rpb24oKSB7XG5cbiAgICBzZWxmLnJlc2V0KCk7XG5cbiAgfSk7XG5cblxuICB0aGlzLmFwcGx5U3R5bGVzID0gZnVuY3Rpb24oKSB7XG4gICAgX2VsZW1lbnRIaWdobGlnaHRlci5yZURvKCk7XG4gIH07XG5cbiAgLy9cbiAgLy8gc2hvdWxkIHVzZSB0aGlzLm9uU2V0dGluZ3NBcHBsaWVkKCkgaW5zdGVhZCFcbiAgLy8gICAgdGhpcy5zZXRSYXRlID0gZnVuY3Rpb24ocmF0ZSkge1xuICAvLyAgICAgICAgX2F1ZGlvUGxheWVyLnNldFJhdGUocmF0ZSk7XG4gIC8vICAgIH07XG4gIC8vICAgIHRoaXMuc2V0Vm9sdW1lID0gZnVuY3Rpb24odm9sdW1lKSB7XG4gIC8vICAgICAgICBfYXVkaW9QbGF5ZXIuc2V0Vm9sdW1lKHZvbHVtZSk7XG4gIC8vICAgIH07XG5cblxuICB0aGlzLm9uU2V0dGluZ3NBcHBsaWVkID0gZnVuY3Rpb24oKSB7XG4gICAgLy9jb25zb2xlLmRlYnVnKF9zZXR0aW5ncyk7XG4gICAgX2F1ZGlvUGxheWVyLnNldFJhdGUoX3NldHRpbmdzLm1lZGlhT3ZlcmxheXNSYXRlKTtcbiAgICBfYXVkaW9QbGF5ZXIuc2V0Vm9sdW1lKF9zZXR0aW5ncy5tZWRpYU92ZXJsYXlzVm9sdW1lIC8gMTAwLjApO1xuICB9O1xuICBzZWxmLm9uU2V0dGluZ3NBcHBsaWVkKCk7XG4gIC8vUmVhZGl1bVNESy5cbiAgcmVhZGVyLm9uKEV2ZW50cy5TRVRUSU5HU19BUFBMSUVELCB0aGlzLm9uU2V0dGluZ3NBcHBsaWVkLCB0aGlzKTtcblxuICAvKlxuICB2YXIgbGFzdEVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gIHZhciBsYXN0RWxlbWVudENvbG9yID0gXCJcIjtcbiAgKi9cblxuICB2YXIgX3dhc1BsYXlpbmdBdERvY0xvYWRTdGFydCA9IGZhbHNlO1xuICB0aGlzLm9uRG9jTG9hZFN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gMSkgUmVhZGl1bVNESy5FdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FEX1NUQVJUXG4gICAgLy8gKG1heWJlIDItcGFnZSBmaXhlZC1sYXlvdXQgb3IgcmVmbG93YWJsZSBzcHJlYWQgPT0gMiBkb2N1bWVudHMgPT0gMnggZXZlbnRzKVxuICAgIC8vIE1PUExheWVyLm9uRG9jTG9hZCgpXG5cbiAgICAvLyAyKSBSZWFkaXVtU0RLLkV2ZW50cy5DT05URU5UX0RPQ1VNRU5UX0xPQURFRFxuICAgIC8vIChtYXliZSAyLXBhZ2UgZml4ZWQtbGF5b3V0IG9yIHJlZmxvd2FibGUgc3ByZWFkID09IDIgZG9jdW1lbnRzID09IDJ4IGV2ZW50cylcbiAgICAvL19tZWRpYU92ZXJsYXlEYXRhSW5qZWN0b3IuYXR0YWNoTWVkaWFPdmVybGF5RGF0YSgkaWZyYW1lLCBzcGluZUl0ZW0sIF92aWV3ZXJTZXR0aW5ncyk7XG5cbiAgICAvLyAzKSBSZWFkaXVtU0RLLkV2ZW50cy5QQUdJTkFUSU9OX0NIQU5HRUQgKGxheW91dCBmaW5pc2hlZCwgbm90aWZpZWQgYmVmb3JlIHJlc3Qgb2YgYXBwLCBqdXN0IG9uY2UpXG4gICAgLy8gTU9QTGF5ZXIub25QYWdlQ2hhbmdlZCgpXG5cbiAgICB2YXIgd2FzUGxheWluZyA9IHNlbGYuaXNQbGF5aW5nKCk7XG4gICAgaWYgKHdhc1BsYXlpbmcpIHtcbiAgICAgIF93YXNQbGF5aW5nQXREb2NMb2FkU3RhcnQgPSB0cnVlO1xuICAgICAgc2VsZi5wYXVzZSgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgX2xhc3RQYWdpbmF0aW9uRGF0YSA9IHVuZGVmaW5lZDtcblxuICB0aGlzLm9uUGFnZUNoYW5nZWQgPSBmdW5jdGlvbihwYWdpbmF0aW9uRGF0YSkge1xuXG4gICAgX2xhc3RQYWdpbmF0aW9uRGF0YSA9IHBhZ2luYXRpb25EYXRhO1xuXG4gICAgdmFyIHdhc1BhdXNlZEJlY2F1c2VOb0F1dG9OZXh0U21pbCA9IF93YXNQYXVzZWRCZWNhdXNlTm9BdXRvTmV4dFNtaWw7XG4gICAgX3dhc1BhdXNlZEJlY2F1c2VOb0F1dG9OZXh0U21pbCA9IGZhbHNlO1xuXG4gICAgdmFyIHdhc1BsYXlpbmdBdERvY0xvYWRTdGFydCA9IF93YXNQbGF5aW5nQXREb2NMb2FkU3RhcnQ7XG4gICAgX3dhc1BsYXlpbmdBdERvY0xvYWRTdGFydCA9IGZhbHNlO1xuXG4gICAgaWYgKCFwYWdpbmF0aW9uRGF0YSkge1xuICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vICAgICAgICBpZiAocGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8pXG4gICAgLy8gICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgIF9jdXJyZW50UGFnaW5hdGlvbiA9IHBhZ2luYXRpb25EYXRhLnBhZ2luYXRpb25JbmZvO1xuICAgIC8vICAgICAgICB9XG5cbiAgICAvKlxuICAgIGlmIChsYXN0RWxlbWVudClcbiAgICB7XG4gICAgICAgICQobGFzdEVsZW1lbnQpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgbGFzdEVsZW1lbnRDb2xvcik7XG4gICAgICAgIGxhc3RFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAqL1xuXG4gICAgdmFyIGVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgdmFyIGlzQ2ZpVGV4dFJhbmdlID0gZmFsc2U7XG5cbiAgICB2YXIgZmFrZU9wZlJvb3QgPSBcIi85OSFcIjtcbiAgICB2YXIgZXB1YkNmaVByZWZpeCA9IFwiZXB1YmNmaVwiO1xuXG4gICAgaWYgKHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCB8fCBwYWdpbmF0aW9uRGF0YS5pbml0aWF0b3IgPT0gc2VsZikge1xuICAgICAgdmFyIHNwaW5lSXRlbXMgPSByZWFkZXIuZ2V0TG9hZGVkU3BpbmVJdGVtcygpO1xuXG4gICAgICB2YXIgcnRsID0gcmVhZGVyLnNwaW5lKCkuaXNSaWdodFRvTGVmdCgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gKHJ0bCA/IChzcGluZUl0ZW1zLmxlbmd0aCAtIDEpIDogMCk7IHJ0bCAmJiBpID49IDAgfHwgIXJ0bCAmJiBpIDwgc3BpbmVJdGVtcy5sZW5ndGg7IGkgKz0gKHJ0bCA/IC0xIDogMSkpIHtcbiAgICAgICAgdmFyIHNwaW5lSXRlbSA9IHNwaW5lSXRlbXNbaV07XG4gICAgICAgIGlmIChwYWdpbmF0aW9uRGF0YS5zcGluZUl0ZW0gJiYgcGFnaW5hdGlvbkRhdGEuc3BpbmVJdGVtICE9IHNwaW5lSXRlbSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCAmJiBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQuaW5kZXhPZihlcHViQ2ZpUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgIF9lbGVtZW50SGlnaGxpZ2h0ZXIucmVzZXQoKTsgLy8gZW5zdXJlIGNsZWFuIERPTSAobm8gQ0ZJIHNwYW4gbWFya2VycylcblxuICAgICAgICAgIHZhciBwYXJ0aWFsID0gcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkLnN1YnN0cihlcHViQ2ZpUHJlZml4Lmxlbmd0aCArIDEsIHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZC5sZW5ndGggLSBlcHViQ2ZpUHJlZml4Lmxlbmd0aCAtIDIpO1xuXG4gICAgICAgICAgaWYgKHBhcnRpYWwuaW5kZXhPZihmYWtlT3BmUm9vdCkgPT09IDApIHtcbiAgICAgICAgICAgIHBhcnRpYWwgPSBwYXJ0aWFsLnN1YnN0cihmYWtlT3BmUm9vdC5sZW5ndGgsIHBhcnRpYWwubGVuZ3RoIC0gZmFrZU9wZlJvb3QubGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhwYXJ0aWFsKTtcbiAgICAgICAgICB2YXIgcGFydHMgPSBwYXJ0aWFsLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICBpZiAocGFydHMgJiYgcGFydHMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2ZpID0gcGFydHNbMF0gKyBwYXJ0c1sxXTtcbiAgICAgICAgICAgICAgdmFyICRlbGVtZW50ID0gcmVhZGVyLmdldEVsZW1lbnRCeUNmaShzcGluZUl0ZW0sIGNmaSwgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl0pO1xuXG4gICAgICAgICAgICAgIGVsZW1lbnQgPSAoJGVsZW1lbnQgJiYgJGVsZW1lbnQubGVuZ3RoID4gMCkgPyAkZWxlbWVudFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy92YXIgY2ZpID0gXCJlcHViY2ZpKFwiICsgcGFydGlhbCArIFwiKVwiO1xuICAgICAgICAgICAgICAvL3ZhciAkZWxlbWVudCA9IEVQVUJjZmkuZ2V0VGFyZ2V0RWxlbWVudFdpdGhQYXJ0aWFsQ0ZJKGNmaSwgRE9DKTtcbiAgICAgICAgICAgICAgdmFyICRlbGVtZW50ID0gcmVhZGVyLmdldEVsZW1lbnRCeUNmaShzcGluZUl0ZW0sIHBhcnRpYWwsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdKTtcblxuICAgICAgICAgICAgICBlbGVtZW50ID0gKCRlbGVtZW50ICYmICRlbGVtZW50Lmxlbmd0aCA+IDApID8gJGVsZW1lbnRbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgaWYgKHBhZ2luYXRpb25EYXRhLmluaXRpYXRvciA9PSBzZWxmICYmICFwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQpIHtcbiAgICAgICAgICAgIHZhciAkZWxlbWVudCA9IHJlYWRlci5nZXRFbGVtZW50KHNwaW5lSXRlbSwgXCJib2R5XCIpO1xuICAgICAgICAgICAgZWxlbWVudCA9ICgkZWxlbWVudCAmJiAkZWxlbWVudC5sZW5ndGggPiAwKSA/ICRlbGVtZW50WzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSByZWFkZXIuZ2V0RWxlbWVudEJ5SWQoc3BpbmVJdGVtLCBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQpO1xuICAgICAgICAgICAgZWxlbWVudCA9ICgkZWxlbWVudCAmJiAkZWxlbWVudC5sZW5ndGggPiAwKSA/ICRlbGVtZW50WzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy8oXCIjXCIgKyBSZWFkaXVtU0RLLkhlbHBlcnMuZXNjYXBlSlF1ZXJ5U2VsZWN0b3IocGFnaW5hdGlvbkRhdGEuZWxlbWVudElkKSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJHUkVFTjogXCIgKyBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQpO1xuICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgbGFzdEVsZW1lbnRDb2xvciA9ICQoZWxlbWVudCkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiKTtcbiAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcImdyZWVuXCIpO1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQgQlVUICFlbGVtZW50OiBcIiArIHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHdhc1BsYXlpbmcgPSBzZWxmLmlzUGxheWluZygpIHx8IHdhc1BsYXlpbmdBdERvY0xvYWRTdGFydDtcblxuICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICBpZiAocGFnaW5hdGlvbkRhdGEuaW5pdGlhdG9yICE9PSBzZWxmKSB7XG4gICAgICAgIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcbiAgICAgICAgc2VsZi5yZXNldCgpO1xuXG4gICAgICAgIGlmIChwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQgJiYgZWxlbWVudCkge1xuICAgICAgICAgIGlmICh3YXNQbGF5aW5nIHx8IHdhc1BhdXNlZEJlY2F1c2VOb0F1dG9OZXh0U21pbCkge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkUmVzb2x2ZWQgPSBlbGVtZW50O1xuICAgICAgICAgICAgc2VsZi50b2dnbGVNZWRpYU92ZXJsYXlSZWZyZXNoKHBhZ2luYXRpb25EYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAod2FzUGxheWluZyB8fCB3YXNQYXVzZWRCZWNhdXNlTm9BdXRvTmV4dFNtaWwpIHtcbiAgICAgICAgICBzZWxmLnRvZ2dsZU1lZGlhT3ZlcmxheSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy9wYWdpbmF0aW9uRGF0YS5pbml0aWF0b3IgPT09IHNlbGZcbiAgICAgIC8vXG4gICAgICAvLyAgICAgICAgICAgIGlmICghcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkKVxuICAgICAgLy8gICAgICAgICAgICB7XG4gICAgICAvLyAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiIXBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZFwiKTtcbiAgICAgIC8vICAgICAgICAgICAgICAgIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcbiAgICAgIC8vICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgIC8vICAgICAgICAgICAgfVxuXG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIiFlbGVtZW50OiBcIiArIHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCk7XG4gICAgICAgIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbW9EYXRhID0gJChlbGVtZW50KS5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiKTtcbiAgICAgIGlmICghbW9EYXRhKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCIhbW9EYXRhOiBcIiArIHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCk7XG4gICAgICAgIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyVG9QbGF5ID0gbW9EYXRhLnBhciA/IG1vRGF0YS5wYXIgOiBtb0RhdGEucGFyc1swXTtcblxuICAgICAgaWYgKG1vRGF0YS5wYXJzKSB7XG4gICAgICAgIGZvciAodmFyIGlQYXIgPSAwOyBpUGFyIDwgbW9EYXRhLnBhcnMubGVuZ3RoOyBpUGFyKyspIHtcbiAgICAgICAgICB2YXIgcCA9IG1vRGF0YS5wYXJzW2lQYXJdO1xuXG4gICAgICAgICAgaWYgKHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCA9PT0gcC5jZmkuc21pbFRleHRTcmNDZmkpIHtcbiAgICAgICAgICAgIHBhclRvUGxheSA9IHA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcGxheVBhcihwYXJUb1BsYXkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBub1JldmVyc2VEYXRhID0gIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5lbGVtZW50ICYmICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuY2ZpO1xuICAgIGlmIChub1JldmVyc2VEYXRhKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiISEgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmVsZW1lbnQgPz9cIik7XG4gICAgfVxuXG4gICAgLy9jb25zb2xlLmRlYnVnKFwiKysrPiBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQ6IFwiICsgcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkICsgXCIgLy8vIFwiICsgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLnRleHQuc3JjRmlsZSArIFwiICMgXCIgKyBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkKTsgLy9QYWdlT3BlblJlcXVlc3QuZWxlbWVudElkXG5cblxuICAgIGlmIChwYWdpbmF0aW9uRGF0YS5pbml0aWF0b3IgPT0gc2VsZikge1xuICAgICAgdmFyIG5vdFNhbWVUYXJnZXRJRCA9IHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCAmJiBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQgIT09IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQ7XG5cbiAgICAgIGlmIChub3RTYW1lVGFyZ2V0SUQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIiEhIHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCAhPT0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vdFNhbWVUYXJnZXRJRCB8fCBub1JldmVyc2VEYXRhKSB7XG4gICAgICAgIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAod2FzUGxheWluZykge1xuICAgICAgICBoaWdobGlnaHRDdXJyZW50RWxlbWVudCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGxheUN1cnJlbnRQYXIoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF3YXNQbGF5aW5nICYmICF3YXNQYXVzZWRCZWNhdXNlTm9BdXRvTmV4dFNtaWwpIHtcbiAgICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkKSB7XG4gICAgICAgIC8vc2VsZi5yZXNldCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFnaW5hdGlvbkRhdGEuZWxlbWVudElkICYmICFlbGVtZW50KSB7XG4gICAgICAgIC8vc2VsZi5yZXNldCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQpIHtcbiAgICAgICAgcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkUmVzb2x2ZWQgPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBzZWxmLnRvZ2dsZU1lZGlhT3ZlcmxheVJlZnJlc2gocGFnaW5hdGlvbkRhdGEpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBwbGF5UGFyKHBhcikge1xuXG4gICAgdmFyIHBhclNtaWwgPSBwYXIuZ2V0U21pbCgpO1xuICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCBfc21pbEl0ZXJhdG9yLnNtaWwgIT0gcGFyU21pbCkge1xuICAgICAgX3NtaWxJdGVyYXRvciA9IG5ldyBTbWlsSXRlcmF0b3IocGFyU21pbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9zbWlsSXRlcmF0b3IucmVzZXQoKTtcbiAgICB9XG5cbiAgICBfc21pbEl0ZXJhdG9yLmdvVG9QYXIocGFyKTtcblxuICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwicGxheVBhciAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsYXlDdXJyZW50UGFyKCk7XG4gIH1cblxuICB2YXIgY2xpcEJlZ2luT2Zmc2V0ID0gMC4wO1xuXG4gIHZhciBfYmxhbmtQYWdlUGxheWVyID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGluaXRCbGFua1BhZ2VQbGF5ZXIoKSB7XG4gICAgc2VsZi5yZXNldEJsYW5rUGFnZSgpO1xuXG4gICAgX2JsYW5rUGFnZVBsYXllciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgIGlmICghX2JsYW5rUGFnZVBsYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYucmVzZXRCbGFua1BhZ2UoKTtcblxuICAgICAgaWYgKCFfc21pbEl0ZXJhdG9yIHx8ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGF1ZGlvQ3VycmVudFRpbWUgPSAwLjA7XG4gICAgICAvL2NvbnNvbGUubG9nKFwiQkxBTksgRU5ELlwiKTtcbiAgICAgIC8vbmV4dFNtaWwodHJ1ZSk7XG4gICAgICBvbkF1ZGlvUG9zaXRpb25DaGFuZ2VkKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpby5jbGlwRW5kICsgMC4xLCAyKTtcblxuICAgIH0sIDIwMDApO1xuXG4gICAgb25TdGF0dXNDaGFuZ2VkKHtcbiAgICAgIGlzUGxheWluZzogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheUN1cnJlbnRQYXIoKSB7XG4gICAgX3dhc1BsYXlpbmdTY3JvbGxpbmcgPSBmYWxzZTtcblxuICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwicGxheUN1cnJlbnRQYXIgIV9zbWlsSXRlcmF0b3IgfHwgIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhciA/Pz9cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFfc21pbEl0ZXJhdG9yLnNtaWwuaWQpIHtcbiAgICAgIF9hdWRpb1BsYXllci5yZXNldCgpO1xuXG4gICAgICBzZWxmLnJlc2V0VFRTKCk7XG4gICAgICBzZWxmLnJlc2V0RW1iZWRkZWQoKTtcblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgaW5pdEJsYW5rUGFnZVBsYXllcigpO1xuICAgICAgfSwgMTAwKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpby5zcmMpIHtcbiAgICAgIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcblxuICAgICAgLy8gICAgICAgICAgICBpZiAoX2N1cnJlbnRUVFMpXG4gICAgICAvLyAgICAgICAgICAgIHtcbiAgICAgIC8vICAgICAgICAgICAgICAgIF9za2lwVFRTRW5kZWQgPSB0cnVlO1xuICAgICAgLy8gICAgICAgICAgICB9XG5cbiAgICAgIF9hdWRpb1BsYXllci5yZXNldCgpO1xuXG4gICAgICB2YXIgZWxlbWVudCA9IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5lbGVtZW50O1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgYXVkaW9DdXJyZW50VGltZSA9IDAuMDtcblxuICAgICAgICB2YXIgbmFtZSA9IGVsZW1lbnQubm9kZU5hbWUgPyBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5hbWUgPT09IFwiYXVkaW9cIiB8fCBuYW1lID09PSBcInZpZGVvXCIpIHtcbiAgICAgICAgICBzZWxmLnJlc2V0VFRTKCk7XG4gICAgICAgICAgc2VsZi5yZXNldEJsYW5rUGFnZSgpO1xuXG4gICAgICAgICAgaWYgKF9jdXJyZW50RW1iZWRkZWQpIHtcbiAgICAgICAgICAgIHNlbGYucmVzZXRFbWJlZGRlZCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9jdXJyZW50RW1iZWRkZWQgPSBlbGVtZW50O1xuXG4gICAgICAgICAgX2N1cnJlbnRFbWJlZGRlZC5wYXVzZSgpO1xuXG4gICAgICAgICAgLy8gRE9ORSBhdCByZWFkZXJfdmlldy5hdHRhY2hNTygpXG4gICAgICAgICAgLy8kKF9jdXJyZW50RW1iZWRkZWQpLmF0dHIoXCJwcmVsb2FkXCIsIFwiYXV0b1wiKTtcblxuICAgICAgICAgIF9jdXJyZW50RW1iZWRkZWQuY3VycmVudFRpbWUgPSAwO1xuXG4gICAgICAgICAgX2N1cnJlbnRFbWJlZGRlZC5wbGF5KCk7XG5cbiAgICAgICAgICAkKF9jdXJyZW50RW1iZWRkZWQpLm9uKFwiZW5kZWRcIiwgc2VsZi5vbkVtYmVkZGVkRW5kKTtcblxuICAgICAgICAgIF9lbWJlZGRlZElzUGxheWluZyA9IHRydWU7XG5cbiAgICAgICAgICAvLyBnaXZlcyB0aGUgYXVkaW8gcGxheWVyIHNvbWUgZGlzcGF0Y2hlciB0aW1lIHRvIHJhaXNlIHRoZSBvblBhdXNlIGV2ZW50XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG9uU3RhdHVzQ2hhbmdlZCh7XG4gICAgICAgICAgICAgIGlzUGxheWluZzogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgODApO1xuXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkub24oXCJzZWVrZWRcIiwgZnVuY3Rpb24oKVxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLm9mZihcInNlZWtlZFwiLCBvblNlZWtlZCk7XG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYucmVzZXRFbWJlZGRlZCgpO1xuICAgICAgICAgIHNlbGYucmVzZXRCbGFua1BhZ2UoKTtcblxuICAgICAgICAgIF9jdXJyZW50VFRTID0gZWxlbWVudC50ZXh0Q29udGVudDsgLy8uaW5uZXJUZXh0IChDU1MgZGlzcGxheSBzZW5zaXRpdmUgKyBzY3JpcHQgKyBzdHlsZSB0YWdzKVxuICAgICAgICAgIGlmICghX2N1cnJlbnRUVFMgfHwgX2N1cnJlbnRUVFMgPT0gXCJcIikge1xuICAgICAgICAgICAgX2N1cnJlbnRUVFMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNwZWFrU3RhcnQoX2N1cnJlbnRUVFMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY2ZpID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmNmaTtcbiAgICAgIGlmIChjZmkpIHtcbiAgICAgICAgYXVkaW9DdXJyZW50VGltZSA9IDAuMDtcbiAgICAgICAgc2VsZi5yZXNldEVtYmVkZGVkKCk7XG4gICAgICAgIHNlbGYucmVzZXRCbGFua1BhZ2UoKTtcblxuICAgICAgICBfZWxlbWVudEhpZ2hsaWdodGVyLnJlc2V0KCk7IC8vIGVuc3VyZSBjbGVhbiBET00gKG5vIENGSSBzcGFuIG1hcmtlcnMpXG5cbiAgICAgICAgdmFyIGRvYyA9IGNmaS5jZmlUZXh0UGFyZW50Lm93bmVyRG9jdW1lbnQ7XG5cbiAgICAgICAgdmFyIHN0YXJ0Q0ZJID0gXCJlcHViY2ZpKFwiICsgY2ZpLnBhcnRpYWxTdGFydENmaSArIFwiKVwiO1xuICAgICAgICB2YXIgaW5mb1N0YXJ0ID0gRVBVQmNmaS5nZXRUZXh0VGVybWludXNJbmZvV2l0aFBhcnRpYWxDRkkoc3RhcnRDRkksIGRvYywgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl0pO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGluZm9TdGFydCk7XG5cbiAgICAgICAgdmFyIGVuZENGSSA9IFwiZXB1YmNmaShcIiArIGNmaS5wYXJ0aWFsRW5kQ2ZpICsgXCIpXCI7XG4gICAgICAgIHZhciBpbmZvRW5kID0gRVBVQmNmaS5nZXRUZXh0VGVybWludXNJbmZvV2l0aFBhcnRpYWxDRkkoZW5kQ0ZJLCBkb2MsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhpbmZvRW5kKTtcblxuICAgICAgICBpZiAocmFuZ3kpIHtcbiAgICAgICAgICAvL2luZm9TdGFydC50ZXh0Tm9kZVswXS5wYXJlbnROb2RlLm93bmVyRG9jdW1lbnRcbiAgICAgICAgICB2YXIgcmFuZ2UgPSByYW5neS5jcmVhdGVSYW5nZShkb2MpOyAvL2NyZWF0ZU5hdGl2ZVJhbmdlXG4gICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBbmRFbmQoXG4gICAgICAgICAgICBpbmZvU3RhcnQudGV4dE5vZGVbMF0sIGluZm9TdGFydC50ZXh0T2Zmc2V0LFxuICAgICAgICAgICAgaW5mb0VuZC50ZXh0Tm9kZVswXSwgaW5mb0VuZC50ZXh0T2Zmc2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBfY3VycmVudFRUUyA9IHJhbmdlLnRvU3RyaW5nKCk7IC8vLnRleHQoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9jdXJyZW50VFRTID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfY3VycmVudFRUUyB8fCBfY3VycmVudFRUUyA9PSBcIlwiKSB7XG4gICAgICAgICAgX2N1cnJlbnRUVFMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3BlYWtTdGFydChfY3VycmVudFRUUyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5yZXNldFRUUygpO1xuICAgICAgc2VsZi5yZXNldEVtYmVkZGVkKCk7XG4gICAgICBzZWxmLnJlc2V0QmxhbmtQYWdlKCk7XG5cbiAgICAgIHZhciBkdXIgPSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEVuZCAtIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpby5jbGlwQmVnaW47XG4gICAgICBpZiAoZHVyIDw9IDAgfHwgY2xpcEJlZ2luT2Zmc2V0ID4gZHVyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCIjIyMgTU8gWFhYIFBBUiBPRkZTRVQ6IFwiICsgY2xpcEJlZ2luT2Zmc2V0ICsgXCIgLyBcIiArIGR1cik7XG4gICAgICAgIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIiMjIyBNTyBQQVIgT0ZGU0VUOiBcIiArIGNsaXBCZWdpbk9mZnNldCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhdWRpb0NvbnRlbnRSZWYgPSBSZXNvbHZlQ29udGVudFJlZihfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uc3JjLCBfc21pbEl0ZXJhdG9yLnNtaWwuaHJlZik7XG5cbiAgICAgIHZhciBhdWRpb1NvdXJjZSA9IF9wYWNrYWdlLnJlc29sdmVSZWxhdGl2ZVVybE1PKGF1ZGlvQ29udGVudFJlZik7XG5cbiAgICAgIHZhciBzdGFydFRpbWUgPSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEJlZ2luICsgY2xpcEJlZ2luT2Zmc2V0O1xuXG4gICAgICAvL2NvbnNvbGUuZGVidWcoXCJQTEFZIFNUQVJUIFRJTUU6IFwiICsgc3RhcnRUaW1lICsgXCIoXCIrX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBCZWdpbitcIiArIFwiK2NsaXBCZWdpbk9mZnNldCtcIilcIik7XG5cbiAgICAgIF9hdWRpb1BsYXllci5wbGF5RmlsZShfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uc3JjLCBhdWRpb1NvdXJjZSwgc3RhcnRUaW1lKTsgLy9fc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuZWxlbWVudCA/IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5lbGVtZW50IDogX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmNmaS5jZmlUZXh0UGFyZW50XG4gICAgfVxuXG4gICAgY2xpcEJlZ2luT2Zmc2V0ID0gMC4wO1xuXG4gICAgaGlnaGxpZ2h0Q3VycmVudEVsZW1lbnQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHRTbWlsKGdvTmV4dCkge1xuICAgIHNlbGYucGF1c2UoKTtcblxuICAgIC8vY29uc29sZS5kZWJ1ZyhcImN1cnJlbnQgU21pbDogXCIgKyBfc21pbEl0ZXJhdG9yLnNtaWwuaHJlZiArIFwiIC8vLyBcIiArIF9zbWlsSXRlcmF0b3Iuc21pbC5pZCk7XG5cbiAgICB2YXIgbmV4dFNtaWwgPSBnb05leHQgPyBfcGFja2FnZS5tZWRpYV9vdmVybGF5LmdldE5leHRTbWlsKF9zbWlsSXRlcmF0b3Iuc21pbCkgOiBfcGFja2FnZS5tZWRpYV9vdmVybGF5LmdldFByZXZpb3VzU21pbChfc21pbEl0ZXJhdG9yLnNtaWwpO1xuICAgIGlmIChuZXh0U21pbCkge1xuXG4gICAgICAvL2NvbnNvbGUuZGVidWcoXCJuZXh0U21pbDogXCIgKyBuZXh0U21pbC5ocmVmICsgXCIgLy8vIFwiICsgbmV4dFNtaWwuaWQpO1xuXG4gICAgICBfc21pbEl0ZXJhdG9yID0gbmV3IFNtaWxJdGVyYXRvcihuZXh0U21pbCk7XG4gICAgICBpZiAoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgIGlmICghZ29OZXh0KSB7XG4gICAgICAgICAgd2hpbGUgKCFfc21pbEl0ZXJhdG9yLmlzTGFzdCgpKSB7XG4gICAgICAgICAgICBfc21pbEl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJvcGVuQ29udGVudFVybCAobmV4dFNtaWwpOiBcIiArIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyYyArIFwiIC0tIFwiICsgX3NtaWxJdGVyYXRvci5zbWlsLmhyZWYpO1xuXG4gICAgICAgIHJlYWRlci5vcGVuQ29udGVudFVybChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIudGV4dC5zcmMsIF9zbWlsSXRlcmF0b3Iuc21pbC5ocmVmLCBzZWxmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJObyBtb3JlIFNNSUxcIik7XG4gICAgICBzZWxmLnJlc2V0KCk7XG4gICAgfVxuICB9XG5cblxuICB2YXIgX3NraXBBdWRpb0VuZGVkID0gZmFsc2U7XG4gIC8vICAgIHZhciBfc2tpcFRUU0VuZGVkID0gZmFsc2U7XG5cbiAgdmFyIGF1ZGlvQ3VycmVudFRpbWUgPSAwLjA7XG5cbiAgdmFyIERJUkVDVElPTl9NQVJLID0gLTk5OTtcblxuICAvLyAgICB2YXIgX2xldFBsYXkgPSBmYWxzZTtcblxuICAvL2Zyb21cbiAgLy8xID0gYXVkaW8gcGxheWVyXG4gIC8vMiA9IGJsYW5rIHBhZ2VcbiAgLy8zID0gdmlkZW8vYXVkaW8gZW1iYmVkZWRcbiAgLy80ID0gVFRTXG4gIC8vNSA9IGF1ZGlvIGVuZFxuICAvLzYgPSB1c2VyIHByZXZpb3VzL25leHQvZXNjYXBlXG4gIGZ1bmN0aW9uIG9uQXVkaW9Qb3NpdGlvbkNoYW5nZWQocG9zaXRpb24sIGZyb20sIHNraXBwaW5nKSB7IC8vbm9MZXRQbGF5XG5cbiAgICBhdWRpb0N1cnJlbnRUaW1lID0gcG9zaXRpb247XG5cbiAgICAvLyAgICAgICAgaWYgKF9sZXRQbGF5KVxuICAgIC8vICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICByZXR1cm47XG4gICAgLy8gICAgICAgIH1cblxuICAgIF9za2lwQXVkaW9FbmRlZCA9IGZhbHNlO1xuICAgIC8vICAgICAgICBfc2tpcFRUU0VuZGVkID0gZmFsc2U7XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IgfHwgIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwYXJGcm9tID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyO1xuXG4gICAgdmFyIGF1ZGlvID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvO1xuXG4gICAgLy92YXIgVE9MRVJBTkNFID0gMC4wNTtcbiAgICBpZiAoXG4gICAgICAvL3Bvc2l0aW9uID49IChhdWRpby5jbGlwQmVnaW4gLSBUT0xFUkFOQ0UpICYmXG4gICAgICBwb3NpdGlvbiA+IERJUkVDVElPTl9NQVJLICYmXG4gICAgICBwb3NpdGlvbiA8PSBhdWRpby5jbGlwRW5kKSB7XG5cbiAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIm9uQXVkaW9Qb3NpdGlvbkNoYW5nZWQ6IFwiICsgcG9zaXRpb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9za2lwQXVkaW9FbmRlZCA9IHRydWU7XG5cbiAgICAvL2NvbnNvbGUuZGVidWcoXCJQTEFZIE5FWFQ6IFwiICsgXCIoXCIgKyBhdWRpby5jbGlwQmVnaW4gKyBcIiAtLSBcIiArIGF1ZGlvLmNsaXBFbmQgKyBcIikgW1wiICsgZnJvbSArIFwiXSBcIiArICBwb3NpdGlvbik7XG4gICAgLy9jb25zb2xlLmRlYnVnKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQpO1xuXG4gICAgdmFyIGlzUGxheWluZyA9IF9hdWRpb1BsYXllci5pc1BsYXlpbmcoKTtcbiAgICBpZiAoaXNQbGF5aW5nICYmIGZyb20gPT09IDYpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJmcm9tIHVzZXJOYXYgX2F1ZGlvUGxheWVyLmlzUGxheWluZygpID8/P1wiKTtcbiAgICB9XG5cbiAgICB2YXIgZ29OZXh0ID0gcG9zaXRpb24gPiBhdWRpby5jbGlwRW5kO1xuXG4gICAgdmFyIGRvTm90TmV4dFNtaWwgPSAhX2F1dG9OZXh0U21pbCAmJiBmcm9tICE9PSA2ICYmIGdvTmV4dDtcblxuICAgIHZhciBzcGluZUl0ZW1JZFJlZiA9IChfc21pbEl0ZXJhdG9yICYmIF9zbWlsSXRlcmF0b3Iuc21pbCAmJiBfc21pbEl0ZXJhdG9yLnNtaWwuc3BpbmVJdGVtSWQpID8gX3NtaWxJdGVyYXRvci5zbWlsLnNwaW5lSXRlbUlkIDogKChfbGFzdFBhZ2luYXRpb25EYXRhICYmIF9sYXN0UGFnaW5hdGlvbkRhdGEuc3BpbmVJdGVtICYmIF9sYXN0UGFnaW5hdGlvbkRhdGEuc3BpbmVJdGVtLmlkcmVmKSA/IF9sYXN0UGFnaW5hdGlvbkRhdGEuc3BpbmVJdGVtLmlkcmVmIDogdW5kZWZpbmVkKTtcbiAgICBpZiAoZG9Ob3ROZXh0U21pbCAmJiBzcGluZUl0ZW1JZFJlZiAmJiBfbGFzdFBhZ2luYXRpb25EYXRhICYmIF9sYXN0UGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8gJiYgX2xhc3RQYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMgJiYgX2xhc3RQYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMubGVuZ3RoID4gMSkge1xuICAgICAgLy92YXIgaVBhZ2UgPSBfbGFzdFBhZ2luYXRpb25EYXRhLnBhZ2luYXRpb25JbmZvLmlzUmlnaHRUb0xlZnQgPyBfbGFzdFBhZ2luYXRpb25EYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlcy5sZW5ndGggLSAxIDogMDtcbiAgICAgIHZhciBpUGFnZSA9IDA7XG5cbiAgICAgIHZhciBvcGVuUGFnZSA9IF9sYXN0UGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzW2lQYWdlXTtcbiAgICAgIGlmIChzcGluZUl0ZW1JZFJlZiA9PT0gb3BlblBhZ2UuaWRyZWYpIHtcbiAgICAgICAgZG9Ob3ROZXh0U21pbCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChnb05leHQpIHtcbiAgICAgIF9zbWlsSXRlcmF0b3IubmV4dCgpO1xuICAgIH0gZWxzZSAvL3Bvc2l0aW9uIDw9IERJUkVDVElPTl9NQVJLXG4gICAge1xuICAgICAgX3NtaWxJdGVyYXRvci5wcmV2aW91cygpO1xuICAgIH1cblxuICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAvL1xuICAgICAgLy8gICAgICAgIGlmICghbm9MZXRQbGF5KVxuICAgICAgLy8gICAgICAgIHtcbiAgICAgIC8vICAgICAgICAgICAgX2xldFBsYXkgPSB0cnVlO1xuICAgICAgLy8gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKClcbiAgICAgIC8vICAgICAgICAgICAge1xuICAgICAgLy8gICAgICAgICAgICAgICAgX2xldFBsYXkgPSBmYWxzZTtcbiAgICAgIC8vICAgICAgICAgICAgICAgIG5leHRTbWlsKGdvTmV4dCk7XG4gICAgICAvLyAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAvLyAgICAgICAgfVxuICAgICAgLy8gICAgICAgIGVsc2VcbiAgICAgIC8vICAgICAgICB7XG4gICAgICAvLyAgICAgICAgICAgIG5leHRTbWlsKGdvTmV4dCk7XG4gICAgICAvLyAgICAgICAgfVxuXG4gICAgICAvL2NvbnNvbGUuZGVidWcoXCJORVhUIFNNSUwgT04gQVVESU8gUE9TXCIpO1xuXG4gICAgICBpZiAoZG9Ob3ROZXh0U21pbCkge1xuICAgICAgICBfd2FzUGF1c2VkQmVjYXVzZU5vQXV0b05leHRTbWlsID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgICAvL3NlbGYucGF1c2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRTbWlsKGdvTmV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy9jb25zb2xlLmRlYnVnKFwiSVRFUjogXCIgKyBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkKTtcblxuICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvKSB7XG4gICAgICBzZWxmLnBhdXNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF9zZXR0aW5ncy5tZWRpYU92ZXJsYXlzU2tpcFNraXBwYWJsZXMpIHtcbiAgICAgIHZhciBza2lwID0gZmFsc2U7XG4gICAgICB2YXIgcGFyZW50ID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyO1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LmlzU2tpcHBhYmxlICYmIHBhcmVudC5pc1NraXBwYWJsZShfc2V0dGluZ3MubWVkaWFPdmVybGF5c1NraXBwYWJsZXMpKSB7XG4gICAgICAgICAgc2tpcCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNraXApIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJNTyBTS0lQOiBcIiArIHBhcmVudC5lcHVidHlwZSk7XG5cbiAgICAgICAgc2VsZi5wYXVzZSgpO1xuXG4gICAgICAgIHZhciBwb3MgPSBnb05leHQgPyBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEVuZCArIDAuMSA6IERJUkVDVElPTl9NQVJLIC0gMTtcblxuICAgICAgICBvbkF1ZGlvUG9zaXRpb25DaGFuZ2VkKHBvcywgZnJvbSwgdHJ1ZSk7IC8vbm9MZXRQbGF5XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBfc2V0dGluZ3MubWVkaWFPdmVybGF5c1N5bmNocm9uaXphdGlvbkdyYW51bGFyaXR5XG4gICAgaWYgKCFpc1BsYXlpbmcgJiYgKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5lbGVtZW50IHx8IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5jZmkgJiYgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmNmaS5jZmlUZXh0UGFyZW50KSkge1xuICAgICAgdmFyIHNjb3BlVG8gPSBfZWxlbWVudEhpZ2hsaWdodGVyLmFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5KF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcik7XG4gICAgICBpZiAoc2NvcGVUbyAmJiBzY29wZVRvICE9PSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgdmFyIHNjb3BlRnJvbSA9IF9lbGVtZW50SGlnaGxpZ2h0ZXIuYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkocGFyRnJvbSk7XG4gICAgICAgIGlmIChzY29wZUZyb20gJiYgKHNjb3BlRnJvbSA9PT0gc2NvcGVUbyB8fCAhZ29OZXh0KSkge1xuICAgICAgICAgIGlmIChzY29wZUZyb20gPT09IHNjb3BlVG8pIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgaWYgKGdvTmV4dCkgX3NtaWxJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgIGVsc2UgX3NtaWxJdGVyYXRvci5wcmV2aW91cygpO1xuICAgICAgICAgICAgfSB3aGlsZSAoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyICYmIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5oYXNBbmNlc3RvcihzY29wZUZyb20pKTtcblxuICAgICAgICAgICAgaWYgKCFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkgbmV4dFNtaWwoZ29OZXh0KVwiKTtcblxuICAgICAgICAgICAgICBpZiAoZG9Ob3ROZXh0U21pbCkge1xuICAgICAgICAgICAgICAgIF93YXNQYXVzZWRCZWNhdXNlTm9BdXRvTmV4dFNtaWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAvL3NlbGYucGF1c2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXh0U21pbChnb05leHQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIkFESlVTVEVEOiBcIiArIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQpO1xuICAgICAgICAgIGlmICghZ29OZXh0KSB7XG4gICAgICAgICAgICB2YXIgbGFuZGVkID0gX2VsZW1lbnRIaWdobGlnaHRlci5hZGp1c3RQYXJUb1NlcVN5bmNHcmFudWxhcml0eShfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpO1xuICAgICAgICAgICAgaWYgKGxhbmRlZCAmJiBsYW5kZWQgIT09IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgICAgICAgICB2YXIgYmFja3VwID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyO1xuXG4gICAgICAgICAgICAgIHZhciBpbm5lclBhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlubmVyUGFyID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyO1xuICAgICAgICAgICAgICAgIF9zbWlsSXRlcmF0b3IucHJldmlvdXMoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB3aGlsZSAoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyICYmIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5oYXNBbmNlc3RvcihsYW5kZWQpKTtcblxuICAgICAgICAgICAgICBpZiAoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgICAgICAgICAgX3NtaWxJdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5oYXNBbmNlc3RvcihsYW5kZWQpKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkgIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5oYXNBbmNlc3RvcihsYW5kZWQpID8/P1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9hc3NlcnQgXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkgcmVhY2hlZCBiZWdpblwiKTtcblxuICAgICAgICAgICAgICAgIF9zbWlsSXRlcmF0b3IucmVzZXQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIgIT09IGlubmVyUGFyKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyICE9PT0gaW5uZXJQYXI/Pz9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkgIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhciA/Pz8/P1wiKTtcbiAgICAgICAgICAgICAgICBfc21pbEl0ZXJhdG9yLmdvVG9QYXIoYmFja3VwKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIkFESlVTVEVEIFBSRVY6IFwiICsgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9hdWRpb1BsYXllci5pc1BsYXlpbmcoKSAmJiBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uc3JjICYmIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpby5zcmMgPT0gX2F1ZGlvUGxheWVyLmN1cnJlbnRTbWlsU3JjKCkgJiYgcG9zaXRpb24gPj0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBCZWdpbiAmJiBwb3NpdGlvbiA8PSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEVuZCkge1xuICAgICAgLy9jb25zb2xlLmRlYnVnKFwiT05MWSBoaWdobGlnaHRDdXJyZW50RWxlbWVudFwiKTtcbiAgICAgIGhpZ2hsaWdodEN1cnJlbnRFbGVtZW50KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy9wb3NpdGlvbiA8PSBESVJFQ1RJT05fTUFSSyBnb2VzIGhlcmUgKGdvdG8gcHJldmlvdXMpOlxuXG4gICAgLy8gICAgICAgICAgICBpZiAoIW5vTGV0UGxheSAmJiBwb3NpdGlvbiA+IERJUkVDVElPTl9NQVJLXG4gICAgLy8gICAgICAgICAgICAgICAgJiYgX2F1ZGlvUGxheWVyLmlzUGxheWluZygpICYmIF9hdWRpb1BsYXllci5zcmNSZWYoKSAhPSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uc3JjKVxuICAgIC8vICAgICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgICAgIF9sZXRQbGF5ID0gdHJ1ZTtcbiAgICAvLyAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKClcbiAgICAvLyAgICAgICAgICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgIF9sZXRQbGF5ID0gZmFsc2U7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgIHBsYXlDdXJyZW50UGFyKCk7XG4gICAgLy8gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAvL1xuICAgIC8vICAgICAgICAgICAgICAgIHBsYXlDdXJyZW50UGFyKCk7XG4gICAgLy9cbiAgICAvLyAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgLy8gICAgICAgICAgICB9XG5cbiAgICBwbGF5Q3VycmVudFBhcigpO1xuICB9XG5cbiAgdGhpcy50b3VjaEluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG9kbyA9IF9hdWRpb1BsYXllci50b3VjaEluaXQoKTtcbiAgICBpZiAodG9kbykge1xuICAgICAgaWYgKF9lbmFibGVIVE1MU3BlZWNoKSB7XG4gICAgICAgIHNwZWFrU3RhcnQoXCJvXCIsIDApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgdG9rZW5pc2VUVFMgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIEJMT0NLX0RFTElNSVRFUlMgPSBbJ3AnLCAnZGl2JywgJ3BhZ2VudW0nLCAndGQnLCAndGFibGUnLCAnbGknLCAndWwnLCAnb2wnXTtcbiAgICB2YXIgQk9VTkRBUllfUFVOQ1RVQVRJT04gPSBbJywnLCAnOycsICcuJywgJy0nLCAnPz8nLCAnPz8nLCAnPycsICchJ107XG4gICAgdmFyIElHTk9SQUJMRV9QVU5DVFVBVElPTiA9IFsnXCInLCAnXFwnJywgJz8/JywgJz8/JywgJz8/JywgJz8/J107XG5cbiAgICB2YXIgZmx1c2ggPSBmdW5jdGlvbih0LCByKSB7XG4gICAgICBpZiAodC53b3JkLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvcyA9IHQudGV4dC5sZW5ndGg7XG4gICAgICByLnNwYW5NYXBbcG9zXSA9IHQuY291bnRlcjtcbiAgICAgIHQudGV4dCArPSB0LndvcmQ7XG4gICAgICB0Lm1hcmt1cCArPSB0Lmh0bWwuc3Vic3RyaW5nKDAsIHQud29yZFN0YXJ0KSArXG4gICAgICAgICc8c3BhbiBjbGFzcz1cInR0c19vZmZcIiBpZD1cInR0c18nICsgdC5jb3VudGVyICsgJ1wiPicgK1xuICAgICAgICB0Lmh0bWwuc3Vic3RyaW5nKHQud29yZFN0YXJ0LCB0LndvcmRFbmQpICtcbiAgICAgICAgJzwvc3Bhbj4nICsgdC5odG1sLnN1YnN0cmluZyh0LndvcmRFbmQsIHQuaHRtbC5sZW5ndGgpO1xuICAgICAgdC53b3JkID0gXCJcIjtcbiAgICAgIHQuaHRtbCA9IFwiXCI7XG4gICAgICB0LndvcmRTdGFydCA9IC0xO1xuICAgICAgdC53b3JkRW5kID0gLTE7XG4gICAgICB0LmNvdW50ZXIrKztcbiAgICB9O1xuXG4gICAgdmFyIHIgPSB7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgaW5uZXJIVE1MX3R0czogXCJcIixcbiAgICAgIHNwYW5NYXA6IHt9LFxuICAgICAgdGV4dDogXCJcIixcbiAgICAgIGxhc3RDaGFySW5kZXg6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbCA9IGVsZW1lbnQuaW5uZXJIVE1MO1xuXG4gICAgdmFyIHQgPSB7XG4gICAgICBpblRhZzogZmFsc2UsXG4gICAgICBjb3VudGVyOiAwLFxuICAgICAgd29yZFN0YXJ0OiAtMSxcbiAgICAgIHdvcmRFbmQ6IC0xLFxuICAgICAgdGV4dDogJycsXG4gICAgICBtYXJrdXA6ICcnLFxuICAgICAgd29yZDogJycsXG4gICAgICBodG1sOiAnJ1xuICAgIH07XG5cbiAgICB2YXIgbGltaXQgPSByLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPD0gbGltaXQpIHtcbiAgICAgIGlmICh0LmluVGFnKSB7XG4gICAgICAgIHQuaHRtbCArPSByLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsW2ldO1xuICAgICAgICBpZiAoci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbFtpXSA9PSBcIj5cIikge1xuICAgICAgICAgIHQuaW5UYWcgPSBmYWxzZTtcbiAgICAgICAgICAvLyBpZiBpdCdzIGEgYmxvY2sgZWxlbWVudCBkZWxpbWl0ZXIsIGZsdXNoXG4gICAgICAgICAgdmFyIGJsb2NrQ2hlY2sgPSB0Lmh0bWwubWF0Y2goLzxcXC8oLio/KT4kLyk7XG4gICAgICAgICAgaWYgKGJsb2NrQ2hlY2sgJiYgQkxPQ0tfREVMSU1JVEVSUy5pbmRleE9mKGJsb2NrQ2hlY2tbMV0pID4gLTEpIHtcbiAgICAgICAgICAgIGZsdXNoKHQsIHIpO1xuICAgICAgICAgICAgdC50ZXh0ICs9ICcgJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpID09IGxpbWl0IHx8IHIuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWxbaV0ubWF0Y2goL1xccy8pKSB7XG4gICAgICAgICAgZmx1c2godCwgcik7XG5cbiAgICAgICAgICAvLyBhcHBlbmQgdGhlIGNhcHR1cmVkIHdoaXRlc3BhY2VcbiAgICAgICAgICBpZiAoaSA8IGxpbWl0KSB7XG4gICAgICAgICAgICB0LnRleHQgKz0gci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbFtpXTtcbiAgICAgICAgICAgIHQubWFya3VwICs9IHIuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWxbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKEJPVU5EQVJZX1BVTkNUVUFUSU9OLmluZGV4T2Yoci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbFtpXSkgPiAtMSkge1xuICAgICAgICAgIGZsdXNoKHQsIHIpO1xuXG4gICAgICAgICAgdC53b3JkU3RhcnQgPSB0Lmh0bWwubGVuZ3RoO1xuICAgICAgICAgIHQud29yZEVuZCA9IHQuaHRtbC5sZW5ndGggKyAxO1xuICAgICAgICAgIHQud29yZCArPSByLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsW2ldO1xuICAgICAgICAgIHQuaHRtbCArPSByLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsW2ldO1xuXG4gICAgICAgICAgZmx1c2godCwgcik7XG4gICAgICAgIH0gZWxzZSBpZiAoci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbFtpXSA9PSBcIjxcIikge1xuICAgICAgICAgIHQuaW5UYWcgPSB0cnVlO1xuICAgICAgICAgIHQuaHRtbCArPSByLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsW2ldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0LndvcmQubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHQud29yZFN0YXJ0ID0gdC5odG1sLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdC53b3JkRW5kID0gdC5odG1sLmxlbmd0aCArIDE7XG4gICAgICAgICAgdC53b3JkICs9IHIuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWxbaV07XG4gICAgICAgICAgdC5odG1sICs9IHIuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWxbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgLy9cbiAgICAvL2NvbnNvbGUuZGVidWcodC50ZXh0KTtcbiAgICAvLyAgICAgICAgY29uc29sZS5kZWJ1ZyhcIi0tLS1cIik7XG4gICAgLy9jb25zb2xlLmRlYnVnKHQubWFya3VwKTtcblxuICAgIHIudGV4dCA9IHQudGV4dDtcbiAgICByLmlubmVySFRNTF90dHMgPSB0Lm1hcmt1cDtcbiAgICByLmVsZW1lbnQuaW5uZXJIVE1MID0gci5pbm5lckhUTUxfdHRzO1xuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgdmFyICR0dHNTdHlsZSA9IHVuZGVmaW5lZDtcblxuICBmdW5jdGlvbiBlbnN1cmVUVFNTdHlsZSgkZWxlbWVudCkge1xuICAgIGlmICgkdHRzU3R5bGUgJiYgJHR0c1N0eWxlWzBdLm93bmVyRG9jdW1lbnQgPT09ICRlbGVtZW50WzBdLm93bmVyRG9jdW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGUgPSBcIi50dHNfb257YmFja2dyb3VuZC1jb2xvcjpyZWQ7Y29sb3I6d2hpdGU7fSAudHRzX29mZnt9XCI7XG5cbiAgICAkaGVhZCA9ICQoXCJoZWFkXCIsICRlbGVtZW50WzBdLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcblxuICAgICR0dHNTdHlsZSA9ICQoXCI8c3R5bGUgdHlwZT0ndGV4dC9jc3MnPiA8L3N0eWxlPlwiKS5hcHBlbmRUbygkaGVhZCk7XG5cbiAgICAkdHRzU3R5bGUuYXBwZW5kKHN0eWxlKTtcbiAgfVxuXG4gIHZhciBzcGVha1N0YXJ0ID0gZnVuY3Rpb24odHh0LCB2b2x1bWUpIHtcbiAgICB2YXIgdG9rZW5EYXRhID0gdW5kZWZpbmVkO1xuICAgIHZhciBjdXJQYXIgPSAoX3NtaWxJdGVyYXRvciAmJiBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpID8gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyIDogdW5kZWZpbmVkO1xuICAgIHZhciBlbGVtZW50ID0gY3VyUGFyID8gY3VyUGFyLmVsZW1lbnQgOiB1bmRlZmluZWQ7XG4gICAgdmFyIGNmaSA9IGN1clBhciA/IGN1clBhci5jZmkgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIXZvbHVtZSB8fCB2b2x1bWUgPiAwKSB7XG4gICAgICAvLyBnaXZlcyB0aGUgYXVkaW8gcGxheWVyIHNvbWUgZGlzcGF0Y2hlciB0aW1lIHRvIHJhaXNlIHRoZSBvblBhdXNlIGV2ZW50XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBvblN0YXR1c0NoYW5nZWQoe1xuICAgICAgICAgIGlzUGxheWluZzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0sIDgwKTtcblxuICAgICAgX3R0c0lzUGxheWluZyA9IHRydWU7XG5cbiAgICAgIGlmIChUT0tFTklaRV9UVFMgJiYgZWxlbWVudCkge1xuICAgICAgICB2YXIgJGVsID0gJChlbGVtZW50KTtcbiAgICAgICAgZW5zdXJlVFRTU3R5bGUoJGVsKTtcblxuXG4gICAgICAgIGlmIChlbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbCkge1xuICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWw7XG4gICAgICAgICAgZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5EYXRhID0gdG9rZW5pc2VUVFMoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFfZW5hYmxlSFRNTFNwZWVjaCkge1xuICAgICAgcmVhZGVyLnRyaWdnZXIoRXZlbnRzLk1FRElBX09WRVJMQVlfVFRTX1NQRUFLLCB7XG4gICAgICAgIHR0czogdHh0XG4gICAgICB9KTsgLy8gcmVzdW1lIGlmIHR4dCA9PSB1bmRlZmluZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXR4dCAmJiB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnBhdXNlZCkge1xuICAgICAgLy9jb25zb2xlLmRlYnVnKFwiVFRTIHJlc3VtZVwiKTtcbiAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMucmVzdW1lKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGV4dCA9IHR4dCB8fCBfY3VycmVudFRUUztcblxuICAgIGlmICh0ZXh0KSB7XG4gICAgICBpZiAoX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSkge1xuICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlIG51bGxpZnlcIik7XG5cbiAgICAgICAgaWYgKFRPS0VOSVpFX1RUUykge1xuICAgICAgICAgIGlmIChfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLm9uZW5kKSB7XG4gICAgICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLm9uZW5kKHtcbiAgICAgICAgICAgICAgZm9yY2VTa2lwRW5kOiB0cnVlLFxuICAgICAgICAgICAgICB0YXJnZXQ6IF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UudG9rZW5EYXRhID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5vbmJvdW5kYXJ5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLm9uYm91bmRhcnkgPSBmdW5jdGlvbihldmVudClcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAge1xuICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJPTEQgVFRTIGJvdW5kYXJ5XCIpO1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQudG9rZW5EYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgIC8vICBcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2Uub25lbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLm9uZW5kID0gZnVuY3Rpb24oZXZlbnQpXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB7XG4gICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJPTEQgVFRTIGVuZGVkXCIpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGlmIChUT0tFTklaRV9UVFMpXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQudG9rZW5EYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5vbmVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB7XG4gICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJPTEQgVFRTIGVycm9yXCIpO1xuICAgICAgICAvLyAvL2NvbnNvbGUuZGVidWcoZXZlbnQpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGlmIChUT0tFTklaRV9UVFMpXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQudG9rZW5EYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIC8vXG4gICAgICAvLyAgICAgICAgICAgIGlmICh3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnBlbmRpbmcgfHxcbiAgICAgIC8vICAgICAgICAgICAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuc3BlYWtpbmcpXG4gICAgICAvLyAgICAgICAgICAgIHtcbiAgICAgIC8vICAgICAgICAgICAgICAgIF9za2lwVFRTRW5kRXZlbnQgPSB0cnVlO1xuICAgICAgLy8gICAgICAgICAgICB9XG5cbiAgICAgIGNvbnNvbGUuZGVidWcoXCJwYXVzZWQ6IFwiICsgd2luZG93LnNwZWVjaFN5bnRoZXNpcy5wYXVzZWQpO1xuICAgICAgY29uc29sZS5kZWJ1ZyhcInNwZWFraW5nOiBcIiArIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuc3BlYWtpbmcpO1xuICAgICAgY29uc29sZS5kZWJ1ZyhcInBlbmRpbmc6IFwiICsgd2luZG93LnNwZWVjaFN5bnRoZXNpcy5wZW5kaW5nKTtcblxuICAgICAgLy8gICAgICAgICAgICAgaWYgKCF3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnBhdXNlZClcbiAgICAgIC8vICAgICAgICAgICAgIHtcbiAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJUVFMgcGF1c2UgYmVmb3JlIHNwZWFrXCIpO1xuICAgICAgLy8gICAgICAgICAgICAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMucGF1c2UoKTtcbiAgICAgIC8vICAgICAgICAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsVFRTKGZpcnN0KSB7XG4gICAgICAgIGlmIChmaXJzdCB8fCB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnBlbmRpbmcpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIGNhbmNlbCBiZWZvcmUgc3BlYWtcIik7XG4gICAgICAgICAgd2luZG93LnNwZWVjaFN5bnRoZXNpcy5jYW5jZWwoKTtcblxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjYW5jZWxUVFMoZmFsc2UpO1xuICAgICAgICAgIH0sIDUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwZGF0ZVRUUygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYW5jZWxUVFModHJ1ZSk7XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRUUygpIHtcbiAgICAgICAgLy8gc2V0VGltZW91dChmdW5jdGlvbigpXG4gICAgICAgIC8vIHtcblxuICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSgpO1xuXG4gICAgICAgIGlmIChUT0tFTklaRV9UVFMgJiYgdG9rZW5EYXRhKSB7XG4gICAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS50b2tlbkRhdGEgPSB0b2tlbkRhdGE7XG5cbiAgICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLm9uYm91bmRhcnkgPSBmdW5jdGlvbihldmVudClcbiAgICAgICAgICAgIC8vX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5hZGRFdmVudExpc3RlbmVyKFwiYm91bmRhcnlcIiwgZnVuY3Rpb24oZXZlbnQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmICghX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJUVFMgYm91bmRhcnk6IFwiICsgZXZlbnQubmFtZSArIFwiIC8gXCIgKyBldmVudC5jaGFySW5kZXgpO1xuICAgICAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoZXZlbnQpO1xuXG4gICAgICAgICAgICAgIHZhciB0b2tlbmlzZWQgPSBldmVudC50YXJnZXQudG9rZW5EYXRhO1xuICAgICAgICAgICAgICBpZiAoIXRva2VuaXNlZCB8fCAhdG9rZW5pc2VkLnNwYW5NYXAuaGFzT3duUHJvcGVydHkoZXZlbnQuY2hhckluZGV4KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChmYWxzZSAmJiB0b2tlbmlzZWQubGFzdENoYXJJbmRleCkge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIlRUUyBsYXN0Q2hhckluZGV4OiBcIiArIHRva2VuaXNlZC5sYXN0Q2hhckluZGV4KTtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSAndHRzXycgKyB0b2tlbmlzZWQuc3Bhbk1hcFt0b2tlbmlzZWQubGFzdENoYXJJbmRleF07XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiVFRTIGxhc3RDaGFySW5kZXggSUQ6IFwiICsgaWQpO1xuICAgICAgICAgICAgICAgIHZhciBzcGFuUHJldmlvdXMgPSB0b2tlbmlzZWQuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiICsgaWQpO1xuICAgICAgICAgICAgICAgIGlmIChzcGFuUHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIlRUUyBPRkZcIik7XG4gICAgICAgICAgICAgICAgICBzcGFuUHJldmlvdXMuY2xhc3NOYW1lID0gJ3R0c19vZmYnO1xuICAgICAgICAgICAgICAgICAgLy9zcGFuUHJldmlvdXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoXG4gICAgICAgICAgICAgICAgICB0b2tlbmlzZWQuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnR0c19vblwiKSxcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJUVFMgT0ZGIFwiICsgZWwuaWQpO1xuICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc05hbWUgPSAndHRzX29mZic7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBpZCA9ICd0dHNfJyArIHRva2VuaXNlZC5zcGFuTWFwW2V2ZW50LmNoYXJJbmRleF07XG4gICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJUVFMgY2hhckluZGV4IElEOiBcIiArIGlkKTtcbiAgICAgICAgICAgICAgdmFyIHNwYW5OZXcgPSB0b2tlbmlzZWQuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiICsgaWQpO1xuICAgICAgICAgICAgICBpZiAoc3Bhbk5ldykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJUVFMgT05cIik7XG4gICAgICAgICAgICAgICAgc3Bhbk5ldy5jbGFzc05hbWUgPSAndHRzX29uJztcbiAgICAgICAgICAgICAgICAvL3NwYW5OZXcuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ0cmFuc3BhcmVudFwiO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdG9rZW5pc2VkLmxhc3RDaGFySW5kZXggPSBldmVudC5jaGFySW5kZXg7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5vbmVuZCA9IGZ1bmN0aW9uKGV2ZW50KVxuICAgICAgICAgIC8vX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5hZGRFdmVudExpc3RlbmVyKFwiZW5kXCIsIGZ1bmN0aW9uKGV2ZW50KVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICghX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSkge1xuICAgICAgICAgICAgICAvL19za2lwVFRTRW5kRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIGlmIChfc2tpcFRUU0VuZEV2ZW50KVxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIF9za2lwVFRTRW5kRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJUVFMgZW5kZWRcIik7XG4gICAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoZXZlbnQpO1xuXG4gICAgICAgICAgICBpZiAoVE9LRU5JWkVfVFRTKSB7XG4gICAgICAgICAgICAgIHZhciB0b2tlbmlzZWQgPSBldmVudC50YXJnZXQudG9rZW5EYXRhO1xuXG4gICAgICAgICAgICAgIHZhciBkb0VuZCA9ICFldmVudC5mb3JjZVNraXBFbmQgJiYgKF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UgPT09IGV2ZW50LnRhcmdldCkgJiYgKCF0b2tlbmlzZWQgfHwgdG9rZW5pc2VkLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsKTtcblxuICAgICAgICAgICAgICBpZiAodG9rZW5pc2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuaXNlZC5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbCkge1xuICAgICAgICAgICAgICAgICAgdG9rZW5pc2VkLmVsZW1lbnQuaW5uZXJIVE1MID0gdG9rZW5pc2VkLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgIHRva2VuaXNlZC5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudHRzX29uXCIpLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJUVFMgT0ZGIChlbmQpXCIgKyBlbC5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gJ3R0c19vZmYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRva2VuaXNlZC5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgaWYgKGRvRW5kKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5vblRUU0VuZCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJUVFMgZW5kIFNLSVBQRURcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGYub25UVFNFbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgIF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2Uub25lcnJvciA9IGZ1bmN0aW9uKGV2ZW50KVxuICAgICAgICAgIC8vX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24oZXZlbnQpXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlRUUyBlcnJvclwiKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhldmVudCk7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UudGV4dCk7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKHdpbmRvdy5zcGVlY2hTeW50aGVzaXMucGF1c2VkKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcod2luZG93LnNwZWVjaFN5bnRoZXNpcy5wZW5kaW5nKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcod2luZG93LnNwZWVjaFN5bnRoZXNpcy5zcGVha2luZyk7XG5cbiAgICAgICAgICAgIGlmIChUT0tFTklaRV9UVFMpIHtcbiAgICAgICAgICAgICAgdmFyIHRva2VuaXNlZCA9IGV2ZW50LnRhcmdldC50b2tlbkRhdGE7XG4gICAgICAgICAgICAgIGlmICh0b2tlbmlzZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5pc2VkLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICB0b2tlbmlzZWQuZWxlbWVudC5pbm5lckhUTUwgPSB0b2tlbmlzZWQuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5pc2VkLmVsZW1lbnQub3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnR0c19vblwiKSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIE9GRiAoZXJyb3IpXCIgKyBlbC5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gJ3R0c19vZmYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b2tlbmlzZWQuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgIHZhciB2b2wgPSB2b2x1bWUgfHwgX2F1ZGlvUGxheWVyLmdldFZvbHVtZSgpO1xuICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLnZvbHVtZSA9IHZvbDtcblxuICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLnJhdGUgPSBfYXVkaW9QbGF5ZXIuZ2V0UmF0ZSgpO1xuICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLnBpdGNoID0gMTtcblxuICAgICAgICAvL19TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UubGFuZyA9IFwiZW4tVVNcIjtcblxuICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLnRleHQgPSB0ZXh0O1xuXG4gICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIlRUUyBzcGVhazogXCIgKyB0ZXh0KTtcbiAgICAgICAgd2luZG93LnNwZWVjaFN5bnRoZXNpcy5zcGVhayhfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlKTtcblxuICAgICAgICBpZiAod2luZG93LnNwZWVjaFN5bnRoZXNpcy5wYXVzZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIHJlc3VtZVwiKTtcbiAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnJlc3VtZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy99LCA1KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHNwZWFrU3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgIG9uU3RhdHVzQ2hhbmdlZCh7XG4gICAgICBpc1BsYXlpbmc6IGZhbHNlXG4gICAgfSk7XG4gICAgX3R0c0lzUGxheWluZyA9IGZhbHNlO1xuXG4gICAgaWYgKCFfZW5hYmxlSFRNTFNwZWVjaCkge1xuICAgICAgcmVhZGVyLnRyaWdnZXIoRXZlbnRzLk1FRElBX09WRVJMQVlfVFRTX1NUT1AsIHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy9jb25zb2xlLmRlYnVnKFwiVFRTIHBhdXNlXCIpO1xuICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMucGF1c2UoKTtcbiAgfTtcblxuICB2YXIgX3RpbWVyVGljayA9IHVuZGVmaW5lZDtcblxuICBmdW5jdGlvbiBvblBsYXkoKSB7XG4gICAgb25QYXVzZSgpO1xuXG4gICAgdmFyIGZ1bmMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgaWYgKCFfc21pbEl0ZXJhdG9yIHx8ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc21pbCA9IF9zbWlsSXRlcmF0b3Iuc21pbDsgLy9jdXJyZW50UGFyLmdldFNtaWwoKTtcbiAgICAgIGlmICghc21pbC5tbykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vICAgICAgICAgICAgaWYgKCFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uc3JjKVxuICAgICAgLy8gICAgICAgICAgICB7XG4gICAgICAvLyAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAvLyAgICAgICAgICAgIH1cblxuICAgICAgdmFyIHBsYXlQb3NpdGlvbiA9IGF1ZGlvQ3VycmVudFRpbWUgLSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEJlZ2luO1xuICAgICAgaWYgKHBsYXlQb3NpdGlvbiA8PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNtaWxJbmRleCA9IHNtaWwubW8uc21pbF9tb2RlbHMuaW5kZXhPZihzbWlsKTtcblxuICAgICAgdmFyIHNtaWxJdGVyYXRvciA9IG5ldyBTbWlsSXRlcmF0b3Ioc21pbCk7XG4gICAgICB2YXIgcGFySW5kZXggPSAtMTtcbiAgICAgIHdoaWxlIChzbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgICBwYXJJbmRleCsrO1xuICAgICAgICBpZiAoc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIgPT0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc21pbEl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cblxuICAgICAgb25TdGF0dXNDaGFuZ2VkKHtcbiAgICAgICAgcGxheVBvc2l0aW9uOiBwbGF5UG9zaXRpb24sXG4gICAgICAgIHNtaWxJbmRleDogc21pbEluZGV4LFxuICAgICAgICBwYXJJbmRleDogcGFySW5kZXhcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmMsIDUwMCk7XG5cbiAgICBfdGltZXJUaWNrID0gc2V0SW50ZXJ2YWwoZnVuYywgMTUwMCk7XG4gIH1cblxuICBmdW5jdGlvbiBvblBhdXNlKCkge1xuXG4gICAgYXVkaW9DdXJyZW50VGltZSA9IDAuMDtcbiAgICBpZiAoX3RpbWVyVGljayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhckludGVydmFsKF90aW1lclRpY2spO1xuICAgIH1cbiAgICBfdGltZXJUaWNrID0gdW5kZWZpbmVkO1xuICB9XG5cblxuICB0aGlzLm9uRW1iZWRkZWRFbmQgPSBmdW5jdGlvbigpIHtcbiAgICBhdWRpb0N1cnJlbnRUaW1lID0gMC4wO1xuXG4gICAgX2VtYmVkZGVkSXNQbGF5aW5nID0gZmFsc2U7XG4gICAgLy9fY3VycmVudEVtYmVkZGVkID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKCFfc21pbEl0ZXJhdG9yIHx8ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvbkF1ZGlvUG9zaXRpb25DaGFuZ2VkKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpby5jbGlwRW5kICsgMC4xLCAzKTtcbiAgfTtcblxuICB0aGlzLm9uVFRTRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgYXVkaW9DdXJyZW50VGltZSA9IDAuMDtcblxuICAgIF90dHNJc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAvL19jdXJyZW50VFRTID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gICAgICAgIGlmKF9za2lwVFRTRW5kZWQpXG4gICAgLy8gICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgIF9za2lwVFRTRW5kZWQgPSBmYWxzZTtcbiAgICAvLyAgICAgICAgICAgIHJldHVybjtcbiAgICAvLyAgICAgICAgfVxuXG4gICAgaWYgKCFfc21pbEl0ZXJhdG9yIHx8ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvbkF1ZGlvUG9zaXRpb25DaGFuZ2VkKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpby5jbGlwRW5kICsgMC4xLCA0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBvbkF1ZGlvRW5kZWQoKSB7XG5cbiAgICBvblBhdXNlKCk7XG4gICAgLy9cbiAgICAvLyAgICAgICAgaWYgKF9sZXRQbGF5KVxuICAgIC8vICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICByZXR1cm47XG4gICAgLy8gICAgICAgIH1cblxuICAgIGlmIChfc2tpcEF1ZGlvRW5kZWQpIHtcbiAgICAgIF9za2lwQXVkaW9FbmRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICBzZWxmLnJlc2V0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb25BdWRpb1Bvc2l0aW9uQ2hhbmdlZChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEVuZCArIDAuMSwgNSk7XG4gIH1cblxuICBmdW5jdGlvbiBoaWdobGlnaHRDdXJyZW50RWxlbWVudCgpIHtcblxuICAgIGlmICghX3NtaWxJdGVyYXRvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQgJiYgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmVsZW1lbnQpIHtcbiAgICAgICAgLy9jb25zb2xlLmVycm9yKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5lbGVtZW50LmlkICsgXCI6IFwiICsgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBCZWdpbiArIFwiIC8gXCIgKyBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEVuZCk7XG5cbiAgICAgICAgaWYgKCFfZWxlbWVudEhpZ2hsaWdodGVyLmlzRWxlbWVudEhpZ2hsaWdodGVkKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikpIHtcbiAgICAgICAgICBfZWxlbWVudEhpZ2hsaWdodGVyLmhpZ2hsaWdodEVsZW1lbnQoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLCBfcGFja2FnZS5tZWRpYV9vdmVybGF5LmFjdGl2ZUNsYXNzLCBfcGFja2FnZS5tZWRpYV9vdmVybGF5LnBsYXliYWNrQWN0aXZlQ2xhc3MpO1xuXG4gICAgICAgICAgaWYgKCFfd2FzUGxheWluZ1Njcm9sbGluZykge1xuICAgICAgICAgICAgcmVhZGVyLmluc3VyZUVsZW1lbnRWaXNpYmlsaXR5KF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5nZXRTbWlsKCkuc3BpbmVJdGVtSWQsIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5lbGVtZW50LCBzZWxmKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG5cbiAgICAgIH0gZWxzZSBpZiAoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmNmaSkge1xuXG4gICAgICAgIGlmICghX2VsZW1lbnRIaWdobGlnaHRlci5pc0NmaUhpZ2hsaWdodGVkKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikpIHtcbiAgICAgICAgICBfZWxlbWVudEhpZ2hsaWdodGVyLmhpZ2hsaWdodENmaShfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIsIF9wYWNrYWdlLm1lZGlhX292ZXJsYXkuYWN0aXZlQ2xhc3MsIF9wYWNrYWdlLm1lZGlhX292ZXJsYXkucGxheWJhY2tBY3RpdmVDbGFzcyk7XG5cbiAgICAgICAgICBpZiAoIV93YXNQbGF5aW5nU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICByZWFkZXIuaW5zdXJlRWxlbWVudFZpc2liaWxpdHkoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmdldFNtaWwoKS5zcGluZUl0ZW1JZCwgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmNmaS5jZmlUZXh0UGFyZW50LCBzZWxmKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYm9keSAobm90IEZSQUcgSUQpXG4gICAgaWYgKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5lbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy9lbHNlOiBzaW5nbGUgU01JTCBwZXIgbXVsdGlwbGUgWEhUTUw/ID09PiBvcGVuIG5ldyBzcGluZSBpdGVtXG5cbiAgICAvKlxuICAgICAgICB2YXIgdGV4dFJlbGF0aXZlUmVmID0gUmVhZGl1bVNESy5IZWxwZXJzLlJlc29sdmVDb250ZW50UmVmKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyY0ZpbGUsIF9zbWlsSXRlcmF0b3Iuc21pbC5ocmVmKTtcbmNvbnNvbGUuZGVidWcoXCJ0ZXh0UmVsYXRpdmVSZWY6IFwiICsgdGV4dFJlbGF0aXZlUmVmKTtcbiAgICAgICAgaWYgKHRleHRSZWxhdGl2ZVJlZilcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHRleHRBYnNvbHV0ZVJlZiA9IF9wYWNrYWdlLnJlc29sdmVSZWxhdGl2ZVVybCh0ZXh0UmVsYXRpdmVSZWYpO1xuY29uc29sZS5kZWJ1ZyhcInRleHRBYnNvbHV0ZVJlZjogXCIgKyB0ZXh0QWJzb2x1dGVSZWYpO1xuICAgICAgICB9XG4gICAgICAgICovXG5cbiAgICB2YXIgc3JjID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLnRleHQuc3JjO1xuICAgIHZhciBiYXNlID0gX3NtaWxJdGVyYXRvci5zbWlsLmhyZWY7XG5cbiAgICAvL3NlbGYucGF1c2UoKTtcbiAgICAvL3NlbGYucmVzZXQoKTtcbiAgICBfc21pbEl0ZXJhdG9yID0gdW5kZWZpbmVkO1xuXG4gICAgcmVhZGVyLm9wZW5Db250ZW50VXJsKHNyYywgYmFzZSwgc2VsZik7XG4gIH1cblxuICB0aGlzLmVzY2FwZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKCFfc21pbEl0ZXJhdG9yIHx8ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcblxuICAgICAgdGhpcy50b2dnbGVNZWRpYU92ZXJsYXkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXNlbGYuaXNQbGF5aW5nKCkpIHtcbiAgICAgIC8vcGxheUN1cnJlbnRQYXIoKTtcbiAgICAgIHNlbGYucGxheSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfc2V0dGluZ3MubWVkaWFPdmVybGF5c0VzY2FwZUVzY2FwYWJsZXMpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXI7XG4gICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQuaXNFc2NhcGFibGUgJiYgcGFyZW50LmlzRXNjYXBhYmxlKF9zZXR0aW5ncy5tZWRpYU92ZXJsYXlzRXNjYXBhYmxlcykpIHtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBfc21pbEl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICB9IHdoaWxlIChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIgJiYgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmhhc0FuY2VzdG9yKHBhcmVudCkpO1xuXG4gICAgICAgICAgaWYgKCFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgICAgIG5leHRTbWlsKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vX3NtaWxJdGVyYXRvci5nb1RvUGFyKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcik7XG4gICAgICAgICAgcGxheUN1cnJlbnRQYXIoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubmV4dE1lZGlhT3ZlcmxheSh0cnVlKTtcbiAgfTtcblxuXG4gIHRoaXMucGxheVVzZXJQYXIgPSBmdW5jdGlvbihwYXIpIHtcbiAgICBpZiAoc2VsZi5pc1BsYXlpbmcoKSkge1xuICAgICAgc2VsZi5wYXVzZSgpO1xuICAgIH1cblxuICAgIGlmIChwYXIuZWxlbWVudCB8fCBwYXIuY2ZpICYmIHBhci5jZmkuY2ZpVGV4dFBhcmVudCkge1xuICAgICAgdmFyIHNlcSA9IF9lbGVtZW50SGlnaGxpZ2h0ZXIuYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkocGFyKTtcbiAgICAgIGlmIChzZXEgJiYgc2VxICE9PSBwYXIpIHtcbiAgICAgICAgdmFyIGZpbmRGaXJzdFBhciA9IGZ1bmN0aW9uKHNtaWxOb2RlKSB7XG4gICAgICAgICAgaWYgKHNtaWxOb2RlLm5vZGVUeXBlICYmIHNtaWxOb2RlLm5vZGVUeXBlID09PSBcInBhclwiKSByZXR1cm4gc21pbE5vZGU7XG5cbiAgICAgICAgICBpZiAoIXNtaWxOb2RlLmNoaWxkcmVuIHx8IHNtaWxOb2RlLmNoaWxkcmVuLmxlbmd0aCA8PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbWlsTm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gc21pbE5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgICAgICB2YXIgaW5QYXIgPSBmaW5kRmlyc3RQYXIoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKGluUGFyKSByZXR1cm4gaW5QYXI7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZmlyc3RQYXIgPSBmaW5kRmlyc3RQYXIoc2VxKTtcbiAgICAgICAgaWYgKGZpcnN0UGFyKSBwYXIgPSBmaXJzdFBhcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwbGF5UGFyKHBhcik7XG4gIH07XG5cbiAgdGhpcy5yZXNldFRUUyA9IGZ1bmN0aW9uKCkge1xuICAgIF9jdXJyZW50VFRTID0gdW5kZWZpbmVkO1xuICAgIC8vICAgICAgICBfc2tpcFRUU0VuZGVkID0gZmFsc2U7XG4gICAgc3BlYWtTdG9wKCk7XG4gIH07XG5cbiAgdGhpcy5yZXNldEJsYW5rUGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChfYmxhbmtQYWdlUGxheWVyKSB7XG4gICAgICB2YXIgdGltZXIgPSBfYmxhbmtQYWdlUGxheWVyO1xuICAgICAgX2JsYW5rUGFnZVBsYXllciA9IHVuZGVmaW5lZDtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgfVxuICAgIF9ibGFua1BhZ2VQbGF5ZXIgPSB1bmRlZmluZWQ7XG5cbiAgICBvblN0YXR1c0NoYW5nZWQoe1xuICAgICAgaXNQbGF5aW5nOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMucmVzZXRFbWJlZGRlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChfY3VycmVudEVtYmVkZGVkKSB7XG4gICAgICAkKF9jdXJyZW50RW1iZWRkZWQpLm9mZihcImVuZGVkXCIsIHNlbGYub25FbWJlZGRlZEVuZCk7XG4gICAgICBfY3VycmVudEVtYmVkZGVkLnBhdXNlKCk7XG4gICAgfVxuICAgIF9jdXJyZW50RW1iZWRkZWQgPSB1bmRlZmluZWQ7XG4gICAgb25TdGF0dXNDaGFuZ2VkKHtcbiAgICAgIGlzUGxheWluZzogZmFsc2VcbiAgICB9KTtcbiAgICBfZW1iZWRkZWRJc1BsYXlpbmcgPSBmYWxzZTtcbiAgfTtcblxuICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgY2xpcEJlZ2luT2Zmc2V0ID0gMC4wO1xuICAgIF9hdWRpb1BsYXllci5yZXNldCgpO1xuICAgIHNlbGYucmVzZXRUVFMoKTtcbiAgICBzZWxmLnJlc2V0RW1iZWRkZWQoKTtcbiAgICBzZWxmLnJlc2V0QmxhbmtQYWdlKCk7XG4gICAgX2VsZW1lbnRIaWdobGlnaHRlci5yZXNldCgpO1xuICAgIF9zbWlsSXRlcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgX3NraXBBdWRpb0VuZGVkID0gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKF9zbWlsSXRlcmF0b3IgJiYgX3NtaWxJdGVyYXRvci5zbWlsICYmICFfc21pbEl0ZXJhdG9yLnNtaWwuaWQpIHtcbiAgICAgIGluaXRCbGFua1BhZ2VQbGF5ZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKF9jdXJyZW50RW1iZWRkZWQpIHtcbiAgICAgIF9lbWJlZGRlZElzUGxheWluZyA9IHRydWU7XG4gICAgICBfY3VycmVudEVtYmVkZGVkLnBsYXkoKTtcbiAgICAgIG9uU3RhdHVzQ2hhbmdlZCh7XG4gICAgICAgIGlzUGxheWluZzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChfY3VycmVudFRUUykge1xuICAgICAgc3BlYWtTdGFydCh1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIV9hdWRpb1BsYXllci5wbGF5KCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBdWRpbyBwbGF5ZXIgd2FzIGRlYWQsIHJlYWN0aXZhdGluZy4uLlwiKTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMudG9nZ2xlTWVkaWFPdmVybGF5KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoaWdobGlnaHRDdXJyZW50RWxlbWVudCgpO1xuICB9XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIF93YXNQbGF5aW5nU2Nyb2xsaW5nID0gZmFsc2U7XG5cbiAgICBpZiAoX2JsYW5rUGFnZVBsYXllcikge1xuICAgICAgdGhpcy5yZXNldEJsYW5rUGFnZSgpO1xuICAgIH0gZWxzZSBpZiAoX2VtYmVkZGVkSXNQbGF5aW5nKSB7XG4gICAgICBfZW1iZWRkZWRJc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgIGlmIChfY3VycmVudEVtYmVkZGVkKSB7XG4gICAgICAgIF9jdXJyZW50RW1iZWRkZWQucGF1c2UoKTtcbiAgICAgIH1cbiAgICAgIG9uU3RhdHVzQ2hhbmdlZCh7XG4gICAgICAgIGlzUGxheWluZzogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoX3R0c0lzUGxheWluZykge1xuICAgICAgc3BlYWtTdG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9hdWRpb1BsYXllci5wYXVzZSgpO1xuICAgIH1cblxuICAgIF9lbGVtZW50SGlnaGxpZ2h0ZXIucmVzZXQoKTtcbiAgfVxuXG4gIHRoaXMuaXNNZWRpYU92ZXJsYXlBdmFpbGFibGUgPSBmdW5jdGlvbigpIHtcblxuICAgIC8vICAgICAgICBjb25zb2xlLmRlYnVnKFwiaXNNZWRpYU92ZXJsYXlBdmFpbGFibGUoKVwiKTtcbiAgICAvL1xuICAgIC8vICAgICAgICB2YXIgbm93MSA9IHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogRGF0ZS5ub3coKTtcbiAgICAvL1xuICAgIC8vICAgICAgICBpZiAoY29uc29sZS50aW1lKVxuICAgIC8vICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICBjb25zb2xlLnRpbWUoXCJNT1wiKTtcbiAgICAvLyAgICAgICAgfVxuXG4gICAgdmFyIHZpc2libGVNZWRpYUVsZW1lbnQgPSByZWFkZXIuZ2V0Rmlyc3RWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudCgpO1xuXG4gICAgLy8gICAgICAgIGlmIChjb25zb2xlLnRpbWVFbmQpXG4gICAgLy8gICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgIGNvbnNvbGUudGltZUVuZChcIk1PXCIpO1xuICAgIC8vICAgICAgICB9XG4gICAgLy9cbiAgICAvLyAgICAgICAgdmFyIG5vdzIgPSB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vdyA/IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSA6IERhdGUubm93KCk7XG4gICAgLy9cbiAgICAvLyAgICAgICAgY29uc29sZS5kZWJ1Zyhub3cyIC0gbm93MSk7XG5cbiAgICByZXR1cm4gdHlwZW9mIHZpc2libGVNZWRpYUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG4gIH07XG5cbiAgdGhpcy5uZXh0T3JQcmV2aW91c01lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKHByZXZpb3VzKSB7XG4gICAgaWYgKHNlbGYuaXNQbGF5aW5nKCkpIHtcbiAgICAgIHNlbGYucGF1c2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKF9zbWlsSXRlcmF0b3IgJiYgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgIC8vcGxheUN1cnJlbnRQYXIoKTtcbiAgICAgICAgc2VsZi5wbGF5KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IpIHtcbiAgICAgIHRoaXMudG9nZ2xlTWVkaWFPdmVybGF5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBvc2l0aW9uID0gcHJldmlvdXMgPyBESVJFQ1RJT05fTUFSSyAtIDEgOiBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEVuZCArIDAuMTtcblxuICAgIG9uQXVkaW9Qb3NpdGlvbkNoYW5nZWQocG9zaXRpb24sIDYpO1xuICAgIC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAvLyAgICAgXG4gICAgLy8gfSwgMSk7XG5cbiAgICAvL3NlbGYucGxheSgpO1xuICAgIC8vcGxheUN1cnJlbnRQYXIoKTtcbiAgfTtcblxuICB0aGlzLm5leHRNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm5leHRPclByZXZpb3VzTWVkaWFPdmVybGF5KGZhbHNlKTtcbiAgfTtcblxuICB0aGlzLnByZXZpb3VzTWVkaWFPdmVybGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5uZXh0T3JQcmV2aW91c01lZGlhT3ZlcmxheSh0cnVlKTtcbiAgfTtcblxuICAvKlxuICB0aGlzLnNldE1lZGlhT3ZlcmxheVNraXBwYWJsZXMgPSBmdW5jdGlvbihpdGVtcykge1xuXG4gIH07XG5cbiAgdGhpcy5zZXRNZWRpYU92ZXJsYXlFc2NhcGFibGVzID0gZnVuY3Rpb24oaXRlbXMpIHtcblxuICB9O1xuICAqL1xuXG4gIHRoaXMubWVkaWFPdmVybGF5c09wZW5Db250ZW50VXJsID0gZnVuY3Rpb24oY29udGVudFJlZlVybCwgc291cmNlRmlsZUhyZWYsIG9mZnNldCkge1xuICAgIGNsaXBCZWdpbk9mZnNldCA9IG9mZnNldDtcblxuICAgIC8vc2VsZi5wYXVzZSgpO1xuICAgIC8vc2VsZi5yZXNldCgpO1xuICAgIF9zbWlsSXRlcmF0b3IgPSB1bmRlZmluZWQ7XG5cbiAgICByZWFkZXIub3BlbkNvbnRlbnRVcmwoY29udGVudFJlZlVybCwgc291cmNlRmlsZUhyZWYsIHNlbGYpO1xuXG4gICAgLypcbiAgICBpZiAoX2N1cnJlbnRQYWdpbmF0aW9uICYmIF9jdXJyZW50UGFnaW5hdGlvbi5pc0ZpeGVkTGF5b3V0ICYmIF9jdXJyZW50UGFnaW5hdGlvbi5vcGVuUGFnZXMgJiYgX2N1cnJlbnRQYWdpbmF0aW9uLm9wZW5QYWdlcy5sZW5ndGggPiAwKVxuICAgIHtcbiAgICAgICAgdmFyIGNvbWJpbmVkUGF0aCA9IFJlYWRpdW1TREsuSGVscGVycy5SZXNvbHZlQ29udGVudFJlZihjb250ZW50UmVmVXJsLCBzb3VyY2VGaWxlSHJlZik7XG5cbiAgICAgICAgdmFyIGhhc2hJbmRleCA9IGNvbWJpbmVkUGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICAgICAgdmFyIGhyZWZQYXJ0O1xuICAgICAgICB2YXIgZWxlbWVudElkO1xuICAgICAgICBpZihoYXNoSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgaHJlZlBhcnQgPSBjb21iaW5lZFBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgICAgICAgICBlbGVtZW50SWQgPSBjb21iaW5lZFBhdGguc3Vic3RyKGhhc2hJbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaHJlZlBhcnQgPSBjb21iaW5lZFBhdGg7XG4gICAgICAgICAgICBlbGVtZW50SWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3BpbmVJdGVtID0gcmVhZGVyLnNwaW5lLmdldEl0ZW1CeUhyZWYoaHJlZlBhcnQpO1xuICAgICAgICB2YXIgc3BpbmVJdGVtSW5kZXggPSBfY3VycmVudFBhZ2luYXRpb24ub3BlblBhZ2VzWzBdLnNwaW5lSXRlbUluZGV4O1xuXG4gICAgICAgIC8vdmFyIGlkcmVmID0gX2N1cnJlbnRQYWdpbmF0aW9uLm9wZW5QYWdlc1swXS5pZHJlZjtcbiAgICAgICAgLy9zcGluZUl0ZW0uaWRyZWYgPT09IGlkcmVmXG4gICAgICAgIC8vdmFyIGN1cnJlbnRTcGluZUl0ZW0gPSByZWFkZXIuc3BpbmUuZ2V0SXRlbUJ5SWQoaWRyZWYpO1xuICAgICAgICAvL2N1cnJlbnRTcGluZUl0ZW0gPT0gc3BpbmVJdGVtXG4gICAgICAgIGlmIChzcGluZUl0ZW0uaW5kZXggPT09IHNwaW5lSXRlbUluZGV4KVxuICAgICAgICB7XG4gICAgICAgICAgICBzZWxmLm9uUGFnZUNoYW5nZWQoe1xuICAgICAgICAgICAgICAgIHBhZ2luYXRpb25JbmZvOiBfY3VycmVudFBhZ2luYXRpb24sXG4gICAgICAgICAgICAgICAgZWxlbWVudElkOiBlbGVtZW50SWQsXG4gICAgICAgICAgICAgICAgaW5pdGlhdG9yOiBzZWxmXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqL1xuICB9O1xuXG4gIHRoaXMudG9nZ2xlTWVkaWFPdmVybGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYuaXNQbGF5aW5nKCkpIHtcbiAgICAgIHNlbGYucGF1c2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvL2lmIHdlIGhhdmUgcG9zaXRpb24gdG8gY29udGludWUgZnJvbSAocmVzZXQgd2Fzbid0IGNhbGxlZClcbiAgICBpZiAoX3NtaWxJdGVyYXRvcikge1xuICAgICAgc2VsZi5wbGF5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50b2dnbGVNZWRpYU92ZXJsYXlSZWZyZXNoKHVuZGVmaW5lZCk7XG4gIH07XG5cbiAgdmFyIF93YXNQbGF5aW5nU2Nyb2xsaW5nID0gZmFsc2U7XG5cbiAgdGhpcy50b2dnbGVNZWRpYU92ZXJsYXlSZWZyZXNoID0gZnVuY3Rpb24ocGFnaW5hdGlvbkRhdGEpIHtcbiAgICAvL2NvbnNvbGUuZGVidWcoXCJtb0RhdGEgU01JTDogXCIgKyBtb0RhdGEucGFyLmdldFNtaWwoKS5ocmVmICsgXCIgLy8gXCIgKyArIG1vRGF0YS5wYXIuZ2V0U21pbCgpLmlkKTtcblxuICAgIHZhciBzcGluZUl0ZW1zID0gcmVhZGVyLmdldExvYWRlZFNwaW5lSXRlbXMoKTtcblxuICAgIC8vcGFnaW5hdGlvbkRhdGEuaXNSaWdodFRvTGVmdFxuICAgIHZhciBydGwgPSByZWFkZXIuc3BpbmUoKS5pc1JpZ2h0VG9MZWZ0KCk7XG5cbiAgICAvL3BhZ2luYXRpb25EYXRhLnNwaW5lSXRlbUNvdW50XG4gICAgLy9wYWdpbmF0aW9uRGF0YS5vcGVuUGFnZXNcbiAgICAvL3tzcGluZUl0ZW1QYWdlSW5kZXg6ICwgc3BpbmVJdGVtUGFnZUNvdW50OiAsIGlkcmVmOiAsIHNwaW5lSXRlbUluZGV4OiB9XG5cbiAgICB2YXIgcGxheWluZ1BhciA9IHVuZGVmaW5lZDtcbiAgICB2YXIgd2FzUGxheWluZyA9IHNlbGYuaXNQbGF5aW5nKCk7XG4gICAgaWYgKHdhc1BsYXlpbmcgJiYgX3NtaWxJdGVyYXRvcikge1xuICAgICAgdmFyIGlzU2Nyb2xsVmlldyA9IHBhZ2luYXRpb25EYXRhLmluaXRpYXRvciAmJiBwYWdpbmF0aW9uRGF0YS5pbml0aWF0b3IgaW5zdGFuY2VvZiBTY3JvbGxWaWV3O1xuICAgICAgaWYgKGlzU2Nyb2xsVmlldyAmJiBfc2V0dGluZ3MubWVkaWFPdmVybGF5c1ByZXNlcnZlUGxheWJhY2tXaGVuU2Nyb2xsKSB7XG4gICAgICAgIF93YXNQbGF5aW5nU2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwbGF5aW5nUGFyID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyO1xuICAgICAgc2VsZi5wYXVzZSgpO1xuICAgIH1cblxuICAgIF93YXNQbGF5aW5nU2Nyb2xsaW5nID0gZmFsc2U7XG5cbiAgICAvL3BhZ2luYXRpb25EYXRhICYmIHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZFxuICAgIC8vcGFnaW5hdGlvbkRhdGEuaW5pdGlhdG9yICE9IHNlbGZcblxuICAgIC8vX3BhY2thZ2UuaXNGaXhlZExheW91dCgpXG5cbiAgICB2YXIgZWxlbWVudCA9IChwYWdpbmF0aW9uRGF0YSAmJiBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWRSZXNvbHZlZCkgPyBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWRSZXNvbHZlZCA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBpZCA9IChwYWdpbmF0aW9uRGF0YSAmJiBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQpID8gcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXQVJOXSBpZCBkaWQgbm90IHJlc29sdmUgdG8gZWxlbWVudD9cIik7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAocnRsID8gKHNwaW5lSXRlbXMubGVuZ3RoIC0gMSkgOiAwKTtcbiAgICAgICAgKHJ0bCAmJiBpID49IDApIHx8ICghcnRsICYmIGkgPCBzcGluZUl0ZW1zLmxlbmd0aCk7IGkgKz0gKHJ0bCA/IC0xIDogMSkpIHtcbiAgICAgICAgdmFyIHNwaW5lSXRlbSA9IHNwaW5lSXRlbXNbaV07XG4gICAgICAgIGlmICghc3BpbmVJdGVtKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcInNwaW5lSXRlbXNbaV0gaXMgdW5kZWZpbmVkPz9cIik7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFnaW5hdGlvbkRhdGEgJiYgcGFnaW5hdGlvbkRhdGEuc3BpbmVJdGVtICYmIHBhZ2luYXRpb25EYXRhLnNwaW5lSXRlbSAhPSBzcGluZUl0ZW0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgIHZhciAkZWxlbWVudCA9IHJlYWRlci5nZXRFbGVtZW50QnlJZChzcGluZUl0ZW0sIGlkKTtcbiAgICAgICAgICAvL3ZhciAkZWxlbWVudCA9IHJlYWRlci5nZXRFbGVtZW50KHNwaW5lSXRlbSwgXCIjXCIgKyBSZWFkaXVtU0RLLkhlbHBlcnMuZXNjYXBlSlF1ZXJ5U2VsZWN0b3IoaWQpKTtcbiAgICAgICAgICBlbGVtZW50ID0gKCRlbGVtZW50ICYmICRlbGVtZW50Lmxlbmd0aCA+IDApID8gJGVsZW1lbnRbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc3BpbmVJdGVtLmlzRml4ZWRMYXlvdXQoKSkge1xuICAgICAgICAgIGlmIChwYWdpbmF0aW9uRGF0YSAmJiBwYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mbyAmJiBwYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMpIHtcbiAgICAgICAgICAgIC8vIG9wZW5QYWdlcyBhcmUgc29ydGVkIGJ5IHNwaW5lSXRlbSBpbmRleCwgc28gdGhlIHNtYWxsZXN0IGluZGV4IG9uIGRpc3BsYXkgaXMgdGhlIG9uZSB3ZSBuZWVkIHRvIHBsYXkgKHBhZ2Ugb24gdGhlIGxlZnQgaW4gTFRSLCBvciBwYWdlIG9uIHRoZSByaWdodCBpbiBSVEwgcHJvZ3Jlc3Npb24pXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAwOyAvLyAhcGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8uaXNSaWdodFRvTGVmdCA/IDAgOiBwYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgaWYgKHBhZ2luYXRpb25EYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlc1tpbmRleF0gJiYgcGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzW2luZGV4XS5pZHJlZiAmJiBwYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXNbaW5kZXhdLmlkcmVmID09PSBzcGluZUl0ZW0uaWRyZWYpIHtcbiAgICAgICAgICAgICAgdmFyICRlbGVtZW50ID0gcmVhZGVyLmdldEVsZW1lbnQoc3BpbmVJdGVtLCBcImJvZHlcIik7XG4gICAgICAgICAgICAgIGVsZW1lbnQgPSAoJGVsZW1lbnQgJiYgJGVsZW1lbnQubGVuZ3RoID4gMCkgPyAkZWxlbWVudFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICBlbGVtZW50ID0gcmVhZGVyLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbW9EYXRhID0gJChlbGVtZW50KS5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiKTtcblxuICAgIGlmICghbW9EYXRhKSB7XG4gICAgICB2YXIgZm91bmRNZSA9IGZhbHNlO1xuICAgICAgdmFyIGRlcHRoRmlyc3RUcmF2ZXJzYWwgPSBmdW5jdGlvbihlbGVtZW50cykge1xuICAgICAgICBpZiAoIWVsZW1lbnRzKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlbGVtZW50ID09PSBlbGVtZW50c1tpXSkgZm91bmRNZSA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoZm91bmRNZSkge1xuICAgICAgICAgICAgdmFyIGQgPSAkKGVsZW1lbnRzW2ldKS5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiKTtcbiAgICAgICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgICAgIG1vRGF0YSA9IGQ7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBmb3VuZCA9IGRlcHRoRmlyc3RUcmF2ZXJzYWwoZWxlbWVudHNbaV0uY2hpbGRyZW4pO1xuICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcm9vdCA9IGVsZW1lbnQ7XG4gICAgICB3aGlsZSAocm9vdCAmJiByb290Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwiYm9keVwiKSB7XG4gICAgICAgIHJvb3QgPSByb290LnBhcmVudE5vZGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghcm9vdCkge1xuICAgICAgICBzZWxmLnJlc2V0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGVwdGhGaXJzdFRyYXZlcnNhbChbcm9vdF0pO1xuICAgIH1cblxuICAgIGlmICghbW9EYXRhKSB7XG4gICAgICBzZWxmLnJlc2V0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHpQYXIgPSBtb0RhdGEucGFyID8gbW9EYXRhLnBhciA6IG1vRGF0YS5wYXJzWzBdO1xuICAgIHZhciBwYXJTbWlsID0gelBhci5nZXRTbWlsKCk7XG4gICAgaWYgKCFfc21pbEl0ZXJhdG9yIHx8IF9zbWlsSXRlcmF0b3Iuc21pbCAhPSBwYXJTbWlsKSB7XG4gICAgICBfc21pbEl0ZXJhdG9yID0gbmV3IFNtaWxJdGVyYXRvcihwYXJTbWlsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3NtaWxJdGVyYXRvci5yZXNldCgpO1xuICAgIH1cblxuICAgIF9zbWlsSXRlcmF0b3IuZ29Ub1Bhcih6UGFyKTtcblxuICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyICYmIGlkKSB7XG4gICAgICBfc21pbEl0ZXJhdG9yLnJlc2V0KCk7XG4gICAgICBfc21pbEl0ZXJhdG9yLmZpbmRUZXh0SWQoaWQpO1xuICAgIH1cblxuICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICBzZWxmLnJlc2V0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHdhc1BsYXlpbmcgJiYgcGxheWluZ1BhciAmJiBwbGF5aW5nUGFyID09PSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgIHNlbGYucGxheSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGF5Q3VycmVudFBhcigpO1xuICAgICAgLy9wbGF5UGFyKHpQYXIpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmlzUGxheWluZ0NmaSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfc21pbEl0ZXJhdG9yICYmIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhciAmJiBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuY2ZpO1xuICB9O1xuXG4gIHZhciBfd2FzUGF1c2VkQmVjYXVzZU5vQXV0b05leHRTbWlsID0gZmFsc2U7XG4gIHZhciBfYXV0b05leHRTbWlsID0gdHJ1ZTtcbiAgdGhpcy5zZXRBdXRvbWF0aWNOZXh0U21pbCA9IGZ1bmN0aW9uKGF1dG9OZXh0KSB7XG4gICAgX2F1dG9OZXh0U21pbCA9IGF1dG9OZXh0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZWRpYU92ZXJsYXlQbGF5ZXJcbiIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG52YXIgQ2ZpTmF2aWdhdGlvbkxvZ2ljID0gcmVxdWlyZSgnLi9jZmktbmF2aWdhdGlvbi1sb2dpYycpXG52YXIgQ1NTVHJhbnNpdGlvbiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY3NzLXRyYW5zaXRpb24nKVxudmFyIENTU1RyYW5zZm9ybVN0cmluZyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY3NzLXRyYW5zZm9ybS1zdHJpbmcnKVxudmFyIGlzSUZyYW1lQWxpdmUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzLWlmcmFtZS1hbGl2ZScpXG52YXIgbG9hZFRlbXBsYXRlID0gcmVxdWlyZSgnLi4vaGVscGVycy9sb2FkLXRlbXBsYXRlJylcbnZhciBzZXRTdHlsZXMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3NldC1zdHlsZXMnKVxudmFyIFVwZGF0ZUh0bWxGb250U2l6ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdXBkYXRlLWh0bWwtZm9udC1zaXplJylcbnZhciBWaWV3ZXJTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL21vZGVscy92aWV3ZXItc2V0dGluZ3MnKVxuXG4vKipcbiAqIFJlbmRlcnMgb25lIHBhZ2Ugb2YgZml4ZWQgbGF5b3V0IHNwcmVhZFxuICpcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcGFyYW0gY2xhc3Nlc1xuICogQHBhcmFtIGVuYWJsZUJvb2tTdHlsZU92ZXJyaWRlc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE9uZVBhZ2VWaWV3KG9wdGlvbnMsIGNsYXNzZXMsIGVuYWJsZUJvb2tTdHlsZU92ZXJyaWRlcywgcmVhZGVyKSB7XG5cbiAgXy5leHRlbmQodGhpcywgQmFja2JvbmUuRXZlbnRzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIF8kZXB1Ykh0bWw7XG4gIHZhciBfJGVsO1xuICB2YXIgXyRpZnJhbWU7XG4gIHZhciBfY3VycmVudFNwaW5lSXRlbTtcbiAgdmFyIF9zcGluZSA9IG9wdGlvbnMuc3BpbmU7XG4gIHZhciBfaWZyYW1lTG9hZGVyID0gb3B0aW9ucy5pZnJhbWVMb2FkZXI7XG4gIHZhciBfYm9va1N0eWxlcyA9IG9wdGlvbnMuYm9va1N0eWxlcztcblxuICB2YXIgXyR2aWV3cG9ydCA9IG9wdGlvbnMuJHZpZXdwb3J0O1xuXG4gIHZhciBfaXNJZnJhbWVMb2FkZWQgPSBmYWxzZTtcblxuICB2YXIgXyRzY2FsZXI7XG5cbiAgdmFyIFBhZ2VUcmFuc2l0aW9uSGFuZGxlciA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICB2YXIgUGFnZVRyYW5zaXRpb24gPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICB0aGlzLmJlZ2luID0gYmVnaW47XG4gICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB9O1xuXG4gICAgdmFyIF9wYWdlVHJhbnNpdGlvbl9PUEFDSVRZID0gbmV3IFBhZ2VUcmFuc2l0aW9uKFxuICAgICAgZnVuY3Rpb24oc2NhbGUsIGxlZnQsIHRvcCwgJGVsLCBtZXRhX3dpZHRoLCBtZXRhX2hlaWdodCwgcGFnZVN3aXRjaERpcikge1xuICAgICAgICAkZWwuY3NzKFwib3BhY2l0eVwiLCBcIjBcIik7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oc2NhbGUsIGxlZnQsIHRvcCwgJGVsLCBtZXRhX3dpZHRoLCBtZXRhX2hlaWdodCwgcGFnZVN3aXRjaERpcikge1xuICAgICAgICAkZWwuY3NzKFwidHJhbnNmb3JtXCIsIFwibm9uZVwiKTtcblxuICAgICAgICBDU1NUcmFuc2l0aW9uKCRlbCwgXCJvcGFjaXR5IDE1MG1zIGVhc2Utb3V0XCIpO1xuXG4gICAgICAgICRlbC5jc3MoXCJvcGFjaXR5XCIsIFwiMVwiKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdmFyIF9wYWdlVHJhbnNpdGlvbl9UUkFOU0xBVEUgPSBuZXcgUGFnZVRyYW5zaXRpb24oXG4gICAgICBmdW5jdGlvbihzY2FsZSwgbGVmdCwgdG9wLCAkZWwsIG1ldGFfd2lkdGgsIG1ldGFfaGVpZ2h0LCBwYWdlU3dpdGNoRGlyKSB7XG4gICAgICAgICRlbC5jc3MoXCJvcGFjaXR5XCIsIFwiMFwiKTtcblxuICAgICAgICB2YXIgZWxXaWR0aCA9IE1hdGguY2VpbChtZXRhX3dpZHRoICogc2NhbGUpO1xuXG4gICAgICAgIHZhciBpbml0aWFsTGVmdCA9IGVsV2lkdGggKiAwLjggKiAocGFnZVN3aXRjaERpciA9PT0gMiA/IDEgOiAtMSk7XG4gICAgICAgIHZhciBtb3ZlID0gQ1NTVHJhbnNmb3JtU3RyaW5nKHtcbiAgICAgICAgICBsZWZ0OiBNYXRoLnJvdW5kKGluaXRpYWxMZWZ0KSxcbiAgICAgICAgICBvcmlnaW46IFwiNTAlIDUwJSAwXCIsXG4gICAgICAgICAgZW5hYmxlM0Q6IF9lbmFibGUzRFxuICAgICAgICB9KTtcbiAgICAgICAgJGVsLmNzcyhtb3ZlKTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbihzY2FsZSwgbGVmdCwgdG9wLCAkZWwsIG1ldGFfd2lkdGgsIG1ldGFfaGVpZ2h0LCBwYWdlU3dpdGNoRGlyKSB7XG4gICAgICAgICRlbC5jc3MoXCJvcGFjaXR5XCIsIFwiMVwiKTtcblxuICAgICAgICBDU1NUcmFuc2l0aW9uKCRlbCwgXCJ0cmFuc2Zvcm0gMTUwbXMgZWFzZS1vdXRcIik7XG5cbiAgICAgICAgJGVsLmNzcyhcInRyYW5zZm9ybVwiLCBcIm5vbmVcIik7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHZhciBfcGFnZVRyYW5zaXRpb25fUk9UQVRFID0gbmV3IFBhZ2VUcmFuc2l0aW9uKFxuICAgICAgZnVuY3Rpb24oc2NhbGUsIGxlZnQsIHRvcCwgJGVsLCBtZXRhX3dpZHRoLCBtZXRhX2hlaWdodCwgcGFnZVN3aXRjaERpcikge1xuICAgICAgICAkZWwuY3NzKFwib3BhY2l0eVwiLCBcIjBcIik7XG5cbiAgICAgICAgdmFyIGVsV2lkdGggPSBNYXRoLmNlaWwobWV0YV93aWR0aCAqIHNjYWxlKTtcblxuICAgICAgICB2YXIgaW5pdGlhbExlZnQgPSBlbFdpZHRoICogMS43ICogKHBhZ2VTd2l0Y2hEaXIgPT09IDIgPyAxIDogLTEpO1xuICAgICAgICB2YXIgdHJhbnMgPSBDU1NUcmFuc2Zvcm1TdHJpbmcoe1xuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQoaW5pdGlhbExlZnQpLFxuICAgICAgICAgIGFuZ2xlOiAocGFnZVN3aXRjaERpciA9PT0gMiA/IC0xIDogMSkgKiAzMCxcbiAgICAgICAgICBvcmlnaW46IFwiNTAlIDUwJSAwXCIsXG4gICAgICAgICAgZW5hYmxlM0Q6IF9lbmFibGUzRFxuICAgICAgICB9KTsgLy8ocGFnZVN3aXRjaERpciA9PT0gMiA/ICcwJSAwJScgOiAnMTAwJSAwJScpXG4gICAgICAgICRlbC5jc3ModHJhbnMpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKHNjYWxlLCBsZWZ0LCB0b3AsICRlbCwgbWV0YV93aWR0aCwgbWV0YV9oZWlnaHQsIHBhZ2VTd2l0Y2hEaXIpIHtcbiAgICAgICAgJGVsLmNzcyhcIm9wYWNpdHlcIiwgXCIxXCIpO1xuXG4gICAgICAgIENTU1RyYW5zaXRpb24oJGVsLCBcInRyYW5zZm9ybSAzMDBtcyBlYXNlLWluLW91dFwiKTtcblxuICAgICAgICAkZWwuY3NzKFwidHJhbnNmb3JtXCIsIFwibm9uZVwiKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdmFyIF9wYWdlVHJhbnNpdGlvbl9TV0lORyA9IG5ldyBQYWdlVHJhbnNpdGlvbihcbiAgICAgIGZ1bmN0aW9uKHNjYWxlLCBsZWZ0LCB0b3AsICRlbCwgbWV0YV93aWR0aCwgbWV0YV9oZWlnaHQsIHBhZ2VTd2l0Y2hEaXIpIHtcbiAgICAgICAgJGVsLmNzcyhcIm9wYWNpdHlcIiwgXCIwXCIpO1xuXG4gICAgICAgIC8vIFNVUEVSIEhBQ0tZISEgKGp1c3QgZm9yIGRlbW8pXG4gICAgICAgIHZhciBpc0xlZnQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlzQ2VudGVyID0gZmFsc2U7XG4gICAgICAgIHZhciBpc1JpZ2h0ID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBjID0gY2xhc3Nlc1tpXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGlmIChjLmluZGV4T2YoXCJsZWZ0XCIpID49IDApIHtcbiAgICAgICAgICAgIGlzTGVmdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGMuaW5kZXhPZihcInJpZ2h0XCIpID49IDApIHtcbiAgICAgICAgICAgIGlzUmlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjLmluZGV4T2YoXCJjZW50ZXJcIikgPj0gMCkge1xuICAgICAgICAgICAgaXNDZW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsV2lkdGggPSBNYXRoLmNlaWwobWV0YV93aWR0aCAqIHNjYWxlKTtcblxuICAgICAgICB2YXIgaW5pdGlhbExlZnQgPSBlbFdpZHRoICogMC41ICogKChpc0xlZnQgfHwgaXNDZW50ZXIgJiYgcGFnZVN3aXRjaERpciA9PT0gMSkgPyAxIDogLTEpO1xuICAgICAgICB2YXIgdHJhbnMgPSBDU1NUcmFuc2Zvcm1TdHJpbmcoe1xuICAgICAgICAgIHNjYWxlOiAwLjIsXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChpbml0aWFsTGVmdCksXG4gICAgICAgICAgYW5nbGU6ICgoaXNMZWZ0IHx8IGlzQ2VudGVyICYmIHBhZ2VTd2l0Y2hEaXIgPT09IDEpID8gMSA6IC0xKSAqIDMwLFxuICAgICAgICAgIG9yaWdpbjogJzUwJSA1MCUgMCcsXG4gICAgICAgICAgZW5hYmxlM0Q6IF9lbmFibGUzRFxuICAgICAgICB9KTtcbiAgICAgICAgJGVsLmNzcyh0cmFucyk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oc2NhbGUsIGxlZnQsIHRvcCwgJGVsLCBtZXRhX3dpZHRoLCBtZXRhX2hlaWdodCwgcGFnZVN3aXRjaERpcikge1xuICAgICAgICAkZWwuY3NzKFwib3BhY2l0eVwiLCBcIjFcIik7XG5cbiAgICAgICAgQ1NTVHJhbnNpdGlvbigkZWwsIFwidHJhbnNmb3JtIDQwMG1zIGVhc2Utb3V0XCIpO1xuXG4gICAgICAgICRlbC5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJub25lXCIpO1xuICAgICAgfVxuICAgICk7XG5cbiAgICB2YXIgX3BhZ2VUcmFuc2l0aW9ucyA9IFtdO1xuICAgIF9wYWdlVHJhbnNpdGlvbnMucHVzaChfcGFnZVRyYW5zaXRpb25fT1BBQ0lUWSk7IC8vIDBcbiAgICBfcGFnZVRyYW5zaXRpb25zLnB1c2goX3BhZ2VUcmFuc2l0aW9uX1RSQU5TTEFURSk7IC8vIDFcbiAgICBfcGFnZVRyYW5zaXRpb25zLnB1c2goX3BhZ2VUcmFuc2l0aW9uX1JPVEFURSk7IC8vIDJcbiAgICBfcGFnZVRyYW5zaXRpb25zLnB1c2goX3BhZ2VUcmFuc2l0aW9uX1NXSU5HKTsgLy8gM1xuXG4gICAgdmFyIF9kaXNhYmxlUGFnZVRyYW5zaXRpb25zID0gb3B0cy5kaXNhYmxlUGFnZVRyYW5zaXRpb25zIHx8IGZhbHNlO1xuXG4gICAgdmFyIF9wYWdlVHJhbnNpdGlvbiA9IC0xO1xuXG4gICAgdmFyIF9lbmFibGUzRCA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSkuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRDtcblxuICAgIHZhciBfdmlld2VyU2V0dGluZ3MgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy51cGRhdGVPcHRpb25zID0gZnVuY3Rpb24obykge1xuICAgICAgX3ZpZXdlclNldHRpbmdzID0gbztcblxuICAgICAgdmFyIHNldHRpbmdzID0gX3ZpZXdlclNldHRpbmdzO1xuICAgICAgaWYgKCFzZXR0aW5ncyB8fCB0eXBlb2Ygc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvL2RlZmF1bHRzXG4gICAgICAgIHNldHRpbmdzID0gbmV3IFZpZXdlclNldHRpbmdzKHt9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEKSB7XG4gICAgICAgIF9lbmFibGUzRCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvLnBhZ2VUcmFuc2l0aW9uICE9PSBudWxsICYmIHR5cGVvZiBvLnBhZ2VUcmFuc2l0aW9uICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIF9wYWdlVHJhbnNpdGlvbiA9IG8ucGFnZVRyYW5zaXRpb247XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnVwZGF0ZU9wdGlvbnMob3B0cyk7XG5cbiAgICB2YXIgX3BhZ2VTd2l0Y2hEaXIgPSAwO1xuICAgIHZhciBfcGFnZVN3aXRjaEFjdHVhbGx5Q2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBfcGFnZVN3aXRjaEFjdHVhbGx5Q2hhbmdlZF9JRlJBTUVfTE9BRCA9IGZhbHNlO1xuXG4gICAgLy8gZGlyOiAwID0+IG5ldyBvciBzYW1lIHBhZ2UsIDEgPT4gcHJldmlvdXMsIDIgPT4gbmV4dFxuICAgIHRoaXMudXBkYXRlUGFnZVN3aXRjaERpciA9IGZ1bmN0aW9uKGRpciwgaGFzQ2hhbmdlZCkge1xuICAgICAgaWYgKF9wYWdlU3dpdGNoQWN0dWFsbHlDaGFuZ2VkX0lGUkFNRV9MT0FEKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3BhZ2VTd2l0Y2hEaXIgPSBkaXI7XG4gICAgICBfcGFnZVN3aXRjaEFjdHVhbGx5Q2hhbmdlZCA9IGhhc0NoYW5nZWQ7XG4gICAgfTtcblxuICAgIHRoaXMub25JRnJhbWVMb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICBfcGFnZVN3aXRjaEFjdHVhbGx5Q2hhbmdlZF9JRlJBTUVfTE9BRCA9IHRydWU7IC8vIHNlY29uZCBwYXNzLCBidXQgaW5pdGlhbCBkaXNwbGF5IGZvciB0cmFuc2l0aW9uXG4gICAgfTtcblxuICAgIHRoaXMudHJhbnNmb3JtQ29udGVudEltbWVkaWF0ZV9CRUdJTiA9IGZ1bmN0aW9uKCRlbCwgc2NhbGUsIGxlZnQsIHRvcCkge1xuICAgICAgdmFyIHBhZ2VTd2l0Y2hBY3R1YWxseUNoYW5nZWQgPSBfcGFnZVN3aXRjaEFjdHVhbGx5Q2hhbmdlZCB8fCBfcGFnZVN3aXRjaEFjdHVhbGx5Q2hhbmdlZF9JRlJBTUVfTE9BRDtcbiAgICAgIF9wYWdlU3dpdGNoQWN0dWFsbHlDaGFuZ2VkX0lGUkFNRV9MT0FEID0gZmFsc2U7XG5cbiAgICAgIGlmIChfZGlzYWJsZVBhZ2VUcmFuc2l0aW9ucyB8fCBfcGFnZVRyYW5zaXRpb24gPT09IC0xKSByZXR1cm47XG5cbiAgICAgIENTU1RyYW5zaXRpb24oJGVsLCBcImFsbCAwIGVhc2UgMFwiKTtcblxuICAgICAgaWYgKCFwYWdlU3dpdGNoQWN0dWFsbHlDaGFuZ2VkKSByZXR1cm47XG5cbiAgICAgIHZhciBwYWdlVHJhbnNpdGlvbiA9IChfcGFnZVRyYW5zaXRpb24gPj0gMCAmJiBfcGFnZVRyYW5zaXRpb24gPCBfcGFnZVRyYW5zaXRpb25zLmxlbmd0aCkgPyBfcGFnZVRyYW5zaXRpb25zW19wYWdlVHJhbnNpdGlvbl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChfcGFnZVN3aXRjaERpciA9PT0gMCB8fCAhcGFnZVRyYW5zaXRpb24pIHtcbiAgICAgICAgJGVsLmNzcyhcIm9wYWNpdHlcIiwgXCIwXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnZVRyYW5zaXRpb24uYmVnaW4oc2NhbGUsIGxlZnQsIHRvcCwgJGVsLCBzZWxmLm1ldGFfd2lkdGgoKSwgc2VsZi5tZXRhX2hlaWdodCgpLCBfcGFnZVN3aXRjaERpcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMudHJhbnNmb3JtQ29udGVudEltbWVkaWF0ZV9FTkQgPSBmdW5jdGlvbigkZWwsIHNjYWxlLCBsZWZ0LCB0b3ApIHtcbiAgICAgIGlmIChfZGlzYWJsZVBhZ2VUcmFuc2l0aW9ucyB8fCBfcGFnZVRyYW5zaXRpb24gPT09IC0xKSB7XG4gICAgICAgICRlbC5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJub25lXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYWdlVHJhbnNpdGlvbiA9IChfcGFnZVRyYW5zaXRpb24gPj0gMCAmJiBfcGFnZVRyYW5zaXRpb24gPCBfcGFnZVRyYW5zaXRpb25zLmxlbmd0aCkgPyBfcGFnZVRyYW5zaXRpb25zW19wYWdlVHJhbnNpdGlvbl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKF9wYWdlU3dpdGNoRGlyID09PSAwIHx8ICFwYWdlVHJhbnNpdGlvbikge1xuICAgICAgICAgICRlbC5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJub25lXCIpO1xuXG4gICAgICAgICAgQ1NTVHJhbnNpdGlvbigkZWwsIFwib3BhY2l0eSAyNTBtcyBsaW5lYXJcIik7XG5cbiAgICAgICAgICAkZWwuY3NzKFwib3BhY2l0eVwiLCBcIjFcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFnZVRyYW5zaXRpb24uZW5kKHNjYWxlLCBsZWZ0LCB0b3AsICRlbCwgc2VsZi5tZXRhX3dpZHRoKCksIHNlbGYubWV0YV9oZWlnaHQoKSwgX3BhZ2VTd2l0Y2hEaXIpO1xuICAgICAgICB9XG5cbiAgICAgIH0sIDEwKTtcbiAgICB9O1xuICB9O1xuICB2YXIgX3BhZ2VUcmFuc2l0aW9uSGFuZGxlciA9IG5ldyBQYWdlVHJhbnNpdGlvbkhhbmRsZXIob3B0aW9ucyk7XG5cblxuICAvLyBmaXhlZCBsYXlvdXQgZG9lcyBub3QgYXBwbHkgdXNlciBzdHlsZXMgdG8gcHVibGlzaGVyIGNvbnRlbnQsIGJ1dCByZWZsb3dhYmxlIHNjcm9sbCB2aWV3IGRvZXNcbiAgdmFyIF9lbmFibGVCb29rU3R5bGVPdmVycmlkZXMgPSBlbmFibGVCb29rU3R5bGVPdmVycmlkZXMgfHwgZmFsc2U7XG5cbiAgdmFyIF9tZXRhX3NpemUgPSB7XG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH07XG5cbiAgdGhpcy5lbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF8kZWw7XG4gIH07XG5cbiAgdGhpcy5tZXRhX2hlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfbWV0YV9zaXplLmhlaWdodDtcbiAgfTtcblxuICB0aGlzLm1ldGFfd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX21ldGFfc2l6ZS53aWR0aDtcbiAgfTtcblxuICB0aGlzLmlzRGlzcGxheWluZyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIF9pc0lmcmFtZUxvYWRlZDtcbiAgfTtcblxuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHRlbXBsYXRlID0gbG9hZFRlbXBsYXRlKFwic2luZ2xlX3BhZ2VfZnJhbWVcIiwge30pO1xuXG4gICAgXyRlbCA9ICQodGVtcGxhdGUpO1xuXG4gICAgXyRzY2FsZXIgPSAkKFwiI3NjYWxlclwiLCBfJGVsKTtcblxuICAgIENTU1RyYW5zaXRpb24oXyRlbCwgXCJhbGwgMCBlYXNlIDBcIik7XG5cbiAgICBfJGVsLmNzcyhcInRyYW5zZm9ybVwiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgc2V0dGluZ3MgPSByZWFkZXIudmlld2VyU2V0dGluZ3MoKTtcbiAgICBpZiAoIXNldHRpbmdzIHx8IHR5cGVvZiBzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAvL2RlZmF1bHRzXG4gICAgICBzZXR0aW5ncyA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSk7XG4gICAgfVxuICAgIGlmIChzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEKSB7XG5cbiAgICAgIC8vIFRoaXMgZml4ZXMgcmVuZGVyaW5nIGlzc3VlcyB3aXRoIFdlYlZpZXcgKG5hdGl2ZSBhcHBzKSwgd2hpY2ggY3JvcHMgY29udGVudCBlbWJlZGRlZCBpbiBpZnJhbWVzIHVubGVzcyBHUFUgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIGlzIGVuYWJsZWQgZm9yIENTUyByZW5kZXJpbmcuXG4gICAgICBfJGVsLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVooMClcIik7XG4gICAgfVxuXG4gICAgXyRlbC5jc3MoXCJoZWlnaHRcIiwgXCIxMDAlXCIpO1xuICAgIF8kZWwuY3NzKFwid2lkdGhcIiwgXCIxMDAlXCIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gY2xhc3Nlcy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBfJGVsLmFkZENsYXNzKGNsYXNzZXNbaV0pO1xuICAgIH1cblxuICAgIF8kaWZyYW1lID0gJChcImlmcmFtZVwiLCBfJGVsKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgdGhpcy5kZWNvcmF0ZUlmcmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghXyRpZnJhbWUgfHwgIV8kaWZyYW1lLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgXyRpZnJhbWUuY3NzKFwiYm9yZGVyLWJvdHRvbVwiLCBcIjFweCBkYXNoZWQgc2lsdmVyXCIpO1xuICAgIF8kaWZyYW1lLmNzcyhcImJvcmRlci10b3BcIiwgXCIxcHggZGFzaGVkIHNpbHZlclwiKTtcbiAgfVxuXG4gIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgX2lzSWZyYW1lTG9hZGVkID0gZmFsc2U7XG4gICAgX2N1cnJlbnRTcGluZUl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgXyRlbC5yZW1vdmUoKTtcbiAgfTtcblxuICB0aGlzLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgX2lzSWZyYW1lTG9hZGVkID0gZmFsc2U7XG4gICAgXyRpZnJhbWVbMF0uc3JjID0gXCJcIjtcbiAgfTtcblxuICB0aGlzLmN1cnJlbnRTcGluZUl0ZW0gPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiBfY3VycmVudFNwaW5lSXRlbTtcbiAgfTtcblxuICBmdW5jdGlvbiBvbklGcmFtZUxvYWQoc3VjY2Vzcykge1xuXG4gICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgIF9pc0lmcmFtZUxvYWRlZCA9IHRydWU7XG4gICAgICB2YXIgZXB1YkNvbnRlbnREb2N1bWVudCA9IF8kaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcbiAgICAgIF8kZXB1Ykh0bWwgPSAkKFwiaHRtbFwiLCBlcHViQ29udGVudERvY3VtZW50KTtcbiAgICAgIGlmICghXyRlcHViSHRtbCB8fCBfJGVwdWJIdG1sLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIF8kZXB1Ykh0bWwgPSAkKFwic3ZnXCIsIGVwdWJDb250ZW50RG9jdW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAvL18kZXB1Ykh0bWwuY3NzKFwib3ZlcmZsb3dcIiwgXCJoaWRkZW5cIik7XG5cbiAgICAgIGlmIChfZW5hYmxlQm9va1N0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICAgIHNlbGYuYXBwbHlCb29rU3R5bGVzKCk7XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZU1ldGFTaXplKCk7XG5cbiAgICAgIF9wYWdlVHJhbnNpdGlvbkhhbmRsZXIub25JRnJhbWVMb2FkKCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIF92aWV3U2V0dGluZ3MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuc2V0Vmlld1NldHRpbmdzID0gZnVuY3Rpb24oc2V0dGluZ3MpIHtcblxuICAgIF92aWV3U2V0dGluZ3MgPSBzZXR0aW5ncztcblxuICAgIGlmIChfZW5hYmxlQm9va1N0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICBzZWxmLmFwcGx5Qm9va1N0eWxlcygpO1xuICAgIH1cblxuICAgIHVwZGF0ZU1ldGFTaXplKCk7XG5cbiAgICBfcGFnZVRyYW5zaXRpb25IYW5kbGVyLnVwZGF0ZU9wdGlvbnMoc2V0dGluZ3MpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZUh0bWxGb250U2l6ZSgpIHtcblxuICAgIGlmICghX2VuYWJsZUJvb2tTdHlsZU92ZXJyaWRlcykgcmV0dXJuO1xuXG4gICAgaWYgKF8kZXB1Ykh0bWwgJiYgX3ZpZXdTZXR0aW5ncykge1xuICAgICAgVXBkYXRlSHRtbEZvbnRTaXplKF8kZXB1Ykh0bWwsIF92aWV3U2V0dGluZ3MuZm9udFNpemUpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuYXBwbHlCb29rU3R5bGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoIV9lbmFibGVCb29rU3R5bGVPdmVycmlkZXMpIHJldHVybjtcblxuICAgIGlmIChfJGVwdWJIdG1sKSB7XG4gICAgICBzZXRTdHlsZXMoX2Jvb2tTdHlsZXMuZ2V0U3R5bGVzKCksIF8kZXB1Ykh0bWwpO1xuICAgICAgdXBkYXRlSHRtbEZvbnRTaXplKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vdGhpcyBpcyBjYWxsZWQgYnkgc2Nyb2xsX3ZpZXcgZm9yIGZpeGVkIHNwaW5lIGl0ZW1cbiAgdGhpcy5zY2FsZVRvV2lkdGggPSBmdW5jdGlvbih3aWR0aCkge1xuXG4gICAgaWYgKF9tZXRhX3NpemUud2lkdGggPD0gMCkgcmV0dXJuOyAvLyByZXNpemUgZXZlbnQgdG9vIGVhcmx5IVxuXG4gICAgdmFyIHNjYWxlID0gd2lkdGggLyBfbWV0YV9zaXplLndpZHRoO1xuICAgIHNlbGYudHJhbnNmb3JtQ29udGVudEltbWVkaWF0ZShzY2FsZSwgMCwgMCk7XG4gIH07XG5cbiAgLy90aGlzIGlzIGNhbGxlZCBieSBzY3JvbGxfdmlldyBmb3IgcmVmbG93YWJsZSBzcGluZSBpdGVtXG4gIHRoaXMucmVzaXplSUZyYW1lVG9Db250ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbnRIZWlnaHQgPSBnZXRDb250ZW50RG9jSGVpZ2h0KCk7XG4gICAgLy9jb25zb2xlLmxvZyhcInJlc2l6ZUlGcmFtZVRvQ29udGVudDogXCIgKyBjb250SGVpZ2h0KTtcblxuICAgIHNlbGYuc2V0SGVpZ2h0KGNvbnRIZWlnaHQpO1xuXG4gICAgc2VsZi5zaG93SUZyYW1lKCk7XG4gIH07XG5cbiAgdGhpcy5zZXRIZWlnaHQgPSBmdW5jdGlvbihoZWlnaHQpIHtcblxuICAgIF8kc2NhbGVyLmNzcyhcImhlaWdodFwiLCBoZWlnaHQgKyBcInB4XCIpO1xuICAgIF8kZWwuY3NzKFwiaGVpZ2h0XCIsIGhlaWdodCArIFwicHhcIik7XG5cbiAgICAvLyAgICAgICAgXyRpZnJhbWUuY3NzKFwiaGVpZ2h0XCIsIGhlaWdodCArIFwicHhcIik7XG4gIH07XG5cbiAgdmFyIF91c2VDU1NUcmFuc2Zvcm1Ub0hpZGVJZnJhbWUgPSB0cnVlO1xuXG4gIHRoaXMuc2hvd0lGcmFtZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgXyRpZnJhbWUuY3NzKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XG5cbiAgICBpZiAoX3VzZUNTU1RyYW5zZm9ybVRvSGlkZUlmcmFtZSkge1xuICAgICAgXyRpZnJhbWUuY3NzKFwidHJhbnNmb3JtXCIsIFwibm9uZVwiKTtcblxuICAgICAgdmFyIGVuYWJsZTNEID0gZmFsc2U7XG4gICAgICB2YXIgc2V0dGluZ3MgPSBfdmlld1NldHRpbmdzO1xuICAgICAgaWYgKCFzZXR0aW5ncyB8fCB0eXBlb2Ygc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvL2RlZmF1bHRzXG4gICAgICAgIHNldHRpbmdzID0gbmV3IFZpZXdlclNldHRpbmdzKHt9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEKSB7XG4gICAgICAgIGVuYWJsZTNEID0gdHJ1ZTtcbiAgICAgICAgXyRpZnJhbWUuY3NzKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlWigwKVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgXyRpZnJhbWUuY3NzKHtcbiAgICAgICAgbGVmdDogXCIwcHhcIixcbiAgICAgICAgdG9wOiBcIjBweFwiXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5oaWRlSUZyYW1lID0gZnVuY3Rpb24oKSB7XG5cbiAgICBfJGlmcmFtZS5jc3MoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuXG4gICAgLy8gV2l0aCBzb21lIGJvb2tzLCBkZXNwaXRlIHRoZSBpZnJhbWUgYW5kIGl0cyBjb250YWluaW5nIGRpdiB3cmFwcGVyIGJlaW5nIGhpZGRlbixcbiAgICAvLyB0aGUgaWZyYW1lJ3MgY29udGVudFdpbmRvdyAvIGNvbnRlbnREb2N1bWVudCBpcyBzdGlsbCB2aXNpYmxlIVxuICAgIC8vIFRodXMgd2h5IHdlIHRyYW5zbGF0ZSB0aGUgaWZyYW1lIG91dCBvZiB2aWV3IGluc3RlYWQuXG5cbiAgICBpZiAoX3VzZUNTU1RyYW5zZm9ybVRvSGlkZUlmcmFtZSkge1xuICAgICAgdmFyIGVuYWJsZTNEID0gZmFsc2U7XG4gICAgICB2YXIgc2V0dGluZ3MgPSBfdmlld1NldHRpbmdzO1xuICAgICAgaWYgKCFzZXR0aW5ncyB8fCB0eXBlb2Ygc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvL2RlZmF1bHRzXG4gICAgICAgIHNldHRpbmdzID0gbmV3IFZpZXdlclNldHRpbmdzKHt9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEKSB7XG4gICAgICAgIGVuYWJsZTNEID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNzcyA9IENTU1RyYW5zZm9ybVN0cmluZyh7XG4gICAgICAgIGxlZnQ6IFwiMTAwMDBcIixcbiAgICAgICAgdG9wOiBcIjEwMDAwXCIsXG4gICAgICAgIGVuYWJsZTNEOiBlbmFibGUzRFxuICAgICAgfSk7XG4gICAgICBfJGlmcmFtZS5jc3MoY3NzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgXyRpZnJhbWUuY3NzKHtcbiAgICAgICAgbGVmdDogXCIxMDAwMHB4XCIsXG4gICAgICAgIHRvcDogXCIxMDAwMHB4XCJcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBnZXRDb250ZW50RG9jSGVpZ2h0KCkge1xuXG4gICAgaWYgKCFfJGlmcmFtZSB8fCAhXyRpZnJhbWUubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBpZiAoaXNJZnJhbWVBbGl2ZShfJGlmcmFtZVswXSkpIHtcbiAgICAgIHZhciB3aW4gPSBfJGlmcmFtZVswXS5jb250ZW50V2luZG93O1xuICAgICAgdmFyIGRvYyA9IF8kaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcblxuICAgICAgdmFyIGhlaWdodCA9IE1hdGgucm91bmQocGFyc2VGbG9hdCh3aW4uZ2V0Q29tcHV0ZWRTdHlsZShkb2MuZG9jdW1lbnRFbGVtZW50KS5oZWlnaHQpKTsgLy9ib2R5IGNhbiBiZSBzaG9ydGVyIVxuICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9IGVsc2UgaWYgKF8kZXB1Ykh0bWwpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJnZXRDb250ZW50RG9jSGVpZ2h0ID8/XCIpO1xuXG4gICAgICB2YXIganF1ZXJ5SGVpZ2h0ID0gXyRlcHViSHRtbC5oZWlnaHQoKTtcbiAgICAgIHJldHVybiBqcXVlcnlIZWlnaHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBkaXI6IDAgPT4gbmV3IG9yIHNhbWUgcGFnZSwgMSA9PiBwcmV2aW91cywgMiA9PiBuZXh0XG4gIHRoaXMudXBkYXRlUGFnZVN3aXRjaERpciA9IGZ1bmN0aW9uKGRpciwgaGFzQ2hhbmdlZCkge1xuICAgIF9wYWdlVHJhbnNpdGlvbkhhbmRsZXIudXBkYXRlUGFnZVN3aXRjaERpcihkaXIsIGhhc0NoYW5nZWQpO1xuICB9O1xuXG5cbiAgdGhpcy50cmFuc2Zvcm1Db250ZW50SW1tZWRpYXRlID0gZnVuY3Rpb24oc2NhbGUsIGxlZnQsIHRvcCkge1xuXG4gICAgdmFyIGVsV2lkdGggPSBNYXRoLmNlaWwoX21ldGFfc2l6ZS53aWR0aCAqIHNjYWxlKTtcbiAgICB2YXIgZWxIZWlnaHQgPSBNYXRoLmZsb29yKF9tZXRhX3NpemUuaGVpZ2h0ICogc2NhbGUpO1xuXG4gICAgX3BhZ2VUcmFuc2l0aW9uSGFuZGxlci50cmFuc2Zvcm1Db250ZW50SW1tZWRpYXRlX0JFR0lOKF8kZWwsIHNjYWxlLCBsZWZ0LCB0b3ApO1xuXG4gICAgXyRlbC5jc3MoXCJsZWZ0XCIsIGxlZnQgKyBcInB4XCIpO1xuICAgIF8kZWwuY3NzKFwidG9wXCIsIHRvcCArIFwicHhcIik7XG4gICAgXyRlbC5jc3MoXCJ3aWR0aFwiLCBlbFdpZHRoICsgXCJweFwiKTtcbiAgICBfJGVsLmNzcyhcImhlaWdodFwiLCBlbEhlaWdodCArIFwicHhcIik7XG5cbiAgICBpZiAoIV8kZXB1Ykh0bWwpIHtcbiAgICAgIC8vICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGVuYWJsZTNEID0gZmFsc2U7XG4gICAgdmFyIHNldHRpbmdzID0gX3ZpZXdTZXR0aW5ncztcbiAgICBpZiAoIXNldHRpbmdzIHx8IHR5cGVvZiBzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAvL2RlZmF1bHRzXG4gICAgICBzZXR0aW5ncyA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSk7XG4gICAgfVxuICAgIGlmIChzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEKSB7XG4gICAgICBlbmFibGUzRCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHJlYWRlci5uZWVkc0ZpeGVkTGF5b3V0U2NhbGVyV29ya0Fyb3VuZCgpKSB7XG4gICAgICB2YXIgY3NzMSA9IENTU1RyYW5zZm9ybVN0cmluZyh7XG4gICAgICAgIHNjYWxlOiBzY2FsZSxcbiAgICAgICAgZW5hYmxlM0Q6IGVuYWJsZTNEXG4gICAgICB9KTtcbiAgICAgIF8kZXB1Ykh0bWwuY3NzKGNzczEpO1xuXG4gICAgICB2YXIgY3NzMiA9IENTU1RyYW5zZm9ybVN0cmluZyh7XG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICBlbmFibGUzRDogZW5hYmxlM0RcbiAgICAgIH0pO1xuICAgICAgY3NzMltcIndpZHRoXCJdID0gX21ldGFfc2l6ZS53aWR0aDtcbiAgICAgIGNzczJbXCJoZWlnaHRcIl0gPSBfbWV0YV9zaXplLmhlaWdodDtcbiAgICAgIF8kc2NhbGVyLmNzcyhjc3MyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNzcyA9IENTU1RyYW5zZm9ybVN0cmluZyh7XG4gICAgICAgIHNjYWxlOiBzY2FsZSxcbiAgICAgICAgZW5hYmxlM0Q6IGVuYWJsZTNEXG4gICAgICB9KTtcbiAgICAgIGNzc1tcIndpZHRoXCJdID0gX21ldGFfc2l6ZS53aWR0aDtcbiAgICAgIGNzc1tcImhlaWdodFwiXSA9IF9tZXRhX3NpemUuaGVpZ2h0O1xuICAgICAgXyRzY2FsZXIuY3NzKGNzcyk7XG4gICAgfVxuXG4gICAgLy8gQ2hyb21lIHdvcmthcm91bmQ6IG90aGVyd2lzZSB0ZXh0IGlzIHNvbWV0aW1lcyBpbnZpc2libGUgKHByb2JhYmx5IGEgcmVuZGVyaW5nIGdsaXRjaCBkdWUgdG8gdGhlIDNEIHRyYW5zZm9ybSBncmFwaGljcyBiYWNrZW5kPylcbiAgICAvL18kZXB1Ykh0bWwuY3NzKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTsgLy8gXCJmbGFzaGluZ1wiIGluIHR3by1wYWdlIHNwcmVhZCBtb2RlIGlzIGFubm95aW5nIDooXG4gICAgXyRlcHViSHRtbC5jc3MoXCJvcGFjaXR5XCIsIFwiMC45OTlcIik7XG5cbiAgICBzZWxmLnNob3dJRnJhbWUoKTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAvL18kZXB1Ykh0bWwuY3NzKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XG4gICAgICBfJGVwdWJIdG1sLmNzcyhcIm9wYWNpdHlcIiwgXCIxXCIpO1xuICAgIH0sIDApO1xuXG4gICAgX3BhZ2VUcmFuc2l0aW9uSGFuZGxlci50cmFuc2Zvcm1Db250ZW50SW1tZWRpYXRlX0VORChfJGVsLCBzY2FsZSwgbGVmdCwgdG9wKTtcbiAgfTtcblxuICB0aGlzLmdldENhbGN1bGF0ZWRQYWdlSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF8kZWwuaGVpZ2h0KCk7XG4gIH07XG5cbiAgdGhpcy50cmFuc2Zvcm1Db250ZW50ID0gXy5iaW5kKF8uZGVib3VuY2UodGhpcy50cmFuc2Zvcm1Db250ZW50SW1tZWRpYXRlLCA1MCksIHNlbGYpO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1ldGFTaXplKCkge1xuXG4gICAgX21ldGFfc2l6ZS53aWR0aCA9IDA7XG4gICAgX21ldGFfc2l6ZS5oZWlnaHQgPSAwO1xuXG4gICAgdmFyIHNpemUgPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgY29udGVudERvY3VtZW50ID0gXyRpZnJhbWVbMF0uY29udGVudERvY3VtZW50O1xuXG4gICAgLy8gZmlyc3QgdHJ5IHRvIHJlYWQgdmlld3BvcnQgc2l6ZVxuICAgIHZhciBjb250ZW50ID0gJCgnbWV0YVtuYW1lPXZpZXdwb3J0XScsIGNvbnRlbnREb2N1bWVudCkuYXR0cihcImNvbnRlbnRcIik7XG5cbiAgICAvLyBpZiBub3QgZm91bmQgdHJ5IHZpZXdib3ggKHVzZWQgZm9yIFNWRylcbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIGNvbnRlbnQgPSAkKCdtZXRhW25hbWU9dmlld2JveF0nLCBjb250ZW50RG9jdW1lbnQpLmF0dHIoXCJjb250ZW50XCIpO1xuICAgIH1cblxuICAgIGlmIChjb250ZW50KSB7XG4gICAgICBzaXplID0gcGFyc2VNZXRhU2l6ZShjb250ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIXNpemUpIHtcbiAgICAgIC8vIFRPRE86IHRoZSBwaWNrZWQgU1ZHIGVsZW1lbnQgbWF5IGJlIHRoZSByb290Li4ubWF5IGJlIGRlZXAgaW5zaWRlIHRoZSBtYXJrdXAhXG4gICAgICB2YXIgJHN2ZyA9ICQoY29udGVudERvY3VtZW50KS5maW5kKCdzdmcnKTtcbiAgICAgIC8vdmFyICRzdmcgPSAkKGNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgLy8gY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSA9PSBcInN2Z1wiXG4gICAgICBpZiAoJHN2Zy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgdmFyIHdpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciB3QXR0ciA9ICRzdmdbMF0uZ2V0QXR0cmlidXRlKFwid2lkdGhcIik7XG4gICAgICAgIGlmICh3QXR0cikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aWR0aCA9IHBhcnNlSW50KHdBdHRyLCAxMCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICB9XG4gICAgICAgIHZhciBoQXR0ciA9ICRzdmdbMF0uZ2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIpO1xuICAgICAgICBpZiAoaEF0dHIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaGVpZ2h0ID0gcGFyc2VJbnQoaEF0dHIsIDEwKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2lkdGggJiYgaGVpZ2h0KSB7XG4gICAgICAgICAgc2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vLyBESVNBQkxFRCAobm90IGEgc2F0aXNmYWN0b3J5IGZhbGxiYWNrKVxuICAgICAgICAgIC8vIGNvbnRlbnQgPSAkc3ZnLmF0dHIoJ3ZpZXdCb3gnKTtcbiAgICAgICAgICAvLyBpZihjb250ZW50KSB7XG4gICAgICAgICAgLy8gICAgIHNpemUgPSBwYXJzZVZpZXdCb3hTaXplKGNvbnRlbnQpO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIGlmIChzaXplKSB7XG4gICAgICAgICAgLy8gICAgIGNvbnNvbGUud2FybihcIlZpZXdwb3J0IFNWRzogdXNpbmcgdmlld2JveCFcIik7XG4gICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzaXplICYmIF9jdXJyZW50U3BpbmVJdGVtKSB7XG4gICAgICBjb250ZW50ID0gX2N1cnJlbnRTcGluZUl0ZW0uZ2V0UmVuZGl0aW9uVmlld3BvcnQoKTtcblxuICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgc2l6ZSA9IHBhcnNlTWV0YVNpemUoY29udGVudCk7XG4gICAgICAgIGlmIChzaXplKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJWaWV3cG9ydDogdXNpbmcgcmVuZGl0aW9uOnZpZXdwb3J0IGRpbWVuc2lvbnNcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXNpemUpIHtcbiAgICAgIC8vIEltYWdlIGZhbGxiYWNrIChhdXRvLWdlbmVyYXRlZCBIVE1MIHRlbXBsYXRlIHdoZW4gV2ViVmlldyAvIGlGcmFtZSBpcyBmZWQgd2l0aCBpbWFnZSBtZWRpYSB0eXBlKVxuICAgICAgdmFyICRpbWcgPSAkKGNvbnRlbnREb2N1bWVudCkuZmluZCgnaW1nJyk7XG4gICAgICBpZiAoJGltZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNpemUgPSB7XG4gICAgICAgICAgICB3aWR0aDogJGltZy53aWR0aCgpLFxuICAgICAgICAgICAgaGVpZ2h0OiAkaW1nLmhlaWdodCgpXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGlmIChjb250ZW50RG9jdW1lbnQgJiYgY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBjb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICYmIGNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSBcInN2Z1wiKSB7XG4gICAgICAgICAgLy8gICAgIGNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgc2l6ZS53aWR0aCk7XG4gICAgICAgICAgLy8gICAgIGNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIHNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAvLyB9XG5cbiAgICAgICAgdmFyIGlzSW1hZ2UgPSBfY3VycmVudFNwaW5lSXRlbSAmJiBfY3VycmVudFNwaW5lSXRlbS5tZWRpYV90eXBlICYmIF9jdXJyZW50U3BpbmVJdGVtLm1lZGlhX3R5cGUubGVuZ3RoICYmIF9jdXJyZW50U3BpbmVJdGVtLm1lZGlhX3R5cGUuaW5kZXhPZihcImltYWdlL1wiKSA9PSAwO1xuICAgICAgICBpZiAoIWlzSW1hZ2UpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJWaWV3cG9ydDogdXNpbmcgaW1nIGRpbWVuc2lvbnMhXCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkaW1nID0gJChjb250ZW50RG9jdW1lbnQpLmZpbmQoJ2ltYWdlJyk7XG4gICAgICAgIGlmICgkaW1nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgd2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdmFyIGhlaWdodCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIHZhciB3QXR0ciA9ICRpbWdbMF0uZ2V0QXR0cmlidXRlKFwid2lkdGhcIik7XG4gICAgICAgICAgaWYgKHdBdHRyKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aWR0aCA9IHBhcnNlSW50KHdBdHRyLCAxMCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBoQXR0ciA9ICRpbWdbMF0uZ2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIpO1xuICAgICAgICAgIGlmIChoQXR0cikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaGVpZ2h0ID0gcGFyc2VJbnQoaEF0dHIsIDEwKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAod2lkdGggJiYgaGVpZ2h0KSB7XG4gICAgICAgICAgICBzaXplID0ge1xuICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIChjb250ZW50RG9jdW1lbnQgJiYgY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBjb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICYmIGNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSBcInN2Z1wiKSB7XG4gICAgICAgICAgICAvLyAgICAgY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBzaXplLndpZHRoKTtcbiAgICAgICAgICAgIC8vICAgICBjb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBzaXplLmhlaWdodCk7XG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlZpZXdwb3J0OiB1c2luZyBpbWFnZSBkaW1lbnNpb25zIVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXNpemUpIHtcbiAgICAgIC8vIE5vdCBhIGdyZWF0IGZhbGxiYWNrLCBhcyBpdCBoYXMgdGhlIGFzcGVjdCByYXRpbyBvZiB0aGUgZnVsbCB3aW5kb3csIGJ1dCBpdCBpcyBiZXR0ZXIgdGhhbiBubyBkaXNwbGF5IGF0IGFsbC5cbiAgICAgIHdpZHRoID0gXyR2aWV3cG9ydC53aWR0aCgpO1xuICAgICAgaGVpZ2h0ID0gXyR2aWV3cG9ydC5oZWlnaHQoKTtcbiAgICAgIHNpemUgPSB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH1cblxuICAgICAgY29uc29sZS53YXJuKFwiVmlld3BvcnQ6IHVzaW5nIGJyb3dzZXIgLyBlLXJlYWRlciB2aWV3cG9ydCBkaW1lbnNpb25zIVwiKTtcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSkge1xuICAgICAgX21ldGFfc2l6ZS53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICBfbWV0YV9zaXplLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIC8vZXhwZWN0ZWQgY2FsbGJhY2sgc2lnbmF0dXJlOiBmdW5jdGlvbihzdWNjZXNzLCAkaWZyYW1lLCBzcGluZUl0ZW0sIGlzTmV3bHlMb2FkZWQsIGNvbnRleHQpXG4gIHRoaXMubG9hZFNwaW5lSXRlbSA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcblxuICAgIGlmIChfY3VycmVudFNwaW5lSXRlbSAhPSBzcGluZUl0ZW0pIHtcblxuICAgICAgX2N1cnJlbnRTcGluZUl0ZW0gPSBzcGluZUl0ZW07XG4gICAgICB2YXIgc3JjID0gX3NwaW5lLnBhY2thZ2UucmVzb2x2ZVJlbGF0aXZlVXJsKHNwaW5lSXRlbS5ocmVmKTtcblxuICAgICAgLy9pZiAoc3BpbmVJdGVtICYmIHNwaW5lSXRlbS5pc0ZpeGVkTGF5b3V0KCkpXG4gICAgICBpZiAodHJ1ZSkgLy8gYm90aCBmaXhlZCBsYXlvdXQgYW5kIHJlZmxvd2FibGUgZG9jdW1lbnRzIG5lZWQgaGlkaW5nIGR1ZSB0byBmbGFzaGluZyBkdXJpbmcgbGF5b3V0L3JlbmRlcmluZ1xuICAgICAge1xuICAgICAgICAvL2hpZGUgaWZyYW1lIHVudGlsIGNvbnRlbnQgaXMgc2NhbGVkXG4gICAgICAgIHNlbGYuaGlkZUlGcmFtZSgpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnRyaWdnZXIoT25lUGFnZVZpZXcuU1BJTkVfSVRFTV9PUEVOX1NUQVJULCBfJGlmcmFtZSwgX2N1cnJlbnRTcGluZUl0ZW0pO1xuICAgICAgX2lmcmFtZUxvYWRlci5sb2FkSWZyYW1lKF8kaWZyYW1lWzBdLCBzcmMsIGZ1bmN0aW9uKHN1Y2Nlc3MpIHtcblxuICAgICAgICBpZiAoc3VjY2VzcyAmJiBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhzdWNjZXNzLCBfJGlmcmFtZSwgX2N1cnJlbnRTcGluZUl0ZW0sIHRydWUsIGNvbnRleHQpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoaXNJRnJhbWVBbGl2ZShfJGlmcmFtZVswXSkpIHtcbiAgICAgICAgICAgIG9uSUZyYW1lTG9hZChzdWNjZXNzKTsgLy8gYXBwbGllcyBzdHlsZXNcblxuICAgICAgICAgICAgZnVuYygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwib25JRnJhbWVMb2FkICEhIGRvYyAmJiB3aW4gKyBUSU1FT1VUXCIpO1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhzcGluZUl0ZW0uaHJlZik7XG5cbiAgICAgICAgICAgIG9uSUZyYW1lTG9hZChzdWNjZXNzKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jLCA1MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbklGcmFtZUxvYWQoc3VjY2Vzcyk7XG4gICAgICAgIH1cblxuICAgICAgfSwgc2VsZiwge1xuICAgICAgICBzcGluZUl0ZW06IF9jdXJyZW50U3BpbmVJdGVtXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKHRydWUsIF8kaWZyYW1lLCBfY3VycmVudFNwaW5lSXRlbSwgZmFsc2UsIGNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgLy9cbiAgLy8gZnVuY3Rpb24gcGFyc2VWaWV3Qm94U2l6ZSh2aWV3Qm94U3RyaW5nKSB7XG4gIC8vXG4gIC8vICAgICB2YXIgcGFydHMgPSB2aWV3Qm94U3RyaW5nLnNwbGl0KCcgJyk7XG4gIC8vXG4gIC8vICAgICBpZihwYXJ0cy5sZW5ndGggPCA0KSB7XG4gIC8vICAgICAgICAgY29uc29sZS53YXJuKHZpZXdCb3hTdHJpbmcgKyBcIiB2YWx1ZSBpcyBub3QgdmFsaWQgdmlld0JveCBzaXplXCIpXG4gIC8vICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgLy8gICAgIH1cbiAgLy9cbiAgLy8gICAgIHZhciB3aWR0aCA9IHBhcnNlSW50KHBhcnRzWzJdKTtcbiAgLy8gICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChwYXJ0c1szXSk7XG4gIC8vXG4gIC8vICAgICBpZighaXNOYU4od2lkdGgpICYmICFpc05hTihoZWlnaHQpKSB7XG4gIC8vICAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodH0gO1xuICAvLyAgICAgfVxuICAvL1xuICAvLyAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgLy8gfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTWV0YVNpemUoY29udGVudCkge1xuXG4gICAgdmFyIHBhaXJzID0gY29udGVudC5yZXBsYWNlKC9cXHMvZywgJycpLnNwbGl0KFwiLFwiKTtcblxuICAgIHZhciBkaWN0ID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmFtZVZhbCA9IHBhaXJzW2ldLnNwbGl0KFwiPVwiKTtcbiAgICAgIGlmIChuYW1lVmFsLmxlbmd0aCA9PSAyKSB7XG5cbiAgICAgICAgZGljdFtuYW1lVmFsWzBdXSA9IG5hbWVWYWxbMV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHdpZHRoID0gTnVtYmVyLk5hTjtcbiAgICB2YXIgaGVpZ2h0ID0gTnVtYmVyLk5hTjtcblxuICAgIGlmIChkaWN0W1wid2lkdGhcIl0pIHtcbiAgICAgIHdpZHRoID0gcGFyc2VJbnQoZGljdFtcIndpZHRoXCJdKTtcbiAgICB9XG5cbiAgICBpZiAoZGljdFtcImhlaWdodFwiXSkge1xuICAgICAgaGVpZ2h0ID0gcGFyc2VJbnQoZGljdFtcImhlaWdodFwiXSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc05hTih3aWR0aCkgJiYgIWlzTmFOKGhlaWdodCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHRoaXMuZ2V0Rmlyc3RWaXNpYmxlRWxlbWVudENmaSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIG5hdmlnYXRpb24gPSBuZXcgQ2ZpTmF2aWdhdGlvbkxvZ2ljKF8kZWwsIF8kaWZyYW1lKTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbi5nZXRGaXJzdFZpc2libGVFbGVtZW50Q2ZpKDApO1xuXG4gIH07XG5cbiAgdGhpcy5nZXROYXZpZ2F0b3IgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiBuZXcgQ2ZpTmF2aWdhdGlvbkxvZ2ljKF8kZWwsIF8kaWZyYW1lKTtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnRCeUNmaSA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgY2ZpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgIGlmIChzcGluZUl0ZW0gIT0gX2N1cnJlbnRTcGluZUl0ZW0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBuYXZpZ2F0aW9uID0gbmV3IENmaU5hdmlnYXRpb25Mb2dpYyhfJGVsLCBfJGlmcmFtZSk7XG4gICAgcmV0dXJuIG5hdmlnYXRpb24uZ2V0RWxlbWVudEJ5Q2ZpKGNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnRCeUlkID0gZnVuY3Rpb24oc3BpbmVJdGVtLCBpZCkge1xuXG4gICAgaWYgKHNwaW5lSXRlbSAhPSBfY3VycmVudFNwaW5lSXRlbSkge1xuICAgICAgY29uc29sZS5lcnJvcihcInNwaW5lIGl0ZW0gaXMgbm90IGxvYWRlZFwiKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIG5hdmlnYXRpb24gPSBuZXcgQ2ZpTmF2aWdhdGlvbkxvZ2ljKF8kZWwsIF8kaWZyYW1lKTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbi5nZXRFbGVtZW50QnlJZChpZCk7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50ID0gZnVuY3Rpb24oc3BpbmVJdGVtLCBzZWxlY3Rvcikge1xuXG4gICAgaWYgKHNwaW5lSXRlbSAhPSBfY3VycmVudFNwaW5lSXRlbSkge1xuICAgICAgY29uc29sZS5lcnJvcihcInNwaW5lIGl0ZW0gaXMgbm90IGxvYWRlZFwiKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIG5hdmlnYXRpb24gPSBuZXcgQ2ZpTmF2aWdhdGlvbkxvZ2ljKF8kZWwsIF8kaWZyYW1lKTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbi5nZXRFbGVtZW50KHNlbGVjdG9yKTtcbiAgfTtcblxuICB0aGlzLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmF2aWdhdGlvbiA9IG5ldyBDZmlOYXZpZ2F0aW9uTG9naWMoXyRlbCwgXyRpZnJhbWUpO1xuICAgIHJldHVybiBuYXZpZ2F0aW9uLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQoe1xuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiBfJGlmcmFtZS5oZWlnaHQoKVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMub2Zmc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKF8kaWZyYW1lKSB7XG4gICAgICByZXR1cm4gXyRpZnJhbWUub2Zmc2V0KCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuT25lUGFnZVZpZXcuU1BJTkVfSVRFTV9PUEVOX1NUQVJUID0gXCJTcGluZUl0ZW1PcGVuU3RhcnRcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBPbmVQYWdlVmlld1xuIiwiLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gTW9kaWZpZWQgYnkgRGFuaWVsIFdlY2tcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuLyoqXG4gKiBPcHRpb25zIHBhc3NlZCBvbiB0aGUgcmVhZGVyIGZyb20gdGhlIHJlYWRpdW0gbG9hZGVyL2luaXRpYWxpemVyXG4gKlxuICogQHR5cGVkZWYge29iamVjdH0gUmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3LlJlYWRlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7alF1ZXJ5RWxlbWVudHxzdHJpbmd9IGVsICAgVGhlIGVsZW1lbnQgdGhlIHJlYWRlciB2aWV3IHNob3VsZCBjcmVhdGUgaXRzZWxmIGluLiBDYW4gYmUgYSBqcXVlcnkgd3JhcHBlZCBlbGVtZW50IG9yIGEgcXVlcnkgc2VsZWN0b3IuXG4gKiBAcHJvcGVydHkge1JlYWRpdW1TREsuVmlld3MuSUZyYW1lTG9hZGVyfSBpZnJhbWVMb2FkZXIgICBBbiBpbnN0YW5jZSBvZiBhbiBpZnJhbWUgbG9hZGVyIG9yIG9uZSBleHBhbmRpbmcgaXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IG5lZWRzRml4ZWRMYXlvdXRTY2FsZXJXb3JrQXJvdW5kXG4gKi9cblxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBBbm5vdGF0aW9uc01hbmFnZXIgPSByZXF1aXJlKCcuL2Fubm90YXRpb25zLW1hbmFnZXInKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxudmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4uL2V2ZW50cycpXG52YXIgZXh0ZW5kZWRUaHJvdHRsZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvZXh0ZW5kZWQtdGhyb3R0bGUnKVxudmFyIEZpeGVkVmlldyA9IHJlcXVpcmUoJy4vZml4ZWQtdmlldycpXG52YXIgSUZyYW1lTG9hZGVyID0gcmVxdWlyZSgnLi9pZnJhbWUtbG9hZGVyJylcbnZhciBJbnRlcm5hbEV2ZW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFsLWV2ZW50cycpXG52YXIgSW50ZXJuYWxMaW5rc1N1cHBvcnQgPSByZXF1aXJlKCcuL2ludGVybmFsLWxpbmtzLXN1cHBvcnQnKVxudmFyIGlzSWZyYW1lQWxpdmUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzLWlmcmFtZS1hbGl2ZScpXG52YXIgTWVkaWFPdmVybGF5RGF0YUluamVjdG9yID0gcmVxdWlyZSgnLi9tZWRpYS1vdmVybGF5LWRhdGEtaW5qZWN0b3InKVxudmFyIE1lZGlhT3ZlcmxheVBsYXllciA9IHJlcXVpcmUoJy4vbWVkaWEtb3ZlcmxheS1wbGF5ZXInKVxudmFyIFBhY2thZ2UgPSByZXF1aXJlKCcuLi9tb2RlbHMvcGFja2FnZScpXG52YXIgUGFnZU9wZW5SZXF1ZXN0ID0gcmVxdWlyZSgnLi4vbW9kZWxzL3BhZ2Utb3Blbi1yZXF1ZXN0JylcbnZhciBSZWZsb3dhYmxlVmlldyA9IHJlcXVpcmUoJy4vcmVmbG93YWJsZS12aWV3JylcbnZhciBSZXNvbHZlQ29udGVudFJlZiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVzb2x2ZS1jb250ZW50LXJlZicpXG52YXIgU2Nyb2xsVmlldyA9IHJlcXVpcmUoJy4vc2Nyb2xsLXZpZXcnKVxudmFyIHNldFN0eWxlcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvc2V0LXN0eWxlcycpXG52YXIgU3R5bGVDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMvc3R5bGUnKVxudmFyIFN3aXRjaGVzID0gcmVxdWlyZSgnLi4vbW9kZWxzL3N3aXRjaGVzJylcbnZhciBUcmlnZ2VyID0gcmVxdWlyZSgnLi4vbW9kZWxzL3RyaWdnZXInKVxudmFyIFZpZXdlclNldHRpbmdzID0gcmVxdWlyZSgnLi4vbW9kZWxzL3ZpZXdlci1zZXR0aW5ncycpXG5cbi8qKlxuICogVmlldyBUeXBlXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBSZWFkaXVtU0RLLlZpZXdzLlJlYWRlclZpZXcuVmlld1R5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBWSUVXX1RZUEVfQ09MVU1OSVpFRCAgICAgICAgICBSZWZsb3dhYmxlIGRvY3VtZW50IHZpZXdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBWSUVXX1RZUEVfRklYRUQgICAgICAgICAgICAgICBGaXhlZCBsYXlvdXQgZG9jdW1lbnQgdmlld1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFZJRVdfVFlQRV9TQ1JPTExFRF9ET0MgICAgICAgIFNjcm9sbGFibGUgZG9jdW1lbnQgdmlld1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFZJRVdfVFlQRV9TQ1JPTExFRF9DT05USU5VT1VTIENvbnRpbnVvdXMgc2Nyb2xsYWJsZSBkb2N1bWVudCB2aWV3XG4gKi9cbnZhciBWSUVXX1RZUEVfQ09MVU1OSVpFRCA9IDE7XG52YXIgVklFV19UWVBFX0ZJWEVEID0gMjtcbnZhciBWSUVXX1RZUEVfU0NST0xMRURfRE9DID0gMztcbnZhciBWSUVXX1RZUEVfU0NST0xMRURfQ09OVElOVU9VUyA9IDQ7XG5cblxuLyoqXG4gKiBUb3AgbGV2ZWwgVmlldyBvYmplY3QuIEludGVyZmFjZSBmb3IgdmlldyBtYW5pcHVsYXRpb24gcHVibGljIEFQSXNcbiAqIEBwYXJhbSB7UmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3LlJlYWRlck9wdGlvbnN9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSZWFkZXJWaWV3KG9wdGlvbnMpIHtcblxuICBfLmV4dGVuZCh0aGlzLCBCYWNrYm9uZS5FdmVudHMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIF9jdXJyZW50VmlldyA9IHVuZGVmaW5lZDtcbiAgdmFyIF9wYWNrYWdlID0gdW5kZWZpbmVkO1xuICB2YXIgX3NwaW5lID0gdW5kZWZpbmVkO1xuICB2YXIgX3ZpZXdlclNldHRpbmdzID0gbmV3IFZpZXdlclNldHRpbmdzKHt9KTtcbiAgLy9zdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGRpdnNcbiAgdmFyIF91c2VyU3R5bGVzID0gbmV3IFN0eWxlQ29sbGVjdGlvbigpO1xuICAvL3N0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250ZW50IGRvY3VtZW50c1xuICB2YXIgX2Jvb2tTdHlsZXMgPSBuZXcgU3R5bGVDb2xsZWN0aW9uKCk7XG4gIHZhciBfaW50ZXJuYWxMaW5rc1N1cHBvcnQgPSBuZXcgSW50ZXJuYWxMaW5rc1N1cHBvcnQodGhpcyk7XG4gIHZhciBfbWVkaWFPdmVybGF5UGxheWVyO1xuICB2YXIgX21lZGlhT3ZlcmxheURhdGFJbmplY3RvcjtcbiAgdmFyIF9pZnJhbWVMb2FkZXI7XG4gIHZhciBfJGVsO1xuICB2YXIgX2Fubm90YXRpb25zTWFuYWdlciA9IG5ldyBBbm5vdGF0aW9uc01hbmFnZXIoc2VsZiwgb3B0aW9ucyk7XG5cbiAgLy9XZSB3aWxsIGNhbGwgb25WaWV3cG9ydFJlc2l6ZSBhZnRlciB1c2VyIHN0b3BwZWQgcmVzaXppbmcgd2luZG93XG4gIHZhciBsYXp5UmVzaXplID0gZXh0ZW5kZWRUaHJvdHRsZShcbiAgICBoYW5kbGVWaWV3cG9ydFJlc2l6ZVN0YXJ0LFxuICAgIGhhbmRsZVZpZXdwb3J0UmVzaXplVGljayxcbiAgICBoYW5kbGVWaWV3cG9ydFJlc2l6ZUVuZCwgMjUwLCAxMDAwLCBzZWxmKTtcblxuICAkKHdpbmRvdykub24oXCJyZXNpemUuUmVhZGl1bVNESy5yZWFkZXJWaWV3XCIsIGxhenlSZXNpemUpO1xuXG4gIGlmIChvcHRpb25zLmVsIGluc3RhbmNlb2YgJCkge1xuICAgIF8kZWwgPSBvcHRpb25zLmVsO1xuICAgIGNvbnNvbGUubG9nKFwiKiogRUwgaXMgYSBqUXVlcnkgc2VsZWN0b3I6XCIgKyBvcHRpb25zLmVsLmF0dHIoJ2lkJykpO1xuICB9IGVsc2Uge1xuICAgIF8kZWwgPSAkKG9wdGlvbnMuZWwpO1xuICAgIGNvbnNvbGUubG9nKFwiKiogRUwgaXMgYSBzdHJpbmc6XCIgKyBfJGVsLmF0dHIoJ2lkJykpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaWZyYW1lTG9hZGVyKSB7XG4gICAgX2lmcmFtZUxvYWRlciA9IG9wdGlvbnMuaWZyYW1lTG9hZGVyO1xuICB9IGVsc2Uge1xuICAgIF9pZnJhbWVMb2FkZXIgPSBuZXcgSUZyYW1lTG9hZGVyKHtcbiAgICAgIG1hdGhKYXhVcmw6IG9wdGlvbnMubWF0aEpheFVybFxuICAgIH0pO1xuICB9XG5cblxuICBfbmVlZHNGaXhlZExheW91dFNjYWxlcldvcmtBcm91bmQgPSBvcHRpb25zLm5lZWRzRml4ZWRMYXlvdXRTY2FsZXJXb3JrQXJvdW5kO1xuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLm5lZWRzRml4ZWRMYXlvdXRTY2FsZXJXb3JrQXJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9uZWVkc0ZpeGVkTGF5b3V0U2NhbGVyV29ya0Fyb3VuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB2aWV3IGJhc2VkIG9uIHRoZSBnaXZlbiB2aWV3IHR5cGUuXG4gICAqIEBwYXJhbSB7UmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3LlZpZXdUeXBlfSB2aWV3VHlwZVxuICAgKiBAcGFyYW0ge1JlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5WaWV3Q3JlYXRpb25PcHRpb25zfSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgdGhpcy5jcmVhdGVWaWV3Rm9yVHlwZSA9IGZ1bmN0aW9uKHZpZXdUeXBlLCBvcHRpb25zKSB7XG4gICAgdmFyIGNyZWF0ZWRWaWV3O1xuXG4gICAgLy8gTk9URTogXyRlbCA9PSBvcHRpb25zLiR2aWV3cG9ydFxuICAgIF8kZWwuY3NzKFwib3ZlcmZsb3dcIiwgXCJoaWRkZW5cIik7XG5cbiAgICBzd2l0Y2ggKHZpZXdUeXBlKSB7XG4gICAgICBjYXNlIFZJRVdfVFlQRV9GSVhFRDpcblxuICAgICAgICBfJGVsLmNzcyhcIm92ZXJmbG93XCIsIFwiYXV0b1wiKTsgLy8gZm9yIGNvbnRlbnQgcGFuLCBzZWUgc2VsZi5zZXRab29tKClcblxuICAgICAgICBjcmVhdGVkVmlldyA9IG5ldyBGaXhlZFZpZXcob3B0aW9ucywgc2VsZik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBWSUVXX1RZUEVfU0NST0xMRURfRE9DOlxuICAgICAgICBjcmVhdGVkVmlldyA9IG5ldyBTY3JvbGxWaWV3KG9wdGlvbnMsIGZhbHNlLCBzZWxmKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZJRVdfVFlQRV9TQ1JPTExFRF9DT05USU5VT1VTOlxuICAgICAgICBjcmVhdGVkVmlldyA9IG5ldyBTY3JvbGxWaWV3KG9wdGlvbnMsIHRydWUsIHNlbGYpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNyZWF0ZWRWaWV3ID0gbmV3IFJlZmxvd2FibGVWaWV3KG9wdGlvbnMsIHNlbGYpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlZFZpZXc7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmlldyB0eXBlIG9mIHRoZSByZWFkZXIgdmlld1xuICAgKiBAcmV0dXJucyB7UmVhZGVyVmlldy5WaWV3VHlwZX1cbiAgICovXG4gIHRoaXMuZ2V0Q3VycmVudFZpZXdUeXBlID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoIV9jdXJyZW50Vmlldykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3IGluc3RhbmNlb2YgUmVmbG93YWJsZVZpZXcpIHtcbiAgICAgIHJldHVybiBWSUVXX1RZUEVfQ09MVU1OSVpFRDtcbiAgICB9XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3IGluc3RhbmNlb2YgRml4ZWRWaWV3KSB7XG4gICAgICByZXR1cm4gVklFV19UWVBFX0ZJWEVEO1xuICAgIH1cblxuICAgIGlmIChfY3VycmVudFZpZXcgaW5zdGFuY2VvZiBTY3JvbGxWaWV3KSB7XG4gICAgICBpZiAoX2N1cnJlbnRWaWV3LmlzQ29udGludW91c1Njcm9sbCgpKSB7XG4gICAgICAgIHJldHVybiBWSUVXX1RZUEVfU0NST0xMRURfQ09OVElOVU9VUztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFZJRVdfVFlQRV9TQ1JPTExFRF9ET0M7XG4gICAgfVxuXG4gICAgY29uc29sZS5lcnJvcihcIlVucmVjb2duaXplZCB2aWV3IHR5cGVcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICAvL2Jhc2VkIG9uIGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3NwcmVhZHNoZWV0L2NjYz9rZXk9MEFvUE1Va1FoYzR3Y2RESTBhbkZ2V205Nk4weFJUMTg0WkU5Nk1YRlJkRkUmdXNwPWRyaXZlX3dlYiNnaWQ9MCBkb2N1bWVudFxuICBmdW5jdGlvbiBkZWR1Y2VEZXNpcmVkVmlld1R5cGUoc3BpbmVJdGVtKSB7XG5cbiAgICAvL2NoZWNrIHNldHRpbmdzXG4gICAgaWYgKF92aWV3ZXJTZXR0aW5ncy5zY3JvbGwgPT0gXCJzY3JvbGwtZG9jXCIpIHtcbiAgICAgIHJldHVybiBWSUVXX1RZUEVfU0NST0xMRURfRE9DO1xuICAgIH1cblxuICAgIGlmIChfdmlld2VyU2V0dGluZ3Muc2Nyb2xsID09IFwic2Nyb2xsLWNvbnRpbnVvdXNcIikge1xuICAgICAgcmV0dXJuIFZJRVdfVFlQRV9TQ1JPTExFRF9DT05USU5VT1VTO1xuICAgIH1cblxuICAgIC8vaXMgZml4ZWQgbGF5b3V0IGlnbm9yZSBmbG93XG4gICAgaWYgKHNwaW5lSXRlbS5pc0ZpeGVkTGF5b3V0KCkpIHtcbiAgICAgIHJldHVybiBWSUVXX1RZUEVfRklYRUQ7XG4gICAgfVxuXG4gICAgLy9mbG93XG4gICAgaWYgKHNwaW5lSXRlbS5pc0Zsb3dTY3JvbGxlZERvYygpKSB7XG4gICAgICByZXR1cm4gVklFV19UWVBFX1NDUk9MTEVEX0RPQztcbiAgICB9XG5cbiAgICBpZiAoc3BpbmVJdGVtLmlzRmxvd1Njcm9sbGVkQ29udGludW91cygpKSB7XG4gICAgICByZXR1cm4gVklFV19UWVBFX1NDUk9MTEVEX0NPTlRJTlVPVVM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFZJRVdfVFlQRV9DT0xVTU5JWkVEO1xuICB9XG5cbiAgLy8gcmV0dXJucyB0cnVlIGlzIHZpZXcgY2hhbmdlZFxuICBmdW5jdGlvbiBpbml0Vmlld0Zvckl0ZW0oc3BpbmVJdGVtLCBjYWxsYmFjaykge1xuXG4gICAgdmFyIGRlc2lyZWRWaWV3VHlwZSA9IGRlZHVjZURlc2lyZWRWaWV3VHlwZShzcGluZUl0ZW0pO1xuXG4gICAgaWYgKF9jdXJyZW50Vmlldykge1xuXG4gICAgICBpZiAoc2VsZi5nZXRDdXJyZW50Vmlld1R5cGUoKSA9PSBkZXNpcmVkVmlld1R5cGUpIHtcbiAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlc2V0Q3VycmVudFZpZXcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWaWV3IGNyZWF0aW9uIG9wdGlvbnNcbiAgICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBSZWFkaXVtU0RLLlZpZXdzLlJlYWRlclZpZXcuVmlld0NyZWF0aW9uT3B0aW9uc1xuICAgICAqIEBwcm9wZXJ0eSB7alF1ZXJ5RWxlbWVudH0gJHZpZXdwb3J0ICBUaGUgdmlldyBwb3J0IGVsZW1lbnQgdGhlIHJlYWRlciB2aWV3IGhhcyBjcmVhdGVkLlxuICAgICAqIEBwcm9wZXJ0eSB7TW9kZWxzLlNwaW5lfSBzcGluZSBUaGUgc3BpbmUgaXRlbSBjb2xsZWN0aW9uIG9iamVjdFxuICAgICAqIEBwcm9wZXJ0eSB7UmVhZGl1bVNESy5Db2xsZWN0aW9ucy5TdHlsZUNvbGxlY3Rpb259IHVzZXJTdHlsZXMgVXNlciBzdHlsZXNcbiAgICAgKiBAcHJvcGVydHkge1JlYWRpdW1TREsuQ29sbGVjdGlvbnMuU3R5bGVDb2xsZWN0aW9ufSBib29rU3R5bGVzIEJvb2sgc3R5bGVzXG4gICAgICogQHByb3BlcnR5IHtSZWFkaXVtU0RLLlZpZXdzLklGcmFtZUxvYWRlcn0gaWZyYW1lTG9hZGVyICAgQW4gaW5zdGFuY2Ugb2YgYW4gaWZyYW1lIGxvYWRlciBvciBvbmUgZXhwYW5kaW5nIGl0LlxuICAgICAqL1xuICAgIHZhciB2aWV3Q3JlYXRpb25QYXJhbXMgPSB7XG4gICAgICAkdmlld3BvcnQ6IF8kZWwsXG4gICAgICBzcGluZTogX3NwaW5lLFxuICAgICAgdXNlclN0eWxlczogX3VzZXJTdHlsZXMsXG4gICAgICBib29rU3R5bGVzOiBfYm9va1N0eWxlcyxcbiAgICAgIGlmcmFtZUxvYWRlcjogX2lmcmFtZUxvYWRlclxuICAgIH07XG5cblxuICAgIF9jdXJyZW50VmlldyA9IHNlbGYuY3JlYXRlVmlld0ZvclR5cGUoZGVzaXJlZFZpZXdUeXBlLCB2aWV3Q3JlYXRpb25QYXJhbXMpO1xuICAgIHNlbGYudHJpZ2dlcihFdmVudHMuUkVBREVSX1ZJRVdfQ1JFQVRFRCwgZGVzaXJlZFZpZXdUeXBlKTtcblxuICAgIF9jdXJyZW50Vmlldy5vbihFdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FERUQsIGZ1bmN0aW9uKCRpZnJhbWUsIHNwaW5lSXRlbSkge1xuXG4gICAgICBpZiAoIWlzSWZyYW1lQWxpdmUoJGlmcmFtZVswXSkpIHJldHVybjtcblxuICAgICAgLy8gcGVyZm9ybWFuY2UgZGVncmFkZXMgd2l0aCBsYXJnZSBET00gKGUuZy4gd29yZC1sZXZlbCB0ZXh0LWF1ZGlvIHN5bmMpXG4gICAgICBfbWVkaWFPdmVybGF5RGF0YUluamVjdG9yLmF0dGFjaE1lZGlhT3ZlcmxheURhdGEoJGlmcmFtZSwgc3BpbmVJdGVtLCBfdmlld2VyU2V0dGluZ3MpO1xuXG4gICAgICBfaW50ZXJuYWxMaW5rc1N1cHBvcnQucHJvY2Vzc0xpbmtFbGVtZW50cygkaWZyYW1lLCBzcGluZUl0ZW0pO1xuICAgICAgX2Fubm90YXRpb25zTWFuYWdlci5hdHRhY2hBbm5vdGF0aW9ucygkaWZyYW1lLCBzcGluZUl0ZW0pO1xuXG4gICAgICB2YXIgY29udGVudERvYyA9ICRpZnJhbWVbMF0uY29udGVudERvY3VtZW50O1xuICAgICAgVHJpZ2dlci5yZWdpc3Rlcihjb250ZW50RG9jKTtcbiAgICAgIFN3aXRjaGVzLmFwcGx5KGNvbnRlbnREb2MpO1xuXG4gICAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLkNPTlRFTlRfRE9DVU1FTlRfTE9BREVELCAkaWZyYW1lLCBzcGluZUl0ZW0pO1xuICAgIH0pO1xuXG4gICAgX2N1cnJlbnRWaWV3Lm9uKEV2ZW50cy5DT05URU5UX0RPQ1VNRU5UX0xPQURfU1RBUlQsIGZ1bmN0aW9uKCRpZnJhbWUsIHNwaW5lSXRlbSkge1xuICAgICAgc2VsZi50cmlnZ2VyKEV2ZW50cy5DT05URU5UX0RPQ1VNRU5UX0xPQURfU1RBUlQsICRpZnJhbWUsIHNwaW5lSXRlbSk7XG4gICAgfSk7XG5cbiAgICBfY3VycmVudFZpZXcub24oSW50ZXJuYWxFdmVudHMuQ1VSUkVOVF9WSUVXX1BBR0lOQVRJT05fQ0hBTkdFRCwgZnVuY3Rpb24ocGFnZUNoYW5nZURhdGEpIHtcblxuICAgICAgLy93ZSBjYWxsIG9uIG9uUGFnZUNoYW5nZWQgZXhwbGljaXRseSBpbnN0ZWFkIG9mIHN1YnNjcmliaW5nIHRvIHRoZSBSZWFkaXVtU0RLLkV2ZW50cy5QQUdJTkFUSU9OX0NIQU5HRUQgYnlcbiAgICAgIC8vbWVkaWFPdmVybGF5UGxheWVyIGJlY2F1c2Ugd2UgaHZlIHRvIGd1YXJhbnRlZSB0aGF0IG1lZGlhT3ZlcmxheVBsYXllciB3aWxsIGJlIHVwZGF0ZWQgYmVmb3JlIHRoZSBob3N0XG4gICAgICAvL2FwcGxpY2F0aW9uIHdpbGwgYmUgbm90aWZpZWQgYnkgdGhlIHNhbWUgUmVhZGl1bVNESy5FdmVudHMuUEFHSU5BVElPTl9DSEFOR0VEIGV2ZW50XG4gICAgICBfbWVkaWFPdmVybGF5UGxheWVyLm9uUGFnZUNoYW5nZWQocGFnZUNoYW5nZURhdGEpO1xuXG4gICAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLlBBR0lOQVRJT05fQ0hBTkdFRCwgcGFnZUNoYW5nZURhdGEpO1xuICAgIH0pO1xuXG4gICAgX2N1cnJlbnRWaWV3Lm9uKEV2ZW50cy5GWExfVklFV19SRVNJWkVELCBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYudHJpZ2dlcihFdmVudHMuRlhMX1ZJRVdfUkVTSVpFRCk7XG4gICAgfSlcblxuICAgIF9jdXJyZW50Vmlldy5yZW5kZXIoKTtcbiAgICBfY3VycmVudFZpZXcuc2V0Vmlld1NldHRpbmdzKF92aWV3ZXJTZXR0aW5ncyk7XG5cbiAgICAvLyB3ZSBkbyB0aGlzIHRvIHdhaXQgdW50aWwgZWxlbWVudHMgYXJlIHJlbmRlcmVkIG90aGVyd2lzZSBib29rIGlzIG5vdCBhYmxlIHRvIGRldGVybWluZSB2aWV3IHNpemUuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG5cbiAgICB9LCA1MCk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiB0aGUgY3VycmVudGx5IGFjdGl2ZSBzcGluZSBpdGVtc1xuICAgKlxuICAgKiBAcmV0dXJucyB7TW9kZWxzLlNwaW5lSXRlbVtdfVxuICAgKi9cbiAgdGhpcy5nZXRMb2FkZWRTcGluZUl0ZW1zID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3KSB7XG4gICAgICByZXR1cm4gX2N1cnJlbnRWaWV3LmdldExvYWRlZFNwaW5lSXRlbXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVzZXRDdXJyZW50VmlldygpIHtcblxuICAgIGlmICghX2N1cnJlbnRWaWV3KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZi50cmlnZ2VyKEV2ZW50cy5SRUFERVJfVklFV19ERVNUUk9ZRUQpO1xuXG4gICAgX2N1cnJlbnRWaWV3Lm9mZihJbnRlcm5hbEV2ZW50cy5DVVJSRU5UX1ZJRVdfUEFHSU5BVElPTl9DSEFOR0VEKTtcbiAgICBfY3VycmVudFZpZXcucmVtb3ZlKCk7XG4gICAgX2N1cnJlbnRWaWV3ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnRseSBpbnN0YW5jZWQgdmlld2VyIHNldHRpbmdzXG4gICAqXG4gICAqIEByZXR1cm5zIHtNb2RlbHMuVmlld2VyU2V0dGluZ3N9XG4gICAqL1xuICB0aGlzLnZpZXdlclNldHRpbmdzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF92aWV3ZXJTZXR0aW5ncztcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIGRhdGEgb2JqZWN0IGJhc2VkIG9uIHRoZSBwYWNrYWdlIGRvY3VtZW50XG4gICAqXG4gICAqIEByZXR1cm5zIHtNb2RlbHMuUGFja2FnZX1cbiAgICovXG4gIHRoaXMucGFja2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcGFja2FnZTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzcGluZSBhcyBhIGRhdGEgb2JqZWN0LCBhbHNvIGFjdHMgYXMgbGlzdCBvZiBzcGluZSBpdGVtc1xuICAgKlxuICAgKiBAcmV0dXJucyB7TW9kZWxzLlNwaW5lfVxuICAgKi9cbiAgdGhpcy5zcGluZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfc3BpbmU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHVzZXIgQ1NTIHN0eWxlcyBjb2xsZWN0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtSZWFkaXVtU0RLLkNvbGxlY3Rpb25zLlN0eWxlQ29sbGVjdGlvbn1cbiAgICovXG4gIHRoaXMudXNlclN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfdXNlclN0eWxlcztcbiAgfTtcblxuICAvKipcbiAgICogT3BlbiBCb29rIERhdGFcbiAgICpcbiAgICogQHR5cGVkZWYge29iamVjdH0gUmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3Lk9wZW5Cb29rRGF0YVxuICAgKiBAcHJvcGVydHkge01vZGVscy5QYWNrYWdlfSBwYWNrYWdlIC0gcGFja2FnZURhdGEgKHJlcXVpcmVkKVxuICAgKiBAcHJvcGVydHkge01vZGVscy5QYWdlT3BlblJlcXVlc3R9IG9wZW5QYWdlUmVxdWVzdCAtIG9wZW5QYWdlUmVxdWVzdERhdGEsIChvcHRpb25hbCkgZGF0YSByZWxhdGVkIHRvIG9wZW4gcGFnZSByZXF1ZXN0XG4gICAqIEBwcm9wZXJ0eSB7UmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3LlNldHRpbmdzRGF0YX0gW3NldHRpbmdzXVxuICAgKiBAcHJvcGVydHkge1JlYWRpdW1TREsuQ29sbGVjdGlvbnMuU3R5bGVDb2xsZWN0aW9ufSBzdHlsZXM6IFtjc3NTdHlsZXNdXG4gICAqIEB0b2RvIERlZmluZSBtaXNzaW5nIHR5cGVzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyB0aGUgcHJvY2VzcyBvZiBvcGVuaW5nIHRoZSBib29rIGFuZCByZXF1ZXN0aW5nIHJlc291cmNlcyBzcGVjaWZpZWQgaW4gdGhlIHBhY2thZ2VEYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3Lk9wZW5Cb29rRGF0YX0gb3BlbkJvb2tEYXRhIC0gb2JqZWN0IHdpdGggb3BlbiBib29rIGRhdGFcbiAgICovXG4gIHRoaXMub3BlbkJvb2sgPSBmdW5jdGlvbihvcGVuQm9va0RhdGEpIHtcblxuICAgIHZhciBwYWNrYWdlRGF0YSA9IG9wZW5Cb29rRGF0YS5wYWNrYWdlID8gb3BlbkJvb2tEYXRhLnBhY2thZ2UgOiBvcGVuQm9va0RhdGE7XG5cbiAgICBfcGFja2FnZSA9IG5ldyBQYWNrYWdlKHBhY2thZ2VEYXRhKTtcblxuICAgIF9zcGluZSA9IF9wYWNrYWdlLnNwaW5lO1xuICAgIF9zcGluZS5oYW5kbGVMaW5lYXIodHJ1ZSk7XG5cbiAgICBpZiAoX21lZGlhT3ZlcmxheVBsYXllcikge1xuICAgICAgX21lZGlhT3ZlcmxheVBsYXllci5yZXNldCgpO1xuICAgIH1cblxuICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIgPSBuZXcgTWVkaWFPdmVybGF5UGxheWVyKHNlbGYsICQucHJveHkob25NZWRpYVBsYXllclN0YXR1c0NoYW5nZWQsIHNlbGYpKTtcbiAgICBfbWVkaWFPdmVybGF5UGxheWVyLnNldEF1dG9tYXRpY05leHRTbWlsKF92aWV3ZXJTZXR0aW5ncy5tZWRpYU92ZXJsYXlzQXV0b21hdGljUGFnZVR1cm4gPyB0cnVlIDogZmFsc2UpOyAvLyBqdXN0IHRvIGVuc3VyZSB0aGUgaW50ZXJuYWwgdmFyIGlzIHNldCB0byB0aGUgZGVmYXVsdCBzZXR0aW5ncyAodXNlciBzZXR0aW5ncyBhcmUgYXBwbGllZCBiZWxvdyBhdCBzZWxmLnVwZGF0ZVNldHRpbmdzKG9wZW5Cb29rRGF0YS5zZXR0aW5ncyk7KVxuXG4gICAgX21lZGlhT3ZlcmxheURhdGFJbmplY3RvciA9IG5ldyBNZWRpYU92ZXJsYXlEYXRhSW5qZWN0b3IoX3BhY2thZ2UubWVkaWFfb3ZlcmxheSwgX21lZGlhT3ZlcmxheVBsYXllcik7XG5cblxuICAgIHJlc2V0Q3VycmVudFZpZXcoKTtcblxuICAgIGlmIChvcGVuQm9va0RhdGEuc2V0dGluZ3MpIHtcbiAgICAgIHNlbGYudXBkYXRlU2V0dGluZ3Mob3BlbkJvb2tEYXRhLnNldHRpbmdzKTtcbiAgICB9XG5cbiAgICBpZiAob3BlbkJvb2tEYXRhLnN0eWxlcykge1xuICAgICAgc2VsZi5zZXRTdHlsZXMob3BlbkJvb2tEYXRhLnN0eWxlcyk7XG4gICAgfVxuXG4gICAgdmFyIHBhZ2VSZXF1ZXN0RGF0YSA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChvcGVuQm9va0RhdGEub3BlblBhZ2VSZXF1ZXN0KSB7XG5cbiAgICAgIGlmIChvcGVuQm9va0RhdGEub3BlblBhZ2VSZXF1ZXN0LmlkcmVmIHx8IChvcGVuQm9va0RhdGEub3BlblBhZ2VSZXF1ZXN0LmNvbnRlbnRSZWZVcmwgJiYgb3BlbkJvb2tEYXRhLm9wZW5QYWdlUmVxdWVzdC5zb3VyY2VGaWxlSHJlZikpIHtcbiAgICAgICAgcGFnZVJlcXVlc3REYXRhID0gb3BlbkJvb2tEYXRhLm9wZW5QYWdlUmVxdWVzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiSW52YWxpZCBwYWdlIHJlcXVlc3QgZGF0YTogaWRyZWYgcmVxdWlyZWQhXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBmYWxsYmFjayA9IGZhbHNlO1xuICAgIGlmIChwYWdlUmVxdWVzdERhdGEpIHtcblxuICAgICAgcGFnZVJlcXVlc3REYXRhID0gb3BlbkJvb2tEYXRhLm9wZW5QYWdlUmVxdWVzdDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHBhZ2VSZXF1ZXN0RGF0YS5pZHJlZikge1xuXG4gICAgICAgICAgaWYgKHBhZ2VSZXF1ZXN0RGF0YS5zcGluZUl0ZW1QYWdlSW5kZXgpIHtcbiAgICAgICAgICAgIGZhbGxiYWNrID0gIXNlbGYub3BlblNwaW5lSXRlbVBhZ2UocGFnZVJlcXVlc3REYXRhLmlkcmVmLCBwYWdlUmVxdWVzdERhdGEuc3BpbmVJdGVtUGFnZUluZGV4LCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhZ2VSZXF1ZXN0RGF0YS5lbGVtZW50Q2ZpKSB7XG4gICAgICAgICAgICBmYWxsYmFjayA9ICFzZWxmLm9wZW5TcGluZUl0ZW1FbGVtZW50Q2ZpKHBhZ2VSZXF1ZXN0RGF0YS5pZHJlZiwgcGFnZVJlcXVlc3REYXRhLmVsZW1lbnRDZmksIHNlbGYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmYWxsYmFjayA9ICFzZWxmLm9wZW5TcGluZUl0ZW1QYWdlKHBhZ2VSZXF1ZXN0RGF0YS5pZHJlZiwgMCwgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZhbGxiYWNrID0gIXNlbGYub3BlbkNvbnRlbnRVcmwocGFnZVJlcXVlc3REYXRhLmNvbnRlbnRSZWZVcmwsIHBhZ2VSZXF1ZXN0RGF0YS5zb3VyY2VGaWxlSHJlZiwgc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwib3BlblBhZ2VSZXF1ZXN0IGZhaWw6IGZhbGxiYWNrIHRvIGZpcnN0IHBhZ2UhXCIpXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIGZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZmFsbGJhY2sgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChmYWxsYmFjaykgeyAvLyBpZiB3ZSB3aGVyZSBub3QgYXNrZWQgdG8gb3BlbiBzcGVjaWZpYyBwYWdlIHdlIHdpbGwgb3BlbiB0aGUgZmlyc3Qgb25lXG5cbiAgICAgIHZhciBzcGluZUl0ZW0gPSBfc3BpbmUuZmlyc3QoKTtcbiAgICAgIGlmIChzcGluZUl0ZW0pIHtcbiAgICAgICAgdmFyIHBhZ2VPcGVuUmVxdWVzdCA9IG5ldyBQYWdlT3BlblJlcXVlc3Qoc3BpbmVJdGVtLCBzZWxmKTtcbiAgICAgICAgcGFnZU9wZW5SZXF1ZXN0LnNldEZpcnN0UGFnZSgpO1xuICAgICAgICBvcGVuUGFnZShwYWdlT3BlblJlcXVlc3QsIDApO1xuICAgICAgfVxuXG4gICAgfVxuXG4gIH07XG5cbiAgZnVuY3Rpb24gb25NZWRpYVBsYXllclN0YXR1c0NoYW5nZWQoc3RhdHVzKSB7XG4gICAgc2VsZi50cmlnZ2VyKEV2ZW50cy5NRURJQV9PVkVSTEFZX1NUQVRVU19DSEFOR0VELCBzdGF0dXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZsaXBzIHRoZSBwYWdlIGZyb20gbGVmdCB0byByaWdodC5cbiAgICogVGFrZXMgdG8gYWNjb3VudCB0aGUgcGFnZSBwcm9ncmVzc2lvbiBkaXJlY3Rpb24gdG8gZGVjaWRlIHRvIGZsaXAgdG8gcHJldiBvciBuZXh0IHBhZ2UuXG4gICAqL1xuICB0aGlzLm9wZW5QYWdlTGVmdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKF9wYWNrYWdlLnNwaW5lLmlzTGVmdFRvUmlnaHQoKSkge1xuICAgICAgc2VsZi5vcGVuUGFnZVByZXYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5vcGVuUGFnZU5leHQoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEZsaXBzIHRoZSBwYWdlIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogVGFrZXMgdG8gYWNjb3VudCB0aGUgcGFnZSBwcm9ncmVzc2lvbiBkaXJlY3Rpb24gdG8gZGVjaWRlIHRvIGZsaXAgdG8gcHJldiBvciBuZXh0IHBhZ2UuXG4gICAqL1xuICB0aGlzLm9wZW5QYWdlUmlnaHQgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmIChfcGFja2FnZS5zcGluZS5pc0xlZnRUb1JpZ2h0KCkpIHtcbiAgICAgIHNlbGYub3BlblBhZ2VOZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYub3BlblBhZ2VQcmV2KCk7XG4gICAgfVxuXG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaWYgdGhlIGN1cnJlbnQgY2hpbGQgdmlldyBpcyBhbiBpbnN0YW5jZSBvZiBhIGZpeGVkIHBhZ2Ugdmlld1xuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNDdXJyZW50Vmlld0ZpeGVkTGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9jdXJyZW50VmlldyBpbnN0YW5jZW9mIEZpeGVkVmlldztcbiAgfTtcblxuICAvKipcbiAgICogWm9vbSBvcHRpb25zXG4gICAqXG4gICAqIEB0eXBlZGVmIHtvYmplY3R9IFJlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5ab29tT3B0aW9uc1xuICAgKiBAcHJvcGVydHkge3N0cmluZ30gc3R5bGUgLSBcInVzZXJcInxcImZpdC1zY3JlZW5cInxcImZpdC13aWR0aFwiXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzY2FsZSAtIDAuMCB0byAxLjBcbiAgICovXG5cbiAgLyoqXG4gICAqIFNldCB0aGUgem9vbSBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5ab29tT3B0aW9uc30gem9vbSBab29tIG9wdGlvbnNcbiAgICovXG4gIHRoaXMuc2V0Wm9vbSA9IGZ1bmN0aW9uKHpvb20pIHtcbiAgICAvLyB6b29tIG9ubHkgaGFuZGxlZCBieSBmaXhlZCBsYXlvdXQgdmlld3MgXG4gICAgaWYgKHNlbGYuaXNDdXJyZW50Vmlld0ZpeGVkTGF5b3V0KCkpIHtcbiAgICAgIF9jdXJyZW50Vmlldy5zZXRab29tKHpvb20pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCB2aWV3IHNjYWxlIGFzIGEgcGVyY2VudGFnZVxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5nZXRWaWV3U2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5pc0N1cnJlbnRWaWV3Rml4ZWRMYXlvdXQoKSkge1xuICAgICAgcmV0dXJuIDEwMCAqIF9jdXJyZW50Vmlldy5nZXRWaWV3U2NhbGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDEwMDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHRpbmdzIERhdGFcbiAgICpcbiAgICogQHR5cGVkZWYge29iamVjdH0gUmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3LlNldHRpbmdzRGF0YVxuICAgKiBAcHJvcGVydHkge251bWJlcn0gZm9udFNpemUgLSBGb250IHNpemUgYXMgcGVyY2VudGFnZVxuICAgKiBAcHJvcGVydHkgeyhzdHJpbmd8Ym9vbGVhbil9IHN5bnRoZXRpY1NwcmVhZCAtIFwiYXV0b1wifHRydWV8ZmFsc2VcbiAgICogQHByb3BlcnR5IHsoc3RyaW5nfGJvb2xlYW4pfSBzY3JvbGwgLSBcImF1dG9cInx0cnVlfGZhbHNlXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZG9Ob3RVcGRhdGVWaWV3IC0gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHZpZXcgc2hvdWxkIGJlIHVwZGF0ZWQgYWZ0ZXIgdGhlIHNldHRpbmdzIGFyZSBhcHBsaWVkXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbWVkaWFPdmVybGF5c0VuYWJsZUNsaWNrIC0gSW5kaWNhdGVzIHdoZXRoZXIgbWVkaWEgb3ZlcmxheXMgYXJlIGludGVyYWN0aXZlIG9uIG1vdXNlIGNsaWNrc1xuICAgKi9cblxuICAvKipcbiAgICogVXBkYXRlcyByZWFkZXIgdmlldyBiYXNlZCBvbiB0aGUgc2V0dGluZ3Mgc3BlY2lmaWVkIGluIHNldHRpbmdzRGF0YSBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtIHtSZWFkaXVtU0RLLlZpZXdzLlJlYWRlclZpZXcuU2V0dGluZ3NEYXRhfSBzZXR0aW5nc0RhdGEgU2V0dGluZ3MgZGF0YVxuICAgKiBAZmlyZXMgUmVhZGl1bVNESy5FdmVudHMuU0VUVElOR1NfQVBQTElFRFxuICAgKi9cbiAgdGhpcy51cGRhdGVTZXR0aW5ncyA9IGZ1bmN0aW9uKHNldHRpbmdzRGF0YSkge1xuXG4gICAgLy9jb25zb2xlLmRlYnVnKFwiVXBkYXRlU2V0dGluZ3M6IFwiICsgSlNPTi5zdHJpbmdpZnkoc2V0dGluZ3NEYXRhKSk7XG5cbiAgICBfdmlld2VyU2V0dGluZ3MudXBkYXRlKHNldHRpbmdzRGF0YSk7XG5cbiAgICBpZiAoX21lZGlhT3ZlcmxheVBsYXllcikge1xuICAgICAgX21lZGlhT3ZlcmxheVBsYXllci5zZXRBdXRvbWF0aWNOZXh0U21pbChfdmlld2VyU2V0dGluZ3MubWVkaWFPdmVybGF5c0F1dG9tYXRpY1BhZ2VUdXJuID8gdHJ1ZSA6IGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3ICYmICFzZXR0aW5nc0RhdGEuZG9Ob3RVcGRhdGVWaWV3KSB7XG5cbiAgICAgIHZhciBib29rTWFyayA9IF9jdXJyZW50Vmlldy5ib29rbWFya0N1cnJlbnRQYWdlKCk7XG5cbiAgICAgIGlmIChib29rTWFyayAmJiBib29rTWFyay5pZHJlZikge1xuXG4gICAgICAgIHZhciB3YXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChfY3VycmVudFZpZXcuaXNSZWZsb3dhYmxlICYmIF9jdXJyZW50Vmlldy5pc1JlZmxvd2FibGUoKSkge1xuICAgICAgICAgIHdhc1BsYXlpbmcgPSBzZWxmLmlzUGxheWluZ01lZGlhT3ZlcmxheSgpO1xuICAgICAgICAgIGlmICh3YXNQbGF5aW5nKSB7XG4gICAgICAgICAgICBzZWxmLnBhdXNlTWVkaWFPdmVybGF5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNwaW5lSXRlbSA9IF9zcGluZS5nZXRJdGVtQnlJZChib29rTWFyay5pZHJlZik7XG5cbiAgICAgICAgaW5pdFZpZXdGb3JJdGVtKHNwaW5lSXRlbSwgZnVuY3Rpb24oaXNWaWV3Q2hhbmdlZCkge1xuXG4gICAgICAgICAgaWYgKCFpc1ZpZXdDaGFuZ2VkKSB7XG4gICAgICAgICAgICBfY3VycmVudFZpZXcuc2V0Vmlld1NldHRpbmdzKF92aWV3ZXJTZXR0aW5ncyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5vcGVuU3BpbmVJdGVtRWxlbWVudENmaShib29rTWFyay5pZHJlZiwgYm9va01hcmsuY29udGVudENGSSwgc2VsZik7XG5cbiAgICAgICAgICBpZiAod2FzUGxheWluZykge1xuICAgICAgICAgICAgc2VsZi5wbGF5TWVkaWFPdmVybGF5KCk7XG4gICAgICAgICAgICAvLyBzZXRUaW1lb3V0KGZ1bmN0aW9uKClcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vIH0sIDYwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLlNFVFRJTkdTX0FQUExJRUQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VsZi50cmlnZ2VyKEV2ZW50cy5TRVRUSU5HU19BUFBMSUVEKTtcbiAgfTtcblxuICAvKipcbiAgICogT3BlbnMgdGhlIG5leHQgcGFnZS5cbiAgICovXG4gIHRoaXMub3BlblBhZ2VOZXh0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoc2VsZi5nZXRDdXJyZW50Vmlld1R5cGUoKSA9PT0gVklFV19UWVBFX1NDUk9MTEVEX0NPTlRJTlVPVVMpIHtcbiAgICAgIF9jdXJyZW50Vmlldy5vcGVuUGFnZU5leHQoc2VsZik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhZ2luYXRpb25JbmZvID0gX2N1cnJlbnRWaWV3LmdldFBhZ2luYXRpb25JbmZvKCk7XG5cbiAgICBpZiAocGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhc3RPcGVuUGFnZSA9IHBhZ2luYXRpb25JbmZvLm9wZW5QYWdlc1twYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAobGFzdE9wZW5QYWdlLnNwaW5lSXRlbVBhZ2VJbmRleCA8IGxhc3RPcGVuUGFnZS5zcGluZUl0ZW1QYWdlQ291bnQgLSAxKSB7XG4gICAgICBfY3VycmVudFZpZXcub3BlblBhZ2VOZXh0KHNlbGYpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50U3BpbmVJdGVtID0gX3NwaW5lLmdldEl0ZW1CeUlkKGxhc3RPcGVuUGFnZS5pZHJlZik7XG5cbiAgICB2YXIgbmV4dFNwaW5lSXRlbSA9IF9zcGluZS5uZXh0SXRlbShjdXJyZW50U3BpbmVJdGVtKTtcblxuICAgIGlmICghbmV4dFNwaW5lSXRlbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcGVuUGFnZVJlcXVlc3QgPSBuZXcgUGFnZU9wZW5SZXF1ZXN0KG5leHRTcGluZUl0ZW0sIHNlbGYpO1xuICAgIG9wZW5QYWdlUmVxdWVzdC5zZXRGaXJzdFBhZ2UoKTtcblxuICAgIG9wZW5QYWdlKG9wZW5QYWdlUmVxdWVzdCwgMik7XG4gIH07XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBwcmV2aW91cyBwYWdlLlxuICAgKi9cbiAgdGhpcy5vcGVuUGFnZVByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmIChzZWxmLmdldEN1cnJlbnRWaWV3VHlwZSgpID09PSBWSUVXX1RZUEVfU0NST0xMRURfQ09OVElOVU9VUykge1xuICAgICAgX2N1cnJlbnRWaWV3Lm9wZW5QYWdlUHJldihzZWxmKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGFnaW5hdGlvbkluZm8gPSBfY3VycmVudFZpZXcuZ2V0UGFnaW5hdGlvbkluZm8oKTtcblxuICAgIGlmIChwYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMubGVuZ3RoID09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RPcGVuUGFnZSA9IHBhZ2luYXRpb25JbmZvLm9wZW5QYWdlc1swXTtcblxuICAgIGlmIChmaXJzdE9wZW5QYWdlLnNwaW5lSXRlbVBhZ2VJbmRleCA+IDApIHtcbiAgICAgIF9jdXJyZW50Vmlldy5vcGVuUGFnZVByZXYoc2VsZik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRTcGluZUl0ZW0gPSBfc3BpbmUuZ2V0SXRlbUJ5SWQoZmlyc3RPcGVuUGFnZS5pZHJlZik7XG5cbiAgICB2YXIgcHJldlNwaW5lSXRlbSA9IF9zcGluZS5wcmV2SXRlbShjdXJyZW50U3BpbmVJdGVtKTtcblxuICAgIGlmICghcHJldlNwaW5lSXRlbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcGVuUGFnZVJlcXVlc3QgPSBuZXcgUGFnZU9wZW5SZXF1ZXN0KHByZXZTcGluZUl0ZW0sIHNlbGYpO1xuICAgIG9wZW5QYWdlUmVxdWVzdC5zZXRMYXN0UGFnZSgpO1xuXG4gICAgb3BlblBhZ2Uob3BlblBhZ2VSZXF1ZXN0LCAxKTtcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRTcGluZUl0ZW0oaWRyZWYpIHtcblxuICAgIGlmICghaWRyZWYpIHtcblxuICAgICAgY29uc29sZS5sb2coXCJpZHJlZiBwYXJhbWV0ZXIgdmFsdWUgbWlzc2luZyFcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBzcGluZUl0ZW0gPSBfc3BpbmUuZ2V0SXRlbUJ5SWQoaWRyZWYpO1xuICAgIGlmICghc3BpbmVJdGVtKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlNwaW5lIGl0ZW0gd2l0aCBpZCBcIiArIGlkcmVmICsgXCIgbm90IGZvdW5kIVwiKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwaW5lSXRlbTtcblxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBwYWdlIG9mIHRoZSBzcGluZSBpdGVtIHdpdGggZWxlbWVudCB3aXRoIHByb3ZpZGVkIGNmaVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRyZWYgSWQgb2YgdGhlIHNwaW5lIGl0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnRDZmkgQ0ZJIG9mIHRoZSBlbGVtZW50IHRvIGJlIHNob3duXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbml0aWF0b3Igb3B0aW9uYWxcbiAgICovXG4gIHRoaXMub3BlblNwaW5lSXRlbUVsZW1lbnRDZmkgPSBmdW5jdGlvbihpZHJlZiwgZWxlbWVudENmaSwgaW5pdGlhdG9yKSB7XG5cbiAgICB2YXIgc3BpbmVJdGVtID0gZ2V0U3BpbmVJdGVtKGlkcmVmKTtcblxuICAgIGlmICghc3BpbmVJdGVtKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHBhZ2VEYXRhID0gbmV3IFBhZ2VPcGVuUmVxdWVzdChzcGluZUl0ZW0sIGluaXRpYXRvcik7XG4gICAgaWYgKGVsZW1lbnRDZmkpIHtcbiAgICAgIHBhZ2VEYXRhLnNldEVsZW1lbnRDZmkoZWxlbWVudENmaSk7XG4gICAgfVxuXG4gICAgb3BlblBhZ2UocGFnZURhdGEsIDApO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIE9wZW5zIHNwZWNpZmllZCBwYWdlIGluZGV4IG9mIHRoZSBjdXJyZW50IHNwaW5lIGl0ZW1cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2VJbmRleCBaZXJvIGJhc2VkIGluZGV4IG9mIHRoZSBwYWdlIGluIHRoZSBjdXJyZW50IHNwaW5lIGl0ZW1cbiAgICogQHBhcmFtIHtvYmplY3R9IGluaXRpYXRvciBvcHRpb25hbFxuICAgKi9cbiAgdGhpcy5vcGVuUGFnZUluZGV4ID0gZnVuY3Rpb24ocGFnZUluZGV4LCBpbml0aWF0b3IpIHtcblxuICAgIGlmICghX2N1cnJlbnRWaWV3KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHBhZ2VSZXF1ZXN0O1xuXG4gICAgaWYgKF9wYWNrYWdlLmlzRml4ZWRMYXlvdXQoKSkge1xuICAgICAgdmFyIHNwaW5lSXRlbSA9IF9zcGluZS5pdGVtc1twYWdlSW5kZXhdO1xuICAgICAgaWYgKCFzcGluZUl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBwYWdlUmVxdWVzdCA9IG5ldyBQYWdlT3BlblJlcXVlc3Qoc3BpbmVJdGVtLCBpbml0aWF0b3IpO1xuICAgICAgcGFnZVJlcXVlc3Quc2V0UGFnZUluZGV4KDApO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIHZhciBzcGluZUl0ZW1zID0gdGhpcy5nZXRMb2FkZWRTcGluZUl0ZW1zKCk7XG4gICAgICBpZiAoc3BpbmVJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHBhZ2VSZXF1ZXN0ID0gbmV3IFBhZ2VPcGVuUmVxdWVzdChzcGluZUl0ZW1zWzBdLCBpbml0aWF0b3IpO1xuICAgICAgICBwYWdlUmVxdWVzdC5zZXRQYWdlSW5kZXgocGFnZUluZGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuUGFnZShwYWdlUmVxdWVzdCwgMCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBkaXI6IDAgPT4gbmV3IG9yIHNhbWUgcGFnZSwgMSA9PiBwcmV2aW91cywgMiA9PiBuZXh0XG4gIGZ1bmN0aW9uIG9wZW5QYWdlKHBhZ2VSZXF1ZXN0LCBkaXIpIHtcblxuICAgIGluaXRWaWV3Rm9ySXRlbShwYWdlUmVxdWVzdC5zcGluZUl0ZW0sIGZ1bmN0aW9uKGlzVmlld0NoYW5nZWQpIHtcblxuICAgICAgaWYgKCFpc1ZpZXdDaGFuZ2VkKSB7XG4gICAgICAgIF9jdXJyZW50Vmlldy5zZXRWaWV3U2V0dGluZ3MoX3ZpZXdlclNldHRpbmdzKTtcbiAgICAgIH1cblxuICAgICAgX2N1cnJlbnRWaWV3Lm9wZW5QYWdlKHBhZ2VSZXF1ZXN0LCBkaXIpO1xuICAgIH0pO1xuICB9XG5cblxuICAvKipcbiAgICogT3BlbnMgcGFnZSBpbmRleCBvZiB0aGUgc3BpbmUgaXRlbSB3aXRoIGlkcmVmIHByb3ZpZGVkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZHJlZiBJZCBvZiB0aGUgc3BpbmUgaXRlbVxuICAgKiBAcGFyYW0ge251bWJlcn0gcGFnZUluZGV4IFplcm8gYmFzZWQgaW5kZXggb2YgdGhlIHBhZ2UgaW4gdGhlIHNwaW5lIGl0ZW1cbiAgICogQHBhcmFtIHtvYmplY3R9IGluaXRpYXRvciBvcHRpb25hbFxuICAgKi9cbiAgdGhpcy5vcGVuU3BpbmVJdGVtUGFnZSA9IGZ1bmN0aW9uKGlkcmVmLCBwYWdlSW5kZXgsIGluaXRpYXRvcikge1xuXG4gICAgdmFyIHNwaW5lSXRlbSA9IGdldFNwaW5lSXRlbShpZHJlZik7XG5cbiAgICBpZiAoIXNwaW5lSXRlbSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBwYWdlRGF0YSA9IG5ldyBQYWdlT3BlblJlcXVlc3Qoc3BpbmVJdGVtLCBpbml0aWF0b3IpO1xuICAgIGlmIChwYWdlSW5kZXgpIHtcbiAgICAgIHBhZ2VEYXRhLnNldFBhZ2VJbmRleChwYWdlSW5kZXgpO1xuICAgIH1cblxuICAgIG9wZW5QYWdlKHBhZ2VEYXRhLCAwKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgQ1NTIFN0eWxlcyB0byB0aGUgcmVhZGVyIGNvbnRhaW5lclxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWRpdW1TREsuQ29sbGVjdGlvbnMuU3R5bGVDb2xsZWN0aW9ufSBzdHlsZXMgICBTdHlsZSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgc2VsZWN0b3IgcHJvcGVydHkgYW5kIGRlY2xhcmF0aW9ucyBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSBkb05vdFVwZGF0ZVZpZXcgICAgICAgICAgICAgICAgICAgICAgICAgV2hldGhlciB0byB1cGRhdGUgdGhlIHZpZXcgYWZ0ZXIgdGhlIHN0eWxlcyBhcmUgYXBwbGllZC5cbiAgICovXG4gIHRoaXMuc2V0U3R5bGVzID0gZnVuY3Rpb24oc3R5bGVzLCBkb05vdFVwZGF0ZVZpZXcpIHtcblxuICAgIHZhciBjb3VudCA9IHN0eWxlcy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGlmIChzdHlsZXNbaV0uZGVjbGFyYXRpb25zKSB7XG4gICAgICAgIF91c2VyU3R5bGVzLmFkZFN0eWxlKHN0eWxlc1tpXS5zZWxlY3Rvciwgc3R5bGVzW2ldLmRlY2xhcmF0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdXNlclN0eWxlcy5yZW1vdmVTdHlsZShzdHlsZXNbaV0uc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFwcGx5U3R5bGVzKGRvTm90VXBkYXRlVmlldyk7XG5cbiAgfTtcblxuICAvKipcbiAgICogU2V0IENTUyBTdHlsZXMgdG8gdGhlIGNvbnRlbnQgZG9jdW1lbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhZGl1bVNESy5Db2xsZWN0aW9ucy5TdHlsZUNvbGxlY3Rpb259IHN0eWxlcyAgICBTdHlsZSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgc2VsZWN0b3IgcHJvcGVydHkgYW5kIGRlY2xhcmF0aW9ucyBvYmplY3RcbiAgICovXG4gIHRoaXMuc2V0Qm9va1N0eWxlcyA9IGZ1bmN0aW9uKHN0eWxlcykge1xuXG4gICAgdmFyIGNvdW50ID0gc3R5bGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgX2Jvb2tTdHlsZXMuYWRkU3R5bGUoc3R5bGVzW2ldLnNlbGVjdG9yLCBzdHlsZXNbaV0uZGVjbGFyYXRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3KSB7XG4gICAgICBfY3VycmVudFZpZXcuYXBwbHlCb29rU3R5bGVzKCk7XG4gICAgfVxuXG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gZWxlbWVudCBmcm9tIGFjdGl2ZSBjb250ZW50IGRvY3VtZW50cyBiYXNlZCBvbiBhIHF1ZXJ5IHNlbGVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge01vZGVscy5TcGluZUl0ZW19IHNwaW5lSXRlbSAgICAgICBUaGUgc3BpbmUgaXRlbSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIGFuIGFjdGl2ZSBjb250ZW50IGRvY3VtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciAgICAgICAgICAgICAgICAgICAgICBUaGUgcXVlcnkgc2VsZWN0b3JcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgc2VsZWN0b3IpIHtcblxuICAgIGlmIChfY3VycmVudFZpZXcpIHtcbiAgICAgIHJldHVybiBfY3VycmVudFZpZXcuZ2V0RWxlbWVudChzcGluZUl0ZW0sIHNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGVsZW1lbnQgZnJvbSBhY3RpdmUgY29udGVudCBkb2N1bWVudHMgYmFzZWQgb24gYW4gZWxlbWVudCBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtNb2RlbHMuU3BpbmVJdGVtfSBzcGluZUl0ZW0gICAgICBUaGUgc3BpbmUgaXRlbSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIGFuIGFjdGl2ZSBjb250ZW50IGRvY3VtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgZWxlbWVudCBpZFxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgaWQpIHtcblxuICAgIGlmIChfY3VycmVudFZpZXcpIHtcbiAgICAgIHJldHVybiBfY3VycmVudFZpZXcuZ2V0RWxlbWVudEJ5SWQoc3BpbmVJdGVtLCBpZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICAvKipcbiAgICogR2V0cyBhbiBlbGVtZW50IGZyb20gYWN0aXZlIGNvbnRlbnQgZG9jdW1lbnRzIGJhc2VkIG9uIGEgY29udGVudCBDRkkuXG4gICAqXG4gICAqIEBwYXJhbSB7TW9kZWxzLlNwaW5lSXRlbX0gc3BpbmVJdGVtICAgICBUaGUgc3BpbmUgaXRlbSBpZHJlZiBhc3NvY2lhdGVkIHdpdGggYW4gYWN0aXZlIGNvbnRlbnQgZG9jdW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNmaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHBhcnRpYWwgY29udGVudCBDRklcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2NsYXNzQmxhY2tsaXN0XVxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbZWxlbWVudEJsYWNrbGlzdF1cbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2lkQmxhY2tsaXN0XVxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5nZXRFbGVtZW50QnlDZmkgPSBmdW5jdGlvbihzcGluZUl0ZW0sIGNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3KSB7XG4gICAgICByZXR1cm4gX2N1cnJlbnRWaWV3LmdldEVsZW1lbnRCeUNmaShzcGluZUl0ZW0sIGNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuXG4gIH07XG5cbiAgZnVuY3Rpb24gYXBwbHlTdHlsZXMoZG9Ob3RVcGRhdGVWaWV3KSB7XG5cbiAgICBzZXRTdHlsZXMoX3VzZXJTdHlsZXMuZ2V0U3R5bGVzKCksIF8kZWwpO1xuXG4gICAgaWYgKF9tZWRpYU92ZXJsYXlQbGF5ZXIpXG4gICAgICBfbWVkaWFPdmVybGF5UGxheWVyLmFwcGx5U3R5bGVzKCk7XG5cbiAgICBpZiAoZG9Ob3RVcGRhdGVWaWV3KSByZXR1cm47XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3KSB7XG4gICAgICBfY3VycmVudFZpZXcuYXBwbHlTdHlsZXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgYSBjb250ZW50IHVybCBmcm9tIGEgbWVkaWEgcGxheWVyIGNvbnRleHRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRSZWZVcmxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZUZpbGVIcmVmXG4gICAqIEBwYXJhbSBvZmZzZXRcbiAgICovXG4gIHRoaXMubWVkaWFPdmVybGF5c09wZW5Db250ZW50VXJsID0gZnVuY3Rpb24oY29udGVudFJlZlVybCwgc291cmNlRmlsZUhyZWYsIG9mZnNldCkge1xuICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIubWVkaWFPdmVybGF5c09wZW5Db250ZW50VXJsKGNvbnRlbnRSZWZVcmwsIHNvdXJjZUZpbGVIcmVmLCBvZmZzZXQpO1xuICB9O1xuXG5cblxuICAvKipcbiAgICogT3BlbnMgdGhlIGNvbnRlbnQgZG9jdW1lbnQgc3BlY2lmaWVkIGJ5IHRoZSB1cmxcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRSZWZVcmwgVXJsIG9mIHRoZSBjb250ZW50IGRvY3VtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBzb3VyY2VGaWxlSHJlZiBVcmwgdG8gdGhlIGZpbGUgdGhhdCBjb250ZW50UmVmVXJsIGlzIHJlbGF0aXZlIHRvLiBJZiBjb250ZW50UmVmVXJsIGlzXG4gICAqIHJlbGF0aXZlIG90IHRoZSBzb3VyY2UgZmlsZSB0aGF0IGNvbnRhaW5zIGl0IGluc3RlYWQgb2YgdGhlIHBhY2thZ2UgZmlsZSAoZXguIFRPQyBmaWxlKSBXZSBoYXZlIHRvIGtub3cgdGhlXG4gICAqIHNvdXJjZUZpbGVIcmVmIHRvIHJlc29sdmUgY29udGVudFVybCByZWxhdGl2ZSB0byB0aGUgcGFja2FnZSBmaWxlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5pdGlhdG9yIG9wdGlvbmFsXG4gICAqL1xuICB0aGlzLm9wZW5Db250ZW50VXJsID0gZnVuY3Rpb24oY29udGVudFJlZlVybCwgc291cmNlRmlsZUhyZWYsIGluaXRpYXRvcikge1xuXG4gICAgdmFyIGNvbWJpbmVkUGF0aCA9IFJlc29sdmVDb250ZW50UmVmKGNvbnRlbnRSZWZVcmwsIHNvdXJjZUZpbGVIcmVmKTtcblxuICAgIHZhciBoYXNoSW5kZXggPSBjb21iaW5lZFBhdGguaW5kZXhPZihcIiNcIik7XG4gICAgdmFyIGhyZWZQYXJ0O1xuICAgIHZhciBlbGVtZW50SWQ7XG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBocmVmUGFydCA9IGNvbWJpbmVkUGF0aC5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgICAgIGVsZW1lbnRJZCA9IGNvbWJpbmVkUGF0aC5zdWJzdHIoaGFzaEluZGV4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhyZWZQYXJ0ID0gY29tYmluZWRQYXRoO1xuICAgICAgZWxlbWVudElkID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBzcGluZUl0ZW0gPSBfc3BpbmUuZ2V0SXRlbUJ5SHJlZihocmVmUGFydCk7XG4gICAgaWYgKCFzcGluZUl0ZW0pIHtcbiAgICAgIGNvbnNvbGUud2Fybignc3BpbmVJdGVtICcgKyBocmVmUGFydCArICcgbm90IGZvdW5kJyk7XG4gICAgICAvLyBzb21ldGltZXMgdGhhdCBoYXBwZW5zIGJlY2F1c2Ugc3BpbmUgaXRlbSdzIFVSSSBnZXRzIGVuY29kZWQsXG4gICAgICAvLyB5ZXQgaXQncyBjb21wYXJlZCB3aXRoIHJhdyBzdHJpbmdzIGJ5IGBnZXRJdGVtQnlIcmVmKClgIC1cbiAgICAgIC8vIHNvIHdlIHRyeSB0byBzZWFyY2ggd2l0aCBkZWNvZGVkIGxpbmsgYXMgd2VsbFxuICAgICAgdmFyIGRlY29kZWRIcmVmUGFydCA9IGRlY29kZVVSSUNvbXBvbmVudChocmVmUGFydCk7XG4gICAgICBzcGluZUl0ZW0gPSBfc3BpbmUuZ2V0SXRlbUJ5SHJlZihkZWNvZGVkSHJlZlBhcnQpO1xuICAgICAgaWYgKCFzcGluZUl0ZW0pIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdkZWNvZGVkIHNwaW5lSXRlbSAnICsgZGVjb2RlZEhyZWZQYXJ0ICsgJyBtaXNzaW5nIGFzIHdlbGwnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWxmLm9wZW5TcGluZUl0ZW1FbGVtZW50SWQoc3BpbmVJdGVtLmlkcmVmLCBlbGVtZW50SWQsIGluaXRpYXRvcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBwYWdlIG9mIHRoZSBzcGluZSBpdGVtIHdpdGggZWxlbWVudCB3aXRoIHByb3ZpZGVkIGNmaVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRyZWYgSWQgb2YgdGhlIHNwaW5lIGl0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnRJZCBpZCBvZiB0aGUgZWxlbWVudCB0byBiZSBzaG93blxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5pdGlhdG9yIG9wdGlvbmFsXG4gICAqL1xuICB0aGlzLm9wZW5TcGluZUl0ZW1FbGVtZW50SWQgPSBmdW5jdGlvbihpZHJlZiwgZWxlbWVudElkLCBpbml0aWF0b3IpIHtcblxuICAgIHZhciBzcGluZUl0ZW0gPSBfc3BpbmUuZ2V0SXRlbUJ5SWQoaWRyZWYpO1xuICAgIGlmICghc3BpbmVJdGVtKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHBhZ2VEYXRhID0gbmV3IFBhZ2VPcGVuUmVxdWVzdChzcGluZUl0ZW0sIGluaXRpYXRvcik7XG5cbiAgICBpZiAoZWxlbWVudElkKSB7XG4gICAgICBwYWdlRGF0YS5zZXRFbGVtZW50SWQoZWxlbWVudElkKTtcbiAgICB9XG5cblxuICAgIG9wZW5QYWdlKHBhZ2VEYXRhLCAwKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBib29rbWFyayBhc3NvY2lhdGVkIHdpdGggY3VycmVudGx5IG9wZW5lZCBwYWdlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBTZXJpYWxpemVkIE1vZGVscy5Cb29rbWFya0RhdGEgb2JqZWN0IGFzIEpTT04gc3RyaW5nLlxuICAgKi9cbiAgdGhpcy5ib29rbWFya0N1cnJlbnRQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KF9jdXJyZW50Vmlldy5ib29rbWFya0N1cnJlbnRQYWdlKCkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXNldHMgYWxsIHRoZSBjdXN0b20gc3R5bGVzIHNldCBieSBzZXRTdHlsZSBjYWxsZXJzIGF0IHJ1bnRpbWVcbiAgICovXG4gIHRoaXMuY2xlYXJTdHlsZXMgPSBmdW5jdGlvbigpIHtcblxuICAgIF91c2VyU3R5bGVzLnJlc2V0U3R5bGVWYWx1ZXMoKTtcbiAgICBhcHBseVN0eWxlcygpO1xuICAgIF91c2VyU3R5bGVzLmNsZWFyKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBhbGwgdGhlIGN1c3RvbSBzdHlsZXMgc2V0IGJ5IHNldEJvb2tTdHlsZSBjYWxsZXJzIGF0IHJ1bnRpbWVcbiAgICovXG4gIHRoaXMuY2xlYXJCb29rU3R5bGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3KSB7XG5cbiAgICAgIF9ib29rU3R5bGVzLnJlc2V0U3R5bGVWYWx1ZXMoKTtcbiAgICAgIF9jdXJyZW50Vmlldy5hcHBseUJvb2tTdHlsZXMoKTtcbiAgICB9XG5cbiAgICBfYm9va1N0eWxlcy5jbGVhcigpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgbWVkaWEgb3ZlcmxheSBhdmFpbGFibGUgZm9yIG9uZSBvZiB0aGUgb3BlbiBwYWdlcy5cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzTWVkaWFPdmVybGF5QXZhaWxhYmxlID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoIV9tZWRpYU92ZXJsYXlQbGF5ZXIpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBfbWVkaWFPdmVybGF5UGxheWVyLmlzTWVkaWFPdmVybGF5QXZhaWxhYmxlKCk7XG4gIH07XG5cbiAgLypcbiAgICAgIHRoaXMuc2V0TWVkaWFPdmVybGF5U2tpcHBhYmxlcyA9IGZ1bmN0aW9uKGl0ZW1zKSB7XG5cbiAgICAgICAgICBfbWVkaWFPdmVybGF5UGxheWVyLnNldE1lZGlhT3ZlcmxheVNraXBwYWJsZXMoaXRlbXMpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRNZWRpYU92ZXJsYXlFc2NhcGFibGVzID0gZnVuY3Rpb24oaXRlbXMpIHtcblxuICAgICAgICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIuc2V0TWVkaWFPdmVybGF5RXNjYXBhYmxlcyhpdGVtcyk7XG4gICAgICB9O1xuICAqL1xuXG4gIC8qKlxuICAgKiBTdGFydHMvU3RvcCBwbGF5aW5nIG1lZGlhIG92ZXJsYXkgb24gY3VycmVudCBwYWdlXG4gICAqL1xuICB0aGlzLnRvZ2dsZU1lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgX21lZGlhT3ZlcmxheVBsYXllci50b2dnbGVNZWRpYU92ZXJsYXkoKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBQbGF5cyBuZXh0IGZyYWdtZW50IG1lZGlhIG92ZXJsYXlcbiAgICovXG4gIHRoaXMubmV4dE1lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgX21lZGlhT3ZlcmxheVBsYXllci5uZXh0TWVkaWFPdmVybGF5KCk7XG5cbiAgfTtcblxuICAvKipcbiAgICogUGxheXMgcHJldmlvdXMgZnJhZ21lbnQgbWVkaWEgb3ZlcmxheVxuICAgKi9cbiAgdGhpcy5wcmV2aW91c01lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgX21lZGlhT3ZlcmxheVBsYXllci5wcmV2aW91c01lZGlhT3ZlcmxheSgpO1xuXG4gIH07XG5cbiAgLyoqXG4gICAqIFBsYXlzIG5leHQgYXZhaWxhYmxlIGZyYWdtZW50IG1lZGlhIG92ZXJsYXkgdGhhdCBpcyBvdXRzaWRlIG9mIHRoZSBjdXJyZW50IGVzY2FwYWJsZSBzY29wZVxuICAgKi9cbiAgdGhpcy5lc2NhcGVNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIuZXNjYXBlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEVuZCBtZWRpYSBvdmVybGF5IFRUU1xuICAgKiBAdG9kbyBDbGFyaWZ5IHdoYXQgdGhpcyBkb2VzIHdpdGggRGFuaWVsLlxuICAgKi9cbiAgdGhpcy50dHNFbmRlZE1lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgX21lZGlhT3ZlcmxheVBsYXllci5vblRUU0VuZCgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQYXVzZSBjdXJyZW50bHkgcGxheWluZyBtZWRpYSBvdmVybGF5cy5cbiAgICovXG4gIHRoaXMucGF1c2VNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIucGF1c2UoKTtcbiAgfTtcblxuICAvKipcbiAgICogU3RhcnQvUmVzdW1lIHBsYXliYWNrIG9mIG1lZGlhIG92ZXJsYXlzLlxuICAgKi9cbiAgdGhpcy5wbGF5TWVkaWFPdmVybGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBfbWVkaWFPdmVybGF5UGxheWVyLnBsYXkoKTtcbiAgfTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGlmIG1lZGlhIG92ZXJsYXlzIGFyZSBjdXJyZW50bHkgcGxheWluZy5cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzUGxheWluZ01lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIF9tZWRpYU92ZXJsYXlQbGF5ZXIuaXNQbGF5aW5nKCk7XG4gIH07XG5cbiAgLy9cbiAgLy8gc2hvdWxkIHVzZSBSZWFkaXVtU0RLLkV2ZW50cy5TRVRUSU5HU19BUFBMSUVEIGluc3RlYWQhXG4gIC8vICAgIHRoaXMuc2V0UmF0ZU1lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKHJhdGUpIHtcbiAgLy9cbiAgLy8gICAgICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIuc2V0UmF0ZShyYXRlKTtcbiAgLy8gICAgfTtcbiAgLy8gICAgdGhpcy5zZXRWb2x1bWVNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbih2b2x1bWUpe1xuICAvL1xuICAvLyAgICAgICAgX21lZGlhT3ZlcmxheVBsYXllci5zZXRWb2x1bWUodm9sdW1lKTtcbiAgLy8gICAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSBmaXJzdCB2aXNpYmxlIG1lZGlhIG92ZXJsYXkgZWxlbWVudCBmcm9tIHRoZSBjdXJyZW50bHkgYWN0aXZlIGNvbnRlbnQgZG9jdW1lbnQocylcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuZ2V0Rmlyc3RWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKF9jdXJyZW50Vmlldykge1xuICAgICAgcmV0dXJuIF9jdXJyZW50Vmlldy5nZXRGaXJzdFZpc2libGVNZWRpYU92ZXJsYXlFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICAvKipcbiAgICogVXNlZCB0byBqdW1wIHRvIGFuIGVsZW1lbnQgdG8gbWFrZSBzdXJlIGl0IGlzIHZpc2libGUgd2hlbiBhIGNvbnRlbnQgZG9jdW1lbnQgaXMgcGFnaW5hdGVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgIHNwaW5lSXRlbUlkICAgVGhlIHNwaW5lIGl0ZW0gaWRyZWYgYXNzb2NpYXRlZCB3aXRoIGFuIGFjdGl2ZSBjb250ZW50IGRvY3VtZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgICAgICAgVGhlIGVsZW1lbnQgdG8gbWFrZSB2aXNpYmxlXG4gICAqIEBwYXJhbSBbaW5pdGlhdG9yXVxuICAgKi9cbiAgdGhpcy5pbnN1cmVFbGVtZW50VmlzaWJpbGl0eSA9IGZ1bmN0aW9uKHNwaW5lSXRlbUlkLCBlbGVtZW50LCBpbml0aWF0b3IpIHtcblxuICAgIGlmIChfY3VycmVudFZpZXcpIHtcbiAgICAgIF9jdXJyZW50Vmlldy5pbnN1cmVFbGVtZW50VmlzaWJpbGl0eShzcGluZUl0ZW1JZCwgZWxlbWVudCwgaW5pdGlhdG9yKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9yZXNpemVCb29rbWFyayA9IG51bGw7XG4gIHZhciBfcmVzaXplTU9XYXNQbGF5aW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlVmlld3BvcnRSZXNpemVTdGFydCgpIHtcblxuICAgIF9yZXNpemVCb29rbWFyayA9IG51bGw7XG4gICAgX3Jlc2l6ZU1PV2FzUGxheWluZyA9IGZhbHNlO1xuXG4gICAgaWYgKF9jdXJyZW50Vmlldykge1xuXG4gICAgICBpZiAoX2N1cnJlbnRWaWV3LmlzUmVmbG93YWJsZSAmJiBfY3VycmVudFZpZXcuaXNSZWZsb3dhYmxlKCkpIHtcbiAgICAgICAgX3Jlc2l6ZU1PV2FzUGxheWluZyA9IHNlbGYuaXNQbGF5aW5nTWVkaWFPdmVybGF5KCk7XG4gICAgICAgIGlmIChfcmVzaXplTU9XYXNQbGF5aW5nKSB7XG4gICAgICAgICAgc2VsZi5wYXVzZU1lZGlhT3ZlcmxheSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9yZXNpemVCb29rbWFyayA9IF9jdXJyZW50Vmlldy5ib29rbWFya0N1cnJlbnRQYWdlKCk7IC8vIG5vdCBzZWxmISAoSlNPTiBzdHJpbmcpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVmlld3BvcnRSZXNpemVUaWNrKCkge1xuICAgIGlmIChfY3VycmVudFZpZXcpIHtcbiAgICAgIHNlbGYuaGFuZGxlVmlld3BvcnRSZXNpemUoX3Jlc2l6ZUJvb2ttYXJrKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVWaWV3cG9ydFJlc2l6ZUVuZCgpIHtcbiAgICAvL3NhbWUgYXMgZG9pbmcgb25lIGZpbmFsIHRpY2sgZm9yIG5vd1xuICAgIGhhbmRsZVZpZXdwb3J0UmVzaXplVGljaygpO1xuXG4gICAgaWYgKF9yZXNpemVNT1dhc1BsYXlpbmcpIHNlbGYucGxheU1lZGlhT3ZlcmxheSgpO1xuICB9XG5cbiAgdGhpcy5oYW5kbGVWaWV3cG9ydFJlc2l6ZSA9IGZ1bmN0aW9uKGJvb2ttYXJrVG9SZXN0b3JlKSB7XG4gICAgaWYgKCFfY3VycmVudFZpZXcpIHJldHVybjtcblxuICAgIHZhciBib29rTWFyayA9IGJvb2ttYXJrVG9SZXN0b3JlIHx8IF9jdXJyZW50Vmlldy5ib29rbWFya0N1cnJlbnRQYWdlKCk7IC8vIG5vdCBzZWxmISAoSlNPTiBzdHJpbmcpXG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3LmlzUmVmbG93YWJsZSAmJiBfY3VycmVudFZpZXcuaXNSZWZsb3dhYmxlKCkgJiYgYm9va01hcmsgJiYgYm9va01hcmsuaWRyZWYpIHtcbiAgICAgIHZhciBzcGluZUl0ZW0gPSBfc3BpbmUuZ2V0SXRlbUJ5SWQoYm9va01hcmsuaWRyZWYpO1xuXG4gICAgICBpbml0Vmlld0Zvckl0ZW0oc3BpbmVJdGVtLCBmdW5jdGlvbihpc1ZpZXdDaGFuZ2VkKSB7XG4gICAgICAgIHNlbGYub3BlblNwaW5lSXRlbUVsZW1lbnRDZmkoYm9va01hcmsuaWRyZWYsIGJvb2tNYXJrLmNvbnRlbnRDRkksIHNlbGYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2N1cnJlbnRWaWV3Lm9uVmlld3BvcnRSZXNpemUoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVudCBzZWxlY3Rpb24gcGFydGlhbCBDZmksIHVzZWZ1bCBmb3Igd29ya2Zsb3dzIHRoYXQgbmVlZCB0byBjaGVjayB3aGV0aGVyIHRoZSB1c2VyIGhhcyBzZWxlY3RlZCBzb21ldGhpbmcuXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3QgfCB1bmRlZmluZWR9IHBhcnRpYWwgY2ZpIG9iamVjdCBvciB1bmRlZmluZWQgaWYgbm90aGluZyBpcyBzZWxlY3RlZFxuICAgKi9cbiAgdGhpcy5nZXRDdXJyZW50U2VsZWN0aW9uQ2ZpID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9hbm5vdGF0aW9uc01hbmFnZXIuZ2V0Q3VycmVudFNlbGVjdGlvbkNmaSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgaGlnbGlnaHQgYmFzZWQgb24gZ2l2ZW4gcGFyYW1ldGVyc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3BpbmVJZFJlZiAgICBzcGluZSBpZHJlZiB0aGF0IGRlZmluZXMgdGhlIHBhcnRpYWwgQ2ZpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjZmkgICAgICAgICAgIHBhcnRpYWwgQ0ZJICh3aXRob3V0aCB0aGUgaW5kaXJlY3Rpb24gc3RlcCkgcmVsYXRpdmUgdG8gdGhlIHNwaW5lIGluZGV4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAgICAgICAgICAgIGlkIG9mIHRoZSBoaWdobGlnaHQuIG11c3QgYmUgdW5pcXVlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlICAgICAgICAgIGN1cnJlbnRseSBcImhpZ2hsaWdodFwiIG9ubHlcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdCB8IHVuZGVmaW5lZH0gcGFydGlhbCBjZmkgb2JqZWN0IG9mIHRoZSBjcmVhdGVkIGhpZ2hsaWdodFxuICAgKi9cbiAgdGhpcy5hZGRIaWdobGlnaHQgPSBmdW5jdGlvbihzcGluZUlkUmVmLCBDZmksIGlkLCB0eXBlLCBzdHlsZXMpIHtcbiAgICByZXR1cm4gX2Fubm90YXRpb25zTWFuYWdlci5hZGRIaWdobGlnaHQoc3BpbmVJZFJlZiwgQ2ZpLCBpZCwgdHlwZSwgc3R5bGVzKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgaGlnbGlnaHQgYmFzZWQgb24gdGhlIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBpZCBvZiB0aGUgaGlnaGxpZ2h0LiBtdXN0IGJlIHVuaXF1ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBjdXJyZW50bHkgXCJoaWdobGlnaHRcIiBvbmx5XG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3QgfCB1bmRlZmluZWR9IHBhcnRpYWwgY2ZpIG9iamVjdCBvZiB0aGUgY3JlYXRlZCBoaWdobGlnaHRcbiAgICovXG4gIHRoaXMuYWRkU2VsZWN0aW9uSGlnaGxpZ2h0ID0gZnVuY3Rpb24oaWQsIHR5cGUpIHtcbiAgICByZXR1cm4gX2Fubm90YXRpb25zTWFuYWdlci5hZGRTZWxlY3Rpb25IaWdobGlnaHQoaWQsIHR5cGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIEEgZ2l2ZW4gaGlnaGxpZ2h0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAgVGhlIGlkIGFzc29jaWF0ZWQgd2l0aCB0aGUgaGlnaGxpZ2h0LlxuICAgKlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKlxuICAgKi9cbiAgdGhpcy5yZW1vdmVIaWdobGlnaHQgPSBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBfYW5ub3RhdGlvbnNNYW5hZ2VyLnJlbW92ZUhpZ2hsaWdodChpZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgICAgICAgICAgICAgIEV2ZW50IG5hbWUuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrICAgICAgICAgICAgIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCAgICAgICAgICAgICAgICBVc2VyIHNwZWNpZmllZCBkYXRhIHBhc3NlZCB0byB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqL1xuICB0aGlzLmFkZElGcmFtZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudE5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgX2lmcmFtZUxvYWRlci5hZGRJRnJhbWVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIFRPRE8gRXh0cmFjdFxuICB2YXIgQmFja2dyb3VuZEF1ZGlvVHJhY2tNYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIF9zcGluZUl0ZW1JZnJhbWVNYXAgPSB7fTtcbiAgICB2YXIgX3dhc1BsYXlpbmcgPSBmYWxzZTtcblxuICAgIHZhciBfY2FsbGJhY2tfcGxheVBhdXNlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2V0Q2FsbGJhY2tfUGxheVBhdXNlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIF9jYWxsYmFja19wbGF5UGF1c2UgPSBjYWxsYmFjaztcbiAgICB9O1xuXG4gICAgdmFyIF9jYWxsYmFja19pc0F2YWlsYWJsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNldENhbGxiYWNrX0lzQXZhaWxhYmxlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIF9jYWxsYmFja19pc0F2YWlsYWJsZSA9IGNhbGxiYWNrO1xuICAgIH07XG5cbiAgICB0aGlzLnBsYXlQYXVzZSA9IGZ1bmN0aW9uKGRvUGxheSkge1xuICAgICAgX3BsYXlQYXVzZShkb1BsYXkpO1xuICAgIH07XG5cbiAgICB2YXIgX3BsYXlQYXVzZSA9IGZ1bmN0aW9uKGRvUGxheSkge1xuICAgICAgaWYgKF9jYWxsYmFja19wbGF5UGF1c2UpIHtcbiAgICAgICAgX2NhbGxiYWNrX3BsYXlQYXVzZShkb1BsYXkpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgJGlmcmFtZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIF9zcGluZUl0ZW1JZnJhbWVNYXApIHtcbiAgICAgICAgICBpZiAoIV9zcGluZUl0ZW1JZnJhbWVNYXAuaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgdmFyIGRhdGEgPSBfc3BpbmVJdGVtSWZyYW1lTWFwW3Byb3BdO1xuICAgICAgICAgIGlmICghZGF0YSB8fCAhZGF0YS5hY3RpdmUpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgaWYgKCRpZnJhbWUpIGNvbnNvbGUuZXJyb3IoXCJNb3JlIHRoYW4gb25lIGFjdGl2ZSBpZnJhbWU/PyAocGFnaW5hdGlvbilcIik7XG5cbiAgICAgICAgICAkaWZyYW1lID0gZGF0YVtcIiRpZnJhbWVcIl07XG4gICAgICAgICAgaWYgKCEkaWZyYW1lKSBjb250aW51ZTtcblxuICAgICAgICAgIHZhciAkYXVkaW9zID0gJChcImF1ZGlvXCIsICRpZnJhbWVbMF0uY29udGVudERvY3VtZW50KTtcblxuICAgICAgICAgICQuZWFjaCgkYXVkaW9zLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgdmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZShcImVwdWI6dHlwZVwiKSB8fCB0aGlzLmdldEF0dHJpYnV0ZShcInR5cGVcIik7XG5cbiAgICAgICAgICAgIGlmICghYXR0cikgcmV0dXJuIHRydWU7IC8vIGNvbnRpbnVlXG5cbiAgICAgICAgICAgIGlmIChhdHRyLmluZGV4T2YoXCJpYm9va3M6c291bmR0cmFja1wiKSA8IDAgJiYgYXR0ci5pbmRleE9mKFwibWVkaWE6c291bmR0cmFja1wiKSA8IDAgJiYgYXR0ci5pbmRleE9mKFwibWVkaWE6YmFja2dyb3VuZFwiKSA8IDApIHJldHVybiB0cnVlOyAvLyBjb250aW51ZVxuXG4gICAgICAgICAgICBpZiAoZG9QbGF5ICYmIHRoaXMucGxheSkge1xuICAgICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXVzZSkge1xuICAgICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBjb250aW51ZSAobW9yZSB0aGFuIG9uZSB0cmFjaz8pXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc2V0UGxheVN0YXRlID0gZnVuY3Rpb24od2FzUGxheWluZykge1xuICAgICAgX3dhc1BsYXlpbmcgPSB3YXNQbGF5aW5nO1xuICAgIH07XG5cbiAgICBzZWxmLm9uKEV2ZW50cy5DT05URU5UX0RPQ1VNRU5UX0xPQURFRCwgZnVuY3Rpb24oJGlmcmFtZSwgc3BpbmVJdGVtKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoc3BpbmVJdGVtICYmIHNwaW5lSXRlbS5pZHJlZiAmJiAkaWZyYW1lICYmICRpZnJhbWVbMF0pIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkNPTlRFTlRfRE9DVU1FTlRfTE9BREVEXCIpO1xuICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoc3BpbmVJdGVtLmhyZWYpO1xuICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoc3BpbmVJdGVtLmlkcmVmKTtcblxuICAgICAgICAgIF9zcGluZUl0ZW1JZnJhbWVNYXBbc3BpbmVJdGVtLmlkcmVmXSA9IHtcbiAgICAgICAgICAgIFwiJGlmcmFtZVwiOiAkaWZyYW1lLFxuICAgICAgICAgICAgaHJlZjogc3BpbmVJdGVtLmhyZWZcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2VsZi5vbihFdmVudHMuUEFHSU5BVElPTl9DSEFOR0VELCBmdW5jdGlvbihwYWdlQ2hhbmdlRGF0YSkge1xuICAgICAgLy8gY29uc29sZS5sb2coXCJQQUdJTkFUSU9OX0NIQU5HRURcIik7XG4gICAgICAvLyBjb25zb2xlLmRlYnVnKHBhZ2VDaGFuZ2VEYXRhKTtcbiAgICAgIC8vIFxuICAgICAgLy8gaWYgKHBhZ2VDaGFuZ2VEYXRhLnNwaW5lSXRlbSlcbiAgICAgIC8vIHtcbiAgICAgIC8vICAgICBjb25zb2xlLmRlYnVnKHBhZ2VDaGFuZ2VEYXRhLnNwaW5lSXRlbS5ocmVmKTtcbiAgICAgIC8vICAgICBjb25zb2xlLmRlYnVnKHBhZ2VDaGFuZ2VEYXRhLnNwaW5lSXRlbS5pZHJlZik7XG4gICAgICAvLyB9XG4gICAgICAvLyBlbHNlXG4gICAgICAvLyB7XG4gICAgICAvLyAgICAgLy9jb25zb2xlLmVycm9yKHBhZ2VDaGFuZ2VEYXRhKTtcbiAgICAgIC8vIH1cbiAgICAgIC8vIFxuICAgICAgLy8gaWYgKHBhZ2VDaGFuZ2VEYXRhLnBhZ2luYXRpb25JbmZvICYmIHBhZ2VDaGFuZ2VEYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlcyAmJiBwYWdlQ2hhbmdlRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMubGVuZ3RoKVxuICAgICAgLy8ge1xuICAgICAgLy8gICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFnZUNoYW5nZURhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzLmxlbmd0aDsgaSsrKVxuICAgICAgLy8gICAgIHtcbiAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2cocGFnZUNoYW5nZURhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzW2ldLmlkcmVmKTtcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyB9XG5cbiAgICAgIHZhciBhdExlYXN0T25lID0gZmFsc2U7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gX3NwaW5lSXRlbUlmcmFtZU1hcCkge1xuICAgICAgICAgIGlmICghX3NwaW5lSXRlbUlmcmFtZU1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG5cbiAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBwYWdlQ2hhbmdlRGF0YS5zcGluZUl0ZW0gJiYgcGFnZUNoYW5nZURhdGEuc3BpbmVJdGVtLmlkcmVmID09PSBwcm9wO1xuXG4gICAgICAgICAgdmFyIGlzRGlzcGxheWVkID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAocGFnZUNoYW5nZURhdGEucGFnaW5hdGlvbkluZm8gJiYgcGFnZUNoYW5nZURhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGFsbFNhbWUgPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZ2VDaGFuZ2VEYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAocGFnZUNoYW5nZURhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzW2ldLmlkcmVmID09PSBwcm9wKSB7XG4gICAgICAgICAgICAgICAgaXNEaXNwbGF5ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFsbFNhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzQWN0aXZlICYmIGFsbFNhbWUpIGlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNBY3RpdmUgfHwgaXNEaXNwbGF5ZWQpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gX3NwaW5lSXRlbUlmcmFtZU1hcFtwcm9wXTtcbiAgICAgICAgICAgIGlmICghZGF0YSkgY29udGludWU7XG5cbiAgICAgICAgICAgIF9zcGluZUl0ZW1JZnJhbWVNYXBbcHJvcF1bXCJhY3RpdmVcIl0gPSBpc0FjdGl2ZTtcblxuICAgICAgICAgICAgdmFyICRpZnJhbWUgPSBkYXRhW1wiJGlmcmFtZVwiXTtcbiAgICAgICAgICAgIHZhciBocmVmID0gZGF0YS5ocmVmO1xuXG4gICAgICAgICAgICB2YXIgJGF1ZGlvcyA9ICQoXCJhdWRpb1wiLCAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudCk7XG4gICAgICAgICAgICAkLmVhY2goJGF1ZGlvcywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgdmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZShcImVwdWI6dHlwZVwiKSB8fCB0aGlzLmdldEF0dHJpYnV0ZShcInR5cGVcIik7XG5cbiAgICAgICAgICAgICAgaWYgKCFhdHRyKSByZXR1cm4gdHJ1ZTsgLy8gY29udGludWVcblxuICAgICAgICAgICAgICBpZiAoYXR0ci5pbmRleE9mKFwiaWJvb2tzOnNvdW5kdHJhY2tcIikgPCAwICYmIGF0dHIuaW5kZXhPZihcIm1lZGlhOnNvdW5kdHJhY2tcIikgPCAwICYmIGF0dHIuaW5kZXhPZihcIm1lZGlhOmJhY2tncm91bmRcIikgPCAwKSByZXR1cm4gdHJ1ZTsgLy8gY29udGludWVcblxuICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShcImxvb3BcIiwgXCJsb29wXCIpO1xuICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShcImF1dG9wbGF5XCIpO1xuXG4gICAgICAgICAgICAgIC8vIERFQlVHIVxuICAgICAgICAgICAgICAvL3RoaXMuc2V0QXR0cmlidXRlKFwiY29udHJvbHNcIiwgXCJjb250cm9sc1wiKTtcblxuICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAvLyBERUJVRyFcbiAgICAgICAgICAgICAgICAvLyQodGhpcykuY3NzKHtib3JkZXI6XCIycHggc29saWQgZ3JlZW5cIn0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhdXNlKSB0aGlzLnBhdXNlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBERUJVRyFcbiAgICAgICAgICAgICAgICAvLyQodGhpcykuY3NzKHtib3JkZXI6XCIycHggc29saWQgcmVkXCJ9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGF0TGVhc3RPbmUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBjb250aW51ZSAobW9yZSB0aGFuIG9uZSB0cmFjaz8pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChfc3BpbmVJdGVtSWZyYW1lTWFwW3Byb3BdKSBfc3BpbmVJdGVtSWZyYW1lTWFwW3Byb3BdW1wiJGlmcmFtZVwiXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIF9zcGluZUl0ZW1JZnJhbWVNYXBbcHJvcF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2NhbGxiYWNrX2lzQXZhaWxhYmxlKSB7XG4gICAgICAgIF9jYWxsYmFja19pc0F2YWlsYWJsZShhdExlYXN0T25lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF0TGVhc3RPbmUpIHtcbiAgICAgICAgaWYgKF93YXNQbGF5aW5nKSB7XG4gICAgICAgICAgX3BsYXlQYXVzZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfcGxheVBhdXNlKGZhbHNlKTsgLy8gZW5zdXJlIGNvcnJlY3QgcGF1c2VkIHN0YXRlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9wbGF5UGF1c2UoZmFsc2UpOyAvLyBlbnN1cmUgY29ycmVjdCBwYXVzZWQgc3RhdGVcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlbGYub24oRXZlbnRzLk1FRElBX09WRVJMQVlfU1RBVFVTX0NIQU5HRUQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlLnNtaWxJbmRleCkgcmV0dXJuO1xuICAgICAgdmFyIHBhY2thZ2UgPSBzZWxmLnBhY2thZ2UoKTtcbiAgICAgIHZhciBzbWlsID0gcGFja2FnZS5tZWRpYV9vdmVybGF5LnNtaWxBdCh2YWx1ZS5zbWlsSW5kZXgpO1xuICAgICAgaWYgKCFzbWlsIHx8ICFzbWlsLnNwaW5lSXRlbUlkKSByZXR1cm47XG5cbiAgICAgIHZhciBuZWVkVXBkYXRlID0gZmFsc2U7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIF9zcGluZUl0ZW1JZnJhbWVNYXApIHtcbiAgICAgICAgaWYgKCFfc3BpbmVJdGVtSWZyYW1lTWFwLmhhc093blByb3BlcnR5KHByb3ApKSBjb250aW51ZTtcblxuICAgICAgICB2YXIgZGF0YSA9IF9zcGluZUl0ZW1JZnJhbWVNYXBbcHJvcF07XG4gICAgICAgIGlmICghZGF0YSkgY29udGludWU7XG5cbiAgICAgICAgaWYgKGRhdGEuYWN0aXZlKSB7XG4gICAgICAgICAgaWYgKHByb3AgIT09IHNtaWwuc3BpbmVJdGVtSWQpIHtcbiAgICAgICAgICAgIF9wbGF5UGF1c2UoZmFsc2UpOyAvLyBlbnN1cmUgY29ycmVjdCBwYXVzZWQgc3RhdGVcbiAgICAgICAgICAgIGRhdGEuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRVcGRhdGUpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBfc3BpbmVJdGVtSWZyYW1lTWFwKSB7XG4gICAgICAgICAgaWYgKCFfc3BpbmVJdGVtSWZyYW1lTWFwLmhhc093blByb3BlcnR5KHByb3ApKSBjb250aW51ZTtcblxuICAgICAgICAgIHZhciBkYXRhID0gX3NwaW5lSXRlbUlmcmFtZU1hcFtwcm9wXTtcbiAgICAgICAgICBpZiAoIWRhdGEpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgaWYgKCFkYXRhLmFjdGl2ZSkge1xuICAgICAgICAgICAgaWYgKHByb3AgPT09IHNtaWwuc3BpbmVJdGVtSWQpIHtcbiAgICAgICAgICAgICAgZGF0YS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfd2FzUGxheWluZykge1xuICAgICAgICAgIF9wbGF5UGF1c2UodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgdGhpcy5iYWNrZ3JvdW5kQXVkaW9UcmFja01hbmFnZXIgPSBuZXcgQmFja2dyb3VuZEF1ZGlvVHJhY2tNYW5hZ2VyKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRlclZpZXc7IiwiLy8gIExhdW5jaGVyT1NYXG4vL1xuLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxudmFyIEJvb2ttYXJrRGF0YSA9IHJlcXVpcmUoJy4uL21vZGVscy9ib29rbWFyay1kYXRhJylcbnZhciBDZmlOYXZpZ2F0aW9uTG9naWMgPSByZXF1aXJlKCcuL2NmaS1uYXZpZ2F0aW9uLWxvZ2ljJylcbnZhciBDdXJyZW50UGFnZXNJbmZvID0gcmVxdWlyZSgnLi4vbW9kZWxzL2N1cnJlbnQtcGFnZXMtaW5mbycpXG52YXIgRXZlbnRzID0gcmVxdWlyZSgnLi4vZXZlbnRzJylcbnZhciBkZWR1Y2VTeW50aGV0aWNTcHJlYWQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2RlZHVjZS1zeW50aGV0aWMtc3ByZWFkJylcbnZhciBJbnRlcm5hbEV2ZW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFsLWV2ZW50cycpXG52YXIgbG9hZFRlbXBsYXRlID0gcmVxdWlyZSgnLi4vaGVscGVycy9sb2FkLXRlbXBsYXRlJylcbnZhciBNYXJnaW5zID0gcmVxdWlyZSgnLi4vaGVscGVycy9tYXJnaW5zJylcbnZhciBQYWdlT3BlblJlcXVlc3QgPSByZXF1aXJlKCcuLi9tb2RlbHMvcGFnZS1vcGVuLXJlcXVlc3QnKVxudmFyIHRyaWdnZXJMYXlvdXQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RyaWdnZXItbGF5b3V0JylcbnZhciBzZXRTdHlsZXMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3NldC1zdHlsZXMnKVxudmFyIFVwZGF0ZUh0bWxGb250U2l6ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdXBkYXRlLWh0bWwtZm9udC1zaXplJylcbnZhciBWaWV3ZXJTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL21vZGVscy92aWV3ZXItc2V0dGluZ3MnKVxuXG4vKipcbiAqIFJlbmRlcnMgcmVmbG93YWJsZSBjb250ZW50IHVzaW5nIENTUyBjb2x1bW5zXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJlZmxvd2FibGVWaWV3KG9wdGlvbnMsIHJlYWRlcikge1xuXG4gIF8uZXh0ZW5kKHRoaXMsIEJhY2tib25lLkV2ZW50cyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBfJHZpZXdwb3J0ID0gb3B0aW9ucy4kdmlld3BvcnQ7XG4gIHZhciBfc3BpbmUgPSBvcHRpb25zLnNwaW5lO1xuICB2YXIgX3VzZXJTdHlsZXMgPSBvcHRpb25zLnVzZXJTdHlsZXM7XG4gIHZhciBfYm9va1N0eWxlcyA9IG9wdGlvbnMuYm9va1N0eWxlcztcbiAgdmFyIF9pZnJhbWVMb2FkZXIgPSBvcHRpb25zLmlmcmFtZUxvYWRlcjtcblxuICB2YXIgX2N1cnJlbnRTcGluZUl0ZW07XG4gIHZhciBfaXNXYWl0aW5nRnJhbWVSZW5kZXIgPSBmYWxzZTtcbiAgdmFyIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0O1xuICB2YXIgX2ZvbnRTaXplID0gMTAwO1xuICB2YXIgXyRjb250ZW50RnJhbWU7XG4gIHZhciBfbmF2aWdhdGlvbkxvZ2ljO1xuICB2YXIgXyRlbDtcbiAgdmFyIF8kaWZyYW1lO1xuICB2YXIgXyRlcHViSHRtbDtcblxuICB2YXIgXyRodG1sQm9keTtcblxuICB2YXIgX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlO1xuICB2YXIgX2h0bWxCb2R5SXNMVFJEaXJlY3Rpb247XG4gIHZhciBfaHRtbEJvZHlJc0xUUldyaXRpbmdNb2RlO1xuXG5cbiAgdmFyIF9jdXJyZW50T3BhY2l0eSA9IC0xO1xuXG4gIHZhciBfbGFzdFZpZXdQb3J0U2l6ZSA9IHtcbiAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgIGhlaWdodDogdW5kZWZpbmVkXG4gIH07XG5cbiAgdmFyIF9wYWdpbmF0aW9uSW5mbyA9IHtcblxuICAgIHZpc2libGVDb2x1bW5Db3VudDogMixcbiAgICBjb2x1bW5HYXA6IDIwLFxuICAgIHNwcmVhZENvdW50OiAwLFxuICAgIGN1cnJlbnRTcHJlYWRJbmRleDogMCxcbiAgICBjb2x1bW5XaWR0aDogdW5kZWZpbmVkLFxuICAgIHBhZ2VPZmZzZXQ6IDAsXG4gICAgY29sdW1uQ291bnQ6IDBcbiAgfTtcblxuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHRlbXBsYXRlID0gbG9hZFRlbXBsYXRlKFwicmVmbG93YWJsZV9ib29rX2ZyYW1lXCIsIHt9KTtcblxuICAgIF8kZWwgPSAkKHRlbXBsYXRlKTtcbiAgICBfJHZpZXdwb3J0LmFwcGVuZChfJGVsKTtcblxuICAgIHZhciBzZXR0aW5ncyA9IHJlYWRlci52aWV3ZXJTZXR0aW5ncygpO1xuICAgIGlmICghc2V0dGluZ3MgfHwgdHlwZW9mIHNldHRpbmdzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIC8vZGVmYXVsdHNcbiAgICAgIHNldHRpbmdzID0gbmV3IFZpZXdlclNldHRpbmdzKHt9KTtcbiAgICB9XG4gICAgaWYgKHNldHRpbmdzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QpIHtcbiAgICAgIC8vIFRoaXMgZml4ZXMgcmVuZGVyaW5nIGlzc3VlcyB3aXRoIFdlYlZpZXcgKG5hdGl2ZSBhcHBzKSwgd2hpY2ggY2xpcHMgY29udGVudCBlbWJlZGRlZCBpbiBpZnJhbWVzIHVubGVzcyBHUFUgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIGlzIGVuYWJsZWQgZm9yIENTUyByZW5kZXJpbmcuXG4gICAgICBfJGVsLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVooMClcIik7XG4gICAgfVxuXG4gICAgLy8gU2VlIFJlYWRlclZpZXcuaGFuZGxlVmlld3BvcnRSZXNpemVcbiAgICAvLyB2YXIgbGF6eVJlc2l6ZSA9IF8uZGVib3VuY2Uoc2VsZi5vblZpZXdwb3J0UmVzaXplLCAxMDApO1xuICAgIC8vICQod2luZG93KS5vbihcInJlc2l6ZS5SZWFkaXVtU0RLLnJlZmxvd2FibGVWaWV3XCIsIF8uYmluZChsYXp5UmVzaXplLCBzZWxmKSk7XG4gICAgcmVuZGVySWZyYW1lKCk7XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICBmdW5jdGlvbiBzZXRGcmFtZVNpemVzVG9SZWN0YW5nbGUocmVjdGFuZ2xlKSB7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwibGVmdFwiLCByZWN0YW5nbGUubGVmdCArIFwicHhcIik7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwidG9wXCIsIHJlY3RhbmdsZS50b3AgKyBcInB4XCIpO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcInJpZ2h0XCIsIHJlY3RhbmdsZS5yaWdodCArIFwicHhcIik7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwiYm90dG9tXCIsIHJlY3RhbmdsZS5ib3R0b20gKyBcInB4XCIpO1xuXG4gIH1cblxuICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgLy8kKHdpbmRvdykub2ZmKFwicmVzaXplLlJlYWRpdW1TREsucmVmbG93YWJsZVZpZXdcIik7XG4gICAgXyRlbC5yZW1vdmUoKTtcblxuICB9O1xuXG4gIHRoaXMuaXNSZWZsb3dhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgdGhpcy5vblZpZXdwb3J0UmVzaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAodXBkYXRlVmlld3BvcnRTaXplKCkpIHtcbiAgICAgIHVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF92aWV3U2V0dGluZ3MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuc2V0Vmlld1NldHRpbmdzID0gZnVuY3Rpb24oc2V0dGluZ3MpIHtcblxuICAgIF92aWV3U2V0dGluZ3MgPSBzZXR0aW5ncztcblxuICAgIF9wYWdpbmF0aW9uSW5mby5jb2x1bW5HYXAgPSBzZXR0aW5ncy5jb2x1bW5HYXA7XG4gICAgX2ZvbnRTaXplID0gc2V0dGluZ3MuZm9udFNpemU7XG5cbiAgICB1cGRhdGVIdG1sRm9udFNpemUoKTtcbiAgICB1cGRhdGVDb2x1bW5HYXAoKTtcblxuICAgIHVwZGF0ZVZpZXdwb3J0U2l6ZSgpO1xuICAgIHVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgfTtcblxuICBmdW5jdGlvbiByZW5kZXJJZnJhbWUoKSB7XG4gICAgaWYgKF8kY29udGVudEZyYW1lKSB7XG4gICAgICAvL2Rlc3Ryb3kgb2xkIGNvbnRlbnRGcmFtZVxuICAgICAgXyRjb250ZW50RnJhbWUucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdmFyIHRlbXBsYXRlID0gbG9hZFRlbXBsYXRlKFwicmVmbG93YWJsZV9ib29rX3BhZ2VfZnJhbWVcIiwge30pO1xuICAgIHZhciAkYm9va0ZyYW1lID0gJCh0ZW1wbGF0ZSk7XG4gICAgJGJvb2tGcmFtZSA9IF8kZWwuYXBwZW5kKCRib29rRnJhbWUpO1xuXG4gICAgXyRjb250ZW50RnJhbWUgPSAkKFwiI3JlZmxvd2FibGUtY29udGVudC1mcmFtZVwiLCAkYm9va0ZyYW1lKTtcblxuICAgIF8kaWZyYW1lID0gJChcIiNlcHViQ29udGVudElmcmFtZVwiLCAkYm9va0ZyYW1lKTtcblxuICAgIF8kaWZyYW1lLmNzcyhcImxlZnRcIiwgXCJcIik7XG4gICAgXyRpZnJhbWUuY3NzKFwicmlnaHRcIiwgXCJcIik7XG4gICAgXyRpZnJhbWUuY3NzKFwicG9zaXRpb25cIiwgXCJyZWxhdGl2ZVwiKTtcbiAgICAvL18kaWZyYW1lLmNzcyhfc3BpbmUuaXNMZWZ0VG9SaWdodCgpID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsIFwiMHB4XCIpO1xuICAgIF8kaWZyYW1lLmNzcyhcIm92ZXJmbG93XCIsIFwiaGlkZGVuXCIpO1xuXG4gICAgX25hdmlnYXRpb25Mb2dpYyA9IG5ldyBDZmlOYXZpZ2F0aW9uTG9naWMoXG4gICAgICBfJGNvbnRlbnRGcmFtZSwgXyRpZnJhbWUsIHtcbiAgICAgICAgcmVjdGFuZ2xlQmFzZWQ6IHRydWUsXG4gICAgICAgIHBhZ2luYXRpb25JbmZvOiBfcGFnaW5hdGlvbkluZm9cbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9hZFNwaW5lSXRlbShzcGluZUl0ZW0pIHtcblxuICAgIGlmIChfY3VycmVudFNwaW5lSXRlbSAhPSBzcGluZUl0ZW0pIHtcblxuICAgICAgLy9jcmVhdGUgJiBhcHBlbmQgaWZyYW1lIHRvIGNvbnRhaW5lciBmcmFtZVxuICAgICAgcmVuZGVySWZyYW1lKCk7XG5cbiAgICAgIF9wYWdpbmF0aW9uSW5mby5wYWdlT2Zmc2V0ID0gMDtcbiAgICAgIF9wYWdpbmF0aW9uSW5mby5jdXJyZW50U3ByZWFkSW5kZXggPSAwO1xuICAgICAgX2N1cnJlbnRTcGluZUl0ZW0gPSBzcGluZUl0ZW07XG4gICAgICBfaXNXYWl0aW5nRnJhbWVSZW5kZXIgPSB0cnVlO1xuXG4gICAgICB2YXIgc3JjID0gX3NwaW5lLnBhY2thZ2UucmVzb2x2ZVJlbGF0aXZlVXJsKHNwaW5lSXRlbS5ocmVmKTtcbiAgICAgIHNlbGYudHJpZ2dlcihFdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FEX1NUQVJULCBfJGlmcmFtZSwgc3BpbmVJdGVtKTtcblxuICAgICAgXyRpZnJhbWUuY3NzKFwib3BhY2l0eVwiLCBcIjAuMDFcIik7XG5cbiAgICAgIF9pZnJhbWVMb2FkZXIubG9hZElmcmFtZShfJGlmcmFtZVswXSwgc3JjLCBvbklGcmFtZUxvYWQsIHNlbGYsIHtcbiAgICAgICAgc3BpbmVJdGVtOiBzcGluZUl0ZW1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUh0bWxGb250U2l6ZSgpIHtcblxuICAgIGlmIChfJGVwdWJIdG1sKSB7XG4gICAgICBVcGRhdGVIdG1sRm9udFNpemUoXyRlcHViSHRtbCwgX2ZvbnRTaXplKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDb2x1bW5HYXAoKSB7XG5cbiAgICBpZiAoXyRlcHViSHRtbCkge1xuXG4gICAgICBfJGVwdWJIdG1sLmNzcyhcImNvbHVtbi1nYXBcIiwgX3BhZ2luYXRpb25JbmZvLmNvbHVtbkdhcCArIFwicHhcIik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25JRnJhbWVMb2FkKHN1Y2Nlc3MpIHtcblxuICAgIF9pc1dhaXRpbmdGcmFtZVJlbmRlciA9IGZhbHNlO1xuXG4gICAgLy93aGlsZSB3ZSB3aGVyZSBsb2FkaW5nIGZyYW1lIG5ldyByZXF1ZXN0IGNhbWVcbiAgICBpZiAoX2RlZmVycmVkUGFnZVJlcXVlc3QgJiYgX2RlZmVycmVkUGFnZVJlcXVlc3Quc3BpbmVJdGVtICE9IF9jdXJyZW50U3BpbmVJdGVtKSB7XG4gICAgICBsb2FkU3BpbmVJdGVtKF9kZWZlcnJlZFBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICBfJGlmcmFtZS5jc3MoXCJvcGFjaXR5XCIsIFwiMVwiKTtcbiAgICAgIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGYudHJpZ2dlcihFdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FERUQsIF8kaWZyYW1lLCBfY3VycmVudFNwaW5lSXRlbSk7XG5cbiAgICB2YXIgZXB1YkNvbnRlbnREb2N1bWVudCA9IF8kaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcbiAgICBfJGVwdWJIdG1sID0gJChcImh0bWxcIiwgZXB1YkNvbnRlbnREb2N1bWVudCk7XG4gICAgXyRodG1sQm9keSA9ICQoXCJib2R5XCIsIF8kZXB1Ykh0bWwpO1xuXG4gICAgLy8gVmlkZW8gc3VyZmFjZSBzb21ldGltZXMgKGRlcGVuZHMgb24gdGhlIHZpZGVvIGNvZGVjKSBkaXNhcHBlYXJzIGZyb20gQ1NTIGNvbHVtbiAoaS5lLiByZWZsb3cgcGFnZSkgZHVyaW5nIHBsYXliYWNrIChhdWRpbyBjb250aW51ZXMgdG8gcGxheSBub3JtYWxseSwgYnV0IHZpZGVvIGNhbnZhcyBpcyBpbnZpc2libGUpLlxuICAgIC8vIEVuYWJsaW5nIENTUzNEIGZpeGVzIHRoaXMgQ2hyb21lLXNwZWNpZmljIHJlbmRlcmluZyBidWcuXG4gICAgaWYgKHdpbmRvdy5jaHJvbWUgJiYgd2luZG93Lm5hdmlnYXRvci52ZW5kb3IgPT09IFwiR29vZ2xlIEluYy5cIikgLy8gVE9ETzogT3BlcmEgKFdlYktpdCkgc29tZXRpbWVzIHN1ZmZlcnMgZnJvbSB0aGlzIHJlbmRlcmluZyBidWcgdG9vIChkZXBlbmRzIG9uIHRoZSB2aWRlbyBjb2RlYyksIGJ1dCB1bmZvcnR1bmF0ZWx5IEdQVS1hY2NlbGVyYXRlZCByZW5kZXJpbmcgbWFrZXMgdGhlIHZpZGVvIGNvbnRyb2xzIHVucmVzcG9uc2l2ZSEhXG4gICAge1xuICAgICAgJChcInZpZGVvXCIsIF8kaHRtbEJvZHkpLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVooMClcIik7XG4gICAgfVxuXG4gICAgX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlID0gZmFsc2U7XG4gICAgX2h0bWxCb2R5SXNMVFJEaXJlY3Rpb24gPSB0cnVlO1xuICAgIF9odG1sQm9keUlzTFRSV3JpdGluZ01vZGUgPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgd2luID0gXyRpZnJhbWVbMF0uY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3IHx8IF8kaWZyYW1lWzBdLmNvbnRlbnRXaW5kb3c7XG5cbiAgICAvL0hlbHBlcnMuaXNJZnJhbWVBbGl2ZVxuICAgIHZhciBodG1sQm9keUNvbXB1dGVkU3R5bGUgPSB3aW4uZ2V0Q29tcHV0ZWRTdHlsZShfJGh0bWxCb2R5WzBdLCBudWxsKTtcbiAgICBpZiAoaHRtbEJvZHlDb21wdXRlZFN0eWxlKSB7XG4gICAgICBfaHRtbEJvZHlJc0xUUkRpcmVjdGlvbiA9IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS5kaXJlY3Rpb24gPT09IFwibHRyXCI7XG5cbiAgICAgIHZhciB3cml0aW5nTW9kZSA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChodG1sQm9keUNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSkge1xuICAgICAgICB3cml0aW5nTW9kZSA9IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiLXdlYmtpdC13cml0aW5nLW1vZGVcIikgfHwgaHRtbEJvZHlDb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCItbW96LXdyaXRpbmctbW9kZVwiKSB8fCBodG1sQm9keUNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcIi1tcy13cml0aW5nLW1vZGVcIikgfHwgaHRtbEJvZHlDb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCItby13cml0aW5nLW1vZGVcIikgfHwgaHRtbEJvZHlDb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCItZXB1Yi13cml0aW5nLW1vZGVcIikgfHwgaHRtbEJvZHlDb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJ3cml0aW5nLW1vZGVcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0aW5nTW9kZSA9IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS53ZWJraXRXcml0aW5nTW9kZSB8fCBodG1sQm9keUNvbXB1dGVkU3R5bGUubW96V3JpdGluZ01vZGUgfHwgaHRtbEJvZHlDb21wdXRlZFN0eWxlLm1zV3JpdGluZ01vZGUgfHwgaHRtbEJvZHlDb21wdXRlZFN0eWxlLm9Xcml0aW5nTW9kZSB8fCBodG1sQm9keUNvbXB1dGVkU3R5bGUuZXB1YldyaXRpbmdNb2RlIHx8IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS53cml0aW5nTW9kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHdyaXRpbmdNb2RlKSB7XG4gICAgICAgIF9odG1sQm9keUlzTFRSV3JpdGluZ01vZGUgPSB3cml0aW5nTW9kZS5pbmRleE9mKFwiLWxyXCIpID49IDA7IC8vIHx8IHdyaXRpbmdNb2RlLmluZGV4T2YoXCJob3Jpem9udGFsLVwiKSA+PSAwOyB3ZSBuZWVkIGV4cGxpY2l0IVxuXG4gICAgICAgIGlmICh3cml0aW5nTW9kZS5pbmRleE9mKFwidmVydGljYWxcIikgPj0gMCB8fCB3cml0aW5nTW9kZS5pbmRleE9mKFwidGItXCIpID49IDAgfHwgd3JpdGluZ01vZGUuaW5kZXhPZihcImJ0LVwiKSA+PSAwKSB7XG4gICAgICAgICAgX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfaHRtbEJvZHlJc0xUUkRpcmVjdGlvbikge1xuICAgICAgaWYgKF8kaHRtbEJvZHlbMF0uZ2V0QXR0cmlidXRlKFwiZGlyXCIpID09PSBcInJ0bFwiIHx8IF8kZXB1Ykh0bWxbMF0uZ2V0QXR0cmlidXRlKFwiZGlyXCIpID09PSBcInJ0bFwiKSB7XG4gICAgICAgIF9odG1sQm9keUlzTFRSRGlyZWN0aW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU29tZSBFUFVCcyBtYXkgbm90IGhhdmUgZXhwbGljaXQgUlRMIGNvbnRlbnQgZGlyZWN0aW9uICh2aWEgQ1NTIFwiZGlyZWN0aW9uXCIgcHJvcGVydHkgb3IgQGRpciBhdHRyaWJ1dGUpIGRlc3BpdGUgaGF2aW5nIGEgUlRMIHBhZ2UgcHJvZ3Jlc3Npb24gZGlyZWN0aW9uLiBSZWFkaXVtIGNvbnNlcXVlbnRseSB0d2Vha3MgdGhlIEhUTUwgaW4gb3JkZXIgdG8gcmVzdG9yZSB0aGUgY29ycmVjdCBibG9jayBmbG93IGluIHRoZSBicm93c2VyIHJlbmRlcmVyLCByZXN1bHRpbmcgaW4gdGhlIGFwcHJvcHJpYXRlIENTUyBjb2x1bW5pc2F0aW9uICh3aGljaCBpcyB1c2VkIHRvIGVtdWxhdGUgcGFnaW5hdGlvbikuXG4gICAgaWYgKCFfc3BpbmUuaXNMZWZ0VG9SaWdodCgpICYmIF9odG1sQm9keUlzTFRSRGlyZWN0aW9uICYmICFfaHRtbEJvZHlJc1ZlcnRpY2FsV3JpdGluZ01vZGUpIHtcbiAgICAgIF8kaHRtbEJvZHlbMF0uc2V0QXR0cmlidXRlKFwiZGlyXCIsIFwicnRsXCIpO1xuICAgICAgX2h0bWxCb2R5SXNMVFJEaXJlY3Rpb24gPSBmYWxzZTtcbiAgICAgIF9odG1sQm9keUlzTFRSV3JpdGluZ01vZGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBfcGFnaW5hdGlvbkluZm8uaXNWZXJ0aWNhbFdyaXRpbmdNb2RlID0gX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlO1xuXG4gICAgaGlkZUJvb2soKTtcbiAgICBfJGlmcmFtZS5jc3MoXCJvcGFjaXR5XCIsIFwiMVwiKTtcblxuICAgIHVwZGF0ZVZpZXdwb3J0U2l6ZSgpO1xuICAgIF8kZXB1Ykh0bWwuY3NzKFwiaGVpZ2h0XCIsIF9sYXN0Vmlld1BvcnRTaXplLmhlaWdodCArIFwicHhcIik7XG5cbiAgICBfJGVwdWJIdG1sLmNzcyhcInBvc2l0aW9uXCIsIFwicmVsYXRpdmVcIik7XG4gICAgXyRlcHViSHRtbC5jc3MoXCJtYXJnaW5cIiwgXCIwXCIpO1xuICAgIF8kZXB1Ykh0bWwuY3NzKFwicGFkZGluZ1wiLCBcIjBcIik7XG5cbiAgICBfJGVwdWJIdG1sLmNzcyhcImNvbHVtbi1heGlzXCIsIChfaHRtbEJvZHlJc1ZlcnRpY2FsV3JpdGluZ01vZGUgPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIikpO1xuXG4gICAgLy9cbiAgICAvLyAvLy8vLy8vLy9cbiAgICAvLyAvL0NvbHVtbnMgRGVidWdnaW5nXG4gICAgLy9cbiAgICAvLyAgICAgXyRlcHViSHRtbC5jc3MoXCJjb2x1bW4tcnVsZS1jb2xvclwiLCBcInJlZFwiKTtcbiAgICAvLyAgICAgXyRlcHViSHRtbC5jc3MoXCJjb2x1bW4tcnVsZS1zdHlsZVwiLCBcImRhc2hlZFwiKTtcbiAgICAvLyAgICAgXyRlcHViSHRtbC5jc3MoXCJjb2x1bW4tcnVsZS13aWR0aFwiLCBcIjFweFwiKTtcbiAgICAvLyBfJGVwdWJIdG1sLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgJyNiMGM0ZGUnKTtcbiAgICAvL1xuICAgIC8vIC8vLy9cblxuICAgIHNlbGYuYXBwbHlCb29rU3R5bGVzKCk7XG4gICAgcmVzaXplSW1hZ2VzKCk7XG5cbiAgICB1cGRhdGVIdG1sRm9udFNpemUoKTtcbiAgICB1cGRhdGVDb2x1bW5HYXAoKTtcblxuXG4gICAgc2VsZi5hcHBseVN0eWxlcygpO1xuICB9XG5cbiAgdGhpcy5hcHBseVN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgc2V0U3R5bGVzKF91c2VyU3R5bGVzLmdldFN0eWxlcygpLCBfJGVsLnBhcmVudCgpKTtcblxuICAgIC8vYmVjYXVzZSBsZWZ0LCB0b3AsIGJvdHRvbSwgcmlnaHQgc2V0dGluZyBpZ25vcmVzIHBhZGRpbmcgb2YgcGFyZW50IGNvbnRhaW5lclxuICAgIC8vd2UgaGF2ZSB0byB0YWtlIGl0IHRvIGFjY291bnQgbWFudWFsbHlcbiAgICB2YXIgZWxlbWVudE1hcmdpbnMgPSBNYXJnaW5zLmZyb21FbGVtZW50KF8kZWwpO1xuICAgIHNldEZyYW1lU2l6ZXNUb1JlY3RhbmdsZShlbGVtZW50TWFyZ2lucy5wYWRkaW5nKTtcblxuXG4gICAgdXBkYXRlVmlld3BvcnRTaXplKCk7XG4gICAgdXBkYXRlUGFnaW5hdGlvbigpO1xuICB9O1xuXG4gIHRoaXMuYXBwbHlCb29rU3R5bGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoXyRlcHViSHRtbCkge1xuICAgICAgc2V0U3R5bGVzKF9ib29rU3R5bGVzLmdldFN0eWxlcygpLCBfJGVwdWJIdG1sKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gb3BlbkRlZmVycmVkRWxlbWVudCgpIHtcblxuICAgIGlmICghX2RlZmVycmVkUGFnZVJlcXVlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVmZXJyZWREYXRhID0gX2RlZmVycmVkUGFnZVJlcXVlc3Q7XG4gICAgX2RlZmVycmVkUGFnZVJlcXVlc3QgPSB1bmRlZmluZWQ7XG4gICAgc2VsZi5vcGVuUGFnZShkZWZlcnJlZERhdGEpO1xuXG4gIH1cblxuICB0aGlzLm9wZW5QYWdlID0gZnVuY3Rpb24ocGFnZVJlcXVlc3QpIHtcblxuICAgIGlmIChfaXNXYWl0aW5nRnJhbWVSZW5kZXIpIHtcbiAgICAgIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0ID0gcGFnZVJlcXVlc3Q7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gaWYgbm8gc3BpbmUgaXRlbSBzcGVjaWZpZWQgd2UgYXJlIHRhbGtpbmcgYWJvdXQgY3VycmVudCBzcGluZSBpdGVtXG4gICAgaWYgKHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSAmJiBwYWdlUmVxdWVzdC5zcGluZUl0ZW0gIT0gX2N1cnJlbnRTcGluZUl0ZW0pIHtcbiAgICAgIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0ID0gcGFnZVJlcXVlc3Q7XG4gICAgICBsb2FkU3BpbmVJdGVtKHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhZ2VJbmRleCA9IHVuZGVmaW5lZDtcblxuXG4gICAgaWYgKHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbVBhZ2VJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYWdlSW5kZXggPSBwYWdlUmVxdWVzdC5zcGluZUl0ZW1QYWdlSW5kZXg7XG4gICAgfSBlbHNlIGlmIChwYWdlUmVxdWVzdC5lbGVtZW50SWQpIHtcbiAgICAgIHBhZ2VJbmRleCA9IF9uYXZpZ2F0aW9uTG9naWMuZ2V0UGFnZUZvckVsZW1lbnRJZChwYWdlUmVxdWVzdC5lbGVtZW50SWQpO1xuICAgIH0gZWxzZSBpZiAocGFnZVJlcXVlc3QuZWxlbWVudENmaSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcGFnZUluZGV4ID0gX25hdmlnYXRpb25Mb2dpYy5nZXRQYWdlRm9yRWxlbWVudENmaShwYWdlUmVxdWVzdC5lbGVtZW50Q2ZpLCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHBhZ2VJbmRleCA9IDA7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlUmVxdWVzdC5maXJzdFBhZ2UpIHtcbiAgICAgIHBhZ2VJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChwYWdlUmVxdWVzdC5sYXN0UGFnZSkge1xuICAgICAgcGFnZUluZGV4ID0gX3BhZ2luYXRpb25JbmZvLmNvbHVtbkNvdW50IC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIk5vIGNyaXRlcmlhIGluIHBhZ2VSZXF1ZXN0XCIpO1xuICAgICAgcGFnZUluZGV4ID0gMDtcbiAgICB9XG5cbiAgICBpZiAocGFnZUluZGV4ID49IDAgJiYgcGFnZUluZGV4IDwgX3BhZ2luYXRpb25JbmZvLmNvbHVtbkNvdW50KSB7XG4gICAgICBfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4ID0gTWF0aC5mbG9vcihwYWdlSW5kZXggLyBfcGFnaW5hdGlvbkluZm8udmlzaWJsZUNvbHVtbkNvdW50KTtcbiAgICAgIG9uUGFnaW5hdGlvbkNoYW5nZWQocGFnZVJlcXVlc3QuaW5pdGlhdG9yLCBwYWdlUmVxdWVzdC5zcGluZUl0ZW0sIHBhZ2VSZXF1ZXN0LmVsZW1lbnRJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdJbGxlZ2FsIHBhZ2VJbmRleCB2YWx1ZTogJywgcGFnZUluZGV4LCAnY29sdW1uIGNvdW50IGlzICcsIF9wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlZHJhdygpIHtcblxuICAgIHZhciBvZmZzZXRWYWwgPSAtX3BhZ2luYXRpb25JbmZvLnBhZ2VPZmZzZXQgKyBcInB4XCI7XG5cbiAgICBpZiAoX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlKSB7XG4gICAgICBfJGVwdWJIdG1sLmNzcyhcInRvcFwiLCBvZmZzZXRWYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbHRyID0gX2h0bWxCb2R5SXNMVFJEaXJlY3Rpb24gfHwgX2h0bWxCb2R5SXNMVFJXcml0aW5nTW9kZTtcblxuICAgICAgXyRlcHViSHRtbC5jc3MoXCJsZWZ0XCIsIGx0ciA/IG9mZnNldFZhbCA6IFwiXCIpO1xuICAgICAgXyRlcHViSHRtbC5jc3MoXCJyaWdodFwiLCAhbHRyID8gb2Zmc2V0VmFsIDogXCJcIik7XG4gICAgfVxuXG4gICAgc2hvd0Jvb2soKTsgLy8gYXMgaXQncyBubyBsb25nZXIgaGlkZGVuIGJ5IHNoaWZ0aW5nIHRoZSBwb3NpdGlvblxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVmlld3BvcnRTaXplKCkge1xuXG4gICAgdmFyIG5ld1dpZHRoID0gXyRjb250ZW50RnJhbWUud2lkdGgoKTtcbiAgICB2YXIgbmV3SGVpZ2h0ID0gXyRjb250ZW50RnJhbWUuaGVpZ2h0KCk7XG5cbiAgICBpZiAoX2xhc3RWaWV3UG9ydFNpemUud2lkdGggIT09IG5ld1dpZHRoIHx8IF9sYXN0Vmlld1BvcnRTaXplLmhlaWdodCAhPT0gbmV3SGVpZ2h0KSB7XG5cbiAgICAgIF9sYXN0Vmlld1BvcnRTaXplLndpZHRoID0gbmV3V2lkdGg7XG4gICAgICBfbGFzdFZpZXdQb3J0U2l6ZS5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBvblBhZ2luYXRpb25DaGFuZ2VkKGluaXRpYXRvciwgcGFnaW5hdGlvblJlcXVlc3Rfc3BpbmVJdGVtLCBwYWdpbmF0aW9uUmVxdWVzdF9lbGVtZW50SWQpIHtcblxuICAgIF9wYWdpbmF0aW9uSW5mby5wYWdlT2Zmc2V0ID0gKF9wYWdpbmF0aW9uSW5mby5jb2x1bW5XaWR0aCArIF9wYWdpbmF0aW9uSW5mby5jb2x1bW5HYXApICogX3BhZ2luYXRpb25JbmZvLnZpc2libGVDb2x1bW5Db3VudCAqIF9wYWdpbmF0aW9uSW5mby5jdXJyZW50U3ByZWFkSW5kZXg7XG5cbiAgICByZWRyYXcoKTtcbiAgICBzZWxmLnRyaWdnZXIoSW50ZXJuYWxFdmVudHMuQ1VSUkVOVF9WSUVXX1BBR0lOQVRJT05fQ0hBTkdFRCwge1xuICAgICAgcGFnaW5hdGlvbkluZm86IHNlbGYuZ2V0UGFnaW5hdGlvbkluZm8oKSxcbiAgICAgIGluaXRpYXRvcjogaW5pdGlhdG9yLFxuICAgICAgc3BpbmVJdGVtOiBwYWdpbmF0aW9uUmVxdWVzdF9zcGluZUl0ZW0sXG4gICAgICBlbGVtZW50SWQ6IHBhZ2luYXRpb25SZXF1ZXN0X2VsZW1lbnRJZFxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5vcGVuUGFnZVByZXYgPSBmdW5jdGlvbihpbml0aWF0b3IpIHtcblxuICAgIGlmICghX2N1cnJlbnRTcGluZUl0ZW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoX3BhZ2luYXRpb25JbmZvLmN1cnJlbnRTcHJlYWRJbmRleCA+IDApIHtcbiAgICAgIF9wYWdpbmF0aW9uSW5mby5jdXJyZW50U3ByZWFkSW5kZXgtLTtcbiAgICAgIG9uUGFnaW5hdGlvbkNoYW5nZWQoaW5pdGlhdG9yKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgcHJldlNwaW5lSXRlbSA9IF9zcGluZS5wcmV2SXRlbShfY3VycmVudFNwaW5lSXRlbSwgdHJ1ZSk7XG4gICAgICBpZiAocHJldlNwaW5lSXRlbSkge1xuXG4gICAgICAgIHZhciBwYWdlUmVxdWVzdCA9IG5ldyBQYWdlT3BlblJlcXVlc3QocHJldlNwaW5lSXRlbSwgaW5pdGlhdG9yKTtcbiAgICAgICAgcGFnZVJlcXVlc3Quc2V0TGFzdFBhZ2UoKTtcbiAgICAgICAgc2VsZi5vcGVuUGFnZShwYWdlUmVxdWVzdCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub3BlblBhZ2VOZXh0ID0gZnVuY3Rpb24oaW5pdGlhdG9yKSB7XG5cbiAgICBpZiAoIV9jdXJyZW50U3BpbmVJdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF9wYWdpbmF0aW9uSW5mby5jdXJyZW50U3ByZWFkSW5kZXggPCBfcGFnaW5hdGlvbkluZm8uc3ByZWFkQ291bnQgLSAxKSB7XG4gICAgICBfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4Kys7XG4gICAgICBvblBhZ2luYXRpb25DaGFuZ2VkKGluaXRpYXRvcik7XG4gICAgfSBlbHNlIHtcblxuICAgICAgdmFyIG5leHRTcGluZUl0ZW0gPSBfc3BpbmUubmV4dEl0ZW0oX2N1cnJlbnRTcGluZUl0ZW0sIHRydWUpO1xuICAgICAgaWYgKG5leHRTcGluZUl0ZW0pIHtcblxuICAgICAgICB2YXIgcGFnZVJlcXVlc3QgPSBuZXcgUGFnZU9wZW5SZXF1ZXN0KG5leHRTcGluZUl0ZW0sIGluaXRpYXRvcik7XG4gICAgICAgIHBhZ2VSZXF1ZXN0LnNldEZpcnN0UGFnZSgpO1xuICAgICAgICBzZWxmLm9wZW5QYWdlKHBhZ2VSZXF1ZXN0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cblxuICBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkge1xuXG4gICAgLy8gQXQgMTAwJSBmb250LXNpemUgPSAxNnB4IChvbiBIVE1MLCBub3QgYm9keSBvciBkZXNjZW5kYW50IG1hcmt1cCEpXG4gICAgdmFyIE1BWFcgPSA1NTA7IC8vVE9ETyB1c2VyL3ZlbmRvci1jb25maWd1cmFibGU/XG4gICAgdmFyIE1JTlcgPSA0MDA7XG5cbiAgICB2YXIgaXNEb3VibGVQYWdlU3ludGhldGljU3ByZWFkID0gZGVkdWNlU3ludGhldGljU3ByZWFkKF8kdmlld3BvcnQsIF9jdXJyZW50U3BpbmVJdGVtLCBfdmlld1NldHRpbmdzKTtcblxuICAgIHZhciBmb3JjZWQgPSAoaXNEb3VibGVQYWdlU3ludGhldGljU3ByZWFkID09PSBmYWxzZSkgfHwgKGlzRG91YmxlUGFnZVN5bnRoZXRpY1NwcmVhZCA9PT0gdHJ1ZSk7XG4gICAgLy8gZXhjbHVkZXMgMCBhbmQgMSBmYWxzeS90cnV0aHkgdmFsdWVzIHdoaWNoIGRlbm90ZSBub24tZm9yY2VkIHJlc3VsdFxuXG4gICAgLy8gY29uc29sZS5kZWJ1ZyhcImlzRG91YmxlUGFnZVN5bnRoZXRpY1NwcmVhZDogXCIgKyBpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQpO1xuICAgIC8vIGNvbnNvbGUuZGVidWcoXCJmb3JjZWQ6IFwiICsgZm9yY2VkKTtcbiAgICAvL1xuICAgIGlmIChpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQgPT09IDApIHtcbiAgICAgIGlzRG91YmxlUGFnZVN5bnRoZXRpY1NwcmVhZCA9IDE7IC8vIHRyeSBkb3VibGUgcGFnZSwgd2lsbCBzaHJpbmsgaWYgZG9lc24ndCBmaXRcbiAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJUUllJTkcgU1BSRUFEIElOU1RFQUQgT0YgU0lOR0xFLi4uXCIpO1xuICAgIH1cblxuICAgIF9wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQgPSBpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQgPyAyIDogMTtcblxuICAgIGlmIChfaHRtbEJvZHlJc1ZlcnRpY2FsV3JpdGluZ01vZGUpIHtcbiAgICAgIE1BWFcgKj0gMjtcbiAgICAgIGlzRG91YmxlUGFnZVN5bnRoZXRpY1NwcmVhZCA9IGZhbHNlO1xuICAgICAgZm9yY2VkID0gdHJ1ZTtcbiAgICAgIF9wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQgPSAxO1xuICAgICAgLy8gY29uc29sZS5kZWJ1ZyhcIlZlcnRpY2FsIFdyaXRpbmcgTW9kZSA9PiBzaW5nbGUgQ1NTIGNvbHVtbiwgYnV0IGJlaGF2ZXMgYXMgaWYgdHdvLXBhZ2Ugc3ByZWFkXCIpO1xuICAgIH1cblxuICAgIGlmICghXyRlcHViSHRtbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGhpZGVCb29rKCk7IC8vIHNoaWZ0Qm9va09mU2NyZWVuKCk7XG5cbiAgICB2YXIgYm9yZGVyTGVmdCA9IHBhcnNlSW50KF8kdmlld3BvcnQuY3NzKFwiYm9yZGVyLWxlZnQtd2lkdGhcIikpO1xuICAgIHZhciBib3JkZXJSaWdodCA9IHBhcnNlSW50KF8kdmlld3BvcnQuY3NzKFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCIpKTtcbiAgICB2YXIgYWRqdXN0ZWRHYXBMZWZ0ID0gX3BhZ2luYXRpb25JbmZvLmNvbHVtbkdhcCAvIDI7XG4gICAgYWRqdXN0ZWRHYXBMZWZ0ID0gTWF0aC5tYXgoMCwgYWRqdXN0ZWRHYXBMZWZ0IC0gYm9yZGVyTGVmdClcbiAgICB2YXIgYWRqdXN0ZWRHYXBSaWdodCA9IF9wYWdpbmF0aW9uSW5mby5jb2x1bW5HYXAgLyAyO1xuICAgIGFkanVzdGVkR2FwUmlnaHQgPSBNYXRoLm1heCgwLCBhZGp1c3RlZEdhcFJpZ2h0IC0gYm9yZGVyUmlnaHQpXG5cbiAgICB2YXIgZmlsbGVyID0gMDtcblxuICAgIC8vICAgICAgICAgdmFyIHdpbiA9IF8kaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldyB8fCBfJGlmcmFtZVswXS5jb250ZW50V2luZG93O1xuICAgIC8vICAgICAgICAgdmFyIGh0bWxCb2R5Q29tcHV0ZWRTdHlsZSA9IHdpbi5nZXRDb21wdXRlZFN0eWxlKF8kaHRtbEJvZHlbMF0sIG51bGwpO1xuICAgIC8vICAgICAgICAgaWYgKGh0bWxCb2R5Q29tcHV0ZWRTdHlsZSlcbiAgICAvLyAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICB2YXIgZm9udFNpemUgPSB1bmRlZmluZWQ7XG4gICAgLy8gICAgICAgICAgICAgaWYgKGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKVxuICAgIC8vICAgICAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgZm9udFNpemUgPSBodG1sQm9keUNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcImZvbnQtc2l6ZVwiKTtcbiAgICAvLyAgICAgICAgICAgICB9XG4gICAgLy8gICAgICAgICAgICAgZWxzZVxuICAgIC8vICAgICAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgZm9udFNpemUgPSBodG1sQm9keUNvbXB1dGVkU3R5bGUuZm9udFNpemU7XG4gICAgLy8gICAgICAgICAgICAgfVxuICAgIC8vIGNvbnNvbGUuZGVidWcoZm9udFNpemUpO1xuICAgIC8vICAgICAgICAgfVxuXG4gICAgaWYgKF92aWV3U2V0dGluZ3MuZm9udFNpemUpIHtcbiAgICAgIHZhciBmb250U2l6ZUFkanVzdCA9IChfdmlld1NldHRpbmdzLmZvbnRTaXplICogMC44KSAvIDEwMDtcbiAgICAgIE1BWFcgPSBNYXRoLmZsb29yKE1BWFcgKiBmb250U2l6ZUFkanVzdCk7XG4gICAgICBNSU5XID0gTWF0aC5mbG9vcihNSU5XICogZm9udFNpemVBZGp1c3QpO1xuICAgIH1cblxuICAgIHZhciBhdmFpbGFibGVXaWR0aCA9IF8kdmlld3BvcnQud2lkdGgoKTtcbiAgICB2YXIgdGV4dFdpZHRoID0gYXZhaWxhYmxlV2lkdGggLSBib3JkZXJMZWZ0IC0gYm9yZGVyUmlnaHQgLSBhZGp1c3RlZEdhcExlZnQgLSBhZGp1c3RlZEdhcFJpZ2h0O1xuICAgIGlmIChpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQpIHtcbiAgICAgIHRleHRXaWR0aCA9ICh0ZXh0V2lkdGggLSBfcGFnaW5hdGlvbkluZm8uY29sdW1uR2FwKSAqIDAuNTtcbiAgICB9XG5cbiAgICBpZiAodGV4dFdpZHRoID4gTUFYVykge1xuICAgICAgLy8gY29uc29sZS5kZWJ1ZyhcIkxJTUlUSU5HIFdJRFRIXCIpO1xuICAgICAgZmlsbGVyID0gTWF0aC5mbG9vcigodGV4dFdpZHRoIC0gTUFYVykgKiAoaXNEb3VibGVQYWdlU3ludGhldGljU3ByZWFkID8gMSA6IDAuNSkpO1xuICAgIH0gZWxzZSBpZiAoIWZvcmNlZCAmJiB0ZXh0V2lkdGggPCBNSU5XICYmIGlzRG91YmxlUGFnZVN5bnRoZXRpY1NwcmVhZCkge1xuICAgICAgLy9jb25zb2xlLmRlYnVnKFwiUkVEVUNJTkcgU1BSRUFEIFRPIFNJTkdMRVwiKTtcbiAgICAgIGlzRG91YmxlUGFnZVN5bnRoZXRpY1NwcmVhZCA9IGZhbHNlO1xuICAgICAgX3BhZ2luYXRpb25JbmZvLnZpc2libGVDb2x1bW5Db3VudCA9IDE7XG5cbiAgICAgIHRleHRXaWR0aCA9IGF2YWlsYWJsZVdpZHRoIC0gYm9yZGVyTGVmdCAtIGJvcmRlclJpZ2h0IC0gYWRqdXN0ZWRHYXBMZWZ0IC0gYWRqdXN0ZWRHYXBSaWdodDtcbiAgICAgIGlmICh0ZXh0V2lkdGggPiBNQVhXKSB7XG4gICAgICAgIGZpbGxlciA9IE1hdGguZmxvb3IoKHRleHRXaWR0aCAtIE1BWFcpICogMC41KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfJGVsLmNzcyh7XG4gICAgICBcImxlZnRcIjogKGZpbGxlciArIGFkanVzdGVkR2FwTGVmdCArIFwicHhcIiksXG4gICAgICBcInJpZ2h0XCI6IChmaWxsZXIgKyBhZGp1c3RlZEdhcFJpZ2h0ICsgXCJweFwiKVxuICAgIH0pO1xuICAgIHVwZGF0ZVZpZXdwb3J0U2l6ZSgpOyAvL18kY29udGVudEZyYW1lID09PiBfbGFzdFZpZXdQb3J0U2l6ZVxuXG5cbiAgICBfJGlmcmFtZS5jc3MoXCJ3aWR0aFwiLCBfbGFzdFZpZXdQb3J0U2l6ZS53aWR0aCArIFwicHhcIik7XG4gICAgXyRpZnJhbWUuY3NzKFwiaGVpZ2h0XCIsIF9sYXN0Vmlld1BvcnRTaXplLmhlaWdodCArIFwicHhcIik7XG5cbiAgICBfJGVwdWJIdG1sLmNzcyhcImhlaWdodFwiLCBfbGFzdFZpZXdQb3J0U2l6ZS5oZWlnaHQgKyBcInB4XCIpO1xuXG4gICAgLy8gYmVsb3cgbWluLSBtYXgtIGFyZSByZXF1aXJlZCBpbiB2ZXJ0aWNhbCB3cml0aW5nIG1vZGUgKGhlaWdodCBpcyBub3QgZW5vdWdoLCBpbiBzb21lIGNhc2VzLi4ud2VpcmQhKVxuICAgIF8kZXB1Ykh0bWwuY3NzKFwibWluLWhlaWdodFwiLCBfbGFzdFZpZXdQb3J0U2l6ZS5oZWlnaHQgKyBcInB4XCIpO1xuICAgIF8kZXB1Ykh0bWwuY3NzKFwibWF4LWhlaWdodFwiLCBfbGFzdFZpZXdQb3J0U2l6ZS5oZWlnaHQgKyBcInB4XCIpO1xuXG4gICAgLy9ub3JtYWxpc2Ugc3BhY2luZyB0byBhdm9pZCBpbnRlcmZlcmVuY2Ugd2l0aCBjb2x1bW4taXNhdGlvblxuICAgIF8kZXB1Ykh0bWwuY3NzKCdtYXJnaW4nLCAwKTtcbiAgICBfJGVwdWJIdG1sLmNzcygncGFkZGluZycsIDApO1xuICAgIF8kZXB1Ykh0bWwuY3NzKCdib3JkZXInLCAwKTtcbiAgICBfJGh0bWxCb2R5LmNzcygnbWFyZ2luJywgMCk7XG4gICAgXyRodG1sQm9keS5jc3MoJ3BhZGRpbmcnLCAwKTtcblxuICAgIHZhciBzcGFjaW5nID0gMDtcbiAgICB0cnkge1xuICAgICAgc3BhY2luZyA9IHBhcnNlSW50KF8kaHRtbEJvZHkuY3NzKCdwYWRkaW5nLXRvcCcpKSArIHBhcnNlSW50KF8kaHRtbEJvZHkuY3NzKCdib3JkZXItdG9wLXdpZHRoJykpICsgcGFyc2VJbnQoXyRodG1sQm9keS5jc3MoJ2JvcmRlci1ib3R0b20td2lkdGgnKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG5cbiAgICB9XG4gICAgLy8gTmVlZGVkIGZvciBGaXJlZm94LCBvdGhlcndpc2UgY29udGVudCBzaHJpbmtzIHZlcnRpY2FsbHksIHJlc3VsdGluZyBpbiBzY3JvbGxXaWR0aCBhY2NvbW9kYXRpbmcgbW9yZSBjb2x1bW5zIHRoYW4gbmVjZXNzYXJ5XG4gICAgLy9fJGh0bWxCb2R5LmNzcyhcIm1pbi1oZWlnaHRcIiwgX2xhc3RWaWV3UG9ydFNpemUuaGVpZ2h0LXNwYWNpbmctOSArIFwicHhcIik7XG4gICAgXyRodG1sQm9keS5jc3MoXCJtaW4taGVpZ2h0XCIsIFwiNTAlXCIpO1xuICAgIF8kaHRtbEJvZHkuY3NzKFwibWF4LWhlaWdodFwiLCBfbGFzdFZpZXdQb3J0U2l6ZS5oZWlnaHQgLSBzcGFjaW5nICsgXCJweFwiKTtcblxuICAgIF9wYWdpbmF0aW9uSW5mby5yaWdodFRvTGVmdCA9IF9zcGluZS5pc1JpZ2h0VG9MZWZ0KCk7XG5cbiAgICBfcGFnaW5hdGlvbkluZm8uY29sdW1uV2lkdGggPSBNYXRoLnJvdW5kKCgoX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlID8gX2xhc3RWaWV3UG9ydFNpemUuaGVpZ2h0IDogX2xhc3RWaWV3UG9ydFNpemUud2lkdGgpIC0gX3BhZ2luYXRpb25JbmZvLmNvbHVtbkdhcCAqIChfcGFnaW5hdGlvbkluZm8udmlzaWJsZUNvbHVtbkNvdW50IC0gMSkpIC8gX3BhZ2luYXRpb25JbmZvLnZpc2libGVDb2x1bW5Db3VudCk7XG5cbiAgICBfJGVwdWJIdG1sLmNzcyhcIndpZHRoXCIsIChfaHRtbEJvZHlJc1ZlcnRpY2FsV3JpdGluZ01vZGUgPyBfbGFzdFZpZXdQb3J0U2l6ZS53aWR0aCA6IF9wYWdpbmF0aW9uSW5mby5jb2x1bW5XaWR0aCkgKyBcInB4XCIpO1xuXG4gICAgXyRlcHViSHRtbC5jc3MoXCJjb2x1bW4td2lkdGhcIiwgX3BhZ2luYXRpb25JbmZvLmNvbHVtbldpZHRoICsgXCJweFwiKTtcblxuICAgIF8kZXB1Ykh0bWwuY3NzKHtcbiAgICAgIGxlZnQ6IFwiMFwiLFxuICAgICAgcmlnaHQ6IFwiMFwiLFxuICAgICAgdG9wOiBcIjBcIlxuICAgIH0pO1xuXG4gICAgdHJpZ2dlckxheW91dChfJGlmcmFtZSk7XG5cbiAgICBfcGFnaW5hdGlvbkluZm8uY29sdW1uQ291bnQgPSAoKF9odG1sQm9keUlzVmVydGljYWxXcml0aW5nTW9kZSA/IF8kZXB1Ykh0bWxbMF0uc2Nyb2xsSGVpZ2h0IDogXyRlcHViSHRtbFswXS5zY3JvbGxXaWR0aCkgKyBfcGFnaW5hdGlvbkluZm8uY29sdW1uR2FwKSAvIChfcGFnaW5hdGlvbkluZm8uY29sdW1uV2lkdGggKyBfcGFnaW5hdGlvbkluZm8uY29sdW1uR2FwKTtcbiAgICBfcGFnaW5hdGlvbkluZm8uY29sdW1uQ291bnQgPSBNYXRoLnJvdW5kKF9wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudCk7XG5cbiAgICB2YXIgdG90YWxHYXBzID0gKF9wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudCAtIDEpICogX3BhZ2luYXRpb25JbmZvLmNvbHVtbkdhcDtcbiAgICB2YXIgY29sV2lkdGhDaGVjayA9ICgoX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlID8gXyRlcHViSHRtbFswXS5zY3JvbGxIZWlnaHQgOiBfJGVwdWJIdG1sWzBdLnNjcm9sbFdpZHRoKSAtIHRvdGFsR2FwcykgLyBfcGFnaW5hdGlvbkluZm8uY29sdW1uQ291bnQ7XG4gICAgY29sV2lkdGhDaGVjayA9IE1hdGgucm91bmQoY29sV2lkdGhDaGVjayk7XG5cbiAgICBpZiAoY29sV2lkdGhDaGVjayA+IF9wYWdpbmF0aW9uSW5mby5jb2x1bW5XaWR0aCkge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIkFESlVTVCBDT0xVTU5cIik7XG4gICAgICBjb25zb2xlLmxvZyhfcGFnaW5hdGlvbkluZm8uY29sdW1uV2lkdGgpO1xuICAgICAgY29uc29sZS5sb2coY29sV2lkdGhDaGVjayk7XG5cbiAgICAgIF9wYWdpbmF0aW9uSW5mby5jb2x1bW5XaWR0aCA9IGNvbFdpZHRoQ2hlY2s7XG4gICAgfVxuXG4gICAgX3BhZ2luYXRpb25JbmZvLnNwcmVhZENvdW50ID0gTWF0aC5jZWlsKF9wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudCAvIF9wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQpO1xuXG4gICAgaWYgKF9wYWdpbmF0aW9uSW5mby5jdXJyZW50U3ByZWFkSW5kZXggPj0gX3BhZ2luYXRpb25JbmZvLnNwcmVhZENvdW50KSB7XG4gICAgICBfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4ID0gX3BhZ2luYXRpb25JbmZvLnNwcmVhZENvdW50IC0gMTtcbiAgICB9XG5cbiAgICBpZiAoX2RlZmVycmVkUGFnZVJlcXVlc3QpIHtcblxuICAgICAgLy9pZiB0aGVyZSBpcyBhIHJlcXVlc3QgZm9yIHNwZWNpZmljIHBhZ2Ugd2UgZ2V0IGhlcmVcbiAgICAgIG9wZW5EZWZlcnJlZEVsZW1lbnQoKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICAvL3dlIGdldCBoZXJlIG9uIHJlc2l6aW5nIHRoZSB2aWV3cG9ydFxuXG4gICAgICBvblBhZ2luYXRpb25DaGFuZ2VkKHNlbGYpOyAvLyA9PiByZWRyYXcoKSA9PiBzaG93Qm9vaygpLCBzbyB0aGUgdHJpY2sgYmVsb3cgaXMgbm90IG5lZWRlZFxuXG4gICAgICAvLyAvL1dlIGRvIHRoaXMgdG8gZm9yY2UgcmUtcmVuZGVyaW5nIG9mIHRoZSBkb2N1bWVudCBpbiB0aGUgaWZyYW1lLlxuICAgICAgLy8gLy9UaGVyZSBpcyBhIGJ1ZyBpbiBXZWJWaWV3IGNvbnRyb2wgd2l0aCByaWdodCB0byBsZWZ0IGNvbHVtbnMgbGF5b3V0IC0gYWZ0ZXIgcmVzaXppbmcgdGhlIHdpbmRvdyBodG1sIGRvY3VtZW50XG4gICAgICAvLyAvL2lzIHNoaWZ0ZWQgaW4gc2lkZSB0aGUgY29udGFpbmluZyBkaXYuIEhpZGluZyBhbmQgc2hvd2luZyB0aGUgaHRtbCBlbGVtZW50IHB1dHMgZG9jdW1lbnQgaW4gcGxhY2UuXG4gICAgICAvLyBfJGVwdWJIdG1sLmhpZGUoKTtcbiAgICAgIC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAvLyAgICAgXyRlcHViSHRtbC5zaG93KCk7XG4gICAgICAvLyAgICAgb25QYWdpbmF0aW9uQ2hhbmdlZChzZWxmKTsgLy8gPT4gcmVkcmF3KCkgPT4gc2hvd0Jvb2soKVxuICAgICAgLy8gfSwgNTApO1xuXG4gICAgfVxuICB9XG5cbiAgLy8gICAgZnVuY3Rpb24gc2hpZnRCb29rT2ZTY3JlZW4oKSB7XG4gIC8vXG4gIC8vICAgICAgICBpZihfc3BpbmUuaXNMZWZ0VG9SaWdodCgpKSB7XG4gIC8vICAgICAgICAgICAgXyRlcHViSHRtbC5jc3MoXCJsZWZ0XCIsIChfbGFzdFZpZXdQb3J0U2l6ZS53aWR0aCArIDEwMDApICsgXCJweFwiKTtcbiAgLy8gICAgICAgIH1cbiAgLy8gICAgICAgIGVsc2Uge1xuICAvLyAgICAgICAgICAgIF8kZXB1Ykh0bWwuY3NzKFwicmlnaHRcIiwgKF9sYXN0Vmlld1BvcnRTaXplLndpZHRoICsgMTAwMCkgKyBcInB4XCIpO1xuICAvLyAgICAgICAgfVxuICAvLyAgICB9XG5cbiAgZnVuY3Rpb24gaGlkZUJvb2soKSB7XG4gICAgaWYgKF9jdXJyZW50T3BhY2l0eSAhPSAtMSkgcmV0dXJuOyAvLyBhbHJlYWR5IGhpZGRlblxuXG4gICAgX2N1cnJlbnRPcGFjaXR5ID0gXyRlcHViSHRtbC5jc3MoJ29wYWNpdHknKTtcbiAgICBfJGVwdWJIdG1sLmNzcygnb3BhY2l0eScsIFwiMFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3dCb29rKCkge1xuICAgIGlmIChfY3VycmVudE9wYWNpdHkgIT0gLTEpIHtcbiAgICAgIF8kZXB1Ykh0bWwuY3NzKCdvcGFjaXR5JywgX2N1cnJlbnRPcGFjaXR5KTtcbiAgICB9XG4gICAgX2N1cnJlbnRPcGFjaXR5ID0gLTE7XG4gIH1cblxuICB0aGlzLmdldEZpcnN0VmlzaWJsZUVsZW1lbnRDZmkgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBjb250ZW50T2Zmc2V0cyA9IGdldFZpc2libGVDb250ZW50T2Zmc2V0cygpO1xuICAgIHJldHVybiBfbmF2aWdhdGlvbkxvZ2ljLmdldEZpcnN0VmlzaWJsZUVsZW1lbnRDZmkoY29udGVudE9mZnNldHMpO1xuICB9O1xuXG4gIHRoaXMuZ2V0UGFnaW5hdGlvbkluZm8gPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBwYWdpbmF0aW9uSW5mbyA9IG5ldyBDdXJyZW50UGFnZXNJbmZvKF9zcGluZSwgZmFsc2UpO1xuXG4gICAgaWYgKCFfY3VycmVudFNwaW5lSXRlbSkge1xuICAgICAgcmV0dXJuIHBhZ2luYXRpb25JbmZvO1xuICAgIH1cblxuICAgIHZhciBwYWdlSW5kZXhlcyA9IGdldE9wZW5QYWdlSW5kZXhlcygpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gcGFnZUluZGV4ZXMubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuXG4gICAgICBwYWdpbmF0aW9uSW5mby5hZGRPcGVuUGFnZShwYWdlSW5kZXhlc1tpXSwgX3BhZ2luYXRpb25JbmZvLmNvbHVtbkNvdW50LCBfY3VycmVudFNwaW5lSXRlbS5pZHJlZiwgX2N1cnJlbnRTcGluZUl0ZW0uaW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBwYWdpbmF0aW9uSW5mbztcblxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldE9wZW5QYWdlSW5kZXhlcygpIHtcblxuICAgIHZhciBpbmRleGVzID0gW107XG5cbiAgICB2YXIgY3VycmVudFBhZ2UgPSBfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4ICogX3BhZ2luYXRpb25JbmZvLnZpc2libGVDb2x1bW5Db3VudDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3BhZ2luYXRpb25JbmZvLnZpc2libGVDb2x1bW5Db3VudCAmJiAoY3VycmVudFBhZ2UgKyBpKSA8IF9wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudDsgaSsrKSB7XG5cbiAgICAgIGluZGV4ZXMucHVzaChjdXJyZW50UGFnZSArIGkpO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleGVzO1xuXG4gIH1cblxuICAvL3dlIG5lZWQgdGhpcyBzdHlsZXMgZm9yIGNzcyBjb2x1bW5pemVyIG5vdCB0byBjaG9wIGJpZyBpbWFnZXNcbiAgZnVuY3Rpb24gcmVzaXplSW1hZ2VzKCkge1xuXG4gICAgaWYgKCFfJGVwdWJIdG1sKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyICRlbGVtO1xuICAgIHZhciBoZWlnaHQ7XG4gICAgdmFyIHdpZHRoO1xuXG4gICAgJCgnaW1nLCBzdmcnLCBfJGVwdWJIdG1sKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAkZWxlbSA9ICQodGhpcyk7XG5cbiAgICAgIC8vIGlmIHdlIHNldCBtYXgtd2lkdGgvbWF4LWhlaWdodCB0byAxMDAlIGNvbHVtbml6aW5nIGVuZ2luZSBjaG9wcyBpbWFnZXMgZW1iZWRkZWQgaW4gdGhlIHRleHRcbiAgICAgIC8vIChidXQgbm90IGlmIHdlIHNldCBpdCB0byA5OS05OCUpIGdvIGZpZ3VyZS5cbiAgICAgIC8vIFRPRE86IENTUyBtaW4tdy9oIGlzIGNvbnRlbnQtYm94LCBub3QgYm9yZGVyLWJveCAoZG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgcGFkZGluZyArIGJvcmRlcik/ID0+IGltYWdlcyBtYXkgc3RpbGwgb3ZlcnJ1bj9cbiAgICAgICRlbGVtLmNzcygnbWF4LXdpZHRoJywgJzk4JScpO1xuICAgICAgJGVsZW0uY3NzKCdtYXgtaGVpZ2h0JywgJzk4JScpO1xuXG4gICAgICBpZiAoISRlbGVtLmNzcygnaGVpZ2h0JykpIHtcbiAgICAgICAgJGVsZW0uY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoISRlbGVtLmNzcygnd2lkdGgnKSkge1xuICAgICAgICAkZWxlbS5jc3MoJ3dpZHRoJywgJ2F1dG8nKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5ib29rbWFya0N1cnJlbnRQYWdlID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoIV9jdXJyZW50U3BpbmVJdGVtKSB7XG5cbiAgICAgIHJldHVybiBuZXcgQm9va21hcmtEYXRhKFwiXCIsIFwiXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQm9va21hcmtEYXRhKF9jdXJyZW50U3BpbmVJdGVtLmlkcmVmLCBzZWxmLmdldEZpcnN0VmlzaWJsZUVsZW1lbnRDZmkoKSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0VmlzaWJsZUNvbnRlbnRPZmZzZXRzKCkge1xuICAgIC8vVE9ETzogX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlID8gKF9sYXN0Vmlld1BvcnRTaXplLmhlaWdodCAqIF9wYWdpbmF0aW9uSW5mby5jdXJyZW50U3ByZWFkSW5kZXgpXG4gICAgLy8gTk9UIHVzZWQgd2l0aCBvcHRpb25zLnJlY3RhbmdsZUJhc2VkIGFueXdheSAoc2VlIENmaU5hdmlnYXRpb25Mb2dpYyBjb25zdHJ1Y3RvciBjYWxsLCBoZXJlIGluIHRoaXMgcmVmbG93IGVuZ2luZSBjbGFzcylcbiAgICB2YXIgY29sdW1uc0xlZnRPZlZpZXdwb3J0ID0gTWF0aC5yb3VuZChfcGFnaW5hdGlvbkluZm8ucGFnZU9mZnNldCAvIChfcGFnaW5hdGlvbkluZm8uY29sdW1uV2lkdGggKyBfcGFnaW5hdGlvbkluZm8uY29sdW1uR2FwKSk7XG5cbiAgICB2YXIgdG9wT2Zmc2V0ID0gY29sdW1uc0xlZnRPZlZpZXdwb3J0ICogXyRjb250ZW50RnJhbWUuaGVpZ2h0KCk7XG4gICAgdmFyIGJvdHRvbU9mZnNldCA9IHRvcE9mZnNldCArIF9wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQgKiBfJGNvbnRlbnRGcmFtZS5oZWlnaHQoKTtcblxuICAgIHJldHVybiB7XG4gICAgICB0b3A6IHRvcE9mZnNldCxcbiAgICAgIGJvdHRvbTogYm90dG9tT2Zmc2V0XG4gICAgfTtcbiAgfVxuXG4gIHRoaXMuZ2V0TG9hZGVkU3BpbmVJdGVtcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBbX2N1cnJlbnRTcGluZUl0ZW1dO1xuICB9O1xuXG4gIHRoaXMuZ2V0RWxlbWVudEJ5Q2ZpID0gZnVuY3Rpb24oc3BpbmVJdGVtLCBjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgaWYgKHNwaW5lSXRlbSAhPSBfY3VycmVudFNwaW5lSXRlbSkge1xuICAgICAgY29uc29sZS5lcnJvcihcInNwaW5lIGl0ZW0gaXMgbm90IGxvYWRlZFwiKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9uYXZpZ2F0aW9uTG9naWMuZ2V0RWxlbWVudEJ5Q2ZpKGNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnRCeUlkID0gZnVuY3Rpb24oc3BpbmVJdGVtLCBpZCkge1xuXG4gICAgaWYgKHNwaW5lSXRlbSAhPSBfY3VycmVudFNwaW5lSXRlbSkge1xuICAgICAgY29uc29sZS5lcnJvcihcInNwaW5lIGl0ZW0gaXMgbm90IGxvYWRlZFwiKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9uYXZpZ2F0aW9uTG9naWMuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgc2VsZWN0b3IpIHtcblxuICAgIGlmIChzcGluZUl0ZW0gIT0gX2N1cnJlbnRTcGluZUl0ZW0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBfbmF2aWdhdGlvbkxvZ2ljLmdldEVsZW1lbnQoc2VsZWN0b3IpO1xuICB9O1xuXG4gIHRoaXMuZ2V0Rmlyc3RWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHZpc2libGVDb250ZW50T2Zmc2V0cyA9IGdldFZpc2libGVDb250ZW50T2Zmc2V0cygpO1xuICAgIHJldHVybiBfbmF2aWdhdGlvbkxvZ2ljLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQodmlzaWJsZUNvbnRlbnRPZmZzZXRzKTtcbiAgfTtcblxuICAvLyAvKipcbiAgLy8gICogQGRlcHJlY2F0ZWRcbiAgLy8gICovXG4gIC8vIHRoaXMuZ2V0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIC8vIFxuICAvLyAgICAgdmFyIHZpc2libGVDb250ZW50T2Zmc2V0cyA9IGdldFZpc2libGVDb250ZW50T2Zmc2V0cygpO1xuICAvLyAgICAgcmV0dXJuIF9uYXZpZ2F0aW9uTG9naWMuZ2V0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnRzKHZpc2libGVDb250ZW50T2Zmc2V0cyk7XG4gIC8vIH07XG5cbiAgdGhpcy5pbnN1cmVFbGVtZW50VmlzaWJpbGl0eSA9IGZ1bmN0aW9uKHNwaW5lSXRlbUlkLCBlbGVtZW50LCBpbml0aWF0b3IpIHtcblxuICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgaWYgKF9uYXZpZ2F0aW9uTG9naWMuaXNFbGVtZW50VmlzaWJsZSgkZWxlbWVudCwgZ2V0VmlzaWJsZUNvbnRlbnRPZmZzZXRzKCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhZ2UgPSBfbmF2aWdhdGlvbkxvZ2ljLmdldFBhZ2VGb3JFbGVtZW50KCRlbGVtZW50KTtcblxuICAgIGlmIChwYWdlID09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wZW5QYWdlUmVxdWVzdCA9IG5ldyBQYWdlT3BlblJlcXVlc3QoX2N1cnJlbnRTcGluZUl0ZW0sIGluaXRpYXRvcik7XG4gICAgb3BlblBhZ2VSZXF1ZXN0LnNldFBhZ2VJbmRleChwYWdlKTtcblxuICAgIHZhciBpZCA9IGVsZW1lbnQuaWQ7XG4gICAgaWYgKCFpZCkge1xuICAgICAgaWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImlkXCIpO1xuICAgIH1cblxuICAgIGlmIChpZCkge1xuICAgICAgb3BlblBhZ2VSZXF1ZXN0LnNldEVsZW1lbnRJZChpZCk7XG4gICAgfVxuXG4gICAgc2VsZi5vcGVuUGFnZShvcGVuUGFnZVJlcXVlc3QpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWZsb3dhYmxlVmlldyIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vIE1vZGlmaWVkIGJ5IERhbmllbCBXZWNrXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG52YXIgQm9va21hcmtEYXRhID0gcmVxdWlyZSgnLi4vbW9kZWxzL2Jvb2ttYXJrLWRhdGEnKVxudmFyIEN1cnJlbnRQYWdlc0luZm8gPSByZXF1aXJlKCcuLi9tb2RlbHMvY3VycmVudC1wYWdlcy1pbmZvJylcbnZhciBFdmVudHMgPSByZXF1aXJlKCcuLi9ldmVudHMnKVxudmFyIEludGVybmFsRXZlbnRzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwtZXZlbnRzJylcbnZhciBpc0lGcmFtZUFsaXZlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pcy1pZnJhbWUtYWxpdmUnKVxudmFyIGxvYWRUZW1wbGF0ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbG9hZC10ZW1wbGF0ZScpXG52YXIgTWFyZ2lucyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWFyZ2lucycpXG52YXIgT25lUGFnZVZpZXcgPSByZXF1aXJlKCcuL29uZS1wYWdlLXZpZXcnKVxudmFyIFBhZ2VPcGVuUmVxdWVzdCA9IHJlcXVpcmUoJy4uL21vZGVscy9wYWdlLW9wZW4tcmVxdWVzdCcpXG52YXIgc2V0U3R5bGVzID0gcmVxdWlyZSgnLi4vaGVscGVycy9zZXQtc3R5bGVzJylcbnZhciBWaWV3ZXJTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL21vZGVscy92aWV3ZXItc2V0dGluZ3MnKVxuXG4vKipcbiAqIFJlbmRlcnMgY29udGVudCBpbnNpZGUgYSBzY3JvbGxhYmxlIHZpZXcgcG9ydFxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBwYXJhbSBpc0NvbnRpbnVvdXNTY3JvbGxcbiAqIEBwYXJhbSByZWFkZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTY3JvbGxWaWV3KG9wdGlvbnMsIGlzQ29udGludW91c1Njcm9sbCwgcmVhZGVyKSB7XG5cbiAgdmFyIF9ERUJVRyA9IGZhbHNlO1xuXG4gIF8uZXh0ZW5kKHRoaXMsIEJhY2tib25lLkV2ZW50cyk7XG5cbiAgdmFyIFNDUk9MTF9NQVJHSU5fVE9fU0hPV19MQVNUX1ZJU0JMRV9MSU5FID0gNTtcbiAgdmFyIElURU1fTE9BRF9TQ1JPTExfQlVGRkVSID0gMjAwMDtcbiAgdmFyIE9OX1NDUk9MTF9USU1FX0RBTEFZID0gMzAwO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgXyR2aWV3cG9ydCA9IG9wdGlvbnMuJHZpZXdwb3J0O1xuICB2YXIgX3NwaW5lID0gb3B0aW9ucy5zcGluZTtcbiAgdmFyIF91c2VyU3R5bGVzID0gb3B0aW9ucy51c2VyU3R5bGVzO1xuICB2YXIgX2RlZmVycmVkUGFnZVJlcXVlc3Q7XG4gIHZhciBfJGNvbnRlbnRGcmFtZTtcbiAgdmFyIF8kZWw7XG5cbiAgdmFyIF9zdG9wVHJhbnNpZW50Vmlld1VwZGF0ZSA9IGZhbHNlO1xuXG4gIC8vdGhpcyBmbGFncyB1c2VkIHRvIHByZXZlbnQgb25TY3JvbGwgZXZlbnQgdHJpZ2dlcmluZyBwYWdpbmF0aW9uIGNoYW5nZWQgd2hlbiBpbnRlcm5hbCBsYXlvdXQgbW9kaWZpY2F0aW9ucyBoYXBwZW5zXG4gIC8vaWYgd2UgdHJpZ2dlciBwYWdpbmF0aW9uIGNoYW5nZSB3aXRob3V0IHJlZmVyZW5jZSB0byB0aGUgb3JpZ2luYWwgcmVxdWVzdCB0aGF0IHN0YXJ0ZWQgdGhlIGNoYW5nZSAtIHdlIGJyYWtlIHRoZVxuICAvL01lZGlhIE92ZXJsYXkgYmVjaGF2aXlvdXJcbiAgLy9XZSBjYW4ndCByZXVzZSBzYW1lIGZsYWcgZm9yIGFsbCBvZiB0aGlzIGFjdGlvbiBiZWNhdXNlIHRoaXMgYWN0aW9ucyBtZXkgaGFwcGVuIGluIHBhcmFsbGVsXG4gIHZhciBfaXNQZXJmb3JtaW5nTGF5b3V0TW9kaWZpY2F0aW9ucyA9IGZhbHNlOyAvL3BlcmZvcm1pbmcgYXN5bmNoICBhY3Rpb25zIHRoYXQgbWF5IHRyaWdnZXIgb25TY3JvbGw7XG4gIHZhciBfaXNTZXR0aW5nU2Nyb2xsUG9zaXRpb24gPSBmYWxzZTsgLy90aGlzIGhhcHBlbnMgd2hlbiB3ZSBzZXQgc2Nyb2xsIHBvc2l0aW9uIGJhc2VkIG9uIG9wZW4gZWxlbWVudCByZXF1ZXN0XG4gIHZhciBfaXNMb2FkaW5nTmV3U3BpbmVJdGVtT25QYWdlUmVxdWVzdCA9IGZhbHNlOyAvL1xuXG4gIHRoaXMuaXNDb250aW51b3VzU2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlzQ29udGludW91c1Njcm9sbDtcbiAgfTtcblxuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHRlbXBsYXRlID0gbG9hZFRlbXBsYXRlKFwic2Nyb2xsZWRfYm9va19mcmFtZVwiLCB7fSk7XG5cbiAgICBfJGVsID0gJCh0ZW1wbGF0ZSk7XG4gICAgXyR2aWV3cG9ydC5hcHBlbmQoXyRlbCk7XG5cbiAgICBfJGNvbnRlbnRGcmFtZSA9ICQoXCIjc2Nyb2xsZWQtY29udGVudC1mcmFtZVwiLCBfJGVsKTtcbiAgICBfJGNvbnRlbnRGcmFtZS5jc3MoXCJvdmVyZmxvd1wiLCBcIlwiKTtcbiAgICBfJGNvbnRlbnRGcmFtZS5jc3MoXCJvdmVyZmxvdy15XCIsIFwiYXV0b1wiKTtcbiAgICBfJGNvbnRlbnRGcmFtZS5jc3MoXCJvdmVyZmxvdy14XCIsIFwiaGlkZGVuXCIpO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcIi13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nXCIsIFwidG91Y2hcIik7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwid2lkdGhcIiwgXCIxMDAlXCIpO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcImhlaWdodFwiLCBcIjEwMCVcIik7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwicG9zaXRpb25cIiwgXCJyZWxhdGl2ZVwiKTtcblxuICAgIHZhciBzZXR0aW5ncyA9IHJlYWRlci52aWV3ZXJTZXR0aW5ncygpO1xuICAgIGlmICghc2V0dGluZ3MgfHwgdHlwZW9mIHNldHRpbmdzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIC8vZGVmYXVsdHNcbiAgICAgIHNldHRpbmdzID0gbmV3IFZpZXdlclNldHRpbmdzKHt9KTtcbiAgICB9XG4gICAgaWYgKHNldHRpbmdzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBuZWNlc3NhcnkgY291bnRlcnBhcnQgZm9yIHRoZSBzYW1lIENTUyBHUFUgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIHRyaWNrIGluIG9uZV9wYWdlX3ZpZXcuanNcbiAgICAgIC8vIFRoaXMgYWZmZWN0cyB0aGUgc3RhY2tpbmcgb3JkZXIgYW5kIHJlLWVuYWJsZXMgdGhlIHNjcm9sbGJhciBpbiBTYWZhcmkgKHdvcmtzIGZpbmUgaW4gQ2hyb21lIG90aGVyd2lzZSlcbiAgICAgIF8kY29udGVudEZyYW1lLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVooMClcIik7XG4gICAgfVxuXG4gICAgLy8gXyRjb250ZW50RnJhbWUuY3NzKFwiYm94LXNpemluZ1wiLCBcImJvcmRlci1ib3hcIik7XG4gICAgLy8gXyRjb250ZW50RnJhbWUuY3NzKFwiYm9yZGVyXCIsIFwiMjBweCBzb2xpZCByZWRcIik7XG5cbiAgICBzZWxmLmFwcGx5U3R5bGVzKCk7XG5cbiAgICB2YXIgbGF6eVNjcm9sbCA9IF8uZGVib3VuY2Uob25TY3JvbGwsIE9OX1NDUk9MTF9USU1FX0RBTEFZKTtcblxuICAgIF8kY29udGVudEZyYW1lLm9uKCdzY3JvbGwnLCBmdW5jdGlvbihlKSB7XG4gICAgICBsYXp5U2Nyb2xsKGUpO1xuICAgICAgb25TY3JvbGxEaXJlY3QoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZUxvYWRlZFZpZXdzVG9wKGNhbGxiYWNrLCBhc3NlcnRTY3JvbGxQb3NpdGlvbikge1xuXG4gICAgaWYgKF9zdG9wVHJhbnNpZW50Vmlld1VwZGF0ZSkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmlld1BhZ2UgPSBmaXJzdExvYWRlZFZpZXcoKTtcbiAgICBpZiAoIXZpZXdQYWdlKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2aWV3UG9ydFJhbmdlID0gZ2V0VmlzaWJsZVJhbmdlKDApO1xuICAgIHZhciBmaXJzdFZpZXdSYW5nZSA9IGdldFBhZ2VWaWV3UmFuZ2Uodmlld1BhZ2UpO1xuXG4gICAgaWYgKCh2aWV3UG9ydFJhbmdlLnRvcCAtIGZpcnN0Vmlld1JhbmdlLmJvdHRvbSkgPiBJVEVNX0xPQURfU0NST0xMX0JVRkZFUikge1xuICAgICAgdmFyIHNjcm9sbFBvcyA9IHNjcm9sbFRvcCgpO1xuICAgICAgcmVtb3ZlUGFnZVZpZXcodmlld1BhZ2UpO1xuICAgICAgc2Nyb2xsVG8oc2Nyb2xsUG9zIC0gKGZpcnN0Vmlld1JhbmdlLmJvdHRvbSAtIGZpcnN0Vmlld1JhbmdlLnRvcCksIHVuZGVmaW5lZCk7XG4gICAgICBhc3NlcnRTY3JvbGxQb3NpdGlvbihcInVwZGF0ZUxvYWRlZFZpZXdzVG9wIDFcIik7XG4gICAgICB1cGRhdGVMb2FkZWRWaWV3c1RvcChjYWxsYmFjaywgYXNzZXJ0U2Nyb2xsUG9zaXRpb24pOyAvL3JlY3Vyc2lvblxuICAgIH0gZWxzZSBpZiAoKHZpZXdQb3J0UmFuZ2UudG9wIC0gZmlyc3RWaWV3UmFuZ2UudG9wKSA8IElURU1fTE9BRF9TQ1JPTExfQlVGRkVSKSB7XG4gICAgICBhZGRUb1RvcE9mKHZpZXdQYWdlLCBmdW5jdGlvbihpc0VsZW1lbnRBZGRlZCkge1xuICAgICAgICBpZiAoaXNFbGVtZW50QWRkZWQpIHtcbiAgICAgICAgICBhc3NlcnRTY3JvbGxQb3NpdGlvbihcInVwZGF0ZUxvYWRlZFZpZXdzVG9wIDJcIik7XG4gICAgICAgICAgdXBkYXRlTG9hZGVkVmlld3NUb3AoY2FsbGJhY2ssIGFzc2VydFNjcm9sbFBvc2l0aW9uKTsgLy9yZWN1cnNpb25cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUxvYWRlZFZpZXdzQm90dG9tKGNhbGxiYWNrLCBhc3NlcnRTY3JvbGxQb3NpdGlvbikge1xuXG4gICAgaWYgKF9zdG9wVHJhbnNpZW50Vmlld1VwZGF0ZSkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmlld1BhZ2UgPSBsYXN0TG9hZGVkVmlldygpO1xuICAgIGlmICghdmlld1BhZ2UpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZpZXdQb3J0UmFuZ2UgPSBnZXRWaXNpYmxlUmFuZ2UoMCk7XG4gICAgdmFyIGxhc3RWaWV3UmFuZ2UgPSBnZXRQYWdlVmlld1JhbmdlKHZpZXdQYWdlKTtcblxuICAgIGlmICgobGFzdFZpZXdSYW5nZS50b3AgLSB2aWV3UG9ydFJhbmdlLmJvdHRvbSkgPiBJVEVNX0xPQURfU0NST0xMX0JVRkZFUikge1xuICAgICAgcmVtb3ZlUGFnZVZpZXcodmlld1BhZ2UpO1xuICAgICAgYXNzZXJ0U2Nyb2xsUG9zaXRpb24oXCJ1cGRhdGVMb2FkZWRWaWV3c0JvdHRvbSAxXCIpO1xuICAgICAgdXBkYXRlTG9hZGVkVmlld3NCb3R0b20oY2FsbGJhY2ssIGFzc2VydFNjcm9sbFBvc2l0aW9uKTsgLy9yZWN1cnNpb25cbiAgICB9IGVsc2UgaWYgKChsYXN0Vmlld1JhbmdlLmJvdHRvbSAtIHZpZXdQb3J0UmFuZ2UuYm90dG9tKSA8IElURU1fTE9BRF9TQ1JPTExfQlVGRkVSKSB7XG4gICAgICBhZGRUb0JvdHRvbU9mKHZpZXdQYWdlLCBmdW5jdGlvbihuZXdQYWdlTG9hZGVkKSB7XG4gICAgICAgIGFzc2VydFNjcm9sbFBvc2l0aW9uKFwidXBkYXRlTG9hZGVkVmlld3NCb3R0b20gMlwiKTtcbiAgICAgICAgaWYgKG5ld1BhZ2VMb2FkZWQpIHtcbiAgICAgICAgICB1cGRhdGVMb2FkZWRWaWV3c0JvdHRvbShjYWxsYmFjaywgYXNzZXJ0U2Nyb2xsUG9zaXRpb24pOyAvL3JlY3Vyc2lvblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVHJhbnNpZW50Vmlld3MocGFnZVZpZXcpIHtcblxuICAgIGlmICghaXNDb250aW51b3VzU2Nyb2xsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbFBvc0JlZm9yZSA9IHVuZGVmaW5lZDtcbiAgICBpZiAoX0RFQlVHKSB7XG4gICAgICBpZiAocGFnZVZpZXcpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHBhZ2VWaWV3Lm9mZnNldCgpO1xuICAgICAgICBpZiAob2Zmc2V0KSBzY3JvbGxQb3NCZWZvcmUgPSBvZmZzZXQudG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gZG91YmxlLWNoZWNrcyB3aGV0aGVyIHRoZSBicm93c2VyIGhhcyBzaGlmdGVkIHRoZSBzY3JvbGwgcG9zaXRpb24gYmVjYXVzZSBvZiB1bmZvcmVzZWVuIHJlbmRlcmluZyBpc3N1ZXMuXG4gICAgLy8gKHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiBiZWNhdXNlIHdlIGhhbmRsZSBzY3JvbGwgYWRqdXN0bWVudHMgZHVyaW5nIGlmcmFtZSBoZWlnaHQgcmVzaXplcyBleHBsaWNpdGVseSBpbiB0aGlzIGNvZGUpXG4gICAgdmFyIGFzc2VydFNjcm9sbFBvc2l0aW9uID0gZnVuY3Rpb24obXNnKSB7XG4gICAgICBpZiAoX0RFQlVHKSB7XG4gICAgICAgIGlmICghc2Nyb2xsUG9zQmVmb3JlKSByZXR1cm47XG4gICAgICAgIHZhciBzY3JvbGxQb3NBZnRlciA9IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gcGFnZVZpZXcub2Zmc2V0KCk7XG4gICAgICAgIGlmIChvZmZzZXQpIHNjcm9sbFBvc0FmdGVyID0gb2Zmc2V0LnRvcDtcblxuICAgICAgICBpZiAoIXNjcm9sbFBvc0FmdGVyKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGRpZmYgPSBzY3JvbGxQb3NBZnRlciAtIHNjcm9sbFBvc0JlZm9yZTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRpZmYpID4gMSkge1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJAQEBAQEBAQEBAQEBAQEAgU0NST0xMIEFESlVTVCAoXCIgKyBtc2cgKyBcIikgXCIgKyBkaWZmICsgXCIgLS0gXCIgKyBwYWdlVmlldy5jdXJyZW50U3BpbmVJdGVtKCkuaHJlZik7XG4gICAgICAgICAgLy9fJGNvbnRlbnRGcmFtZVswXS5zY3JvbGxUb3AgPSBfJGNvbnRlbnRGcmFtZVswXS5zY3JvbGxUb3AgKyBkaWZmO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9pc1BlcmZvcm1pbmdMYXlvdXRNb2RpZmljYXRpb25zID0gdHJ1ZTtcbiAgICB1cGRhdGVMb2FkZWRWaWV3c0JvdHRvbShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZUxvYWRlZFZpZXdzVG9wKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF9pc1BlcmZvcm1pbmdMYXlvdXRNb2RpZmljYXRpb25zID0gZmFsc2U7XG4gICAgICAgIH0sIE9OX1NDUk9MTF9USU1FX0RBTEFZICsgMTAwKTtcbiAgICAgIH0sIGFzc2VydFNjcm9sbFBvc2l0aW9uKTtcbiAgICB9LCBhc3NlcnRTY3JvbGxQb3NpdGlvbik7XG4gIH1cblxuICB2YXIgX21lZGlhT3ZlcmxheXNXYXNQbGF5aW5nTGFzdFRpbWVTY3JvbGxTdGFydGVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25TY3JvbGxEaXJlY3QoZSkge1xuICAgIHZhciBzZXR0aW5ncyA9IHJlYWRlci52aWV3ZXJTZXR0aW5ncygpO1xuICAgIGlmICghc2V0dGluZ3MubWVkaWFPdmVybGF5c1ByZXNlcnZlUGxheWJhY2tXaGVuU2Nyb2xsKSB7XG4gICAgICBpZiAoIV9tZWRpYU92ZXJsYXlzV2FzUGxheWluZ0xhc3RUaW1lU2Nyb2xsU3RhcnRlZCAmJiByZWFkZXIuaXNNZWRpYU92ZXJsYXlBdmFpbGFibGUoKSkge1xuICAgICAgICBfbWVkaWFPdmVybGF5c1dhc1BsYXlpbmdMYXN0VGltZVNjcm9sbFN0YXJ0ZWQgPSByZWFkZXIuaXNQbGF5aW5nTWVkaWFPdmVybGF5KCk7XG4gICAgICAgIGlmIChfbWVkaWFPdmVybGF5c1dhc1BsYXlpbmdMYXN0VGltZVNjcm9sbFN0YXJ0ZWQpIHtcbiAgICAgICAgICByZWFkZXIucGF1c2VNZWRpYU92ZXJsYXkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2Nyb2xsKGUpIHtcbiAgICBpZiAoIV9pc1BlcmZvcm1pbmdMYXlvdXRNb2RpZmljYXRpb25zICYmICFfaXNTZXR0aW5nU2Nyb2xsUG9zaXRpb24gJiYgIV9pc0xvYWRpbmdOZXdTcGluZUl0ZW1PblBhZ2VSZXF1ZXN0KSB7XG5cbiAgICAgIHVwZGF0ZVRyYW5zaWVudFZpZXdzKCk7XG4gICAgICBvblBhZ2luYXRpb25DaGFuZ2VkKHNlbGYpO1xuXG4gICAgICB2YXIgc2V0dGluZ3MgPSByZWFkZXIudmlld2VyU2V0dGluZ3MoKTtcbiAgICAgIGlmICghc2V0dGluZ3MubWVkaWFPdmVybGF5c1ByZXNlcnZlUGxheWJhY2tXaGVuU2Nyb2xsKSB7XG4gICAgICAgIGlmIChfbWVkaWFPdmVybGF5c1dhc1BsYXlpbmdMYXN0VGltZVNjcm9sbFN0YXJ0ZWQpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVhZGVyLnBsYXlNZWRpYU92ZXJsYXkoKTtcbiAgICAgICAgICAgIF9tZWRpYU92ZXJsYXlzV2FzUGxheWluZ0xhc3RUaW1lU2Nyb2xsU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY3JvbGxUbyhvZmZzZXQsIHBhZ2VSZXF1ZXN0KSB7XG5cbiAgICBfJGNvbnRlbnRGcmFtZVswXS5zY3JvbGxUb3AgPSBvZmZzZXQ7XG5cbiAgICBpZiAocGFnZVJlcXVlc3QpIHtcbiAgICAgIG9uUGFnaW5hdGlvbkNoYW5nZWQocGFnZVJlcXVlc3QuaW5pdGlhdG9yLCBwYWdlUmVxdWVzdC5zcGluZUl0ZW0sIHBhZ2VSZXF1ZXN0LmVsZW1lbnRJZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlUGFnZVZpZXdTaXplQW5kQWRqdXN0U2Nyb2xsKHBhZ2VWaWV3KSB7XG4gICAgdmFyIHNjcm9sbFBvcyA9IHNjcm9sbFRvcCgpO1xuICAgIHZhciByYW5nZUJlZm9yZVJlc2l6ZSA9IGdldFBhZ2VWaWV3UmFuZ2UocGFnZVZpZXcpO1xuXG4gICAgdXBkYXRlUGFnZVZpZXdTaXplKHBhZ2VWaWV3KTtcblxuICAgIHZhciByYW5nZUFmdGVyUmVzaXplID0gZ2V0UGFnZVZpZXdSYW5nZShwYWdlVmlldyk7XG5cbiAgICB2YXIgaGVpZ2h0QWZ0ZXIgPSByYW5nZUFmdGVyUmVzaXplLmJvdHRvbSAtIHJhbmdlQWZ0ZXJSZXNpemUudG9wO1xuICAgIHZhciBoZWlnaHRCZWZvcmUgPSByYW5nZUJlZm9yZVJlc2l6ZS5ib3R0b20gLSByYW5nZUJlZm9yZVJlc2l6ZS50b3A7XG5cbiAgICB2YXIgZGVsdGEgPSBoZWlnaHRBZnRlciAtIGhlaWdodEJlZm9yZTtcblxuICAgIGlmIChNYXRoLmFicyhkZWx0YSkgPiAwKSB7XG4gICAgICBpZiAoX0RFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJJTU1FRElBVEUgU0NST0xMIEFESlVTVDogXCIgKyBwYWdlVmlldy5jdXJyZW50U3BpbmVJdGVtKCkuaHJlZiArIFwiID09IFwiICsgZGVsdGEpO1xuICAgICAgfVxuICAgICAgc2Nyb2xsVG8oc2Nyb2xsUG9zICsgZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWNoU3RhYmxlQ29udGVudEhlaWdodCh1cGRhdGVTY3JvbGwsIHBhZ2VWaWV3LCBpZnJhbWUsIGhyZWYsIGZpeGVkTGF5b3V0LCBtZXRhV2lkdGgsIG1zZywgY2FsbGJhY2spIHtcbiAgICBpZiAoIWlzSWZyYW1lQWxpdmUoaWZyYW1lKSkge1xuICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlYWNoU3RhYmxlQ29udGVudEhlaWdodCAhIHdpbiAmJiBkb2MgKGlGcmFtZSBkaXNwb3NlZD8pXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgTUFYX0FUVEVNUFRTID0gMTA7XG4gICAgdmFyIFRJTUVfTVMgPSAzMDA7XG5cbiAgICB2YXIgdyA9IGlmcmFtZS5jb250ZW50V2luZG93O1xuICAgIHZhciBkID0gaWZyYW1lLmNvbnRlbnREb2N1bWVudDtcblxuICAgIHZhciBwcmV2aW91c1BvbGxlZENvbnRlbnRIZWlnaHQgPSBwYXJzZUludChNYXRoLnJvdW5kKHBhcnNlRmxvYXQody5nZXRDb21wdXRlZFN0eWxlKGQuZG9jdW1lbnRFbGVtZW50KS5oZWlnaHQpKSk7IC8vYm9keSBjYW4gYmUgc2hvcnRlciE7XG5cbiAgICB2YXIgaW5pdGlhbENvbnRlbnRIZWlnaHQgPSBwcmV2aW91c1BvbGxlZENvbnRlbnRIZWlnaHQ7XG5cbiAgICBpZiAodXBkYXRlU2Nyb2xsID09PSAwKSB7XG4gICAgICB1cGRhdGVQYWdlVmlld1NpemVBbmRBZGp1c3RTY3JvbGwocGFnZVZpZXcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVQYWdlVmlld1NpemUocGFnZVZpZXcpO1xuICAgIH1cblxuICAgIHZhciB0cnlBZ2FpbkZ1bmMgPSBmdW5jdGlvbih0cnlBZ2Fpbikge1xuICAgICAgaWYgKF9ERUJVRyAmJiB0cnlBZ2FpbiAhPT0gTUFYX0FUVEVNUFRTKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidHJ5QWdhaW5GdW5jIC0gXCIgKyB0cnlBZ2FpbiArIFwiOiBcIiArIGhyZWYgKyBcIiAgPFwiICsgaW5pdGlhbENvbnRlbnRIZWlnaHQgKyBcIiAtLSBcIiArIHByZXZpb3VzUG9sbGVkQ29udGVudEhlaWdodCArIFwiPlwiKTtcbiAgICAgIH1cblxuICAgICAgdHJ5QWdhaW4tLTtcbiAgICAgIGlmICh0cnlBZ2FpbiA8IDApIHtcbiAgICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJ0cnlBZ2FpbkZ1bmMgYWJvcnQ6IFwiICsgaHJlZik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGlzSWZyYW1lQWxpdmUoaWZyYW1lKSkge1xuICAgICAgICAgICAgdmFyIHdpbiA9IGlmcmFtZS5jb250ZW50V2luZG93O1xuICAgICAgICAgICAgdmFyIGRvYyA9IGlmcmFtZS5jb250ZW50RG9jdW1lbnQ7XG5cbiAgICAgICAgICAgIHZhciBpZnJhbWVIZWlnaHQgPSBwYXJzZUludChNYXRoLnJvdW5kKHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoaWZyYW1lKS5oZWlnaHQpKSk7XG5cbiAgICAgICAgICAgIHZhciBkb2NIZWlnaHQgPSBwYXJzZUludChNYXRoLnJvdW5kKHBhcnNlRmxvYXQod2luLmdldENvbXB1dGVkU3R5bGUoZG9jLmRvY3VtZW50RWxlbWVudCkuaGVpZ2h0KSkpOyAvL2JvZHkgY2FuIGJlIHNob3J0ZXIhXG5cbiAgICAgICAgICAgIGlmIChwcmV2aW91c1BvbGxlZENvbnRlbnRIZWlnaHQgIT09IGRvY0hlaWdodCkge1xuICAgICAgICAgICAgICBwcmV2aW91c1BvbGxlZENvbnRlbnRIZWlnaHQgPSBkb2NIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgdHJ5QWdhaW5GdW5jKHRyeUFnYWluKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDT05URU5UIEhFSUdIVCBJUyBOT1cgU1RBQklMSVNFRFxuXG4gICAgICAgICAgICB2YXIgZGlmZiA9IGlmcmFtZUhlaWdodCAtIGRvY0hlaWdodDtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IDQpIHtcbiAgICAgICAgICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiJCQkIElGUkFNRSBIRUlHSFQgQURKVVNUOiBcIiArIGhyZWYgKyBcIiAgW1wiICsgZGlmZiArIFwiXTxcIiArIGluaXRpYWxDb250ZW50SGVpZ2h0ICsgXCIgLS0gXCIgKyBwcmV2aW91c1BvbGxlZENvbnRlbnRIZWlnaHQgKyBcIj5cIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXNnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh1cGRhdGVTY3JvbGwgPT09IDApIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVQYWdlVmlld1NpemVBbmRBZGp1c3RTY3JvbGwocGFnZVZpZXcpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVwZGF0ZVBhZ2VWaWV3U2l6ZShwYWdlVmlldyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoaXNJZnJhbWVBbGl2ZShpZnJhbWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpbiA9IGlmcmFtZS5jb250ZW50V2luZG93O1xuICAgICAgICAgICAgICAgIHZhciBkb2MgPSBpZnJhbWUuY29udGVudERvY3VtZW50O1xuXG4gICAgICAgICAgICAgICAgdmFyIGRvY0hlaWdodEFmdGVyID0gcGFyc2VJbnQoTWF0aC5yb3VuZChwYXJzZUZsb2F0KHdpbi5nZXRDb21wdXRlZFN0eWxlKGRvYy5kb2N1bWVudEVsZW1lbnQpLmhlaWdodCkpKTsgLy9ib2R5IGNhbiBiZSBzaG9ydGVyIVxuICAgICAgICAgICAgICAgIHZhciBpZnJhbWVIZWlnaHRBZnRlciA9IHBhcnNlSW50KE1hdGgucm91bmQocGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpZnJhbWUpLmhlaWdodCkpKTtcblxuICAgICAgICAgICAgICAgIHZhciBuZXdkaWZmID0gaWZyYW1lSGVpZ2h0QWZ0ZXIgLSBkb2NIZWlnaHRBZnRlcjtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMobmV3ZGlmZikgPiA0KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoX0RFQlVHKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCIjIyBJRlJBTUUgSEVJR0hUIEFESlVTVDogXCIgKyBocmVmICsgXCIgIFtcIiArIG5ld2RpZmYgKyBcIl08XCIgKyBpbml0aWFsQ29udGVudEhlaWdodCArIFwiIC0tIFwiICsgcHJldmlvdXNQb2xsZWRDb250ZW50SGVpZ2h0ICsgXCI+XCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB0cnlBZ2FpbkZ1bmModHJ5QWdhaW4pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoX0RFQlVHKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiPj4gSUZSQU1FIEhFSUdIVCBBREpVU1RFRCBPS0FZOiBcIiArIGhyZWYgKyBcIiAgW1wiICsgZGlmZiArIFwiXTxcIiArIGluaXRpYWxDb250ZW50SGVpZ2h0ICsgXCIgLS0gXCIgKyBwcmV2aW91c1BvbGxlZENvbnRlbnRIZWlnaHQgKyBcIj5cIik7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1zZyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChfREVCVUcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidHJ5QWdhaW5GdW5jICEgd2luICYmIGRvYyAoaUZyYW1lIGRpc3Bvc2VkPylcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL2lmIChfREVCVUcpXG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJJRlJBTUUgSEVJR0hUIE5PIE5FRUQgQURKVVNUOiBcIiArIGhyZWYpO1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX0RFQlVHKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidHJ5QWdhaW5GdW5jICEgd2luICYmIGRvYyAoaUZyYW1lIGRpc3Bvc2VkPylcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGV4KTtcblxuICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sodHJ1ZSk7XG5cbiAgICAgIH0sIFRJTUVfTVMpO1xuICAgIH07XG5cbiAgICB0cnlBZ2FpbkZ1bmMoTUFYX0FUVEVNUFRTKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gYWRkVG9Ub3BPZih0b3BWaWV3LCBjYWxsYmFjaykge1xuXG4gICAgdmFyIHByZXZTcGluZUl0ZW0gPSBfc3BpbmUucHJldkl0ZW0odG9wVmlldy5jdXJyZW50U3BpbmVJdGVtKCksIHRydWUpO1xuICAgIGlmICghcHJldlNwaW5lSXRlbSkge1xuICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0bXBWaWV3ID0gY3JlYXRlUGFnZVZpZXdGb3JTcGluZUl0ZW0odHJ1ZSk7XG5cbiAgICAvLyBhZGQgdG8gdGhlIGVuZCBmaXJzdCB0byBhdm9pZCBzY3JvbGxpbmcgZHVyaW5nIGxvYWRcbiAgICB2YXIgbGFzdFZpZXcgPSBsYXN0TG9hZGVkVmlldygpO1xuICAgIHRtcFZpZXcuZWxlbWVudCgpLmluc2VydEFmdGVyKGxhc3RWaWV3LmVsZW1lbnQoKSk7XG5cbiAgICB0bXBWaWV3LmxvYWRTcGluZUl0ZW0ocHJldlNwaW5lSXRlbSwgZnVuY3Rpb24oc3VjY2VzcywgJGlmcmFtZSwgc3BpbmVJdGVtLCBpc05ld2x5TG9hZGVkLCBjb250ZXh0KSB7XG4gICAgICBpZiAoc3VjY2Vzcykge1xuXG4gICAgICAgIHVwZGF0ZVBhZ2VWaWV3U2l6ZSh0bXBWaWV3KTtcbiAgICAgICAgdmFyIHJhbmdlID0gZ2V0UGFnZVZpZXdSYW5nZSh0bXBWaWV3KTtcblxuICAgICAgICByZW1vdmVQYWdlVmlldyh0bXBWaWV3KTtcblxuXG4gICAgICAgIHZhciBzY3JvbGxQb3MgPSBzY3JvbGxUb3AoKTtcblxuICAgICAgICB2YXIgbmV3VmlldyA9IGNyZWF0ZVBhZ2VWaWV3Rm9yU3BpbmVJdGVtKCk7XG4gICAgICAgIHZhciBvcmlnaW5hbEhlaWdodCA9IHJhbmdlLmJvdHRvbSAtIHJhbmdlLnRvcDtcblxuXG4gICAgICAgIG5ld1ZpZXcuc2V0SGVpZ2h0KG9yaWdpbmFsSGVpZ2h0KTtcbiAgICAgICAgLy8gaWZyYW1lIGlzIGxvYWRlZCBoaWRkZW4gaGVyZVxuICAgICAgICAvL3RoaXMuc2hvd0lGcmFtZSgpO1xuICAgICAgICAvLz09PT4gbm90IG5lY2Vzc2FyeSBoZXJlICh0ZW1wb3JhcnkgaWZyYW1lKVxuXG4gICAgICAgIG5ld1ZpZXcuZWxlbWVudCgpLmluc2VydEJlZm9yZSh0b3BWaWV3LmVsZW1lbnQoKSk7XG5cbiAgICAgICAgc2Nyb2xsUG9zID0gc2Nyb2xsUG9zICsgb3JpZ2luYWxIZWlnaHQ7XG5cbiAgICAgICAgc2Nyb2xsVG8oc2Nyb2xsUG9zLCB1bmRlZmluZWQpO1xuXG4gICAgICAgIG5ld1ZpZXcubG9hZFNwaW5lSXRlbShwcmV2U3BpbmVJdGVtLCBmdW5jdGlvbihzdWNjZXNzLCAkaWZyYW1lLCBzcGluZUl0ZW0sIGlzTmV3bHlMb2FkZWQsIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuXG4gICAgICAgICAgICB2YXIgY29udGludWVDYWxsYmFjayA9IGZ1bmN0aW9uKHN1Y2Nlc3NGbGFnKSB7XG4gICAgICAgICAgICAgIG9uUGFnZVZpZXdMb2FkZWQobmV3Vmlldywgc3VjY2VzcywgJGlmcmFtZSwgc3BpbmVJdGVtLCBpc05ld2x5TG9hZGVkLCBjb250ZXh0KTtcblxuICAgICAgICAgICAgICBjYWxsYmFjayhzdWNjZXNzRmxhZyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZWFjaFN0YWJsZUNvbnRlbnRIZWlnaHQoMCwgbmV3VmlldywgJGlmcmFtZVswXSwgc3BpbmVJdGVtLmhyZWYsIHNwaW5lSXRlbS5pc0ZpeGVkTGF5b3V0KCksIHNwaW5lSXRlbS5pc0ZpeGVkTGF5b3V0KCkgPyBuZXdWaWV3Lm1ldGFfd2lkdGgoKSA6IDAsIFwiYWRkVG9Ub3BPZlwiLCBjb250aW51ZUNhbGxiYWNrKTsgLy8gLy9vbklGcmFtZUxvYWQgY2FsbGVkIGJlZm9yZSB0aGlzIGNhbGxiYWNrLCBzbyBva2F5LlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIG9wZW4gMiBcIiArIHByZXZTcGluZUl0ZW0uaHJlZik7XG4gICAgICAgICAgICByZW1vdmVQYWdlVmlldyhuZXdWaWV3KTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIG9wZW4gMSBcIiArIHByZXZTcGluZUl0ZW0uaHJlZik7XG4gICAgICAgIHJlbW92ZVBhZ2VWaWV3KHRtcFZpZXcpO1xuICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVBhZ2VWaWV3U2l6ZShwYWdlVmlldykge1xuXG4gICAgaWYgKHBhZ2VWaWV3LmN1cnJlbnRTcGluZUl0ZW0oKS5pc0ZpeGVkTGF5b3V0KCkpIHtcbiAgICAgIHBhZ2VWaWV3LnNjYWxlVG9XaWR0aChfJGNvbnRlbnRGcmFtZS53aWR0aCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFnZVZpZXcucmVzaXplSUZyYW1lVG9Db250ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVG9Cb3R0b21PZihib3R0b21WaWV3LCBjYWxsYmFjaykge1xuXG4gICAgdmFyIG5leFNwaW5lSXRlbSA9IF9zcGluZS5uZXh0SXRlbShib3R0b21WaWV3LmN1cnJlbnRTcGluZUl0ZW0oKSwgdHJ1ZSk7XG4gICAgaWYgKCFuZXhTcGluZUl0ZW0pIHtcbiAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2Nyb2xsUG9zID0gc2Nyb2xsVG9wKCk7XG5cbiAgICB2YXIgbmV3VmlldyA9IGNyZWF0ZVBhZ2VWaWV3Rm9yU3BpbmVJdGVtKCk7XG4gICAgbmV3Vmlldy5lbGVtZW50KCkuaW5zZXJ0QWZ0ZXIoYm90dG9tVmlldy5lbGVtZW50KCkpO1xuXG4gICAgbmV3Vmlldy5sb2FkU3BpbmVJdGVtKG5leFNwaW5lSXRlbSwgZnVuY3Rpb24oc3VjY2VzcywgJGlmcmFtZSwgc3BpbmVJdGVtLCBpc05ld2x5TG9hZGVkLCBjb250ZXh0KSB7XG4gICAgICBpZiAoc3VjY2Vzcykge1xuXG4gICAgICAgIHZhciBjb250aW51ZUNhbGxiYWNrID0gZnVuY3Rpb24oc3VjY2Vzc0ZsYWcpIHtcbiAgICAgICAgICBvblBhZ2VWaWV3TG9hZGVkKG5ld1ZpZXcsIHN1Y2Nlc3MsICRpZnJhbWUsIHNwaW5lSXRlbSwgaXNOZXdseUxvYWRlZCwgY29udGV4dCk7XG5cbiAgICAgICAgICBjYWxsYmFjayhzdWNjZXNzRmxhZyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVhY2hTdGFibGVDb250ZW50SGVpZ2h0KDIsIG5ld1ZpZXcsICRpZnJhbWVbMF0sIHNwaW5lSXRlbS5ocmVmLCBzcGluZUl0ZW0uaXNGaXhlZExheW91dCgpLCBzcGluZUl0ZW0uaXNGaXhlZExheW91dCgpID8gbmV3Vmlldy5tZXRhX3dpZHRoKCkgOiAwLCBcImFkZFRvQm90dG9tT2ZcIiwgY29udGludWVDYWxsYmFjayk7IC8vIC8vb25JRnJhbWVMb2FkIGNhbGxlZCBiZWZvcmUgdGhpcyBjYWxsYmFjaywgc28gb2theS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gbG9hZCBcIiArIG5leFNwaW5lSXRlbS5ocmVmKTtcbiAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVMb2FkZWRJdGVtcygpIHtcblxuICAgIHZhciBsb2FkZWRQYWdlVmlld3MgPSBbXTtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuICAgICAgbG9hZGVkUGFnZVZpZXdzLnB1c2gocGFnZVZpZXcpO1xuICAgIH0sIGZhbHNlKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IGxvYWRlZFBhZ2VWaWV3cy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICByZW1vdmVQYWdlVmlldyhsb2FkZWRQYWdlVmlld3NbaV0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVBhZ2VWaWV3KHBhZ2VWaWV3KSB7XG5cbiAgICBwYWdlVmlldy5lbGVtZW50KCkucmVtb3ZlKCk7XG5cbiAgfVxuXG5cbiAgZnVuY3Rpb24gc2V0RnJhbWVTaXplc1RvUmVjdGFuZ2xlKHJlY3RhbmdsZSkge1xuXG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwibGVmdFwiLCByZWN0YW5nbGUubGVmdCk7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwidG9wXCIsIHJlY3RhbmdsZS50b3ApO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcInJpZ2h0XCIsIHJlY3RhbmdsZS5yaWdodCk7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwiYm90dG9tXCIsIHJlY3RhbmdsZS5ib3R0b20pO1xuXG4gIH1cblxuICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIF8kZWwucmVtb3ZlKCk7XG4gIH07XG5cbiAgdGhpcy5vblZpZXdwb3J0UmVzaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoIV8kY29udGVudEZyYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yRWFjaEl0ZW1WaWV3KGZ1bmN0aW9uKHBhZ2VWaWV3KSB7XG5cbiAgICAgIHVwZGF0ZVBhZ2VWaWV3U2l6ZShwYWdlVmlldyk7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgb25QYWdpbmF0aW9uQ2hhbmdlZChzZWxmKTtcblxuICAgIHVwZGF0ZVRyYW5zaWVudFZpZXdzKCk7XG4gIH07XG5cbiAgdmFyIF92aWV3U2V0dGluZ3MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuc2V0Vmlld1NldHRpbmdzID0gZnVuY3Rpb24oc2V0dGluZ3MpIHtcblxuICAgIF92aWV3U2V0dGluZ3MgPSBzZXR0aW5ncztcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuXG4gICAgICBwYWdlVmlldy5zZXRWaWV3U2V0dGluZ3Moc2V0dGluZ3MpO1xuXG4gICAgfSwgZmFsc2UpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBhZ2VWaWV3Rm9yU3BpbmVJdGVtKGlzVGVtcG9yYXJ5Vmlldykge1xuXG4gICAgb3B0aW9ucy5kaXNhYmxlUGFnZVRyYW5zaXRpb25zID0gdHJ1ZTsgLy8gZm9yY2VcblxuICAgIHZhciBwYWdlVmlldyA9IG5ldyBPbmVQYWdlVmlldyhcbiAgICAgIG9wdGlvbnMsIFtcImNvbnRlbnQtZG9jLWZyYW1lXCJdLFxuICAgICAgdHJ1ZSwgLy9lbmFibGVCb29rU3R5bGVPdmVycmlkZXNcbiAgICAgIHJlYWRlcik7XG5cbiAgICBwYWdlVmlldy5yZW5kZXIoKTtcbiAgICBpZiAoX3ZpZXdTZXR0aW5ncykgcGFnZVZpZXcuc2V0Vmlld1NldHRpbmdzKF92aWV3U2V0dGluZ3MpO1xuXG4gICAgaWYgKCFpc1RlbXBvcmFyeVZpZXcpIHtcbiAgICAgIHBhZ2VWaWV3LmVsZW1lbnQoKS5kYXRhKFwicGFnZVZpZXdcIiwgcGFnZVZpZXcpO1xuICAgIH1cblxuXG4gICAgaWYgKGlzQ29udGludW91c1Njcm9sbCkge1xuICAgICAgcGFnZVZpZXcuZGVjb3JhdGVJZnJhbWUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFnZVZpZXc7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kUGFnZVZpZXdGb3JTcGluZUl0ZW0oc3BpbmVJdGVtLCByZXZlcnNlKSB7XG5cbiAgICB2YXIgcmV0VmlldyA9IHVuZGVmaW5lZDtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuICAgICAgaWYgKHBhZ2VWaWV3LmN1cnJlbnRTcGluZUl0ZW0oKSA9PSBzcGluZUl0ZW0pIHtcbiAgICAgICAgcmV0VmlldyA9IHBhZ2VWaWV3O1xuICAgICAgICAvL2JyYWtlIHRoZSBpdGVyYXRpb25cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICB9LCByZXZlcnNlKTtcblxuICAgIHJldHVybiByZXRWaWV3O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yRWFjaEl0ZW1WaWV3KGZ1bmMsIHJldmVyc2UpIHtcblxuICAgIHZhciBwYWdlTm9kZXMgPSBfJGNvbnRlbnRGcmFtZS5jaGlsZHJlbigpO1xuXG4gICAgdmFyIGNvdW50ID0gcGFnZU5vZGVzLmxlbmd0aDtcbiAgICB2YXIgaXRlciA9IHJldmVyc2UgPyBmdW5jdGlvbihpeCkge1xuICAgICAgcmV0dXJuIGl4IC0gMVxuICAgIH0gOiBmdW5jdGlvbihpeCkge1xuICAgICAgcmV0dXJuIGl4ICsgMVxuICAgIH07XG5cbiAgICB2YXIgY29tcGFyZSA9IHJldmVyc2UgPyBmdW5jdGlvbihpeCkge1xuICAgICAgcmV0dXJuIGl4ID49IDBcbiAgICB9IDogZnVuY3Rpb24oaXgpIHtcbiAgICAgIHJldHVybiBpeCA8IGNvdW50XG4gICAgfTtcblxuICAgIHZhciBzdGFydCA9IHJldmVyc2UgPyBjb3VudCAtIDEgOiAwO1xuXG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBjb21wYXJlKGkpOyBpID0gaXRlcihpKSkge1xuXG4gICAgICB2YXIgJGVsZW1lbnQgPSBwYWdlTm9kZXMuZXEoaSk7XG4gICAgICB2YXIgY3VyVmlldyA9ICRlbGVtZW50LmRhdGEoXCJwYWdlVmlld1wiKTtcblxuICAgICAgaWYgKGN1clZpZXcpIHtcblxuICAgICAgICBpZiAoZnVuYyhjdXJWaWV3KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaXJzdExvYWRlZFZpZXcoKSB7XG5cbiAgICB2YXIgZmlyc3RWaWV3ID0gdW5kZWZpbmVkO1xuXG4gICAgZm9yRWFjaEl0ZW1WaWV3KGZ1bmN0aW9uKHBhZ2VWaWV3KSB7XG5cbiAgICAgIGZpcnN0VmlldyA9IHBhZ2VWaWV3O1xuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgfSwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIGZpcnN0VmlldztcbiAgfVxuXG4gIGZ1bmN0aW9uIGxhc3RMb2FkZWRWaWV3KCkge1xuXG4gICAgdmFyIGxhc3RWaWV3ID0gdW5kZWZpbmVkO1xuXG4gICAgZm9yRWFjaEl0ZW1WaWV3KGZ1bmN0aW9uKHBhZ2VWaWV3KSB7XG4gICAgICBsYXN0VmlldyA9IHBhZ2VWaWV3O1xuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgfSwgdHJ1ZSk7XG5cbiAgICByZXR1cm4gbGFzdFZpZXc7XG4gIH1cblxuICBmdW5jdGlvbiBvblBhZ2VWaWV3TG9hZGVkKHBhZ2VWaWV3LCBzdWNjZXNzLCAkaWZyYW1lLCBzcGluZUl0ZW0sIGlzTmV3bHlMb2FkZWQsIGNvbnRleHQpIHtcblxuICAgIGlmIChzdWNjZXNzICYmIGlzTmV3bHlMb2FkZWQpIHtcbiAgICAgIHNlbGYudHJpZ2dlcihFdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FERUQsICRpZnJhbWUsIHNwaW5lSXRlbSk7XG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiBsb2FkU3BpbmVJdGVtKHNwaW5lSXRlbSwgY2FsbGJhY2spIHtcblxuICAgIHJlbW92ZUxvYWRlZEl0ZW1zKCk7XG5cbiAgICB2YXIgc2Nyb2xsUG9zID0gc2Nyb2xsVG9wKCk7XG5cbiAgICB2YXIgbG9hZGVkVmlldyA9IGNyZWF0ZVBhZ2VWaWV3Rm9yU3BpbmVJdGVtKCk7XG5cbiAgICBfJGNvbnRlbnRGcmFtZS5hcHBlbmQobG9hZGVkVmlldy5lbGVtZW50KCkpO1xuXG4gICAgbG9hZGVkVmlldy5sb2FkU3BpbmVJdGVtKHNwaW5lSXRlbSwgZnVuY3Rpb24oc3VjY2VzcywgJGlmcmFtZSwgc3BpbmVJdGVtLCBpc05ld2x5TG9hZGVkLCBjb250ZXh0KSB7XG5cbiAgICAgIGlmIChzdWNjZXNzKSB7XG5cbiAgICAgICAgdmFyIGNvbnRpbnVlQ2FsbGJhY2sgPSBmdW5jdGlvbihzdWNjZXNzRmxhZykge1xuICAgICAgICAgIG9uUGFnZVZpZXdMb2FkZWQobG9hZGVkVmlldywgc3VjY2VzcywgJGlmcmFtZSwgc3BpbmVJdGVtLCBpc05ld2x5TG9hZGVkLCBjb250ZXh0KTtcblxuICAgICAgICAgIGNhbGxiYWNrKGxvYWRlZFZpZXcpO1xuXG4gICAgICAgICAgLy9zdWNjZXNzRmxhZyBzaG91bGQgYWx3YXlzIGJlIHRydWUgYXMgbG9hZGVkVmlldyBpRnJhbWUgY2Fubm90IGJlIGRlYWQgYXQgdGhpcyBzdGFnZS5cbiAgICAgICAgfTtcblxuICAgICAgICByZWFjaFN0YWJsZUNvbnRlbnRIZWlnaHQoMSwgbG9hZGVkVmlldywgJGlmcmFtZVswXSwgc3BpbmVJdGVtLmhyZWYsIHNwaW5lSXRlbS5pc0ZpeGVkTGF5b3V0KCksIHNwaW5lSXRlbS5pc0ZpeGVkTGF5b3V0KCkgPyBsb2FkZWRWaWV3Lm1ldGFfd2lkdGgoKSA6IDAsIFwib3BlblBhZ2VcIiwgY29udGludWVDYWxsYmFjayk7IC8vIC8vb25JRnJhbWVMb2FkIGNhbGxlZCBiZWZvcmUgdGhpcyBjYWxsYmFjaywgc28gb2theS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gbG9hZCBcIiArIHNwaW5lSXRlbS5ocmVmKTtcblxuICAgICAgICByZW1vdmVQYWdlVmlldyhsb2FkZWRWaWV3KTtcbiAgICAgICAgbG9hZGVkVmlldyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sobG9hZGVkVmlldyk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgdGhpcy5hcHBseVN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgc2V0U3R5bGVzKF91c2VyU3R5bGVzLmdldFN0eWxlcygpLCBfJGVsLnBhcmVudCgpKTtcblxuICAgIC8vYmVjYXVzZSBsZWZ0LCB0b3AsIGJvdHRvbSwgcmlnaHQgc2V0dGluZyBpZ25vcmVzIHBhZGRpbmcgb2YgcGFyZW50IGNvbnRhaW5lclxuICAgIC8vd2UgaGF2ZSB0byB0YWtlIGl0IHRvIGFjY291bnQgbWFudWFsbHlcbiAgICB2YXIgZWxlbWVudE1hcmdpbnMgPSBNYXJnaW5zLmZyb21FbGVtZW50KF8kZWwpO1xuXG4gICAgc2V0RnJhbWVTaXplc1RvUmVjdGFuZ2xlKGVsZW1lbnRNYXJnaW5zLnBhZGRpbmcpO1xuXG4gIH07XG5cbiAgdGhpcy5hcHBseUJvb2tTdHlsZXMgPSBmdW5jdGlvbigpIHtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuICAgICAgcGFnZVZpZXcuYXBwbHlCb29rU3R5bGVzKCk7XG4gICAgfSwgZmFsc2UpO1xuICB9O1xuXG5cbiAgdGhpcy5vcGVuUGFnZSA9IGZ1bmN0aW9uKHBhZ2VSZXF1ZXN0KSB7XG5cbiAgICBfc3RvcFRyYW5zaWVudFZpZXdVcGRhdGUgPSB0cnVlO1xuXG4gICAgLy9sb2NhbCBoZWxwZXIgZnVuY3Rpb25cbiAgICB2YXIgZG9uZUxvYWRpbmdTcGluZUl0ZW0gPSBmdW5jdGlvbihwYWdlVmlldywgcGFnZVJlcXVlc3QpIHtcblxuICAgICAgX2RlZmVycmVkUGFnZVJlcXVlc3QgPSB1bmRlZmluZWQ7XG4gICAgICBvcGVuUGFnZVZpZXdFbGVtZW50KHBhZ2VWaWV3LCBwYWdlUmVxdWVzdCk7XG4gICAgICBfc3RvcFRyYW5zaWVudFZpZXdVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZVRyYW5zaWVudFZpZXdzKHBhZ2VWaWV3KTtcbiAgICB9O1xuXG4gICAgaWYgKHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSkge1xuXG4gICAgICB2YXIgcGFnZVZpZXcgPSBmaW5kUGFnZVZpZXdGb3JTcGluZUl0ZW0ocGFnZVJlcXVlc3Quc3BpbmVJdGVtKTtcbiAgICAgIGlmIChwYWdlVmlldykge1xuICAgICAgICBkb25lTG9hZGluZ1NwaW5lSXRlbShwYWdlVmlldywgcGFnZVJlcXVlc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2RlZmVycmVkUGFnZVJlcXVlc3QgPSBwYWdlUmVxdWVzdDtcbiAgICAgICAgX2lzTG9hZGluZ05ld1NwaW5lSXRlbU9uUGFnZVJlcXVlc3QgPSB0cnVlO1xuXG4gICAgICAgIGxvYWRTcGluZUl0ZW0ocGFnZVJlcXVlc3Quc3BpbmVJdGVtLCBmdW5jdGlvbihwYWdlVmlldykge1xuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF9pc0xvYWRpbmdOZXdTcGluZUl0ZW1PblBhZ2VSZXF1ZXN0ID0gZmFsc2U7XG4gICAgICAgICAgfSwgT05fU0NST0xMX1RJTUVfREFMQVkgKyAxMDApO1xuXG4gICAgICAgICAgaWYgKHBhZ2VWaWV3ICYmIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0KSB7XG4gICAgICAgICAgICBpZiAocGFnZVZpZXcuY3VycmVudFNwaW5lSXRlbSgpID09PSBfZGVmZXJyZWRQYWdlUmVxdWVzdC5zcGluZUl0ZW0pIHtcbiAgICAgICAgICAgICAgZG9uZUxvYWRpbmdTcGluZUl0ZW0ocGFnZVZpZXcsIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vd2hpbGUgd2Ugd2hlcmUgd2FpdGluZyBmb3IgbG9hZCBuZXcgcmVxdWVzdCBjb21lXG4gICAgICAgICAgICAgIHNlbGYub3BlblBhZ2UoX2RlZmVycmVkUGFnZVJlcXVlc3QpOyAvL3JlY3Vyc2lvblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvblBhZ2luYXRpb25DaGFuZ2VkKHBhZ2VSZXF1ZXN0LmluaXRpYXRvciwgcGFnZVJlcXVlc3Quc3BpbmVJdGVtLCBwYWdlUmVxdWVzdC5lbGVtZW50SWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZG9uZUxvYWRpbmdTcGluZUl0ZW0odW5kZWZpbmVkLCBwYWdlUmVxdWVzdCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIG9wZW5QYWdlVmlld0VsZW1lbnQocGFnZVZpZXcsIHBhZ2VSZXF1ZXN0KSB7XG5cbiAgICB2YXIgdG9wT2Zmc2V0ID0gMDtcbiAgICB2YXIgcGFnZUNvdW50O1xuICAgIHZhciAkZWxlbWVudDtcbiAgICB2YXIgc2ZpTmF2O1xuICAgIHZhciBwYWdlUmFuZ2U7XG5cbiAgICBpZiAocGFnZVJlcXVlc3Quc2Nyb2xsVG9wICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgdG9wT2Zmc2V0ID0gcGFnZVJlcXVlc3Quc2Nyb2xsVG9wO1xuICAgIH0gZWxzZSBpZiAocGFnZVJlcXVlc3Quc3BpbmVJdGVtUGFnZUluZGV4ICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgdmFyIHBhZ2VJbmRleDtcbiAgICAgIHBhZ2VDb3VudCA9IGNhbGN1bGF0ZVBhZ2VDb3VudCgpO1xuICAgICAgaWYgKHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbVBhZ2VJbmRleCA8IDApIHtcbiAgICAgICAgcGFnZUluZGV4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocGFnZVJlcXVlc3Quc3BpbmVJdGVtUGFnZUluZGV4ID49IHBhZ2VDb3VudCkge1xuICAgICAgICBwYWdlSW5kZXggPSBwYWdlQ291bnQgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnZUluZGV4ID0gcGFnZVJlcXVlc3Quc3BpbmVJdGVtUGFnZUluZGV4O1xuICAgICAgfVxuXG4gICAgICB0b3BPZmZzZXQgPSBwYWdlSW5kZXggKiB2aWV3SGVpZ2h0KCk7XG4gICAgfSBlbHNlIGlmIChwYWdlVmlldyAmJiBwYWdlUmVxdWVzdC5lbGVtZW50SWQpIHtcblxuICAgICAgcGFnZVJhbmdlID0gZ2V0UGFnZVZpZXdSYW5nZShwYWdlVmlldyk7XG4gICAgICBzZmlOYXYgPSBwYWdlVmlldy5nZXROYXZpZ2F0b3IoKTtcbiAgICAgICRlbGVtZW50ID0gc2ZpTmF2LmdldEVsZW1lbnRCeUlkKHBhZ2VSZXF1ZXN0LmVsZW1lbnRJZCk7XG5cbiAgICAgIGlmICghJGVsZW1lbnQgfHwgISRlbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJFbGVtZW50IGlkPVwiICsgcGFnZVJlcXVlc3QuZWxlbWVudElkICsgXCIgbm90IGZvdW5kIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNFbGVtZW50VmlzaWJsZU9uU2NyZWVuKHBhZ2VWaWV3LCAkZWxlbWVudCwgNjApKSB7XG4gICAgICAgIC8vVE9ETyByZWZhY3RvcmluZyByZXF1aXJlZFxuICAgICAgICAvLyB0aGlzIGlzIGFydGlmaWNpYWwgY2FsbCBiZWNhdXNlIE1PIHBsYXllciB3YWl0cyBmb3IgdGhpcyBldmVudCB0byBjb250aW51ZSBwbGF5aW5nLlxuICAgICAgICBvblBhZ2luYXRpb25DaGFuZ2VkKHBhZ2VSZXF1ZXN0LmluaXRpYXRvciwgcGFnZVJlcXVlc3Quc3BpbmVJdGVtLCBwYWdlUmVxdWVzdC5lbGVtZW50SWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRvcE9mZnNldCA9IHNmaU5hdi5nZXRWZXJ0aWNhbE9mZnNldEZvckVsZW1lbnQoJGVsZW1lbnQpICsgcGFnZVJhbmdlLnRvcDtcblxuICAgIH0gZWxzZSBpZiAocGFnZVZpZXcgJiYgcGFnZVJlcXVlc3QuZWxlbWVudENmaSkge1xuXG4gICAgICBwYWdlUmFuZ2UgPSBnZXRQYWdlVmlld1JhbmdlKHBhZ2VWaWV3KTtcbiAgICAgIHNmaU5hdiA9IHBhZ2VWaWV3LmdldE5hdmlnYXRvcigpO1xuICAgICAgJGVsZW1lbnQgPSBzZmlOYXYuZ2V0RWxlbWVudEJ5Q2ZpKHBhZ2VSZXF1ZXN0LmVsZW1lbnRDZmkpO1xuXG4gICAgICBpZiAoISRlbGVtZW50IHx8ICEkZWxlbWVudC5sZW5ndGgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRWxlbWVudCBjZmk9XCIgKyBwYWdlUmVxdWVzdC5lbGVtZW50Q2ZpICsgXCIgbm90IGZvdW5kIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNFbGVtZW50VmlzaWJsZU9uU2NyZWVuKHBhZ2VWaWV3LCAkZWxlbWVudCwgNjApKSB7XG4gICAgICAgIC8vVE9ETyByZWZhY3RvcmluZyByZXF1aXJlZFxuICAgICAgICAvLyB0aGlzIGlzIGFydGlmaWNpYWwgY2FsbCBiZWNhdXNlIE1PIHBsYXllciB3YWl0cyBmb3IgdGhpcyBldmVudCB0byBjb250aW51ZSBwbGF5aW5nLlxuICAgICAgICBvblBhZ2luYXRpb25DaGFuZ2VkKHBhZ2VSZXF1ZXN0LmluaXRpYXRvciwgcGFnZVJlcXVlc3Quc3BpbmVJdGVtLCBwYWdlUmVxdWVzdC5lbGVtZW50SWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRvcE9mZnNldCA9IHNmaU5hdi5nZXRWZXJ0aWNhbE9mZnNldEZvckVsZW1lbnQoJGVsZW1lbnQpICsgcGFnZVJhbmdlLnRvcDtcblxuICAgIH0gZWxzZSBpZiAocGFnZVJlcXVlc3QuZmlyc3RQYWdlKSB7XG5cbiAgICAgIHRvcE9mZnNldCA9IDA7XG4gICAgfSBlbHNlIGlmIChwYWdlUmVxdWVzdC5sYXN0UGFnZSkge1xuICAgICAgcGFnZUNvdW50ID0gY2FsY3VsYXRlUGFnZUNvdW50KCk7XG5cbiAgICAgIGlmIChwYWdlQ291bnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b3BPZmZzZXQgPSBzY3JvbGxIZWlnaHQoKSAtIHZpZXdIZWlnaHQoKSAtIDU7XG4gICAgfSBlbHNlIGlmIChwYWdlVmlldykge1xuXG4gICAgICBwYWdlUmFuZ2UgPSBnZXRQYWdlVmlld1JhbmdlKHBhZ2VWaWV3KTtcbiAgICAgIHRvcE9mZnNldCA9IHBhZ2VSYW5nZS50b3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcE9mZnNldCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbFRvcCgpICE9IHRvcE9mZnNldCkge1xuXG4gICAgICBfaXNTZXR0aW5nU2Nyb2xsUG9zaXRpb24gPSB0cnVlO1xuICAgICAgc2Nyb2xsVG8odG9wT2Zmc2V0LCBwYWdlUmVxdWVzdCk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIF9pc1NldHRpbmdTY3JvbGxQb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgfSwgT05fU0NST0xMX1RJTUVfREFMQVkgKyAxMDApOyAvL3dlIGhhdmUgdG8gd2FpdCBtb3JlIHRoYW4gc2Nyb2xsIGRlbGF5IHRvIG1ha2Ugc3VyZSB0aGF0IHdlIGRvbid0IHJlYWN0IG9uIG9uU2Nyb2xsXG5cbiAgICB9IGVsc2Uge1xuICAgICAgb25QYWdpbmF0aW9uQ2hhbmdlZChwYWdlUmVxdWVzdC5pbml0aWF0b3IsIHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSwgcGFnZVJlcXVlc3QuZWxlbWVudElkKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYWxjdWxhdGVQYWdlQ291bnQoKSB7XG5cbiAgICByZXR1cm4gTWF0aC5jZWlsKHNjcm9sbEhlaWdodCgpIC8gdmlld0hlaWdodCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUGFnaW5hdGlvbkNoYW5nZWQoaW5pdGlhdG9yLCBwYWdpbmF0aW9uUmVxdWVzdF9zcGluZUl0ZW0sIHBhZ2luYXRpb25SZXF1ZXN0X2VsZW1lbnRJZCkge1xuICAgIHNlbGYudHJpZ2dlcihJbnRlcm5hbEV2ZW50cy5DVVJSRU5UX1ZJRVdfUEFHSU5BVElPTl9DSEFOR0VELCB7XG4gICAgICBwYWdpbmF0aW9uSW5mbzogc2VsZi5nZXRQYWdpbmF0aW9uSW5mbygpLFxuICAgICAgaW5pdGlhdG9yOiBpbml0aWF0b3IsXG4gICAgICBzcGluZUl0ZW06IHBhZ2luYXRpb25SZXF1ZXN0X3NwaW5lSXRlbSxcbiAgICAgIGVsZW1lbnRJZDogcGFnaW5hdGlvblJlcXVlc3RfZWxlbWVudElkXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzY3JvbGxUb3AoKSB7XG4gICAgcmV0dXJuIF8kY29udGVudEZyYW1lWzBdLnNjcm9sbFRvcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjcm9sbEJvdHRvbSgpIHtcbiAgICByZXR1cm4gc2Nyb2xsSGVpZ2h0KCkgLSAoc2Nyb2xsVG9wKCkgKyB2aWV3SGVpZ2h0KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdmlld0hlaWdodCgpIHtcbiAgICByZXR1cm4gXyRjb250ZW50RnJhbWUuaGVpZ2h0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBzY3JvbGxIZWlnaHQoKSB7XG4gICAgcmV0dXJuIF8kY29udGVudEZyYW1lWzBdLnNjcm9sbEhlaWdodDtcbiAgfVxuXG4gIHRoaXMub3BlblBhZ2VOZXh0ID0gZnVuY3Rpb24oaW5pdGlhdG9yKSB7XG5cbiAgICB2YXIgcGFnZVJlcXVlc3Q7XG5cbiAgICBpZiAoc2Nyb2xsQm90dG9tKCkgPiAwKSB7XG5cbiAgICAgIHBhZ2VSZXF1ZXN0ID0gbmV3IFBhZ2VPcGVuUmVxdWVzdCh1bmRlZmluZWQsIGluaXRpYXRvcik7XG4gICAgICBwYWdlUmVxdWVzdC5zY3JvbGxUb3AgPSBzY3JvbGxUb3AoKSArIE1hdGgubWluKHNjcm9sbEJvdHRvbSgpLCB2aWV3SGVpZ2h0KCkgLSBTQ1JPTExfTUFSR0lOX1RPX1NIT1dfTEFTVF9WSVNCTEVfTElORSk7XG4gICAgICBvcGVuUGFnZVZpZXdFbGVtZW50KHVuZGVmaW5lZCwgcGFnZVJlcXVlc3QpO1xuICAgIH1cblxuICB9O1xuXG4gIHRoaXMub3BlblBhZ2VQcmV2ID0gZnVuY3Rpb24oaW5pdGlhdG9yKSB7XG5cbiAgICB2YXIgcGFnZVJlcXVlc3Q7XG5cbiAgICBpZiAoc2Nyb2xsVG9wKCkgPiAwKSB7XG5cbiAgICAgIHBhZ2VSZXF1ZXN0ID0gbmV3IFBhZ2VPcGVuUmVxdWVzdCh1bmRlZmluZWQsIGluaXRpYXRvcik7XG4gICAgICBwYWdlUmVxdWVzdC5zY3JvbGxUb3AgPSBzY3JvbGxUb3AoKSAtICh2aWV3SGVpZ2h0KCkgLSBTQ1JPTExfTUFSR0lOX1RPX1NIT1dfTEFTVF9WSVNCTEVfTElORSk7XG4gICAgICBpZiAocGFnZVJlcXVlc3Quc2Nyb2xsVG9wIDwgMCkge1xuICAgICAgICBwYWdlUmVxdWVzdC5zY3JvbGxUb3AgPSAwO1xuICAgICAgfVxuXG4gICAgICBvcGVuUGFnZVZpZXdFbGVtZW50KHVuZGVmaW5lZCwgcGFnZVJlcXVlc3QpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBnZXRWaXNpYmxlUGFnZVZpZXdzKCkge1xuXG4gICAgdmFyIHZpZXdzID0gW107XG5cbiAgICB2YXIgcmFuZ2UgPSBnZXRWaXNpYmxlUmFuZ2UoLVNDUk9MTF9NQVJHSU5fVE9fU0hPV19MQVNUX1ZJU0JMRV9MSU5FKTtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuXG4gICAgICBpZiAoaXNQYWdlVmlld1Zpc2libGVJblJhbmdlKHBhZ2VWaWV3LCByYW5nZSkpIHtcblxuICAgICAgICB2aWV3cy5wdXNoKHBhZ2VWaWV3KTtcbiAgICAgIH0gZWxzZSBpZiAodmlld3MubGVuZ3RoID4gMCkge1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICB9LCBmYWxzZSk7XG5cbiAgICByZXR1cm4gdmlld3M7XG5cbiAgfVxuXG5cbiAgZnVuY3Rpb24gZ2V0Rmlyc3RWaXNpYmxlUGFnZVZpZXcoKSB7XG5cbiAgICB2YXIgdmlzaWJsZVZpZXdzID0gZ2V0VmlzaWJsZVBhZ2VWaWV3cygpO1xuXG4gICAgcmV0dXJuIHZpc2libGVWaWV3c1swXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGFnZVZpZXdWaXNpYmxlSW5SYW5nZShwYWdlVmlldywgcmFuZ2UpIHtcbiAgICB2YXIgcGFnZVZpZXdSYW5nZSA9IGdldFBhZ2VWaWV3UmFuZ2UocGFnZVZpZXcpO1xuICAgIHJldHVybiByYW5nZUxlbmd0aChpbnRlcnNlY3RSYW5nZXMocGFnZVZpZXdSYW5nZSwgcmFuZ2UpKSA+IDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQYWdlVmlld1JhbmdlKHBhZ2VWaWV3KSB7XG4gICAgdmFyIHJhbmdlID0ge1xuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwXG4gICAgfTtcblxuICAgIHJhbmdlLnRvcCA9IHBhZ2VWaWV3LmVsZW1lbnQoKS5wb3NpdGlvbigpLnRvcCArIHNjcm9sbFRvcCgpO1xuICAgIHJhbmdlLmJvdHRvbSA9IHJhbmdlLnRvcCArIHBhZ2VWaWV3LmdldENhbGN1bGF0ZWRQYWdlSGVpZ2h0KCk7XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cblxuICB0aGlzLmdldEZpcnN0VmlzaWJsZUVsZW1lbnRDZmkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlzaWJsZVZpZXdQYWdlID0gZ2V0Rmlyc3RWaXNpYmxlUGFnZVZpZXcoKTtcbiAgICBpZiAodmlzaWJsZVZpZXdQYWdlKSB7XG4gICAgICByZXR1cm4gdmlzaWJsZVZpZXdQYWdlLmdldE5hdmlnYXRvcigpLmdldEZpcnN0VmlzaWJsZUVsZW1lbnRDZmkoc2Nyb2xsVG9wKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5nZXRQYWdpbmF0aW9uSW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzcGluZUl0ZW07XG4gICAgdmFyIHBhZ2VDb3VudDtcbiAgICB2YXIgcGFnZVZpZXc7XG4gICAgdmFyIHBhZ2VWaWV3UmFuZ2U7XG4gICAgdmFyIGhlaWdodEFib3ZlVmlld3BvcnQ7XG4gICAgdmFyIGhlaWdodEJlbG93Vmlld3BvcnQ7XG4gICAgdmFyIHBhZ2VDb3VudEFib3ZlO1xuICAgIHZhciBwYWdlQ291bnRCZWxvdztcblxuICAgIHZhciB2aWV3UG9ydFJhbmdlID0gZ2V0VmlzaWJsZVJhbmdlKCk7XG4gICAgdmFyIHZpZXdQb3J0SGVpZ2h0ID0gdmlld1BvcnRSYW5nZS5ib3R0b20gLSB2aWV3UG9ydFJhbmdlLnRvcDtcblxuICAgIHZhciBwYWdpbmF0aW9uSW5mbyA9IG5ldyBDdXJyZW50UGFnZXNJbmZvKF9zcGluZSwgZmFsc2UpO1xuXG4gICAgdmFyIHZpc2libGVWaWV3cyA9IGdldFZpc2libGVQYWdlVmlld3MoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IHZpc2libGVWaWV3cy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG5cbiAgICAgIHBhZ2VWaWV3ID0gdmlzaWJsZVZpZXdzW2ldO1xuICAgICAgc3BpbmVJdGVtID0gcGFnZVZpZXcuY3VycmVudFNwaW5lSXRlbSgpO1xuICAgICAgcGFnZVZpZXdSYW5nZSA9IGdldFBhZ2VWaWV3UmFuZ2UocGFnZVZpZXcpO1xuXG4gICAgICBoZWlnaHRBYm92ZVZpZXdwb3J0ID0gTWF0aC5tYXgodmlld1BvcnRSYW5nZS50b3AgLSBwYWdlVmlld1JhbmdlLnRvcCwgMCk7XG4gICAgICBoZWlnaHRCZWxvd1ZpZXdwb3J0ID0gTWF0aC5tYXgocGFnZVZpZXdSYW5nZS5ib3R0b20gLSB2aWV3UG9ydFJhbmdlLmJvdHRvbSwgMCk7XG5cbiAgICAgIHBhZ2VDb3VudEFib3ZlID0gTWF0aC5jZWlsKGhlaWdodEFib3ZlVmlld3BvcnQgLyB2aWV3UG9ydEhlaWdodCk7XG4gICAgICBwYWdlQ291bnRCZWxvdyA9IE1hdGguY2VpbChoZWlnaHRCZWxvd1ZpZXdwb3J0IC8gdmlld1BvcnRIZWlnaHQpO1xuICAgICAgcGFnZUNvdW50ID0gcGFnZUNvdW50QWJvdmUgKyBwYWdlQ291bnRCZWxvdyArIDE7XG5cbiAgICAgIHBhZ2luYXRpb25JbmZvLmFkZE9wZW5QYWdlKHBhZ2VDb3VudEFib3ZlLCBwYWdlQ291bnQsIHNwaW5lSXRlbS5pZHJlZiwgc3BpbmVJdGVtLmluZGV4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFnaW5hdGlvbkluZm87XG4gIH07XG5cbiAgdGhpcy5ib29rbWFya0N1cnJlbnRQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhZ2VWaWV3ID0gZ2V0Rmlyc3RWaXNpYmxlUGFnZVZpZXcoKTtcblxuICAgIGlmICghcGFnZVZpZXcpIHtcblxuICAgICAgcmV0dXJuIG5ldyBCb29rbWFya0RhdGEoXCJcIiwgXCJcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBCb29rbWFya0RhdGEocGFnZVZpZXcuY3VycmVudFNwaW5lSXRlbSgpLmlkcmVmLCBzZWxmLmdldEZpcnN0VmlzaWJsZUVsZW1lbnRDZmkoKSk7XG4gIH07XG5cblxuICB0aGlzLmdldExvYWRlZFNwaW5lSXRlbXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3BpbmVJdGVtcyA9IFtdO1xuXG4gICAgZm9yRWFjaEl0ZW1WaWV3KGZ1bmN0aW9uKHBhZ2VWaWV3KSB7XG4gICAgICBzcGluZUl0ZW1zLnB1c2gocGFnZVZpZXcuY3VycmVudFNwaW5lSXRlbSgpKTtcbiAgICB9LCBmYWxzZSk7XG5cbiAgICByZXR1cm4gc3BpbmVJdGVtcztcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnQgPSBmdW5jdGlvbihzcGluZUl0ZW0sIHNlbGVjdG9yKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB1bmRlZmluZWQ7XG5cbiAgICBmb3JFYWNoSXRlbVZpZXcoZnVuY3Rpb24ocGFnZVZpZXcpIHtcbiAgICAgIGlmIChwYWdlVmlldy5jdXJyZW50U3BpbmVJdGVtKCkgPT0gc3BpbmVJdGVtKSB7XG5cbiAgICAgICAgZWxlbWVudCA9IHBhZ2VWaWV3LmdldE5hdmlnYXRvcigpLmdldEVsZW1lbnQoc2VsZWN0b3IpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICB9LCBmYWxzZSk7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnRCeUNmaSA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgY2ZpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgIHZhciBmb3VuZCA9IHVuZGVmaW5lZDtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuICAgICAgaWYgKHBhZ2VWaWV3LmN1cnJlbnRTcGluZUl0ZW0oKSA9PSBzcGluZUl0ZW0pIHtcblxuICAgICAgICBmb3VuZCA9IHBhZ2VWaWV3LmdldEVsZW1lbnRCeUNmaShzcGluZUl0ZW0sIGNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIH0sIGZhbHNlKTtcblxuICAgIGlmICghZm91bmQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnRCeUlkID0gZnVuY3Rpb24oc3BpbmVJdGVtLCBpZCkge1xuXG4gICAgdmFyIGZvdW5kID0gdW5kZWZpbmVkO1xuXG4gICAgZm9yRWFjaEl0ZW1WaWV3KGZ1bmN0aW9uKHBhZ2VWaWV3KSB7XG4gICAgICBpZiAocGFnZVZpZXcuY3VycmVudFNwaW5lSXRlbSgpID09IHNwaW5lSXRlbSkge1xuXG4gICAgICAgIGZvdW5kID0gcGFnZVZpZXcuZ2V0TmF2aWdhdG9yKCkuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSwgZmFsc2UpO1xuXG4gICAgaWYgKCFmb3VuZCkge1xuICAgICAgY29uc29sZS5lcnJvcihcInNwaW5lIGl0ZW0gaXMgbm90IGxvYWRlZFwiKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kO1xuICB9O1xuXG4gIHRoaXMuZ2V0Rmlyc3RWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3UG9ydFJhbmdlID0gZ2V0VmlzaWJsZVJhbmdlKCk7XG5cbiAgICB2YXIgbW9FbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgIHZhciBub3JtYWxpemVkUmFuZ2UgPSB7XG4gICAgICB0b3A6IDAsXG4gICAgICBib3R0b206IDBcbiAgICB9O1xuICAgIHZhciBwYWdlVmlld1JhbmdlO1xuXG4gICAgdmFyIHN0ZXBwZWRUb1Zpc2libGVQYWdlID0gZmFsc2U7XG5cbiAgICBmb3JFYWNoSXRlbVZpZXcoZnVuY3Rpb24ocGFnZVZpZXcpIHtcbiAgICAgIHBhZ2VWaWV3UmFuZ2UgPSBnZXRQYWdlVmlld1JhbmdlKHBhZ2VWaWV3KTtcblxuICAgICAgbm9ybWFsaXplZFJhbmdlLnRvcCA9IE1hdGgubWF4KHBhZ2VWaWV3UmFuZ2UudG9wLCB2aWV3UG9ydFJhbmdlLnRvcCkgLSBwYWdlVmlld1JhbmdlLnRvcDtcbiAgICAgIG5vcm1hbGl6ZWRSYW5nZS5ib3R0b20gPSBNYXRoLm1pbihwYWdlVmlld1JhbmdlLmJvdHRvbSwgdmlld1BvcnRSYW5nZS5ib3R0b20pIC0gcGFnZVZpZXdSYW5nZS50b3A7XG5cbiAgICAgIGlmIChyYW5nZUxlbmd0aChub3JtYWxpemVkUmFuZ2UpID4gMCkge1xuICAgICAgICBzdGVwcGVkVG9WaXNpYmxlUGFnZSA9IHRydWU7XG5cbiAgICAgICAgbW9FbGVtZW50ID0gcGFnZVZpZXcuZ2V0TmF2aWdhdG9yKCkuZ2V0Rmlyc3RWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudChub3JtYWxpemVkUmFuZ2UpO1xuICAgICAgICBpZiAobW9FbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0ZXBwZWRUb1Zpc2libGVQYWdlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7IC8vY29udGludWUgaXRlcmF0aW9uXG5cbiAgICB9LCBmYWxzZSk7XG5cbiAgICByZXR1cm4gbW9FbGVtZW50O1xuICB9O1xuXG4gIC8vIC8qKlxuICAvLyAgKiBAZGVwcmVjYXRlZFxuICAvLyAgKi9cbiAgLy8gdGhpcy5nZXRWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gICAgIHZhciB2aWV3UG9ydFJhbmdlID0gZ2V0VmlzaWJsZVJhbmdlKCk7XG4gIC8vIFxuICAvLyAgICAgdmFyIHBhZ2VNb0VsZW1lbnRzO1xuICAvLyAgICAgdmFyIG1vRWxlbWVudHMgPSBbXTtcbiAgLy8gICAgIHZhciBub3JtYWxpemVkUmFuZ2UgPSB7dG9wOiAwLCBib3R0b206IDB9O1xuICAvLyAgICAgdmFyIHBhZ2VWaWV3UmFuZ2U7XG4gIC8vIFxuICAvLyAgICAgZm9yRWFjaEl0ZW1WaWV3KGZ1bmN0aW9uKHBhZ2VWaWV3KXtcbiAgLy8gICAgICAgICBwYWdlVmlld1JhbmdlID0gZ2V0UGFnZVZpZXdSYW5nZShwYWdlVmlldyk7XG4gIC8vIFxuICAvLyAgICAgICAgIG5vcm1hbGl6ZWRSYW5nZS50b3AgPSBNYXRoLm1heChwYWdlVmlld1JhbmdlLnRvcCwgdmlld1BvcnRSYW5nZS50b3ApIC0gcGFnZVZpZXdSYW5nZS50b3A7XG4gIC8vICAgICAgICAgbm9ybWFsaXplZFJhbmdlLmJvdHRvbSA9IE1hdGgubWluKHBhZ2VWaWV3UmFuZ2UuYm90dG9tLCB2aWV3UG9ydFJhbmdlLmJvdHRvbSkgLSBwYWdlVmlld1JhbmdlLnRvcDtcbiAgLy8gXG4gIC8vICAgICAgICAgaWYocmFuZ2VMZW5ndGgobm9ybWFsaXplZFJhbmdlKSA+IDApIHtcbiAgLy8gICAgICAgICAgICAgcGFnZU1vRWxlbWVudHMgPSBwYWdlVmlldy5nZXROYXZpZ2F0b3IoKS5nZXRWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudHMobm9ybWFsaXplZFJhbmdlKTtcbiAgLy8gICAgICAgICAgICAgbW9FbGVtZW50cy5wdXNoLmFwcGx5KG1vRWxlbWVudHMsIHBhZ2VNb0VsZW1lbnRzKTtcbiAgLy8gICAgICAgICB9XG4gIC8vICAgICB9LCBmYWxzZSk7XG4gIC8vIFxuICAvLyAgICAgcmV0dXJuIG1vRWxlbWVudHM7XG4gIC8vIH07XG5cbiAgZnVuY3Rpb24gZ2V0VmlzaWJsZVJhbmdlKGV4cGFuZCkge1xuICAgIGlmIChleHBhbmQgIT09IDAgJiYgIWV4cGFuZCkge1xuICAgICAgZXhwYW5kID0gMDtcbiAgICB9XG5cbiAgICB2YXIgcmFuZ2UgPSB7XG5cbiAgICAgIHRvcDogc2Nyb2xsVG9wKCkgLSBleHBhbmQsXG4gICAgICBib3R0b206IHNjcm9sbFRvcCgpICsgdmlld0hlaWdodCgpICsgZXhwYW5kXG4gICAgfTtcblxuICAgIGlmIChyYW5nZS50b3AgPCAwKSB7XG4gICAgICByYW5nZS50b3AgPSAwO1xuICAgIH1cblxuICAgIGlmIChyYW5nZS5ib3R0b20gPiBzY3JvbGxIZWlnaHQoKSkge1xuICAgICAgcmFuZ2UuYm90dG9tID0gc2Nyb2xsSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlO1xuXG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnNlY3RSYW5nZXMocjEsIHIyKSB7XG4gICAgcmV0dXJuIHtcblxuICAgICAgdG9wOiBNYXRoLm1heChyMS50b3AsIHIyLnRvcCksXG4gICAgICBib3R0b206IE1hdGgubWluKHIxLmJvdHRvbSwgcjIuYm90dG9tKVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByYW5nZUxlbmd0aChyYW5nZSkge1xuICAgIGlmIChyYW5nZS5ib3R0b20gPCByYW5nZS50b3ApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZS5ib3R0b20gLSByYW5nZS50b3A7XG4gIH1cblxuICBmdW5jdGlvbiBpc0VsZW1lbnRWaXNpYmxlT25TY3JlZW4ocGFnZVZpZXcsICRlbGVtZW50LCBwZXJjZW50VmlzaWJsZSkge1xuXG4gICAgdmFyIGVsZW1lbnRSYW5nZSA9IGdldEVsZW1lbnRSYW5nZShwYWdlVmlldywgJGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIGlzUmFuZ2VJc1Zpc2libGVPblNjcmVlbihlbGVtZW50UmFuZ2UsIHBlcmNlbnRWaXNpYmxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUmFuZ2VJc1Zpc2libGVPblNjcmVlbihyYW5nZSwgcGVyY2VudFZpc2libGUpIHtcblxuICAgIHZhciB2aXNpYmxlUmFuZ2UgPSBnZXRWaXNpYmxlUmFuZ2UoKTtcblxuICAgIHZhciBzbWFsbGVzdFZpc2libGVMZW5ndGggPSBNYXRoLm1pbihyYW5nZUxlbmd0aCh2aXNpYmxlUmFuZ2UpLCByYW5nZUxlbmd0aChyYW5nZSkpO1xuICAgIGlmIChzbWFsbGVzdFZpc2libGVMZW5ndGggPT09IDApIHtcbiAgICAgIHNtYWxsZXN0VmlzaWJsZUxlbmd0aCA9IDU7IC8vIGlmIGVsZW1lbnQgaXMgMCBoZWlnaHQgd2Ugd2lsbCBzZXQgaXQgdG8gYXJiaXRyYXJ5IDUgcGl4ZWxzIC0gbm90IHRvIGRpdmlkZSBieSAwXG4gICAgfVxuXG4gICAgdmFyIGludGVyc2VjdGlvblJhbmdlID0gaW50ZXJzZWN0UmFuZ2VzKHZpc2libGVSYW5nZSwgcmFuZ2UpO1xuXG4gICAgdmFyIHZpc2libGVQZXJjZW50ID0gKHJhbmdlTGVuZ3RoKGludGVyc2VjdGlvblJhbmdlKSAvIHNtYWxsZXN0VmlzaWJsZUxlbmd0aCkgKiAxMDA7XG5cbiAgICByZXR1cm4gdmlzaWJsZVBlcmNlbnQgPj0gcGVyY2VudFZpc2libGU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRFbGVtZW50UmFuZ2UocGFnZVZpZXcsICRlbGVtZW50KSB7XG5cbiAgICB2YXIgcGFnZVJhbmdlID0gZ2V0UGFnZVZpZXdSYW5nZShwYWdlVmlldyk7XG5cbiAgICB2YXIgZWxlbWVudFJhbmdlID0ge1xuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwXG4gICAgfTtcbiAgICBlbGVtZW50UmFuZ2UudG9wID0gJGVsZW1lbnQub2Zmc2V0KCkudG9wICsgcGFnZVJhbmdlLnRvcDtcbiAgICBlbGVtZW50UmFuZ2UuYm90dG9tID0gZWxlbWVudFJhbmdlLnRvcCArICRlbGVtZW50LmhlaWdodCgpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnRSYW5nZTtcbiAgfVxuXG4gIHRoaXMuaW5zdXJlRWxlbWVudFZpc2liaWxpdHkgPSBmdW5jdGlvbihzcGluZUl0ZW1JZCwgZWxlbWVudCwgaW5pdGlhdG9yKSB7XG4gICAgdmFyIHBhZ2VWaWV3ID0gdW5kZWZpbmVkO1xuXG4gICAgZm9yRWFjaEl0ZW1WaWV3KGZ1bmN0aW9uKHB2KSB7XG4gICAgICBpZiAocHYuY3VycmVudFNwaW5lSXRlbSgpLmlkcmVmID09PSBzcGluZUl0ZW1JZCkge1xuXG4gICAgICAgIHBhZ2VWaWV3ID0gcHY7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgaWYgKCFwYWdlVmlldykge1xuICAgICAgY29uc29sZS53YXJuKFwiUGFnZSBmb3IgZWxlbWVudCBcIiArIGVsZW1lbnQgKyBcIiBub3QgZm91bmRcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KTtcblxuICAgIHZhciBlbGVtZW50UmFuZ2UgPSBnZXRFbGVtZW50UmFuZ2UocGFnZVZpZXcsICRlbGVtZW50KTtcblxuICAgIGlmICghaXNSYW5nZUlzVmlzaWJsZU9uU2NyZWVuKGVsZW1lbnRSYW5nZSwgNjApKSB7XG5cbiAgICAgIHZhciBzcGluZUl0ZW0gPSBfc3BpbmUuZ2V0SXRlbUJ5SWQoc3BpbmVJdGVtSWQpO1xuICAgICAgdmFyIG9wZW5QYWdlUmVxdWVzdCA9IG5ldyBQYWdlT3BlblJlcXVlc3Qoc3BpbmVJdGVtLCBpbml0aWF0b3IpO1xuICAgICAgb3BlblBhZ2VSZXF1ZXN0LnNjcm9sbFRvcCA9IGVsZW1lbnRSYW5nZS50b3A7XG5cbiAgICAgIHNlbGYub3BlblBhZ2Uob3BlblBhZ2VSZXF1ZXN0KTtcbiAgICB9XG5cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNjcm9sbFZpZXciXX0=
