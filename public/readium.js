(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/craverod/opensource/readium-js/lib/epubjs/parser.js":[function(require,module,exports){
var Parser = function(baseUrl){
  this.baseUrl = baseUrl || '';
};

Parser.prototype.nav = function(navHtml, spineIndexByURL, bookSpine){
  var navEl = navHtml.querySelector('nav[*|type="toc"]'), //-- [*|type="toc"] * Doesn't seem to work
  idCounter = 0;

  if(!navEl) return [];

  // Implements `> ol > li`
  function findListItems(parent){
    var items = [];

    Array.prototype.slice.call(parent.childNodes).forEach(function(node){
      if('ol' == node.tagName){
        Array.prototype.slice.call(node.childNodes).forEach(function(item){
          if('li' == item.tagName){
            items.push(item);
          }
        });
      }
    });

    return items;

  }

  // Implements `> a, > span`
  function findAnchorOrSpan(parent){
    var item = null;

    Array.prototype.slice.call(parent.childNodes).forEach(function(node){
      if('a' == node.tagName || 'span' == node.tagName){
        item = node;
      }
    });

    return item;
  }

  function getTOC(parent){
    var list = [],
    nodes = findListItems(parent),
    items = Array.prototype.slice.call(nodes),
    length = items.length,
    node;

    if(length === 0) return false;

    items.forEach(function(item){
      var id = item.getAttribute('id') || false,
      content = findAnchorOrSpan(item),
      href = content.getAttribute('href') || '',
      text = content.textContent || "",
      split = href.split("#"),
      baseUrl = split[0],
      subitems = getTOC(item),
      spinePos = spineIndexByURL[baseUrl],
      spineItem = bookSpine[spinePos],
      cfi =   spineItem ? spineItem.cfi : '';

      if(!id) {
        if(spinePos) {
          spineItem = bookSpine[spinePos];
          id = spineItem.id;
          cfi = spineItem.cfi;
        } else {
          id = 'epubjs-autogen-toc-id-' + (idCounter++);
        }
      }

      item.setAttribute('id', id); // Ensure all elements have an id
      list.push({
        "id": id,
        "href": href,
        "label": text,
        "subitems" : subitems,
        "parent" : parent ? parent.getAttribute('id') : null,
        "cfi" : cfi
      });

    });

    return list;
  }

  return getTOC(navEl);
};

module.exports = Parser;

},{}],"/Users/craverod/opensource/readium-js/lib/jquery-sizes.js":[function(require,module,exports){
// https://raw.githubusercontent.com/bramstein/jsizes/master/lib/jquery.sizes.js

/**
 * @preserve JSizes - JQuery plugin v0.33
 *
 * Licensed under the revised BSD License.
 * Copyright 2008-2010 Bram Stein
 * All rights reserved.
 */
var $ = require('jquery')

var num = function (value) {
    return parseInt(value, 10) || 0;
  };

/**
  * Sets or gets the values for min-width, min-height, max-width
  * and max-height.
  */
$.each(['min', 'max'], function (i, name) {
  $.fn[name + 'Size'] = function (value) {
    var width, height;
    if (value) {
      if (value.width !== undefined) {
        this.css(name + '-width', value.width);
      }
      if (value.height !== undefined) {
        this.css(name + '-height', value.height);
      }
    } else {
      width = this.css(name + '-width');
      height = this.css(name + '-height');
      // Apparently:
      //  * Opera returns -1px instead of none
      //  * IE6 returns undefined instead of none
      return {'width': (name === 'max' && (width === undefined || width === 'none' || num(width) === -1) && Number.MAX_VALUE) || num(width), 
          'height': (name === 'max' && (height === undefined || height === 'none' || num(height) === -1) && Number.MAX_VALUE) || num(height)};
    }
    return this;
  };
});

/**
  * Returns whether or not an element is visible.
  */
$.fn.isVisible = function () {
  return this.is(':visible');
};

/**
  * Sets or gets the values for border, margin and padding.
  */
$.each(['border', 'margin', 'padding'], function (i, name) {
  $.fn[name] = function (value) {
    if (value) {
      if (value.top !== undefined) {
        this.css(name + '-top' + (name === 'border' ? '-width' : ''), value.top);
      }
      if (value.bottom !== undefined) {
        this.css(name + '-bottom' + (name === 'border' ? '-width' : ''), value.bottom);
      }
      if (value.left !== undefined) {
        this.css(name + '-left' + (name === 'border' ? '-width' : ''), value.left);
      }
      if (value.right !== undefined) {
        this.css(name + '-right' + (name === 'border' ? '-width' : ''), value.right);
      }
    } else {
      return {top: num(this.css(name + '-top' + (name === 'border' ? '-width' : ''))),
          bottom: num(this.css(name + '-bottom' + (name === 'border' ? '-width' : ''))),
          left: num(this.css(name + '-left' + (name === 'border' ? '-width' : ''))),
          right: num(this.css(name + '-right' + (name === 'border' ? '-width' : '')))};
    }
    return this;
  };
});

},{"jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/node_modules/Backbone/backbone.js":[function(require,module,exports){
//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore');
    factory(root, exports, _);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      if (!model.collection) model.collection = this;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

},{"underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/IPv6.js":[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.14.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports === 'object') {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.IPv6 = factory(root);
  }
}(this, function (root) {
  'use strict';

  /*
  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
  var _out = IPv6.best(_in);
  var _expected = "fe80::204:61ff:fe9d:f156";

  console.log(_in, _out, _expected, _out === _expected);
  */

  // save current IPv6 variable, if any
  var _IPv6 = root && root.IPv6;

  function bestPresentation(address) {
    // based on:
    // Javascript to test an IPv6 address for proper format, and to
    // present the "best text representation" according to IETF Draft RFC at
    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
    // 8 Feb 2010 Rich Brown, Dartware, LLC
    // Please feel free to use this code as long as you provide a link to
    // http://www.intermapper.com
    // http://intermapper.com/support/tools/IPV6-Validator.aspx
    // http://download.dartware.com/thirdparty/ipv6validator.js

    var _address = address.toLowerCase();
    var segments = _address.split(':');
    var length = segments.length;
    var total = 8;

    // trim colons (:: or ::a:b:c… or …a:b:c::)
    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
      // must have been ::
      // remove first two items
      segments.shift();
      segments.shift();
    } else if (segments[0] === '' && segments[1] === '') {
      // must have been ::xxxx
      // remove the first item
      segments.shift();
    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
      // must have been xxxx::
      segments.pop();
    }

    length = segments.length;

    // adjust total segments for IPv4 trailer
    if (segments[length - 1].indexOf('.') !== -1) {
      // found a "." which means IPv4
      total = 7;
    }

    // fill empty segments them with "0000"
    var pos;
    for (pos = 0; pos < length; pos++) {
      if (segments[pos] === '') {
        break;
      }
    }

    if (pos < total) {
      segments.splice(pos, 1, '0000');
      while (segments.length < total) {
        segments.splice(pos, 0, '0000');
      }

      length = segments.length;
    }

    // strip leading zeros
    var _segments;
    for (var i = 0; i < total; i++) {
      _segments = segments[i].split('');
      for (var j = 0; j < 3 ; j++) {
        if (_segments[0] === '0' && _segments.length > 1) {
          _segments.splice(0,1);
        } else {
          break;
        }
      }

      segments[i] = _segments.join('');
    }

    // find longest sequence of zeroes and coalesce them into one segment
    var best = -1;
    var _best = 0;
    var _current = 0;
    var current = -1;
    var inzeroes = false;
    // i; already declared

    for (i = 0; i < total; i++) {
      if (inzeroes) {
        if (segments[i] === '0') {
          _current += 1;
        } else {
          inzeroes = false;
          if (_current > _best) {
            best = current;
            _best = _current;
          }
        }
      } else {
        if (segments[i] === '0') {
          inzeroes = true;
          current = i;
          _current = 1;
        }
      }
    }

    if (_current > _best) {
      best = current;
      _best = _current;
    }

    if (_best > 1) {
      segments.splice(best, _best, '');
    }

    length = segments.length;

    // assemble remaining segments
    var result = '';
    if (segments[0] === '')  {
      result = ':';
    }

    for (i = 0; i < length; i++) {
      result += segments[i];
      if (i === length - 1) {
        break;
      }

      result += ':';
    }

    if (segments[length - 1] === '') {
      result += ':';
    }

    return result;
  }

  function noConflict() {
    /*jshint validthis: true */
    if (root.IPv6 === this) {
      root.IPv6 = _IPv6;
    }
  
    return this;
  }

  return {
    best: bestPresentation,
    noConflict: noConflict
  };
}));

},{}],"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/SecondLevelDomains.js":[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.14.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports === 'object') {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.SecondLevelDomains = factory(root);
  }
}(this, function (root) {
  'use strict';

  // save current SecondLevelDomains variable, if any
  var _SecondLevelDomains = root && root.SecondLevelDomains;

  var SLD = {
    // list of known Second Level Domains
    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
    // ----
    // publicsuffix.org is more current and actually used by a couple of browsers internally.
    // downside is it also contains domains like "dyndns.org" - which is fine for the security
    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
    // ----
    list: {
      'ac':' com gov mil net org ',
      'ae':' ac co gov mil name net org pro sch ',
      'af':' com edu gov net org ',
      'al':' com edu gov mil net org ',
      'ao':' co ed gv it og pb ',
      'ar':' com edu gob gov int mil net org tur ',
      'at':' ac co gv or ',
      'au':' asn com csiro edu gov id net org ',
      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',
      'bb':' biz co com edu gov info net org store tv ',
      'bh':' biz cc com edu gov info net org ',
      'bn':' com edu gov net org ',
      'bo':' com edu gob gov int mil net org tv ',
      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
      'bs':' com edu gov net org ',
      'bz':' du et om ov rg ',
      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
      'ck':' biz co edu gen gov info net org ',
      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
      'co':' com edu gov mil net nom org ',
      'cr':' ac c co ed fi go or sa ',
      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',
      'do':' art com edu gob gov mil net org sld web ',
      'dz':' art asso com edu gov net org pol ',
      'ec':' com edu fin gov info med mil net org pro ',
      'eg':' com edu eun gov mil name net org sci ',
      'er':' com edu gov ind mil net org rochest w ',
      'es':' com edu gob nom org ',
      'et':' biz com edu gov info name net org ',
      'fj':' ac biz com info mil name net org pro ',
      'fk':' ac co gov net nom org ',
      'fr':' asso com f gouv nom prd presse tm ',
      'gg':' co net org ',
      'gh':' com edu gov mil org ',
      'gn':' ac com gov net org ',
      'gr':' com edu gov mil net org ',
      'gt':' com edu gob ind mil net org ',
      'gu':' com edu gov net org ',
      'hk':' com edu gov idv net org ',
      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
      'id':' ac co go mil net or sch web ',
      'il':' ac co gov idf k12 muni net org ',
      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',
      'iq':' com edu gov i mil net org ',
      'ir':' ac co dnssec gov i id net org sch ',
      'it':' edu gov ',
      'je':' co net org ',
      'jo':' com edu gov mil name net org sch ',
      'jp':' ac ad co ed go gr lg ne or ',
      'ke':' ac co go info me mobi ne or sc ',
      'kh':' com edu gov mil net org per ',
      'ki':' biz com de edu gov info mob net org tel ',
      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
      'kn':' edu gov net org ',
      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
      'kw':' com edu gov net org ',
      'ky':' com edu gov net org ',
      'kz':' com edu gov mil net org ',
      'lb':' com edu gov net org ',
      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
      'lr':' com edu gov net org ',
      'lv':' asn com conf edu gov id mil net org ',
      'ly':' com edu gov id med net org plc sch ',
      'ma':' ac co gov m net org press ',
      'mc':' asso tm ',
      'me':' ac co edu gov its net org priv ',
      'mg':' com edu gov mil nom org prd tm ',
      'mk':' com edu gov inf name net org pro ',
      'ml':' com edu gov net org presse ',
      'mn':' edu gov org ',
      'mo':' com edu gov net org ',
      'mt':' com edu gov net org ',
      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',
      'mw':' ac co com coop edu gov int museum net org ',
      'mx':' com edu gob net org ',
      'my':' com edu gov mil name net org sch ',
      'nf':' arts com firm info net other per rec store web ',
      'ng':' biz com edu gov mil mobi name net org sch ',
      'ni':' ac co com edu gob mil net nom org ',
      'np':' com edu gov mil net org ',
      'nr':' biz com edu gov info net org ',
      'om':' ac biz co com edu gov med mil museum net org pro sch ',
      'pe':' com edu gob mil net nom org sld ',
      'ph':' com edu gov i mil net ngo org ',
      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',
      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
      'pr':' ac biz com edu est gov info isla name net org pro prof ',
      'ps':' com edu gov net org plo sec ',
      'pw':' belau co ed go ne or ',
      'ro':' arts com firm info nom nt org rec store tm www ',
      'rs':' ac co edu gov in org ',
      'sb':' com edu gov net org ',
      'sc':' com edu gov net org ',
      'sh':' co com edu gov net nom org ',
      'sl':' com edu gov net org ',
      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',
      'sv':' com edu gob org red ',
      'sz':' ac co org ',
      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
      'tw':' club com ebiz edu game gov idv mil net org ',
      'mu':' ac co com gov net or org ',
      'mz':' ac co edu gov org ',
      'na':' co com ',
      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',
      'pa':' abo ac com edu gob ing med net nom org sld ',
      'pt':' com edu gov int net nome org publ ',
      'py':' com edu gov mil net org ',
      'qa':' com edu gov mil net org ',
      're':' asso com nom ',
      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
      'rw':' ac co com edu gouv gov int mil net ',
      'sa':' com edu gov med net org pub sch ',
      'sd':' com edu gov info med net org tv ',
      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
      'sg':' com edu gov idn net org per ',
      'sn':' art com edu gouv org perso univ ',
      'sy':' com edu gov mil net news org ',
      'th':' ac co go in mi net or ',
      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',
      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
      'tz':' ac co go ne or ',
      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
      'ug':' ac co go ne or org sc ',
      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
      'us':' dni fed isa kids nsn ',
      'uy':' com edu gub mil net org ',
      've':' co com edu gob info mil net org web ',
      'vi':' co com k12 net org ',
      'vn':' ac biz com edu gov health info int name net org pro ',
      'ye':' co com gov ltd me net org plc ',
      'yu':' ac co edu gov org ',
      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
      'zm':' ac co com edu gov net org sch '
    },
    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
    // in both performance and memory footprint. No initialization required.
    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
    // Following methods use lastIndexOf() rather than array.split() in order
    // to avoid any memory allocations.
    has: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;
    },
    is: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset >= 0) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
    },
    get: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return null;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return null;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return null;
      }
      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {
        return null;
      }
      return domain.slice(sldOffset+1);
    },
    noConflict: function(){
      if (root.SecondLevelDomains === this) {
        root.SecondLevelDomains = _SecondLevelDomains;
      }
      return this;
    }
  };

  return SLD;
}));

},{}],"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js":[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.14.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */
(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports === 'object') {
    // Node
    module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
  } else {
    // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
  }
}(this, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
  /*jshint camelcase: false */

  // save current URI variable, if any
  var _URI = root && root.URI;

  function URI(url, base) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof URI)) {
      return new URI(url, base);
    }

    if (url === undefined) {
      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    this.href(url);

    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  URI.version = '1.14.1';

  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      if (lookup[data[i]] !== undefined) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length;

    // value may be string, number, array, regexp
    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);
    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    }

    // arrays can't be equal if they have different amount of content
    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  URI._parts = function() {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  };
  // state: allow duplicate query parameters (a=1&a=1)
  URI.duplicateQueryParameters = false;
  // state: replaces + with %20 (space in query strings)
  URI.escapeQuerySpace = true;
  // static properties
  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\.-]/i;
  URI.punycode_expression = /(xn--)/i;
  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
  // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt
  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
  // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html
  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/
  };
  // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  };
  // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -
  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/;
  // map DOM Elements to their URI attribute
  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src', // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };
  URI.getDomAttribute = function(node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase();
    // <input> should only expose src for type="image"
    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  }

  // encoding / decoding according to RFC3986
  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string)
      .replace(/[!'()*]/g, escapeForDumbFirefox36)
      .replace(/\*/g, '%2A');
  }
  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;
  URI.iso8859 = function() {
    URI.encode = escape;
    URI.decode = unescape;
  };
  URI.unicode = function() {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };
  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    }
  };
  URI.encodeQuery = function(string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };
  URI.decodeQuery = function(string, escapeQuerySpace) {
    string += '';
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch(e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  };
  URI.recodePath = function(string) {
    var segments = (string + '').split('/');
    for (var i = 0, length = segments.length; i < length; i++) {
      segments[i] = URI.encodePathSegment(URI.decode(segments[i]));
    }

    return segments.join('/');
  };
  URI.decodePath = function(string) {
    var segments = (string + '').split('/');
    for (var i = 0, length = segments.length; i < length; i++) {
      segments[i] = URI.decodePathSegment(segments[i]);
    }

    return segments.join('/');
  };
  // generate encode/decode path functions
  var _parts = {'encode':'encode', 'decode':'decode'};
  var _part;
  var generateAccessor = function(_group, _part) {
    return function(string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
  }

  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function(string, parts) {
    var pos;
    if (!parts) {
      parts = {};
    }
    // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]

    // extract fragment
    pos = string.indexOf('#');
    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract query
    pos = string.indexOf('?');
    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract protocol
    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2);
      // extract "user:pass@host:port"
      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');
      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;
        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3) === '//') {
          string = string.substring(pos + 3);

          // extract "user:pass@host:port"
          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    }

    // what's left must be the path
    parts.path = string;

    // and we're done
    return parts;
  };
  URI.parseHost = function(string, parts) {
    // extract host:port
    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;
      if (parts.port === '/') {
        parts.port = null;
      }
    } else if (string.indexOf(':') !== string.lastIndexOf(':')) {
      // IPv6 host contains multiple colons - but no port
      // this notation is actually not allowed by RFC 3986, but we're a liberal parser
      parts.hostname = string.substring(0, pos) || null;
      parts.port = null;
    } else {
      t = string.substring(0, pos).split(':');
      parts.hostname = t[0] || null;
      parts.port = t[1] || null;
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    return string.substring(pos) || '/';
  };
  URI.parseAuthority = function(string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };
  URI.parseUserinfo = function(string, parts) {
    // extract username:password
    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t;

    // authority@ must come before /path
    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };
  URI.parseQuery = function(string, escapeQuerySpace) {
    if (!string) {
      return {};
    }

    // throw out the funky business - "?"[name"="value"&"]+
    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace);
      // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string') {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function(parts) {
    var t = '';

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
    }

    t += (URI.buildAuthority(parts) || '');

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }
    return t;
  };
  URI.buildHost = function(parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };
  URI.buildAuthority = function(parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };
  URI.buildUserinfo = function(parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);

      if (parts.password) {
        t += ':' + URI.encode(parts.password);
      }

      t += '@';
    }

    return t;
  };
  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type

    var t = '';
    var unique, key, i, length;
    for (key in data) {
      if (hasOwn.call(data, key) && key) {
        if (isArray(data[key])) {
          unique = {};
          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };
  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function(data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };
  URI.removeQuery = function(data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (data[name] === value) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the first parameter');
    }
  };
  URI.hasQuery = function(data, name, value, withinArray) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          if (!URI.hasQuery(data, key, name[key])) {
            return false;
          }
        }
      }

      return true;
    } else if (typeof name !== 'string') {
      throw new TypeError('URI.hasQuery() accepts an object, string as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data; // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);
        /* falls through */
      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };


  URI.commonPath = function(one, two) {
    var length = Math.min(one.length, two.length);
    var pos;

    // find first non-matching character
    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    }

    // revert to last /
    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function(string, callback, options) {
    options || (options = {});
    var _start = options.start || URI.findUri.start;
    var _end = options.end || URI.findUri.end;
    var _trim = options.trim || URI.findUri.trim;
    var _attributeOpen = /[a-z0-9-]=["']?$/i;

    _start.lastIndex = 0;
    while (true) {
      var match = _start.exec(string);
      if (!match) {
        break;
      }

      var start = match.index;
      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);
        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end).replace(_trim, '');
      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function(v) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js

    if (v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
      }

      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }
    }
  };

  // noConflict
  URI.noConflict = function(removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function(deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function() {
    return new URI(this);
  };

  p.valueOf = p.toString = function() {
    return this.build(false)._string;
  };


  function generateSimpleAccessor(_part){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';
          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function(v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? ('?' + t) : t;
  };
  p.hash = function(v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? ('#' + t) : t;
  };

  p.pathname = function(v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? URI.decodePath(res) : res;
    } else {
      this._parts.path = v ? URI.recodePath(v) : '/';
      this.build(!build);
      return this;
    }
  };
  p.path = p.pathname;
  p.href = function(href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;
    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    }

    // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)
    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;
      for (key in src) {
        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  };

  // identification accessors
  p.is = function(what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;

      // hostname identification
      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  };

  // component specific input validation
  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function(v, build) {
    if (v !== undefined) {
      if (v) {
        // accept trailing ://
        v = v.replace(/:(\/\/)?$/, '');

        if (!v.match(URI.protocol_expression)) {
          throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
        }
      }
    }
    return _protocol.call(this, v, build);
  };
  p.scheme = p.protocol;
  p.port = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';
        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        if (v.match(/[^0-9]/)) {
          throw new TypeError('Port "' + v + '" contains characters other than [0-9]');
        }
      }
    }
    return _port.call(this, v, build);
  };
  p.hostname = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = {};
      URI.parseHost(v, x);
      v = x.hostname;
    }
    return _hostname.call(this, v, build);
  };

  // compound accessors
  p.host = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      URI.parseHost(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.authority = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      URI.parseAuthority(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.userinfo = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      if (!this._parts.username) {
        return '';
      }

      var t = URI.buildUserinfo(this._parts);
      return t.substring(0, t.length -1);
    } else {
      if (v[v.length-1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.resource = function(v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  };

  // fraction accessors
  p.subdomain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    // convenience, return "www" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // grab domain and add another segment
      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;
      var sub = this._parts.hostname.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v) {
        URI.ensureValidHostname(v);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.domain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // convenience, return "example.org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // if hostname consists of 1 or 2 segments, it must be the domain
      var t = this._parts.hostname.match(/\./g);
      if (t && t.length < 2) {
        return this._parts.hostname;
      }

      // grab tld and add another segment
      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      URI.ensureValidHostname(v);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.tld = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // return "org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');
      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.directory = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');

      return v ? URI.decodePath(res) : res;

    } else {
      var e = this._parts.path.length - this.filename().length;
      var directory = this._parts.path.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(directory));

      // fully qualifier directories begin with a slash
      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      }

      // directories always end with a slash
      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.filename = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');
      var res = this._parts.path.substring(pos+1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };
  p.suffix = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      }

      // suffix may only contain alnum characters (yup, I made this up.)
      s = filename.substring(pos+1);
      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.segment = function(segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined
        ? segments
        : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
      if (isArray(v)) {
        segments = [];
        // collapse empty elements within array
        for (var i=0, l=v.length; i < l; i++) {
          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
            continue;
          }

          if (segments.length && !segments[segments.length -1].length) {
            segments.pop();
          }

          segments.push(v[i]);
        }
      } else if (v || typeof v === 'string') {
        if (segments[segments.length -1] === '') {
          // empty trailing elements have to be overwritten
          // to prevent results such as /foo//bar
          segments[segments.length -1] = v;
        } else {
          segments.push(v);
        }
      }
    } else {
      if (v) {
        segments[segment] = v;
      } else {
        segments.splice(segment, 1);
      }
    }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };
  p.segmentCoded = function(segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);
      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.decode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  };

  // mutating query string
  var q = p.query;
  p.query = function(v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };
  p.setQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.addQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.removeQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.hasQuery = function(name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };
  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery;

  // sanitizing URLs
  p.normalize = function() {
    if (this._parts.urn) {
      return this
        .normalizeProtocol(false)
        .normalizeQuery(false)
        .normalizeFragment(false)
        .build();
    }

    return this
      .normalizeProtocol(false)
      .normalizeHostname(false)
      .normalizePort(false)
      .normalizePath(false)
      .normalizeQuery(false)
      .normalizeFragment(false)
      .build();
  };
  p.normalizeProtocol = function(build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizeHostname = function(build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizePort = function(build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizePath = function(build) {
    if (this._parts.urn) {
      return this;
    }

    if (!this._parts.path || this._parts.path === '/') {
      return this;
    }

    var _was_relative;
    var _path = this._parts.path;
    var _leadingParents = '';
    var _parent, _pos;

    // handle relative paths
    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    }

    // resolve simples
    _path = _path
      .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
      .replace(/\/{2,}/g, '/');

    // remember leading parents
    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    }

    // resolve parents
    while (true) {
      _parent = _path.indexOf('/..');
      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');
      if (_pos === -1) {
        _pos = _parent;
      }
      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    }

    // revert to relative
    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    _path = URI.recodePath(_path);
    this._parts.path = _path;
    this.build(!build);
    return this;
  };
  p.normalizePathname = p.normalizePath;
  p.normalizeQuery = function(build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };
  p.normalizeFragment = function(build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function() {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = escape;
    URI.decode = decodeURIComponent;
    this.normalize();
    URI.encode = e;
    URI.decode = d;
    return this;
  };

  p.unicode = function() {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;
    this.normalize();
    URI.encode = e;
    URI.decode = d;
    return this;
  };

  p.readable = function() {
    var uri = this.clone();
    // removing username, password, because they shouldn't be displayed according to RFC 3986
    uri.username('').password('').normalize();
    var t = '';
    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);
        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);
    if (uri._parts.query) {
      var q = '';
      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
          .replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
            .replace(/&/g, '%26');
        }
      }
      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  };

  // resolving relative and absolute URLs
  p.absoluteTo = function(base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (!resolved._parts.protocol) {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; (p = properties[i]); i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;
      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else if (resolved._parts.path.substring(-2) === '..') {
      resolved._parts.path += '/';
    }

    if (resolved.path().charAt(0) !== '/') {
      basedir = base.directory();
      resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
      resolved.normalizePath();
    }

    resolved.build();
    return resolved;
  };
  p.relativeTo = function(base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    }

    // determine common sub path
    common = URI.commonPath(relative.path(), base.path());

    // If the paths have nothing in common, return a relative URL with the absolute path.
    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path
      .substring(common.length)
      .replace(/[^\/]*$/, '')
      .replace(/.*?\//g, '../');

    relativeParts.path = parents + relativeParts.path.substring(common.length);

    return relative.build();
  };

  // comparing URIs
  p.equals = function(uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;

    one.normalize();
    two.normalize();

    // exact match
    if (one.toString() === two.toString()) {
      return true;
    }

    // extract query string
    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query('');

    // definitely not equal if not even non-query parts match
    if (one.toString() !== two.toString()) {
      return false;
    }

    // query parameters have the same length, even if they're permuted
    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  };

  // state
  p.duplicateQueryParameters = function(v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function(v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
}));

},{"./IPv6":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/IPv6.js","./SecondLevelDomains":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/SecondLevelDomains.js","./punycode":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/punycode.js"}],"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/punycode.js":[function(require,module,exports){
(function (global){
/*! http://mths.be/punycode v1.2.3 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports;
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		while (length--) {
			array[length] = fn(array[length]);
		}
		return array;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings.
	 * @private
	 * @param {String} domain The domain name.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		return map(string.split(regexSeparators), fn).join('.');
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <http://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    length,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols to a Punycode string of ASCII-only
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name to Unicode. Only the
	 * Punycoded parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it on a string that has already been converted to
	 * Unicode.
	 * @memberOf punycode
	 * @param {String} domain The Punycode domain name to convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(domain) {
		return mapDomain(domain, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name to Punycode. Only the
	 * non-ASCII parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it with a domain that's already in ASCII.
	 * @memberOf punycode
	 * @param {String} domain The domain name to convert, as a Unicode string.
	 * @returns {String} The Punycode representation of the given domain name.
	 */
	function toASCII(domain) {
		return mapDomain(domain, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.2.3',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <http://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return punycode;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js":[function(require,module,exports){
arguments[4]["/Users/craverod/opensource/readium-js/node_modules/Backbone/backbone.js"][0].apply(exports,arguments)
},{"underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/parser/epub-cfi.js":[function(require,module,exports){
module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { fragment: peg$parsefragment },
        peg$startRuleFunction  = peg$parsefragment,

        peg$c0 = peg$FAILED,
        peg$c1 = "epubcfi(",
        peg$c2 = { type: "literal", value: "epubcfi(", description: "\"epubcfi(\"" },
        peg$c3 = ")",
        peg$c4 = { type: "literal", value: ")", description: "\")\"" },
        peg$c5 = function(fragmentVal) { 
                
                return { type:"CFIAST", cfiString:fragmentVal };
            },
        peg$c6 = ",",
        peg$c7 = { type: "literal", value: ",", description: "\",\"" },
        peg$c8 = function(stepVal, localPathVal, rangeLocalPath1Val, rangeLocalPath2Val) {

                return { type:"range", path:stepVal, localPath:localPathVal, range1:rangeLocalPath1Val, range2:rangeLocalPath2Val };
          },
        peg$c9 = function(stepVal, localPathVal) { 

                return { type:"path", path:stepVal, localPath:localPathVal }; 
            },
        peg$c10 = [],
        peg$c11 = null,
        peg$c12 = function(localPathStepVal, termStepVal) { 

                return { steps:localPathStepVal, termStep:termStepVal }; 
            },
        peg$c13 = "/",
        peg$c14 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c15 = "[",
        peg$c16 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c17 = "]",
        peg$c18 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c19 = function(stepLengthVal, assertVal) { 

                return { type:"indexStep", stepLength:stepLengthVal, idAssertion:assertVal[1] };
            },
        peg$c20 = "!/",
        peg$c21 = { type: "literal", value: "!/", description: "\"!/\"" },
        peg$c22 = function(stepLengthVal, assertVal) { 

                return { type:"indirectionStep", stepLength:stepLengthVal, idAssertion:assertVal[1] };
            },
        peg$c23 = ":",
        peg$c24 = { type: "literal", value: ":", description: "\":\"" },
        peg$c25 = function(textOffsetValue, textLocAssertVal) { 

                return { type:"textTerminus", offsetValue:textOffsetValue, textAssertion:textLocAssertVal[1] };
            },
        peg$c26 = function(idVal) { 

                return idVal; 
            },
        peg$c27 = function(csvVal, paramVal) { 

                return { type:"textLocationAssertion", csv:csvVal, parameter:paramVal }; 
            },
        peg$c28 = ";",
        peg$c29 = { type: "literal", value: ";", description: "\";\"" },
        peg$c30 = "=",
        peg$c31 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c32 = function(paramLHSVal, paramRHSVal) { 

                return { type:"parameter", LHSValue:paramLHSVal, RHSValue:paramRHSVal }; 
            },
        peg$c33 = function(preAssertionVal, postAssertionVal) { 

                return { type:"csv", preAssertion:preAssertionVal, postAssertion:postAssertionVal }; 
            },
        peg$c34 = function(stringVal) { 

                return stringVal.join(''); 
            },
        peg$c35 = function(escSpecCharVal) { 
                
                return escSpecCharVal[1]; 
            },
        peg$c36 = /^[1-9]/,
        peg$c37 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c38 = /^[0-9]/,
        peg$c39 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c40 = ".",
        peg$c41 = { type: "literal", value: ".", description: "\".\"" },
        peg$c42 = function(intPartVal, fracPartVal) { 

                return intPartVal.join('') + "." + fracPartVal.join(''); 
            },
        peg$c43 = "0",
        peg$c44 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c45 = function(integerVal) { 

                if (integerVal === "0") { 
                  return "0";
                } 
                else { 
                  return integerVal[0].concat(integerVal[1].join(''));
                }
            },
        peg$c46 = " ",
        peg$c47 = { type: "literal", value: " ", description: "\" \"" },
        peg$c48 = function() { return " "; },
        peg$c49 = "^",
        peg$c50 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c51 = function() { return "^"; },
        peg$c52 = "\"",
        peg$c53 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c54 = function() { return '"'; },
        peg$c55 = function(bracketVal) { return bracketVal; },
        peg$c56 = "(",
        peg$c57 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c58 = function(paraVal) { return paraVal; },
        peg$c59 = function() { return ","; },
        peg$c60 = function() { return ";"; },
        peg$c61 = function() { return "="; },
        peg$c62 = /^[a-z]/,
        peg$c63 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c64 = /^[A-Z]/,
        peg$c65 = { type: "class", value: "[A-Z]", description: "[A-Z]" },
        peg$c66 = "-",
        peg$c67 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c68 = "_",
        peg$c69 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c70 = function(charVal) { return charVal; },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsefragment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1) {
        s1 = peg$c1;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parserange();
        if (s2 === peg$FAILED) {
          s2 = peg$parsepath();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserange() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseindexStep();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselocal_path();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c6;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselocal_path();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c6;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parselocal_path();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c8(s1, s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepath() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseindexStep();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselocal_path();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselocal_path() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseindexStep();
      if (s2 === peg$FAILED) {
        s2 = peg$parseindirectionStep();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseindexStep();
          if (s2 === peg$FAILED) {
            s2 = peg$parseindirectionStep();
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseterminus();
        if (s2 === peg$FAILED) {
          s2 = peg$c11;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexStep() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c13;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c15;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidAssertion();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c17;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c11;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c19(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindirectionStep() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s1 = peg$c20;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c15;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidAssertion();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c17;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c11;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c22(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseterminus() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c15;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetextLocationAssertion();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c17;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c11;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c25(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidAssertion() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsevalue();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c26(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetextLocationAssertion() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsecsv();
      if (s1 === peg$FAILED) {
        s1 = peg$c11;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparameter();
        if (s2 === peg$FAILED) {
          s2 = peg$c11;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c27(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseparameter() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c28;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevalueNoSpace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c30;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsevalueNoSpace();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c32(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecsv() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsevalue();
      if (s1 === peg$FAILED) {
        s1 = peg$c11;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalue();
          if (s3 === peg$FAILED) {
            s3 = peg$c11;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c33(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevalueNoSpace() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseescapedSpecialChars();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecharacter();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseescapedSpecialChars();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecharacter();
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c34(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsevalue() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseescapedSpecialChars();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecharacter();
        if (s2 === peg$FAILED) {
          s2 = peg$parsespace();
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseescapedSpecialChars();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecharacter();
            if (s2 === peg$FAILED) {
              s2 = peg$parsespace();
            }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c34(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseescapedSpecialChars() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsecircumflex();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecircumflex();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsecircumflex();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesquareBracket();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parsecircumflex();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseparentheses();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parsecircumflex();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecomma();
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parsecircumflex();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsesemicolon();
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parsecircumflex();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseequal();
                  if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c35(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c36.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c38.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
          }
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c40;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          if (peg$c38.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
          }
          if (s4 !== peg$FAILED) {
            if (peg$c36.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c42(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c43;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (peg$c36.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c38.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c45(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsespace() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c46;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c48();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecircumflex() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c49;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c51();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedoubleQuote() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c52;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c54();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesquareBracket() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c55(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparentheses() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c56;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s1 = peg$c3;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c58(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomma() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c59();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesemicolon() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c28;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c60();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseequal() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c30;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c61();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c62.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s1 === peg$FAILED) {
        if (peg$c64.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s1 === peg$FAILED) {
          if (peg$c38.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c66;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s1 = peg$c68;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c69); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s1 = peg$c40;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c70(s1);
      }
      s0 = s1;

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();

},{}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/cfi-assertion.js":[function(require,module,exports){
var CFIAssertionError = function (expectedAssertion, targetElementAssertion, message) {

    function CFIAssertionError () {

        this.expectedAssertion = expectedAssertion;
        this.targetElementAssertion = targetElementAssertion;
    }

    CFIAssertionError.prototype = new Error(message);
    CFIAssertionError.constructor = CFIAssertionError();

    return new CFIAssertionError();
};

module.exports = CFIAssertionError

},{}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/node-type.js":[function(require,module,exports){
// REFACTORING CANDIDATE: This type of error may not be required in the long run. The parser should catch any syntax errors, 
//   provided it is error-free, and as such, the AST should never really have any node type errors, which are essentially errors
//   in the structure of the AST. This error should probably be refactored out when the grammar and interpreter are more stable.
var NodeTypeError = function (node, message) {

    function NodeTypeError () {

        this.node = node;
    }

    NodeTypeError.prototype = new Error(message);
    NodeTypeError.constructor = NodeTypeError;

    return new NodeTypeError();
};

module.exports = NodeTypeError

},{}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/out-of-range.js":[function(require,module,exports){
// REFACTORING CANDIDATE: Might make sense to include some more specifics about the out-of-rangeyness.
var OutOfRangeError = function (targetIndex, maxIndex, message) {

    function OutOfRangeError () {

        this.targetIndex = targetIndex;
        this.maxIndex = maxIndex;
    }

    OutOfRangeError.prototype = new Error(message);
    OutOfRangeError.constructor = OutOfRangeError()

    return new OutOfRangeError();
};

module.exports = OutOfRangeError

},{}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/terminus.js":[function(require,module,exports){
// REFACTORING CANDIDATE: This is a bit too general to be useful. When I have a better understanding of the type of errors
//   that can occur with the various terminus conditions, it'll make more sense to revisit this. 
var TerminusError = function (terminusType, terminusCondition, message) {

    function TerminusError () {

        this.terminusType = terminusType;
        this.terminusCondition = terminusCondition;
    }

    TerminusError.prototype = new Error(message);
    TerminusError.constructor = TerminusError();

    return new TerminusError();
};

module.exports = TerminusError

},{}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/generator.js":[function(require,module,exports){
var $ = require('jquery')
var Instructions = require('./instructions')
var NodeTypeError = require('./errors/node-type')
var OutOfRangeError = require('./errors/out-of-range')

var Generator = {

    // ------------------------------------------------------------------------------------ //
    //  "PUBLIC" METHODS (THE API)                                                          //
    // ------------------------------------------------------------------------------------ //

    generateCharOffsetRangeComponent : function (rangeStartElement, startOffset, rangeEndElement, endOffset, classBlacklist, elementBlacklist, idBlacklist) {

        var docRange;
        var commonAncestor;
        var range1OffsetStep;
        var range1CFI;
        var range2OffsetStep;
        var range2CFI;
        var commonCFIComponent;

        this.validateStartTextNode(rangeStartElement);
        this.validateStartTextNode(rangeEndElement);

        // Parent element is the same
        if ($(rangeStartElement).parent()[0] === $(rangeEndElement).parent()[0]) {
            range1OffsetStep = this.createCFITextNodeStep($(rangeStartElement), startOffset, classBlacklist, elementBlacklist, idBlacklist);
            range2OffsetStep = this.createCFITextNodeStep($(rangeEndElement), endOffset, classBlacklist, elementBlacklist, idBlacklist);          
            commonCFIComponent = this.createCFIElementSteps($(rangeStartElement).parent(), "html", classBlacklist, elementBlacklist, idBlacklist);
            return commonCFIComponent.substring(1, commonCFIComponent.length) + "," + range1OffsetStep + "," + range2OffsetStep;
        }
        else {

            // Create a document range to find the common ancestor
            docRange = document.createRange();
            docRange.setStart(rangeStartElement, startOffset);
            docRange.setEnd(rangeEndElement, endOffset);
            commonAncestor = docRange.commonAncestorContainer;

            // Generate terminating offset and range 1
            range1OffsetStep = this.createCFITextNodeStep($(rangeStartElement), startOffset, classBlacklist, elementBlacklist, idBlacklist);
            range1CFI = this.createCFIElementSteps($(rangeStartElement).parent(), commonAncestor, classBlacklist, elementBlacklist, idBlacklist) + range1OffsetStep;

            // Generate terminating offset and range 2
            range2OffsetStep = this.createCFITextNodeStep($(rangeEndElement), endOffset, classBlacklist, elementBlacklist, idBlacklist);
            range2CFI = this.createCFIElementSteps($(rangeEndElement).parent(), commonAncestor, classBlacklist, elementBlacklist, idBlacklist) + range2OffsetStep;

            // Generate shared component
            commonCFIComponent = this.createCFIElementSteps($(commonAncestor), "html", classBlacklist, elementBlacklist, idBlacklist);

            // Return the result
            return commonCFIComponent.substring(1, commonCFIComponent.length) + "," + range1CFI + "," + range2CFI;
        }
    },

    generateElementRangeComponent : function (rangeStartElement, rangeEndElement, classBlacklist, elementBlacklist, idBlacklist) {

        var docRange;
        var commonAncestor;
        var range1CFI;
        var range2CFI;
        var commonCFIComponent;

        this.validateStartElement(rangeStartElement);
        this.validateStartElement(rangeEndElement);

        if (rangeStartElement === rangeEndElement) {
            throw new Error("Start and end element cannot be the same for a CFI range");
        }

        // Create a document range to find the common ancestor
        docRange = document.createRange();
        docRange.setStart(rangeStartElement, 0);
        docRange.setEnd(rangeEndElement, rangeEndElement.childNodes.length);
        commonAncestor = docRange.commonAncestorContainer;

        // Generate range 1
        range1CFI = this.createCFIElementSteps($(rangeStartElement), commonAncestor, classBlacklist, elementBlacklist, idBlacklist);

        // Generate range 2
        range2CFI = this.createCFIElementSteps($(rangeEndElement), commonAncestor, classBlacklist, elementBlacklist, idBlacklist);

        // Generate shared component
        commonCFIComponent = this.createCFIElementSteps($(commonAncestor), "html", classBlacklist, elementBlacklist, idBlacklist);

        // Return the result
        return commonCFIComponent.substring(1, commonCFIComponent.length) + "," + range1CFI + "," + range2CFI;
    },

    // Description: Generates a character offset CFI 
    // Arguments: The text node that contains the offset referenced by the cfi, the offset value, the name of the 
    //   content document that contains the text node, the package document for this EPUB.
    generateCharacterOffsetCFIComponent : function (startTextNode, characterOffset, classBlacklist, elementBlacklist, idBlacklist) {

        var textNodeStep;
        var contentDocCFI;
        var $itemRefStartNode;
        var packageDocCFI;

        this.validateStartTextNode(startTextNode, characterOffset);

        // Create the text node step
        textNodeStep = this.createCFITextNodeStep($(startTextNode), characterOffset, classBlacklist, elementBlacklist, idBlacklist);

        // Call the recursive method to create all the steps up to the head element of the content document (the "html" element)
        contentDocCFI = this.createCFIElementSteps($(startTextNode).parent(), "html", classBlacklist, elementBlacklist, idBlacklist) + textNodeStep;
        return contentDocCFI.substring(1, contentDocCFI.length);
    },

    generateElementCFIComponent : function (startElement, classBlacklist, elementBlacklist, idBlacklist) {

        var contentDocCFI;
        var $itemRefStartNode;
        var packageDocCFI;

        this.validateStartElement(startElement);

        // Call the recursive method to create all the steps up to the head element of the content document (the "html" element)
        contentDocCFI = this.createCFIElementSteps($(startElement), "html", classBlacklist, elementBlacklist, idBlacklist);

        // Remove the ! 
        return contentDocCFI.substring(1, contentDocCFI.length);
    },

    generatePackageDocumentCFIComponent : function (contentDocumentName, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {

        this.validateContentDocumentName(contentDocumentName);
        this.validatePackageDocument(packageDocument, contentDocumentName);

        // Get the start node (itemref element) that references the content document
        $itemRefStartNode = $("itemref[idref='" + contentDocumentName + "']", $(packageDocument));

        // Create the steps up to the top element of the package document (the "package" element)
        packageDocCFIComponent = this.createCFIElementSteps($itemRefStartNode, "package", classBlacklist, elementBlacklist, idBlacklist);

        // Append an !; this assumes that a CFI content document CFI component will be appended at some point
        return packageDocCFIComponent + "!";
    },

    generatePackageDocumentCFIComponentWithSpineIndex : function (spineIndex, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {

        // Get the start node (itemref element) that references the content document
        $itemRefStartNode = $($("spine", packageDocument).children()[spineIndex]);

        // Create the steps up to the top element of the package document (the "package" element)
        packageDocCFIComponent = this.createCFIElementSteps($itemRefStartNode, "package", classBlacklist, elementBlacklist, idBlacklist);

        // Append an !; this assumes that a CFI content document CFI component will be appended at some point
        return packageDocCFIComponent + "!";
    },

    generateCompleteCFI : function (packageDocumentCFIComponent, contentDocumentCFIComponent) {

        return "epubcfi(" + packageDocumentCFIComponent + contentDocumentCFIComponent + ")";  
    },

    // ------------------------------------------------------------------------------------ //
    //  "PRIVATE" HELPERS                                                                   //
    // ------------------------------------------------------------------------------------ //

    validateStartTextNode : function (startTextNode, characterOffset) {
        
        // Check that the text node to start from IS a text node
        if (!startTextNode) {
            throw new NodeTypeError(startTextNode, "Cannot generate a character offset from a starting point that is not a text node");
        } else if (startTextNode.nodeType != 3) {
            throw new NodeTypeError(startTextNode, "Cannot generate a character offset from a starting point that is not a text node");
        }

        // Check that the character offset is within a valid range for the text node supplied
        if (characterOffset < 0) {
            throw new OutOfRangeError(characterOffset, 0, "Character offset cannot be less than 0");
        }
        else if (characterOffset > startTextNode.nodeValue.length) {
            throw new OutOfRangeError(characterOffset, startTextNode.nodeValue.length - 1, "character offset cannot be greater than the length of the text node");
        }
    },

    validateStartElement : function (startElement) {

        if (!startElement) {
            throw new NodeTypeError(startElement, "CFI target element is undefined");
        }

        if (!(startElement.nodeType && startElement.nodeType === 1)) {
            throw new NodeTypeError(startElement, "CFI target element is not an HTML element");
        }
    },

    validateContentDocumentName : function (contentDocumentName) {

        // Check that the idref for the content document has been provided
        if (!contentDocumentName) {
            throw new Error("The idref for the content document, as found in the spine, must be supplied");
        }
    },

    validatePackageDocument : function (packageDocument, contentDocumentName) {
        
        // Check that the package document is non-empty and contains an itemref element for the supplied idref
        if (!packageDocument) {
            throw new Error("A package document must be supplied to generate a CFI");
        }
        else if ($($("itemref[idref='" + contentDocumentName + "']", packageDocument)[0]).length === 0) {
            throw new Error("The idref of the content document could not be found in the spine");
        }
    },

    // Description: Creates a CFI terminating step to a text node, with a character offset
    // REFACTORING CANDIDATE: Some of the parts of this method could be refactored into their own methods
    createCFITextNodeStep : function ($startTextNode, characterOffset, classBlacklist, elementBlacklist, idBlacklist) {

        var $parentNode;
        var $contentsExcludingMarkers;
        var CFIIndex;
        var indexOfTextNode;
        var preAssertion;
        var preAssertionStartIndex;
        var textLength;
        var postAssertion;
        var postAssertionEndIndex;

        // Find text node position in the set of child elements, ignoring any blacklisted elements 
        $parentNode = $startTextNode.parent();
        $contentsExcludingMarkers = Instructions.applyBlacklist($parentNode.contents(), classBlacklist, elementBlacklist, idBlacklist);

        // Find the text node index in the parent list, inferring nodes that were originally a single text node
        var prevNodeWasTextNode;
        var indexOfFirstInSequence;
        var textNodeOnlyIndex = 0;
        var characterOffsetSinceUnsplit = 0;
        var finalCharacterOffsetInSequence = 0;
        $.each($contentsExcludingMarkers, 
            function (index) {

                // If this is a text node, check if it matches and return the current index
                if (this.nodeType === Node.TEXT_NODE) {

                    if (this === $startTextNode[0]) {

                        // Set index as the first in the adjacent sequence of text nodes, or as the index of the current node if this 
                        //   node is a standard one sandwiched between two element nodes. 
                        if (prevNodeWasTextNode) {
                            indexOfTextNode = indexOfFirstInSequence;
                            finalCharacterOffsetInSequence = characterOffsetSinceUnsplit;
                        }
                        else {
                            indexOfTextNode = textNodeOnlyIndex;
                        }
                        
                        // Break out of .each loop
                        return false; 
                    }

                    // Save this index as the first in sequence of adjacent text nodes, if it is not already set by this point
                    prevNodeWasTextNode = true;
                    characterOffsetSinceUnsplit = characterOffsetSinceUnsplit + this.length
                    if (indexOfFirstInSequence === undefined) {
                        indexOfFirstInSequence = textNodeOnlyIndex;
                        textNodeOnlyIndex = textNodeOnlyIndex + 1;
                    }
                }
                // This node is not a text node
                else {
                    prevNodeWasTextNode = false;
                    indexOfFirstInSequence = undefined;
                    characterOffsetSinceUnsplit  = 0;
                }
            }
        );

        // Convert the text node index to a CFI odd-integer representation
        CFIIndex = (indexOfTextNode * 2) + 1;

        // TODO: text assertions are not in the grammar yet, I think, or they're just causing problems. This has
        //   been temporarily removed. 

        // Add pre- and post- text assertions
        // preAssertionStartIndex = (characterOffset - 3 >= 0) ? characterOffset - 3 : 0;
        // preAssertion = $startTextNode[0].nodeValue.substring(preAssertionStartIndex, characterOffset);

        // textLength = $startTextNode[0].nodeValue.length;
        // postAssertionEndIndex = (characterOffset + 3 <= textLength) ? characterOffset + 3 : textLength;
        // postAssertion = $startTextNode[0].nodeValue.substring(characterOffset, postAssertionEndIndex);

        // Gotta infer the correct character offset, as well

        // Return the constructed CFI text node step
        return "/" + CFIIndex + ":" + (finalCharacterOffsetInSequence + characterOffset);
         // + "[" + preAssertion + "," + postAssertion + "]";
    },

    createCFIElementSteps : function ($currNode, topLevelElement, classBlacklist, elementBlacklist, idBlacklist) {

        var $blacklistExcluded;
        var $parentNode;
        var currNodePosition;
        var CFIPosition;
        var idAssertion;
        var elementStep; 

        // Find position of current node in parent list
        $blacklistExcluded = Instructions.applyBlacklist($currNode.parent().children(), classBlacklist, elementBlacklist, idBlacklist);
        $.each($blacklistExcluded, 
            function (index, value) {

                if (this === $currNode[0]) {

                    currNodePosition = index;

                    // Break loop
                    return false;
                }
        });

        // Convert position to the CFI even-integer representation
        CFIPosition = (currNodePosition + 1) * 2;

        // Create CFI step with id assertion, if the element has an id
        if ($currNode.attr("id")) {
            elementStep = "/" + CFIPosition + "[" + $currNode.attr("id") + "]";
        }
        else {
            elementStep = "/" + CFIPosition;
        }

        // If a parent is an html element return the (last) step for this content document, otherwise, continue.
        //   Also need to check if the current node is the top-level element. This can occur if the start node is also the
        //   top level element.
        $parentNode = $currNode.parent();
        if ($parentNode.is(topLevelElement) || $currNode.is(topLevelElement)) {
            
            // If the top level node is a type from which an indirection step, add an indirection step character (!)
            // REFACTORING CANDIDATE: It is possible that this should be changed to: if (topLevelElement = 'package') do
            //   not return an indirection character. Every other type of top-level element may require an indirection
            //   step to navigate to, thus requiring that ! is always prepended. 
            if (topLevelElement === 'html') {
                return "!" + elementStep;
            }
            else {
                return elementStep;
            }
        }
        else {
            return this.createCFIElementSteps($parentNode, topLevelElement, classBlacklist, elementBlacklist, idBlacklist) + elementStep;
        }
    }
};

module.exports = Generator

},{"./errors/node-type":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/node-type.js","./errors/out-of-range":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/out-of-range.js","./instructions":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/instructions.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/index.js":[function(require,module,exports){
var generator     = require('./generator');
var instructions  = require('./instructions');
var interpreter   = require('./interpreter');

function generateCharacterOffsetCFIComponent(startTextNode, characterOffset, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generateCharacterOffsetCFIComponent(startTextNode, characterOffset, classBlacklist, elementBlacklist, idBlacklist);
}

function generateCharOffsetRangeComponent(rangeStartElement, startOffset, rangeEndElement, endOffset, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generateCharOffsetRangeComponent(rangeStartElement, startOffset, rangeEndElement, endOffset, classBlacklist, elementBlacklist, idBlacklist);
}

function generateCompleteCFI(packageDocumentCFIComponent, contentDocumentCFIComponent) {
  return generator.generateCompleteCFI(packageDocumentCFIComponent, contentDocumentCFIComponent);
}

function generateElementCFIComponent(startElement, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generateElementCFIComponent(startElement, classBlacklist, elementBlacklist, idBlacklist);
}

function generateElementRangeComponent(rangeStartElement, rangeEndElement, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generateElementRangeComponent(rangeStartElement, rangeEndElement, classBlacklist, elementBlacklist, idBlacklist);
}

function generatePackageDocumentCFIComponent(contentDocumentName, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generatePackageDocumentCFIComponent(contentDocumentName, packageDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function generatePackageDocumentCFIComponentWithSpineIndex(spineIndex, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return generator.generatePackageDocumentCFIComponentWithSpineIndex(spineIndex, packageDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function getContentDocHref(CFI, packageDocument) {
  return interpreter.getContentDocHref(CFI, packageDocument);
}

function getRangeTargetElements(rangeCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.getRangeTargetElements(rangeCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function getTargetElement(CFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.getTargetElement(CFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function getTargetElementWithPartialCFI(contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.getTargetElementWithPartialCFI(contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function getTextTerminusInfoWithPartialCFI(contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.getTextTerminusInfoWithPartialCFI(contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist);
}

function injectElement(CFI, contentDocument, elementToInject, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.injectElement(CFI, contentDocument, elementToInject, classBlacklist, elementBlacklist, idBlacklist);
}

function injectElementAtOffset($textNodeList, textOffset, elementToInject) {
  return instructions.injectCFIMarkerIntoText($textNodeList, textOffset, elementToInject);
}

function injectRangeElements(rangeCFI, contentDocument, startElementToInject, endElementToInject, classBlacklist, elementBlacklist, idBlacklist) {
  return interpreter.injectRangeElements(rangeCFI, contentDocument, startElementToInject, endElementToInject, classBlacklist, elementBlacklist, idBlacklist);
}

module.exports = {
  generateCharacterOffsetCFIComponent: generateCharacterOffsetCFIComponent,
  generateCharOffsetRangeComponent: generateCharOffsetRangeComponent,
  generateCompleteCFI: generateCompleteCFI,
  generateElementCFIComponent: generateElementCFIComponent,
  generateElementRangeComponent: generateElementRangeComponent,
  generatePackageDocumentCFIComponent: generatePackageDocumentCFIComponent,
  generatePackageDocumentCFIComponentWithSpineIndex: generatePackageDocumentCFIComponentWithSpineIndex,
  getContentDocHref: getContentDocHref,
  getRangeTargetElements: getRangeTargetElements,
  getTargetElement: getTargetElement,
  getTargetElementWithPartialCFI: getTargetElementWithPartialCFI,
  getTextTerminusInfoWithPartialCFI: getTextTerminusInfoWithPartialCFI,
  injectElement: injectElement,
  injectElementAtOffset: injectElementAtOffset,
  injectRangeElements: injectRangeElements
}

},{"./generator":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/generator.js","./instructions":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/instructions.js","./interpreter":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/interpreter.js"}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/instructions.js":[function(require,module,exports){
// Description: This model contains the implementation for "instructions" included in the EPUB CFI domain specific language (DSL). 
//   Lexing and parsing a CFI produces a set of executable instructions for processing a CFI (represented in the AST). 
//   This object contains a set of functions that implement each of the executable instructions in the AST. 

var NodeTypeError = require('./errors/node-type')
var OutOfRangeError = require('./errors/out-of-range')
var TerminusError = require('./errors/terminus')

var Instructions = {

	// ------------------------------------------------------------------------------------ //
	//  "PUBLIC" METHODS (THE API)                                                          //
	// ------------------------------------------------------------------------------------ //

	// Description: Follows a step
	// Rationale: The use of children() is important here, as this jQuery method returns a tree of xml nodes, EXCLUDING
	//   CDATA and text nodes. When we index into the set of child elements, we are assuming that text nodes have been 
	//   excluded.
	// REFACTORING CANDIDATE: This should be called "followIndexStep"
	getNextNode : function (CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist) {

		// Find the jquery index for the current node
		var $targetNode;
		if (CFIStepValue % 2 == 0) {

			$targetNode = this.elementNodeStep(CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist);
		}
		else {

			$targetNode = this.inferTargetTextNode(CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist);
		}

		return $targetNode;
	},

	// Description: This instruction executes an indirection step, where a resource is retrieved using a 
	//   link contained on a attribute of the target element. The attribute that contains the link differs
	//   depending on the target. 
	// Note: Iframe indirection will (should) fail if the iframe is not from the same domain as its containing script due to 
	//   the cross origin security policy
	followIndirectionStep : function (CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist) {

		var that = this;
		var $contentDocument; 
		var $blacklistExcluded;
		var $startElement;
		var $targetNode;

		// TODO: This check must be expanded to all the different types of indirection step
		// Only expects iframes, at the moment
		if ($currNode === undefined || !$currNode.is("iframe")) {

			throw NodeTypeError($currNode, "expected an iframe element");
		}

		// Check node type; only iframe indirection is handled, at the moment
		if ($currNode.is("iframe")) {

			// Get content
			$contentDocument = $currNode.contents();

			// Go to the first XHTML element, which will be the first child of the top-level document object
			$blacklistExcluded = this.applyBlacklist($contentDocument.children(), classBlacklist, elementBlacklist, idBlacklist);
			$startElement = $($blacklistExcluded[0]);

			// Follow an index step
			$targetNode = this.getNextNode(CFIStepValue, $startElement, classBlacklist, elementBlacklist, idBlacklist);

			// Return that shit!
			return $targetNode; 
		}

		// TODO: Other types of indirection
		// TODO: $targetNode.is("embed")) : src
		// TODO: ($targetNode.is("object")) : data
		// TODO: ($targetNode.is("image") || $targetNode.is("xlink:href")) : xlink:href
	},

	// Description: Injects an element at the specified text node
	// Arguments: a cfi text termination string, a jquery object to the current node
	// REFACTORING CANDIDATE: Rename this to indicate that it injects into a text terminus
	textTermination : function ($currNode, textOffset, elementToInject) {

		var $injectedElement;
		// Get the first node, this should be a text node
		if ($currNode === undefined) {

			throw NodeTypeError($currNode, "expected a terminating node, or node list");
		} 
		else if ($currNode.length === 0) {

			throw TerminusError("Text", "Text offset:" + textOffset, "no nodes found for termination condition");
		}

		$injectedElement = this.injectCFIMarkerIntoText($currNode, textOffset, elementToInject);
		return $injectedElement;
	},

	// Description: Checks that the id assertion for the node target matches that on 
	//   the found node. 
	targetIdMatchesIdAssertion : function ($foundNode, idAssertion) {

		if ($foundNode.attr("id") === idAssertion) {

			return true;
		}
		else {

			return false;
		}
	},

	// ------------------------------------------------------------------------------------ //
	//  "PRIVATE" HELPERS                                                                   //
	// ------------------------------------------------------------------------------------ //

	// Description: Step reference for xml element node. Expected that CFIStepValue is an even integer
	elementNodeStep : function (CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist) {

		var $targetNode;
		var $blacklistExcluded;
		var numElements;
		var jqueryTargetNodeIndex = (CFIStepValue / 2) - 1;

		$blacklistExcluded = this.applyBlacklist($currNode.children(), classBlacklist, elementBlacklist, idBlacklist);
		numElements = $blacklistExcluded.length;

		if (this.indexOutOfRange(jqueryTargetNodeIndex, numElements)) {

			throw OutOfRangeError(jqueryTargetNodeIndex, numElements - 1, "");
		}

	    $targetNode = $($blacklistExcluded[jqueryTargetNodeIndex]);
		return $targetNode;
	},

	retrieveItemRefHref : function ($itemRefElement, $packageDocument) {

		return $("#" + $itemRefElement.attr("idref"), $packageDocument).attr("href");
	},

	indexOutOfRange : function (targetIndex, numChildElements) {

		return (targetIndex > numChildElements - 1) ? true : false;
	},

	// Rationale: In order to inject an element into a specific position, access to the parent object 
	//   is required. This is obtained with the jquery parent() method. An alternative would be to 
	//   pass in the parent with a filtered list containing only children that are part of the target text node.
    injectCFIMarkerIntoText : function ($textNodeList, textOffset, elementToInject) {

        var nodeNum;
        var currNodeLength;
        var currTextPosition = 0;
        var nodeOffset;
        var originalText;
        var $injectedNode;
        var $newTextNode;
        // The iteration counter may be incorrect here (should be $textNodeList.length - 1 ??)
        for (nodeNum = 0; nodeNum <= $textNodeList.length; nodeNum++) {

            if ($textNodeList[nodeNum].nodeType === 3) {

                currNodeMaxIndex = $textNodeList[nodeNum].nodeValue.length  + currTextPosition;
                nodeOffset = textOffset - currTextPosition;

                if (currNodeMaxIndex > textOffset) {

                    // This node is going to be split and the components re-inserted
                    originalText = $textNodeList[nodeNum].nodeValue;	

                    // Before part
                    $textNodeList[nodeNum].nodeValue = originalText.slice(0, nodeOffset);

                    // Injected element
                    $injectedNode = $(elementToInject).insertAfter($textNodeList.eq(nodeNum));

                    // After part
                    $newTextNode = $(document.createTextNode(originalText.slice(nodeOffset, originalText.length)));
                    $($newTextNode).insertAfter($injectedNode);

                    return $injectedNode;
                } else if (currNodeMaxIndex == textOffset){
                    $injectedNode = $(elementToInject).insertAfter($textNodeList.eq(nodeNum));
                    return $injectedNode;
                }
                else {

                    currTextPosition = currNodeMaxIndex;
                }
            }
        }

        throw TerminusError("Text", "Text offset:" + textOffset, "The offset exceeded the length of the text");
    },

	// Rationale: In order to inject an element into a specific position, access to the parent object 
	//   is required. This is obtained with the jquery parent() method. An alternative would be to 
	//   pass in the parent with a filtered list containing only children that are part of the target text node.

	// Description: This method finds a target text node and then injects an element into the appropriate node
	// Rationale: The possibility that cfi marker elements have been injected into a text node at some point previous to 
	//   this method being called (and thus splitting the original text node into two separate text nodes) necessitates that
	//   the set of nodes that compromised the original target text node are inferred and returned.
	// Notes: Passed a current node. This node should have a set of elements under it. This will include at least one text node, 
	//   element nodes (maybe), or possibly a mix. 
	// REFACTORING CANDIDATE: This method is pretty long (and confusing). Worth investigating to see if it can be refactored into something clearer.
	inferTargetTextNode : function (CFIStepValue, $currNode, classBlacklist, elementBlacklist, idBlacklist) {
		
		var $elementsWithoutMarkers;
		var currLogicalTextNodeIndex;
		var targetLogicalTextNodeIndex;
		var nodeNum;
		var $targetTextNodeList;
		var prevNodeWasTextNode;

		// Remove any cfi marker elements from the set of elements. 
		// Rationale: A filtering function is used, as simply using a class selector with jquery appears to 
		//   result in behaviour where text nodes are also filtered out, along with the class element being filtered.
		$elementsWithoutMarkers = this.applyBlacklist($currNode.contents(), classBlacklist, elementBlacklist, idBlacklist);

		// Convert CFIStepValue to logical index; assumes odd integer for the step value
		targetLogicalTextNodeIndex = ((parseInt(CFIStepValue) + 1) / 2) - 1;

		// Set text node position counter
		currLogicalTextNodeIndex = 0;
		prevNodeWasTextNode = false;
		$targetTextNodeList = $elementsWithoutMarkers.filter(
			function () {

				if (currLogicalTextNodeIndex === targetLogicalTextNodeIndex) {

					// If it's a text node
					if (this.nodeType === Node.TEXT_NODE) {
						prevNodeWasTextNode = true;
						return true;
					}
					// Rationale: The logical text node position is only incremented once a group of text nodes (a single logical
					//   text node) has been passed by the loop. 
					else if (prevNodeWasTextNode && (this.nodeType !== Node.TEXT_NODE)) {
						currLogicalTextNodeIndex++;
						prevNodeWasTextNode = false;			
						return false;
					}
				}
				// Don't return any elements
				else {

					if (this.nodeType === Node.TEXT_NODE) {
						prevNodeWasTextNode = true;
					}
					else if (prevNodeWasTextNode && (this.nodeType !== Node.TEXT_NODE) && (this !== $elementsWithoutMarkers.lastChild)) {
						currLogicalTextNodeIndex++;
						prevNodeWasTextNode = false;
					}

					return false;
				}
			}
		);

		// The filtering above should have counted the number of "logical" text nodes; this can be used to 
		// detect out of range errors
		if ($targetTextNodeList.length === 0) {
			throw OutOfRangeError(logicalTargetTextNodeIndex, currLogicalTextNodeIndex, "Index out of range");
		}

		// return the text node list
		return $targetTextNodeList;
	},

	applyBlacklist : function ($elements, classBlacklist, elementBlacklist, idBlacklist) {

        var $filteredElements;

        $filteredElements = $elements.filter(
            function () {

                var $currElement = $(this);
                var includeInList = true;

                if (classBlacklist) {

                	// Filter each element with the class type
                	$.each(classBlacklist, function (index, value) {

	                    if ($currElement.hasClass(value)) {
	                    	includeInList = false;

	                    	// Break this loop
	                        return false;
	                    }
                	});
                }

                if (elementBlacklist) {
                	
	                // For each type of element
	                $.each(elementBlacklist, function (index, value) {

	                    if ($currElement.is(value)) {
	                    	includeInList = false;

	                    	// Break this loop
	                        return false;
	                    }
	                });
				}

				if (idBlacklist) {
                	
	                // For each type of element
	                $.each(idBlacklist, function (index, value) {

	                    if ($currElement.attr("id") === value) {
	                    	includeInList = false;

	                    	// Break this loop
	                        return false;
	                    }
	                });
				}

                return includeInList;
            }
        );

        return $filteredElements;
    }
};

module.exports = Instructions

},{"./errors/node-type":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/node-type.js","./errors/out-of-range":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/out-of-range.js","./errors/terminus":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/terminus.js"}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/interpreter.js":[function(require,module,exports){
// Description: This is an interpreter that inteprets an Abstract Syntax Tree (AST) for a CFI. The result of executing the interpreter
//   is to inject an element, or set of elements, into an EPUB content document (which is just an XHTML document). These element(s) will
//   represent the position or area in the EPUB referenced by a CFI.
// Rationale: The AST is a clean and readable expression of the step-terminus structure of a CFI. Although building an interpreter adds to the
//   CFI infrastructure, it provides a number of benefits. First, it emphasizes a clear separation of concerns between lexing/parsing a
//   CFI, which involves some complexity related to escaped and special characters, and the execution of the underlying set of steps 
//   represented by the CFI. Second, it will be easier to extend the interpreter to account for new/altered CFI steps (say for references
//   to vector objects or multiple CFIs) than if lexing, parsing and interpretation were all handled in a single step. Finally, Readium's objective is 
//   to demonstrate implementation of the EPUB 3.0 spec. An implementation with a strong separation of concerns that conforms to 
//   well-understood patterns for DSL processing should be easier to communicate, analyze and understand. 
// REFACTORING CANDIDATE: node type errors shouldn't really be possible if the CFI syntax is correct and the parser is error free. 
//   Might want to make the script die in those instances, once the grammar and interpreter are more stable. 
// REFACTORING CANDIDATE: The use of the 'nodeType' property is confusing as this is a DOM node property and the two are unrelated. 
//   Whoops. There shouldn't be any interference, however, I think this should be changed. 

var $ = require('jquery')
var CFIAssertionError = require('./errors/cfi-assertion')
var Instructions = require('./instructions')
var NodeTypeError = require('./errors/node-type')
var Parser = require('./parser')

var Interpreter = {

    // ------------------------------------------------------------------------------------ //
    //  "PUBLIC" METHODS (THE API)                                                          //
    // ------------------------------------------------------------------------------------ //

    // Description: Find the content document referenced by the spine item. This should be the spine item 
    //   referenced by the first indirection step in the CFI.
    // Rationale: This method is a part of the API so that the reading system can "interact" the content document 
    //   pointed to by a CFI. If this is not a separate step, the processing of the CFI must be tightly coupled with 
    //   the reading system, as it stands now. 
    getContentDocHref : function (CFI, packageDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var $packageDocument = $(packageDocument);
        var decodedCFI = decodeURI(CFI);
        var CFIAST = Parser.parse(decodedCFI);

        if (!CFIAST || CFIAST.type !== "CFIAST") { 
            throw NodeTypeError(CFIAST, "expected CFI AST root node");
        }

        // Interpet the path node (the package document step)
        var $packageElement = $($("package", $packageDocument)[0]);
        var $currElement = this.interpretIndexStepNode(CFIAST.cfiString.path, $packageElement, classBlacklist, elementBlacklist, idBlacklist);
        foundHref = this.searchLocalPathForHref($currElement, $packageDocument, CFIAST.cfiString.localPath, classBlacklist, elementBlacklist, idBlacklist);

        if (foundHref) {
            return foundHref;
        }
        else {
            return undefined;
        }
    },

    // Description: Inject an arbitrary html element into a position in a content document referenced by a CFI
    injectElement : function (CFI, contentDocument, elementToInject, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(CFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var indirectionStepNum;
        var $currElement;

        // Rationale: Since the correct content document for this CFI is already being passed, we can skip to the beginning 
        //   of the indirection step that referenced the content document.
        // Note: This assumes that indirection steps and index steps conform to an interface: an object with stepLength, idAssertion
        indirectionStepNum = this.getFirstIndirectionStepNum(CFIAST);
        indirectionNode = CFIAST.cfiString.localPath.steps[indirectionStepNum];
        indirectionNode.type = "indexStep";

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, indirectionStepNum, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // TODO: detect what kind of terminus; for now, text node termini are the only kind implemented
        $currElement = this.interpretTextTerminusNode(CFIAST.cfiString.localPath.termStep, $currElement, elementToInject);

        // Return the element that was injected into
        return $currElement;
    },

    // Description: Inject an arbitrary html element into a position in a content document referenced by a CFI
    injectRangeElements : function (rangeCFI, contentDocument, startElementToInject, endElementToInject, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(rangeCFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var indirectionStepNum;
        var $currElement;
        var $range1TargetElement;
        var $range2TargetElement;

        // Rationale: Since the correct content document for this CFI is already being passed, we can skip to the beginning 
        //   of the indirection step that referenced the content document.
        // Note: This assumes that indirection steps and index steps conform to an interface: an object with stepLength, idAssertion
        indirectionStepNum = this.getFirstIndirectionStepNum(CFIAST);
        indirectionNode = CFIAST.cfiString.localPath.steps[indirectionStepNum];
        indirectionNode.type = "indexStep";

        // Interpret the rest of the steps in the first local path
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, indirectionStepNum, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Interpret the first range local_path
        $range1TargetElement = this.interpretLocalPath(CFIAST.cfiString.range1, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);
        $range1TargetElement = this.interpretTextTerminusNode(CFIAST.cfiString.range1.termStep, $range1TargetElement, startElementToInject);

        // Interpret the second range local_path
        $range2TargetElement = this.interpretLocalPath(CFIAST.cfiString.range2, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);
        $range2TargetElement = this.interpretTextTerminusNode(CFIAST.cfiString.range2.termStep, $range2TargetElement, endElementToInject);

        // Return the element that was injected into
        return {
            startElement : $range1TargetElement[0],
            endElement : $range2TargetElement[0]
        };
    },

    // Description: This method will return the element or node (say, a text node) that is the final target of the 
    //   the CFI.
    getTargetElement : function (CFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(CFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var indirectionStepNum;
        var $currElement;
        
        // Rationale: Since the correct content document for this CFI is already being passed, we can skip to the beginning 
        //   of the indirection step that referenced the content document.
        // Note: This assumes that indirection steps and index steps conform to an interface: an object with stepLength, idAssertion
        indirectionStepNum = this.getFirstIndirectionStepNum(CFIAST);
        indirectionNode = CFIAST.cfiString.localPath.steps[indirectionStepNum];
        indirectionNode.type = "indexStep";

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, indirectionStepNum, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Return the element at the end of the CFI
        return $currElement;
    },

    getRangeTargetElements : function (rangeCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(rangeCFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var indirectionStepNum;
        var $currElement;
        var $range1TargetElement;
        var $range2TargetElement;
        
        // Rationale: Since the correct content document for this CFI is already being passed, we can skip to the beginning 
        //   of the indirection step that referenced the content document.
        // Note: This assumes that indirection steps and index steps conform to an interface: an object with stepLength, idAssertion
        indirectionStepNum = this.getFirstIndirectionStepNum(CFIAST);
        indirectionNode = CFIAST.cfiString.localPath.steps[indirectionStepNum];
        indirectionNode.type = "indexStep";

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, indirectionStepNum, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Interpret first range local_path
        $range1TargetElement = this.interpretLocalPath(CFIAST.cfiString.range1, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Interpret second range local_path
        $range2TargetElement = this.interpretLocalPath(CFIAST.cfiString.range2, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Return the element at the end of the CFI
        return {
            startElement : $range1TargetElement[0],
            endElement : $range2TargetElement[0]
        };
    },

    // Description: This method allows a "partial" CFI to be used to reference a target in a content document, without a 
    //   package document CFI component. 
    // Arguments: {
    //     contentDocumentCFI : This is a partial CFI that represents a path in a content document only. This partial must be 
    //        syntactically valid, even though it references a path starting at the top of a content document (which is a CFI that
    //        that has no defined meaning in the spec.)
    //     contentDocument : A DOM representation of the content document to which the partial CFI refers. 
    // }
    // Rationale: This method exists to meet the requirements of the Readium-SDK and should be used with care
    getTargetElementWithPartialCFI : function (contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(contentDocumentCFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        
        // Interpret the path node 
        var $currElement = this.interpretIndexStepNode(CFIAST.cfiString.path, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Return the element at the end of the CFI
        return $currElement;        
    },

    // Description: This method allows a "partial" CFI to be used, with a content document, to return the text node and offset 
    //    referenced by the partial CFI.
    // Arguments: {
    //     contentDocumentCFI : This is a partial CFI that represents a path in a content document only. This partial must be 
    //        syntactically valid, even though it references a path starting at the top of a content document (which is a CFI that
    //        that has no defined meaning in the spec.)
    //     contentDocument : A DOM representation of the content document to which the partial CFI refers. 
    // }
    // Rationale: This method exists to meet the requirements of the Readium-SDK and should be used with care
    getTextTerminusInfoWithPartialCFI : function (contentDocumentCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {

        var decodedCFI = decodeURI(contentDocumentCFI);
        var CFIAST = Parser.parse(decodedCFI);
        var indirectionNode;
        var textOffset;
        
        // Interpret the path node 
        var $currElement = this.interpretIndexStepNode(CFIAST.cfiString.path, $("html", contentDocument), classBlacklist, elementBlacklist, idBlacklist);

        // Interpret the rest of the steps
        $currElement = this.interpretLocalPath(CFIAST.cfiString.localPath, 0, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Return the element at the end of the CFI
        textOffset = parseInt(CFIAST.cfiString.localPath.termStep.offsetValue);
        return { textNode : $currElement,
                 textOffset : textOffset
            };
    },

    // ------------------------------------------------------------------------------------ //
    //  "PRIVATE" HELPERS                                                                   //
    // ------------------------------------------------------------------------------------ //

    getFirstIndirectionStepNum : function (CFIAST) {

        // Find the first indirection step in the local path; follow it like a regular step, as the step in the content document it 
        //   references is already loaded and has been passed to this method
        var stepNum = 0;
        for (stepNum; stepNum <= CFIAST.cfiString.localPath.steps.length - 1 ; stepNum++) {
        
            nextStepNode = CFIAST.cfiString.localPath.steps[stepNum];
            if (nextStepNode.type === "indirectionStep") {
                return stepNum;
            }
        }
    },

    // REFACTORING CANDIDATE: cfiString node and start step num could be merged into one argument, by simply passing the 
    //   starting step... probably a good idea, this would make the meaning of this method clearer.
    interpretLocalPath : function (localPathNode, startStepNum, $currElement, classBlacklist, elementBlacklist, idBlacklist) {

        var stepNum = startStepNum;
        var nextStepNode;
        for (stepNum; stepNum <= localPathNode.steps.length - 1 ; stepNum++) {
        
            nextStepNode = localPathNode.steps[stepNum];
            if (nextStepNode.type === "indexStep") {

                $currElement = this.interpretIndexStepNode(nextStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist);
            }
            else if (nextStepNode.type === "indirectionStep") {

                $currElement = this.interpretIndirectionStepNode(nextStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist);
            }
        }

        return $currElement;
    },

    interpretIndexStepNode : function (indexStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist) {

        // Check node type; throw error if wrong type
        if (indexStepNode === undefined || indexStepNode.type !== "indexStep") {

            throw NodeTypeError(indexStepNode, "expected index step node");
        }

        // Index step
        var $stepTarget = Instructions.getNextNode(indexStepNode.stepLength, $currElement, classBlacklist, elementBlacklist, idBlacklist);

        // Check the id assertion, if it exists
        if (indexStepNode.idAssertion) {

            if (!Instructions.targetIdMatchesIdAssertion($stepTarget, indexStepNode.idAssertion)) {

                throw CFIAssertionError(indexStepNode.idAssertion, $stepTarget.attr('id'), "Id assertion failed");
            }
        }

        return $stepTarget;
    },

    interpretIndirectionStepNode : function (indirectionStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist) {

        // Check node type; throw error if wrong type
        if (indirectionStepNode === undefined || indirectionStepNode.type !== "indirectionStep") {

            throw NodeTypeError(indirectionStepNode, "expected indirection step node");
        }

        // Indirection step
        var $stepTarget = Instructions.followIndirectionStep(
            indirectionStepNode.stepLength, 
            $currElement, 
            classBlacklist, 
            elementBlacklist);

        // Check the id assertion, if it exists
        if (indirectionStepNode.idAssertion) {

            if (!Instructions.targetIdMatchesIdAssertion($stepTarget, indirectionStepNode.idAssertion)) {

                throw CFIAssertionError(indirectionStepNode.idAssertion, $stepTarget.attr('id'), "Id assertion failed");
            }
        }

        return $stepTarget;
    },

    // REFACTORING CANDIDATE: The logic here assumes that a user will always want to use this terminus
    //   to inject content into the found node. This will not always be the case, and different types of interpretation
    //   are probably desired. 
    interpretTextTerminusNode : function (terminusNode, $currElement, elementToInject) {

        if (terminusNode === undefined || terminusNode.type !== "textTerminus") {

            throw NodeTypeError(terminusNode, "expected text terminus node");
        }

        var $injectedElement = Instructions.textTermination(
            $currElement, 
            terminusNode.offsetValue, 
            elementToInject
            );

        return $injectedElement;
    },

    searchLocalPathForHref : function ($currElement, $packageDocument, localPathNode, classBlacklist, elementBlacklist, idBlacklist) {

        // Interpret the first local_path node, which is a set of steps and and a terminus condition
        var stepNum = 0;
        var nextStepNode;
        for (stepNum = 0 ; stepNum <= localPathNode.steps.length - 1 ; stepNum++) {
        
            nextStepNode = localPathNode.steps[stepNum];
            if (nextStepNode.type === "indexStep") {
                
                $currElement = this.interpretIndexStepNode(nextStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist);
            }
            else if (nextStepNode.type === "indirectionStep") {

                $currElement = this.interpretIndirectionStepNode(nextStepNode, $currElement, classBlacklist, elementBlacklist, idBlacklist);
            }

            // Found the content document href referenced by the spine item 
            if ($currElement.is("itemref")) {

                return Instructions.retrieveItemRefHref($currElement, $packageDocument);
            }
        }

        return undefined;
    }
};

module.exports = Interpreter

},{"./errors/cfi-assertion":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/cfi-assertion.js","./errors/node-type":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/errors/node-type.js","./instructions":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/instructions.js","./parser":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/parser.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/parser.js":[function(require,module,exports){
// Thin wrapper around the parser's generated file
module.exports = require('../parser/epub-cfi.js')

},{"../parser/epub-cfi.js":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/parser/epub-cfi.js"}],"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js":[function(require,module,exports){
/*!
 * jQuery JavaScript Library v2.1.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-18T15:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.3",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],"/Users/craverod/opensource/readium-js/node_modules/rangy/lib/rangy-core.js":[function(require,module,exports){
/**
 * Rangy, a cross-browser JavaScript range and selection library
 * https://github.com/timdown/rangy
 *
 * Copyright 2015, Tim Down
 * Licensed under the MIT license.
 * Version: 1.3.0-beta.1
 * Build date: 12 February 2015
 */

(function(factory, root) {
    if (typeof define == "function" && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof module != "undefined" && typeof exports == "object") {
        // Node/CommonJS style
        module.exports = factory();
    } else {
        // No AMD or CommonJS support so we place Rangy in (probably) the global variable
        root.rangy = factory();
    }
})(function() {

    var OBJECT = "object", FUNCTION = "function", UNDEFINED = "undefined";

    // Minimal set of properties required for DOM Level 2 Range compliance. Comparison constants such as START_TO_START
    // are omitted because ranges in KHTML do not have them but otherwise work perfectly well. See issue 113.
    var domRangeProperties = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed",
        "commonAncestorContainer"];

    // Minimal set of methods required for DOM Level 2 Range compliance
    var domRangeMethods = ["setStart", "setStartBefore", "setStartAfter", "setEnd", "setEndBefore",
        "setEndAfter", "collapse", "selectNode", "selectNodeContents", "compareBoundaryPoints", "deleteContents",
        "extractContents", "cloneContents", "insertNode", "surroundContents", "cloneRange", "toString", "detach"];

    var textRangeProperties = ["boundingHeight", "boundingLeft", "boundingTop", "boundingWidth", "htmlText", "text"];

    // Subset of TextRange's full set of methods that we're interested in
    var textRangeMethods = ["collapse", "compareEndPoints", "duplicate", "moveToElementText", "parentElement", "select",
        "setEndPoint", "getBoundingClientRect"];

    /*----------------------------------------------------------------------------------------------------------------*/

    // Trio of functions taken from Peter Michaux's article:
    // http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting
    function isHostMethod(o, p) {
        var t = typeof o[p];
        return t == FUNCTION || (!!(t == OBJECT && o[p])) || t == "unknown";
    }

    function isHostObject(o, p) {
        return !!(typeof o[p] == OBJECT && o[p]);
    }

    function isHostProperty(o, p) {
        return typeof o[p] != UNDEFINED;
    }

    // Creates a convenience function to save verbose repeated calls to tests functions
    function createMultiplePropertyTest(testFunc) {
        return function(o, props) {
            var i = props.length;
            while (i--) {
                if (!testFunc(o, props[i])) {
                    return false;
                }
            }
            return true;
        };
    }

    // Next trio of functions are a convenience to save verbose repeated calls to previous two functions
    var areHostMethods = createMultiplePropertyTest(isHostMethod);
    var areHostObjects = createMultiplePropertyTest(isHostObject);
    var areHostProperties = createMultiplePropertyTest(isHostProperty);

    function isTextRange(range) {
        return range && areHostMethods(range, textRangeMethods) && areHostProperties(range, textRangeProperties);
    }

    function getBody(doc) {
        return isHostObject(doc, "body") ? doc.body : doc.getElementsByTagName("body")[0];
    }

    var forEach = [].forEach ?
        function(arr, func) {
            arr.forEach(func);
        } :
        function(arr, func) {
            for (var i = 0, len = arr.length; i < len; ++i) {
                func(arr[i], i);
            }
        };

    var modules = {};

    var isBrowser = (typeof window != UNDEFINED && typeof document != UNDEFINED);

    var util = {
        isHostMethod: isHostMethod,
        isHostObject: isHostObject,
        isHostProperty: isHostProperty,
        areHostMethods: areHostMethods,
        areHostObjects: areHostObjects,
        areHostProperties: areHostProperties,
        isTextRange: isTextRange,
        getBody: getBody,
        forEach: forEach
    };

    var api = {
        version: "1.3.0-beta.1",
        initialized: false,
        isBrowser: isBrowser,
        supported: true,
        util: util,
        features: {},
        modules: modules,
        config: {
            alertOnFail: true,
            alertOnWarn: false,
            preferTextRange: false,
            autoInitialize: (typeof rangyAutoInitialize == UNDEFINED) ? true : rangyAutoInitialize
        }
    };

    function consoleLog(msg) {
        if (typeof console != UNDEFINED && isHostMethod(console, "log")) {
            console.log(msg);
        }
    }

    function alertOrLog(msg, shouldAlert) {
        if (isBrowser && shouldAlert) {
            alert(msg);
        } else  {
            consoleLog(msg);
        }
    }

    function fail(reason) {
        api.initialized = true;
        api.supported = false;
        alertOrLog("Rangy is not supported in this environment. Reason: " + reason, api.config.alertOnFail);
    }

    api.fail = fail;

    function warn(msg) {
        alertOrLog("Rangy warning: " + msg, api.config.alertOnWarn);
    }

    api.warn = warn;

    // Add utility extend() method
    var extend;
    if ({}.hasOwnProperty) {
        util.extend = extend = function(obj, props, deep) {
            var o, p;
            for (var i in props) {
                if (props.hasOwnProperty(i)) {
                    o = obj[i];
                    p = props[i];
                    if (deep && o !== null && typeof o == "object" && p !== null && typeof p == "object") {
                        extend(o, p, true);
                    }
                    obj[i] = p;
                }
            }
            // Special case for toString, which does not show up in for...in loops in IE <= 8
            if (props.hasOwnProperty("toString")) {
                obj.toString = props.toString;
            }
            return obj;
        };

        util.createOptions = function(optionsParam, defaults) {
            var options = {};
            extend(options, defaults);
            if (optionsParam) {
                extend(options, optionsParam);
            }
            return options;
        };
    } else {
        fail("hasOwnProperty not supported");
    }

    // Test whether we're in a browser and bail out if not
    if (!isBrowser) {
        fail("Rangy can only run in a browser");
    }

    // Test whether Array.prototype.slice can be relied on for NodeLists and use an alternative toArray() if not
    (function() {
        var toArray;

        if (isBrowser) {
            var el = document.createElement("div");
            el.appendChild(document.createElement("span"));
            var slice = [].slice;
            try {
                if (slice.call(el.childNodes, 0)[0].nodeType == 1) {
                    toArray = function(arrayLike) {
                        return slice.call(arrayLike, 0);
                    };
                }
            } catch (e) {}
        }

        if (!toArray) {
            toArray = function(arrayLike) {
                var arr = [];
                for (var i = 0, len = arrayLike.length; i < len; ++i) {
                    arr[i] = arrayLike[i];
                }
                return arr;
            };
        }

        util.toArray = toArray;
    })();

    // Very simple event handler wrapper function that doesn't attempt to solve issues such as "this" handling or
    // normalization of event properties
    var addListener;
    if (isBrowser) {
        if (isHostMethod(document, "addEventListener")) {
            addListener = function(obj, eventType, listener) {
                obj.addEventListener(eventType, listener, false);
            };
        } else if (isHostMethod(document, "attachEvent")) {
            addListener = function(obj, eventType, listener) {
                obj.attachEvent("on" + eventType, listener);
            };
        } else {
            fail("Document does not have required addEventListener or attachEvent method");
        }

        util.addListener = addListener;
    }

    var initListeners = [];

    function getErrorDesc(ex) {
        return ex.message || ex.description || String(ex);
    }

    // Initialization
    function init() {
        if (!isBrowser || api.initialized) {
            return;
        }
        var testRange;
        var implementsDomRange = false, implementsTextRange = false;

        // First, perform basic feature tests

        if (isHostMethod(document, "createRange")) {
            testRange = document.createRange();
            if (areHostMethods(testRange, domRangeMethods) && areHostProperties(testRange, domRangeProperties)) {
                implementsDomRange = true;
            }
        }

        var body = getBody(document);
        if (!body || body.nodeName.toLowerCase() != "body") {
            fail("No body element found");
            return;
        }

        if (body && isHostMethod(body, "createTextRange")) {
            testRange = body.createTextRange();
            if (isTextRange(testRange)) {
                implementsTextRange = true;
            }
        }

        if (!implementsDomRange && !implementsTextRange) {
            fail("Neither Range nor TextRange are available");
            return;
        }

        api.initialized = true;
        api.features = {
            implementsDomRange: implementsDomRange,
            implementsTextRange: implementsTextRange
        };

        // Initialize modules
        var module, errorMessage;
        for (var moduleName in modules) {
            if ( (module = modules[moduleName]) instanceof Module ) {
                module.init(module, api);
            }
        }

        // Call init listeners
        for (var i = 0, len = initListeners.length; i < len; ++i) {
            try {
                initListeners[i](api);
            } catch (ex) {
                errorMessage = "Rangy init listener threw an exception. Continuing. Detail: " + getErrorDesc(ex);
                consoleLog(errorMessage);
            }
        }
    }

    // Allow external scripts to initialize this library in case it's loaded after the document has loaded
    api.init = init;

    // Execute listener immediately if already initialized
    api.addInitListener = function(listener) {
        if (api.initialized) {
            listener(api);
        } else {
            initListeners.push(listener);
        }
    };

    var shimListeners = [];

    api.addShimListener = function(listener) {
        shimListeners.push(listener);
    };

    function shim(win) {
        win = win || window;
        init();

        // Notify listeners
        for (var i = 0, len = shimListeners.length; i < len; ++i) {
            shimListeners[i](win);
        }
    }

    if (isBrowser) {
        api.shim = api.createMissingNativeApi = shim;
    }

    function Module(name, dependencies, initializer) {
        this.name = name;
        this.dependencies = dependencies;
        this.initialized = false;
        this.supported = false;
        this.initializer = initializer;
    }

    Module.prototype = {
        init: function() {
            var requiredModuleNames = this.dependencies || [];
            for (var i = 0, len = requiredModuleNames.length, requiredModule, moduleName; i < len; ++i) {
                moduleName = requiredModuleNames[i];

                requiredModule = modules[moduleName];
                if (!requiredModule || !(requiredModule instanceof Module)) {
                    throw new Error("required module '" + moduleName + "' not found");
                }

                requiredModule.init();

                if (!requiredModule.supported) {
                    throw new Error("required module '" + moduleName + "' not supported");
                }
            }

            // Now run initializer
            this.initializer(this);
        },

        fail: function(reason) {
            this.initialized = true;
            this.supported = false;
            throw new Error("Module '" + this.name + "' failed to load: " + reason);
        },

        warn: function(msg) {
            api.warn("Module " + this.name + ": " + msg);
        },

        deprecationNotice: function(deprecated, replacement) {
            api.warn("DEPRECATED: " + deprecated + " in module " + this.name + "is deprecated. Please use " +
                replacement + " instead");
        },

        createError: function(msg) {
            return new Error("Error in Rangy " + this.name + " module: " + msg);
        }
    };

    function createModule(name, dependencies, initFunc) {
        var newModule = new Module(name, dependencies, function(module) {
            if (!module.initialized) {
                module.initialized = true;
                try {
                    initFunc(api, module);
                    module.supported = true;
                } catch (ex) {
                    var errorMessage = "Module '" + name + "' failed to load: " + getErrorDesc(ex);
                    consoleLog(errorMessage);
                    if (ex.stack) {
                        consoleLog(ex.stack);
                    }
                }
            }
        });
        modules[name] = newModule;
        return newModule;
    }

    api.createModule = function(name) {
        // Allow 2 or 3 arguments (second argument is an optional array of dependencies)
        var initFunc, dependencies;
        if (arguments.length == 2) {
            initFunc = arguments[1];
            dependencies = [];
        } else {
            initFunc = arguments[2];
            dependencies = arguments[1];
        }

        var module = createModule(name, dependencies, initFunc);

        // Initialize the module immediately if the core is already initialized
        if (api.initialized && api.supported) {
            module.init();
        }
    };

    api.createCoreModule = function(name, dependencies, initFunc) {
        createModule(name, dependencies, initFunc);
    };

    /*----------------------------------------------------------------------------------------------------------------*/

    // Ensure rangy.rangePrototype and rangy.selectionPrototype are available immediately

    function RangePrototype() {}
    api.RangePrototype = RangePrototype;
    api.rangePrototype = new RangePrototype();

    function SelectionPrototype() {}
    api.selectionPrototype = new SelectionPrototype();

    /*----------------------------------------------------------------------------------------------------------------*/

    // DOM utility methods used by Rangy
    api.createCoreModule("DomUtil", [], function(api, module) {
        var UNDEF = "undefined";
        var util = api.util;

        // Perform feature tests
        if (!util.areHostMethods(document, ["createDocumentFragment", "createElement", "createTextNode"])) {
            module.fail("document missing a Node creation method");
        }

        if (!util.isHostMethod(document, "getElementsByTagName")) {
            module.fail("document missing getElementsByTagName method");
        }

        var el = document.createElement("div");
        if (!util.areHostMethods(el, ["insertBefore", "appendChild", "cloneNode"] ||
                !util.areHostObjects(el, ["previousSibling", "nextSibling", "childNodes", "parentNode"]))) {
            module.fail("Incomplete Element implementation");
        }

        // innerHTML is required for Range's createContextualFragment method
        if (!util.isHostProperty(el, "innerHTML")) {
            module.fail("Element is missing innerHTML property");
        }

        var textNode = document.createTextNode("test");
        if (!util.areHostMethods(textNode, ["splitText", "deleteData", "insertData", "appendData", "cloneNode"] ||
                !util.areHostObjects(el, ["previousSibling", "nextSibling", "childNodes", "parentNode"]) ||
                !util.areHostProperties(textNode, ["data"]))) {
            module.fail("Incomplete Text Node implementation");
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // Removed use of indexOf because of a bizarre bug in Opera that is thrown in one of the Acid3 tests. I haven't been
        // able to replicate it outside of the test. The bug is that indexOf returns -1 when called on an Array that
        // contains just the document as a single element and the value searched for is the document.
        var arrayContains = /*Array.prototype.indexOf ?
            function(arr, val) {
                return arr.indexOf(val) > -1;
            }:*/

            function(arr, val) {
                var i = arr.length;
                while (i--) {
                    if (arr[i] === val) {
                        return true;
                    }
                }
                return false;
            };

        // Opera 11 puts HTML elements in the null namespace, it seems, and IE 7 has undefined namespaceURI
        function isHtmlNamespace(node) {
            var ns;
            return typeof node.namespaceURI == UNDEF || ((ns = node.namespaceURI) === null || ns == "http://www.w3.org/1999/xhtml");
        }

        function parentElement(node) {
            var parent = node.parentNode;
            return (parent.nodeType == 1) ? parent : null;
        }

        function getNodeIndex(node) {
            var i = 0;
            while( (node = node.previousSibling) ) {
                ++i;
            }
            return i;
        }

        function getNodeLength(node) {
            switch (node.nodeType) {
                case 7:
                case 10:
                    return 0;
                case 3:
                case 8:
                    return node.length;
                default:
                    return node.childNodes.length;
            }
        }

        function getCommonAncestor(node1, node2) {
            var ancestors = [], n;
            for (n = node1; n; n = n.parentNode) {
                ancestors.push(n);
            }

            for (n = node2; n; n = n.parentNode) {
                if (arrayContains(ancestors, n)) {
                    return n;
                }
            }

            return null;
        }

        function isAncestorOf(ancestor, descendant, selfIsAncestor) {
            var n = selfIsAncestor ? descendant : descendant.parentNode;
            while (n) {
                if (n === ancestor) {
                    return true;
                } else {
                    n = n.parentNode;
                }
            }
            return false;
        }

        function isOrIsAncestorOf(ancestor, descendant) {
            return isAncestorOf(ancestor, descendant, true);
        }

        function getClosestAncestorIn(node, ancestor, selfIsAncestor) {
            var p, n = selfIsAncestor ? node : node.parentNode;
            while (n) {
                p = n.parentNode;
                if (p === ancestor) {
                    return n;
                }
                n = p;
            }
            return null;
        }

        function isCharacterDataNode(node) {
            var t = node.nodeType;
            return t == 3 || t == 4 || t == 8 ; // Text, CDataSection or Comment
        }

        function isTextOrCommentNode(node) {
            if (!node) {
                return false;
            }
            var t = node.nodeType;
            return t == 3 || t == 8 ; // Text or Comment
        }

        function insertAfter(node, precedingNode) {
            var nextNode = precedingNode.nextSibling, parent = precedingNode.parentNode;
            if (nextNode) {
                parent.insertBefore(node, nextNode);
            } else {
                parent.appendChild(node);
            }
            return node;
        }

        // Note that we cannot use splitText() because it is bugridden in IE 9.
        function splitDataNode(node, index, positionsToPreserve) {
            var newNode = node.cloneNode(false);
            newNode.deleteData(0, index);
            node.deleteData(index, node.length - index);
            insertAfter(newNode, node);

            // Preserve positions
            if (positionsToPreserve) {
                for (var i = 0, position; position = positionsToPreserve[i++]; ) {
                    // Handle case where position was inside the portion of node after the split point
                    if (position.node == node && position.offset > index) {
                        position.node = newNode;
                        position.offset -= index;
                    }
                    // Handle the case where the position is a node offset within node's parent
                    else if (position.node == node.parentNode && position.offset > getNodeIndex(node)) {
                        ++position.offset;
                    }
                }
            }
            return newNode;
        }

        function getDocument(node) {
            if (node.nodeType == 9) {
                return node;
            } else if (typeof node.ownerDocument != UNDEF) {
                return node.ownerDocument;
            } else if (typeof node.document != UNDEF) {
                return node.document;
            } else if (node.parentNode) {
                return getDocument(node.parentNode);
            } else {
                throw module.createError("getDocument: no document found for node");
            }
        }

        function getWindow(node) {
            var doc = getDocument(node);
            if (typeof doc.defaultView != UNDEF) {
                return doc.defaultView;
            } else if (typeof doc.parentWindow != UNDEF) {
                return doc.parentWindow;
            } else {
                throw module.createError("Cannot get a window object for node");
            }
        }

        function getIframeDocument(iframeEl) {
            if (typeof iframeEl.contentDocument != UNDEF) {
                return iframeEl.contentDocument;
            } else if (typeof iframeEl.contentWindow != UNDEF) {
                return iframeEl.contentWindow.document;
            } else {
                throw module.createError("getIframeDocument: No Document object found for iframe element");
            }
        }

        function getIframeWindow(iframeEl) {
            if (typeof iframeEl.contentWindow != UNDEF) {
                return iframeEl.contentWindow;
            } else if (typeof iframeEl.contentDocument != UNDEF) {
                return iframeEl.contentDocument.defaultView;
            } else {
                throw module.createError("getIframeWindow: No Window object found for iframe element");
            }
        }

        // This looks bad. Is it worth it?
        function isWindow(obj) {
            return obj && util.isHostMethod(obj, "setTimeout") && util.isHostObject(obj, "document");
        }

        function getContentDocument(obj, module, methodName) {
            var doc;

            if (!obj) {
                doc = document;
            }

            // Test if a DOM node has been passed and obtain a document object for it if so
            else if (util.isHostProperty(obj, "nodeType")) {
                doc = (obj.nodeType == 1 && obj.tagName.toLowerCase() == "iframe") ?
                    getIframeDocument(obj) : getDocument(obj);
            }

            // Test if the doc parameter appears to be a Window object
            else if (isWindow(obj)) {
                doc = obj.document;
            }

            if (!doc) {
                throw module.createError(methodName + "(): Parameter must be a Window object or DOM node");
            }

            return doc;
        }

        function getRootContainer(node) {
            var parent;
            while ( (parent = node.parentNode) ) {
                node = parent;
            }
            return node;
        }

        function comparePoints(nodeA, offsetA, nodeB, offsetB) {
            // See http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Comparing
            var nodeC, root, childA, childB, n;
            if (nodeA == nodeB) {
                // Case 1: nodes are the same
                return offsetA === offsetB ? 0 : (offsetA < offsetB) ? -1 : 1;
            } else if ( (nodeC = getClosestAncestorIn(nodeB, nodeA, true)) ) {
                // Case 2: node C (container B or an ancestor) is a child node of A
                return offsetA <= getNodeIndex(nodeC) ? -1 : 1;
            } else if ( (nodeC = getClosestAncestorIn(nodeA, nodeB, true)) ) {
                // Case 3: node C (container A or an ancestor) is a child node of B
                return getNodeIndex(nodeC) < offsetB  ? -1 : 1;
            } else {
                root = getCommonAncestor(nodeA, nodeB);
                if (!root) {
                    throw new Error("comparePoints error: nodes have no common ancestor");
                }

                // Case 4: containers are siblings or descendants of siblings
                childA = (nodeA === root) ? root : getClosestAncestorIn(nodeA, root, true);
                childB = (nodeB === root) ? root : getClosestAncestorIn(nodeB, root, true);

                if (childA === childB) {
                    // This shouldn't be possible
                    throw module.createError("comparePoints got to case 4 and childA and childB are the same!");
                } else {
                    n = root.firstChild;
                    while (n) {
                        if (n === childA) {
                            return -1;
                        } else if (n === childB) {
                            return 1;
                        }
                        n = n.nextSibling;
                    }
                }
            }
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // Test for IE's crash (IE 6/7) or exception (IE >= 8) when a reference to garbage-collected text node is queried
        var crashyTextNodes = false;

        function isBrokenNode(node) {
            var n;
            try {
                n = node.parentNode;
                return false;
            } catch (e) {
                return true;
            }
        }

        (function() {
            var el = document.createElement("b");
            el.innerHTML = "1";
            var textNode = el.firstChild;
            el.innerHTML = "<br />";
            crashyTextNodes = isBrokenNode(textNode);

            api.features.crashyTextNodes = crashyTextNodes;
        })();

        /*----------------------------------------------------------------------------------------------------------------*/

        function inspectNode(node) {
            if (!node) {
                return "[No node]";
            }
            if (crashyTextNodes && isBrokenNode(node)) {
                return "[Broken node]";
            }
            if (isCharacterDataNode(node)) {
                return '"' + node.data + '"';
            }
            if (node.nodeType == 1) {
                var idAttr = node.id ? ' id="' + node.id + '"' : "";
                return "<" + node.nodeName + idAttr + ">[index:" + getNodeIndex(node) + ",length:" + node.childNodes.length + "][" + (node.innerHTML || "[innerHTML not supported]").slice(0, 25) + "]";
            }
            return node.nodeName;
        }

        function fragmentFromNodeChildren(node) {
            var fragment = getDocument(node).createDocumentFragment(), child;
            while ( (child = node.firstChild) ) {
                fragment.appendChild(child);
            }
            return fragment;
        }

        var getComputedStyleProperty;
        if (typeof window.getComputedStyle != UNDEF) {
            getComputedStyleProperty = function(el, propName) {
                return getWindow(el).getComputedStyle(el, null)[propName];
            };
        } else if (typeof document.documentElement.currentStyle != UNDEF) {
            getComputedStyleProperty = function(el, propName) {
                return el.currentStyle[propName];
            };
        } else {
            module.fail("No means of obtaining computed style properties found");
        }

        function NodeIterator(root) {
            this.root = root;
            this._next = root;
        }

        NodeIterator.prototype = {
            _current: null,

            hasNext: function() {
                return !!this._next;
            },

            next: function() {
                var n = this._current = this._next;
                var child, next;
                if (this._current) {
                    child = n.firstChild;
                    if (child) {
                        this._next = child;
                    } else {
                        next = null;
                        while ((n !== this.root) && !(next = n.nextSibling)) {
                            n = n.parentNode;
                        }
                        this._next = next;
                    }
                }
                return this._current;
            },

            detach: function() {
                this._current = this._next = this.root = null;
            }
        };

        function createIterator(root) {
            return new NodeIterator(root);
        }

        function DomPosition(node, offset) {
            this.node = node;
            this.offset = offset;
        }

        DomPosition.prototype = {
            equals: function(pos) {
                return !!pos && this.node === pos.node && this.offset == pos.offset;
            },

            inspect: function() {
                return "[DomPosition(" + inspectNode(this.node) + ":" + this.offset + ")]";
            },

            toString: function() {
                return this.inspect();
            }
        };

        function DOMException(codeName) {
            this.code = this[codeName];
            this.codeName = codeName;
            this.message = "DOMException: " + this.codeName;
        }

        DOMException.prototype = {
            INDEX_SIZE_ERR: 1,
            HIERARCHY_REQUEST_ERR: 3,
            WRONG_DOCUMENT_ERR: 4,
            NO_MODIFICATION_ALLOWED_ERR: 7,
            NOT_FOUND_ERR: 8,
            NOT_SUPPORTED_ERR: 9,
            INVALID_STATE_ERR: 11,
            INVALID_NODE_TYPE_ERR: 24
        };

        DOMException.prototype.toString = function() {
            return this.message;
        };

        api.dom = {
            arrayContains: arrayContains,
            isHtmlNamespace: isHtmlNamespace,
            parentElement: parentElement,
            getNodeIndex: getNodeIndex,
            getNodeLength: getNodeLength,
            getCommonAncestor: getCommonAncestor,
            isAncestorOf: isAncestorOf,
            isOrIsAncestorOf: isOrIsAncestorOf,
            getClosestAncestorIn: getClosestAncestorIn,
            isCharacterDataNode: isCharacterDataNode,
            isTextOrCommentNode: isTextOrCommentNode,
            insertAfter: insertAfter,
            splitDataNode: splitDataNode,
            getDocument: getDocument,
            getWindow: getWindow,
            getIframeWindow: getIframeWindow,
            getIframeDocument: getIframeDocument,
            getBody: util.getBody,
            isWindow: isWindow,
            getContentDocument: getContentDocument,
            getRootContainer: getRootContainer,
            comparePoints: comparePoints,
            isBrokenNode: isBrokenNode,
            inspectNode: inspectNode,
            getComputedStyleProperty: getComputedStyleProperty,
            fragmentFromNodeChildren: fragmentFromNodeChildren,
            createIterator: createIterator,
            DomPosition: DomPosition
        };

        api.DOMException = DOMException;
    });

    /*----------------------------------------------------------------------------------------------------------------*/

    // Pure JavaScript implementation of DOM Range
    api.createCoreModule("DomRange", ["DomUtil"], function(api, module) {
        var dom = api.dom;
        var util = api.util;
        var DomPosition = dom.DomPosition;
        var DOMException = api.DOMException;

        var isCharacterDataNode = dom.isCharacterDataNode;
        var getNodeIndex = dom.getNodeIndex;
        var isOrIsAncestorOf = dom.isOrIsAncestorOf;
        var getDocument = dom.getDocument;
        var comparePoints = dom.comparePoints;
        var splitDataNode = dom.splitDataNode;
        var getClosestAncestorIn = dom.getClosestAncestorIn;
        var getNodeLength = dom.getNodeLength;
        var arrayContains = dom.arrayContains;
        var getRootContainer = dom.getRootContainer;
        var crashyTextNodes = api.features.crashyTextNodes;

        /*----------------------------------------------------------------------------------------------------------------*/

        // Utility functions

        function isNonTextPartiallySelected(node, range) {
            return (node.nodeType != 3) &&
                   (isOrIsAncestorOf(node, range.startContainer) || isOrIsAncestorOf(node, range.endContainer));
        }

        function getRangeDocument(range) {
            return range.document || getDocument(range.startContainer);
        }

        function getBoundaryBeforeNode(node) {
            return new DomPosition(node.parentNode, getNodeIndex(node));
        }

        function getBoundaryAfterNode(node) {
            return new DomPosition(node.parentNode, getNodeIndex(node) + 1);
        }

        function insertNodeAtPosition(node, n, o) {
            var firstNodeInserted = node.nodeType == 11 ? node.firstChild : node;
            if (isCharacterDataNode(n)) {
                if (o == n.length) {
                    dom.insertAfter(node, n);
                } else {
                    n.parentNode.insertBefore(node, o == 0 ? n : splitDataNode(n, o));
                }
            } else if (o >= n.childNodes.length) {
                n.appendChild(node);
            } else {
                n.insertBefore(node, n.childNodes[o]);
            }
            return firstNodeInserted;
        }

        function rangesIntersect(rangeA, rangeB, touchingIsIntersecting) {
            assertRangeValid(rangeA);
            assertRangeValid(rangeB);

            if (getRangeDocument(rangeB) != getRangeDocument(rangeA)) {
                throw new DOMException("WRONG_DOCUMENT_ERR");
            }

            var startComparison = comparePoints(rangeA.startContainer, rangeA.startOffset, rangeB.endContainer, rangeB.endOffset),
                endComparison = comparePoints(rangeA.endContainer, rangeA.endOffset, rangeB.startContainer, rangeB.startOffset);

            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;
        }

        function cloneSubtree(iterator) {
            var partiallySelected;
            for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {
                partiallySelected = iterator.isPartiallySelectedSubtree();
                node = node.cloneNode(!partiallySelected);
                if (partiallySelected) {
                    subIterator = iterator.getSubtreeIterator();
                    node.appendChild(cloneSubtree(subIterator));
                    subIterator.detach();
                }

                if (node.nodeType == 10) { // DocumentType
                    throw new DOMException("HIERARCHY_REQUEST_ERR");
                }
                frag.appendChild(node);
            }
            return frag;
        }

        function iterateSubtree(rangeIterator, func, iteratorState) {
            var it, n;
            iteratorState = iteratorState || { stop: false };
            for (var node, subRangeIterator; node = rangeIterator.next(); ) {
                if (rangeIterator.isPartiallySelectedSubtree()) {
                    if (func(node) === false) {
                        iteratorState.stop = true;
                        return;
                    } else {
                        // The node is partially selected by the Range, so we can use a new RangeIterator on the portion of
                        // the node selected by the Range.
                        subRangeIterator = rangeIterator.getSubtreeIterator();
                        iterateSubtree(subRangeIterator, func, iteratorState);
                        subRangeIterator.detach();
                        if (iteratorState.stop) {
                            return;
                        }
                    }
                } else {
                    // The whole node is selected, so we can use efficient DOM iteration to iterate over the node and its
                    // descendants
                    it = dom.createIterator(node);
                    while ( (n = it.next()) ) {
                        if (func(n) === false) {
                            iteratorState.stop = true;
                            return;
                        }
                    }
                }
            }
        }

        function deleteSubtree(iterator) {
            var subIterator;
            while (iterator.next()) {
                if (iterator.isPartiallySelectedSubtree()) {
                    subIterator = iterator.getSubtreeIterator();
                    deleteSubtree(subIterator);
                    subIterator.detach();
                } else {
                    iterator.remove();
                }
            }
        }

        function extractSubtree(iterator) {
            for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {

                if (iterator.isPartiallySelectedSubtree()) {
                    node = node.cloneNode(false);
                    subIterator = iterator.getSubtreeIterator();
                    node.appendChild(extractSubtree(subIterator));
                    subIterator.detach();
                } else {
                    iterator.remove();
                }
                if (node.nodeType == 10) { // DocumentType
                    throw new DOMException("HIERARCHY_REQUEST_ERR");
                }
                frag.appendChild(node);
            }
            return frag;
        }

        function getNodesInRange(range, nodeTypes, filter) {
            var filterNodeTypes = !!(nodeTypes && nodeTypes.length), regex;
            var filterExists = !!filter;
            if (filterNodeTypes) {
                regex = new RegExp("^(" + nodeTypes.join("|") + ")$");
            }

            var nodes = [];
            iterateSubtree(new RangeIterator(range, false), function(node) {
                if (filterNodeTypes && !regex.test(node.nodeType)) {
                    return;
                }
                if (filterExists && !filter(node)) {
                    return;
                }
                // Don't include a boundary container if it is a character data node and the range does not contain any
                // of its character data. See issue 190.
                var sc = range.startContainer;
                if (node == sc && isCharacterDataNode(sc) && range.startOffset == sc.length) {
                    return;
                }

                var ec = range.endContainer;
                if (node == ec && isCharacterDataNode(ec) && range.endOffset == 0) {
                    return;
                }

                nodes.push(node);
            });
            return nodes;
        }

        function inspect(range) {
            var name = (typeof range.getName == "undefined") ? "Range" : range.getName();
            return "[" + name + "(" + dom.inspectNode(range.startContainer) + ":" + range.startOffset + ", " +
                    dom.inspectNode(range.endContainer) + ":" + range.endOffset + ")]";
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // RangeIterator code partially borrows from IERange by Tim Ryan (http://github.com/timcameronryan/IERange)

        function RangeIterator(range, clonePartiallySelectedTextNodes) {
            this.range = range;
            this.clonePartiallySelectedTextNodes = clonePartiallySelectedTextNodes;


            if (!range.collapsed) {
                this.sc = range.startContainer;
                this.so = range.startOffset;
                this.ec = range.endContainer;
                this.eo = range.endOffset;
                var root = range.commonAncestorContainer;

                if (this.sc === this.ec && isCharacterDataNode(this.sc)) {
                    this.isSingleCharacterDataNode = true;
                    this._first = this._last = this._next = this.sc;
                } else {
                    this._first = this._next = (this.sc === root && !isCharacterDataNode(this.sc)) ?
                        this.sc.childNodes[this.so] : getClosestAncestorIn(this.sc, root, true);
                    this._last = (this.ec === root && !isCharacterDataNode(this.ec)) ?
                        this.ec.childNodes[this.eo - 1] : getClosestAncestorIn(this.ec, root, true);
                }
            }
        }

        RangeIterator.prototype = {
            _current: null,
            _next: null,
            _first: null,
            _last: null,
            isSingleCharacterDataNode: false,

            reset: function() {
                this._current = null;
                this._next = this._first;
            },

            hasNext: function() {
                return !!this._next;
            },

            next: function() {
                // Move to next node
                var current = this._current = this._next;
                if (current) {
                    this._next = (current !== this._last) ? current.nextSibling : null;

                    // Check for partially selected text nodes
                    if (isCharacterDataNode(current) && this.clonePartiallySelectedTextNodes) {
                        if (current === this.ec) {
                            (current = current.cloneNode(true)).deleteData(this.eo, current.length - this.eo);
                        }
                        if (this._current === this.sc) {
                            (current = current.cloneNode(true)).deleteData(0, this.so);
                        }
                    }
                }

                return current;
            },

            remove: function() {
                var current = this._current, start, end;

                if (isCharacterDataNode(current) && (current === this.sc || current === this.ec)) {
                    start = (current === this.sc) ? this.so : 0;
                    end = (current === this.ec) ? this.eo : current.length;
                    if (start != end) {
                        current.deleteData(start, end - start);
                    }
                } else {
                    if (current.parentNode) {
                        current.parentNode.removeChild(current);
                    } else {
                    }
                }
            },

            // Checks if the current node is partially selected
            isPartiallySelectedSubtree: function() {
                var current = this._current;
                return isNonTextPartiallySelected(current, this.range);
            },

            getSubtreeIterator: function() {
                var subRange;
                if (this.isSingleCharacterDataNode) {
                    subRange = this.range.cloneRange();
                    subRange.collapse(false);
                } else {
                    subRange = new Range(getRangeDocument(this.range));
                    var current = this._current;
                    var startContainer = current, startOffset = 0, endContainer = current, endOffset = getNodeLength(current);

                    if (isOrIsAncestorOf(current, this.sc)) {
                        startContainer = this.sc;
                        startOffset = this.so;
                    }
                    if (isOrIsAncestorOf(current, this.ec)) {
                        endContainer = this.ec;
                        endOffset = this.eo;
                    }

                    updateBoundaries(subRange, startContainer, startOffset, endContainer, endOffset);
                }
                return new RangeIterator(subRange, this.clonePartiallySelectedTextNodes);
            },

            detach: function() {
                this.range = this._current = this._next = this._first = this._last = this.sc = this.so = this.ec = this.eo = null;
            }
        };

        /*----------------------------------------------------------------------------------------------------------------*/

        var beforeAfterNodeTypes = [1, 3, 4, 5, 7, 8, 10];
        var rootContainerNodeTypes = [2, 9, 11];
        var readonlyNodeTypes = [5, 6, 10, 12];
        var insertableNodeTypes = [1, 3, 4, 5, 7, 8, 10, 11];
        var surroundNodeTypes = [1, 3, 4, 5, 7, 8];

        function createAncestorFinder(nodeTypes) {
            return function(node, selfIsAncestor) {
                var t, n = selfIsAncestor ? node : node.parentNode;
                while (n) {
                    t = n.nodeType;
                    if (arrayContains(nodeTypes, t)) {
                        return n;
                    }
                    n = n.parentNode;
                }
                return null;
            };
        }

        var getDocumentOrFragmentContainer = createAncestorFinder( [9, 11] );
        var getReadonlyAncestor = createAncestorFinder(readonlyNodeTypes);
        var getDocTypeNotationEntityAncestor = createAncestorFinder( [6, 10, 12] );

        function assertNoDocTypeNotationEntityAncestor(node, allowSelf) {
            if (getDocTypeNotationEntityAncestor(node, allowSelf)) {
                throw new DOMException("INVALID_NODE_TYPE_ERR");
            }
        }

        function assertValidNodeType(node, invalidTypes) {
            if (!arrayContains(invalidTypes, node.nodeType)) {
                throw new DOMException("INVALID_NODE_TYPE_ERR");
            }
        }

        function assertValidOffset(node, offset) {
            if (offset < 0 || offset > (isCharacterDataNode(node) ? node.length : node.childNodes.length)) {
                throw new DOMException("INDEX_SIZE_ERR");
            }
        }

        function assertSameDocumentOrFragment(node1, node2) {
            if (getDocumentOrFragmentContainer(node1, true) !== getDocumentOrFragmentContainer(node2, true)) {
                throw new DOMException("WRONG_DOCUMENT_ERR");
            }
        }

        function assertNodeNotReadOnly(node) {
            if (getReadonlyAncestor(node, true)) {
                throw new DOMException("NO_MODIFICATION_ALLOWED_ERR");
            }
        }

        function assertNode(node, codeName) {
            if (!node) {
                throw new DOMException(codeName);
            }
        }

        function isOrphan(node) {
            return (crashyTextNodes && dom.isBrokenNode(node)) ||
                !arrayContains(rootContainerNodeTypes, node.nodeType) && !getDocumentOrFragmentContainer(node, true);
        }

        function isValidOffset(node, offset) {
            return offset <= (isCharacterDataNode(node) ? node.length : node.childNodes.length);
        }

        function isRangeValid(range) {
            return (!!range.startContainer && !!range.endContainer &&
                    !isOrphan(range.startContainer) &&
                    !isOrphan(range.endContainer) &&
                    isValidOffset(range.startContainer, range.startOffset) &&
                    isValidOffset(range.endContainer, range.endOffset));
        }

        function assertRangeValid(range) {
            if (!isRangeValid(range)) {
                throw new Error("Range error: Range is no longer valid after DOM mutation (" + range.inspect() + ")");
            }
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // Test the browser's innerHTML support to decide how to implement createContextualFragment
        var styleEl = document.createElement("style");
        var htmlParsingConforms = false;
        try {
            styleEl.innerHTML = "<b>x</b>";
            htmlParsingConforms = (styleEl.firstChild.nodeType == 3); // Opera incorrectly creates an element node
        } catch (e) {
            // IE 6 and 7 throw
        }

        api.features.htmlParsingConforms = htmlParsingConforms;

        var createContextualFragment = htmlParsingConforms ?

            // Implementation as per HTML parsing spec, trusting in the browser's implementation of innerHTML. See
            // discussion and base code for this implementation at issue 67.
            // Spec: http://html5.org/specs/dom-parsing.html#extensions-to-the-range-interface
            // Thanks to Aleks Williams.
            function(fragmentStr) {
                // "Let node the context object's start's node."
                var node = this.startContainer;
                var doc = getDocument(node);

                // "If the context object's start's node is null, raise an INVALID_STATE_ERR
                // exception and abort these steps."
                if (!node) {
                    throw new DOMException("INVALID_STATE_ERR");
                }

                // "Let element be as follows, depending on node's interface:"
                // Document, Document Fragment: null
                var el = null;

                // "Element: node"
                if (node.nodeType == 1) {
                    el = node;

                // "Text, Comment: node's parentElement"
                } else if (isCharacterDataNode(node)) {
                    el = dom.parentElement(node);
                }

                // "If either element is null or element's ownerDocument is an HTML document
                // and element's local name is "html" and element's namespace is the HTML
                // namespace"
                if (el === null || (
                    el.nodeName == "HTML" &&
                    dom.isHtmlNamespace(getDocument(el).documentElement) &&
                    dom.isHtmlNamespace(el)
                )) {

                // "let element be a new Element with "body" as its local name and the HTML
                // namespace as its namespace.""
                    el = doc.createElement("body");
                } else {
                    el = el.cloneNode(false);
                }

                // "If the node's document is an HTML document: Invoke the HTML fragment parsing algorithm."
                // "If the node's document is an XML document: Invoke the XML fragment parsing algorithm."
                // "In either case, the algorithm must be invoked with fragment as the input
                // and element as the context element."
                el.innerHTML = fragmentStr;

                // "If this raises an exception, then abort these steps. Otherwise, let new
                // children be the nodes returned."

                // "Let fragment be a new DocumentFragment."
                // "Append all new children to fragment."
                // "Return fragment."
                return dom.fragmentFromNodeChildren(el);
            } :

            // In this case, innerHTML cannot be trusted, so fall back to a simpler, non-conformant implementation that
            // previous versions of Rangy used (with the exception of using a body element rather than a div)
            function(fragmentStr) {
                var doc = getRangeDocument(this);
                var el = doc.createElement("body");
                el.innerHTML = fragmentStr;

                return dom.fragmentFromNodeChildren(el);
            };

        function splitRangeBoundaries(range, positionsToPreserve) {
            assertRangeValid(range);

            var sc = range.startContainer, so = range.startOffset, ec = range.endContainer, eo = range.endOffset;
            var startEndSame = (sc === ec);

            if (isCharacterDataNode(ec) && eo > 0 && eo < ec.length) {
                splitDataNode(ec, eo, positionsToPreserve);
            }

            if (isCharacterDataNode(sc) && so > 0 && so < sc.length) {
                sc = splitDataNode(sc, so, positionsToPreserve);
                if (startEndSame) {
                    eo -= so;
                    ec = sc;
                } else if (ec == sc.parentNode && eo >= getNodeIndex(sc)) {
                    eo++;
                }
                so = 0;
            }
            range.setStartAndEnd(sc, so, ec, eo);
        }
        
        function rangeToHtml(range) {
            assertRangeValid(range);
            var container = range.commonAncestorContainer.parentNode.cloneNode(false);
            container.appendChild( range.cloneContents() );
            return container.innerHTML;
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        var rangeProperties = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed",
            "commonAncestorContainer"];

        var s2s = 0, s2e = 1, e2e = 2, e2s = 3;
        var n_b = 0, n_a = 1, n_b_a = 2, n_i = 3;

        util.extend(api.rangePrototype, {
            compareBoundaryPoints: function(how, range) {
                assertRangeValid(this);
                assertSameDocumentOrFragment(this.startContainer, range.startContainer);

                var nodeA, offsetA, nodeB, offsetB;
                var prefixA = (how == e2s || how == s2s) ? "start" : "end";
                var prefixB = (how == s2e || how == s2s) ? "start" : "end";
                nodeA = this[prefixA + "Container"];
                offsetA = this[prefixA + "Offset"];
                nodeB = range[prefixB + "Container"];
                offsetB = range[prefixB + "Offset"];
                return comparePoints(nodeA, offsetA, nodeB, offsetB);
            },

            insertNode: function(node) {
                assertRangeValid(this);
                assertValidNodeType(node, insertableNodeTypes);
                assertNodeNotReadOnly(this.startContainer);

                if (isOrIsAncestorOf(node, this.startContainer)) {
                    throw new DOMException("HIERARCHY_REQUEST_ERR");
                }

                // No check for whether the container of the start of the Range is of a type that does not allow
                // children of the type of node: the browser's DOM implementation should do this for us when we attempt
                // to add the node

                var firstNodeInserted = insertNodeAtPosition(node, this.startContainer, this.startOffset);
                this.setStartBefore(firstNodeInserted);
            },

            cloneContents: function() {
                assertRangeValid(this);

                var clone, frag;
                if (this.collapsed) {
                    return getRangeDocument(this).createDocumentFragment();
                } else {
                    if (this.startContainer === this.endContainer && isCharacterDataNode(this.startContainer)) {
                        clone = this.startContainer.cloneNode(true);
                        clone.data = clone.data.slice(this.startOffset, this.endOffset);
                        frag = getRangeDocument(this).createDocumentFragment();
                        frag.appendChild(clone);
                        return frag;
                    } else {
                        var iterator = new RangeIterator(this, true);
                        clone = cloneSubtree(iterator);
                        iterator.detach();
                    }
                    return clone;
                }
            },

            canSurroundContents: function() {
                assertRangeValid(this);
                assertNodeNotReadOnly(this.startContainer);
                assertNodeNotReadOnly(this.endContainer);

                // Check if the contents can be surrounded. Specifically, this means whether the range partially selects
                // no non-text nodes.
                var iterator = new RangeIterator(this, true);
                var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||
                        (iterator._last && isNonTextPartiallySelected(iterator._last, this)));
                iterator.detach();
                return !boundariesInvalid;
            },

            surroundContents: function(node) {
                assertValidNodeType(node, surroundNodeTypes);

                if (!this.canSurroundContents()) {
                    throw new DOMException("INVALID_STATE_ERR");
                }

                // Extract the contents
                var content = this.extractContents();

                // Clear the children of the node
                if (node.hasChildNodes()) {
                    while (node.lastChild) {
                        node.removeChild(node.lastChild);
                    }
                }

                // Insert the new node and add the extracted contents
                insertNodeAtPosition(node, this.startContainer, this.startOffset);
                node.appendChild(content);

                this.selectNode(node);
            },

            cloneRange: function() {
                assertRangeValid(this);
                var range = new Range(getRangeDocument(this));
                var i = rangeProperties.length, prop;
                while (i--) {
                    prop = rangeProperties[i];
                    range[prop] = this[prop];
                }
                return range;
            },

            toString: function() {
                assertRangeValid(this);
                var sc = this.startContainer;
                if (sc === this.endContainer && isCharacterDataNode(sc)) {
                    return (sc.nodeType == 3 || sc.nodeType == 4) ? sc.data.slice(this.startOffset, this.endOffset) : "";
                } else {
                    var textParts = [], iterator = new RangeIterator(this, true);
                    iterateSubtree(iterator, function(node) {
                        // Accept only text or CDATA nodes, not comments
                        if (node.nodeType == 3 || node.nodeType == 4) {
                            textParts.push(node.data);
                        }
                    });
                    iterator.detach();
                    return textParts.join("");
                }
            },

            // The methods below are all non-standard. The following batch were introduced by Mozilla but have since
            // been removed from Mozilla.

            compareNode: function(node) {
                assertRangeValid(this);

                var parent = node.parentNode;
                var nodeIndex = getNodeIndex(node);

                if (!parent) {
                    throw new DOMException("NOT_FOUND_ERR");
                }

                var startComparison = this.comparePoint(parent, nodeIndex),
                    endComparison = this.comparePoint(parent, nodeIndex + 1);

                if (startComparison < 0) { // Node starts before
                    return (endComparison > 0) ? n_b_a : n_b;
                } else {
                    return (endComparison > 0) ? n_a : n_i;
                }
            },

            comparePoint: function(node, offset) {
                assertRangeValid(this);
                assertNode(node, "HIERARCHY_REQUEST_ERR");
                assertSameDocumentOrFragment(node, this.startContainer);

                if (comparePoints(node, offset, this.startContainer, this.startOffset) < 0) {
                    return -1;
                } else if (comparePoints(node, offset, this.endContainer, this.endOffset) > 0) {
                    return 1;
                }
                return 0;
            },

            createContextualFragment: createContextualFragment,

            toHtml: function() {
                return rangeToHtml(this);
            },

            // touchingIsIntersecting determines whether this method considers a node that borders a range intersects
            // with it (as in WebKit) or not (as in Gecko pre-1.9, and the default)
            intersectsNode: function(node, touchingIsIntersecting) {
                assertRangeValid(this);
                assertNode(node, "NOT_FOUND_ERR");
                if (getDocument(node) !== getRangeDocument(this)) {
                    return false;
                }

                var parent = node.parentNode, offset = getNodeIndex(node);
                assertNode(parent, "NOT_FOUND_ERR");

                var startComparison = comparePoints(parent, offset, this.endContainer, this.endOffset),
                    endComparison = comparePoints(parent, offset + 1, this.startContainer, this.startOffset);

                return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;
            },

            isPointInRange: function(node, offset) {
                assertRangeValid(this);
                assertNode(node, "HIERARCHY_REQUEST_ERR");
                assertSameDocumentOrFragment(node, this.startContainer);

                return (comparePoints(node, offset, this.startContainer, this.startOffset) >= 0) &&
                       (comparePoints(node, offset, this.endContainer, this.endOffset) <= 0);
            },

            // The methods below are non-standard and invented by me.

            // Sharing a boundary start-to-end or end-to-start does not count as intersection.
            intersectsRange: function(range) {
                return rangesIntersect(this, range, false);
            },

            // Sharing a boundary start-to-end or end-to-start does count as intersection.
            intersectsOrTouchesRange: function(range) {
                return rangesIntersect(this, range, true);
            },

            intersection: function(range) {
                if (this.intersectsRange(range)) {
                    var startComparison = comparePoints(this.startContainer, this.startOffset, range.startContainer, range.startOffset),
                        endComparison = comparePoints(this.endContainer, this.endOffset, range.endContainer, range.endOffset);

                    var intersectionRange = this.cloneRange();
                    if (startComparison == -1) {
                        intersectionRange.setStart(range.startContainer, range.startOffset);
                    }
                    if (endComparison == 1) {
                        intersectionRange.setEnd(range.endContainer, range.endOffset);
                    }
                    return intersectionRange;
                }
                return null;
            },

            union: function(range) {
                if (this.intersectsOrTouchesRange(range)) {
                    var unionRange = this.cloneRange();
                    if (comparePoints(range.startContainer, range.startOffset, this.startContainer, this.startOffset) == -1) {
                        unionRange.setStart(range.startContainer, range.startOffset);
                    }
                    if (comparePoints(range.endContainer, range.endOffset, this.endContainer, this.endOffset) == 1) {
                        unionRange.setEnd(range.endContainer, range.endOffset);
                    }
                    return unionRange;
                } else {
                    throw new DOMException("Ranges do not intersect");
                }
            },

            containsNode: function(node, allowPartial) {
                if (allowPartial) {
                    return this.intersectsNode(node, false);
                } else {
                    return this.compareNode(node) == n_i;
                }
            },

            containsNodeContents: function(node) {
                return this.comparePoint(node, 0) >= 0 && this.comparePoint(node, getNodeLength(node)) <= 0;
            },

            containsRange: function(range) {
                var intersection = this.intersection(range);
                return intersection !== null && range.equals(intersection);
            },

            containsNodeText: function(node) {
                var nodeRange = this.cloneRange();
                nodeRange.selectNode(node);
                var textNodes = nodeRange.getNodes([3]);
                if (textNodes.length > 0) {
                    nodeRange.setStart(textNodes[0], 0);
                    var lastTextNode = textNodes.pop();
                    nodeRange.setEnd(lastTextNode, lastTextNode.length);
                    return this.containsRange(nodeRange);
                } else {
                    return this.containsNodeContents(node);
                }
            },

            getNodes: function(nodeTypes, filter) {
                assertRangeValid(this);
                return getNodesInRange(this, nodeTypes, filter);
            },

            getDocument: function() {
                return getRangeDocument(this);
            },

            collapseBefore: function(node) {
                this.setEndBefore(node);
                this.collapse(false);
            },

            collapseAfter: function(node) {
                this.setStartAfter(node);
                this.collapse(true);
            },
            
            getBookmark: function(containerNode) {
                var doc = getRangeDocument(this);
                var preSelectionRange = api.createRange(doc);
                containerNode = containerNode || dom.getBody(doc);
                preSelectionRange.selectNodeContents(containerNode);
                var range = this.intersection(preSelectionRange);
                var start = 0, end = 0;
                if (range) {
                    preSelectionRange.setEnd(range.startContainer, range.startOffset);
                    start = preSelectionRange.toString().length;
                    end = start + range.toString().length;
                }

                return {
                    start: start,
                    end: end,
                    containerNode: containerNode
                };
            },
            
            moveToBookmark: function(bookmark) {
                var containerNode = bookmark.containerNode;
                var charIndex = 0;
                this.setStart(containerNode, 0);
                this.collapse(true);
                var nodeStack = [containerNode], node, foundStart = false, stop = false;
                var nextCharIndex, i, childNodes;

                while (!stop && (node = nodeStack.pop())) {
                    if (node.nodeType == 3) {
                        nextCharIndex = charIndex + node.length;
                        if (!foundStart && bookmark.start >= charIndex && bookmark.start <= nextCharIndex) {
                            this.setStart(node, bookmark.start - charIndex);
                            foundStart = true;
                        }
                        if (foundStart && bookmark.end >= charIndex && bookmark.end <= nextCharIndex) {
                            this.setEnd(node, bookmark.end - charIndex);
                            stop = true;
                        }
                        charIndex = nextCharIndex;
                    } else {
                        childNodes = node.childNodes;
                        i = childNodes.length;
                        while (i--) {
                            nodeStack.push(childNodes[i]);
                        }
                    }
                }
            },

            getName: function() {
                return "DomRange";
            },

            equals: function(range) {
                return Range.rangesEqual(this, range);
            },

            isValid: function() {
                return isRangeValid(this);
            },
            
            inspect: function() {
                return inspect(this);
            },
            
            detach: function() {
                // In DOM4, detach() is now a no-op.
            }
        });

        function copyComparisonConstantsToObject(obj) {
            obj.START_TO_START = s2s;
            obj.START_TO_END = s2e;
            obj.END_TO_END = e2e;
            obj.END_TO_START = e2s;

            obj.NODE_BEFORE = n_b;
            obj.NODE_AFTER = n_a;
            obj.NODE_BEFORE_AND_AFTER = n_b_a;
            obj.NODE_INSIDE = n_i;
        }

        function copyComparisonConstants(constructor) {
            copyComparisonConstantsToObject(constructor);
            copyComparisonConstantsToObject(constructor.prototype);
        }

        function createRangeContentRemover(remover, boundaryUpdater) {
            return function() {
                assertRangeValid(this);

                var sc = this.startContainer, so = this.startOffset, root = this.commonAncestorContainer;

                var iterator = new RangeIterator(this, true);

                // Work out where to position the range after content removal
                var node, boundary;
                if (sc !== root) {
                    node = getClosestAncestorIn(sc, root, true);
                    boundary = getBoundaryAfterNode(node);
                    sc = boundary.node;
                    so = boundary.offset;
                }

                // Check none of the range is read-only
                iterateSubtree(iterator, assertNodeNotReadOnly);

                iterator.reset();

                // Remove the content
                var returnValue = remover(iterator);
                iterator.detach();

                // Move to the new position
                boundaryUpdater(this, sc, so, sc, so);

                return returnValue;
            };
        }

        function createPrototypeRange(constructor, boundaryUpdater) {
            function createBeforeAfterNodeSetter(isBefore, isStart) {
                return function(node) {
                    assertValidNodeType(node, beforeAfterNodeTypes);
                    assertValidNodeType(getRootContainer(node), rootContainerNodeTypes);

                    var boundary = (isBefore ? getBoundaryBeforeNode : getBoundaryAfterNode)(node);
                    (isStart ? setRangeStart : setRangeEnd)(this, boundary.node, boundary.offset);
                };
            }

            function setRangeStart(range, node, offset) {
                var ec = range.endContainer, eo = range.endOffset;
                if (node !== range.startContainer || offset !== range.startOffset) {
                    // Check the root containers of the range and the new boundary, and also check whether the new boundary
                    // is after the current end. In either case, collapse the range to the new position
                    if (getRootContainer(node) != getRootContainer(ec) || comparePoints(node, offset, ec, eo) == 1) {
                        ec = node;
                        eo = offset;
                    }
                    boundaryUpdater(range, node, offset, ec, eo);
                }
            }

            function setRangeEnd(range, node, offset) {
                var sc = range.startContainer, so = range.startOffset;
                if (node !== range.endContainer || offset !== range.endOffset) {
                    // Check the root containers of the range and the new boundary, and also check whether the new boundary
                    // is after the current end. In either case, collapse the range to the new position
                    if (getRootContainer(node) != getRootContainer(sc) || comparePoints(node, offset, sc, so) == -1) {
                        sc = node;
                        so = offset;
                    }
                    boundaryUpdater(range, sc, so, node, offset);
                }
            }

            // Set up inheritance
            var F = function() {};
            F.prototype = api.rangePrototype;
            constructor.prototype = new F();

            util.extend(constructor.prototype, {
                setStart: function(node, offset) {
                    assertNoDocTypeNotationEntityAncestor(node, true);
                    assertValidOffset(node, offset);

                    setRangeStart(this, node, offset);
                },

                setEnd: function(node, offset) {
                    assertNoDocTypeNotationEntityAncestor(node, true);
                    assertValidOffset(node, offset);

                    setRangeEnd(this, node, offset);
                },

                /**
                 * Convenience method to set a range's start and end boundaries. Overloaded as follows:
                 * - Two parameters (node, offset) creates a collapsed range at that position
                 * - Three parameters (node, startOffset, endOffset) creates a range contained with node starting at
                 *   startOffset and ending at endOffset
                 * - Four parameters (startNode, startOffset, endNode, endOffset) creates a range starting at startOffset in
                 *   startNode and ending at endOffset in endNode
                 */
                setStartAndEnd: function() {
                    var args = arguments;
                    var sc = args[0], so = args[1], ec = sc, eo = so;

                    switch (args.length) {
                        case 3:
                            eo = args[2];
                            break;
                        case 4:
                            ec = args[2];
                            eo = args[3];
                            break;
                    }

                    boundaryUpdater(this, sc, so, ec, eo);
                },
                
                setBoundary: function(node, offset, isStart) {
                    this["set" + (isStart ? "Start" : "End")](node, offset);
                },

                setStartBefore: createBeforeAfterNodeSetter(true, true),
                setStartAfter: createBeforeAfterNodeSetter(false, true),
                setEndBefore: createBeforeAfterNodeSetter(true, false),
                setEndAfter: createBeforeAfterNodeSetter(false, false),

                collapse: function(isStart) {
                    assertRangeValid(this);
                    if (isStart) {
                        boundaryUpdater(this, this.startContainer, this.startOffset, this.startContainer, this.startOffset);
                    } else {
                        boundaryUpdater(this, this.endContainer, this.endOffset, this.endContainer, this.endOffset);
                    }
                },

                selectNodeContents: function(node) {
                    assertNoDocTypeNotationEntityAncestor(node, true);

                    boundaryUpdater(this, node, 0, node, getNodeLength(node));
                },

                selectNode: function(node) {
                    assertNoDocTypeNotationEntityAncestor(node, false);
                    assertValidNodeType(node, beforeAfterNodeTypes);

                    var start = getBoundaryBeforeNode(node), end = getBoundaryAfterNode(node);
                    boundaryUpdater(this, start.node, start.offset, end.node, end.offset);
                },

                extractContents: createRangeContentRemover(extractSubtree, boundaryUpdater),

                deleteContents: createRangeContentRemover(deleteSubtree, boundaryUpdater),

                canSurroundContents: function() {
                    assertRangeValid(this);
                    assertNodeNotReadOnly(this.startContainer);
                    assertNodeNotReadOnly(this.endContainer);

                    // Check if the contents can be surrounded. Specifically, this means whether the range partially selects
                    // no non-text nodes.
                    var iterator = new RangeIterator(this, true);
                    var boundariesInvalid = (iterator._first && isNonTextPartiallySelected(iterator._first, this) ||
                            (iterator._last && isNonTextPartiallySelected(iterator._last, this)));
                    iterator.detach();
                    return !boundariesInvalid;
                },

                splitBoundaries: function() {
                    splitRangeBoundaries(this);
                },

                splitBoundariesPreservingPositions: function(positionsToPreserve) {
                    splitRangeBoundaries(this, positionsToPreserve);
                },

                normalizeBoundaries: function() {
                    assertRangeValid(this);

                    var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;

                    var mergeForward = function(node) {
                        var sibling = node.nextSibling;
                        if (sibling && sibling.nodeType == node.nodeType) {
                            ec = node;
                            eo = node.length;
                            node.appendData(sibling.data);
                            sibling.parentNode.removeChild(sibling);
                        }
                    };

                    var mergeBackward = function(node) {
                        var sibling = node.previousSibling;
                        if (sibling && sibling.nodeType == node.nodeType) {
                            sc = node;
                            var nodeLength = node.length;
                            so = sibling.length;
                            node.insertData(0, sibling.data);
                            sibling.parentNode.removeChild(sibling);
                            if (sc == ec) {
                                eo += so;
                                ec = sc;
                            } else if (ec == node.parentNode) {
                                var nodeIndex = getNodeIndex(node);
                                if (eo == nodeIndex) {
                                    ec = node;
                                    eo = nodeLength;
                                } else if (eo > nodeIndex) {
                                    eo--;
                                }
                            }
                        }
                    };

                    var normalizeStart = true;

                    if (isCharacterDataNode(ec)) {
                        if (ec.length == eo) {
                            mergeForward(ec);
                        }
                    } else {
                        if (eo > 0) {
                            var endNode = ec.childNodes[eo - 1];
                            if (endNode && isCharacterDataNode(endNode)) {
                                mergeForward(endNode);
                            }
                        }
                        normalizeStart = !this.collapsed;
                    }

                    if (normalizeStart) {
                        if (isCharacterDataNode(sc)) {
                            if (so == 0) {
                                mergeBackward(sc);
                            }
                        } else {
                            if (so < sc.childNodes.length) {
                                var startNode = sc.childNodes[so];
                                if (startNode && isCharacterDataNode(startNode)) {
                                    mergeBackward(startNode);
                                }
                            }
                        }
                    } else {
                        sc = ec;
                        so = eo;
                    }

                    boundaryUpdater(this, sc, so, ec, eo);
                },

                collapseToPoint: function(node, offset) {
                    assertNoDocTypeNotationEntityAncestor(node, true);
                    assertValidOffset(node, offset);
                    this.setStartAndEnd(node, offset);
                }
            });

            copyComparisonConstants(constructor);
        }

        /*----------------------------------------------------------------------------------------------------------------*/

        // Updates commonAncestorContainer and collapsed after boundary change
        function updateCollapsedAndCommonAncestor(range) {
            range.collapsed = (range.startContainer === range.endContainer && range.startOffset === range.endOffset);
            range.commonAncestorContainer = range.collapsed ?
                range.startContainer : dom.getCommonAncestor(range.startContainer, range.endContainer);
        }

        function updateBoundaries(range, startContainer, startOffset, endContainer, endOffset) {
            range.startContainer = startContainer;
            range.startOffset = startOffset;
            range.endContainer = endContainer;
            range.endOffset = endOffset;
            range.document = dom.getDocument(startContainer);

            updateCollapsedAndCommonAncestor(range);
        }

        function Range(doc) {
            this.startContainer = doc;
            this.startOffset = 0;
            this.endContainer = doc;
            this.endOffset = 0;
            this.document = doc;
            updateCollapsedAndCommonAncestor(this);
        }

        createPrototypeRange(Range, updateBoundaries);

        util.extend(Range, {
            rangeProperties: rangeProperties,
            RangeIterator: RangeIterator,
            copyComparisonConstants: copyComparisonConstants,
            createPrototypeRange: createPrototypeRange,
            inspect: inspect,
            toHtml: rangeToHtml,
            getRangeDocument: getRangeDocument,
            rangesEqual: function(r1, r2) {
                return r1.startContainer === r2.startContainer &&
                    r1.startOffset === r2.startOffset &&
                    r1.endContainer === r2.endContainer &&
                    r1.endOffset === r2.endOffset;
            }
        });

        api.DomRange = Range;
    });

    /*----------------------------------------------------------------------------------------------------------------*/

    // Wrappers for the browser's native DOM Range and/or TextRange implementation 
    api.createCoreModule("WrappedRange", ["DomRange"], function(api, module) {
        var WrappedRange, WrappedTextRange;
        var dom = api.dom;
        var util = api.util;
        var DomPosition = dom.DomPosition;
        var DomRange = api.DomRange;
        var getBody = dom.getBody;
        var getContentDocument = dom.getContentDocument;
        var isCharacterDataNode = dom.isCharacterDataNode;


        /*----------------------------------------------------------------------------------------------------------------*/

        if (api.features.implementsDomRange) {
            // This is a wrapper around the browser's native DOM Range. It has two aims:
            // - Provide workarounds for specific browser bugs
            // - provide convenient extensions, which are inherited from Rangy's DomRange

            (function() {
                var rangeProto;
                var rangeProperties = DomRange.rangeProperties;

                function updateRangeProperties(range) {
                    var i = rangeProperties.length, prop;
                    while (i--) {
                        prop = rangeProperties[i];
                        range[prop] = range.nativeRange[prop];
                    }
                    // Fix for broken collapsed property in IE 9.
                    range.collapsed = (range.startContainer === range.endContainer && range.startOffset === range.endOffset);
                }

                function updateNativeRange(range, startContainer, startOffset, endContainer, endOffset) {
                    var startMoved = (range.startContainer !== startContainer || range.startOffset != startOffset);
                    var endMoved = (range.endContainer !== endContainer || range.endOffset != endOffset);
                    var nativeRangeDifferent = !range.equals(range.nativeRange);

                    // Always set both boundaries for the benefit of IE9 (see issue 35)
                    if (startMoved || endMoved || nativeRangeDifferent) {
                        range.setEnd(endContainer, endOffset);
                        range.setStart(startContainer, startOffset);
                    }
                }

                var createBeforeAfterNodeSetter;

                WrappedRange = function(range) {
                    if (!range) {
                        throw module.createError("WrappedRange: Range must be specified");
                    }
                    this.nativeRange = range;
                    updateRangeProperties(this);
                };

                DomRange.createPrototypeRange(WrappedRange, updateNativeRange);

                rangeProto = WrappedRange.prototype;

                rangeProto.selectNode = function(node) {
                    this.nativeRange.selectNode(node);
                    updateRangeProperties(this);
                };

                rangeProto.cloneContents = function() {
                    return this.nativeRange.cloneContents();
                };

                // Due to a long-standing Firefox bug that I have not been able to find a reliable way to detect,
                // insertNode() is never delegated to the native range.

                rangeProto.surroundContents = function(node) {
                    this.nativeRange.surroundContents(node);
                    updateRangeProperties(this);
                };

                rangeProto.collapse = function(isStart) {
                    this.nativeRange.collapse(isStart);
                    updateRangeProperties(this);
                };

                rangeProto.cloneRange = function() {
                    return new WrappedRange(this.nativeRange.cloneRange());
                };

                rangeProto.refresh = function() {
                    updateRangeProperties(this);
                };

                rangeProto.toString = function() {
                    return this.nativeRange.toString();
                };

                // Create test range and node for feature detection

                var testTextNode = document.createTextNode("test");
                getBody(document).appendChild(testTextNode);
                var range = document.createRange();

                /*--------------------------------------------------------------------------------------------------------*/

                // Test for Firefox 2 bug that prevents moving the start of a Range to a point after its current end and
                // correct for it

                range.setStart(testTextNode, 0);
                range.setEnd(testTextNode, 0);

                try {
                    range.setStart(testTextNode, 1);

                    rangeProto.setStart = function(node, offset) {
                        this.nativeRange.setStart(node, offset);
                        updateRangeProperties(this);
                    };

                    rangeProto.setEnd = function(node, offset) {
                        this.nativeRange.setEnd(node, offset);
                        updateRangeProperties(this);
                    };

                    createBeforeAfterNodeSetter = function(name) {
                        return function(node) {
                            this.nativeRange[name](node);
                            updateRangeProperties(this);
                        };
                    };

                } catch(ex) {

                    rangeProto.setStart = function(node, offset) {
                        try {
                            this.nativeRange.setStart(node, offset);
                        } catch (ex) {
                            this.nativeRange.setEnd(node, offset);
                            this.nativeRange.setStart(node, offset);
                        }
                        updateRangeProperties(this);
                    };

                    rangeProto.setEnd = function(node, offset) {
                        try {
                            this.nativeRange.setEnd(node, offset);
                        } catch (ex) {
                            this.nativeRange.setStart(node, offset);
                            this.nativeRange.setEnd(node, offset);
                        }
                        updateRangeProperties(this);
                    };

                    createBeforeAfterNodeSetter = function(name, oppositeName) {
                        return function(node) {
                            try {
                                this.nativeRange[name](node);
                            } catch (ex) {
                                this.nativeRange[oppositeName](node);
                                this.nativeRange[name](node);
                            }
                            updateRangeProperties(this);
                        };
                    };
                }

                rangeProto.setStartBefore = createBeforeAfterNodeSetter("setStartBefore", "setEndBefore");
                rangeProto.setStartAfter = createBeforeAfterNodeSetter("setStartAfter", "setEndAfter");
                rangeProto.setEndBefore = createBeforeAfterNodeSetter("setEndBefore", "setStartBefore");
                rangeProto.setEndAfter = createBeforeAfterNodeSetter("setEndAfter", "setStartAfter");

                /*--------------------------------------------------------------------------------------------------------*/

                // Always use DOM4-compliant selectNodeContents implementation: it's simpler and less code than testing
                // whether the native implementation can be trusted
                rangeProto.selectNodeContents = function(node) {
                    this.setStartAndEnd(node, 0, dom.getNodeLength(node));
                };

                /*--------------------------------------------------------------------------------------------------------*/

                // Test for and correct WebKit bug that has the behaviour of compareBoundaryPoints round the wrong way for
                // constants START_TO_END and END_TO_START: https://bugs.webkit.org/show_bug.cgi?id=20738

                range.selectNodeContents(testTextNode);
                range.setEnd(testTextNode, 3);

                var range2 = document.createRange();
                range2.selectNodeContents(testTextNode);
                range2.setEnd(testTextNode, 4);
                range2.setStart(testTextNode, 2);

                if (range.compareBoundaryPoints(range.START_TO_END, range2) == -1 &&
                        range.compareBoundaryPoints(range.END_TO_START, range2) == 1) {
                    // This is the wrong way round, so correct for it

                    rangeProto.compareBoundaryPoints = function(type, range) {
                        range = range.nativeRange || range;
                        if (type == range.START_TO_END) {
                            type = range.END_TO_START;
                        } else if (type == range.END_TO_START) {
                            type = range.START_TO_END;
                        }
                        return this.nativeRange.compareBoundaryPoints(type, range);
                    };
                } else {
                    rangeProto.compareBoundaryPoints = function(type, range) {
                        return this.nativeRange.compareBoundaryPoints(type, range.nativeRange || range);
                    };
                }

                /*--------------------------------------------------------------------------------------------------------*/

                // Test for IE deleteContents() and extractContents() bug and correct it. See issue 107.

                var el = document.createElement("div");
                el.innerHTML = "123";
                var textNode = el.firstChild;
                var body = getBody(document);
                body.appendChild(el);

                range.setStart(textNode, 1);
                range.setEnd(textNode, 2);
                range.deleteContents();

                if (textNode.data == "13") {
                    // Behaviour is correct per DOM4 Range so wrap the browser's implementation of deleteContents() and
                    // extractContents()
                    rangeProto.deleteContents = function() {
                        this.nativeRange.deleteContents();
                        updateRangeProperties(this);
                    };

                    rangeProto.extractContents = function() {
                        var frag = this.nativeRange.extractContents();
                        updateRangeProperties(this);
                        return frag;
                    };
                } else {
                }

                body.removeChild(el);
                body = null;

                /*--------------------------------------------------------------------------------------------------------*/

                // Test for existence of createContextualFragment and delegate to it if it exists
                if (util.isHostMethod(range, "createContextualFragment")) {
                    rangeProto.createContextualFragment = function(fragmentStr) {
                        return this.nativeRange.createContextualFragment(fragmentStr);
                    };
                }

                /*--------------------------------------------------------------------------------------------------------*/

                // Clean up
                getBody(document).removeChild(testTextNode);

                rangeProto.getName = function() {
                    return "WrappedRange";
                };

                api.WrappedRange = WrappedRange;

                api.createNativeRange = function(doc) {
                    doc = getContentDocument(doc, module, "createNativeRange");
                    return doc.createRange();
                };
            })();
        }
        
        if (api.features.implementsTextRange) {
            /*
            This is a workaround for a bug where IE returns the wrong container element from the TextRange's parentElement()
            method. For example, in the following (where pipes denote the selection boundaries):

            <ul id="ul"><li id="a">| a </li><li id="b"> b |</li></ul>

            var range = document.selection.createRange();
            alert(range.parentElement().id); // Should alert "ul" but alerts "b"

            This method returns the common ancestor node of the following:
            - the parentElement() of the textRange
            - the parentElement() of the textRange after calling collapse(true)
            - the parentElement() of the textRange after calling collapse(false)
            */
            var getTextRangeContainerElement = function(textRange) {
                var parentEl = textRange.parentElement();
                var range = textRange.duplicate();
                range.collapse(true);
                var startEl = range.parentElement();
                range = textRange.duplicate();
                range.collapse(false);
                var endEl = range.parentElement();
                var startEndContainer = (startEl == endEl) ? startEl : dom.getCommonAncestor(startEl, endEl);

                return startEndContainer == parentEl ? startEndContainer : dom.getCommonAncestor(parentEl, startEndContainer);
            };

            var textRangeIsCollapsed = function(textRange) {
                return textRange.compareEndPoints("StartToEnd", textRange) == 0;
            };

            // Gets the boundary of a TextRange expressed as a node and an offset within that node. This function started
            // out as an improved version of code found in Tim Cameron Ryan's IERange (http://code.google.com/p/ierange/)
            // but has grown, fixing problems with line breaks in preformatted text, adding workaround for IE TextRange
            // bugs, handling for inputs and images, plus optimizations.
            var getTextRangeBoundaryPosition = function(textRange, wholeRangeContainerElement, isStart, isCollapsed, startInfo) {
                var workingRange = textRange.duplicate();
                workingRange.collapse(isStart);
                var containerElement = workingRange.parentElement();

                // Sometimes collapsing a TextRange that's at the start of a text node can move it into the previous node, so
                // check for that
                if (!dom.isOrIsAncestorOf(wholeRangeContainerElement, containerElement)) {
                    containerElement = wholeRangeContainerElement;
                }


                // Deal with nodes that cannot "contain rich HTML markup". In practice, this means form inputs, images and
                // similar. See http://msdn.microsoft.com/en-us/library/aa703950%28VS.85%29.aspx
                if (!containerElement.canHaveHTML) {
                    var pos = new DomPosition(containerElement.parentNode, dom.getNodeIndex(containerElement));
                    return {
                        boundaryPosition: pos,
                        nodeInfo: {
                            nodeIndex: pos.offset,
                            containerElement: pos.node
                        }
                    };
                }

                var workingNode = dom.getDocument(containerElement).createElement("span");

                // Workaround for HTML5 Shiv's insane violation of document.createElement(). See Rangy issue 104 and HTML5
                // Shiv issue 64: https://github.com/aFarkas/html5shiv/issues/64
                if (workingNode.parentNode) {
                    workingNode.parentNode.removeChild(workingNode);
                }

                var comparison, workingComparisonType = isStart ? "StartToStart" : "StartToEnd";
                var previousNode, nextNode, boundaryPosition, boundaryNode;
                var start = (startInfo && startInfo.containerElement == containerElement) ? startInfo.nodeIndex : 0;
                var childNodeCount = containerElement.childNodes.length;
                var end = childNodeCount;

                // Check end first. Code within the loop assumes that the endth child node of the container is definitely
                // after the range boundary.
                var nodeIndex = end;

                while (true) {
                    if (nodeIndex == childNodeCount) {
                        containerElement.appendChild(workingNode);
                    } else {
                        containerElement.insertBefore(workingNode, containerElement.childNodes[nodeIndex]);
                    }
                    workingRange.moveToElementText(workingNode);
                    comparison = workingRange.compareEndPoints(workingComparisonType, textRange);
                    if (comparison == 0 || start == end) {
                        break;
                    } else if (comparison == -1) {
                        if (end == start + 1) {
                            // We know the endth child node is after the range boundary, so we must be done.
                            break;
                        } else {
                            start = nodeIndex;
                        }
                    } else {
                        end = (end == start + 1) ? start : nodeIndex;
                    }
                    nodeIndex = Math.floor((start + end) / 2);
                    containerElement.removeChild(workingNode);
                }


                // We've now reached or gone past the boundary of the text range we're interested in
                // so have identified the node we want
                boundaryNode = workingNode.nextSibling;

                if (comparison == -1 && boundaryNode && isCharacterDataNode(boundaryNode)) {
                    // This is a character data node (text, comment, cdata). The working range is collapsed at the start of
                    // the node containing the text range's boundary, so we move the end of the working range to the
                    // boundary point and measure the length of its text to get the boundary's offset within the node.
                    workingRange.setEndPoint(isStart ? "EndToStart" : "EndToEnd", textRange);

                    var offset;

                    if (/[\r\n]/.test(boundaryNode.data)) {
                        /*
                        For the particular case of a boundary within a text node containing rendered line breaks (within a
                        <pre> element, for example), we need a slightly complicated approach to get the boundary's offset in
                        IE. The facts:
                        
                        - Each line break is represented as \r in the text node's data/nodeValue properties
                        - Each line break is represented as \r\n in the TextRange's 'text' property
                        - The 'text' property of the TextRange does not contain trailing line breaks
                        
                        To get round the problem presented by the final fact above, we can use the fact that TextRange's
                        moveStart() and moveEnd() methods return the actual number of characters moved, which is not
                        necessarily the same as the number of characters it was instructed to move. The simplest approach is
                        to use this to store the characters moved when moving both the start and end of the range to the
                        start of the document body and subtracting the start offset from the end offset (the
                        "move-negative-gazillion" method). However, this is extremely slow when the document is large and
                        the range is near the end of it. Clearly doing the mirror image (i.e. moving the range boundaries to
                        the end of the document) has the same problem.
                        
                        Another approach that works is to use moveStart() to move the start boundary of the range up to the
                        end boundary one character at a time and incrementing a counter with the value returned by the
                        moveStart() call. However, the check for whether the start boundary has reached the end boundary is
                        expensive, so this method is slow (although unlike "move-negative-gazillion" is largely unaffected
                        by the location of the range within the document).
                        
                        The approach used below is a hybrid of the two methods above. It uses the fact that a string
                        containing the TextRange's 'text' property with each \r\n converted to a single \r character cannot
                        be longer than the text of the TextRange, so the start of the range is moved that length initially
                        and then a character at a time to make up for any trailing line breaks not contained in the 'text'
                        property. This has good performance in most situations compared to the previous two methods.
                        */
                        var tempRange = workingRange.duplicate();
                        var rangeLength = tempRange.text.replace(/\r\n/g, "\r").length;

                        offset = tempRange.moveStart("character", rangeLength);
                        while ( (comparison = tempRange.compareEndPoints("StartToEnd", tempRange)) == -1) {
                            offset++;
                            tempRange.moveStart("character", 1);
                        }
                    } else {
                        offset = workingRange.text.length;
                    }
                    boundaryPosition = new DomPosition(boundaryNode, offset);
                } else {

                    // If the boundary immediately follows a character data node and this is the end boundary, we should favour
                    // a position within that, and likewise for a start boundary preceding a character data node
                    previousNode = (isCollapsed || !isStart) && workingNode.previousSibling;
                    nextNode = (isCollapsed || isStart) && workingNode.nextSibling;
                    if (nextNode && isCharacterDataNode(nextNode)) {
                        boundaryPosition = new DomPosition(nextNode, 0);
                    } else if (previousNode && isCharacterDataNode(previousNode)) {
                        boundaryPosition = new DomPosition(previousNode, previousNode.data.length);
                    } else {
                        boundaryPosition = new DomPosition(containerElement, dom.getNodeIndex(workingNode));
                    }
                }

                // Clean up
                workingNode.parentNode.removeChild(workingNode);

                return {
                    boundaryPosition: boundaryPosition,
                    nodeInfo: {
                        nodeIndex: nodeIndex,
                        containerElement: containerElement
                    }
                };
            };

            // Returns a TextRange representing the boundary of a TextRange expressed as a node and an offset within that
            // node. This function started out as an optimized version of code found in Tim Cameron Ryan's IERange
            // (http://code.google.com/p/ierange/)
            var createBoundaryTextRange = function(boundaryPosition, isStart) {
                var boundaryNode, boundaryParent, boundaryOffset = boundaryPosition.offset;
                var doc = dom.getDocument(boundaryPosition.node);
                var workingNode, childNodes, workingRange = getBody(doc).createTextRange();
                var nodeIsDataNode = isCharacterDataNode(boundaryPosition.node);

                if (nodeIsDataNode) {
                    boundaryNode = boundaryPosition.node;
                    boundaryParent = boundaryNode.parentNode;
                } else {
                    childNodes = boundaryPosition.node.childNodes;
                    boundaryNode = (boundaryOffset < childNodes.length) ? childNodes[boundaryOffset] : null;
                    boundaryParent = boundaryPosition.node;
                }

                // Position the range immediately before the node containing the boundary
                workingNode = doc.createElement("span");

                // Making the working element non-empty element persuades IE to consider the TextRange boundary to be within
                // the element rather than immediately before or after it
                workingNode.innerHTML = "&#feff;";

                // insertBefore is supposed to work like appendChild if the second parameter is null. However, a bug report
                // for IERange suggests that it can crash the browser: http://code.google.com/p/ierange/issues/detail?id=12
                if (boundaryNode) {
                    boundaryParent.insertBefore(workingNode, boundaryNode);
                } else {
                    boundaryParent.appendChild(workingNode);
                }

                workingRange.moveToElementText(workingNode);
                workingRange.collapse(!isStart);

                // Clean up
                boundaryParent.removeChild(workingNode);

                // Move the working range to the text offset, if required
                if (nodeIsDataNode) {
                    workingRange[isStart ? "moveStart" : "moveEnd"]("character", boundaryOffset);
                }

                return workingRange;
            };

            /*------------------------------------------------------------------------------------------------------------*/

            // This is a wrapper around a TextRange, providing full DOM Range functionality using rangy's DomRange as a
            // prototype

            WrappedTextRange = function(textRange) {
                this.textRange = textRange;
                this.refresh();
            };

            WrappedTextRange.prototype = new DomRange(document);

            WrappedTextRange.prototype.refresh = function() {
                var start, end, startBoundary;

                // TextRange's parentElement() method cannot be trusted. getTextRangeContainerElement() works around that.
                var rangeContainerElement = getTextRangeContainerElement(this.textRange);

                if (textRangeIsCollapsed(this.textRange)) {
                    end = start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true,
                        true).boundaryPosition;
                } else {
                    startBoundary = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, false);
                    start = startBoundary.boundaryPosition;

                    // An optimization used here is that if the start and end boundaries have the same parent element, the
                    // search scope for the end boundary can be limited to exclude the portion of the element that precedes
                    // the start boundary
                    end = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, false, false,
                        startBoundary.nodeInfo).boundaryPosition;
                }

                this.setStart(start.node, start.offset);
                this.setEnd(end.node, end.offset);
            };

            WrappedTextRange.prototype.getName = function() {
                return "WrappedTextRange";
            };

            DomRange.copyComparisonConstants(WrappedTextRange);

            var rangeToTextRange = function(range) {
                if (range.collapsed) {
                    return createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);
                } else {
                    var startRange = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);
                    var endRange = createBoundaryTextRange(new DomPosition(range.endContainer, range.endOffset), false);
                    var textRange = getBody( DomRange.getRangeDocument(range) ).createTextRange();
                    textRange.setEndPoint("StartToStart", startRange);
                    textRange.setEndPoint("EndToEnd", endRange);
                    return textRange;
                }
            };

            WrappedTextRange.rangeToTextRange = rangeToTextRange;

            WrappedTextRange.prototype.toTextRange = function() {
                return rangeToTextRange(this);
            };

            api.WrappedTextRange = WrappedTextRange;

            // IE 9 and above have both implementations and Rangy makes both available. The next few lines sets which
            // implementation to use by default.
            if (!api.features.implementsDomRange || api.config.preferTextRange) {
                // Add WrappedTextRange as the Range property of the global object to allow expression like Range.END_TO_END to work
                var globalObj = (function(f) { return f("return this;")(); })(Function);
                if (typeof globalObj.Range == "undefined") {
                    globalObj.Range = WrappedTextRange;
                }

                api.createNativeRange = function(doc) {
                    doc = getContentDocument(doc, module, "createNativeRange");
                    return getBody(doc).createTextRange();
                };

                api.WrappedRange = WrappedTextRange;
            }
        }

        api.createRange = function(doc) {
            doc = getContentDocument(doc, module, "createRange");
            return new api.WrappedRange(api.createNativeRange(doc));
        };

        api.createRangyRange = function(doc) {
            doc = getContentDocument(doc, module, "createRangyRange");
            return new DomRange(doc);
        };

        api.createIframeRange = function(iframeEl) {
            module.deprecationNotice("createIframeRange()", "createRange(iframeEl)");
            return api.createRange(iframeEl);
        };

        api.createIframeRangyRange = function(iframeEl) {
            module.deprecationNotice("createIframeRangyRange()", "createRangyRange(iframeEl)");
            return api.createRangyRange(iframeEl);
        };

        api.addShimListener(function(win) {
            var doc = win.document;
            if (typeof doc.createRange == "undefined") {
                doc.createRange = function() {
                    return api.createRange(doc);
                };
            }
            doc = win = null;
        });
    });

    /*----------------------------------------------------------------------------------------------------------------*/

    // This module creates a selection object wrapper that conforms as closely as possible to the Selection specification
    // in the HTML Editing spec (http://dvcs.w3.org/hg/editing/raw-file/tip/editing.html#selections)
    api.createCoreModule("WrappedSelection", ["DomRange", "WrappedRange"], function(api, module) {
        api.config.checkSelectionRanges = true;

        var BOOLEAN = "boolean";
        var NUMBER = "number";
        var dom = api.dom;
        var util = api.util;
        var isHostMethod = util.isHostMethod;
        var DomRange = api.DomRange;
        var WrappedRange = api.WrappedRange;
        var DOMException = api.DOMException;
        var DomPosition = dom.DomPosition;
        var getNativeSelection;
        var selectionIsCollapsed;
        var features = api.features;
        var CONTROL = "Control";
        var getDocument = dom.getDocument;
        var getBody = dom.getBody;
        var rangesEqual = DomRange.rangesEqual;


        // Utility function to support direction parameters in the API that may be a string ("backward" or "forward") or a
        // Boolean (true for backwards).
        function isDirectionBackward(dir) {
            return (typeof dir == "string") ? /^backward(s)?$/i.test(dir) : !!dir;
        }

        function getWindow(win, methodName) {
            if (!win) {
                return window;
            } else if (dom.isWindow(win)) {
                return win;
            } else if (win instanceof WrappedSelection) {
                return win.win;
            } else {
                var doc = dom.getContentDocument(win, module, methodName);
                return dom.getWindow(doc);
            }
        }

        function getWinSelection(winParam) {
            return getWindow(winParam, "getWinSelection").getSelection();
        }

        function getDocSelection(winParam) {
            return getWindow(winParam, "getDocSelection").document.selection;
        }
        
        function winSelectionIsBackward(sel) {
            var backward = false;
            if (sel.anchorNode) {
                backward = (dom.comparePoints(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset) == 1);
            }
            return backward;
        }

        // Test for the Range/TextRange and Selection features required
        // Test for ability to retrieve selection
        var implementsWinGetSelection = isHostMethod(window, "getSelection"),
            implementsDocSelection = util.isHostObject(document, "selection");

        features.implementsWinGetSelection = implementsWinGetSelection;
        features.implementsDocSelection = implementsDocSelection;

        var useDocumentSelection = implementsDocSelection && (!implementsWinGetSelection || api.config.preferTextRange);

        if (useDocumentSelection) {
            getNativeSelection = getDocSelection;
            api.isSelectionValid = function(winParam) {
                var doc = getWindow(winParam, "isSelectionValid").document, nativeSel = doc.selection;

                // Check whether the selection TextRange is actually contained within the correct document
                return (nativeSel.type != "None" || getDocument(nativeSel.createRange().parentElement()) == doc);
            };
        } else if (implementsWinGetSelection) {
            getNativeSelection = getWinSelection;
            api.isSelectionValid = function() {
                return true;
            };
        } else {
            module.fail("Neither document.selection or window.getSelection() detected.");
        }

        api.getNativeSelection = getNativeSelection;

        var testSelection = getNativeSelection();
        var testRange = api.createNativeRange(document);
        var body = getBody(document);

        // Obtaining a range from a selection
        var selectionHasAnchorAndFocus = util.areHostProperties(testSelection,
            ["anchorNode", "focusNode", "anchorOffset", "focusOffset"]);

        features.selectionHasAnchorAndFocus = selectionHasAnchorAndFocus;

        // Test for existence of native selection extend() method
        var selectionHasExtend = isHostMethod(testSelection, "extend");
        features.selectionHasExtend = selectionHasExtend;
        
        // Test if rangeCount exists
        var selectionHasRangeCount = (typeof testSelection.rangeCount == NUMBER);
        features.selectionHasRangeCount = selectionHasRangeCount;

        var selectionSupportsMultipleRanges = false;
        var collapsedNonEditableSelectionsSupported = true;

        var addRangeBackwardToNative = selectionHasExtend ?
            function(nativeSelection, range) {
                var doc = DomRange.getRangeDocument(range);
                var endRange = api.createRange(doc);
                endRange.collapseToPoint(range.endContainer, range.endOffset);
                nativeSelection.addRange(getNativeRange(endRange));
                nativeSelection.extend(range.startContainer, range.startOffset);
            } : null;

        if (util.areHostMethods(testSelection, ["addRange", "getRangeAt", "removeAllRanges"]) &&
                typeof testSelection.rangeCount == NUMBER && features.implementsDomRange) {

            (function() {
                // Previously an iframe was used but this caused problems in some circumstances in IE, so tests are
                // performed on the current document's selection. See issue 109.

                // Note also that if a selection previously existed, it is wiped by these tests. This should usually be fine
                // because initialization usually happens when the document loads, but could be a problem for a script that
                // loads and initializes Rangy later. If anyone complains, code could be added to save and restore the
                // selection.
                var sel = window.getSelection();
                if (sel) {
                    // Store the current selection
                    var originalSelectionRangeCount = sel.rangeCount;
                    var selectionHasMultipleRanges = (originalSelectionRangeCount > 1);
                    var originalSelectionRanges = [];
                    var originalSelectionBackward = winSelectionIsBackward(sel); 
                    for (var i = 0; i < originalSelectionRangeCount; ++i) {
                        originalSelectionRanges[i] = sel.getRangeAt(i);
                    }
                    
                    // Create some test elements
                    var body = getBody(document);
                    var testEl = body.appendChild( document.createElement("div") );
                    testEl.contentEditable = "false";
                    var textNode = testEl.appendChild( document.createTextNode("\u00a0\u00a0\u00a0") );

                    // Test whether the native selection will allow a collapsed selection within a non-editable element
                    var r1 = document.createRange();

                    r1.setStart(textNode, 1);
                    r1.collapse(true);
                    sel.addRange(r1);
                    collapsedNonEditableSelectionsSupported = (sel.rangeCount == 1);
                    sel.removeAllRanges();

                    // Test whether the native selection is capable of supporting multiple ranges.
                    if (!selectionHasMultipleRanges) {
                        // Doing the original feature test here in Chrome 36 (and presumably later versions) prints a
                        // console error of "Discontiguous selection is not supported." that cannot be suppressed. There's
                        // nothing we can do about this while retaining the feature test so we have to resort to a browser
                        // sniff. I'm not happy about it. See
                        // https://code.google.com/p/chromium/issues/detail?id=399791
                        var chromeMatch = window.navigator.appVersion.match(/Chrome\/(.*?) /);
                        if (chromeMatch && parseInt(chromeMatch[1]) >= 36) {
                            selectionSupportsMultipleRanges = false;
                        } else {
                            var r2 = r1.cloneRange();
                            r1.setStart(textNode, 0);
                            r2.setEnd(textNode, 3);
                            r2.setStart(textNode, 2);
                            sel.addRange(r1);
                            sel.addRange(r2);
                            selectionSupportsMultipleRanges = (sel.rangeCount == 2);
                        }
                    }

                    // Clean up
                    body.removeChild(testEl);
                    sel.removeAllRanges();

                    for (i = 0; i < originalSelectionRangeCount; ++i) {
                        if (i == 0 && originalSelectionBackward) {
                            if (addRangeBackwardToNative) {
                                addRangeBackwardToNative(sel, originalSelectionRanges[i]);
                            } else {
                                api.warn("Rangy initialization: original selection was backwards but selection has been restored forwards because the browser does not support Selection.extend");
                                sel.addRange(originalSelectionRanges[i]);
                            }
                        } else {
                            sel.addRange(originalSelectionRanges[i]);
                        }
                    }
                }
            })();
        }

        features.selectionSupportsMultipleRanges = selectionSupportsMultipleRanges;
        features.collapsedNonEditableSelectionsSupported = collapsedNonEditableSelectionsSupported;

        // ControlRanges
        var implementsControlRange = false, testControlRange;

        if (body && isHostMethod(body, "createControlRange")) {
            testControlRange = body.createControlRange();
            if (util.areHostProperties(testControlRange, ["item", "add"])) {
                implementsControlRange = true;
            }
        }
        features.implementsControlRange = implementsControlRange;

        // Selection collapsedness
        if (selectionHasAnchorAndFocus) {
            selectionIsCollapsed = function(sel) {
                return sel.anchorNode === sel.focusNode && sel.anchorOffset === sel.focusOffset;
            };
        } else {
            selectionIsCollapsed = function(sel) {
                return sel.rangeCount ? sel.getRangeAt(sel.rangeCount - 1).collapsed : false;
            };
        }

        function updateAnchorAndFocusFromRange(sel, range, backward) {
            var anchorPrefix = backward ? "end" : "start", focusPrefix = backward ? "start" : "end";
            sel.anchorNode = range[anchorPrefix + "Container"];
            sel.anchorOffset = range[anchorPrefix + "Offset"];
            sel.focusNode = range[focusPrefix + "Container"];
            sel.focusOffset = range[focusPrefix + "Offset"];
        }

        function updateAnchorAndFocusFromNativeSelection(sel) {
            var nativeSel = sel.nativeSelection;
            sel.anchorNode = nativeSel.anchorNode;
            sel.anchorOffset = nativeSel.anchorOffset;
            sel.focusNode = nativeSel.focusNode;
            sel.focusOffset = nativeSel.focusOffset;
        }

        function updateEmptySelection(sel) {
            sel.anchorNode = sel.focusNode = null;
            sel.anchorOffset = sel.focusOffset = 0;
            sel.rangeCount = 0;
            sel.isCollapsed = true;
            sel._ranges.length = 0;
        }

        function getNativeRange(range) {
            var nativeRange;
            if (range instanceof DomRange) {
                nativeRange = api.createNativeRange(range.getDocument());
                nativeRange.setEnd(range.endContainer, range.endOffset);
                nativeRange.setStart(range.startContainer, range.startOffset);
            } else if (range instanceof WrappedRange) {
                nativeRange = range.nativeRange;
            } else if (features.implementsDomRange && (range instanceof dom.getWindow(range.startContainer).Range)) {
                nativeRange = range;
            }
            return nativeRange;
        }

        function rangeContainsSingleElement(rangeNodes) {
            if (!rangeNodes.length || rangeNodes[0].nodeType != 1) {
                return false;
            }
            for (var i = 1, len = rangeNodes.length; i < len; ++i) {
                if (!dom.isAncestorOf(rangeNodes[0], rangeNodes[i])) {
                    return false;
                }
            }
            return true;
        }

        function getSingleElementFromRange(range) {
            var nodes = range.getNodes();
            if (!rangeContainsSingleElement(nodes)) {
                throw module.createError("getSingleElementFromRange: range " + range.inspect() + " did not consist of a single element");
            }
            return nodes[0];
        }

        // Simple, quick test which only needs to distinguish between a TextRange and a ControlRange
        function isTextRange(range) {
            return !!range && typeof range.text != "undefined";
        }

        function updateFromTextRange(sel, range) {
            // Create a Range from the selected TextRange
            var wrappedRange = new WrappedRange(range);
            sel._ranges = [wrappedRange];

            updateAnchorAndFocusFromRange(sel, wrappedRange, false);
            sel.rangeCount = 1;
            sel.isCollapsed = wrappedRange.collapsed;
        }

        function updateControlSelection(sel) {
            // Update the wrapped selection based on what's now in the native selection
            sel._ranges.length = 0;
            if (sel.docSelection.type == "None") {
                updateEmptySelection(sel);
            } else {
                var controlRange = sel.docSelection.createRange();
                if (isTextRange(controlRange)) {
                    // This case (where the selection type is "Control" and calling createRange() on the selection returns
                    // a TextRange) can happen in IE 9. It happens, for example, when all elements in the selected
                    // ControlRange have been removed from the ControlRange and removed from the document.
                    updateFromTextRange(sel, controlRange);
                } else {
                    sel.rangeCount = controlRange.length;
                    var range, doc = getDocument(controlRange.item(0));
                    for (var i = 0; i < sel.rangeCount; ++i) {
                        range = api.createRange(doc);
                        range.selectNode(controlRange.item(i));
                        sel._ranges.push(range);
                    }
                    sel.isCollapsed = sel.rangeCount == 1 && sel._ranges[0].collapsed;
                    updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], false);
                }
            }
        }

        function addRangeToControlSelection(sel, range) {
            var controlRange = sel.docSelection.createRange();
            var rangeElement = getSingleElementFromRange(range);

            // Create a new ControlRange containing all the elements in the selected ControlRange plus the element
            // contained by the supplied range
            var doc = getDocument(controlRange.item(0));
            var newControlRange = getBody(doc).createControlRange();
            for (var i = 0, len = controlRange.length; i < len; ++i) {
                newControlRange.add(controlRange.item(i));
            }
            try {
                newControlRange.add(rangeElement);
            } catch (ex) {
                throw module.createError("addRange(): Element within the specified Range could not be added to control selection (does it have layout?)");
            }
            newControlRange.select();

            // Update the wrapped selection based on what's now in the native selection
            updateControlSelection(sel);
        }

        var getSelectionRangeAt;

        if (isHostMethod(testSelection, "getRangeAt")) {
            // try/catch is present because getRangeAt() must have thrown an error in some browser and some situation.
            // Unfortunately, I didn't write a comment about the specifics and am now scared to take it out. Let that be a
            // lesson to us all, especially me.
            getSelectionRangeAt = function(sel, index) {
                try {
                    return sel.getRangeAt(index);
                } catch (ex) {
                    return null;
                }
            };
        } else if (selectionHasAnchorAndFocus) {
            getSelectionRangeAt = function(sel) {
                var doc = getDocument(sel.anchorNode);
                var range = api.createRange(doc);
                range.setStartAndEnd(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset);

                // Handle the case when the selection was selected backwards (from the end to the start in the
                // document)
                if (range.collapsed !== this.isCollapsed) {
                    range.setStartAndEnd(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset);
                }

                return range;
            };
        }

        function WrappedSelection(selection, docSelection, win) {
            this.nativeSelection = selection;
            this.docSelection = docSelection;
            this._ranges = [];
            this.win = win;
            this.refresh();
        }

        WrappedSelection.prototype = api.selectionPrototype;

        function deleteProperties(sel) {
            sel.win = sel.anchorNode = sel.focusNode = sel._ranges = null;
            sel.rangeCount = sel.anchorOffset = sel.focusOffset = 0;
            sel.detached = true;
        }

        var cachedRangySelections = [];

        function actOnCachedSelection(win, action) {
            var i = cachedRangySelections.length, cached, sel;
            while (i--) {
                cached = cachedRangySelections[i];
                sel = cached.selection;
                if (action == "deleteAll") {
                    deleteProperties(sel);
                } else if (cached.win == win) {
                    if (action == "delete") {
                        cachedRangySelections.splice(i, 1);
                        return true;
                    } else {
                        return sel;
                    }
                }
            }
            if (action == "deleteAll") {
                cachedRangySelections.length = 0;
            }
            return null;
        }

        var getSelection = function(win) {
            // Check if the parameter is a Rangy Selection object
            if (win && win instanceof WrappedSelection) {
                win.refresh();
                return win;
            }

            win = getWindow(win, "getNativeSelection");

            var sel = actOnCachedSelection(win);
            var nativeSel = getNativeSelection(win), docSel = implementsDocSelection ? getDocSelection(win) : null;
            if (sel) {
                sel.nativeSelection = nativeSel;
                sel.docSelection = docSel;
                sel.refresh();
            } else {
                sel = new WrappedSelection(nativeSel, docSel, win);
                cachedRangySelections.push( { win: win, selection: sel } );
            }
            return sel;
        };

        api.getSelection = getSelection;

        api.getIframeSelection = function(iframeEl) {
            module.deprecationNotice("getIframeSelection()", "getSelection(iframeEl)");
            return api.getSelection(dom.getIframeWindow(iframeEl));
        };

        var selProto = WrappedSelection.prototype;

        function createControlSelection(sel, ranges) {
            // Ensure that the selection becomes of type "Control"
            var doc = getDocument(ranges[0].startContainer);
            var controlRange = getBody(doc).createControlRange();
            for (var i = 0, el, len = ranges.length; i < len; ++i) {
                el = getSingleElementFromRange(ranges[i]);
                try {
                    controlRange.add(el);
                } catch (ex) {
                    throw module.createError("setRanges(): Element within one of the specified Ranges could not be added to control selection (does it have layout?)");
                }
            }
            controlRange.select();

            // Update the wrapped selection based on what's now in the native selection
            updateControlSelection(sel);
        }

        // Selecting a range
        if (!useDocumentSelection && selectionHasAnchorAndFocus && util.areHostMethods(testSelection, ["removeAllRanges", "addRange"])) {
            selProto.removeAllRanges = function() {
                this.nativeSelection.removeAllRanges();
                updateEmptySelection(this);
            };

            var addRangeBackward = function(sel, range) {
                addRangeBackwardToNative(sel.nativeSelection, range);
                sel.refresh();
            };

            if (selectionHasRangeCount) {
                selProto.addRange = function(range, direction) {
                    if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {
                        addRangeToControlSelection(this, range);
                    } else {
                        if (isDirectionBackward(direction) && selectionHasExtend) {
                            addRangeBackward(this, range);
                        } else {
                            var previousRangeCount;
                            if (selectionSupportsMultipleRanges) {
                                previousRangeCount = this.rangeCount;
                            } else {
                                this.removeAllRanges();
                                previousRangeCount = 0;
                            }
                            // Clone the native range so that changing the selected range does not affect the selection.
                            // This is contrary to the spec but is the only way to achieve consistency between browsers. See
                            // issue 80.
                            var clonedNativeRange = getNativeRange(range).cloneRange();
                            try {
                                this.nativeSelection.addRange(clonedNativeRange);
                            } catch (ex) {
                            }

                            // Check whether adding the range was successful
                            this.rangeCount = this.nativeSelection.rangeCount;

                            if (this.rangeCount == previousRangeCount + 1) {
                                // The range was added successfully

                                // Check whether the range that we added to the selection is reflected in the last range extracted from
                                // the selection
                                if (api.config.checkSelectionRanges) {
                                    var nativeRange = getSelectionRangeAt(this.nativeSelection, this.rangeCount - 1);
                                    if (nativeRange && !rangesEqual(nativeRange, range)) {
                                        // Happens in WebKit with, for example, a selection placed at the start of a text node
                                        range = new WrappedRange(nativeRange);
                                    }
                                }
                                this._ranges[this.rangeCount - 1] = range;
                                updateAnchorAndFocusFromRange(this, range, selectionIsBackward(this.nativeSelection));
                                this.isCollapsed = selectionIsCollapsed(this);
                            } else {
                                // The range was not added successfully. The simplest thing is to refresh
                                this.refresh();
                            }
                        }
                    }
                };
            } else {
                selProto.addRange = function(range, direction) {
                    if (isDirectionBackward(direction) && selectionHasExtend) {
                        addRangeBackward(this, range);
                    } else {
                        this.nativeSelection.addRange(getNativeRange(range));
                        this.refresh();
                    }
                };
            }

            selProto.setRanges = function(ranges) {
                if (implementsControlRange && implementsDocSelection && ranges.length > 1) {
                    createControlSelection(this, ranges);
                } else {
                    this.removeAllRanges();
                    for (var i = 0, len = ranges.length; i < len; ++i) {
                        this.addRange(ranges[i]);
                    }
                }
            };
        } else if (isHostMethod(testSelection, "empty") && isHostMethod(testRange, "select") &&
                   implementsControlRange && useDocumentSelection) {

            selProto.removeAllRanges = function() {
                // Added try/catch as fix for issue #21
                try {
                    this.docSelection.empty();

                    // Check for empty() not working (issue #24)
                    if (this.docSelection.type != "None") {
                        // Work around failure to empty a control selection by instead selecting a TextRange and then
                        // calling empty()
                        var doc;
                        if (this.anchorNode) {
                            doc = getDocument(this.anchorNode);
                        } else if (this.docSelection.type == CONTROL) {
                            var controlRange = this.docSelection.createRange();
                            if (controlRange.length) {
                                doc = getDocument( controlRange.item(0) );
                            }
                        }
                        if (doc) {
                            var textRange = getBody(doc).createTextRange();
                            textRange.select();
                            this.docSelection.empty();
                        }
                    }
                } catch(ex) {}
                updateEmptySelection(this);
            };

            selProto.addRange = function(range) {
                if (this.docSelection.type == CONTROL) {
                    addRangeToControlSelection(this, range);
                } else {
                    api.WrappedTextRange.rangeToTextRange(range).select();
                    this._ranges[0] = range;
                    this.rangeCount = 1;
                    this.isCollapsed = this._ranges[0].collapsed;
                    updateAnchorAndFocusFromRange(this, range, false);
                }
            };

            selProto.setRanges = function(ranges) {
                this.removeAllRanges();
                var rangeCount = ranges.length;
                if (rangeCount > 1) {
                    createControlSelection(this, ranges);
                } else if (rangeCount) {
                    this.addRange(ranges[0]);
                }
            };
        } else {
            module.fail("No means of selecting a Range or TextRange was found");
            return false;
        }

        selProto.getRangeAt = function(index) {
            if (index < 0 || index >= this.rangeCount) {
                throw new DOMException("INDEX_SIZE_ERR");
            } else {
                // Clone the range to preserve selection-range independence. See issue 80.
                return this._ranges[index].cloneRange();
            }
        };

        var refreshSelection;

        if (useDocumentSelection) {
            refreshSelection = function(sel) {
                var range;
                if (api.isSelectionValid(sel.win)) {
                    range = sel.docSelection.createRange();
                } else {
                    range = getBody(sel.win.document).createTextRange();
                    range.collapse(true);
                }

                if (sel.docSelection.type == CONTROL) {
                    updateControlSelection(sel);
                } else if (isTextRange(range)) {
                    updateFromTextRange(sel, range);
                } else {
                    updateEmptySelection(sel);
                }
            };
        } else if (isHostMethod(testSelection, "getRangeAt") && typeof testSelection.rangeCount == NUMBER) {
            refreshSelection = function(sel) {
                if (implementsControlRange && implementsDocSelection && sel.docSelection.type == CONTROL) {
                    updateControlSelection(sel);
                } else {
                    sel._ranges.length = sel.rangeCount = sel.nativeSelection.rangeCount;
                    if (sel.rangeCount) {
                        for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                            sel._ranges[i] = new api.WrappedRange(sel.nativeSelection.getRangeAt(i));
                        }
                        updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], selectionIsBackward(sel.nativeSelection));
                        sel.isCollapsed = selectionIsCollapsed(sel);
                    } else {
                        updateEmptySelection(sel);
                    }
                }
            };
        } else if (selectionHasAnchorAndFocus && typeof testSelection.isCollapsed == BOOLEAN && typeof testRange.collapsed == BOOLEAN && features.implementsDomRange) {
            refreshSelection = function(sel) {
                var range, nativeSel = sel.nativeSelection;
                if (nativeSel.anchorNode) {
                    range = getSelectionRangeAt(nativeSel, 0);
                    sel._ranges = [range];
                    sel.rangeCount = 1;
                    updateAnchorAndFocusFromNativeSelection(sel);
                    sel.isCollapsed = selectionIsCollapsed(sel);
                } else {
                    updateEmptySelection(sel);
                }
            };
        } else {
            module.fail("No means of obtaining a Range or TextRange from the user's selection was found");
            return false;
        }

        selProto.refresh = function(checkForChanges) {
            var oldRanges = checkForChanges ? this._ranges.slice(0) : null;
            var oldAnchorNode = this.anchorNode, oldAnchorOffset = this.anchorOffset;

            refreshSelection(this);
            if (checkForChanges) {
                // Check the range count first
                var i = oldRanges.length;
                if (i != this._ranges.length) {
                    return true;
                }

                // Now check the direction. Checking the anchor position is the same is enough since we're checking all the
                // ranges after this
                if (this.anchorNode != oldAnchorNode || this.anchorOffset != oldAnchorOffset) {
                    return true;
                }

                // Finally, compare each range in turn
                while (i--) {
                    if (!rangesEqual(oldRanges[i], this._ranges[i])) {
                        return true;
                    }
                }
                return false;
            }
        };

        // Removal of a single range
        var removeRangeManually = function(sel, range) {
            var ranges = sel.getAllRanges();
            sel.removeAllRanges();
            for (var i = 0, len = ranges.length; i < len; ++i) {
                if (!rangesEqual(range, ranges[i])) {
                    sel.addRange(ranges[i]);
                }
            }
            if (!sel.rangeCount) {
                updateEmptySelection(sel);
            }
        };

        if (implementsControlRange && implementsDocSelection) {
            selProto.removeRange = function(range) {
                if (this.docSelection.type == CONTROL) {
                    var controlRange = this.docSelection.createRange();
                    var rangeElement = getSingleElementFromRange(range);

                    // Create a new ControlRange containing all the elements in the selected ControlRange minus the
                    // element contained by the supplied range
                    var doc = getDocument(controlRange.item(0));
                    var newControlRange = getBody(doc).createControlRange();
                    var el, removed = false;
                    for (var i = 0, len = controlRange.length; i < len; ++i) {
                        el = controlRange.item(i);
                        if (el !== rangeElement || removed) {
                            newControlRange.add(controlRange.item(i));
                        } else {
                            removed = true;
                        }
                    }
                    newControlRange.select();

                    // Update the wrapped selection based on what's now in the native selection
                    updateControlSelection(this);
                } else {
                    removeRangeManually(this, range);
                }
            };
        } else {
            selProto.removeRange = function(range) {
                removeRangeManually(this, range);
            };
        }

        // Detecting if a selection is backward
        var selectionIsBackward;
        if (!useDocumentSelection && selectionHasAnchorAndFocus && features.implementsDomRange) {
            selectionIsBackward = winSelectionIsBackward;

            selProto.isBackward = function() {
                return selectionIsBackward(this);
            };
        } else {
            selectionIsBackward = selProto.isBackward = function() {
                return false;
            };
        }

        // Create an alias for backwards compatibility. From 1.3, everything is "backward" rather than "backwards"
        selProto.isBackwards = selProto.isBackward;

        // Selection stringifier
        // This is conformant to the old HTML5 selections draft spec but differs from WebKit and Mozilla's implementation.
        // The current spec does not yet define this method.
        selProto.toString = function() {
            var rangeTexts = [];
            for (var i = 0, len = this.rangeCount; i < len; ++i) {
                rangeTexts[i] = "" + this._ranges[i];
            }
            return rangeTexts.join("");
        };

        function assertNodeInSameDocument(sel, node) {
            if (sel.win.document != getDocument(node)) {
                throw new DOMException("WRONG_DOCUMENT_ERR");
            }
        }

        // No current browser conforms fully to the spec for this method, so Rangy's own method is always used
        selProto.collapse = function(node, offset) {
            assertNodeInSameDocument(this, node);
            var range = api.createRange(node);
            range.collapseToPoint(node, offset);
            this.setSingleRange(range);
            this.isCollapsed = true;
        };

        selProto.collapseToStart = function() {
            if (this.rangeCount) {
                var range = this._ranges[0];
                this.collapse(range.startContainer, range.startOffset);
            } else {
                throw new DOMException("INVALID_STATE_ERR");
            }
        };

        selProto.collapseToEnd = function() {
            if (this.rangeCount) {
                var range = this._ranges[this.rangeCount - 1];
                this.collapse(range.endContainer, range.endOffset);
            } else {
                throw new DOMException("INVALID_STATE_ERR");
            }
        };

        // The spec is very specific on how selectAllChildren should be implemented so the native implementation is
        // never used by Rangy.
        selProto.selectAllChildren = function(node) {
            assertNodeInSameDocument(this, node);
            var range = api.createRange(node);
            range.selectNodeContents(node);
            this.setSingleRange(range);
        };

        selProto.deleteFromDocument = function() {
            // Sepcial behaviour required for IE's control selections
            if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {
                var controlRange = this.docSelection.createRange();
                var element;
                while (controlRange.length) {
                    element = controlRange.item(0);
                    controlRange.remove(element);
                    element.parentNode.removeChild(element);
                }
                this.refresh();
            } else if (this.rangeCount) {
                var ranges = this.getAllRanges();
                if (ranges.length) {
                    this.removeAllRanges();
                    for (var i = 0, len = ranges.length; i < len; ++i) {
                        ranges[i].deleteContents();
                    }
                    // The spec says nothing about what the selection should contain after calling deleteContents on each
                    // range. Firefox moves the selection to where the final selected range was, so we emulate that
                    this.addRange(ranges[len - 1]);
                }
            }
        };

        // The following are non-standard extensions
        selProto.eachRange = function(func, returnValue) {
            for (var i = 0, len = this._ranges.length; i < len; ++i) {
                if ( func( this.getRangeAt(i) ) ) {
                    return returnValue;
                }
            }
        };

        selProto.getAllRanges = function() {
            var ranges = [];
            this.eachRange(function(range) {
                ranges.push(range);
            });
            return ranges;
        };

        selProto.setSingleRange = function(range, direction) {
            this.removeAllRanges();
            this.addRange(range, direction);
        };

        selProto.callMethodOnEachRange = function(methodName, params) {
            var results = [];
            this.eachRange( function(range) {
                results.push( range[methodName].apply(range, params) );
            } );
            return results;
        };
        
        function createStartOrEndSetter(isStart) {
            return function(node, offset) {
                var range;
                if (this.rangeCount) {
                    range = this.getRangeAt(0);
                    range["set" + (isStart ? "Start" : "End")](node, offset);
                } else {
                    range = api.createRange(this.win.document);
                    range.setStartAndEnd(node, offset);
                }
                this.setSingleRange(range, this.isBackward());
            };
        }

        selProto.setStart = createStartOrEndSetter(true);
        selProto.setEnd = createStartOrEndSetter(false);
        
        // Add select() method to Range prototype. Any existing selection will be removed.
        api.rangePrototype.select = function(direction) {
            getSelection( this.getDocument() ).setSingleRange(this, direction);
        };

        selProto.changeEachRange = function(func) {
            var ranges = [];
            var backward = this.isBackward();

            this.eachRange(function(range) {
                func(range);
                ranges.push(range);
            });

            this.removeAllRanges();
            if (backward && ranges.length == 1) {
                this.addRange(ranges[0], "backward");
            } else {
                this.setRanges(ranges);
            }
        };

        selProto.containsNode = function(node, allowPartial) {
            return this.eachRange( function(range) {
                return range.containsNode(node, allowPartial);
            }, true ) || false;
        };

        selProto.getBookmark = function(containerNode) {
            return {
                backward: this.isBackward(),
                rangeBookmarks: this.callMethodOnEachRange("getBookmark", [containerNode])
            };
        };

        selProto.moveToBookmark = function(bookmark) {
            var selRanges = [];
            for (var i = 0, rangeBookmark, range; rangeBookmark = bookmark.rangeBookmarks[i++]; ) {
                range = api.createRange(this.win);
                range.moveToBookmark(rangeBookmark);
                selRanges.push(range);
            }
            if (bookmark.backward) {
                this.setSingleRange(selRanges[0], "backward");
            } else {
                this.setRanges(selRanges);
            }
        };

        selProto.toHtml = function() {
            var rangeHtmls = [];
            this.eachRange(function(range) {
                rangeHtmls.push( DomRange.toHtml(range) );
            });
            return rangeHtmls.join("");
        };

        if (features.implementsTextRange) {
            selProto.getNativeTextRange = function() {
                var sel, textRange;
                if ( (sel = this.docSelection) ) {
                    var range = sel.createRange();
                    if (isTextRange(range)) {
                        return range;
                    } else {
                        throw module.createError("getNativeTextRange: selection is a control selection"); 
                    }
                } else if (this.rangeCount > 0) {
                    return api.WrappedTextRange.rangeToTextRange( this.getRangeAt(0) );
                } else {
                    throw module.createError("getNativeTextRange: selection contains no range");
                }
            };
        }

        function inspect(sel) {
            var rangeInspects = [];
            var anchor = new DomPosition(sel.anchorNode, sel.anchorOffset);
            var focus = new DomPosition(sel.focusNode, sel.focusOffset);
            var name = (typeof sel.getName == "function") ? sel.getName() : "Selection";

            if (typeof sel.rangeCount != "undefined") {
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    rangeInspects[i] = DomRange.inspect(sel.getRangeAt(i));
                }
            }
            return "[" + name + "(Ranges: " + rangeInspects.join(", ") +
                    ")(anchor: " + anchor.inspect() + ", focus: " + focus.inspect() + "]";
        }

        selProto.getName = function() {
            return "WrappedSelection";
        };

        selProto.inspect = function() {
            return inspect(this);
        };

        selProto.detach = function() {
            actOnCachedSelection(this.win, "delete");
            deleteProperties(this);
        };

        WrappedSelection.detachAll = function() {
            actOnCachedSelection(null, "deleteAll");
        };

        WrappedSelection.inspect = inspect;
        WrappedSelection.isDirectionBackward = isDirectionBackward;

        api.Selection = WrappedSelection;

        api.selectionPrototype = selProto;

        api.addShimListener(function(win) {
            if (typeof win.getSelection == "undefined") {
                win.getSelection = function() {
                    return getSelection(win);
                };
            }
            win = null;
        });
    });
    

    /*----------------------------------------------------------------------------------------------------------------*/

    // Wait for document to load before initializing
    var docReady = false;

    var loadHandler = function(e) {
        if (!docReady) {
            docReady = true;
            if (!api.initialized && api.config.autoInitialize) {
                init();
            }
        }
    };

    if (isBrowser) {
        // Test whether the document has already been loaded and initialize immediately if so
        if (document.readyState == "complete") {
            loadHandler();
        } else {
            if (isHostMethod(document, "addEventListener")) {
                document.addEventListener("DOMContentLoaded", loadHandler, false);
            }

            // Add a fallback in case the DOMContentLoaded event isn't supported
            addListener(window, "load", loadHandler);
        }
    }

    return api;
}, this);
},{}],"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js":[function(require,module,exports){
//     Underscore.js 1.8.2
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.2';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var isArrayLike = function(collection) {
    var length = collection && collection.length;
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, target, fromIndex) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, 'length').length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = list && list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    var i = 0, length = array && array.length;
    if (typeof isSorted == 'number') {
      i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
    } else if (isSorted && length) {
      i = _.sortedIndex(array, item);
      return array[i] === item ? i : -1;
    }
    if (item !== item) {
      return _.findIndex(slice.call(array, i), _.isNaN);
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    var idx = array ? array.length : 0;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    if (item !== item) {
      return _.findLastIndex(slice.call(array, 0, idx), _.isNaN);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = array != null && array.length;
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createIndexFinder(1);

  _.findLastIndex = createIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of 
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
  
  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],"/Users/craverod/opensource/readium-js/node_modules/watchify/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/Users/craverod/opensource/readium-js/package.json":[function(require,module,exports){
module.exports=module.exports={
  "name": "readium",
  "version": "0.0.1",
  "description": "readium",
  "main": "src/index.js",
  "readme": "README.md",
  "keywords": ["readium", "hmh"],
  "repository": "TODO",
  "dependencies": {
    "backbone": "^1.1.2",
    "epub-cfi": "^0.0.1",
    "jquery": "^2.1.3",
    "rangy": "^1.3.0-alpha.20140921",
    "underscore": "^1.7.0",
    "URIjs": "^1.14.1"
  },
  "devDependencies": {
    "browserify": "^8.1.1",
    "envify": "^3.2.0",
    "livereloadify": "^2.0.0",
    "node-static": "^0.7.6",
    "uglify-js": "~2.4.16",
    "watchify": "^2.2.1"
  },
  "scripts": {
    "build":      "NODE_ENV=production browserify src/app.js > ./dist/readium.js && uglifyjs ./dist/readium.js -cm > ./dist/readium.min.js",
    "livereload": "livereloadify ./public",
    "start": "npm run watch & npm run livereload & npm run static",
    "static": "static ./public --port 3000",
    "test": "jest",
    "watch": "watchify -o ./public/readium.js -v -d src/app.js"
  },
  "author": "Darío Javier Cravero <dario.cravero@hmhco.com>",
  "license": "TBD",
  "browserify": {
    "transform": [
      "envify"
    ]
  }
}

},{}],"/Users/craverod/opensource/readium-js/src/app.js":[function(require,module,exports){
(function (process){
var Readium = require('./index')

var reader = new Readium.Reader({
  useSimpleLoader: true
}, {
  el: '#readium-container'
})

//  https://github.com/readium/readium-js-viewer/blob/master/lib/EpubReader.js#L643-L792
//  Readium.Reader.readiumOptions {
//    useSimpleLoader: true, /* true to load from an expanded ePub; false to unpack it on the fly */
//    jsLibRoot: '/path/to/third/party',
//    openBookOptions: {} /* TODO Define */
//  }
//
//  Readium.Reader.readerOptions {
//    annotationsCSSUrl: '/path/to/file.css',
//    el: '#id', /* DOM selector */
//  }

var URI = require('URIjs');

var parser = new (require('../lib/epubjs/parser'));

reader.openPackageDocument('demo-book', function onOpenPackageDocument(packageDocument, options) {
  packageDocument.getTocDom(function(html) {
    var toc = document.getElementById('toc');

    // Get a proper TOC object through EPUBJS' parser.
    console.log('toc', parser.nav(html, {}, {}));

    toc.innerHTML = html.documentElement.querySelector('body').innerHTML;

    toc.addEventListener('click', function(event) {
      if (event.target.tagName === 'A') {
        event.preventDefault();
        var uri = URI(event.target.href).path().replace(/^\//, '');
          reader.reader.openContentUrl(uri);
      }
    }, true);
  });

  document.getElementById('left-page').addEventListener('click', function(event) {
    reader.reader.openPageLeft();
  }, false);
  document.getElementById('right-page').addEventListener('click', function(event) {
    reader.reader.openPageRight();
  }, false);

  if (process.env.node_env !== 'production') {
    window.readiumPackageDocument = packageDocument;
    window.readiumOptions = options;
  }
});

if (process.env.node_env !== 'production') {
  window.readiumReader = reader;
}

}).call(this,require('_process'))

},{"../lib/epubjs/parser":"/Users/craverod/opensource/readium-js/lib/epubjs/parser.js","./index":"/Users/craverod/opensource/readium-js/src/index.js","URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","_process":"/Users/craverod/opensource/readium-js/node_modules/watchify/node_modules/browserify/node_modules/process/browser.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/annotations.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var BookmarkView = require('./bookmark-view')
var HighlightGroup = require('./highlight-group')
var ImageAnnotation = require('./image-annotation')
var UnderlineGroup = require('./underline-group')

var Annotations = Backbone.Model.extend({

  defaults: function() {
    return {
      "bookmarkViews": [],
      "highlights": [],
      "markers": {},
      "underlines": [],
      "imageAnnotations": [],
      "annotationHash": {},
      "offsetTopAddition": 0,
      "offsetLeftAddition": 0,
      "readerBoundElement": undefined
    };
  },

  initialize: function(attributes, options) {},


  remove: function() {
    var that = this;
    _.each(this.get("highlights"), function(highlightGroup) {
      highlightGroup.remove();
    });
  },

  redrawAnnotations: function(offsetTop, offsetLeft) {

    var that = this;
    // Highlights
    _.each(this.get("highlights"), function(highlightGroup) {
      highlightGroup.resetHighlights(that.get("readerBoundElement"), offsetTop, offsetLeft);
    });

    // Bookmarks
    _.each(this.get("bookmarkViews"), function(bookmarkView) {
      bookmarkView.resetBookmark(offsetTop, offsetLeft);
    });

    // Underlines
    _.each(this.get("underlines"), function(underlineGroup) {
      underlineGroup.resetUnderlines(that.get("readerBoundElement"), offsetTop, offsetLeft);
    });
  },

  getBookmark: function(id) {

    var bookmarkView = this.get("annotationHash")[id];
    if (bookmarkView) {
      return bookmarkView.bookmark.toInfo();
    } else {
      return undefined;
    }
  },

  getHighlight: function(id) {

    var highlight = this.get("annotationHash")[id];
    if (highlight) {
      return highlight.toInfo();
    } else {
      return undefined;
    }
  },

  getUnderline: function(id) {

    var underline = this.get("annotationHash")[id];
    if (underline) {
      return underline.toInfo();
    } else {
      return undefined;
    }
  },

  getBookmarks: function() {

    var bookmarks = [];
    _.each(this.get("bookmarkViews"), function(bookmarkView) {

      bookmarks.push(bookmarkView.bookmark.toInfo());
    });
    return bookmarks;
  },

  getHighlights: function() {

    var highlights = [];
    _.each(this.get("highlights"), function(highlight) {

      highlights.push(highlight.toInfo());
    });
    return highlights;
  },

  getUnderlines: function() {

    var underlines = [];
    _.each(this.get("underlines"), function(underline) {

      underlines.push(underline.toInfo());
    });
    return underlines;
  },

  getImageAnnotations: function() {

    var imageAnnotations = [];
    _.each(this.get("imageAnnotations"), function(imageAnnotation) {

      imageAnnotations.push(imageAnnotation.toInfo());
    });
    return imageAnnotations;
  },

  addBookmark: function(CFI, targetElement, annotationId, offsetTop, offsetLeft, type) {

    if (!offsetTop) {
      offsetTop = this.get("offsetTopAddition");
    }
    if (!offsetLeft) {
      offsetLeft = this.get("offsetLeftAddition");
    }

    annotationId = annotationId.toString();
    this.validateAnnotationId(annotationId);

    var bookmarkView = new BookmarkView({
      CFI: CFI,
      targetElement: targetElement,
      offsetTopAddition: offsetTop,
      offsetLeftAddition: offsetLeft,
      id: annotationId.toString(),
      bbPageSetView: this.get("bbPageSetView"),
      type: type
    });
    this.get("annotationHash")[annotationId] = bookmarkView;
    this.get("bookmarkViews").push(bookmarkView);
    $(this.get("readerBoundElement")).append(bookmarkView.render());
  },

  removeHighlight: function(annotationId) {
    var annotationHash = this.get("annotationHash");
    var highlights = this.get("highlights");
    var markers = this.get("markers");

    if (!markers[annotationId])
      return;

    var startMarker = markers[annotationId].startMarker;
    var endMarker = markers[annotationId].endMarker;

    startMarker.parentNode.removeChild(startMarker);
    endMarker.parentNode.removeChild(endMarker);

    delete markers[annotationId];

    delete annotationHash[annotationId];

    highlights = _.reject(highlights,
      function(obj) {
        if (obj.id == annotationId) {
          obj.destroyCurrentHighlights();
          return true;
        } else {
          return false;
        }
      }
    );


    this.set("highlights", highlights);
  },

  addHighlight: function(CFI, highlightedTextNodes, annotationId, offsetTop, offsetLeft, startMarker, endMarker, styles) {
    if (!offsetTop) {
      offsetTop = this.get("offsetTopAddition");
    }
    if (!offsetLeft) {
      offsetLeft = this.get("offsetLeftAddition");
    }

    annotationId = annotationId.toString();
    this.validateAnnotationId(annotationId);

    var highlightGroup = new HighlightGroup({
      CFI: CFI,
      selectedNodes: highlightedTextNodes,
      offsetTopAddition: offsetTop,
      offsetLeftAddition: offsetLeft,
      styles: styles,
      id: annotationId,
      bbPageSetView: this.get("bbPageSetView"),
      scale: this.get("scale")
    });
    this.get("annotationHash")[annotationId] = highlightGroup;
    this.get("highlights").push(highlightGroup);
    this.get("markers")[annotationId] = {
      "startMarker": startMarker,
      "endMarker": endMarker
    };
    highlightGroup.renderHighlights(this.get("readerBoundElement"));
  },

  addUnderline: function(CFI, underlinedTextNodes, annotationId, offsetTop, offsetLeft, styles) {

    if (!offsetTop) {
      offsetTop = this.get("offsetTopAddition");
    }
    if (!offsetLeft) {
      offsetLeft = this.get("offsetLeftAddition");
    }

    annotationId = annotationId.toString();
    this.validateAnnotationId(annotationId);

    var underlineGroup = new UnderlineGroup({
      CFI: CFI,
      selectedNodes: underlinedTextNodes,
      offsetTopAddition: offsetTop,
      offsetLeftAddition: offsetLeft,
      styles: styles,
      id: annotationId,
      bbPageSetView: this.get("bbPageSetView")
    });
    this.get("annotationHash")[annotationId] = underlineGroup;
    this.get("underlines").push(underlineGroup);
    underlineGroup.renderUnderlines(this.get("readerBoundElement"));
  },

  addImageAnnotation: function(CFI, imageNode, annotationId) {

    annotationId = annotationId.toString();
    this.validateAnnotationId(annotationId);

    var imageAnnotation = new ImageAnnotation({
      CFI: CFI,
      imageNode: imageNode,
      id: annotationId,
      bbPageSetView: this.get("bbPageSetView")
    });
    this.get("annotationHash")[annotationId] = imageAnnotation;
    this.get("imageAnnotations").push(imageAnnotation);
    imageAnnotation.render();
  },

  updateAnnotationView: function(id, styles) {
    var annotationViews = this.get("annotationHash")[id];

    annotationViews.setStyles(styles);

    return annotationViews;
  },

  // REFACTORING CANDIDATE: Some kind of hash lookup would be more efficient here, might want to 
  //   change the implementation of the annotations as an array
  validateAnnotationId: function(id) {

    if (this.get("annotationHash")[id]) {
      throw new Error("That annotation id already exists; annotation not added");
    }
  }
});

module.exports = Annotations
},{"./bookmark-view":"/Users/craverod/opensource/readium-js/src/epub-annotations/bookmark-view.js","./highlight-group":"/Users/craverod/opensource/readium-js/src/epub-annotations/highlight-group.js","./image-annotation":"/Users/craverod/opensource/readium-js/src/epub-annotations/image-annotation.js","./underline-group":"/Users/craverod/opensource/readium-js/src/epub-annotations/underline-group.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/bookmark-view.js":[function(require,module,exports){
var Backbone = require('backbone')
var Bookmark = require('./bookmark')

var BookmarkView = Backbone.View.extend({

  el: "<div></div>",

  events: {
    "mouseenter": "setHoverBookmark",
    "mouseleave": "setBaseBookmark",
    "click": "clickHandler"
  },

  initialize: function(options) {

    this.bookmark = new Bookmark({
      CFI: options.CFI,
      targetElement: options.targetElement,
      offsetTopAddition: options.offsetTopAddition,
      offsetLeftAddition: options.offsetLeftAddition,
      id: options.id,
      bbPageSetView: options.bbPageSetView,
      type: options.type
    });
  },

  resetBookmark: function(offsetTop, offsetLeft) {

    if (offsetTop) {
      this.bookmark.set({
        offsetTopAddition: offsetTop
      });
    }

    if (offsetLeft) {
      this.bookmark.set({
        offsetLeftAddition: offsetLeft
      });
    }
    this.setCSS();
  },

  render: function() {

    this.setCSS();
    return this.el;
  },

  setCSS: function() {

    var absoluteTop;
    var absoluteLeft;

    if (this.bookmark.get("type") === "comment") {
      absoluteTop = this.bookmark.getAbsoluteTop();
      absoluteLeft = this.bookmark.getAbsoluteLeft();
      this.$el.css({
        "top": absoluteTop + "px",
        "left": absoluteLeft + "px",
        "width": "50px",
        "height": "50px",
        "position": "absolute"
      });
      this.$el.addClass("comment");
    } else {
      this.$el.addClass("bookmark");
    }
  },

  setHoverBookmark: function(event) {

    event.stopPropagation();
    if (this.$el.hasClass("comment")) {
      this.$el.removeClass("comment");
      this.$el.addClass("hover-comment");
    }
  },

  setBaseBookmark: function(event) {

    event.stopPropagation();
    if (this.$el.hasClass("hover-comment")) {
      this.$el.removeClass("hover-comment");
      this.$el.addClass("comment");
    }
  },

  clickHandler: function(event) {

    event.stopPropagation();
    var type;
    if (this.bookmark.get("type") === "comment") {
      type = "comment";
    } else {
      type = "bookmark";
    }

    this.bookmark.get("bbPageSetView").trigger("annotationClicked",
      type,
      this.bookmark.get("CFI"),
      this.bookmark.get("id"),
      this.$el.css("top"),
      this.$el.css("left"),
      event
    );
  }
});

module.exports = BookmarkView
},{"./bookmark":"/Users/craverod/opensource/readium-js/src/epub-annotations/bookmark.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/bookmark.js":[function(require,module,exports){
var $ = require('jquery')
var Backbone = require('backbone')

var Bookmark = Backbone.Model.extend({
  defaults: {
    "isVisible": false,
    "bookmarkCenteringAdjustment": 15,
    "bookmarkTopAdjustment": 45
  },

  initialize: function(attributes, options) {

    // Figure out the top and left of the bookmark
    // This should include the additional offset provided by the annotations object
  },

  getAbsoluteTop: function() {

    var targetElementTop = $(this.get("targetElement")).offset().top;
    var bookmarkAbsoluteTop = this.get("offsetTopAddition") + targetElementTop - this.get("bookmarkTopAdjustment");
    return bookmarkAbsoluteTop;
  },

  getAbsoluteLeft: function() {

    var targetElementLeft = $(this.get("targetElement")).offset().left;
    var bookmarkAbsoluteLeft = this.get("offsetLeftAddition") + targetElementLeft - this.get("bookmarkCenteringAdjustment");
    return bookmarkAbsoluteLeft;
  },

  toInfo: function() {

    return {

      id: this.get("id"),
      type: "bookmark",
      CFI: this.get("CFI")
    };
  }
});

module.exports = Bookmark
},{"backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/highlight-group.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var HighlightView = require('./highlight-view')
var TextLineInferrer = require('./text-line-inferrer')

var HighlightGroup = Backbone.Model.extend({

  defaults: function() {
    return {
      "selectedNodes": [],
      "highlightViews": []
    };
  },

  initialize: function(attributes, options) {
    this.set("scale", attributes.scale);
    this.constructHighlightViews();
  },

  // --------------- PRIVATE HELPERS ---------------------------------------

  highlightGroupCallback: function(event) {

    var that = this;

    // Trigger this event on each of the highlight views (except triggering event)
    if (event.type === "click") {
      that.get("bbPageSetView").trigger("annotationClicked", "highlight", that.get("CFI"), that.get("id"), event);
      return;
    }


    // Trigger this event on each of the highlight views (except triggering event)
    if (event.type === "contextmenu") {
      that.get("bbPageSetView").trigger("annotationRightClicked", "highlight", that.get("CFI"), that.get("id"), event);
      return;
    }


    // Events that are called on each member of the group
    _.each(this.get("highlightViews"), function(highlightView) {

      if (event.type === "mouseenter") {
        highlightView.setHoverHighlight();
      } else if (event.type === "mouseleave") {
        highlightView.setBaseHighlight();
      }
    });
  },

  constructHighlightViews: function() {

    var that = this;
    var rectList = [];
    var inferrer;
    var inferredLines;

    _.each(this.get("selectedNodes"), function(node, index) {

      var rects;
      var range = document.createRange();
      range.selectNodeContents(node);
      rects = range.getClientRects();

      // REFACTORING CANDIDATE: Maybe a better way to append an array here
      _.each(rects, function(rect) {
        rectList.push(rect);
      });
    });

    inferrer = new TextLineInferrer();
    inferredLines = inferrer.inferLines(rectList);

    var scale = this.get("scale");

    _.each(inferredLines, function(line, index) {

      var highlightTop = line.startTop / scale;;
      var highlightLeft = line.left / scale;;
      var highlightHeight = line.avgHeight / scale;
      var highlightWidth = line.width / scale;;

      var highlightView = new HighlightView({
        CFI: that.get("CFI"),
        top: highlightTop + that.get("offsetTopAddition"),
        left: highlightLeft + that.get("offsetLeftAddition"),
        height: highlightHeight,
        width: highlightWidth,
        styles: that.get('styles'),
        highlightGroupCallback: that.highlightGroupCallback,
        callbackContext: that
      });

      that.get("highlightViews").push(highlightView);
    });
  },

  resetHighlights: function(viewportElement, offsetTop, offsetLeft) {

    if (offsetTop) {
      this.set({
        offsetTopAddition: offsetTop
      });
    }
    if (offsetLeft) {
      this.set({
        offsetLeftAddition: offsetLeft
      });
    }

    this.destroyCurrentHighlights();
    this.constructHighlightViews();
    this.renderHighlights(viewportElement);
  },

  // REFACTORING CANDIDATE: Ensure that event listeners are being properly cleaned up. 
  destroyCurrentHighlights: function() {

    _.each(this.get("highlightViews"), function(highlightView) {
      highlightView.remove();
      highlightView.off();
    });

    this.get("highlightViews").length = 0;
  },

  renderHighlights: function(viewportElement) {

    _.each(this.get("highlightViews"), function(view, index) {
      $(viewportElement).append(view.render());
    });
  },

  toInfo: function() {

    return {

      id: this.get("id"),
      type: "highlight",
      CFI: this.get("CFI")
    };
  },

  setStyles: function(styles) {
    var highlightViews = this.get('highlightViews');

    this.set({
      styles: styles
    });

    _.each(highlightViews, function(view, index) {
      view.setStyles(styles);
    });
  }
});

module.exports = HighlightGroup
},{"./highlight-view":"/Users/craverod/opensource/readium-js/src/epub-annotations/highlight-view.js","./text-line-inferrer":"/Users/craverod/opensource/readium-js/src/epub-annotations/text-line-inferrer.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/highlight-view.js":[function(require,module,exports){
var Backbone = require('Backbone')
var Highlight = require('./highlight')

var HighlightView = Backbone.View.extend({

  el: "<div class='highlight'></div>",

  events: {
    "mouseenter": "highlightEvent",
    "mouseleave": "highlightEvent",
    "click": "highlightEvent",
    "contextmenu": "highlightEvent"
  },

  initialize: function(options) {

    this.highlight = new Highlight({
      CFI: options.CFI,
      top: options.top,
      left: options.left,
      height: options.height,
      width: options.width,
      styles: options.styles,
      highlightGroupCallback: options.highlightGroupCallback,
      callbackContext: options.callbackContext
    });
  },

  render: function() {

    this.setCSS();
    return this.el;
  },

  resetPosition: function(top, left, height, width) {

    this.highlight.set({
      top: top,
      left: left,
      height: height,
      width: width
    });
    this.setCSS();
  },

  setStyles: function(styles) {

    this.highlight.set({
      styles: styles,
    });
    this.render();
  },

  setCSS: function() {

    var styles = this.highlight.get("styles") || {};

    this.$el.css({
      "top": this.highlight.get("top") + "px",
      "left": this.highlight.get("left") + "px",
      "height": this.highlight.get("height") + "px",
      "width": this.highlight.get("width") + "px",
      "background-color": styles.fill_color || "normal",
    });
  },

  setBaseHighlight: function() {

    this.$el.addClass("highlight");
    this.$el.removeClass("hover-highlight");
  },

  setHoverHighlight: function() {

    this.$el.addClass("hover-highlight");
    this.$el.removeClass("highlight");
  },

  highlightEvent: function(event) {

    event.stopPropagation();
    var highlightGroupCallback = this.highlight.get("highlightGroupCallback");
    var highlightGroupContext = this.highlight.get("callbackContext");
    highlightGroupContext.highlightGroupCallback(event);
  }
});

module.exports = HighlightView
},{"./highlight":"/Users/craverod/opensource/readium-js/src/epub-annotations/highlight.js","Backbone":"/Users/craverod/opensource/readium-js/node_modules/Backbone/backbone.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/highlight.js":[function(require,module,exports){
var Backbone = require('backbone')

var Highlight = Backbone.Model.extend({
  defaults: {
    "isVisible": false
  },
  initialize: function(attributes, options) {}
});

module.exports = Highlight
},{"backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/image-annotation.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')


// Rationale: An image annotation does NOT have a view, as we don't know the state of an image element within an EPUB; it's entirely
//   possible that an EPUB image element could have a backbone view associated with it already, which would cause problems if we 
//   tried to associate another backbone view. As such, this model modifies CSS properties for an annotated image element.
//   
//   An image annotation view that manages an absolutely position element (similar to bookmarks, underlines and highlights) can be
//   added if more functionality is required. 

var ImageAnnotation = Backbone.Model.extend({

  initialize: function(attributes, options) {

    // Set handlers here. Can use jquery handlers
    var that = this;
    var $imageElement = $(this.get("imageNode"));
    $imageElement.on("mouseenter", function() {
      that.setMouseenterBorder();
    });
    $imageElement.on("mouseleave", function() {
      that.setMouseleaveBorder();
    });
    $imageElement.on("click", function() {
      that.get("bbPageSetView").trigger("annotationClicked", "image", that.get("CFI"), that.get("id"), event);
    });
  },

  render: function() {

    this.setCSS();
  },

  setCSS: function() {

    $(this.get("imageNode")).css({
      "border": "5px solid rgb(255, 0, 0)",
      "border": "5px solid rgba(255, 0, 0, 0.2)",
      "-webkit-background-clip": "padding-box",
      "background-clip": "padding-box"
    });
  },

  setMouseenterBorder: function() {

    $(this.get("imageNode")).css({
      "border": "5px solid rgba(255, 0, 0, 0.4)"
    });
  },

  setMouseleaveBorder: function() {

    $(this.get("imageNode")).css({
      "border": "5px solid rgba(255, 0, 0, 0.2)"
    });
  }
});

module.exports = ImageAnnotation
},{"backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/index.js":[function(require,module,exports){
// This was readium-js-shared/lib/annotations_module.js
// It was renamed slightly (no Module bit ) and split into multiple files for simplicity
// EpubAnnotationsModule is now EpubAnnotations. EpubAnnotations namespace was dropped in favour
// of explicit requires where used.

var ReflowableAnnotations = require('./reflowable-annotations')

var EpubAnnotations = function(contentDocumentDOM, bbPageSetView, annotationCSSUrl) {
  var reflowableAnnotations = new ReflowableAnnotations({
    contentDocumentDOM: contentDocumentDOM,
    bbPageSetView: bbPageSetView,
    annotationCSSUrl: annotationCSSUrl,
  });

  // Description: The public interface
  return {
    addSelectionHighlight: function(id, type, styles) {
      return reflowableAnnotations.addSelectionHighlight(id, type, styles);
    },
    addSelectionBookmark: function(id, type) {
      return reflowableAnnotations.addSelectionBookmark(id, type);
    },
    addSelectionImageAnnotation: function(id) {
      return reflowableAnnotations.addSelectionImageAnnotation(id);
    },
    addHighlight: function(CFI, id, type, styles) {
      return reflowableAnnotations.addHighlight(CFI, id, type, styles);
    },
    addBookmark: function(CFI, id, type) {
      return reflowableAnnotations.addBookmark(CFI, id, type);
    },
    addImageAnnotation: function(CFI, id) {
      return reflowableAnnotations.addImageAnnotation(CFI, id);
    },
    updateAnnotationView: function(id, styles) {
      return reflowableAnnotations.updateAnnotationView(id, styles);
    },
    redraw: function() {
      return reflowableAnnotations.redraw();
    },
    getBookmark: function(id) {
      return reflowableAnnotations.annotations.getBookmark(id);
    },
    getBookmarks: function() {
      return reflowableAnnotations.annotations.getBookmarks();
    },
    getHighlight: function(id) {
      return reflowableAnnotations.annotations.getHighlight(id);
    },
    getHighlights: function() {
      return reflowableAnnotations.annotations.getHighlights();
    },
    getUnderline: function(id) {
      return reflowableAnnotations.annotations.getUnderline(id);
    },
    getUnderlines: function() {
      return reflowableAnnotations.annotations.getUnderlines();
    },
    getImageAnnotation: function() {

    },
    getImageAnnotations: function() {

    },
    removeAnnotation: function(annotationId) {
      return reflowableAnnotations.remove(annotationId);
    },
    getCurrentSelectionCFI: function() {
      return reflowableAnnotations.getCurrentSelectionCFI();
    },
    getCurrentSelectionOffsetCFI: function() {
      return reflowableAnnotations.getCurrentSelectionOffsetCFI();
    },
    removeHighlight: function(annotationId) {
      return reflowableAnnotations.removeHighlight(annotationId);
    }
  };
};

module.exports = EpubAnnotations
},{"./reflowable-annotations":"/Users/craverod/opensource/readium-js/src/epub-annotations/reflowable-annotations.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/reflowable-annotations.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Annotations = require('./annotations')
var Backbone = require('backbone')
var EPUBcfi = require('epub-cfi')

var ReflowableAnnotations = Backbone.Model.extend({

  initialize: function(attributes, options) {

    this.epubCFI = EPUBcfi;
    this.annotations = new Annotations({
      offsetTopAddition: 0,
      offsetLeftAddition: 0,
      readerBoundElement: $("html", this.get("contentDocumentDOM"))[0],
      scale: 0,
      bbPageSetView: this.get("bbPageSetView")
    });
    // inject annotation CSS into iframe 


    var annotationCSSUrl = this.get("annotationCSSUrl");
    if (annotationCSSUrl) {
      this.injectAnnotationCSS(annotationCSSUrl);
    }

    // emit an event when user selects some text.
    var epubWindow = $(this.get("contentDocumentDOM"));
    var self = this;
    epubWindow.on("mouseup", function(event) {
      var range = self.getCurrentSelectionRange();
      if (range === undefined) {
        return;
      }
      if (range.startOffset - range.endOffset) {
        self.annotations.get("bbPageSetView").trigger("textSelectionEvent", event);
      }
    });


  },

  // ------------------------------------------------------------------------------------ //
  //  "PUBLIC" METHODS (THE API)                                                          //
  // ------------------------------------------------------------------------------------ //

  redraw: function() {

    var leftAddition = -this.getPaginationLeftOffset();
    this.annotations.redrawAnnotations(0, leftAddition);
  },

  removeHighlight: function(annotationId) {
    return this.annotations.removeHighlight(annotationId)
  },



  addHighlight: function(CFI, id, type, styles) {

    var CFIRangeInfo;
    var range;
    var rangeStartNode;
    var rangeEndNode;
    var selectedElements;
    var leftAddition;
    var startMarkerHtml = this.getRangeStartMarker(CFI, id);
    var endMarkerHtml = this.getRangeEndMarker(CFI, id);

    // TODO webkit specific?
    // FIXME Check this polyfill https://github.com/jfsiii/XCSSMatrix
    var $html = $(this.get("contentDocumentDOM"));
    var matrix = $('html', $html).css('-webkit-transform');
    var scale = new WebKitCSSMatrix(matrix).a;
    this.set("scale", scale);

    try {
      CFIRangeInfo = this.epubCFI.injectRangeElements(
        CFI,
        this.get("contentDocumentDOM"),
        startMarkerHtml,
        endMarkerHtml, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );

      // Get start and end marker for the id, using injected into elements
      // REFACTORING CANDIDATE: Abstract range creation to account for no previous/next sibling, for different types of
      //   sibiling, etc. 
      rangeStartNode = CFIRangeInfo.startElement.nextSibling ? CFIRangeInfo.startElement.nextSibling : CFIRangeInfo.startElement;
      rangeEndNode = CFIRangeInfo.endElement.previousSibling ? CFIRangeInfo.endElement.previousSibling : CFIRangeInfo.endElement;
      range = document.createRange();
      range.setStart(rangeStartNode, 0);
      range.setEnd(rangeEndNode, rangeEndNode.length);

      selectionInfo = this.getSelectionInfo(range);
      leftAddition = -this.getPaginationLeftOffset();

      if (type === "highlight") {
        this.annotations.set('scale', this.get('scale'));
        this.annotations.addHighlight(CFI, selectionInfo.selectedElements, id, 0, leftAddition, CFIRangeInfo.startElement, CFIRangeInfo.endElement, styles);
      } else if (type === "underline") {
        this.annotations.addUnderline(CFI, selectionInfo.selectedElements, id, 0, leftAddition, styles);
      }

      return {
        CFI: CFI,
        selectedElements: selectionInfo.selectedElements
      };

    } catch (error) {
      console.log(error.message);
    }
  },

  addBookmark: function(CFI, id, type) {

    var selectedElements;
    var bookmarkMarkerHtml = this.getBookmarkMarker(CFI, id);
    var $injectedElement;
    var leftAddition;

    try {
      $injectedElement = this.epubCFI.injectElement(
        CFI,
        this.get("contentDocumentDOM"),
        bookmarkMarkerHtml, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );

      // Add bookmark annotation here
      leftAddition = -this.getPaginationLeftOffset();
      this.annotations.addBookmark(CFI, $injectedElement[0], id, 0, leftAddition, type);

      return {

        CFI: CFI,
        selectedElements: $injectedElement[0]
      };

    } catch (error) {
      console.log(error.message);
    }
  },

  addImageAnnotation: function(CFI, id) {

    var selectedElements;
    var bookmarkMarkerHtml = this.getBookmarkMarker(CFI, id);
    var $targetImage;

    try {
      $targetImage = this.epubCFI.getTargetElement(
        CFI,
        this.get("contentDocumentDOM"), ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );
      this.annotations.addImageAnnotation(CFI, $targetImage[0], id);

      return {

        CFI: CFI,
        selectedElements: $targetImage[0]
      };

    } catch (error) {
      console.log(error.message);
    }
  },

  // this returns a partial CFI only!!
  getCurrentSelectionCFI: function() {
    var currentSelection = this.getCurrentSelectionRange();
    var CFI;
    if (currentSelection) {
      selectionInfo = this.getSelectionInfo(currentSelection);
      CFI = selectionInfo.CFI;
    }

    return CFI;
  },

  // this returns a partial CFI only!!
  getCurrentSelectionOffsetCFI: function() {
    var currentSelection = this.getCurrentSelectionRange();

    var CFI;
    if (currentSelection) {
      CFI = this.generateCharOffsetCFI(currentSelection);
    }
    return CFI;
  },


  /// TODODM refactor thhis using getCurrentSelectionCFI (above)


  addSelectionHighlight: function(id, type, styles) {

    var arbitraryPackageDocCFI = "/99!"
    var generatedContentDocCFI;
    var CFI;
    var selectionInfo;
    var currentSelection = this.getCurrentSelectionRange();
    var annotationInfo;

    if (currentSelection) {

      selectionInfo = this.getSelectionInfo(currentSelection);
      generatedContentDocCFI = selectionInfo.CFI;
      CFI = "epubcfi(" + arbitraryPackageDocCFI + generatedContentDocCFI + ")";
      if (type === "highlight") {
        annotationInfo = this.addHighlight(CFI, id, type, styles);
      } else if (type === "underline") {
        annotationInfo = this.addHighlight(CFI, id, type, styles);
      }

      // Rationale: The annotationInfo object returned from .addBookmark(...) contains the same value of 
      //   the CFI variable in the current scope. Since this CFI variable contains a "hacked" CFI value -
      //   only the content document portion is valid - we want to replace the annotationInfo.CFI property with
      //   the partial content document CFI portion we originally generated.
      annotationInfo.CFI = generatedContentDocCFI;
      return annotationInfo;
    } else {
      throw new Error("Nothing selected");
    }
  },

  addSelectionBookmark: function(id, type) {

    var arbitraryPackageDocCFI = "/99!"
    var generatedContentDocCFI;
    var CFI;
    var currentSelection = this.getCurrentSelectionRange();
    var annotationInfo;

    if (currentSelection) {

      generatedContentDocCFI = this.generateCharOffsetCFI(currentSelection);
      CFI = "epubcfi(" + arbitraryPackageDocCFI + generatedContentDocCFI + ")";
      annotationInfo = this.addBookmark(CFI, id, type);

      // Rationale: The annotationInfo object returned from .addBookmark(...) contains the same value of 
      //   the CFI variable in the current scope. Since this CFI variable contains a "hacked" CFI value -
      //   only the content document portion is valid - we want to replace the annotationInfo.CFI property with
      //   the partial content document CFI portion we originally generated.
      annotationInfo.CFI = generatedContentDocCFI;
      return annotationInfo;
    } else {
      throw new Error("Nothing selected");
    }
  },

  addSelectionImageAnnotation: function(id) {

    var arbitraryPackageDocCFI = "/99!"
    var generatedContentDocCFI;
    var CFI;
    var selectionInfo;
    var currentSelection = this.getCurrentSelectionRange();
    var annotationInfo;
    var firstSelectedImage;

    if (currentSelection) {

      selectionInfo = this.getSelectionInfo(currentSelection, ["img"]);
      firstSelectedImage = selectionInfo.selectedElements[0];
      generatedContentDocCFI = this.epubCFI.generateElementCFIComponent(
        firstSelectedImage, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );
      CFI = "epubcfi(" + arbitraryPackageDocCFI + generatedContentDocCFI + ")";
      annotationInfo = this.addImageAnnotation(CFI, id);

      // Rationale: The annotationInfo object returned from .addBookmark(...) contains the same value of 
      //   the CFI variable in the current scope. Since this CFI variable contains a "hacked" CFI value -
      //   only the content document portion is valid - we want to replace the annotationInfo.CFI property with
      //   the partial content document CFI portion we originally generated.
      annotationInfo.CFI = generatedContentDocCFI;
      return annotationInfo;
    } else {
      throw new Error("Nothing selected");
    }
  },

  updateAnnotationView: function(id, styles) {

    var annotationViews = this.annotations.updateAnnotationView(id, styles);

    return annotationViews;
  },

  // ------------------------------------------------------------------------------------ //
  //  "PRIVATE" HELPERS                                                                   //
  // ------------------------------------------------------------------------------------ //

  getSelectionInfo: function(selectedRange, elementType) {

    // Generate CFI for selected text
    var CFI = this.generateRangeCFI(selectedRange);
    var intervalState = {
      startElementFound: false,
      endElementFound: false
    };
    var selectedElements = [];

    if (!elementType) {
      var elementType = ["text"];
    }

    this.findSelectedElements(
      selectedRange.commonAncestorContainer,
      selectedRange.startContainer,
      selectedRange.endContainer,
      intervalState,
      selectedElements,
      elementType
    );

    // Return a list of selected text nodes and the CFI
    return {
      CFI: CFI,
      selectedElements: selectedElements
    };
  },

  generateRangeCFI: function(selectedRange) {

    var startNode = selectedRange.startContainer;
    var endNode = selectedRange.endContainer;
    var startOffset;
    var endOffset;
    var rangeCFIComponent;

    if (startNode.nodeType === Node.TEXT_NODE && endNode.nodeType === Node.TEXT_NODE) {

      startOffset = selectedRange.startOffset;
      endOffset = selectedRange.endOffset;

      rangeCFIComponent = this.epubCFI.generateCharOffsetRangeComponent(
        startNode,
        startOffset,
        endNode,
        endOffset, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );
      return rangeCFIComponent;
    } else {
      throw new Error("Selection start and end must be text nodes");
    }
  },

  generateCharOffsetCFI: function(selectedRange) {

    // Character offset
    var startNode = selectedRange.startContainer;
    var startOffset = selectedRange.startOffset;
    var charOffsetCFI;

    if (startNode.nodeType === Node.TEXT_NODE) {
      charOffsetCFI = this.epubCFI.generateCharacterOffsetCFIComponent(
        startNode,
        startOffset, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]
      );
    }
    return charOffsetCFI;
  },

  // REFACTORING CANDIDATE: Convert this to jquery
  findSelectedElements: function(currElement, startElement, endElement, intervalState, selectedElements, elementTypes) {

    if (currElement === startElement) {
      intervalState.startElementFound = true;
    }

    if (intervalState.startElementFound === true) {
      this.addElement(currElement, selectedElements, elementTypes);
    }

    if (currElement === endElement) {
      intervalState.endElementFound = true;
      return;
    }

    if (currElement.firstChild) {
      this.findSelectedElements(currElement.firstChild, startElement, endElement, intervalState, selectedElements, elementTypes);
      if (intervalState.endElementFound) {
        return;
      }
    }

    if (currElement.nextSibling) {
      this.findSelectedElements(currElement.nextSibling, startElement, endElement, intervalState, selectedElements, elementTypes);
      if (intervalState.endElementFound) {
        return;
      }
    }
  },

  addElement: function(currElement, selectedElements, elementTypes) {

    // Check if the node is one of the types
    _.each(elementTypes, function(elementType) {

      if (elementType === "text") {
        if (currElement.nodeType === Node.TEXT_NODE) {
          selectedElements.push(currElement);
        }
      } else {
        if ($(currElement).is(elementType)) {
          selectedElements.push(currElement);
        }
      }
    });
  },

  // Rationale: This is a cross-browser method to get the currently selected text
  getCurrentSelectionRange: function() {

    var currentSelection;
    var iframeDocument = this.get("contentDocumentDOM");
    if (iframeDocument.getSelection) {
      currentSelection = iframeDocument.getSelection();

      if (currentSelection && currentSelection.rangeCount && (currentSelection.anchorOffset !== currentSelection.focusOffset)) {
        return currentSelection.getRangeAt(0);
      } else {
        return undefined;
      }
    } else if (iframeDocument.selection) {
      return iframeDocument.selection.createRange();
    } else {
      return undefined;
    }
  },

  getPaginationLeftOffset: function() {

    var $htmlElement = $("html", this.get("contentDocumentDOM"));
    var offsetLeftPixels = $htmlElement.css("left");
    var offsetLeft = parseInt(offsetLeftPixels.replace("px", ""));
    return offsetLeft;
  },

  getBookmarkMarker: function(CFI, id) {

    return "<span class='bookmark-marker cfi-marker' id='" + id + "' data-cfi='" + CFI + "'></span>";
  },

  getRangeStartMarker: function(CFI, id) {

    return "<span class='range-start-marker cfi-marker' id='start-" + id + "' data-cfi='" + CFI + "'></span>";
  },

  getRangeEndMarker: function(CFI, id) {

    return "<span class='range-end-marker cfi-marker' id='end-" + id + "' data-cfi='" + CFI + "'></span>";
  },

  injectAnnotationCSS: function(annotationCSSUrl) {

    var $contentDocHead = $("head", this.get("contentDocumentDOM"));
    $contentDocHead.append(
      $("<link/>", {
        rel: "stylesheet",
        href: annotationCSSUrl,
        type: "text/css"
      })
    );
  }
});

module.exports = ReflowableAnnotations
},{"./annotations":"/Users/craverod/opensource/readium-js/src/epub-annotations/annotations.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","epub-cfi":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/index.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/text-line-inferrer.js":[function(require,module,exports){
var Backbone = require('backbone')

// Rationale: The order of these matters
var TextLineInferrer = Backbone.Model.extend({

  initialize: function(attributes, options) {},

  // ----------------- PUBLIC INTERFACE --------------------------------------------------------------

  inferLines: function(rectList) {

    var inferredLines = [];
    var numRects = rectList.length;
    var numLines = 0;
    var currLine;
    var currRect;
    var rectAppended;

    // Iterate through each rect
    for (var currRectNum = 0; currRectNum <= numRects - 1; currRectNum++) {
      currRect = rectList[currRectNum];

      // Check if the rect can be added to any of the current lines
      rectAppended = false;
      for (var currLineNum = 0; currLineNum <= numLines - 1; currLineNum++) {
        currLine = inferredLines[currLineNum];

        if (this.includeRectInLine(currLine, currRect.top, currRect.left, currRect.width, currRect.height)) {
          this.expandLine(currLine, currRect.left, currRect.top, currRect.width, currRect.height);
          rectAppended = true;
          break;
        }
      }

      if (rectAppended) {
        continue;
      }
      // If the rect can't be added to any existing lines, create a new line
      else {
        inferredLines.push(this.createNewLine(currRect.left, currRect.top, currRect.width, currRect.height));
        numLines = numLines + 1; // Update the number of lines, so we're not using .length on every iteration
      }
    }

    return inferredLines;
  },


  // ----------------- PRIVATE HELPERS ---------------------------------------------------------------

  includeRectInLine: function(currLine, rectTop, rectLeft, rectWidth, rectHeight) {

    // is on an existing line : based on vertical position
    if (this.rectIsWithinLineVertically(rectTop, rectHeight, currLine.maxTop, currLine.maxBottom)) {
      if (this.rectIsWithinLineHorizontally(rectLeft, rectWidth, currLine.left, currLine.width, currLine.avgHeight)) {
        return true;
      }
    }

    return false;
  },

  rectIsWithinLineVertically: function(rectTop, rectHeight, currLineMaxTop, currLineMaxBottom) {

    var rectBottom = rectTop + rectHeight;
    var lineHeight = currLineMaxBottom - currLineMaxTop;
    var lineHeightAdjustment = (lineHeight * 0.75) / 2;
    var rectHeightAdjustment = (rectHeight * 0.75) / 2;

    rectTop = rectTop + rectHeightAdjustment;
    rectBottom = rectBottom - rectHeightAdjustment;
    currLineMaxTop = currLineMaxTop + lineHeightAdjustment;
    currLineMaxBottom = currLineMaxBottom - lineHeightAdjustment;

    if (rectTop === currLineMaxTop && rectBottom === currLineMaxBottom) {
      return true;
    } else if (rectTop < currLineMaxTop && rectBottom < currLineMaxBottom && rectBottom > currLineMaxTop) {
      return true;
    } else if (rectTop > currLineMaxTop && rectBottom > currLineMaxBottom && rectTop < currLineMaxBottom) {
      return true;
    } else if (rectTop > currLineMaxTop && rectBottom < currLineMaxBottom) {
      return true;
    } else if (rectTop < currLineMaxTop && rectBottom > currLineMaxBottom) {
      return true;
    } else {
      return false;
    }
  },

  rectIsWithinLineHorizontally: function(rectLeft, rectWidth, currLineLeft, currLineWidth, currLineAvgHeight) {

    var lineGapHeuristic = 2 * currLineAvgHeight;
    var rectRight = rectLeft + rectWidth;
    var currLineRight = rectLeft + currLineWidth;

    if ((currLineLeft - rectRight) > lineGapHeuristic) {
      return false;
    } else if ((rectLeft - currLineRight) > lineGapHeuristic) {
      return false;
    } else {
      return true;
    }
  },

  createNewLine: function(rectLeft, rectTop, rectWidth, rectHeight) {

    var maxBottom = rectTop + rectHeight;

    return {
      left: rectLeft,
      startTop: rectTop,
      width: rectWidth,
      avgHeight: rectHeight,
      maxTop: rectTop,
      maxBottom: maxBottom,
      numRects: 1
    };
  },

  expandLine: function(currLine, rectLeft, rectTop, rectWidth, rectHeight) {

    var lineOldRight = currLine.left + currLine.width;

    // Update all the properties of the current line with rect dimensions
    var rectRight = rectLeft + rectWidth;
    var rectBottom = rectTop + rectHeight;
    var numRectsPlusOne = currLine.numRects + 1;

    // Average height calculation
    var currSumHeights = currLine.avgHeight * currLine.numRects;
    var avgHeight = ((currSumHeights + rectHeight) / numRectsPlusOne);
    currLine.avgHeight = avgHeight;
    currLine.numRects = numRectsPlusOne;

    // Expand the line vertically
    currLine = this.expandLineVertically(currLine, rectTop, rectBottom);
    currLine = this.expandLineHorizontally(currLine, rectLeft, rectRight);

    return currLine;
  },

  expandLineVertically: function(currLine, rectTop, rectBottom) {

    if (rectTop < currLine.maxTop) {
      currLine.maxTop = rectTop;
    }
    if (rectBottom > currLine.maxBottom) {
      currLine.maxBottom = rectBottom;
    }

    return currLine;
  },

  expandLineHorizontally: function(currLine, rectLeft, rectRight) {

    var newLineLeft = currLine.left <= rectLeft ? currLine.left : rectLeft;
    var lineRight = currLine.left + currLine.width;
    var newLineRight = lineRight >= rectRight ? lineRight : rectRight;
    var newLineWidth = newLineRight - newLineLeft;
    currLine.left = newLineLeft;
    currLine.width = newLineWidth;

    return currLine;
  }
});

module.exports = TextLineInferrer
},{"backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/underline-group.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var TextLineInferrer = require('./text-line-inferrer')
var UnderlineView = require('./underline-view')

var UnderlineGroup = Backbone.Model.extend({
  defaults: function() {
    return {
      "selectedNodes": [],
      "underlineViews": []
    };
  },

  initialize: function(attributes, options) {

    this.constructUnderlineViews();
  },

  // --------------- PRIVATE HELPERS ---------------------------------------

  underlineGroupCallback: function(event) {

    var that = this;

    // Trigger this event on each of the underline views (except triggering event)
    if (event.type === "click") {
      that.get("bbPageSetView").trigger("annotationClicked", "underline", that.get("CFI"), that.get("id"), event);
      return;
    }

    // Events that are called on each member of the group
    _.each(this.get("underlineViews"), function(underlineView) {

      if (event.type === "mouseenter") {
        underlineView.setHoverUnderline();
      } else if (event.type === "mouseleave") {
        underlineView.setBaseUnderline();
      }
    });
  },

  constructUnderlineViews: function() {

    var that = this;
    var rectList = [];
    var inferrer;
    var inferredLines;

    _.each(this.get("selectedNodes"), function(node, index) {

      var rects;
      var range = document.createRange();
      range.selectNodeContents(node);
      rects = range.getClientRects();

      // REFACTORING CANDIDATE: Maybe a better way to append an array here
      _.each(rects, function(rect) {
        rectList.push(rect);
      });
    });

    inferrer = new TextLineInferrer();
    inferredLines = inferrer.inferLines(rectList);

    _.each(inferredLines, function(line, index) {

      var underlineTop = line.startTop;
      var underlineLeft = line.left;
      var underlineHeight = line.avgHeight;
      var underlineWidth = line.width;

      var underlineView = new UnderlineView({
        CFI: that.get("CFI"),
        top: underlineTop + that.get("offsetTopAddition"),
        left: underlineLeft + that.get("offsetLeftAddition"),
        height: underlineHeight,
        width: underlineWidth,
        styles: that.get("styles"),
        underlineGroupCallback: that.underlineGroupCallback,
        callbackContext: that
      });

      that.get("underlineViews").push(underlineView);
    });
  },

  resetUnderlines: function(viewportElement, offsetTop, offsetLeft) {

    if (offsetTop) {
      this.set({
        offsetTopAddition: offsetTop
      });
    }
    if (offsetLeft) {
      this.set({
        offsetLeftAddition: offsetLeft
      });
    }

    this.destroyCurrentUnderlines();
    this.constructUnderlineViews();
    this.renderUnderlines(viewportElement);
  },

  // REFACTORING CANDIDATE: Ensure that event listeners are being properly cleaned up. 
  destroyCurrentUnderlines: function() {

    _.each(this.get("underlineViews"), function(underlineView) {
      underlineView.remove();
      underlineView.off();
    });

    this.get("underlineViews").length = 0;
  },

  renderUnderlines: function(viewportElement) {

    _.each(this.get("underlineViews"), function(view, index) {
      $(viewportElement).append(view.render());
    });
  },

  toInfo: function() {

    return {

      id: this.get("id"),
      type: "underline",
      CFI: this.get("CFI")
    };
  },

  setStyles: function(styles) {

    var underlineViews = this.get('underlineViews');

    this.set({
      styles: styles
    });

    _.each(underlineViews, function(view, index) {
      view.setStyles(styles);
    });
  },
});

module.exports = UnderlineGroup
},{"./text-line-inferrer":"/Users/craverod/opensource/readium-js/src/epub-annotations/text-line-inferrer.js","./underline-view":"/Users/craverod/opensource/readium-js/src/epub-annotations/underline-view.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/underline-view.js":[function(require,module,exports){
var Backbone = require('backbone')
var Underline = require('./underline')

var UnderlineView = Backbone.View.extend({

  el: "<div class='underline-range'> \
             <div class='transparent-part'></div> \
             <div class='underline-part'></div> \
          </div>",

  events: {
    "mouseenter": "underlineEvent",
    "mouseleave": "underlineEvent",
    "click": "underlineEvent"
  },

  initialize: function(options) {

    this.underline = new Underline({
      CFI: options.CFI,
      top: options.top,
      left: options.left,
      height: options.height,
      width: options.width,
      styles: options.styles,
      underlineGroupCallback: options.underlineGroupCallback,
      callbackContext: options.callbackContext
    });

    this.$transparentElement = $(".transparent-part", this.$el);
    this.$underlineElement = $(".underline-part", this.$el);
  },

  render: function() {

    this.setCSS();
    return this.el;
  },

  resetPosition: function(top, left, height, width) {

    this.underline.set({
      top: top,
      left: left,
      height: height,
      width: width
    });
    this.setCSS();
  },

  setStyles: function(styles) {

    this.underline.set({
      styles: styles,
    });
    this.render();
  },

  setCSS: function() {
    var styles = this.underline.get("styles") || {};

    this.$el.css({
      "top": this.underline.get("top") + "px",
      "left": this.underline.get("left") + "px",
      "height": this.underline.get("height") + "px",
      "width": this.underline.get("width") + "px",
    });

    // Underline part
    this.$underlineElement.css({
      "background-color": styles.fill_color || "normal",
    });


    this.$underlineElement.addClass("underline");
  },

  underlineEvent: function(event) {

    event.stopPropagation();
    var underlineGroupCallback = this.underline.get("underlineGroupCallback");
    var underlineGroupContext = this.underline.get("callbackContext");
    underlineGroupContext.underlineGroupCallback(event);
  },

  setBaseUnderline: function() {

    this.$underlineElement.addClass("underline");
    this.$underlineElement.removeClass("hover-underline");
  },

  setHoverUnderline: function() {

    this.$underlineElement.addClass("hover-underline");
    this.$underlineElement.removeClass("underline");
  },
});


module.exports = UnderlineView
},{"./underline":"/Users/craverod/opensource/readium-js/src/epub-annotations/underline.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js"}],"/Users/craverod/opensource/readium-js/src/epub-annotations/underline.js":[function(require,module,exports){
var Backbone = require('backbone')

var Underline = Backbone.Model.extend({
  defaults: {
    "isVisible": false
  },

  initialize: function(attributes, options) {}
});

module.exports = Underline
},{"backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js"}],"/Users/craverod/opensource/readium-js/src/epub-fetch/content-document-fetcher.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var _ = require('underscore');
var URI = require('URIjs');
var ContentTypeDiscovery = require('./discover-content-type');

function ContentDocumentFetcher(publicationFetcher, spineItem, loadedDocumentUri, publicationResourcesCache) {

  var self = this;

  var _contentDocumentPathRelativeToPackage = spineItem.href;
  var _publicationFetcher = publicationFetcher;
  var _contentDocumentText;
  var _srcMediaType = spineItem.media_type;
  var _contentDocumentDom;
  var _publicationResourcesCache = publicationResourcesCache;

  // PUBLIC API

  this.fetchContentDocumentAndResolveDom = function(contentDocumentResolvedCallback, errorCallback) {
    _publicationFetcher.relativeToPackageFetchFileContents(_contentDocumentPathRelativeToPackage, 'text',
      function(contentDocumentText) {
        _contentDocumentText = contentDocumentText;
        self.resolveInternalPackageResources(contentDocumentResolvedCallback, errorCallback);
      }, errorCallback
    );
  };

  this.resolveInternalPackageResources = function(resolvedDocumentCallback, onerror) {

    _contentDocumentDom = _publicationFetcher.markupParser.parseMarkup(_contentDocumentText, _srcMediaType);
    setBaseUri(_contentDocumentDom, loadedDocumentUri);

    var resolutionDeferreds = [];

    if (_publicationFetcher.shouldFetchMediaAssetsProgrammatically()) {
      resolveDocumentImages(resolutionDeferreds, onerror);
      resolveDocumentAudios(resolutionDeferreds, onerror);
      resolveDocumentVideos(resolutionDeferreds, onerror);
    }
    // TODO: recursive fetching, parsing and DOM construction of documents in IFRAMEs,
    // with CSS preprocessing and obfuscated font handling
    resolveDocumentIframes(resolutionDeferreds, onerror);
    // TODO: resolution (e.g. using DOM mutation events) of scripts loaded dynamically by scripts
    resolveDocumentScripts(resolutionDeferreds, onerror);
    resolveDocumentLinkStylesheets(resolutionDeferreds, onerror);
    resolveDocumentEmbeddedStylesheets(resolutionDeferreds, onerror);

    $.when.apply($, resolutionDeferreds).done(function() {
      resolvedDocumentCallback(_contentDocumentDom);
    });

  };

  // INTERNAL FUNCTIONS

  function setBaseUri(documentDom, baseURI) {
    var baseElem = documentDom.getElementsByTagName('base')[0];
    if (!baseElem) {
      baseElem = documentDom.createElement('base');

      var anchor = documentDom.getElementsByTagName('head')[0];
      anchor.insertBefore(baseElem, anchor.childNodes[0]);
    }
    baseElem.setAttribute('href', baseURI);
  }

  function _handleError(err) {
    if (err) {
      if (err.message) {
        console.error(err.message);
      }
      if (err.stack) {
        console.error(err.stack);
      }
    }
    console.error(err);
  }

  function fetchResourceForElement(resolvedElem, refAttrOrigVal, refAttr, fetchMode, resolutionDeferreds,
    onerror, resourceDataPreprocessing) {
    var resourceUriRelativeToPackageDocument = (new URI(refAttrOrigVal)).absoluteTo(_contentDocumentPathRelativeToPackage).toString();

    var cachedResourceUrl = _publicationResourcesCache.getResourceURL(resourceUriRelativeToPackageDocument);

    function replaceRefAttrInElem(newResourceUrl) {
      // Store original refAttrVal in a special attribute to provide access to the original href:
      $(resolvedElem).data('epubZipOrigHref', refAttrOrigVal);
      $(resolvedElem).attr(refAttr, newResourceUrl);
    }

    if (cachedResourceUrl) {
      replaceRefAttrInElem(cachedResourceUrl);
    } else {
      var resolutionDeferred = $.Deferred();
      resolutionDeferreds.push(resolutionDeferred);

      _publicationFetcher.relativeToPackageFetchFileContents(resourceUriRelativeToPackageDocument,
        fetchMode,
        function(resourceData) {

          // Generate a function to replace element's resource URL with URL of fetched data.
          // The function will either be called directly, immediately (if no preprocessing of resourceData is in effect)
          // or indirectly, later after resourceData preprocessing finishes:
          var replaceResourceURL = function(finalResourceData) {
            // Creating an object URL requires a Blob object, so resource data fetched in text mode needs to be wrapped in a Blob:
            if (fetchMode === 'text') {
              var textResourceContentType = ContentTypeDiscovery.identifyContentTypeFromFileName(resourceUriRelativeToPackageDocument);
              var declaredType = $(resolvedElem).attr('type');
              if (declaredType) {
                textResourceContentType = declaredType;
              }
              finalResourceData = new Blob([finalResourceData], {
                type: textResourceContentType
              });
            }
            //noinspection JSUnresolvedVariable,JSUnresolvedFunction
            var resourceObjectURL = window.URL.createObjectURL(finalResourceData);
            _publicationResourcesCache.putResourceURL(resourceUriRelativeToPackageDocument,
              resourceObjectURL);
            // TODO: take care of releasing object URLs when no longer needed
            replaceRefAttrInElem(resourceObjectURL);
            resolutionDeferred.resolve();
          };

          if (resourceDataPreprocessing) {
            resourceDataPreprocessing(resourceData, resourceUriRelativeToPackageDocument,
              replaceResourceURL);
          } else {
            replaceResourceURL(resourceData);
          }
        }, onerror);
    }
  }

  function fetchResourceForCssUrlMatch(cssUrlMatch, cssResourceDownloadDeferreds,
    styleSheetUriRelativeToPackageDocument, stylesheetCssResourceUrlsMap,
    isStyleSheetResource) {
    var origMatchedUrlString = cssUrlMatch[0];

    var extractedUrlCandidates = cssUrlMatch.slice(2);
    var extractedUrl = _.find(extractedUrlCandidates, function(matchGroup) {
      return typeof matchGroup !== 'undefined'
    });

    var extractedUri = new URI(extractedUrl);
    var isCssUrlRelative = extractedUri.scheme() === '';
    if (!isCssUrlRelative) {
      // Absolute URLs don't need programmatic fetching
      return;
    }
    var resourceUriRelativeToPackageDocument = (new URI(extractedUrl)).absoluteTo(styleSheetUriRelativeToPackageDocument).toString();

    var cachedResourceURL = _publicationResourcesCache.getResourceURL(resourceUriRelativeToPackageDocument);


    if (cachedResourceURL) {
      stylesheetCssResourceUrlsMap[origMatchedUrlString] = {
        isStyleSheetResource: isStyleSheetResource,
        resourceObjectURL: cachedResourceURL
      };
    } else {
      var cssUrlFetchDeferred = $.Deferred();
      cssResourceDownloadDeferreds.push(cssUrlFetchDeferred);

      var processedBlobCallback = function(resourceDataBlob) {
        //noinspection JSUnresolvedVariable,JSUnresolvedFunction
        var resourceObjectURL = window.URL.createObjectURL(resourceDataBlob);
        stylesheetCssResourceUrlsMap[origMatchedUrlString] = {
          isStyleSheetResource: isStyleSheetResource,
          resourceObjectURL: resourceObjectURL
        };
        _publicationResourcesCache.putResourceURL(resourceUriRelativeToPackageDocument, resourceObjectURL);
        cssUrlFetchDeferred.resolve();
      };
      var fetchErrorCallback = function(error) {
        _handleError(error);
        cssUrlFetchDeferred.resolve();
      };

      var fetchMode;
      var fetchCallback;
      if (isStyleSheetResource) {
        // TODO: test whether recursion works for nested @import rules with arbitrary indirection depth.
        fetchMode = 'text';
        fetchCallback = function(styleSheetResourceData) {
          preprocessCssStyleSheetData(styleSheetResourceData, resourceUriRelativeToPackageDocument,
            function(preprocessedStyleSheetData) {
              var resourceDataBlob = new Blob([preprocessedStyleSheetData], {
                type: 'text/css'
              });
              processedBlobCallback(resourceDataBlob);
            })
        }
      } else {
        fetchMode = 'blob';
        fetchCallback = processedBlobCallback;
      }

      _publicationFetcher.relativeToPackageFetchFileContents(resourceUriRelativeToPackageDocument,
        fetchMode,
        fetchCallback, fetchErrorCallback);
    }
  }

  function preprocessCssStyleSheetData(styleSheetResourceData, styleSheetUriRelativeToPackageDocument,
    callback) {
    var cssUrlRegexp = /[Uu][Rr][Ll]\(\s*([']([^']+)[']|["]([^"]+)["]|([^)]+))\s*\)/g;
    var nonUrlCssImportRegexp = /@[Ii][Mm][Pp][Oo][Rr][Tt]\s*('([^']+)'|"([^"]+)")/g;
    var stylesheetCssResourceUrlsMap = {};
    var cssResourceDownloadDeferreds = [];
    // Go through the stylesheet text using all regexps and process according to those regexp matches, if any:
    [nonUrlCssImportRegexp, cssUrlRegexp].forEach(function(processingRegexp) {
      // extract all URL references in the CSS sheet,
      var cssUrlMatch = processingRegexp.exec(styleSheetResourceData);
      while (cssUrlMatch != null) {
        // then fetch and replace them with corresponding object URLs:
        var isStyleSheetResource = false;
        // Special handling of @import-ed stylesheet files - recursive preprocessing:
        // TODO: will not properly handle @import url(...):
        if (processingRegexp == nonUrlCssImportRegexp) {
          // This resource URL points to an @import-ed CSS stylesheet file. Need to preprocess its text
          // after fetching but before making an object URL of it:
          isStyleSheetResource = true;
        }
        fetchResourceForCssUrlMatch(cssUrlMatch, cssResourceDownloadDeferreds,
          styleSheetUriRelativeToPackageDocument, stylesheetCssResourceUrlsMap, isStyleSheetResource);
        cssUrlMatch = processingRegexp.exec(styleSheetResourceData);
      }

    });

    if (cssResourceDownloadDeferreds.length > 0) {
      $.when.apply($, cssResourceDownloadDeferreds).done(function() {
        for (var origMatchedUrlString in stylesheetCssResourceUrlsMap) {
          var processedResourceDescriptor = stylesheetCssResourceUrlsMap[origMatchedUrlString];


          var processedUrlString;
          if (processedResourceDescriptor.isStyleSheetResource) {
            processedUrlString = '@import "' + processedResourceDescriptor.resourceObjectURL + '"';
          } else {
            processedUrlString = "url('" + processedResourceDescriptor.resourceObjectURL + "')";
          }
          var origMatchedUrlStringEscaped = origMatchedUrlString.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
            "\\$&");
          var origMatchedUrlStringRegExp = new RegExp(origMatchedUrlStringEscaped, 'g');
          //noinspection JSCheckFunctionSignatures
          styleSheetResourceData =
            styleSheetResourceData.replace(origMatchedUrlStringRegExp, processedUrlString, 'g');

        }
        callback(styleSheetResourceData);
      });
    } else {
      callback(styleSheetResourceData);
    }
  }


  function resolveResourceElements(elemName, refAttr, fetchMode, resolutionDeferreds, onerror,
    resourceDataPreprocessing) {

    var resolvedElems = $(elemName + '[' + refAttr + ']', _contentDocumentDom);

    resolvedElems.each(function(index, resolvedElem) {
      var refAttrOrigVal = $(resolvedElem).attr(refAttr);
      var refAttrUri = new URI(refAttrOrigVal);

      if (refAttrUri.scheme() === '') {
        // Relative URI, fetch from packed EPUB archive:

        fetchResourceForElement(resolvedElem, refAttrOrigVal, refAttr, fetchMode, resolutionDeferreds,
          onerror, resourceDataPreprocessing);
      }
    });
  }

  function resolveDocumentImages(resolutionDeferreds, onerror) {
    resolveResourceElements('img', 'src', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentAudios(resolutionDeferreds, onerror) {
    resolveResourceElements('audio', 'src', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentVideos(resolutionDeferreds, onerror) {
    resolveResourceElements('video', 'src', 'blob', resolutionDeferreds, onerror);
    resolveResourceElements('video', 'poster', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentScripts(resolutionDeferreds, onerror) {
    resolveResourceElements('script', 'src', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentIframes(resolutionDeferreds, onerror) {
    resolveResourceElements('iframe', 'src', 'blob', resolutionDeferreds, onerror);
  }

  function resolveDocumentLinkStylesheets(resolutionDeferreds, onerror) {
    resolveResourceElements('link', 'href', 'text', resolutionDeferreds, onerror,
      preprocessCssStyleSheetData);
  }

  function resolveDocumentEmbeddedStylesheets(resolutionDeferreds, onerror) {
    var resolvedElems = $('style', _contentDocumentDom);
    resolvedElems.each(function(index, resolvedElem) {
      var resolutionDeferred = $.Deferred();
      resolutionDeferreds.push(resolutionDeferred);
      var styleSheetData = $(resolvedElem).text();
      preprocessCssStyleSheetData(styleSheetData, _contentDocumentPathRelativeToPackage,
        function(resolvedStylesheetData) {
          $(resolvedElem).text(resolvedStylesheetData);
          resolutionDeferred.resolve();
        });
    });
  }

};

module.exports = ContentDocumentFetcher;
},{"./discover-content-type":"/Users/craverod/opensource/readium-js/src/epub-fetch/discover-content-type.js","URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub-fetch/discover-content-type.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var URI = require('URIjs');

var _instance = undefined;

function ContentTypeDiscovery() {

  var self = this;

  ContentTypeDiscovery.suffixContentTypeMap = {
    css: 'text/css',
    epub: 'application/epub+zip',
    gif: 'image/gif',
    html: 'text/html',
    jpg: 'image/jpeg',
    jpeg: 'image/jpeg',
    ncx: 'application/x-dtbncx+xml',
    opf: 'application/oebps-package+xml',
    png: 'image/png',
    svg: 'image/svg+xml',
    xhtml: 'application/xhtml+xml'
  };

  this.identifyContentTypeFromFileName = function(contentUrl) {
    var contentUrlSuffix = URI(contentUrl).suffix();
    var contentType = 'application/octet-stream';
    if (typeof ContentTypeDiscovery.suffixContentTypeMap[contentUrlSuffix] !== 'undefined') {
      contentType = ContentTypeDiscovery.suffixContentTypeMap[contentUrlSuffix];
    }
    return contentType;
  };

  this.identifyContentType = function(contentUrl) {
    // TODO: Make the call asynchronous (which would require a callback and would probably make sense
    // when calling functions are also remodelled for async).

    var contentType = $.ajax({
      type: "HEAD",
      url: contentUrl,
      async: false
    }).getResponseHeader('Content-Type');
    if (contentType === null) {
      contentType = self.identifyContentTypeFromFileName(contentUrl);
      console.log('guessed contentType [' + contentType + '] from URI [' + contentUrl +
        ']. Configuring the web server to provide the content type is recommended.');

    }

    return contentType;
  }

};

if (!_instance) {
  _instance = new ContentTypeDiscovery();
}

module.exports = _instance;
},{"URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub-fetch/encryption-handler.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');

function EncryptionHandler(encryptionData) {
  var self = this;

  var ENCRYPTION_METHODS = {
    'http://www.idpf.org/2008/embedding': embeddedFontDeobfuscateIdpf,
    'http://ns.adobe.com/pdf/enc#RC': embeddedFontDeobfuscateAdobe
  };

  // INTERNAL FUNCTIONS

  function blob2BinArray(blob, callback) {
    var fileReader = new FileReader();
    fileReader.onload = function() {
      var arrayBuffer = this.result;
      callback(new Uint8Array(arrayBuffer));
    };
    fileReader.readAsArrayBuffer(blob);
  }

  function xorObfuscatedBlob(obfuscatedResourceBlob, prefixLength, xorKey, callback) {
    var obfuscatedPrefixBlob = obfuscatedResourceBlob.slice(0, prefixLength);
    blob2BinArray(obfuscatedPrefixBlob, function(bytes) {
      var masklen = xorKey.length;
      for (var i = 0; i < prefixLength; i++) {
        bytes[i] = bytes[i] ^ (xorKey[i % masklen]);
      }
      var deobfuscatedPrefixBlob = new Blob([bytes], {
        type: obfuscatedResourceBlob.type
      });
      var remainderBlob = obfuscatedResourceBlob.slice(prefixLength);
      var deobfuscatedBlob = new Blob([deobfuscatedPrefixBlob, remainderBlob], {
        type: obfuscatedResourceBlob.type
      });

      callback(deobfuscatedBlob);
    });
  }

  function embeddedFontDeobfuscateIdpf(obfuscatedResourceBlob, callback) {

    var prefixLength = 1040;
    // Shamelessly copied from
    // https://github.com/readium/readium-chrome-extension/blob/26d4b0cafd254cfa93bf7f6225887b83052642e0/scripts/models/path_resolver.js#L102 :
    xorObfuscatedBlob(obfuscatedResourceBlob, prefixLength, encryptionData.uidHash, callback);
  }

  function urnUuidToByteArray(id) {
    var uuidRegexp = /(urn:uuid:)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})/i;
    var matchResults = uuidRegexp.exec(id);
    var rawUuid = matchResults[2] + matchResults[3] + matchResults[4] + matchResults[5] + matchResults[6];
    if (!rawUuid || rawUuid.length != 32) {
      console.error('Bad UUID format for ID :' + id);
    }
    var byteArray = [];
    for (var i = 0; i < 16; i++) {
      var byteHex = rawUuid.substr(i * 2, 2);
      var byteNumber = parseInt(byteHex, 16);
      byteArray.push(byteNumber);
    }
    return byteArray;
  }

  function embeddedFontDeobfuscateAdobe(obfuscatedResourceBlob, callback) {

    // extract the UUID and convert to big-endian binary form (16 bytes):
    var uidWordArray = urnUuidToByteArray(encryptionData.uid);
    var prefixLength = 1024;
    xorObfuscatedBlob(obfuscatedResourceBlob, prefixLength, uidWordArray, callback)
  }


  // PUBLIC API

  this.isEncryptionSpecified = function() {
    return encryptionData && encryptionData.encryptions;
  };


  this.getEncryptionMethodForRelativePath = function(pathRelativeToRoot) {
    if (self.isEncryptionSpecified()) {
      return encryptionData.encryptions[pathRelativeToRoot];
    } else {
      return undefined;
    }
  };

  this.getDecryptionFunctionForRelativePath = function(pathRelativeToRoot) {
    var encryptionMethod = self.getEncryptionMethodForRelativePath(pathRelativeToRoot);
    if (encryptionMethod && ENCRYPTION_METHODS[encryptionMethod]) {
      return ENCRYPTION_METHODS[encryptionMethod];
    } else {
      return undefined;
    }
  };

};

EncryptionHandler.CreateEncryptionData = function(id, encryptionDom) {

  var encryptionData = {
    uid: id,
    uidHash: window.Crypto.SHA1(unescape(encodeURIComponent(id.trim())), {
      asBytes: true
    }),
    encryptions: undefined
  };

  var encryptedData = $('EncryptedData', encryptionDom);
  encryptedData.each(function(index, encryptedData) {
    var encryptionAlgorithm = $('EncryptionMethod', encryptedData).first().attr('Algorithm');

    // For some reason, jQuery selector "" against XML DOM sometimes doesn't match properly
    var cipherReference = $('CipherReference', encryptedData);
    cipherReference.each(function(index, CipherReference) {
      var cipherReferenceURI = $(CipherReference).attr('URI');
      console.log('Encryption/obfuscation algorithm ' + encryptionAlgorithm + ' specified for ' +
        cipherReferenceURI);

      if (!encryptionData.encryptions) {
        encryptionData.encryptions = {};
      }

      encryptionData.encryptions[cipherReferenceURI] = encryptionAlgorithm;
    });
  });

  return encryptionData;
};

module.exports = EncryptionHandler;
},{"jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/src/epub-fetch/markup-parser.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

function MarkupParser() {

  var self = this;

  this.parseXml = function(xmlString) {
    return self.parseMarkup(xmlString, 'text/xml');
  };

  this.parseMarkup = function(markupString, contentType) {
    var parser = new window.DOMParser;
    return parser.parseFromString(markupString, contentType);
  };

};

module.exports = MarkupParser;
},{}],"/Users/craverod/opensource/readium-js/src/epub-fetch/plain-resource-fetcher.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var _ = require('underscore');
var URI = require('URIjs');
var ContentTypeDiscovery = require('./discover-content-type');

function PlainResourceFetcher(parentFetcher, baseUrl) {

  var self = this;
  var _packageDocumentAbsoluteUrl;
  var _packageDocumentRelativePath;

  // INTERNAL FUNCTIONS

  function fetchFileContents(pathRelativeToPackageRoot, readCallback, onerror) {
    var fileUrl = self.resolveURI(pathRelativeToPackageRoot);

    if (typeof pathRelativeToPackageRoot === 'undefined') {
      throw 'Fetched file relative path is undefined!';
    }

    var xhr = new XMLHttpRequest();
    xhr.open('GET', fileUrl, true);
    xhr.responseType = 'arraybuffer';
    xhr.onerror = onerror;

    xhr.onload = function(loadEvent) {
      readCallback(xhr.response);
    };

    xhr.send();
  }


  // PUBLIC API

  this.initialize = function(callback) {

    parentFetcher.getXmlFileDom('META-INF/container.xml', function(containerXmlDom) {
      _packageDocumentRelativePath = parentFetcher.getRootFile(containerXmlDom);
      _packageDocumentAbsoluteUrl = self.resolveURI(_packageDocumentRelativePath);

      callback();

    }, function(error) {
      console.error("unable to find package document: " + error);
      _packageDocumentAbsoluteUrl = baseUrl;

      callback();
    });
  };

  this.resolveURI = function(pathRelativeToPackageRoot) {
    return baseUrl + "/" + pathRelativeToPackageRoot;
  };


  this.getPackageUrl = function() {
    return _packageDocumentAbsoluteUrl;
  };

  this.fetchFileContentsText = function(pathRelativeToPackageRoot, fetchCallback, onerror) {
    var fileUrl = self.resolveURI(pathRelativeToPackageRoot);

    if (typeof fileUrl === 'undefined') {
      throw 'Fetched file URL is undefined!';
    }
    $.ajax({
      // encoding: "UTF-8",
      // mimeType: "text/plain; charset=UTF-8",
      // beforeSend: function( xhr ) {
      //     xhr.overrideMimeType("text/plain; charset=UTF-8");
      // },
      isLocal: fileUrl.indexOf("http") === 0 ? false : true,
      url: fileUrl,
      dataType: 'text', //https://api.jquery.com/jQuery.ajax/
      async: true,
      success: function(result) {
        fetchCallback(result);
      },
      error: function(xhr, status, errorThrown) {
        console.error('Error when AJAX fetching ' + fileUrl);
        console.error(status);
        console.error(errorThrown);

        // // isLocal = false with custom URI scheme / protocol results in false fail on Firefox (Chrome okay)
        // if (status === "error" && (!errorThrown || !errorThrown.length) && xhr.responseText && xhr.responseText.length)
        // {
        //     console.error(xhr);
        //     if (typeof xhr.getResponseHeader !== "undefined") console.error(xhr.getResponseHeader("Content-Type"));
        //     if (typeof xhr.getAllResponseHeaders !== "undefined") console.error(xhr.getAllResponseHeaders());
        //     if (typeof xhr.responseText !== "undefined") console.error(xhr.responseText);
        //     
        //     // success
        //     fetchCallback(xhr.responseText);
        //     return;
        // }

        onerror(errorThrown);
      }
    });
  };

  this.fetchFileContentsBlob = function(pathRelativeToPackageRoot, fetchCallback, onerror) {

    var decryptionFunction = parentFetcher.getDecryptionFunctionForRelativePath(pathRelativeToPackageRoot);
    if (decryptionFunction) {
      var origFetchCallback = fetchCallback;
      fetchCallback = function(unencryptedBlob) {
        decryptionFunction(unencryptedBlob, function(decryptedBlob) {
          origFetchCallback(decryptedBlob);
        });
      };
    }
    fetchFileContents(pathRelativeToPackageRoot, function(contentsArrayBuffer) {
      var blob = new Blob([contentsArrayBuffer], {
        type: ContentTypeDiscovery.identifyContentTypeFromFileName(pathRelativeToPackageRoot)
      });
      fetchCallback(blob);
    }, onerror);
  };

  this.getPackageDom = function(callback, onerror) {
    self.fetchFileContentsText(_packageDocumentRelativePath, function(packageXml) {
      var packageDom = parentFetcher.markupParser.parseXml(packageXml);
      callback(packageDom);
    }, onerror);
  };

};

module.exports = PlainResourceFetcher;
},{"./discover-content-type":"/Users/craverod/opensource/readium-js/src/epub-fetch/discover-content-type.js","URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub-fetch/publication-fetcher.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var ContentDocumentFetcher = require('./content-document-fetcher');
var EncryptionHandler = require('./encryption-handler');
var MarkupParser = require('./markup-parser');
var PlainResourceFetcher = require('./plain-resource-fetcher');
var ResourceCache = require('./resource-cache');
var URI = require('URIjs');
var ZipResourceFetcher = require('./zip-resource-fetcher');

function PublicationFetcher(bookRoot, jsLibRoot) {

  var self = this;

  self.contentTypePackageReadStrategyMap = {
    'application/oebps-package+xml': 'exploded',
    'application/epub+zip': 'zipped',
    'application/zip': 'zipped'
  };

  var _shouldConstructDomProgrammatically;
  var _resourceFetcher;
  var _encryptionHandler;
  var _packageFullPath;
  var _packageDom;
  var _packageDomInitializationDeferred;
  var _publicationResourcesCache = new ResourceCache;


  this.markupParser = new MarkupParser();

  this.initialize = function(callback) {

    var isEpubExploded = isExploded();

    // Non exploded EPUBs (i.e. zipped .epub documents) should be fetched in a programmatical manner:
    _shouldConstructDomProgrammatically = !isEpubExploded;
    createResourceFetcher(isEpubExploded, callback);
  };



  // INTERNAL FUNCTIONS

  function _handleError(err) {
    if (err) {
      if (err.message) {
        console.error(err.message);
      }
      if (err.stack) {
        console.error(err.stack);
      }
    }
    console.error(err);
  }

  function isExploded() {

    var ext = ".epub";
    return bookRoot.indexOf(ext, bookRoot.length - ext.length) === -1;
  }

  function createResourceFetcher(isExploded, callback) {
    if (isExploded) {
      console.log('using new PlainResourceFetcher');
      _resourceFetcher = new PlainResourceFetcher(self, bookRoot);
      _resourceFetcher.initialize(function() {
        callback(_resourceFetcher);
      });
      return;
    } else {
      console.log('using new ZipResourceFetcher');
      _resourceFetcher = new ZipResourceFetcher(self, bookRoot, jsLibRoot);
      callback(_resourceFetcher);
    }
  }

  // PUBLIC API

  /**
   * Determine whether the documents fetched using this fetcher require special programmatic handling.
   * (resolving of internal resource references).
   * @returns {*} true if documents fetched using this fetcher require special programmatic handling
   * (resolving of internal resource references). Typically needed for zipped EPUBs or exploded EPUBs that contain
   * encrypted resources specified in META-INF/encryption.xml.
   *
   * false if documents can be fed directly into a window or iframe by src URL without using special fetching logic.
   */
  this.shouldConstructDomProgrammatically = function() {
    return _shouldConstructDomProgrammatically;
  };

  /**
   * Determine whether the media assets (audio, video, images) within content documents require special
   * programmatic handling.
   * @returns {*} true if content documents fetched using this fetcher require programmatic fetching
   * of media assets. Typically needed for zipped EPUBs.
   *
   * false if paths to media assets are accessible directly for the browser through their paths relative to
   * the base URI of their content document.
   */
  this.shouldFetchMediaAssetsProgrammatically = function() {
    return _shouldConstructDomProgrammatically && !isExploded();
  };

  this.getBookRoot = function() {
    return bookRoot;
  };

  this.getJsLibRoot = function() {
    return jsLibRoot;
  }

  this.getPackageUrl = function() {
    return _resourceFetcher.getPackageUrl();
  };

  this.fetchContentDocument = function(attachedData, loadedDocumentUri, contentDocumentResolvedCallback, errorCallback) {

    var contentDocumentFetcher = new ContentDocumentFetcher(self, attachedData.spineItem, loadedDocumentUri, _publicationResourcesCache);
    contentDocumentFetcher.fetchContentDocumentAndResolveDom(contentDocumentResolvedCallback, function(err) {
      _handleError(err);
      errorCallback(err);
    });
  };

  this.getFileContentsFromPackage = function(filePathRelativeToPackageRoot, callback, onerror) {

    _resourceFetcher.fetchFileContentsText(filePathRelativeToPackageRoot, function(fileContents) {
      callback(fileContents);
    }, onerror);
  };



  this.getXmlFileDom = function(xmlFilePathRelativeToPackageRoot, callback, onerror) {
    self.getFileContentsFromPackage(xmlFilePathRelativeToPackageRoot, function(xmlFileContents) {
      var fileDom = self.markupParser.parseXml(xmlFileContents);
      callback(fileDom);
    }, onerror);
  };

  this.getPackageFullPath = function(callback, onerror) {
    self.getXmlFileDom('META-INF/container.xml', function(containerXmlDom) {
      var packageFullPath = self.getRootFile(containerXmlDom);
      callback(packageFullPath);
    }, onerror);
  };

  this.getRootFile = function(containerXmlDom) {
    var rootFile = $('rootfile', containerXmlDom);
    var packageFullPath = rootFile.attr('full-path');
    return packageFullPath;
  };

  this.getPackageDom = function(callback, onerror) {
    if (_packageDom) {
      callback(_packageDom);
    } else {
      // TODO: use jQuery's Deferred
      // Register all callbacks interested in initialized packageDom, launch its instantiation only once
      // and broadcast to all callbacks registered during the initialization once it's done:
      if (_packageDomInitializationDeferred) {
        _packageDomInitializationDeferred.done(callback);
      } else {
        _packageDomInitializationDeferred = $.Deferred();
        _packageDomInitializationDeferred.done(callback);
        self.getPackageFullPath(function(packageFullPath) {
          _packageFullPath = packageFullPath;
          self.getXmlFileDom(packageFullPath, function(packageDom) {
            _packageDom = packageDom;
            _packageDomInitializationDeferred.resolve(packageDom);
            _packageDomInitializationDeferred = undefined;
          })
        }, onerror);
      }
    }
  };

  this.convertPathRelativeToPackageToRelativeToBase = function(relativeToPackagePath) {
    return new URI(relativeToPackagePath).absoluteTo(_packageFullPath).toString();
  };

  this.relativeToPackageFetchFileContents = function(relativeToPackagePath, fetchMode, fetchCallback, onerror) {

    if (!onerror) {
      onerror = _handleError;
    }

    var pathRelativeToEpubRoot = decodeURIComponent(self.convertPathRelativeToPackageToRelativeToBase(relativeToPackagePath));
    // In case we received an absolute path, convert it to relative form or the fetch will fail:
    if (pathRelativeToEpubRoot.charAt(0) === '/') {
      pathRelativeToEpubRoot = pathRelativeToEpubRoot.substr(1);
    }
    var fetchFunction = _resourceFetcher.fetchFileContentsText;
    if (fetchMode === 'blob') {
      fetchFunction = _resourceFetcher.fetchFileContentsBlob;
    } else if (fetchMode === 'data64uri') {
      fetchFunction = _resourceFetcher.fetchFileContentsData64Uri;
    }
    fetchFunction.call(_resourceFetcher, pathRelativeToEpubRoot, fetchCallback, onerror);
  };



  this.getRelativeXmlFileDom = function(filePath, callback, errorCallback) {
    self.getXmlFileDom(self.convertPathRelativeToPackageToRelativeToBase(filePath), callback, errorCallback);
  };

  function readEncriptionData(callback) {
    self.getXmlFileDom('META-INF/encryption.xml', function(encryptionDom, error) {

      if (error) {
        console.log(error);
        console.log("Document doesn't make use of encryption.");
        _encryptionHandler = new EncryptionHandler(undefined);
        callback();
      } else {

        var encryptions = [];


        var encryptedData = $('EncryptedData', encryptionDom);
        encryptedData.each(function(index, encryptedData) {
          var encryptionAlgorithm = $('EncryptionMethod', encryptedData).first().attr('Algorithm');

          encryptions.push({
            algorithm: encryptionAlgorithm
          });

          // For some reason, jQuery selector "" against XML DOM sometimes doesn't match properly
          var cipherReference = $('CipherReference', encryptedData);
          cipherReference.each(function(index, CipherReference) {
            var cipherReferenceURI = $(CipherReference).attr('URI');
            console.log('Encryption/obfuscation algorithm ' + encryptionAlgorithm + ' specified for ' +
              cipherReferenceURI);
            encryptions[cipherReferenceURI] = encryptionAlgorithm;
          });
        });
      }

    });
  }

  // Currently needed for deobfuscating fonts
  this.setPackageMetadata = function(packageMetadata, settingFinishedCallback) {

    self.getXmlFileDom('META-INF/encryption.xml', function(encryptionDom) {

      var encryptionData = EncryptionHandler.CreateEncryptionData(packageMetadata.id, encryptionDom);

      _encryptionHandler = new EncryptionHandler(encryptionData);

      if (_encryptionHandler.isEncryptionSpecified()) {
        // EPUBs that use encryption for any resources should be fetched in a programmatical manner:
        _shouldConstructDomProgrammatically = true;
      }

      settingFinishedCallback();


    }, function(error) {

      console.log("Document doesn't make use of encryption.");
      _encryptionHandler = new EncryptionHandler(undefined);

      settingFinishedCallback();
    });
  };

  this.getDecryptionFunctionForRelativePath = function(pathRelativeToRoot) {
    return _encryptionHandler.getDecryptionFunctionForRelativePath(pathRelativeToRoot);
  }
};

module.exports = PublicationFetcher;
},{"./content-document-fetcher":"/Users/craverod/opensource/readium-js/src/epub-fetch/content-document-fetcher.js","./encryption-handler":"/Users/craverod/opensource/readium-js/src/epub-fetch/encryption-handler.js","./markup-parser":"/Users/craverod/opensource/readium-js/src/epub-fetch/markup-parser.js","./plain-resource-fetcher":"/Users/craverod/opensource/readium-js/src/epub-fetch/plain-resource-fetcher.js","./resource-cache":"/Users/craverod/opensource/readium-js/src/epub-fetch/resource-cache.js","./zip-resource-fetcher":"/Users/craverod/opensource/readium-js/src/epub-fetch/zip-resource-fetcher.js","URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/src/epub-fetch/resource-cache.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

function ResourceCache() {

  var self = this;
  var _resourcesHash = {};

  this.getResourceURL = function(resourceAbsoluteHref) {
    var resourceObjectUrl = _resourcesHash[resourceAbsoluteHref];
    return resourceObjectUrl;
  };

  this.putResourceURL = function(resourceAbsoluteHref, resourceObjectUrl) {
    _resourcesHash[resourceAbsoluteHref] = resourceObjectUrl;
  };
  // TODO: methods to evict resource, destroy cache and release object URLs using window.URL.revokeObjectURL(), automatic
  // cache size accounting and management algorithms like LRU.
};

module.exports = ResourceCache;
},{}],"/Users/craverod/opensource/readium-js/src/epub-fetch/zip-resource-fetcher.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery');
var _ = require('underscore');
var URI = require('URIjs');
var ContentTypeDiscovery = require('./discover-content-type');

function ZipResourceFetcher(parentFetcher, baseUrl, libDir) {

  var _checkCrc32 = false;
  var _zipFs;

  // INTERNAL FUNCTIONS

  // Description: perform a function with an initialized zip filesystem, making sure that such filesystem is initialized.
  // Note that due to a race condition, more than one zip filesystem may be instantiated.
  // However, the last one to be set on the model object will prevail and others would be garbage collected later.
  function withZipFsPerform(callback, onerror) {

    if (_zipFs) {

      callback(_zipFs, onerror);

    } else {

      zip.workerScriptsPath = libDir;
      _zipFs = new zip.fs.FS();
      _zipFs.importHttpContent(baseUrl, true, function() {

        callback(_zipFs, onerror);

      }, onerror)
    }
  }

  function fetchFileContents(relativePathRelativeToPackageRoot, readCallback, onerror) {

    if (typeof relativePathRelativeToPackageRoot === 'undefined') {
      throw 'Fetched file relative path is undefined!';
    }

    withZipFsPerform(function(zipFs, onerror) {
      var entry = zipFs.find(relativePathRelativeToPackageRoot);
      if (typeof entry === 'undefined' || entry === null) {
        onerror(new Error('Entry ' + relativePathRelativeToPackageRoot + ' not found in zip ' + baseUrl));
      } else {
        if (entry.directory) {
          onerror(new Error('Entry ' + relativePathRelativeToPackageRoot + ' is a directory while a file has been expected'));
        } else {
          readCallback(entry);
        }
      }
    }, onerror);
  }


  // PUBLIC API

  this.getPackageUrl = function() {
    return baseUrl;
  };

  this.fetchFileContentsText = function(relativePathRelativeToPackageRoot, fetchCallback, onerror) {

    fetchFileContents(relativePathRelativeToPackageRoot, function(entry) {
      entry.getText(fetchCallback, undefined, _checkCrc32);
    }, onerror)
  };

  this.fetchFileContentsData64Uri = function(relativePathRelativeToPackageRoot, fetchCallback, onerror) {
    fetchFileContents(relativePathRelativeToPackageRoot, function(entry) {
      entry.getData64URI(ContentTypeDiscovery.identifyContentTypeFromFileName(relativePathRelativeToPackageRoot),
        fetchCallback, undefined, _checkCrc32);
    }, onerror)
  };

  this.fetchFileContentsBlob = function(relativePathRelativeToPackageRoot, fetchCallback, onerror) {
    var decryptionFunction = parentFetcher.getDecryptionFunctionForRelativePath(relativePathRelativeToPackageRoot);
    if (decryptionFunction) {
      var origFetchCallback = fetchCallback;
      fetchCallback = function(unencryptedBlob) {
        decryptionFunction(unencryptedBlob, function(decryptedBlob) {
          origFetchCallback(decryptedBlob);
        });
      };
    }
    fetchFileContents(relativePathRelativeToPackageRoot, function(entry) {
      entry.getBlob(ContentTypeDiscovery.identifyContentTypeFromFileName(relativePathRelativeToPackageRoot), fetchCallback,
        undefined, _checkCrc32);
    }, onerror)
  };

};

module.exports = ZipResourceFetcher;
},{"./discover-content-type":"/Users/craverod/opensource/readium-js/src/epub-fetch/discover-content-type.js","URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub/manifest.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var _ = require('underscore')

function Manifest(manifestJson) {

  var _manifestIndexById = {};
  var _navItem;

  this.manifestLength = function() {
    return manifestJson.length;
  };

  this.getManifestItemByIdref = function(idref) {
    return _manifestIndexById[idref];
  };

  /**
   * Iterate over manifest items and apply callback (synchronously) on each one of them.
   * @param iteratorCallback the iterator callback function, will be called once for each manifest item,
   * and the item will be passed as the (one and only) argument.
   * @returns the Manifest object for chaining.
   */
  this.each = function(iteratorCallback) {
    _.each(manifestJson, iteratorCallback);
    return this;
  };

  this.getNavItem = function() {
    return _navItem;
  };

  // Initialize indexes
  this.each(function(manifestItem) {
    _manifestIndexById[manifestItem.id] = manifestItem;

    if (manifestItem.properties && manifestItem.properties.indexOf("nav") !== -1) {
      _navItem = manifestItem;
    }
  });

};

module.exports = Manifest;
},{"underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub/metadata.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var _ = require('underscore')

function Metadata() {

  var that = this;

  var _mediaItemIndexByRefinesId = {};

  /**
   * Iterate over media items and apply callback (synchronously) on each one of them.
   * @param iteratorCallback the iterator callback function, will be called once for each media item,
   * and the item will be passed as the (one and only) argument.
   * @returns the Metadata object for chaining.
   */
  this.eachMediaItem = function(iteratorCallback) {
    if (that.mediaItems) {
      _.each(that.mediaItems, iteratorCallback);
    }
    return this;
  };

  this.getMediaItemByRefinesId = function(id) {
    return _mediaItemIndexByRefinesId[id];
  };

  this.setMoMap = function(mediaOverlaysMap) {
    that.media_overlay.smil_models = mediaOverlaysMap;
  };

  // Initialize indexes
  this.eachMediaItem(function(item) {
    var id = item.refines;
    var hash = id.indexOf('#');
    if (hash >= 0) {
      var start = hash + 1;
      var end = id.length - 1;
      id = id.substr(start, end);
    }
    id = id.trim();

    _mediaItemIndexByRefinesId[id] = item;
  });


};
module.exports = Metadata;
},{"underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub/package-document-parser.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var Manifest = require('./manifest')
var MarkupParser = require('../epub-fetch/markup-parser')
var Metadata = require('./metadata')
var URI = require('URIjs')
var PackageDocument = require('./package-document')
var SmilDocumentParser = require('./smil-document-parser')

// `PackageDocumentParser` is used to parse the xml of an epub package
// document and build a javascript object. The constructor accepts an
// instance of `URI` that is used to resolve paths during the process
function PackageDocumentParser(bookRoot, publicationFetcher) {

  var _packageFetcher = publicationFetcher;
  var _deferredXmlDom = $.Deferred();
  var _xmlDom;

  function onError(error) {
    if (error) {
      if (error.message) {
        console.error(error.message);
      }
      if (error.stack) {
        console.error(error.stack);
      }
    }
  }

  publicationFetcher.getPackageDom(function(packageDom) {
    _xmlDom = packageDom;
    _deferredXmlDom.resolve(packageDom);
  }, onError);

  function fillSmilData(packageDocument, callback) {

    var smilParser = new SmilDocumentParser(packageDocument, publicationFetcher);

    smilParser.fillSmilData(function() {

      // return the parse result
      callback(packageDocument);
    });

  }

  // Parse an XML package document into a javascript object
  this.parse = function(callback) {

    _deferredXmlDom.done(function(xmlDom) {
      var metadata = getMetadata(xmlDom);

      var spineElem = xmlDom.getElementsByTagNameNS("*", "spine")[0];
      var page_prog_dir = getElemAttr(xmlDom, 'spine', "page-progression-direction");

      // TODO: Bindings are unused
      var bindings = getJsonBindings(xmlDom);

      var manifest = new Manifest(getJsonManifest(xmlDom));
      var spine = getJsonSpine(xmlDom, manifest, metadata);

      // try to find a cover image
      var cover = getCoverHref(xmlDom);
      if (cover) {
        metadata.cover_href = cover;
      }

      $.when(updateMetadataWithIBookProperties(metadata)).then(function() {

        _packageFetcher.setPackageMetadata(metadata, function() {
          var packageDocument = new PackageDocument(publicationFetcher.getPackageUrl(),
            publicationFetcher, metadata, spine, manifest);

          packageDocument.setPageProgressionDirection(page_prog_dir);
          fillSmilData(packageDocument, callback);
        });
      });

    });
  };

  function updateMetadataWithIBookProperties(metadata) {

    var dff = $.Deferred();

    //if layout not set
    if (!metadata.rendition_layout) {
      var pathToIBooksSpecificXml = "/META-INF/com.apple.ibooks.display-options.xml";

      publicationFetcher.relativeToPackageFetchFileContents(pathToIBooksSpecificXml, 'text', function(ibookPropText) {
        if (ibookPropText) {
          var parser = new MarkupParser();
          var propModel = parser.parseXml(ibookPropText);
          var fixLayoutProp = $("option[name=fixed-layout]", propModel)[0];
          if (fixLayoutProp) {
            var fixLayoutVal = $(fixLayoutProp).text();
            if (fixLayoutVal === "true") {
              metadata.rendition_layout = "pre-paginated";
              console.log("using com.apple.ibooks.display-options.xml fixed-layout property");
            }
          }
        }

        dff.resolve();

      }, function(err) {

        console.log("com.apple.ibooks.display-options.xml not found");
        dff.resolve();
      });
    } else {
      dff.resolve();
    }

    return dff.promise();
  }


  function getJsonSpine(xmlDom, manifest, metadata) {

    var $spineElements;
    var jsonSpine = [];

    $spineElements = $(findXmlElemByLocalNameAnyNS(xmlDom, "spine")).children();
    $.each($spineElements, function(spineElementIndex, currSpineElement) {

      var $currSpineElement = $(currSpineElement);
      var idref = $currSpineElement.attr("idref") ? $currSpineElement.attr("idref") : "";
      var manifestItem = manifest.getManifestItemByIdref(idref);

      var id = $currSpineElement.attr("id");
      var viewport = undefined;
      _.each(metadata.rendition_viewports, function(vp) {
        if (vp.refines == id) {
          viewport = vp.viewport;
          return true; // break
        }
      });

      var spineItem = {
        rendition_viewport: viewport,
        idref: idref,
        href: manifestItem.href,
        manifest_id: manifestItem.id,
        media_type: manifestItem.media_type,
        media_overlay_id: manifestItem.media_overlay_id,
        linear: $currSpineElement.attr("linear") ? $currSpineElement.attr("linear") : "",
        properties: $currSpineElement.attr("properties") ? $currSpineElement.attr("properties") : ""
      };

      var parsedProperties = parsePropertiesString(spineItem.properties);
      _.extend(spineItem, parsedProperties);

      jsonSpine.push(spineItem);
    });

    return jsonSpine;
  }

  function findXmlElemByLocalNameAnyNS(rootElement, localName, predicate) {
    var elements = rootElement.getElementsByTagNameNS("*", localName);
    if (predicate) {
      return _.find(elements, predicate);
    } else {
      return elements[0];
    }
  }

  function filterXmlElemsByLocalNameAnyNS(rootElement, localName, predicate) {
    var elements = rootElement.getElementsByTagNameNS("*", localName);
    return _.filter(elements, predicate);
  }

  function getElemText(rootElement, localName, predicate) {
    var foundElement = findXmlElemByLocalNameAnyNS(rootElement, localName, predicate);
    if (foundElement) {
      return foundElement.textContent;
    } else {
      return '';
    }
  }

  function getElemAttr(rootElement, localName, attrName, predicate) {
    var foundElement = findXmlElemByLocalNameAnyNS(rootElement, localName, predicate);
    if (foundElement) {
      return foundElement.getAttribute(attrName);
    } else {
      return '';
    }
  }

  function getMetaElemPropertyText(rootElement, attrPropertyValue) {

    var foundElement = findXmlElemByLocalNameAnyNS(rootElement, "meta", function(element) {
      return element.getAttribute("property") === attrPropertyValue;
    });

    if (foundElement) {
      return foundElement.textContent;
    } else {
      return '';
    }
  }


  function getMetadata(xmlDom) {

    var metadata = new Metadata();
    var metadataElem = findXmlElemByLocalNameAnyNS(xmlDom, "metadata");
    var packageElem = findXmlElemByLocalNameAnyNS(xmlDom, "package");
    var spineElem = findXmlElemByLocalNameAnyNS(xmlDom, "spine");


    metadata.author = getElemText(metadataElem, "creator");
    metadata.description = getElemText(metadataElem, "description");
    metadata.epub_version =
      packageElem.getAttribute("version") ? packageElem.getAttribute("version") : "";
    metadata.id = getElemText(metadataElem, "identifier");
    metadata.language = getElemText(metadataElem, "language");
    metadata.modified_date = getMetaElemPropertyText(metadataElem, "dcterms:modified");
    metadata.ncx = spineElem.getAttribute("toc") ? spineElem.getAttribute("toc") : "";
    metadata.pubdate = getElemText(metadataElem, "date");
    metadata.publisher = getElemText(metadataElem, "publisher");
    metadata.rights = getElemText(metadataElem, "rights");
    metadata.title = getElemText(metadataElem, "title");

    metadata.rendition_orientation = getMetaElemPropertyText(metadataElem, "rendition:orientation");
    metadata.rendition_layout = getMetaElemPropertyText(metadataElem, "rendition:layout");
    metadata.rendition_spread = getMetaElemPropertyText(metadataElem, "rendition:spread");
    metadata.rendition_flow = getMetaElemPropertyText(metadataElem, "rendition:flow");






    //http://www.idpf.org/epub/301/spec/epub-publications.html#fxl-property-viewport

    //metadata.rendition_viewport = getMetaElemPropertyText(metadataElem, "rendition:viewport");
    metadata.rendition_viewport = getElemText(metadataElem, "meta", function(element) {
      return element.getAttribute("property") === "rendition:viewport" && !element.hasAttribute("refines")
    });

    var viewports = [];
    var viewportMetaElems = filterXmlElemsByLocalNameAnyNS(metadataElem, "meta", function(element) {
      return element.getAttribute("property") === "rendition:viewport" && element.hasAttribute("refines");
    });
    _.each(viewportMetaElems, function(currItem) {
      var id = currItem.getAttribute("refines");
      if (id) {
        var hash = id.indexOf('#');
        if (hash >= 0) {
          var start = hash + 1;
          var end = id.length - 1;
          id = id.substr(start, end);
        }
        id = id.trim();
      }

      var vp = {
        refines: id,
        viewport: currItem.textContent
      };
      viewports.push(vp);
    });

    metadata.rendition_viewports = viewports;






    // Media part
    metadata.mediaItems = [];

    var overlayElems = filterXmlElemsByLocalNameAnyNS(metadataElem, "meta", function(element) {
      return element.getAttribute("property") === "media:duration" && element.hasAttribute("refines");
    });

    _.each(overlayElems, function(currItem) {
      metadata.mediaItems.push({
        refines: currItem.getAttribute("refines"),
        duration: SmilDocumentParser.resolveClockValue(currItem.textContent)
      });
    });

    metadata.media_overlay = {
      duration: SmilDocumentParser.resolveClockValue(
        getElemText(metadataElem, "meta", function(element) {
          return element.getAttribute("property") === "media:duration" && !element.hasAttribute("refines")
        })
      ),
      narrator: getMetaElemPropertyText(metadataElem, "media:narrator"),
      activeClass: getMetaElemPropertyText(metadataElem, "media:active-class"),
      playbackActiveClass: getMetaElemPropertyText(metadataElem, "media:playback-active-class"),
      smil_models: [],
      skippables: ["sidebar", "practice", "marginalia", "annotation", "help", "note", "footnote", "rearnote",
        "table", "table-row", "table-cell", "list", "list-item", "pagebreak"
      ],
      escapables: ["sidebar", "bibliography", "toc", "loi", "appendix", "landmarks", "lot", "index",
        "colophon", "epigraph", "conclusion", "afterword", "warning", "epilogue", "foreword",
        "introduction", "prologue", "preface", "preamble", "notice", "errata", "copyright-page",
        "acknowledgments", "other-credits", "titlepage", "imprimatur", "contributors", "halftitlepage",
        "dedication", "help", "annotation", "marginalia", "practice", "note", "footnote", "rearnote",
        "footnotes", "rearnotes", "bridgehead", "page-list", "table", "table-row", "table-cell", "list",
        "list-item", "glossary"
      ]
    };

    return metadata;
  }

  function getJsonManifest(xmlDom) {

    var $manifestItems = $(findXmlElemByLocalNameAnyNS(xmlDom, "manifest")).children();
    var jsonManifest = [];

    $.each($manifestItems, function(manifestElementIndex, currManifestElement) {

      var $currManifestElement = $(currManifestElement);
      var currManifestElementHref = $currManifestElement.attr("href") ? $currManifestElement.attr("href") :
        "";
      var manifestItem = {

        href: currManifestElementHref,
        id: $currManifestElement.attr("id") ? $currManifestElement.attr("id") : "",
        media_overlay_id: $currManifestElement.attr("media-overlay") ?
          $currManifestElement.attr("media-overlay") : "",
        media_type: $currManifestElement.attr("media-type") ? $currManifestElement.attr("media-type") : "",
        properties: $currManifestElement.attr("properties") ? $currManifestElement.attr("properties") : ""
      };
      // console.log('pushing manifest item to JSON manifest. currManifestElementHref: [' + currManifestElementHref + 
      //     '], manifestItem.href: [' + manifestItem.href +
      //     '], manifestItem:');
      // console.log(manifestItem);
      jsonManifest.push(manifestItem);
    });

    return jsonManifest;
  }

  function getJsonBindings(xmlDom) {

    var $bindings = $(findXmlElemByLocalNameAnyNS(xmlDom, "bindings")).children();
    var jsonBindings = [];

    $.each($bindings, function(bindingElementIndex, currBindingElement) {

      var $currBindingElement = $(currBindingElement);
      var binding = {

        handler: $currBindingElement.attr("handler") ? $currBindingElement.attr("handler") : "",
        media_type: $currBindingElement.attr("media-type") ? $currBindingElement.attr("media-type") : ""
      };

      jsonBindings.push(binding);
    });

    return jsonBindings;
  }

  function getCoverHref(xmlDom) {

    var manifest;
    var $imageNode;
    manifest = findXmlElemByLocalNameAnyNS(xmlDom, "manifest");

    // epub3 spec for a cover image is like this:
    /*<item properties="cover-image" id="ci" href="cover.svg" media-type="image/svg+xml" />*/
    $imageNode = $(findXmlElemByLocalNameAnyNS(manifest, "item", function(element) {
      var attr = element.getAttribute("properties");
      return attr && _.contains(attr.split(" "), "cover-image");
    }));
    if ($imageNode.length === 1 && $imageNode.attr("href")) {
      return $imageNode.attr("href");
    }

    // some epub2's cover image is like this:
    /*<meta name="cover" content="cover-image-item-id" />*/
    var metaNode = $(findXmlElemByLocalNameAnyNS(xmlDom, "meta", function(element) {
      return element.getAttribute("name") === "cover";
    }));
    var contentAttr = metaNode.attr("content");
    if (metaNode.length === 1 && contentAttr) {
      $imageNode = $(findXmlElemByLocalNameAnyNS(manifest, "item", function(element) {
        return element.getAttribute("id") === contentAttr;
      }));
      if ($imageNode.length === 1 && $imageNode.attr("href")) {
        return $imageNode.attr("href");
      }
    }

    // that didn't seem to work so, it think epub2 just uses item with id=cover
    $imageNode = $(findXmlElemByLocalNameAnyNS(manifest, "item", function(element) {
      return element.getAttribute("id") === "cover";
    }));
    if ($imageNode.length === 1 && $imageNode.attr("href")) {
      return $imageNode.attr("href");
    }

    // seems like there isn't one, thats ok...
    return null;
  }

  function parsePropertiesString(str) {
    var properties = {};
    var allPropStrs = str.split(" "); // split it on white space
    for (var i = 0; i < allPropStrs.length; i++) {

      //ReadiumSDK.Models.SpineItem.RENDITION_ORIENTATION_LANDSCAPE
      if (allPropStrs[i] === "rendition:orientation-landscape") properties.rendition_orientation = "landscape";

      //ReadiumSDK.Models.SpineItem.RENDITION_ORIENTATION_PORTRAIT
      if (allPropStrs[i] === "rendition:orientation-portrait") properties.rendition_orientation = "portrait";

      //ReadiumSDK.Models.SpineItem.RENDITION_ORIENTATION_AUTO
      if (allPropStrs[i] === "rendition:orientation-auto") properties.rendition_orientation = "auto";


      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_NONE
      if (allPropStrs[i] === "rendition:spread-none") properties.rendition_spread = "none";

      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_LANDSCAPE
      if (allPropStrs[i] === "rendition:spread-landscape") properties.rendition_spread = "landscape";

      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_PORTRAIT
      if (allPropStrs[i] === "rendition:spread-portrait") properties.rendition_spread = "portrait";

      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_BOTH
      if (allPropStrs[i] === "rendition:spread-both") properties.rendition_spread = "both";

      //ReadiumSDK.Models.SpineItem.RENDITION_SPREAD_AUTO
      if (allPropStrs[i] === "rendition:spread-auto") properties.rendition_spread = "auto";


      //ReadiumSDK.Models.SpineItem.RENDITION_FLOW_PAGINATED
      if (allPropStrs[i] === "rendition:flow-paginated") properties.rendition_flow = "paginated";

      //ReadiumSDK.Models.SpineItem.RENDITION_FLOW_SCROLLED_CONTINUOUS
      if (allPropStrs[i] === "rendition:flow-scrolled-continuous") properties.rendition_flow = "scrolled-continuous";

      //ReadiumSDK.Models.SpineItem.RENDITION_FLOW_SCROLLED_DOC
      if (allPropStrs[i] === "rendition:flow-scrolled-doc") properties.rendition_flow = "scrolled-doc";

      //ReadiumSDK.Models.SpineItem.RENDITION_FLOW_AUTO
      if (allPropStrs[i] === "rendition:flow-auto") properties.rendition_flow = "auto";



      //ReadiumSDK.Models.SpineItem.SPREAD_CENTER
      if (allPropStrs[i] === "rendition:page-spread-center") properties.page_spread = "page-spread-center";

      //ReadiumSDK.Models.SpineItem.SPREAD_LEFT
      if (allPropStrs[i] === "page-spread-left") properties.page_spread = "page-spread-left";

      //ReadiumSDK.Models.SpineItem.SPREAD_RIGHT
      if (allPropStrs[i] === "page-spread-right") properties.page_spread = "page-spread-right";

      //ReadiumSDK.Models.SpineItem.RENDITION_LAYOUT_REFLOWABLE
      if (allPropStrs[i] === "rendition:layout-reflowable") {
        properties.fixed_flow = false; // TODO: only used in spec tests!
        properties.rendition_layout = "reflowable";
      }

      //ReadiumSDK.Models.SpineItem.RENDITION_LAYOUT_PREPAGINATED
      if (allPropStrs[i] === "rendition:layout-pre-paginated") {
        properties.fixed_flow = true; // TODO: only used in spec tests!
        properties.rendition_layout = "pre-paginated";
      }
    }
    return properties;
  }

};

module.exports = PackageDocumentParser;
},{"../epub-fetch/markup-parser":"/Users/craverod/opensource/readium-js/src/epub-fetch/markup-parser.js","./manifest":"/Users/craverod/opensource/readium-js/src/epub/manifest.js","./metadata":"/Users/craverod/opensource/readium-js/src/epub/metadata.js","./package-document":"/Users/craverod/opensource/readium-js/src/epub/package-document.js","./smil-document-parser":"/Users/craverod/opensource/readium-js/src/epub/smil-document-parser.js","URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub/package-document.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.


var $ = require('jquery')
var _ = require('underscore')
var Backbone = require('backbone')
var URI = require('URIjs')

// Description: This model provides an interface for navigating an EPUB's package document
function PackageDocument(packageDocumentURL, resourceFetcher, metadata, spine, manifest) {

  var _page_prog_dir;

  this.manifest = manifest;

  this.getSharedJsPackageData = function() {

    var packageDocRoot = packageDocumentURL.substr(0, packageDocumentURL.lastIndexOf("/"));
    return {
      rootUrl: packageDocRoot,
      rendition_viewport: metadata.rendition_viewport,
      rendition_layout: metadata.rendition_layout,
      rendition_orientation: metadata.rendition_orientation,
      rendition_flow: metadata.rendition_flow,
      rendition_spread: metadata.rendition_spread,
      media_overlay: metadata.media_overlay,
      spine: {
        direction: this.getPageProgressionDirection(),
        items: spine
      }
    };
  };

  /**
   * Get spine item data in readium-shared-js accepted format.
   * @param spineIndex the index of the item within the spine
   * @returns Spine item data in readium-shared-js accepted format.
   */
  this.getSpineItem = function(spineIndex) {
    var spineItem = spine[spineIndex];
    return spineItem;
  };

  this.setPageProgressionDirection = function(page_prog_dir) {
    _page_prog_dir = page_prog_dir;
  };


  this.getPageProgressionDirection = function() {
    if (_page_prog_dir === "rtl") {
      return "rtl";
    } else if (_page_prog_dir === "default") {
      return "default";
    } else {
      return "ltr";
    }
  };

  this.spineLength = function() {
    return spine.length;
  };

  this.getMetadata = function() {
    return metadata;
  };

  this.getToc = function() {
    var item = getTocItem();
    if (item) {
      return item.href;
    }
    return null;
  };

  this.getTocText = function(callback) {
    var toc = this.getToc();

    resourceFetcher.relativeToPackageFetchFileContents(toc, 'text', function(tocDocumentText) {
      callback(tocDocumentText)
    }, function(err) {
      console.error('ERROR fetching TOC from [' + toc + ']:');
      console.error(err);
      callback(undefined);
    });
  };

  this.getTocDom = function(callback) {

    this.getTocText(function(tocText) {
      if (typeof tocText === 'string') {
        var tocDom = (new DOMParser()).parseFromString(tocText, "text/xml");
        callback(tocDom);
      } else {
        callback(undefined);
      }
    });
  };

  // Unused?
  this.generateTocListDOM = function(callback) {
    var that = this;
    this.getTocDom(function(tocDom) {
      if (tocDom) {
        if (tocIsNcx()) {
          var $ncxOrderedList;
          $ncxOrderedList = getNcxOrderedList($("navMap", tocDom));
          callback($ncxOrderedList[0]);
        } else {
          var packageDocumentAbsoluteURL = new URI(packageDocumentURL).absoluteTo(document.URL);
          var tocDocumentAbsoluteURL = new URI(that.getToc()).absoluteTo(packageDocumentAbsoluteURL);
          // add a BASE tag to change the TOC document's baseURI.
          var oldBaseTag = $(tocDom).remove('base');
          var newBaseTag = $('<base></base>');
          $(newBaseTag).attr('href', tocDocumentAbsoluteURL);
          $(tocDom).find('head').append(newBaseTag);
          // TODO: fix TOC hrefs both for exploded in zipped EPUBs
          callback(tocDom);
        }
      } else {
        callback(undefined);
      }
    });
  };

  function tocIsNcx() {

    var tocItem = getTocItem();
    var contentDocURI = tocItem.href;
    var fileExtension = contentDocURI.substr(contentDocURI.lastIndexOf('.') + 1);

    return fileExtension.trim().toLowerCase() === "ncx";
  }

  // ----------------------- PRIVATE HELPERS -------------------------------- //

  function getNcxOrderedList($navMapDOM) {

    var $ol = $("<ol></ol>");
    $.each($navMapDOM.children("navPoint"), function(index, navPoint) {
      addNavPointElements($(navPoint), $ol);
    });
    return $ol;
  }

  // Description: Constructs an html representation of NCX navPoints, based on an object of navPoint information
  // Rationale: This is a recursive method, as NCX navPoint elements can nest 0 or more of themselves as children
  function addNavPointElements($navPointDOM, $ol) {

    // Add the current navPoint element to the TOC html
    var navText = $navPointDOM.children("navLabel").text().trim();
    var navHref = $navPointDOM.children("content").attr("src");
    var $navPointLi = $('<li class="nav-elem"></li>').append(
      $('<a></a>', {
        href: navHref,
        text: navText
      })
    );

    // Append nav point info
    $ol.append($navPointLi);

    // Append ordered list of nav points
    if ($navPointDOM.children("navPoint").length > 0) {

      var $newLi = $("<li></li>");
      var $newOl = $("<ol></ol>");
      $.each($navPointDOM.children("navPoint"), function(navIndex, navPoint) {
        $newOl.append(addNavPointElements($(navPoint), $newOl));
      });

      $newLi.append($newOl);
      $ol.append($newLi);
    }
  }

  function getTocItem() {

    var item = manifest.getNavItem();
    if (item) {
      return item;
    }

    var spine_id = metadata.ncx;
    if (spine_id && spine_id.length > 0) {
      return manifest.getManifestItemByIdref(spine_id);
    }

    return null;
  }

};

module.exports = PackageDocument;
},{"URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/epub/smil-document-parser.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery')
var _ = require('underscore')

// `SmilDocumentParser` is used to parse the xml of an epub package
// document and build a javascript object. The constructor accepts an
// instance of `URI` that is used to resolve paths during the process
function SmilDocumentParser(packageDocument, publicationFetcher) {

  // Parse a media overlay manifest item XML
  this.parse = function(spineItem, manifestItemSMIL, smilJson, deferred, callback, errorCallback) {
    var that = this;
    publicationFetcher.getRelativeXmlFileDom(manifestItemSMIL.href, function(xmlDom) {

      var smil = $("smil", xmlDom)[0];
      smilJson.smilVersion = smil.getAttribute('version');

      //var body = $("body", xmlDom)[0];
      smilJson.children = that.getChildren(smil);
      smilJson.href = manifestItemSMIL.href;
      smilJson.id = manifestItemSMIL.id;
      smilJson.spineItemId = spineItem.idref;

      var mediaItem = packageDocument.getMetadata().getMediaItemByRefinesId(manifestItemSMIL.id);
      if (mediaItem) {
        smilJson.duration = mediaItem.duration;
      }

      callback(deferred, smilJson);
    }, function(fetchError) {
      errorCallback(deferred, fetchError);
    });
  };

  var safeCopyProperty = function(property, fromNode, toItem, isRequired, defaultValue) {
    var propParse = property.split(':');
    var destProperty = propParse[propParse.length - 1];

    if (destProperty === "type") {
      destProperty = "epubtype";
    }

    if (fromNode.getAttribute(property) != undefined) {
      toItem[destProperty] = fromNode.getAttribute(property);
    } else if (isRequired) {
      if (defaultValue !== undefined) {
        toItem[destProperty] = defaultValue;
      } else {
        console.log("Required property " + property + " not found in smil node " + fromNode.nodeName);
      }
    }
  };

  this.getChildren = function(element) {
    var that = this;
    var children = [];

    $.each(element.childNodes, function(elementIndex, currElement) {

      if (currElement.nodeType === 1) { // ELEMENT
        var item = that.createItemFromElement(currElement);
        if (item) {
          children.push(item);
        }
      }
    });

    return children;
  }

  this.createItemFromElement = function(element) {
    var that = this;

    var item = {};
    item.nodeType = element.nodeName;

    var isBody = false;
    if (item.nodeType === "body") {
      isBody = true;
      item.nodeType = "seq";
    }

    if (item.nodeType === "seq") {

      safeCopyProperty("epub:textref", element, item, !isBody);
      safeCopyProperty("id", element, item);
      safeCopyProperty("epub:type", element, item);

      item.children = that.getChildren(element);

    } else if (item.nodeType === "par") {

      safeCopyProperty("id", element, item);
      safeCopyProperty("epub:type", element, item);

      item.children = that.getChildren(element);

    } else if (item.nodeType === "text") {

      safeCopyProperty("src", element, item, true);
      var srcParts = item.src.split('#');
      item.srcFile = srcParts[0];
      item.srcFragmentId = (srcParts.length === 2) ? srcParts[1] : "";
      safeCopyProperty("id", element, item);
      // safeCopyProperty("epub:textref", element, item);

    } else if (item.nodeType === "audio") {
      safeCopyProperty("src", element, item, true);
      safeCopyProperty("id", element, item);
      item.clipBegin = SmilDocumentParser.resolveClockValue(element.getAttribute("clipBegin"));
      item.clipEnd = SmilDocumentParser.resolveClockValue(element.getAttribute("clipEnd"));
    } else {
      return undefined;
    }

    return item;
  }

  function makeFakeSmilJson(spineItem) {
    return {
      id: "",
      href: "",
      spineItemId: spineItem.idref,
      children: [{
        nodeType: 'seq',
        textref: spineItem.href,
        children: [{
          nodeType: 'par',
          children: [{
            nodeType: 'text',
            src: spineItem.href,
            srcFile: spineItem.href,
            srcFragmentId: ""
          }]
        }]
      }]
    };
  }

  this.fillSmilData = function(callback) {
    var that = this;

    if (packageDocument.spineLength() <= 0) {
      callback();
      return;
    }

    var allFakeSmil = true;
    var mo_map = [];
    var parsingDeferreds = [];

    for (var spineIdx = 0; spineIdx < packageDocument.spineLength(); spineIdx++) {
      var spineItem = packageDocument.getSpineItem(spineIdx);

      if (spineItem.media_overlay_id) {
        var manifestItemSMIL = packageDocument.manifest.getManifestItemByIdref(spineItem.media_overlay_id);

        if (!manifestItemSMIL) {
          console.error("Cannot find SMIL manifest item for spine/manifest item?! " + spineItem.media_overlay_id);
          continue;
        }
        //ASSERT manifestItemSMIL.media_type === "application/smil+xml"

        var parsingDeferred = $.Deferred();
        parsingDeferred.media_overlay_id = spineItem.media_overlay_id;
        parsingDeferreds.push(parsingDeferred);
        var smilJson = {};

        // Push the holder object onto the map early so that order isn't disturbed by asynchronicity:
        mo_map.push(smilJson);

        // The local parsingDeferred variable will have its value replaced on next loop iteration.
        // Must pass the parsingDeferred through async calls as an argument and it arrives back as myDeferred.
        that.parse(spineItem, manifestItemSMIL, smilJson, parsingDeferred, function(myDeferred, smilJson) {
          allFakeSmil = false;
          myDeferred.resolve();
        }, function(myDeferred, parseError) {
          console.log('Error when parsing SMIL manifest item ' + manifestItemSMIL.href + ':');
          console.log(parseError);
          myDeferred.resolve();
        });
      } else {
        mo_map.push(makeFakeSmilJson(spineItem));
      }
    }

    $.when.apply($, parsingDeferreds).done(function() {
      packageDocument.getMetadata().setMoMap(mo_map);
      if (allFakeSmil) {
        console.log("No Media Overlays");
        packageDocument.getMetadata().setMoMap([]);
      }
      callback();
    });
  }
};

// parse the timestamp and return the value in seconds
// supports this syntax:
// http://idpf.org/epub/30/spec/epub30-mediaoverlays.html#app-clock-examples
SmilDocumentParser.resolveClockValue = function(value) {
  if (!value) return 0;

  var hours = 0;
  var mins = 0;
  var secs = 0;

  if (value.indexOf("min") != -1) {
    mins = parseFloat(value.substr(0, value.indexOf("min")));
  } else if (value.indexOf("ms") != -1) {
    var ms = parseFloat(value.substr(0, value.indexOf("ms")));
    secs = ms / 1000;
  } else if (value.indexOf("s") != -1) {
    secs = parseFloat(value.substr(0, value.indexOf("s")));
  } else if (value.indexOf("h") != -1) {
    hours = parseFloat(value.substr(0, value.indexOf("h")));
  } else {
    // parse as hh:mm:ss.fraction
    // this also works for seconds-only, e.g. 12.345
    var arr = value.split(":");
    secs = parseFloat(arr.pop());
    if (arr.length > 0) {
      mins = parseFloat(arr.pop());
      if (arr.length > 0) {
        hours = parseFloat(arr.pop());
      }
    }
  }
  var total = hours * 3600 + mins * 60 + secs;
  return total;
}

module.exports = SmilDocumentParser;
},{"jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/index.js":[function(require,module,exports){
module.exports = {
  Reader: require('./reader'),
  SDK: require('./sdk')
}
},{"./reader":"/Users/craverod/opensource/readium-js/src/reader.js","./sdk":"/Users/craverod/opensource/readium-js/src/sdk/index.js"}],"/Users/craverod/opensource/readium-js/src/reader.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.

var $ = require('jquery')
var SDK = require('./sdk')
var PackageParser = require('./epub/package-document-parser')
var PublicationFetcher = require('./epub-fetch/publication-fetcher')

if (window) {
  //polyfill to support Safari 6
  if ('URL' in window === false) {
    if ('webkitURL' in window === false) {
      throw Error('Browser does not support window.URL');
    }

    window.URL = window.webkitURL;
  }
}

function Reader(readiumOptions, readerOptions) {

  var self = this;

  var _currentPublicationFetcher;

  var jsLibRoot = readiumOptions.jsLibRoot;

  if (!readiumOptions.useSimpleLoader) {
    // TODO We're not bundling IframeZipLoader
    readerOptions.iframeLoader = new IframeZipLoader(SDK, function() {
      return _currentPublicationFetcher;
    }, {
      mathJaxUrl: readerOptions.mathJaxUrl
    });;
  } else {
    readerOptions.iframeLoader = new SDK.Views.IFrameLoader();
  }


  this.reader = new SDK.Views.ReaderView(readerOptions);

  this.openPackageDocument = function(bookRoot, callback, openPageRequest) {

    _currentPublicationFetcher = new PublicationFetcher(bookRoot, jsLibRoot);

    _currentPublicationFetcher.initialize(function() {

      var _packageParser = new PackageParser(bookRoot, _currentPublicationFetcher);

      _packageParser.parse(function(packageDocument) {
        var openBookOptions = readiumOptions.openBookOptions || {};
        var openBookData = $.extend(packageDocument.getSharedJsPackageData(), openBookOptions);

        if (openPageRequest) {
          openBookData.openPageRequest = openPageRequest;
        }
        self.reader.openBook(openBookData);

        var options = {
          packageDocumentUrl: _currentPublicationFetcher.getPackageUrl(),
          metadata: packageDocument.getMetadata()
        };

        if (callback) {
          // gives caller access to document metadata like the table of contents
          callback(packageDocument, options);
        }
      });
    });
  }

  //we need global access to the reader object for automation test being able to call it's APIs
  SDK.reader = this.reader;

  SDK.trigger(SDK.Events.READER_INITIALIZED, this.reader);
};

Reader.version = require('../package.json').version;

module.exports = Reader;
},{"../package.json":"/Users/craverod/opensource/readium-js/package.json","./epub-fetch/publication-fetcher":"/Users/craverod/opensource/readium-js/src/epub-fetch/publication-fetcher.js","./epub/package-document-parser":"/Users/craverod/opensource/readium-js/src/epub/package-document-parser.js","./sdk":"/Users/craverod/opensource/readium-js/src/sdk/index.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/src/sdk/collections/style.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var Style = require('../models/style')

/**
 *
 * @constructor
 */
function StyleCollection() {

  var _styles = [];

  this.clear = function() {
    _styles.length = 0;

  };

  this.findStyle = function(selector) {

    var count = _styles.length;
    for (var i = 0; i < count; i++) {
      if (_styles[i].selector === selector) {
        return _styles[i];
      }
    }

    return undefined;
  };

  this.addStyle = function(selector, declarations) {

    var style = this.findStyle(selector);

    if (style) {
      style.setDeclarations(declarations);
    } else {
      style = new Style(selector, declarations);
      _styles.push(style);
    }

    return style;
  };

  this.removeStyle = function(selector) {

    var count = _styles.length;

    for (var i = 0; i < count; i++) {

      if (_styles[i].selector === selector) {
        _styles.splice(i, 1);
        return;
      }
    }
  };

  this.getStyles = function() {
    return _styles;
  };

  this.resetStyleValues = function() {

    var count = _styles.length;

    for (var i = 0; i < count; i++) {

      var style = _styles[i];
      var declarations = style.declarations;

      for (var prop in declarations) {
        if (declarations.hasOwnProperty(prop)) {
          declarations[prop] = '';
        }
      }
    }
  }

};

module.exports = StyleCollection
},{"../models/style":"/Users/craverod/opensource/readium-js/src/sdk/models/style.js"}],"/Users/craverod/opensource/readium-js/src/sdk/events.js":[function(require,module,exports){
module.exports = {
  /**
   * @event
   */
  READER_INITIALIZED: "ReaderInitialized",
  /**
   * This gets triggered on every page turnover. It includes spine information and such.
   * @event
   */
  PAGINATION_CHANGED: "PaginationChanged",
  /**
   * @event
   */
  SETTINGS_APPLIED: "SettingsApplied",
  /**
   * @event
   */
  FXL_VIEW_RESIZED: "FXLViewResized",
  /**
   * @event
   */
  READER_VIEW_CREATED: "ReaderViewCreated",
  /**
   * @event
   */
  READER_VIEW_DESTROYED: "ReaderViewDestroyed",
  /**
   * @event
   */
  CONTENT_DOCUMENT_LOAD_START: "ContentDocumentLoadStart",
  /**
   * @event
   */
  CONTENT_DOCUMENT_LOADED: "ContentDocumentLoaded",
  /**
   * @event
   */
  MEDIA_OVERLAY_STATUS_CHANGED: "MediaOverlayStatusChanged",
  /**
   * @event
   */
  MEDIA_OVERLAY_TTS_SPEAK: "MediaOverlayTTSSpeak",
  /**
   * @event
   */
  MEDIA_OVERLAY_TTS_STOP: "MediaOverlayTTSStop"
}
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/begins-with.js":[function(require,module,exports){
/**
 *
 * @param str
 * @param suffix
 * @returns {boolean}
 * @static
 */
function BeginsWith(str, suffix) {

  return str.indexOf(suffix) === 0;
};

module.exports = BeginsWith
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/css-transform-string.js":[function(require,module,exports){
//scale, left, top, angle, origin
function CSSTransformString(options) {
  var enable3D = options.enable3D ? true : false;

  var translate, scale, rotation,
    origin = options.origin;

  if (options.left || options.top) {
    var left = options.left || 0,
      top = options.top || 0;

    translate = enable3D ? ("translate3D(" + left + "px, " + top + "px, 0)") : ("translate(" + left + "px, " + top + "px)");
  }
  if (options.scale) {
    scale = enable3D ? ("scale3D(" + options.scale + ", " + options.scale + ", 0)") : ("scale(" + options.scale + ")");
  }
  if (options.angle) {
    rotation = enable3D ? ("rotate3D(0,0," + options.angle + "deg)") : ("rotate(" + options.angle + "deg)");
  }

  if (!(translate || scale || rotation)) {
    return {};
  }

  var transformString = (translate && scale) ? (translate + " " + scale) : (translate ? translate : scale); // the order is important!
  if (rotation) {
    transformString = transformString + " " + rotation;
    //transformString = rotation + " " + transformString;
  }

  var css = {};
  css['transform'] = transformString;
  css['transform-origin'] = origin ? origin : (enable3D ? '0 0 0' : '0 0');
  return css;
};

module.exports = CSSTransformString
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/css-transition.js":[function(require,module,exports){
var _ = require('underscore')

function CSSTransition($el, trans) {

  // does not work!
  //$el.css('transition', trans);

  var css = {};
  // empty '' prefix FIRST!
  _.each(['', '-webkit-', '-moz-', '-ms-'], function(prefix) {
    css[prefix + 'transition'] = prefix + trans;
  });
  $el.css(css);
}

module.exports = CSSTransition
},{"underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/deduce-synthetic-spread.js":[function(require,module,exports){
var getOrientation = require('./get-orientation')
var SpineItemConstants = require('../models/spine-item-constants')
var ViewsConstants = require('../views/constants')

/**
 *
 * @param $viewport
 * @param spineItem
 * @param settings
 * @returns {boolean}
 */
//Based on https://docs.google.com/spreadsheet/ccc?key=0AoPMUkQhc4wcdDI0anFvWm96N0xRT184ZE96MXFRdFE&usp=drive_web#gid=0 doc
// Returns falsy and truthy
// true and false mean that the synthetic-spread or single-page is "forced" (to be respected whatever the external conditions)
// 1 and 0 mean that the synthetic-spread or single-page is "not forced" (is allowed to be overriden by external conditions, such as optimum column width / text line number of characters, etc.)
function deduceSyntheticSpread($viewport, spineItem, settings) {

  if (!$viewport || $viewport.length == 0) {
    return 0; // non-forced
  }

  //http://www.idpf.org/epub/fxl/#property-spread-values

  var rendition_spread = spineItem ? spineItem.getRenditionSpread() : undefined;

  if (rendition_spread === SpineItemConstants.RENDITION_SPREAD_NONE) {
    return false; // forced

    //"Reading Systems must not incorporate this spine item in a synthetic spread."
  }

  if (settings.syntheticSpread == "double") {
    return true; // forced
  } else if (settings.syntheticSpread == "single") {
    return false; // forced
  }

  if (!spineItem) {
    return 0; // non-forced
  }

  if (rendition_spread === SpineItemConstants.RENDITION_SPREAD_BOTH) {
    return true; // forced

    //"Reading Systems should incorporate this spine item in a synthetic spread regardless of device orientation."
  }

  var orientation = getOrientation($viewport);

  if (rendition_spread === SpineItemConstants.RENDITION_SPREAD_LANDSCAPE) {
    return orientation === ViewsConstants.ORIENTATION_LANDSCAPE; // forced

    //"Reading Systems should incorporate this spine item in a synthetic spread only when the device is in landscape orientation."
  }

  if (rendition_spread === SpineItemConstants.RENDITION_SPREAD_PORTRAIT) {
    return orientation === ViewsConstants.ORIENTATION_PORTRAIT; // forced

    //"Reading Systems should incorporate this spine item in a synthetic spread only when the device is in portrait orientation."
  }

  if (!rendition_spread || rendition_spread === SpineItemConstants.RENDITION_SPREAD_AUTO) {
    // if no spread set in document and user didn't set in in setting we will do double for landscape
    var landscape = orientation === ViewsConstants.ORIENTATION_LANDSCAPE;
    return landscape ? 1 : 0; // non-forced

    //"Reading Systems may use synthetic spreads in specific or all device orientations as part of a display area utilization optimization process."
  }

  console.warn("Helpers.deduceSyntheticSpread: spread properties?!");
  return 0; // non-forced
};

module.exports = deduceSyntheticSpread
},{"../models/spine-item-constants":"/Users/craverod/opensource/readium-js/src/sdk/models/spine-item-constants.js","../views/constants":"/Users/craverod/opensource/readium-js/src/sdk/views/constants.js","./get-orientation":"/Users/craverod/opensource/readium-js/src/sdk/helpers/get-orientation.js"}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/ends-with.js":[function(require,module,exports){
/**
 *
 * @param str
 * @param suffix
 * @returns {boolean}
 * @static
 */
function EndsWith(str, suffix) {
  return str.indexOf(suffix, str.length - suffix.length) !== -1;
};

module.exports = EndsWith
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/escape-jquery-selector.js":[function(require,module,exports){
//TODO: consider using CSSOM escape() or polyfill
//https://github.com/mathiasbynens/CSS.escape/blob/master/css.escape.js
//http://mathiasbynens.be/notes/css-escapes
/**
 *
 * @param sel
 * @returns {string}
 */
function escapeJQuerySelector(sel) {
  //http://api.jquery.com/category/selectors/
  //!"#$%&'()*+,./:;<=>?@[\]^`{|}~
  // double backslash escape

  if (!sel) return undefined;

  var selector = sel.replace(/([;&,\.\+\*\~\?':"\!\^#$%@\[\]\(\)<=>\|\/\\{}`])/g, '\\$1');

  // if (selector !== sel)
  // {
  //     console.debug("---- SELECTOR ESCAPED");
  //     console.debug("1: " + sel);
  //     console.debug("2: " + selector);
  // }
  // else
  // {
  //     console.debug("---- SELECTOR OKAY: " + sel);
  // }

  return selector;
};
// TESTS BELOW ALL WORKING FINE :)
// (RegExp typos are hard to spot!)
// escapeSelector('!');
// escapeSelector('"');
// escapeSelector('#');
// escapeSelector('$');
// escapeSelector('%');
// escapeSelector('&');
// escapeSelector("'");
// escapeSelector('(');
// escapeSelector(')');
// escapeSelector('*');
// escapeSelector('+');
// escapeSelector(',');
// escapeSelector('.');
// escapeSelector('/');
// escapeSelector(':');
// escapeSelector(';');
// escapeSelector('<');
// escapeSelector('=');
// escapeSelector('>');
// escapeSelector('?');
// escapeSelector('@');
// escapeSelector('[');
// escapeSelector('\\');
// escapeSelector(']');
// escapeSelector('^');
// escapeSelector('`');
// escapeSelector('{');
// escapeSelector('|');
// escapeSelector('}');
// escapeSelector('~');

module.exports = escapeJQuerySelector
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/extended-throttle.js":[function(require,module,exports){
function extendedThrottle(startCb, tickCb, endCb, tickRate, waitThreshold, context) {
  if (!tickRate) tickRate = 250;
  if (!waitThreshold) waitThreshold = tickRate;

  var first = true,
    last,
    deferTimer;

  return function() {
    var ctx = context || this,
      now = (Date.now && Date.now()) || new Date().getTime(),
      args = arguments;

    if (!(last && now < last + tickRate)) {
      last = now;
      if (first) {
        startCb.apply(ctx, args);
        first = false;
      } else {
        tickCb.apply(ctx, args);
      }
    }

    clearTimeout(deferTimer);
    deferTimer = setTimeout(function() {
      last = now;
      first = true;
      endCb.apply(ctx, args);
    }, waitThreshold);
  };
};

module.exports = extendedThrottle
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/get-orientation.js":[function(require,module,exports){
var ViewsConstants = require('../views/constants')

/**
 *
 * @param $viewport
 * @returns {ReadiumSDK.Views.ORIENTATION_LANDSCAPE|ReadiumSDK.Views.ORIENTATION_PORTRAIT}
 */
function getOrientation($viewport) {

  var viewportWidth = $viewport.width();
  var viewportHeight = $viewport.height();

  if (!viewportWidth || !viewportHeight) {
    return undefined;
  }

  return viewportWidth >= viewportHeight ? ViewsConstants.ORIENTATION_LANDSCAPE : ViewsConstants.ORIENTATION_PORTRAIT;
};

module.exports = getOrientation
},{"../views/constants":"/Users/craverod/opensource/readium-js/src/sdk/views/constants.js"}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/index.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

module.exports = {
  BeginsWith: require('./begins-with'),
  CSSTransition: require('./css-transition'),
  CSSTransformString: require('./css-transform-string'),
  deduceSyntheticSpread: require('./deduce-synthetic-spread'),
  EndsWith: require('./ends-with'),
  escapeJQuerySelector: require('./escape-jquery-selector'),
  extendedThrottle: require('./extended-throttle'),
  getOrientation: require('./get-orientation'),
  isIframeAlive: require('./is-iframe-alive'),
  isRenditionSpreadPermittedForItem: require('./is-rendition-spread-permitted-for-item'),
  loadTemplate: require('./load-template'),
  Margins: require('./margins'),
  Rect: require('./rect'),
  RemoveFromString: require('./remove-from-string'),
  ResolveContentRef: require('./resolve-content-ref'),
  setStyles: require('./set-styles'),
  triggerLayout: require('./trigger-layout'),
  UpdateHtmlFontSize: require('./update-html-font-size')
}
},{"./begins-with":"/Users/craverod/opensource/readium-js/src/sdk/helpers/begins-with.js","./css-transform-string":"/Users/craverod/opensource/readium-js/src/sdk/helpers/css-transform-string.js","./css-transition":"/Users/craverod/opensource/readium-js/src/sdk/helpers/css-transition.js","./deduce-synthetic-spread":"/Users/craverod/opensource/readium-js/src/sdk/helpers/deduce-synthetic-spread.js","./ends-with":"/Users/craverod/opensource/readium-js/src/sdk/helpers/ends-with.js","./escape-jquery-selector":"/Users/craverod/opensource/readium-js/src/sdk/helpers/escape-jquery-selector.js","./extended-throttle":"/Users/craverod/opensource/readium-js/src/sdk/helpers/extended-throttle.js","./get-orientation":"/Users/craverod/opensource/readium-js/src/sdk/helpers/get-orientation.js","./is-iframe-alive":"/Users/craverod/opensource/readium-js/src/sdk/helpers/is-iframe-alive.js","./is-rendition-spread-permitted-for-item":"/Users/craverod/opensource/readium-js/src/sdk/helpers/is-rendition-spread-permitted-for-item.js","./load-template":"/Users/craverod/opensource/readium-js/src/sdk/helpers/load-template.js","./margins":"/Users/craverod/opensource/readium-js/src/sdk/helpers/margins.js","./rect":"/Users/craverod/opensource/readium-js/src/sdk/helpers/rect.js","./remove-from-string":"/Users/craverod/opensource/readium-js/src/sdk/helpers/remove-from-string.js","./resolve-content-ref":"/Users/craverod/opensource/readium-js/src/sdk/helpers/resolve-content-ref.js","./set-styles":"/Users/craverod/opensource/readium-js/src/sdk/helpers/set-styles.js","./trigger-layout":"/Users/craverod/opensource/readium-js/src/sdk/helpers/trigger-layout.js","./update-html-font-size":"/Users/craverod/opensource/readium-js/src/sdk/helpers/update-html-font-size.js"}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/is-iframe-alive.js":[function(require,module,exports){
/**
 *
 * @param iframe
 * @returns {boolean}
 */
function isIframeAlive(iframe) {
  var w = undefined;
  var d = undefined;
  try {
    w = iframe.contentWindow;
    d = iframe.contentDocument;
  } catch (ex) {
    console.error(ex);
    return false;
  }

  return w && d;
}

module.exports = isIframeAlive
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/is-rendition-spread-permitted-for-item.js":[function(require,module,exports){
var SpineItemConstants = require('../models/spine-item-constants')
var ViewsConstants = require('../views/constants')

/**
 *
 * @param item
 * @param orientation
 * @returns {boolean}
 */
function isRenditionSpreadPermittedForItem(item, orientation) {

  var rendition_spread = item.getRenditionSpread();

  return !rendition_spread || rendition_spread == SpineItemConstants.RENDITION_SPREAD_BOTH || rendition_spread == SpineItemConstants.RENDITION_SPREAD_AUTO || (rendition_spread == SpineItemConstants.RENDITION_SPREAD_LANDSCAPE && orientation == ViewsConstants.ORIENTATION_LANDSCAPE) || (rendition_spread == SpineItemConstants.RENDITION_SPREAD_PORTRAIT && orientation == ViewsConstants.ORIENTATION_PORTRAIT);
};

module.exports = isRenditionSpreadPermittedForItem
},{"../models/spine-item-constants":"/Users/craverod/opensource/readium-js/src/sdk/models/spine-item-constants.js","../views/constants":"/Users/craverod/opensource/readium-js/src/sdk/views/constants.js"}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/load-template.js":[function(require,module,exports){
/**
 *
 * @param name
 * @param params
 * @returns {Helpers.loadTemplate.cache}
 */
function loadTemplate(name, params) {
  return loadTemplate.cache[name];
};

/**
 *
 * @type {{fixed_book_frame: string, single_page_frame: string, scrolled_book_frame: string, reflowable_book_frame: string, reflowable_book_page_frame: string}}
 */
loadTemplate.cache = {
  "fixed_book_frame": '<div id="fixed-book-frame" class="clearfix book-frame fixed-book-frame"></div>',

  "single_page_frame": '<div><div id="scaler"><iframe scrolling="no" class="iframe-fixed"></iframe></div></div>',
  //"single_page_frame" : '<div><iframe scrolling="no" class="iframe-fixed" id="scaler"></iframe></div>',

  "scrolled_book_frame": '<div id="reflowable-book-frame" class="clearfix book-frame reflowable-book-frame"><div id="scrolled-content-frame"></div></div>',
  "reflowable_book_frame": '<div id="reflowable-book-frame" class="clearfix book-frame reflowable-book-frame"></div>',
  "reflowable_book_page_frame": '<div id="reflowable-content-frame" class="reflowable-content-frame"><iframe scrolling="no" id="epubContentIframe"></iframe></div>'
};

module.exports = loadTemplate;
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/margins.js":[function(require,module,exports){
/**
 *
 * @param margin
 * @param border
 * @param padding
 * @constructor
 */
function Margins(margin, border, padding) {

  this.margin = margin;
  this.border = border;
  this.padding = padding;

  this.left = this.margin.left + this.border.left + this.padding.left;
  this.right = this.margin.right + this.border.right + this.padding.right;
  this.top = this.margin.top + this.border.top + this.padding.top;
  this.bottom = this.margin.bottom + this.border.bottom + this.padding.bottom;

  this.width = function() {
    return this.left + this.right;
  };

  this.height = function() {
    return this.top + this.bottom;
  }
};

/**
 *
 * @param $element
 * @returns {Helpers.Rect}
 */
Margins.fromElement = function($element) {
  return new this($element.margin(), $element.border(), $element.padding());
};

/**
 * @returns {Helpers.Rect}
 */
Margins.empty = function() {

  return new this({
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  }, {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  }, {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  });

};

module.exports = Margins
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/rect.js":[function(require,module,exports){
/**
 *
 * @param left
 * @param top
 * @param width
 * @param height
 * @constructor
 */

var _ = require('underscore');
var jQuery = require('jquery');

function Rect(left, top, width, height) {

  this.left = left;
  this.top = top;
  this.width = width;
  this.height = height;

  this.right = function() {
    return this.left + this.width;
  };

  this.bottom = function() {
    return this.top + this.height;
  };

  this.isOverlap = function(rect, tolerance) {

    if (tolerance == undefined) {
      tolerance = 0;
    }

    return !(rect.right() < this.left + tolerance ||
      rect.left > this.right() - tolerance ||
      rect.bottom() < this.top + tolerance ||
      rect.top > this.bottom() - tolerance);
  }
};

/**
 *
 * @param $element
 * @returns {Helpers.Rect}
 */
//This method treats multicolumn view as one long column and finds the rectangle of the element in this "long" column
//we are not using jQuery Offset() and width()/height() function because for multicolumn rendition_layout it produces rectangle as a bounding box of element that
// reflows between columns this is inconstant and difficult to analyze .
Rect.fromElement = function($element) {

  var e;
  if (_.isArray($element) || $element instanceof jQuery)
    e = $element[0];
  else
    e = $element;
  // TODODM this is somewhat hacky. Text (range?) elements don't have a position so we have to ask the parent.
  if (e.nodeType === 3) {
    e = $element.parent()[0];
  }


  var offsetLeft = e.offsetLeft;
  var offsetTop = e.offsetTop;
  var offsetWidth = e.offsetWidth;
  var offsetHeight = e.offsetHeight;

  while (e = e.offsetParent) {
    offsetLeft += e.offsetLeft;
    offsetTop += e.offsetTop;
  }

  return new Rect(offsetLeft, offsetTop, offsetWidth, offsetHeight);
};

module.exports = Rect

},{"jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/remove-from-string.js":[function(require,module,exports){
/**
 *
 * @param str
 * @param toRemove
 * @returns {string}
 * @static
 */
function RemoveFromString(str, toRemove) {

  var startIx = str.indexOf(toRemove);

  if (startIx == -1) {
    return str;
  }

  return str.substring(0, startIx) + str.substring(startIx + toRemove.length);
};

module.exports = RemoveFromString
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/resolve-content-ref.js":[function(require,module,exports){
/**
 *
 * @param contentRef
 * @param sourceFileHref
 * @returns {string}
 * @constructor
 */
function ResolveContentRef(contentRef, sourceFileHref) {

  if (!sourceFileHref) {
    return contentRef;
  }

  var sourceParts = sourceFileHref.split("/");
  sourceParts.pop(); //remove source file name

  var pathComponents = contentRef.split("/");

  while (sourceParts.length > 0 && pathComponents[0] === "..") {

    sourceParts.pop();
    pathComponents.splice(0, 1);
  }

  var combined = sourceParts.concat(pathComponents);

  return combined.join("/");

};

module.exports = ResolveContentRef

},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/set-styles.js":[function(require,module,exports){
/**
 *
 * @param styles
 * @param $element
 */
function setStyles(styles, $element) {

  var count = styles.length;

  if (!count) {
    return;
  }

  for (var i = 0; i < count; i++) {
    var style = styles[i];
    if (style.selector) {
      $(style.selector, $element).css(style.declarations);
    } else {
      $element.css(style.declarations);
    }
  }

};

module.exports = setStyles
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/trigger-layout.js":[function(require,module,exports){
/**
 *
 * @param $iframe
 */
function triggerLayout($iframe) {

  var doc = $iframe[0].contentDocument;

  if (!doc) {
    return;
  }

  var ss = undefined;
  try {
    ss = doc.styleSheets && doc.styleSheets.length ? doc.styleSheets[0] : undefined;
    if (!ss) {
      var style = doc.createElement('style');
      doc.head.appendChild(style);
      style.appendChild(doc.createTextNode(''));
      ss = style.sheet;
    }

    if (ss)
      ss.insertRule('body:first-child::before {content:\'READIUM\';color: red;font-weight: bold;}', ss.cssRules.length);
  } catch (ex) {
    console.error(ex);
  }

  try {
    var el = doc.createElementNS("http://www.w3.org/1999/xhtml", "style");
    el.appendChild(doc.createTextNode("*{}"));
    doc.body.appendChild(el);
    doc.body.removeChild(el);

    if (ss)
      ss.deleteRule(ss.cssRules.length - 1);
  } catch (ex) {
    console.error(ex);
  }

  if (doc.body) {
    var val = doc.body.offsetTop; // triggers layout
  }

};

module.exports = triggerLayout
},{}],"/Users/craverod/opensource/readium-js/src/sdk/helpers/update-html-font-size.js":[function(require,module,exports){
var $ = require('jquery')
require('../../../lib/jquery-sizes')

function UpdateHtmlFontSize($epubHtml, fontSize) {
  var factor = fontSize / 100;
  var win = $epubHtml[0].ownerDocument.defaultView;
  var $textblocks = $('p, div, span, h1, h2, h3, h4, h5, h6, li, blockquote, td, pre', $epubHtml);
  var originalLineHeight;


  // need to do two passes because it is possible to have nested text blocks. 
  // If you change the font size of the parent this will then create an inaccurate
  // font size for any children. 
  for (var i = 0; i < $textblocks.length; i++) {
    var ele = $textblocks[i],
      fontSizeAttr = ele.getAttribute('data-original-font-size');

    if (!fontSizeAttr) {
      var style = win.getComputedStyle(ele);
      var originalFontSize = parseInt(style.fontSize);
      originalLineHeight = parseInt(style.lineHeight);

      ele.setAttribute('data-original-font-size', originalFontSize);
      // getComputedStyle will not calculate the line-height if the value is 'normal'. In this case parseInt will return NaN
      if (originalLineHeight) {
        ele.setAttribute('data-original-line-height', originalLineHeight);
      }
    }
  }

  // reset variable so the below logic works. All variables in JS are function scoped. 
  originalLineHeight = 0;
  for (var i = 0; i < $textblocks.length; i++) {
    var ele = $textblocks[i],
      fontSizeAttr = ele.getAttribute('data-original-font-size'),
      lineHeightAttr = ele.getAttribute('data-original-line-height'),
      originalFontSize = Number(fontSizeAttr);

    if (lineHeightAttr) {
      originalLineHeight = Number(lineHeightAttr);
    } else {
      originalLineHeight = 0;
    }

    ele.style.fontSize = (originalFontSize * factor) + 'px';
    if (originalLineHeight) {
      ele.style.lineHeight = (originalLineHeight * factor) + 'px';
    }

  }
  $epubHtml.css("font-size", fontSize + "%");
}

module.exports = UpdateHtmlFontSize
},{"../../../lib/jquery-sizes":"/Users/craverod/opensource/readium-js/lib/jquery-sizes.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/src/sdk/index.js":[function(require,module,exports){
var _ = require('underscore');
var Backbone = require('backbone');

var ReadiumSDK = {
  Views: require('./views'),
  Events: require('./events'),
  Parser: require('../../lib/epubjs/parser'),
  version: function() {
    return '0.8.0';
  }
};

require('./navigator-shim');

_.extend(ReadiumSDK, Backbone.Events);

module.exports = ReadiumSDK;

},{"../../lib/epubjs/parser":"/Users/craverod/opensource/readium-js/lib/epubjs/parser.js","./events":"/Users/craverod/opensource/readium-js/src/sdk/events.js","./navigator-shim":"/Users/craverod/opensource/readium-js/src/sdk/navigator-shim.js","./views":"/Users/craverod/opensource/readium-js/src/sdk/views/index.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/internal-events.js":[function(require,module,exports){
    /**
     * Internal Events
     *
     * @desc Should not be triggered outside of {@link ReadiumSDK.Views.ReaderView}.
     * @namespace
     */

    module.exports = {
      /**
       * @event
       */
      CURRENT_VIEW_PAGINATION_CHANGED: "CurrentViewPaginationChanged",
    }
},{}],"/Users/craverod/opensource/readium-js/src/sdk/models/bookmark-data.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.


/**
 * @class ReadiumSDK.Models.BookmarkData
 */
function BookmarkData(idref, contentCFI) {

  /**
   * spine item idref
   * @property idref
   * @type {string}
   */
  this.idref = idref;

  /**
   * cfi of the first visible element
   * @property contentCFI
   * @type {string}
   */
  this.contentCFI = contentCFI;

  this.toString = function() {
    return JSON.stringify(this);
  }
};

module.exports = BookmarkData
},{}],"/Users/craverod/opensource/readium-js/src/sdk/models/current-pages-info.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * Used to report pagination state back to the host application
 *
 * @class ReadiumSDK.Models.CurrentPagesInfo
 *
 * @constructor
 *
 * @param {ReadiumSDK.Models.Spine} spine
 * @param {boolean} isFixedLayout is fixed or reflowable spine item
 */

function CurrentPagesInfo(spine, isFixedLayout) {


  this.isRightToLeft = spine.isRightToLeft();
  this.isFixedLayout = isFixedLayout;
  this.spineItemCount = spine.items.length
  this.openPages = [];

  this.addOpenPage = function(spineItemPageIndex, spineItemPageCount, idref, spineItemIndex) {
    this.openPages.push({
      spineItemPageIndex: spineItemPageIndex,
      spineItemPageCount: spineItemPageCount,
      idref: idref,
      spineItemIndex: spineItemIndex
    });

    this.sort();
  };

  this.canGoLeft = function() {
    return this.isRightToLeft ? this.canGoNext() : this.canGoPrev();
  };

  this.canGoRight = function() {
    return this.isRightToLeft ? this.canGoPrev() : this.canGoNext();
  };

  this.canGoNext = function() {

    if (this.openPages.length == 0)
      return false;

    var lastOpenPage = this.openPages[this.openPages.length - 1];

    // TODO: handling of non-linear spine items ("ancillary" documents), allowing page turn within the reflowable XHTML, but preventing previous/next access to sibling spine items. Also needs "go back" feature to navigate to source hyperlink location that led to the non-linear document.
    // See https://github.com/readium/readium-shared-js/issues/26

    // Removed, needs to be implemented properly as per above.
    // See https://github.com/readium/readium-shared-js/issues/108
    // if(!spine.isValidLinearItem(lastOpenPage.spineItemIndex))
    //     return false;

    return lastOpenPage.spineItemIndex < spine.last().index || lastOpenPage.spineItemPageIndex < lastOpenPage.spineItemPageCount - 1;
  };

  this.canGoPrev = function() {

    if (this.openPages.length == 0)
      return false;

    var firstOpenPage = this.openPages[0];

    // TODO: handling of non-linear spine items ("ancillary" documents), allowing page turn within the reflowable XHTML, but preventing previous/next access to sibling spine items. Also needs "go back" feature to navigate to source hyperlink location that led to the non-linear document.
    // See https://github.com/readium/readium-shared-js/issues/26

    // Removed, needs to be implemented properly as per above.
    // //https://github.com/readium/readium-shared-js/issues/108
    // if(!spine.isValidLinearItem(firstOpenPage.spineItemIndex))
    //     return false;

    return spine.first().index < firstOpenPage.spineItemIndex || 0 < firstOpenPage.spineItemPageIndex;
  };

  this.sort = function() {

    this.openPages.sort(function(a, b) {

      if (a.spineItemIndex != b.spineItemIndex) {
        return a.spineItemIndex - b.spineItemIndex;
      }

      return a.pageIndex - b.pageIndex;

    });

  };

}

module.exports = CurrentPagesInfo
},{}],"/Users/craverod/opensource/readium-js/src/sdk/models/media-overlay.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 *
 * @param package
 * @constructor
 */

var SmilModel = require('./smil-model')

var MediaOverlay = function(package) {

  this.package = package;


  this.parallelAt = function(timeMilliseconds) {
    var offset = 0;

    for (var i = 0; i < this.smil_models.length; i++) {
      var smilData = this.smil_models[i];

      var timeAdjusted = timeMilliseconds - offset;

      var para = smilData.parallelAt(timeAdjusted);
      if (para) {
        return para;
      }

      offset += smilData.durationMilliseconds_Calculated();
    }

    return undefined;
  };

  this.percentToPosition = function(percent, smilData, par, milliseconds) {
    if (percent < 0.0 || percent > 100.0) {
      percent = 0.0;
    }

    var total = this.durationMilliseconds_Calculated();

    var timeMs = total * (percent / 100.0);

    par.par = this.parallelAt(timeMs);
    if (!par.par) {
      return;
    }

    var smilDataPar = par.par.getSmil();
    if (!smilDataPar) {
      return;
    }

    var smilDataOffset = 0;

    for (var i = 0; i < this.smil_models.length; i++) {
      smilData.smilData = this.smil_models[i];
      if (smilData.smilData == smilDataPar) {
        break;
      }
      smilDataOffset += smilData.smilData.durationMilliseconds_Calculated();
    }

    milliseconds.milliseconds = timeMs - (smilDataOffset + smilData.smilData.clipOffset(par.par));
  };

  this.durationMilliseconds_Calculated = function() {
    var total = 0;

    for (var i = 0; i < this.smil_models.length; i++) {
      var smilData = this.smil_models[i];

      total += smilData.durationMilliseconds_Calculated();
    }

    return total;
  };

  this.smilAt = function(smilIndex) {
    if (smilIndex < 0 || smilIndex >= this.smil_models.length) {
      return undefined;
    }

    return this.smil_models[smilIndex];
  }

  this.positionToPercent = function(smilIndex, parIndex, milliseconds) {
    // console.log(">>>>>>>>>>");
    // console.log(milliseconds);
    // console.log(smilIndex);
    // console.log(parIndex);
    // console.log("-------");

    if (smilIndex >= this.smil_models.length) {
      return -1.0;
    }

    var smilDataOffset = 0;
    for (var i = 0; i < smilIndex; i++) {
      var sd = this.smil_models[i];
      smilDataOffset += sd.durationMilliseconds_Calculated();
    }

    //console.log(smilDataOffset);

    var smilData = this.smil_models[smilIndex];

    var par = smilData.nthParallel(parIndex);
    if (!par) {
      return -1.0;
    }

    var offset = smilDataOffset + smilData.clipOffset(par) + milliseconds;

    //console.log(offset);

    var total = this.durationMilliseconds_Calculated();

    ///console.log(total);

    var percent = (offset / total) * 100;

    //console.log("<<<<<<<<<<< " + percent);

    return percent;
  };

  this.smil_models = [];

  this.skippables = [];
  this.escapables = [];

  this.duration = undefined;
  this.narrator = undefined;


  this.activeClass = undefined;
  this.playbackActiveClass = undefined;

  this.DEBUG = false;


  this.getSmilBySpineItem = function(spineItem) {
    if (!spineItem) return undefined;

    for (var i = 0, count = this.smil_models.length; i < count; i++) {
      var smil = this.smil_models[i];
      if (smil.spineItemId === spineItem.idref) {
        if (spineItem.media_overlay_id !== smil.id) {
          console.error("SMIL INCORRECT ID?? " + spineItem.media_overlay_id + " /// " + smil.id);
        }
        return smil;
      }
    }

    return undefined;
  };

  /*
  this.getSmilById = function (id) {

      for(var i = 0, count = this.smil_models.length; i < count; i++) {

          var smil = this.smil_models[i];
          if(smil.id === id) {
              return smil;
          }
      }

      return undefined;
  };
  */

  this.getNextSmil = function(smil) {

    var index = this.smil_models.indexOf(smil);
    if (index == -1 || index == this.smil_models.length - 1) {
      return undefined;
    }

    return this.smil_models[index + 1];
  }

  this.getPreviousSmil = function(smil) {

    var index = this.smil_models.indexOf(smil);
    if (index == -1 || index == 0) {
      return undefined;
    }

    return this.smil_models[index - 1];
  }
};

MediaOverlay.fromDTO = function(moDTO, package) {

  var mo = new MediaOverlay(package);
mo.DEBUG = true;
  if (!moDTO) {
    console.debug("No Media Overlay.");
    return mo;
  }

  console.debug("Media Overlay INIT...", moDTO, package);

  if (mo.DEBUG)
    console.debug(JSON.stringify(moDTO));

  mo.duration = moDTO.duration;
  if (mo.duration && mo.duration.length && mo.duration.length > 0) {
    console.error("SMIL total duration is string, parsing float... (" + mo.duration + ")");
    mo.duration = parseFloat(mo.duration);
  }
  if (mo.DEBUG)
    console.debug("Media Overlay Duration (TOTAL): " + mo.duration);

  mo.narrator = moDTO.narrator;
  if (mo.DEBUG)
    console.debug("Media Overlay Narrator: " + mo.narrator);

  mo.activeClass = moDTO.activeClass;
  if (mo.DEBUG)
    console.debug("Media Overlay Active-Class: " + mo.activeClass);

  mo.playbackActiveClass = moDTO.playbackActiveClass;
  if (mo.DEBUG)
    console.debug("Media Overlay Playback-Active-Class: " + mo.playbackActiveClass);

  var count = moDTO.smil_models.length;
  if (mo.DEBUG)
    console.debug("Media Overlay SMIL count: " + count);

  for (var i = 0; i < count; i++) {
    var smilModel = SmilModel.fromSmilDTO(moDTO.smil_models[i], mo);
    mo.smil_models.push(smilModel);

    if (mo.DEBUG)
      console.debug("Media Overlay Duration (SPINE ITEM): " + smilModel.duration);
  }

  count = moDTO.skippables.length;
  if (mo.DEBUG)
    console.debug("Media Overlay SKIPPABLES count: " + count);

  for (var i = 0; i < count; i++) {
    mo.skippables.push(moDTO.skippables[i]);

    //if (mo.DEBUG)
    //    console.debug("Media Overlay SKIPPABLE: " + mo.skippables[i]);
  }

  count = moDTO.escapables.length;
  if (mo.DEBUG)
    console.debug("Media Overlay ESCAPABLES count: " + count);

  for (var i = 0; i < count; i++) {
    mo.escapables.push(moDTO.escapables[i]);

    //if (mo.DEBUG)
    //    console.debug("Media Overlay ESCAPABLE: " + mo.escapables[i]);
  }

  return mo;
};

module.exports = MediaOverlay

},{"./smil-model":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/index.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/package.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var Helpers = require('../helpers')
var MediaOverlay = require('./media-overlay')
var Spine = require('./spine')
var SpineItemConstants = require('./spine-item-constants')

/**
 *
 * @class ReadiumSDK.Models.Package
 * @constructor
 */

var Package = function(packageData) {

  var self = this;

  this.spine = undefined;

  this.rootUrl = undefined;
  this.rootUrlMO = undefined;

  this.media_overlay = undefined;

  this.rendition_viewport = undefined;

  this.rendition_flow = undefined;

  this.rendition_layout = undefined;

  //TODO: unused yet!
  this.rendition_spread = undefined;

  //TODO: unused yet!
  this.rendition_orientation = undefined;

  this.resolveRelativeUrlMO = function(relativeUrl) {

    if (self.rootUrlMO && self.rootUrlMO.length > 0) {

      if (Helpers.EndsWith(self.rootUrlMO, "/")) {
        return self.rootUrlMO + relativeUrl;
      } else {
        return self.rootUrlMO + "/" + relativeUrl;
      }
    }

    return self.resolveRelativeUrl(relativeUrl);
  };

  this.resolveRelativeUrl = function(relativeUrl) {

    if (self.rootUrl) {

      if (Helpers.EndsWith(self.rootUrl, "/")) {
        return self.rootUrl + relativeUrl;
      } else {
        return self.rootUrl + "/" + relativeUrl;
      }
    }

    return relativeUrl;
  };

  this.isFixedLayout = function() {
    return self.rendition_layout === SpineItemConstants.RENDITION_LAYOUT_PREPAGINATED;
  };

  this.isReflowable = function() {
    return !self.isFixedLayout();
  };


  if (packageData) {

    this.rootUrl = packageData.rootUrl;
    this.rootUrlMO = packageData.rootUrlMO;

    this.rendition_viewport = packageData.rendition_viewport;

    this.rendition_layout = packageData.rendition_layout;

    this.rendition_flow = packageData.rendition_flow;
    this.rendition_orientation = packageData.rendition_orientation;
    this.rendition_spread = packageData.rendition_spread;

    this.spine = new Spine(this, packageData.spine);

    this.media_overlay = MediaOverlay.fromDTO(packageData.media_overlay, this);
  }
};

module.exports = Package
},{"../helpers":"/Users/craverod/opensource/readium-js/src/sdk/helpers/index.js","./media-overlay":"/Users/craverod/opensource/readium-js/src/sdk/models/media-overlay.js","./spine":"/Users/craverod/opensource/readium-js/src/sdk/models/spine.js","./spine-item-constants":"/Users/craverod/opensource/readium-js/src/sdk/models/spine-item-constants.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/page-open-request.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * Representation of opening page request
 * Provides the spine item to be opened and one of the following properties:
 *  spineItemPageIndex {Number},
 *  elementId {String},
 *  elementCfi {String},
 *  firstPage {bool},
 *  lastPage {bool}
 *
 * @param {ReadiumSDK.Models.SpineItem} spineItem
 * @param {object} [initiator]
 *
 * @constructor
 */
var PageOpenRequest = function(spineItem, initiator) {

  this.spineItem = spineItem;
  this.spineItemPageIndex = undefined;
  this.elementId = undefined;
  this.elementCfi = undefined;
  this.firstPage = false;
  this.lastPage = false;
  this.initiator = initiator;

  this.reset = function() {
    this.spineItemPageIndex = undefined;
    this.elementId = undefined;
    this.elementCfi = undefined;
    this.firstPage = false;
    this.lastPage = false;
  };

  this.setFirstPage = function() {
    this.reset();
    this.firstPage = true;
  };

  this.setLastPage = function() {
    this.reset();
    this.lastPage = true;
  };

  this.setPageIndex = function(pageIndex) {
    this.reset();
    this.spineItemPageIndex = pageIndex;
  };

  this.setElementId = function(elementId) {
    this.reset();
    this.elementId = elementId;
  };

  this.setElementCfi = function(elementCfi) {

    this.reset();
    this.elementCfi = elementCfi;
  };


};

module.exports = PageOpenRequest
},{}],"/Users/craverod/opensource/readium-js/src/sdk/models/smil-iterator.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var escapeJQuerySelector = require('../helpers/escape-jquery-selector')

/**
 *
 * @param smil
 * @constructor
 */

function SmilIterator(smil) {

  this.smil = smil;
  this.currentPar = undefined;

  this.reset = function() {
    this.currentPar = findParNode(0, this.smil, false);
  };

  /*
  this.firstDeep = function(container) {
      var par = container.nodeType === "par" ? container : findParNode(0, container, false);

      return par;
  };
  */
  //
  //    this.ensureNextValidTextElement = function()
  //    {
  //        if (!this.currentPar)
  //        {
  //            console.debug("Par iterator is out of range");
  //            return;
  //        }
  //
  //        while (this.currentPar && !this.currentPar.element)
  //        {
  //            this.next();
  //        }
  //    };

  this.findTextId = function(id) {
    if (!this.currentPar) {
      console.debug("Par iterator is out of range");
      return;
    }

    if (!id) {
      return false;
    }

    while (this.currentPar) {
      if (this.currentPar.element) {
        if (id === this.currentPar.text.srcFragmentId) //this.currentPar.element.id
        {
          return true;
        }

        // OUTER match
        var parent = this.currentPar.element.parentNode;
        while (parent) {
          if (parent.id && parent.id == id) {
            return true;
          }

          parent = parent.parentNode;
        }

        // INNER match
        //var inside = this.currentPar.element.ownerDocument.getElementById(id);
        var inside = $("#" + escapeJQuerySelector(id), this.currentPar.element);
        if (inside && inside.length && inside[0]) {
          return true;
        }
      }

      this.next();
    }

    return false;
  }

  this.next = function() {

    if (!this.currentPar) {
      console.debug("Par iterator is out of range");
      return;
    }

    this.currentPar = findParNode(this.currentPar.index + 1, this.currentPar.parent, false);
  };

  this.previous = function() {

    if (!this.currentPar) {
      console.debug("Par iterator is out of range");
      return;
    }

    this.currentPar = findParNode(this.currentPar.index - 1, this.currentPar.parent, true);
  };

  this.isLast = function() {

    if (!this.currentPar) {
      console.debug("Par iterator is out of range");
      return;
    }

    if (findParNode(this.currentPar.index + 1, this.currentPar.parent, false)) {
      return false;
    }

    return true;
  }

  this.goToPar = function(par) {

    while (this.currentPar) {
      if (this.currentPar == par) {
        break;
      }

      this.next();
    }
  };

  function findParNode(startIndex, container, previous) {

    for (var i = startIndex, count = container.children.length; i >= 0 && i < count; i += (previous ? -1 : 1)) {

      var node = container.children[i];
      if (node.nodeType == "par") {
        return node;
      }

      // assert(node.nodeType == "seq")
      node = findParNode(previous ? node.children.length - 1 : 0, node, previous);

      if (node) {
        return node;
      }
    }

    if (container.parent) {
      return findParNode(container.index + (previous ? -1 : 1), container.parent, previous);
    }

    return undefined;
  }

  this.reset();
};

module.exports = SmilIterator

},{"../helpers/escape-jquery-selector":"/Users/craverod/opensource/readium-js/src/sdk/helpers/escape-jquery-selector.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/audio-node.js":[function(require,module,exports){
var MediaNode = require('./media-node')

function AudioNode(parent) {

  this.parent = parent;

  this.nodeType = "audio";

  this.clipBegin = 0;

  this.MAX = 1234567890.1; //Number.MAX_VALUE - 0.1; //Infinity;
  this.clipEnd = this.MAX;


  this.clipDurationMilliseconds = function() {
    var _clipBeginMilliseconds = this.clipBegin * 1000;
    var _clipEndMilliseconds = this.clipEnd * 1000;

    if (this.clipEnd >= this.MAX || _clipEndMilliseconds <= _clipBeginMilliseconds) {
      return 0;
    }

    return _clipEndMilliseconds - _clipBeginMilliseconds;
  };
};

AudioNode.prototype = new MediaNode();

module.exports = AudioNode
},{"./media-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/media-node.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/index.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var AudioNode = require('./audio-node')
var TextNode = require('./text-node')
var SeqNode = require('./seq-node')
var ParNode = require('./par-node')

function SmilModel() {

  this.parent = undefined;



  this.children = []; //collection of seq or par smil nodes
  this.id = undefined; //manifest item id
  this.href = undefined; //href of the .smil source file
  this.duration = undefined;
  this.mo = undefined;

  this.parallelAt = function(timeMilliseconds) {
    return this.children[0].parallelAt(timeMilliseconds);
  };

  this.nthParallel = function(index) {
    var count = {
      count: -1
    };
    return this.children[0].nthParallel(index, count);
  };

  this.clipOffset = function(par) {
    var offset = {
      offset: 0
    };
    if (this.children[0].clipOffset(offset, par)) {
      return offset.offset;
    }

    return 0;
  };

  this.durationMilliseconds_Calculated = function() {
    return this.children[0].durationMilliseconds();
  };


  var _epubtypeSyncs = [];
  // 
  // this.clearSyncs = function()
  // {
  //     _epubtypeSyncs = [];
  // };

  this.hasSync = function(epubtype) {
    for (var i = 0; i < _epubtypeSyncs.length; i++) {
      if (_epubtypeSyncs[i] === epubtype) {
        //console.debug("hasSync OK: ["+epubtype+"]");
        return true;
      }
    }

    //console.debug("hasSync??: ["+epubtype+"] " + _epubtypeSyncs);
    return false;
  };

  this.addSync = function(epubtypes) {
    if (!epubtypes) return;

    //console.debug("addSyncs: "+epubtypes);

    var parts = epubtypes.split(' ');
    for (var i = 0; i < parts.length; i++) {
      var epubtype = parts[i].trim();

      if (epubtype.length > 0 && !this.hasSync(epubtype)) {
        _epubtypeSyncs.push(epubtype);

        //console.debug("addSync: "+epubtype);
      }
    }
  };

};

SmilModel.fromSmilDTO = function(smilDTO, mo) {

  if (mo.DEBUG) {
    console.debug("Media Overlay DTO import...");
  }

  var indent = 0;
  var getIndent = function() {
    var str = "";
    for (var i = 0; i < indent; i++) {
      str += "   ";
    }
    return str;
  }

  var smilModel = new SmilModel();
  smilModel.id = smilDTO.id;
  smilModel.spineItemId = smilDTO.spineItemId;
  smilModel.href = smilDTO.href;

  smilModel.smilVersion = smilDTO.smilVersion;

  smilModel.duration = smilDTO.duration;
  if (smilModel.duration && smilModel.duration.length && smilModel.duration.length > 0) {
    console.error("SMIL duration is string, parsing float... (" + smilModel.duration + ")");
    smilModel.duration = parseFloat(smilModel.duration);
  }

  smilModel.mo = mo; //ReadiumSDK.Models.MediaOverlay

  if (smilModel.mo.DEBUG) {
    console.log("JS MO smilVersion=" + smilModel.smilVersion);
    console.log("JS MO id=" + smilModel.id);
    console.log("JS MO spineItemId=" + smilModel.spineItemId);
    console.log("JS MO href=" + smilModel.href);
    console.log("JS MO duration=" + smilModel.duration);
  }

  var safeCopyProperty = function(property, from, to, isRequired) {

    if ((property in from)) { // && from[property] !== ""

      if (!(property in to)) {
        console.debug("property " + property + " not declared in smil node " + to.nodeType);
      }

      to[property] = from[property];

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO: [" + property + "=" + to[property] + "]");
      }
    } else if (isRequired) {
      console.log("Required property " + property + " not found in smil node " + from.nodeType);
    }
  };

  var createNodeFromDTO = function(nodeDTO, parent) {

    var node;

    if (nodeDTO.nodeType == "seq") {

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO seq");
      }

      node = new SeqNode(parent);

      safeCopyProperty("textref", nodeDTO, node, ((parent && parent.parent) ? true : false));
      safeCopyProperty("id", nodeDTO, node);
      safeCopyProperty("epubtype", nodeDTO, node);

      if (node.epubtype) {
        node.getSmil().addSync(node.epubtype);
      }

      indent++;
      copyChildren(nodeDTO, node);
      indent--;
    } else if (nodeDTO.nodeType == "par") {

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO par");
      }

      node = new ParNode(parent);

      safeCopyProperty("id", nodeDTO, node);
      safeCopyProperty("epubtype", nodeDTO, node);

      if (node.epubtype) {
        node.getSmil().addSync(node.epubtype);
      }

      indent++;
      copyChildren(nodeDTO, node);
      indent--;

      for (var i = 0, count = node.children.length; i < count; i++) {
        var child = node.children[i];

        if (child.nodeType == "text") {
          node.text = child;
        } else if (child.nodeType == "audio") {
          node.audio = child;
        } else {
          console.error("Unexpected smil node type: " + child.nodeType);
        }
      }

      ////////////////
      var forceTTS = false; // for testing only!
      ////////////////

      if (forceTTS || !node.audio) {
        // synthetic speech (playback using TTS engine), or embedded media, or blank page
        var fakeAudio = new AudioNode(node);

        fakeAudio.clipBegin = 0;
        fakeAudio.clipEnd = fakeAudio.MAX;
        fakeAudio.src = undefined;

        node.audio = fakeAudio;
      }
    } else if (nodeDTO.nodeType == "text") {

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO text");
      }

      node = new TextNode(parent);

      safeCopyProperty("src", nodeDTO, node, true);
      safeCopyProperty("srcFile", nodeDTO, node, true);
      safeCopyProperty("srcFragmentId", nodeDTO, node, false);
      safeCopyProperty("id", nodeDTO, node);

      node.updateMediaManifestItemId();
    } else if (nodeDTO.nodeType == "audio") {

      if (smilModel.mo.DEBUG) {
        console.log(getIndent() + "JS MO audio");
      }

      node = new AudioNode(parent);

      safeCopyProperty("src", nodeDTO, node, true);
      safeCopyProperty("id", nodeDTO, node);

      safeCopyProperty("clipBegin", nodeDTO, node);
      if (node.clipBegin && node.clipBegin.length && node.clipBegin.length > 0) {
        console.error("SMIL clipBegin is string, parsing float... (" + node.clipBegin + ")");
        node.clipBegin = parseFloat(node.clipBegin);
      }
      if (node.clipBegin < 0) {
        if (smilModel.mo.DEBUG) {
          console.log(getIndent() + "JS MO clipBegin adjusted to ZERO");
        }
        node.clipBegin = 0;
      }

      safeCopyProperty("clipEnd", nodeDTO, node);
      if (node.clipEnd && node.clipEnd.length && node.clipEnd.length > 0) {
        console.error("SMIL clipEnd is string, parsing float... (" + node.clipEnd + ")");
        node.clipEnd = parseFloat(node.clipEnd);
      }
      if (node.clipEnd <= node.clipBegin) {
        if (smilModel.mo.DEBUG) {
          console.log(getIndent() + "JS MO clipEnd adjusted to MAX");
        }
        node.clipEnd = node.MAX;
      }

      //node.updateMediaManifestItemId(); ONLY XHTML SPINE ITEMS 
    } else {
      console.error("Unexpected smil node type: " + nodeDTO.nodeType);
      return undefined;
    }

    return node;

  };

  var copyChildren = function(from, to) {

    var count = from.children.length;

    for (var i = 0; i < count; i++) {
      var node = createNodeFromDTO(from.children[i], to);
      node.index = i;
      to.children.push(node);
    }

  };

  copyChildren(smilDTO, smilModel);

  return smilModel;

};

module.exports = SmilModel
},{"./audio-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/audio-node.js","./par-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/par-node.js","./seq-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/seq-node.js","./text-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/text-node.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/media-node.js":[function(require,module,exports){
var SmilNode = require('./smil-node')

function MediaNode(parent) {

  this.parent = parent;

  this.src = "";
};

MediaNode.prototype = new SmilNode();

module.exports = MediaNode
},{"./smil-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/smil-node.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/par-node.js":[function(require,module,exports){
var TimeContainerNode = require('./time-container-node')

function ParNode(parent) {

  this.parent = parent;

  this.children = [];
  this.nodeType = "par";
  this.text = undefined;
  this.audio = undefined;
  this.element = undefined;


  this.getFirstSeqAncestorWithEpubType = function(epubtype, includeSelf) {
    if (!epubtype) return undefined;

    var parent = includeSelf ? this : this.parent;
    while (parent) {
      if (parent.epubtype && parent.epubtype.indexOf(epubtype) >= 0) {
        return parent; // assert(parent.nodeType === "seq")
      }

      parent = parent.parent;
    }

    return undefined;
  };
};

ParNode.prototype = new TimeContainerNode();

module.exports = ParNode
},{"./time-container-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/time-container-node.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/seq-node.js":[function(require,module,exports){
var TimeContainerNode = require('./time-container-node')

function SeqNode(parent) {

  this.parent = parent;

  this.children = [];
  this.nodeType = "seq";
  this.textref = "";

  this.durationMilliseconds = function() {
    var smilData = this.getSmil();

    var total = 0;

    for (var i = 0; i < this.children.length; i++) {
      var container = this.children[i];
      if (container.nodeType === "par") {
        if (!container.audio) {
          continue;
        }
        if (container.text && (!container.text.manifestItemId || container.text.manifestItemId != smilData.spineItemId)) {
          // console.log(container.text);
          // console.log(smilData.spineItemId);
          continue;
        }

        var clipDur = container.audio.clipDurationMilliseconds();
        total += clipDur;
      } else if (container.nodeType === "seq") {
        total += container.durationMilliseconds();
      }
    }

    return total;
  };

  this.clipOffset = function(offset, par) {
    var smilData = this.getSmil();

    for (var i = 0; i < this.children.length; i++) {
      var container = this.children[i];
      if (container.nodeType === "par") {
        if (container == par) {
          return true;
        }

        if (!container.audio) {
          continue;
        }

        if (container.text && (!container.text.manifestItemId || container.text.manifestItemId != smilData.spineItemId)) {
          continue;
        }

        var clipDur = container.audio.clipDurationMilliseconds();
        offset.offset += clipDur;
      } else if (container.nodeType === "seq") {
        var found = container.clipOffset(offset, par);
        if (found) {
          return true;
        }
      }
    }

    return false;
  };

  this.parallelAt = function(timeMilliseconds) {
    var smilData = this.getSmil();

    var offset = 0;

    for (var i = 0; i < this.children.length; i++) {
      var timeAdjusted = timeMilliseconds - offset;

      var container = this.children[i];

      if (container.nodeType === "par") {
        if (!container.audio) {
          continue;
        }

        if (container.text && (!container.text.manifestItemId || container.text.manifestItemId != smilData.spineItemId)) {
          continue;
        }

        var clipDur = container.audio.clipDurationMilliseconds();

        if (clipDur > 0 && timeAdjusted <= clipDur) {
          return container;
        }

        offset += clipDur;
      } else if (container.nodeType === "seq") {
        var para = container.parallelAt(timeAdjusted);
        if (para) {
          return para;
        }

        offset += container.durationMilliseconds();
      }
    }

    return undefined;
  };

  this.nthParallel = function(index, count) {
    for (var i = 0; i < this.children.length; i++) {
      var container = this.children[i];

      if (container.nodeType === "par") {
        count.count++;

        if (count.count == index) {
          return container;
        }
      } else if (container.nodeType === "seq") {
        var para = container.nthParallel(index, count);
        if (para) {
          return para;
        }
      }
    }

    return undefined;
  };

};

SeqNode.prototype = new TimeContainerNode();

module.exports = TimeContainerNode
},{"./time-container-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/time-container-node.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/smil-node.js":[function(require,module,exports){
function SmilNode(parent) {

  this.parent = parent;

  this.id = "";

  //root node is a smil model
  this.getSmil = function() {

    var node = this;
    while (node.parent) {
      node = node.parent;
    }

    return node;
  };

  this.hasAncestor = function(node) {
    var parent = this.parent;
    while (parent) {
      if (parent == node) {
        return true;
      }

      parent = parent.parent;
    }

    return false;
  };
};

module.exports = SmilNode
},{}],"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/text-node.js":[function(require,module,exports){
var MediaNode = require('./media-node')
var ResolveContentRef = require('../../helpers/resolve-content-ref')

function TextNode(parent) {

  this.parent = parent;

  this.nodeType = "text";
  this.srcFile = "";
  this.srcFragmentId = "";


  this.manifestItemId = undefined;
  this.updateMediaManifestItemId = function() {
    var smilData = this.getSmil();

    if (!smilData.href || !smilData.href.length) {
      return; // Blank MO page placeholder, no real SMIL
    }

    // var srcParts = item.src.split('#');
    //         item.srcFile = srcParts[0];
    //         item.srcFragmentId = (srcParts.length === 2) ? srcParts[1] : "";

    var src = this.srcFile ? this.srcFile : this.src;
    // console.log("src: " + src);
    // console.log("smilData.href: " + smilData.href);
    var ref = ResolveContentRef(src, smilData.href);
    //console.log("ref: " + ref);
    var full = smilData.mo.package.resolveRelativeUrlMO(ref);
    // console.log("full: " + full);
    // console.log("---");
    for (var j = 0; j < smilData.mo.package.spine.items.length; j++) {
      var item = smilData.mo.package.spine.items[j];
      //console.log("item.href: " + item.href);
      var url = smilData.mo.package.resolveRelativeUrl(item.href);
      //console.log("url: " + url);
      if (url === full) {
        //console.error("FOUND: " + item.idref);
        this.manifestItemId = item.idref;
        return;
      }
    }

    console.error("Cannot set the Media ManifestItemId? " + this.src + " && " + smilData.href);

    //        throw "BREAK";
  };

};

TextNode.prototype = new MediaNode();

module.exports = TextNode
},{"../../helpers/resolve-content-ref":"/Users/craverod/opensource/readium-js/src/sdk/helpers/resolve-content-ref.js","./media-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/media-node.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/time-container-node.js":[function(require,module,exports){
var SmilNode = require('./smil-node')

function TimeContainerNode(parent) {

  this.parent = parent;

  this.children = typeof this.children === 'undefined' ? [] : this.children;
  this.index = undefined;

  this.epubtype = "";

  this.isEscapable = function(userEscapables) {
    if (this.epubtype === "") {
      return false;
    }

    var smilModel = this.getSmil();
    if (!smilModel.mo) {
      return false;
    }

    var arr = smilModel.mo.escapables;
    if (userEscapables.length > 0) {
      arr = userEscapables;
    }

    for (var i = 0; i < arr.length; i++) {
      if (this.epubtype.indexOf(arr[i]) >= 0) {
        return true;
      }
    }

    return false;
  };

  this.isSkippable = function(userSkippables) {
    if (this.epubtype === "") {
      return false;
    }

    var smilModel = this.getSmil();
    if (!smilModel.mo) {
      return false;
    }

    var arr = smilModel.mo.skippables;
    if (userSkippables.length > 0) {
      arr = userSkippables;
    }

    for (var i = 0; i < arr.length; i++) {
      if (this.epubtype.indexOf(arr[i]) >= 0) {
        return true;
      }
    }

    return false;
  };
};

TimeContainerNode.prototype = new SmilNode()

module.exports = TimeContainerNode
},{"./smil-node":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-model/smil-node.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/spine-item-constants.js":[function(require,module,exports){
module.exports = {
  RENDITION_LAYOUT_REFLOWABLE: "reflowable",
  RENDITION_LAYOUT_PREPAGINATED: "pre-paginated",

  RENDITION_ORIENTATION_LANDSCAPE: "landscape",
  RENDITION_ORIENTATION_PORTRAIT: "portrait",
  RENDITION_ORIENTATION_AUTO: "auto",

  SPREAD_LEFT: "page-spread-left",
  SPREAD_RIGHT: "page-spread-right",
  SPREAD_CENTER: "page-spread-center",

  RENDITION_SPREAD_NONE: "none",
  RENDITION_SPREAD_LANDSCAPE: "landscape",
  RENDITION_SPREAD_PORTRAIT: "portrait",
  RENDITION_SPREAD_BOTH: "both",
  RENDITION_SPREAD_AUTO: "auto",

  RENDITION_FLOW_PAGINATED: "paginated",
  RENDITION_FLOW_SCROLLED_CONTINUOUS: "scrolled-continuous",
  RENDITION_FLOW_SCROLLED_DOC: "scrolled-doc",
  RENDITION_FLOW_AUTO: "auto"
}
},{}],"/Users/craverod/opensource/readium-js/src/sdk/models/spine-item.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var Constants = require('./spine-item-constants')

/**
 * Wrapper of the SpineItem object received from the host application
 *
 * @class SpineItem
 *
 * @param itemData spine item properties container
 * @param {Number} index
 * @param {Spine} spine
 *
 */
var SpineItem = function(itemData, index, spine) {

  var self = this;

  this.idref = itemData.idref;
  this.href = itemData.href;

  this.linear = itemData.linear ? itemData.linear.toLowerCase() : itemData.linear;

  this.page_spread = itemData.page_spread;

  this.rendition_viewport = itemData.rendition_viewport;

  this.rendition_spread = itemData.rendition_spread;

  //TODO: unused yet!
  this.rendition_orientation = itemData.rendition_orientation;

  this.rendition_layout = itemData.rendition_layout;

  this.rendition_flow = itemData.rendition_flow;



  this.media_overlay_id = itemData.media_overlay_id;

  this.media_type = itemData.media_type;

  this.index = index;
  this.spine = spine;

  validateSpread();

  this.setSpread = function(spread) {
    this.page_spread = spread;

    validateSpread();
  };

  this.isRenditionSpreadAllowed = function() {

    var rendition_spread = self.getRenditionSpread();
    return !rendition_spread || rendition_spread != Constants.RENDITION_SPREAD_NONE;
  };

  function validateSpread() {

    if (!self.page_spread) {
      return;
    }

    if (self.page_spread != Constants.SPREAD_LEFT &&
      self.page_spread != Constants.SPREAD_RIGHT &&
      self.page_spread != Constants.SPREAD_CENTER) {

      console.error(self.page_spread + " is not a recognized spread type");
    }

  }

  this.isLeftPage = function() {
    return self.page_spread == Constants.SPREAD_LEFT;
  };

  this.isRightPage = function() {
    return self.page_spread == Constants.SPREAD_RIGHT;
  };

  this.isCenterPage = function() {
    return self.page_spread == Constants.SPREAD_CENTER;
  };

  this.isReflowable = function() {
    return !self.isFixedLayout();
  };

  this.isFixedLayout = function() {

    // cannot use isPropertyValueSetForItemOrPackage() here!

    var isLayoutExplicitlyDefined = self.getRenditionLayout();

    if (isLayoutExplicitlyDefined) {

      if (self.rendition_layout) {
        if (self.rendition_layout === Constants.RENDITION_LAYOUT_PREPAGINATED) return true;
        if (self.rendition_layout === Constants.RENDITION_LAYOUT_REFLOWABLE) return false;
      }

      return self.spine.package.isFixedLayout();
    }

    // if image or svg use fixed layout
    return self.media_type.indexOf("image/") >= 0;

  };

  this.getRenditionFlow = function() {

    if (self.rendition_flow) {
      return self.rendition_flow;
    }

    return self.spine.package.rendition_flow;
  };

  this.getRenditionViewport = function() {

    if (self.rendition_viewport) {
      return self.rendition_viewport;
    }

    return self.spine.package.rendition_viewport;
  };

  this.getRenditionSpread = function() {

    if (self.rendition_spread) {
      return self.rendition_spread;
    }

    return self.spine.package.rendition_spread;
  };

  this.getRenditionOrientation = function() {

    if (self.rendition_orientation) {
      return self.rendition_orientation;
    }

    return self.spine.package.rendition_orientation;
  };

  this.getRenditionLayout = function() {

    if (self.rendition_layout) {
      return self.rendition_layout;
    }

    return self.spine.package.rendition_layout;
  };

  function isPropertyValueSetForItemOrPackage(propName, propValue) {

    if (self[propName]) {
      return self[propName] === propValue;
    }

    if (self.spine.package[propName]) {
      return self.spine.package[propName] === propValue;
    }

    return false;
  }

  this.isFlowScrolledContinuous = function() {

    return isPropertyValueSetForItemOrPackage("rendition_flow", Constants.RENDITION_FLOW_SCROLLED_CONTINUOUS);
  };

  this.isFlowScrolledDoc = function() {

    return isPropertyValueSetForItemOrPackage("rendition_flow", Constants.RENDITION_FLOW_SCROLLED_DOC);
  };
};

SpineItem.alternateSpread = function(spread) {

  if (spread === Constants.SPREAD_LEFT) {
    return Constants.SPREAD_RIGHT;
  }

  if (spread === Constants.SPREAD_RIGHT) {
    return Constants.SPREAD_LEFT;
  }

  return spread;

};

module.exports = SpineItem
},{"./spine-item-constants":"/Users/craverod/opensource/readium-js/src/sdk/models/spine-item-constants.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/spine.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 *  Wrapper of the spine object received from hosting application
 *
 *  @class  ReadiumSDK.Models.Spine
 */

var SpineItem = require('./spine-item')
var SpineItemConstants = require('./spine-item-constants')

function Spine(epubPackage, spineDTO) {

  var self = this;

  /*
   * Collection of spine items
   * @property items
   * @type {Array}
   */
  this.items = [];

  /*
   * Page progression direction ltr|rtl|default
   * @property direction
   * @type {string}
   */
  this.direction = "ltr";

  /*
   * @property package
   * @type {ReadiumSDK.Models.Package}
   *
   */
  this.package = epubPackage;

  var _handleLinear = false;

  this.handleLinear = function(handleLinear) {
    _handleLinear = handleLinear;
  };

  function isValidLinearItem(item) {
    return !_handleLinear || item.linear !== "no";
  }


  this.isValidLinearItem = function(index) {

    if (!isValidIndex(index)) {
      return undefined;
    }

    return isValidLinearItem(this.item(index));
  };

  this.prevItem = function(item) {

    return lookForPrevValidItem(item.index - 1);
  };

  function lookForNextValidItem(ix) {

    if (!isValidIndex(ix)) {
      return undefined;
    }

    var item = self.items[ix];

    if (isValidLinearItem(item)) {
      return item;
    }

    return lookForNextValidItem(item.index + 1);
  }

  function lookForPrevValidItem(ix) {

    if (!isValidIndex(ix)) {
      return undefined;
    }

    var item = self.items[ix];

    if (isValidLinearItem(item)) {
      return item;
    }

    return lookForPrevValidItem(item.index - 1);
  }

  this.nextItem = function(item) {

    return lookForNextValidItem(item.index + 1);
  };

  this.getItemUrl = function(item) {

    return self.package.resolveRelativeUrl(item.href);

  };

  function isValidIndex(index) {

    return index >= 0 && index < self.items.length;
  }

  this.first = function() {

    return lookForNextValidItem(0);
  };

  this.last = function() {

    return lookForPrevValidItem(this.items.length - 1);
  };

  this.isFirstItem = function(item) {

    return self.first() === item;
  };

  this.isLastItem = function(item) {

    return self.last() === item;
  };

  this.item = function(index) {

    if (isValidIndex(index))
      return self.items[index];

    return undefined;
  };

  this.isRightToLeft = function() {

    return self.direction == "rtl";
  };

  this.isLeftToRight = function() {

    return !self.isRightToLeft();
  };

  this.getItemById = function(idref) {

    var length = self.items.length;

    for (var i = 0; i < length; i++) {
      if (self.items[i].idref == idref) {

        return self.items[i];
      }
    }

    return undefined;
  };

  this.getItemByHref = function(href) {

    var length = self.items.length;

    for (var i = 0; i < length; i++) {
      if (self.items[i].href == href) {

        return self.items[i];
      }
    }

    return undefined;
  };

  function updateSpineItemsSpread() {

    var len = self.items.length;

    var isFirstPageInSpread = false;
    var baseSide = self.isLeftToRight() ? SpineItemConstants.SPREAD_LEFT : SpineItemConstants.SPREAD_RIGHT;

    for (var i = 0; i < len; i++) {

      var spineItem = self.items[i];
      if (!spineItem.page_spread) {

        var spread = spineItem.isRenditionSpreadAllowed() ? (isFirstPageInSpread ? baseSide : SpineItem.alternateSpread(baseSide)) : SpineItemConstants.SPREAD_CENTER;
        spineItem.setSpread(spread);
      }

      isFirstPageInSpread = !spineItem.isRenditionSpreadAllowed() || spineItem.page_spread != baseSide;
    }
  }

  if (spineDTO) {

    if (spineDTO.direction) {
      this.direction = spineDTO.direction;
    }

    var length = spineDTO.items.length;
    for (var i = 0; i < length; i++) {
      var item = new SpineItem(spineDTO.items[i], i, this);
      this.items.push(item);
    }

    updateSpineItemsSpread();
  }

};

module.exports = Spine
},{"./spine-item":"/Users/craverod/opensource/readium-js/src/sdk/models/spine-item.js","./spine-item-constants":"/Users/craverod/opensource/readium-js/src/sdk/models/spine-item-constants.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/spread.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

// This file was readium-js-shared/js/models/fixed_page_spread.js

var POSITION_LEFT = "left";
var POSITION_RIGHT = "right";
var POSITION_CENTER = "center";

/**
 *
 *
 *
 * @param {ReadiumSDK.Models.Spine} spine
 * @constructor
 */

var Spread = function(spine, isSyntheticSpread) {

  var self = this;

  this.spine = spine;

  this.leftItem = undefined;
  this.rightItem = undefined;
  this.centerItem = undefined;

  var _isSyntheticSpread = isSyntheticSpread;

  this.setSyntheticSpread = function(isSyntheticSpread) {
    _isSyntheticSpread = isSyntheticSpread;
  };

  this.isSyntheticSpread = function() {
    return _isSyntheticSpread;
  };

  this.openFirst = function() {

    if (this.spine.items.length == 0) {
      resetItems();
    } else {
      this.openItem(this.spine.first());
    }
  };

  this.openLast = function() {

    if (this.spine.items.length == 0) {
      resetItems();
    } else {
      this.openItem(this.spine.last());
    }
  };

  this.openItem = function(item) {

    resetItems();

    var position = getItemPosition(item);
    setItemToPosition(item, position);

    if (position != POSITION_CENTER && this.spine.isValidLinearItem(item.index)) { // && item.isRenditionSpreadAllowed() not necessary, see getItemPosition() below
      var neighbour = getNeighbourItem(item);
      if (neighbour) {
        var neighbourPos = getItemPosition(neighbour);
        if (neighbourPos != position && neighbourPos != POSITION_CENTER && !neighbour.isReflowable() && neighbour.isRenditionSpreadAllowed()) {
          setItemToPosition(neighbour, neighbourPos);
        }
      }
    }
  };

  function resetItems() {

    self.leftItem = undefined;
    self.rightItem = undefined;
    self.centerItem = undefined;
  }

  function setItemToPosition(item, position) {

    if (position == POSITION_LEFT) {
      self.leftItem = item;
    } else if (position == POSITION_RIGHT) {
      self.rightItem = item;
    } else {

      if (position != POSITION_CENTER) {
        console.error("Unrecognized position value");
      }

      self.centerItem = item;
    }
  }

  function getItemPosition(item) {

    // includes !item.isRenditionSpreadAllowed() ("rendition:spread-none") ==> force center position
    if (!_isSyntheticSpread) {
      return POSITION_CENTER;
    }

    if (item.isLeftPage()) {
      return POSITION_LEFT;
    }

    if (item.isRightPage()) {
      return POSITION_RIGHT;
    }

    return POSITION_CENTER;
  }

  this.openNext = function() {

    var items = this.validItems();

    if (items.length == 0) {

      this.openFirst();
    } else {

      var nextItem = this.spine.nextItem(items[items.length - 1]);
      if (nextItem) {

        this.openItem(nextItem);
      }
    }
  };

  this.openPrev = function() {

    var items = this.validItems();

    if (items.length == 0) {
      this.openLast();
    } else {

      var prevItem = this.spine.prevItem(items[0]);
      if (prevItem) {

        this.openItem(prevItem);

      }
    }
  };

  this.validItems = function() {

    var arr = [];

    if (this.leftItem) arr.push(this.leftItem);
    if (this.rightItem) arr.push(this.rightItem);
    if (this.centerItem) arr.push(this.centerItem);

    arr.sort(function(a, b) {
      return a.index - b.index;
    });

    return arr;
  };

  function getNeighbourItem(item) {

    if (item.isLeftPage()) {
      return self.spine.isRightToLeft() ? self.spine.prevItem(item) : self.spine.nextItem(item);
    }

    if (item.isRightPage()) {
      return self.spine.isRightToLeft() ? self.spine.nextItem(item) : self.spine.prevItem(item);
    }

    return undefined;
  }

};

module.exports = Spread
},{}],"/Users/craverod/opensource/readium-js/src/sdk/models/style.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 *
 * @param selector
 * @param declarations
 * @constructor
 */
var Style = function(selector, declarations) {

  this.selector = selector;
  this.declarations = declarations;

  this.setDeclarations = function(declarations) {

    for (var prop in declarations) {
      if (declarations.hasOwnProperty(prop)) {
        this.declarations[prop] = declarations[prop];
      }
    }

  }
};

module.exports = Style
},{}],"/Users/craverod/opensource/readium-js/src/sdk/models/switches.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')

// Description: Parse the epub "switch" tags and hide
// cases that are not supported
function apply(dom) {


  // helper method, returns true if a given case node
  // is supported, false otherwise
  function isSupported(caseNode) {

    var ns = caseNode.attributes["required-namespace"];
    if (!ns) {
      // the namespace was not specified, that should
      // never happen, we don't support it then
      console.log("Encountered a case statement with no required-namespace");
      return false;
    }
    // all the xmlns that readium is known to support
    // TODO this is going to require maintenance
    var supportedNamespaces = ["http://www.w3.org/1998/Math/MathML"];
    return _.include(supportedNamespaces, ns);
  }

  $('switch', dom).each(function() {

    // keep track of whether or now we found one
    var found = false;

    $('case', this).each(function() {

      if (!found && isSupported(this)) {
        found = true; // we found the node, don't remove it
      } else {
        $(this).remove(); // remove the node from the dom
        //                    $(this).prop("hidden", true);
      }
    });

    if (found) {
      // if we found a supported case, remove the default
      $('default', this).remove();
      //                $('default', this).prop("hidden", true);
    }
  })
};

module.exports = {
  apply: apply
}
},{"jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/trigger.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')
var escapeJQuerySelector = require('../helpers/escape-jquery-selector')
var Trigger = require('./trigger')

/**
 * Setter fot epub Triggers
 *
 *
 * @param domNode
 */

var Trigger = function(domNode) {
  var $el = $(domNode);
  this.action = $el.attr("action");
  this.ref = $el.attr("ref");
  this.event = $el.attr("ev:event");
  this.observer = $el.attr("ev:observer");
  this.ref = $el.attr("ref");
};

Trigger.register = function(dom) {
  $('trigger', dom).each(function() {
    var trigger = new Trigger(this);
    trigger.subscribe(dom);
  });
};

Trigger.prototype.subscribe = function(dom) {
  var selector = "#" + this.observer;
  var that = this;
  $(selector, dom).on(this.event, function() {
    that.execute(dom);
  });
};

Trigger.prototype.execute = function(dom) {
  var $target = $("#" + escapeJQuerySelector(this.ref), dom);
  switch (this.action) {
    case "show":
      $target.css("visibility", "visible");
      break;
    case "hide":
      $target.css("visibility", "hidden");
      break;
    case "play":
      $target[0].currentTime = 0;
      $target[0].play();
      break;
    case "pause":
      $target[0].pause();
      break;
    case "resume":
      $target[0].play();
      break;
    case "mute":
      $target[0].muted = true;
      break;
    case "unmute":
      $target[0].muted = false;
      break;
    default:
      console.log("do not no how to handle trigger " + this.action);
  }
};

module.exports = Trigger
},{"../helpers/escape-jquery-selector":"/Users/craverod/opensource/readium-js/src/sdk/helpers/escape-jquery-selector.js","./trigger":"/Users/craverod/opensource/readium-js/src/sdk/models/trigger.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/src/sdk/models/viewer-settings.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 *
 * @param settingsData
 * @constructor
 */
var ViewerSettings = function(settingsData) {

  var self = this;

  this.syntheticSpread = "auto";
  this.fontSize = 100;
  this.columnGap = 20;

  this.mediaOverlaysPreservePlaybackWhenScroll = false;

  this.mediaOverlaysSkipSkippables = false;
  this.mediaOverlaysEscapeEscapables = true;

  this.mediaOverlaysSkippables = [];
  this.mediaOverlaysEscapables = [];

  this.mediaOverlaysEnableClick = true;
  this.mediaOverlaysRate = 1;
  this.mediaOverlaysVolume = 100;

  this.mediaOverlaysSynchronizationGranularity = "";

  this.mediaOverlaysAutomaticPageTurn = true;

  this.enableGPUHardwareAccelerationCSS3D = false;

  // -1 ==> disable
  // [0...n] ==> index of transition in pre-defined array
  this.pageTransition = -1;

  this.scroll = "auto";

  function buildArray(str) {
    var retArr = [];
    var arr = str.split(/[\s,;]+/); //','
    for (var i = 0; i < arr.length; i++) {
      var item = arr[i].trim();
      if (item !== "") {
        retArr.push(item);
      }
    }
    return retArr;
  }

  function mapProperty(propName, settingsData, functionToApply) {

    if (settingsData[propName] !== undefined) {
      if (functionToApply) {

        self[propName] = functionToApply(settingsData[propName]);
      } else {
        self[propName] = settingsData[propName];
      }
    }

  }

  this.update = function(settingsData) {

    mapProperty("columnGap", settingsData);
    mapProperty("fontSize", settingsData);
    mapProperty("mediaOverlaysPreservePlaybackWhenScroll", settingsData);
    mapProperty("mediaOverlaysSkipSkippables", settingsData);
    mapProperty("mediaOverlaysEscapeEscapables", settingsData);
    mapProperty("mediaOverlaysSkippables", settingsData, buildArray);
    mapProperty("mediaOverlaysEscapables", settingsData, buildArray);
    mapProperty("mediaOverlaysEnableClick", settingsData);
    mapProperty("mediaOverlaysRate", settingsData);
    mapProperty("mediaOverlaysVolume", settingsData);
    mapProperty("mediaOverlaysSynchronizationGranularity", settingsData);
    mapProperty("mediaOverlaysAutomaticPageTurn", settingsData);
    mapProperty("scroll", settingsData);
    mapProperty("syntheticSpread", settingsData);
    mapProperty("pageTransition", settingsData);
    mapProperty("enableGPUHardwareAccelerationCSS3D", settingsData);
  };

  this.update(settingsData);
};

module.exports = ViewerSettings;
},{}],"/Users/craverod/opensource/readium-js/src/sdk/navigator-shim.js":[function(require,module,exports){
if (navigator) {
  //This is default implementation of reading system object that will be available for the publication's javascript to analyze at runtime
  //To extend/modify/replace this object reading system should subscribe ReadiumSDK.Events.READER_INITIALIZED and apply changes in reaction to this event
  navigator.epubReadingSystem = {
    name: "",
    version: "0.0.0",
    layoutStyle: "paginated",

    hasFeature: function(feature, version) {

      // for now all features must be version 1.0 so fail fast if the user has asked for something else
      if (version && version !== "1.0") {
        return false;
      }

      if (feature === "dom-manipulation") {
        // Scripts may make structural changes to the document???s DOM (applies to spine-level scripting only).
        return true;
      }
      if (feature === "layout-changes") {
        // Scripts may modify attributes and CSS styles that affect content layout (applies to spine-level scripting only).
        return true;
      }
      if (feature === "touch-events") {
        // The device supports touch events and the Reading System passes touch events to the content.
        return false;
      }
      if (feature === "mouse-events") {
        // The device supports mouse events and the Reading System passes mouse events to the content.
        return true;
      }
      if (feature === "keyboard-events") {
        // The device supports keyboard events and the Reading System passes keyboard events to the content.
        return true;
      }

      if (feature === "spine-scripting") {
        //Spine-level scripting is supported.
        return true;
      }

      return false;
    }
  };
}
},{}],"/Users/craverod/opensource/readium-js/src/sdk/views/annotations-manager.js":[function(require,module,exports){
//  Created by Dmitry Markushevich (dmitrym@evidentpoint.com)
// 
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/*



# Highlighting in Readium - A primer

Please note:

- only simple text highlighting is currently supported
- it's the job of the reading system to keep track of annotations. readium-js simply displays your annotations.
- full CFIs for annotations are not currently available. We use so called "partial CFI"s, a tuple containing idref of the spine item and the CFI definition relative to the root of the spine item.

Currently, the API exposed via `ReaderView` exposes 4 functions and 1 even which should be sufficient for a simple highlighting workflow.


# API

For the purposes of the examples below, `RReader` is a previously instantiated `ReaderView` instance.


## Is anything selected (getCurrentSelectionCfi())

Before proceeding with the highlighting workflow it is sometimes necessary to determine whether the user has in fact selected anything. This can be accomplished with the following:


	> RReader.getCurrentSelectionCfi()
	Object {idref: "id-id2604743", cfi: "/4/2/6,/1:74,/1:129"}

The response contains a partial CFI that is sufficient to create a highlight based on selection. If nothing is selected *undefined* is returned. 

You can also use partial Cfi with `openSpineItemElementCfi()` to navigate to where this selection is later.

## Highlighting (addHighlight and addSelectionHighlight)

Once we've determined what needs to be highlighted (by generating a partial CFI from a selection, or having an existing partial CFI stored externally) we can add it to the reader by calling `addHighlight()`:

	> RReader.addHighlight('id-id2604743', "/4/2/6,/1:74,/1:129", 123, "highlight")
	Object {CFI: "/4/2/6,/1:74,/1:129", selectedElements: Array[1], idref: "id-id2604743"}

*addHighligh*t takes the following parameters:

- *id-id2604743* - `idref` is the idref value from `getCurrentSelectionCfi()
- * /4/2/6,/1:74,/1:129* - `cfi` is the cfi value from `getCurrentSelectionCfi()
- *123* - `id` is the unique id that defines this annotation
- *highlight* - 'type' of annotation. only 'highlight' is currently supported.

### addSelectioHighlight

Alternatively, you can call addSelectionHighlight(). It combines both getCurrentSelectionCfi() and addHighlight into one call:

	> RReader.addSelectionHighlight(124, "highlight")
	Object {CFI: "/4/2/4,/1:437,/1:503", selectedElements: Array[1], idref: "id-id2604743"}

Note that it provides no validation. If nothing is selected, `undefined` is returned.


## Removing highlights 

To remove the highlight, call `removeHighlight`:

	> RReader.removeHighlight(123)
	undefined


# Handling annotation click events

When a user clicks on a highlight `annotationClicked` event is dispatched with the following arguments:

- type of annotation
- idref of the spine item
- partial Cfi of the annotation
- annotationdId


	> RReader.on('annotationClicked', function(type, idref, cfi, annotationId) { console.log (type, idref, cfi, annotationId)});
	ReadiumSDK.Views.ReaderView {on: function, once: function, off: function, trigger: function, listenTo: function???}
	
Then when the user clicks on the highlight the following will show up in the console:

	highlight id-id2604743 /4/2/6,/1:74,/1:129 123 
	

*/

var _ = require('underscore')
var Backbone = require('backbone')
var EpubAnnotations = require('../../epub-annotations')

/**
 *
 * @param proxyObj
 * @param options
 * @constructor
 */
function AnnotationsManager(proxyObj, options) {

  var self = this;
  var liveAnnotations = {};
  var spines = {};
  var proxy = proxyObj;
  var annotationCSSUrl = options.annotationCSSUrl;

  if (!annotationCSSUrl) {
    console.warn("WARNING! Annotations CSS not supplied. Highlighting is not going to work.");
  }

  _.extend(self, Backbone.Events);

  // we want to bubble up all of the events that annotations module may trigger up.
  this.on("all", function(eventName) {
    var args = Array.prototype.slice.call(arguments);
    // mangle annotationClicked event. What really needs to happen is, the annotation_module needs to return a 
    // bare Cfi, and this class should append the idref.
    var annotationClickedEvent = 'annotationClicked';
    if (args.length && args[0] === annotationClickedEvent) {
      for (var spineIndex in liveAnnotations) {
        var jQueryEvent = args[4];
        var annotationId = args[3];
        var fullFakeCfi = args[2];
        var type = args[1];
        if (liveAnnotations[spineIndex].getHighlight(annotationId)) {
          var idref = spines[spineIndex].idref;
          var partialCfi = getPartialCfi(fullFakeCfi);
          args = [annotationClickedEvent, type, idref, partialCfi, annotationId, jQueryEvent];
        }
      }
    }
    self['trigger'].apply(proxy, args);
  });

  this.attachAnnotations = function($iframe, spineItem) {
    var epubDocument = $iframe[0].contentDocument;
    liveAnnotations[spineItem.index] = new EpubAnnotations(epubDocument, self, annotationCSSUrl);
    spines[spineItem.index] = spineItem;

    // check to see which spine indecies can be culled depending on the distance from current spine item
    for (var spineIndex in liveAnnotations) {
      if (Math.abs(spineIndex - spineIndex.index) > 3) {
        delete liveAnnotations[spineIndex];
      }
    }
  };


  this.getCurrentSelectionCfi = function() {
    for (var spine in liveAnnotations) {
      var annotationsForView = liveAnnotations[spine];
      var partialCfi = annotationsForView.getCurrentSelectionCFI();
      if (partialCfi) {
        return {
          "idref": spines[spine].idref,
          "cfi": partialCfi
        };
      }
    }
    return undefined;
  };

  this.addSelectionHighlight = function(id, type) {
    for (spine in liveAnnotations) {
      var annotationsForView = liveAnnotations[spine];
      if (annotationsForView.getCurrentSelectionCFI()) {
        var annotation = annotationsForView.addSelectionHighlight(id, type);
        annotation.idref = spines[spine].idref;
        return annotation;
      }
    }
    return undefined;
  };

  this.addHighlight = function(spineIdRef, partialCfi, id, type, styles) {
    for (var spine in liveAnnotations) {
      if (spines[spine].idref === spineIdRef) {
        var fakeCfi = "epubcfi(/99!" + partialCfi + ")";
        var annotationsForView = liveAnnotations[spine];
        var annotation = annotationsForView.addHighlight(fakeCfi, id, type, styles);
        annotation.idref = spineIdRef;
        annotation.CFI = getPartialCfi(annotation.CFI);
        return annotation;
      }
    }
    return undefined;
  };

  this.removeHighlight = function(id) {
    var result = undefined;
    for (var spine in liveAnnotations) {
      var annotationsForView = liveAnnotations[spine];
      result = annotationsForView.removeHighlight(id);
    }
    return result;
  };



  function getPartialCfi(CFI) {
    var cfiWrapperPattern = new RegExp("^.*!")
      // remove epubcfi( and indirection step
    var partiallyNakedCfi = CFI.replace(cfiWrapperPattern, "");
    // remove last paren
    var nakedCfi = partiallyNakedCfi.substring(0, partiallyNakedCfi.length - 1);
    return nakedCfi;
  }


};

module.exports = AnnotationsManager
},{"../../epub-annotations":"/Users/craverod/opensource/readium-js/src/epub-annotations/index.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/audio-player.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck, Andrey Kavarma
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.


var _iOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false;
var _Android = navigator.userAgent.toLowerCase().indexOf('android') > -1;
var _isMobile = _iOS || _Android;

//var _isReadiumJS = typeof window.requirejs !== "undefined";

var DEBUG = false;

var _audioElement = new Audio();

if (DEBUG) {
  _audioElement.addEventListener("load", function() {
    console.debug("0) load");
  });

  _audioElement.addEventListener("loadstart", function() {
    console.debug("1) loadstart");
  });

  _audioElement.addEventListener("durationchange", function() {
    console.debug("2) durationchange");
  });

  _audioElement.addEventListener("loadedmetadata", function() {
    console.debug("3) loadedmetadata");
  });

  _audioElement.addEventListener("loadeddata", function() {
    console.debug("4) loadeddata");
  });

  _audioElement.addEventListener("progress", function() {
    console.debug("5) progress");
  });

  _audioElement.addEventListener("canplay", function() {
    console.debug("6) canplay");
  });

  _audioElement.addEventListener("canplaythrough", function() {
    console.debug("7) canplaythrough");
  });

  _audioElement.addEventListener("play", function() {
    console.debug("8) play");
  });

  _audioElement.addEventListener("pause", function() {
    console.debug("9) pause");
  });

  _audioElement.addEventListener("ended", function() {
    console.debug("10) ended");
  });

  _audioElement.addEventListener("seeked", function() {
    console.debug("X) seeked");
  });

  _audioElement.addEventListener("timeupdate", function() {
    console.debug("Y) timeupdate");
  });

  _audioElement.addEventListener("seeking", function() {
    console.debug("Z) seeking");
  });
}

/**
 *
 * @param onStatusChanged
 * @param onPositionChanged
 * @param onAudioEnded
 * @param onAudioPlay
 * @param onAudioPause
 * @constructor
 */
function AudioPlayer(onStatusChanged, onPositionChanged, onAudioEnded, onAudioPlay, onAudioPause) {
  var self = this;

  //_audioElement.setAttribute("preload", "auto");

  var _currentEpubSrc = undefined;

  var _currentSmilSrc = undefined;
  this.currentSmilSrc = function() {
    return _currentSmilSrc;
  };

  var _rate = 1.0;
  this.setRate = function(rate) {
    _rate = rate;
    if (_rate < 0.5) {
      _rate = 0.5;
    }
    if (_rate > 4.0) {
      _rate = 4.0;
    }

    _audioElement.playbackRate = _rate;
  }
  self.setRate(_rate);
  this.getRate = function() {
    return _rate;
  }


  var _volume = 100.0;
  this.setVolume = function(volume) {
    _volume = volume;
    if (_volume < 0.0) {
      _volume = 0.0;
    }
    if (_volume > 1.0) {
      _volume = 1.0;
    }
    _audioElement.volume = _volume;
  }
  self.setVolume(_volume);
  this.getVolume = function() {
    return _volume;
  }

  this.play = function() {
    if (DEBUG) {
      console.error("this.play()");
    }

    if (!_currentEpubSrc) {
      return false;
    }

    startTimer();

    self.setVolume(_volume);
    self.setRate(_rate);

    _audioElement.play();

    return true;
  };

  this.pause = function() {
    if (DEBUG) {
      console.error("this.pause()");
    }

    stopTimer();

    _audioElement.pause();
  };

  _audioElement.addEventListener('play', onPlay, false);
  _audioElement.addEventListener('pause', onPause, false);
  _audioElement.addEventListener('ended', onEnded, false);

  function onPlay() {
    onStatusChanged({
      isPlaying: true
    });
    onAudioPlay();
  }

  function onPause() {
    onAudioPause();
    onStatusChanged({
      isPlaying: false
    });
  }

  function onEnded() {
    if (_audioElement.moSeeking) {
      if (DEBUG) {
        console.debug("onEnded() skipped (still seeking...)");
      }

      return;
    }

    stopTimer();

    onAudioEnded();
    onStatusChanged({
      isPlaying: false
    });
  }

  var _intervalTimerSkips = 0;

  var _intervalTimer = undefined;

  function startTimer() {
    if (_intervalTimer) {
      return;
    }

    _intervalTimer = setInterval(
      function() {
        if (_audioElement.moSeeking) {
          if (DEBUG) {
            //console.debug("interval timer skipped (still seeking...)");
          }

          _intervalTimerSkips++;
          if (_intervalTimerSkips > 1000) {
            _intervalTimerSkips = 0;
            stopTimer();
          }
          return;
        }

        var currentTime = undefined;
        try {
          currentTime = _audioElement.currentTime;
        } catch (ex) {
          console.error(ex.message);
        }

        //                if (DEBUG)
        //                {
        //                    console.debug("currentTime: " + currentTime);
        //                }

        if (currentTime) {
          onPositionChanged(currentTime, 1);
        }
      }, 20);
  }

  function stopTimer() {
    if (_intervalTimer) {
      clearInterval(_intervalTimer);
    }
    _intervalTimer = undefined;
  }

  this.isPlaying = function() {
    return _intervalTimer !== undefined;
  };

  this.reset = function() {
    if (DEBUG) {
      console.error("this.reset()");
    }

    this.pause();

    _audioElement.moSeeking = undefined;

    _currentSmilSrc = undefined;
    _currentEpubSrc = undefined;

    setTimeout(function() {
      _audioElement.setAttribute("src", "");
    }, 1);
  };


  _audioElement.addEventListener("loadstart", function() {
    _touchInited = true;
  });
  var _touchInited = false;
  this.touchInit = function() {
    if (!_iOS) {
      return false;
    }

    if (_touchInited) {
      return false;
    }

    _touchInited = true;

    _audioElement.setAttribute("src", "touch/init/html5/audio.mp3");
    _audioElement.load();

    return true;
  }

  var _playId = 0;

  var _seekQueuing = 0;

  this.playFile = function(smilSrc, epubSrc, seekBegin) //element
    {
      _playId++;
      if (_playId > 99999) {
        _playId = 0;
      }

      var playId = _playId;

      if (_audioElement.moSeeking) {
        _seekQueuing++;
        if (_seekQueuing > MAX_SEEK_RETRIES) {
          _seekQueuing = 0;
          return;
        }

        if (DEBUG) {
          console.debug("this.playFile(" + epubSrc + ")" + " @" + seekBegin + " (POSTPONE, SEEKING...)");
        }

        setTimeout(function() {
          self.playFile(smilSrc, epubSrc, seekBegin);
        }, 20);

        return;
      }

      _audioElement.moSeeking = {};

      if (DEBUG) {
        console.debug("this.playFile(" + epubSrc + ")" + " @" + seekBegin + " #" + playId);
      }

      var audioNeedsNewSrc = !_currentEpubSrc || _currentEpubSrc !== epubSrc;

      if (!audioNeedsNewSrc) {
        if (DEBUG) {
          console.debug("this.playFile() SAME SRC");
        }

        this.pause();

        _currentSmilSrc = smilSrc;
        _currentEpubSrc = epubSrc;

        playSeekCurrentTime(seekBegin, playId, false);

        return;
      }

      if (DEBUG) {
        console.debug("this.playFile() NEW SRC");
        console.debug("_currentEpubSrc: " + _currentEpubSrc);
        console.debug("epubSrc: " + epubSrc);
      }

      this.reset();
      _audioElement.moSeeking = {};

      _currentSmilSrc = smilSrc;
      _currentEpubSrc = epubSrc;

      //element.parentNode.insertBefore(_audioElement, element); //element.parentNode.childNodes[0]);

      if (!_Android) {
        _audioElement.addEventListener('play', onPlayToForcePreload, false);
      }

      $(_audioElement).on(_readyEvent, {
        seekBegin: seekBegin,
        playId: playId
      }, onReadyToSeek);

      setTimeout(function() {
        _audioElement.setAttribute("src", _currentEpubSrc);
        // _audioElement.src = _currentEpubSrc;
        // $(_audioElement).attr("src", _currentEpubSrc);

        // if (_Android)
        // {
        //     _audioElement.addEventListener('loadstart', onReadyToPlayToForcePreload, false);
        // }

        _audioElement.load();

        if (!_Android) {
          playToForcePreload();
        }
      }, 1);
    };

  // var onReadyToPlayToForcePreload = function ()
  // {
  //     _audioElement.removeEventListener('loadstart', onReadyToPlayToForcePreload, false);
  //     
  //     if (DEBUG)
  //     {
  //         console.debug("onReadyToPlayToForcePreload");
  //     }
  //     
  //     playToForcePreload();
  // };

  var playToForcePreload = function() {
    if (DEBUG) {
      console.debug("playToForcePreload");
    }

    //_audioElement.volume = 0;
    //_audioElement.play();
    var vol = _volume;
    _volume = 0;
    self.play();
    _volume = vol;
  };

  var onPlayToForcePreload = function() {
    _audioElement.removeEventListener('play', onPlayToForcePreload, false);

    if (DEBUG) {
      console.debug("onPlayToForcePreload");
    }
    _audioElement.pause(); // note: interval timer continues (immediately follows self.play())
  };

  var _readyEvent = _Android ? "canplaythrough" : "canplay";

  function onReadyToSeek_(event) {
    if (DEBUG) {
      console.debug("onReadyToSeek #" + event.data.playId);
    }
    playSeekCurrentTime(event.data.seekBegin, event.data.playId, true);
  }

  function onReadyToSeek(event) {
    $(_audioElement).off(_readyEvent, onReadyToSeek);

    if (!_Android) {
      onReadyToSeek_(event);
    } else {
      if (DEBUG) {
        console.debug("onReadyToSeek ANDROID ... waiting a bit ... #" + event.data.playId);
      }

      //self.play();
      playToForcePreload();

      setTimeout(function() {
        onReadyToSeek_(event);
      }, 1000);
    }
  }

  function playSeekCurrentTime(newCurrentTime, playId, isNewSrc) {
    if (DEBUG) {
      console.debug("playSeekCurrentTime() #" + playId);
    }

    if (newCurrentTime == 0) {
      newCurrentTime = 0.01;
    }

    if (Math.abs(newCurrentTime - _audioElement.currentTime) < 0.3) {
      if (DEBUG) {
        console.debug("playSeekCurrentTime() CONTINUE");
      }

      _audioElement.moSeeking = undefined;
      self.play();
      return;
    }

    var ev = isNewSrc ? _seekedEvent1 : _seekedEvent2;

    if (DEBUG) {
      console.debug("playSeekCurrentTime() NEED SEEK, EV: " + ev);
    }

    self.pause();

    $(_audioElement).on(ev, {
      newCurrentTime: newCurrentTime,
      playId: playId,
      isNewSrc: isNewSrc
    }, onSeeked);

    try {
      _audioElement.currentTime = newCurrentTime;
    } catch (ex) {
      console.error(ex.message);

      setTimeout(function() {
        try {
          _audioElement.currentTime = newCurrentTime;
        } catch (ex) {
          console.error(ex.message);
        }
      }, 5);
    }
  }

  var MAX_SEEK_RETRIES = 10;
  var _seekedEvent1 = _iOS ? "canplaythrough" : "seeked"; //"progress"
  var _seekedEvent2 = _iOS ? "timeupdate" : "seeked";

  function onSeeked(event) {
    var ev = event.data.isNewSrc ? _seekedEvent1 : _seekedEvent2;

    var notRetry = event.data.seekRetries == undefined;

    if (notRetry || event.data.seekRetries == MAX_SEEK_RETRIES) // first retry
    {
      $(_audioElement).off(ev, onSeeked);
    }

    if (DEBUG) {
      console.debug("onSeeked() #" + event.data.playId + " FIRST? " + notRetry + " EV: " + ev);
    }

    var curTime = _audioElement.currentTime;
    var diff = Math.abs(event.data.newCurrentTime - curTime);

    if ((notRetry || event.data.seekRetries >= 0) &&
      diff >= 1) {
      if (DEBUG) {
        console.debug("onSeeked() time diff: " + event.data.newCurrentTime + " vs. " + curTime + " (" + diff + ")");
      }

      if (notRetry) {
        event.data.seekRetries = MAX_SEEK_RETRIES;

        // if (DEBUG)
        // {
        //     console.debug("onSeeked() fail => first retry, EV: " + _seekedEvent2);
        // }

        event.data.isNewSrc = false;
        //$(_audioElement).on(_seekedEvent2, event.data, onSeeked);
      }

      //else
      {
        event.data.seekRetries--;

        if (DEBUG) {
          console.debug("onSeeked() FAIL => retry again (timeout)");
        }

        setTimeout(function() {
          onSeeked(event);
        }, _Android ? 1000 : 200);
      }

      setTimeout(function() {
        _audioElement.pause();
        try {
          _audioElement.currentTime = event.data.newCurrentTime;
        } catch (ex) {
          console.error(ex.message);

          setTimeout(function() {
            try {
              _audioElement.currentTime = event.data.newCurrentTime;
            } catch (ex) {
              console.error(ex.message);
            }
          }, 4);
        }
      }, 5);
    } else {
      if (DEBUG) {
        console.debug("onSeeked() STATE:");
        console.debug(notRetry);
        console.debug(event.data.seekRetries);
        console.debug(diff);
      }

      if (diff >= 1) {
        if (DEBUG) {
          console.debug("onSeeked() ABORT, TRY AGAIN FROM SCRATCH!");
        }

        var smilSrc = _currentSmilSrc;
        var epubSrc = _currentEpubSrc;
        var seekBegin = event.data.newCurrentTime;

        self.reset();

        setTimeout(function() {
          self.playFile(smilSrc, epubSrc, seekBegin);
        }, 10);

        return;
      }

      if (DEBUG) {
        console.debug("onSeeked() OKAY => play!");
      }

      event.data.seekRetries = undefined;

      self.play();

      _audioElement.moSeeking = undefined;
    }
  }
};

module.exports = AudioPlayer
},{}],"/Users/craverod/opensource/readium-js/src/sdk/views/cfi-navigation-logic.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.


var _ = require('underscore')
var $ = require('jquery')
var Rect = require('../helpers/rect')

/**
 * CFI navigation helper class
 *
 * @param $viewport
 * @param $iframe
 * @param options Additional settings for NavigationLogic object
 *      - rectangleBased    If truthy, clientRect-based geometry will be used
 *      - paginationInfo    Layout details, used by clientRect-based geometry
 * @constructor
 */

function CfiNavigationLogic($viewport, $iframe, options) {

  options = options || {};

  this.getRootElement = function() {

    return $iframe[0].contentDocument.documentElement;
  };

  // FIXED LAYOUT if (!options.rectangleBased) alert("!!!options.rectangleBased");

  var visibilityCheckerFunc = options.rectangleBased ? checkVisibilityByRectangles : checkVisibilityByVerticalOffsets;

  /**
   * @private
   * Checks whether or not pages are rendered right-to-left
   *
   * @returns {boolean}
   */
  function isPageProgressionRightToLeft() {
    return options.paginationInfo && !!options.paginationInfo.rightToLeft;
  }

  /**
   * @private
   * Checks whether or not pages are rendered with vertical writing mode
   *
   * @returns {boolean}
   */
  function isVerticalWritingMode() {
    return options.paginationInfo && !!options.paginationInfo.isVerticalWritingMode;
  }


  /**
   * @private
   * Checks whether or not a (fully adjusted) rectangle is at least partly visible
   *
   * @param {Object} rect
   * @param {Object} frameDimensions
   * @param {boolean} [isVwm]           isVerticalWritingMode
   * @returns {boolean}
   */
  function isRectVisible(rect, frameDimensions, isVwm) {
    if (isVwm) {
      return rect.top >= 0 && rect.top < frameDimensions.height;
    }
    return rect.left >= 0 && rect.left < frameDimensions.width;
  }

  /**
   * @private
   * Retrieves _current_ full width of a column (including its gap)
   *
   * @returns {number} Full width of a column in pixels
   */
  function getColumnFullWidth() {

    if (!options.paginationInfo || isVerticalWritingMode()) {
      return $iframe.width();
    }

    return options.paginationInfo.columnWidth + options.paginationInfo.columnGap;
  }

  /**
   * @private
   *
   * Retrieves _current_ offset of a viewport
   * (related to the beginning of the chapter)
   *
   * @returns {Object}
   */
  function getVisibleContentOffsets() {
    if (isVerticalWritingMode()) {
      return {
        top: (options.paginationInfo ? options.paginationInfo.pageOffset : 0)
      };
    }
    return {
      left: (options.paginationInfo ? options.paginationInfo.pageOffset : 0) * (isPageProgressionRightToLeft() ? -1 : 1)
    };
  }

  // Old (offsetTop-based) algorithm, useful in top-to-bottom layouts
  function checkVisibilityByVerticalOffsets(
    $element, visibleContentOffsets, shouldCalculateVisibilityOffset) {

    var elementRect = Rect.fromElement($element);
    if (_.isNaN(elementRect.left)) {
      // this is actually a point element, doesnt have a bounding rectangle
      elementRect = new Rect(
        $element.position().top, $element.position().left, 0, 0);
    }
    var topOffset = visibleContentOffsets.top || 0;
    var isBelowVisibleTop = elementRect.bottom() > topOffset;
    var isAboveVisibleBottom = visibleContentOffsets.bottom !== undefined ? elementRect.top < visibleContentOffsets.bottom : true; //this check always passed, if corresponding offset isn't set

    var percentOfElementHeight = 0;
    if (isBelowVisibleTop && isAboveVisibleBottom) { // element is visible
      if (!shouldCalculateVisibilityOffset) {
        return 100;
      } else if (elementRect.top <= topOffset) {
        percentOfElementHeight = Math.ceil(
          100 * (topOffset - elementRect.top) / elementRect.height
        );

        // below goes another algorithm, which has been used in getVisibleElements pattern,
        // but it seems to be a bit incorrect
        // (as spatial offset should be measured at the first visible point of the element):
        //
        // var visibleTop = Math.max(elementRect.top, visibleContentOffsets.top);
        // var visibleBottom = Math.min(elementRect.bottom(), visibleContentOffsets.bottom);
        // var visibleHeight = visibleBottom - visibleTop;
        // var percentVisible = Math.round((visibleHeight / elementRect.height) * 100);
      }
      return 100 - percentOfElementHeight;
    }
    return 0; // element isn't visible
  }

  /**
   * New (rectangle-based) algorithm, useful in multi-column layouts
   *
   * Note: the second param (props) is ignored intentionally
   * (no need to use those in normalization)
   *
   * @param {jQuery} $element
   * @param {Object} _props
   * @param {boolean} shouldCalculateVisibilityPercentage
   * @returns {number|null}
   *      0 for non-visible elements,
   *      0 < n <= 100 for visible elements
   *      (will just give 100, if `shouldCalculateVisibilityPercentage` => false)
   *      null for elements with display:none
   */
  function checkVisibilityByRectangles(
    $element, _props, shouldCalculateVisibilityPercentage) {

    var elementRectangles = getNormalizedRectangles($element);
    var clientRectangles = elementRectangles.clientRectangles;
    if (clientRectangles.length === 0) { // elements with display:none, etc.
      return null;
    }

    var isRtl = isPageProgressionRightToLeft();
    var isVwm = isVerticalWritingMode();
    var columnFullWidth = getColumnFullWidth();
    var frameDimensions = {
      width: $iframe.width(),
      height: $iframe.height()
    };

    if (clientRectangles.length === 1) {
      // because of webkit inconsistency, that single rectangle should be adjusted
      // until it hits the end OR will be based on the FIRST column that is visible
      adjustRectangle(clientRectangles[0], frameDimensions, columnFullWidth,
        isRtl, isVwm, true);
    }

    // for an element split between several CSS columns,
    // both Firefox and IE produce as many client rectangles;
    // each of those should be checked
    var visibilityPercentage = 0;
    for (var i = 0, l = clientRectangles.length; i < l; ++i) {
      if (isRectVisible(clientRectangles[i], frameDimensions, isVwm)) {
        visibilityPercentage = shouldCalculateVisibilityPercentage ? measureVisibilityPercentageByRectangles(clientRectangles, i) : 100;
        break;
      }
    }
    return visibilityPercentage;
  }

  /**
   * Finds a page index (0-based) for a specific element.
   * Calculations are based on rectangles retrieved with getClientRects() method.
   *
   * @param {jQuery} $element
   * @param {number} spatialVerticalOffset
   * @returns {number|null}
   */
  function findPageByRectangles($element, spatialVerticalOffset) {
    var visibleContentOffsets = getVisibleContentOffsets();
    var elementRectangles = getNormalizedRectangles($element, visibleContentOffsets);
    var clientRectangles = elementRectangles.clientRectangles;
    if (clientRectangles.length === 0) { // elements with display:none, etc.
      return null;
    }

    var isRtl = isPageProgressionRightToLeft();
    var isVwm = isVerticalWritingMode();
    var columnFullWidth = getColumnFullWidth();

    var frameHeight = $iframe.height();
    var frameWidth = $iframe.width();

    if (spatialVerticalOffset) {
      trimRectanglesByVertOffset(clientRectangles, spatialVerticalOffset,
        frameHeight, columnFullWidth, isRtl, isVwm);
    }

    var firstRectangle = _.first(clientRectangles);
    if (clientRectangles.length === 1) {
      adjustRectangle(firstRectangle, {
        height: frameHeight,
        width: frameWidth
      }, columnFullWidth, isRtl, isVwm);
    }

    var pageIndex;

    if (isVwm) {
      var topOffset = firstRectangle.top;
      pageIndex = Math.floor(topOffset / frameHeight);
    } else {
      var leftOffset = firstRectangle.left;
      if (isRtl) {
        leftOffset = (columnFullWidth * (options.paginationInfo ? options.paginationInfo.visibleColumnCount : 1)) - leftOffset;
      }
      pageIndex = Math.floor(leftOffset / columnFullWidth);
    }

    if (pageIndex < 0) {
      pageIndex = 0;
    } else if (pageIndex >= (options.paginationInfo ? options.paginationInfo.columnCount : 1)) {
      pageIndex = (options.paginationInfo ? (options.paginationInfo.columnCount - 1) : 0);
    }

    return pageIndex;
  }

  /**
   * @private
   * Calculates the visibility offset percentage based on ClientRect dimensions
   *
   * @param {Array} clientRectangles (should already be normalized)
   * @param {number} firstVisibleRectIndex
   * @returns {number} - visibility percentage (0 < n <= 100)
   */
  function measureVisibilityPercentageByRectangles(
    clientRectangles, firstVisibleRectIndex) {

    var heightTotal = 0;
    var heightVisible = 0;

    if (clientRectangles.length > 1) {
      _.each(clientRectangles, function(rect, index) {
        heightTotal += rect.height;
        if (index >= firstVisibleRectIndex) {
          // in this case, all the rectangles after the first visible
          // should be counted as visible
          heightVisible += rect.height;
        }
      });
    } else {
      // should already be normalized and adjusted
      heightTotal = clientRectangles[0].height;
      heightVisible = clientRectangles[0].height - Math.max(
        0, -clientRectangles[0].top);
    }
    return heightVisible === heightTotal ? 100 // trivial case: element is 100% visible
      : Math.floor(100 * heightVisible / heightTotal);
  }

  /**
   * @private
   * Retrieves the position of $element in multi-column layout
   *
   * @param {jQuery} $el
   * @param {Object} [visibleContentOffsets]
   * @returns {Object}
   */
  function getNormalizedRectangles($el, visibleContentOffsets) {

    visibleContentOffsets = visibleContentOffsets || {};
    var leftOffset = visibleContentOffsets.left || 0;
    var topOffset = visibleContentOffsets.top || 0;

    // union of all rectangles wrapping the element
    var wrapperRectangle = normalizeRectangle(
      $el[0].getBoundingClientRect(), leftOffset, topOffset);

    // all the separate rectangles (for detecting position of the element
    // split between several columns)
    var clientRectangles = [];
    var clientRectList = $el[0].getClientRects();
    for (var i = 0, l = clientRectList.length; i < l; ++i) {
      if (clientRectList[i].height > 0) {
        // Firefox sometimes gets it wrong,
        // adding literally empty (height = 0) client rectangle preceding the real one,
        // that empty client rectanle shouldn't be retrieved
        clientRectangles.push(
          normalizeRectangle(clientRectList[i], leftOffset, topOffset));
      }
    }

    if (clientRectangles.length === 0) {
      // sometimes an element is either hidden or empty, and that means
      // Webkit-based browsers fail to assign proper clientRects to it
      // in this case we need to go for its sibling (if it exists)
      $el = $el.next();
      if ($el.length) {
        return getNormalizedRectangles($el, visibleContentOffsets);
      }
    }

    return {
      wrapperRectangle: wrapperRectangle,
      clientRectangles: clientRectangles
    };
  }

  /**
   * @private
   * Converts TextRectangle object into a plain object,
   * taking content offsets (=scrolls, position shifts etc.) into account
   *
   * @param {TextRectangle} textRect
   * @param {number} leftOffset
   * @param {number} topOffset
   * @returns {Object}
   */
  function normalizeRectangle(textRect, leftOffset, topOffset) {

    var plainRectObject = {
      left: textRect.left,
      right: textRect.right,
      top: textRect.top,
      bottom: textRect.bottom,
      width: textRect.right - textRect.left,
      height: textRect.bottom - textRect.top
    };
    offsetRectangle(plainRectObject, leftOffset, topOffset);
    return plainRectObject;
  }

  /**
   * @private
   * Offsets plain object (which represents a TextRectangle).
   *
   * @param {Object} rect
   * @param {number} leftOffset
   * @param {number} topOffset
   */
  function offsetRectangle(rect, leftOffset, topOffset) {

    rect.left += leftOffset;
    rect.right += leftOffset;
    rect.top += topOffset;
    rect.bottom += topOffset;
  }

  /**
   * @private
   *
   * When element is spilled over two or more columns,
   * most of the time Webkit-based browsers
   * still assign a single clientRectangle to it, setting its `top` property to negative value
   * (so it looks like it's rendered based on the second column)
   * Alas, sometimes they decide to continue the leftmost column - from _below_ its real height.
   * In this case, `bottom` property is actually greater than element's height and had to be adjusted accordingly.
   *
   * Ugh.
   *
   * @param {Object} rect
   * @param {Object} frameDimensions
   * @param {number} columnFullWidth
   * @param {boolean} isRtl
   * @param {boolean} isVwm               isVerticalWritingMode
   * @param {boolean} shouldLookForFirstVisibleColumn
   *      If set, there'll be two-phase adjustment
   *      (to align a rectangle with a viewport)

   */
  function adjustRectangle(rect, frameDimensions, columnFullWidth, isRtl, isVwm,
    shouldLookForFirstVisibleColumn) {

    // Rectangle adjustment is not needed in VWM since it does not deal with columns
    if (isVwm) {
      return;
    }

    if (isRtl) {
      columnFullWidth *= -1; // horizontal shifts are reverted in RTL mode
    }

    // first we go left/right (rebasing onto the very first column available)
    while (rect.top < 0) {
      offsetRectangle(rect, -columnFullWidth, frameDimensions.height);
    }

    // ... then, if necessary (for visibility offset checks),
    // each column is tried again (now in reverse order)
    // the loop will be stopped when the column is aligned with a viewport
    // (i.e., is the first visible one).
    if (shouldLookForFirstVisibleColumn) {
      while (rect.bottom >= frameDimensions.height) {
        if (isRectVisible(rect, frameDimensions, isVwm)) {
          break;
        }
        offsetRectangle(rect, columnFullWidth, -frameDimensions.height);
      }
    }
  }

  /**
   * @private
   * Trims the rectangle(s) representing the given element.
   *
   * @param {Array} rects
   * @param {number} verticalOffset
   * @param {number} frameHeight
   * @param {number} columnFullWidth
   * @param {boolean} isRtl
   * @param {boolean} isVwm               isVerticalWritingMode
   */
  function trimRectanglesByVertOffset(
    rects, verticalOffset, frameHeight, columnFullWidth, isRtl, isVwm) {

    //TODO: Support vertical writing mode
    if (isVwm) {
      return;
    }

    var totalHeight = _.reduce(rects, function(prev, cur) {
      return prev + cur.height;
    }, 0);

    var heightToHide = totalHeight * verticalOffset / 100;
    if (rects.length > 1) {
      var heightAccum = 0;
      do {
        heightAccum += rects[0].height;
        if (heightAccum > heightToHide) {
          break;
        }
        rects.shift();
      } while (rects.length > 1);
    } else {
      // rebase to the last possible column
      // (so that adding to top will be properly processed later)
      if (isRtl) {
        columnFullWidth *= -1;
      }
      while (rects[0].bottom >= frameHeight) {
        offsetRectangle(rects[0], columnFullWidth, -frameHeight);
      }

      rects[0].top += heightToHide;
      rects[0].height -= heightToHide;
    }
  }

  //we look for text and images
  this.findFirstVisibleElement = function(props) {

    if (typeof props !== 'object') {
      // compatibility with legacy code, `props` is `topOffset` actually
      props = {
        top: props
      };
    }

    var $elements;
    var $firstVisibleTextNode = null;
    var percentOfElementHeight = 0;

    $elements = $("body", this.getRootElement()).find(":not(iframe)").contents().filter(function() {
      return isValidTextNode(this) || this.nodeName.toLowerCase() === 'img';
    });

    // Find the first visible text node
    $.each($elements, function() {

      var $element;

      if (this.nodeType === Node.TEXT_NODE) { //text node
        $element = $(this).parent();
      } else {
        $element = $(this); //image
      }

      var visibilityResult = visibilityCheckerFunc($element, props, true);
      if (visibilityResult) {
        $firstVisibleTextNode = $element;
        percentOfElementHeight = 100 - visibilityResult;
        return false;
      }
      return true;
    });

    return {
      $element: $firstVisibleTextNode,
      percentY: percentOfElementHeight
    };
  };

  this.getFirstVisibleElementCfi = function(topOffset) {

    var foundElement = this.findFirstVisibleElement(topOffset);

    if (!foundElement.$element) {
      console.log("Could not generate CFI no visible element on page");
      return undefined;
    }

    //noinspection JSUnresolvedVariable
    var cfi = EPUBcfi.Generator.generateElementCFIComponent(foundElement.$element[0]);

    if (cfi[0] == "!") {
      cfi = cfi.substring(1);
    }

    return cfi + "@0:" + foundElement.percentY;
  };

  this.getPageForElementCfi = function(cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var cfiParts = splitCfi(cfi);

    var $element = getElementByPartialCfi(cfiParts.cfi, classBlacklist, elementBlacklist, idBlacklist);

    if (!$element) {
      return -1;
    }

    return this.getPageForPointOnElement($element, cfiParts.x, cfiParts.y);
  };

  function getElementByPartialCfi(cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var contentDoc = $iframe[0].contentDocument;

    var wrappedCfi = "epubcfi(" + cfi + ")";
    //noinspection JSUnresolvedVariable
    var $element = EPUBcfi.getTargetElementWithPartialCFI(wrappedCfi, contentDoc, classBlacklist, elementBlacklist, idBlacklist);

    if (!$element || $element.length == 0) {
      console.log("Can't find element for CFI: " + cfi);
      return undefined;
    }

    return $element;
  }

  this.getElementByCfi = function(cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var cfiParts = splitCfi(cfi);
    return getElementByPartialCfi(cfiParts.cfi, classBlacklist, elementBlacklist, idBlacklist);
  };

  this.getPageForElement = function($element) {

    return this.getPageForPointOnElement($element, 0, 0);
  };

  this.getPageForPointOnElement = function($element, x, y) {

    var pageIndex;
    if (options.rectangleBased) {
      pageIndex = findPageByRectangles($element, y);
      if (pageIndex === null) {
        console.warn('Impossible to locate a hidden element: ', $element);
        return 0;
      }
      return pageIndex;
    }

    var posInElement = this.getVerticalOffsetForPointOnElement($element, x, y);
    return Math.floor(posInElement / $viewport.height());
  };

  this.getVerticalOffsetForElement = function($element) {

    return this.getVerticalOffsetForPointOnElement($element, 0, 0);
  };

  this.getVerticalOffsetForPointOnElement = function($element, x, y) {

    var elementRect = Rect.fromElement($element);
    return Math.ceil(elementRect.top + y * elementRect.height / 100);
  };

  this.getElementById = function(id) {

    var contentDoc = $iframe[0].contentDocument;

    var $element = $(contentDoc.getElementById(id));
    //$("#" + Helpers.escapeJQuerySelector(id), contentDoc);

    if ($element.length == 0) {
      return undefined;
    }

    return $element;
  };

  this.getPageForElementId = function(id) {

    var $element = this.getElementById(id);
    if (!$element) {
      return -1;
    }

    return this.getPageForElement($element);
  };

  function splitCfi(cfi) {

    var ret = {
      cfi: "",
      x: 0,
      y: 0
    };

    var ix = cfi.indexOf("@");

    if (ix != -1) {
      var terminus = cfi.substring(ix + 1);

      var colIx = terminus.indexOf(":");
      if (colIx != -1) {
        ret.x = parseInt(terminus.substr(0, colIx));
        ret.y = parseInt(terminus.substr(colIx + 1));
      } else {
        console.log("Unexpected terminating step format");
      }

      ret.cfi = cfi.substring(0, ix);
    } else {

      ret.cfi = cfi;
    }

    return ret;
  }

  // returns raw DOM element (not $ jQuery-wrapped)
  this.getFirstVisibleMediaOverlayElement = function(visibleContentOffsets) {
    var docElement = this.getRootElement();
    if (!docElement) return undefined;

    var $root = $("body", docElement);
    if (!$root || !$root.length || !$root[0]) return undefined;

    var that = this;

    var firstPartial = undefined;

    function traverseArray(arr) {
      if (!arr || !arr.length) return undefined;

      for (var i = 0, count = arr.length; i < count; i++) {
        var item = arr[i];
        if (!item) continue;

        var $item = $(item);

        if ($item.data("mediaOverlayData")) {
          var visible = that.getElementVisibility($item, visibleContentOffsets);
          if (visible) {
            if (!firstPartial) firstPartial = item;

            if (visible == 100) return item;
          }
        } else {
          var elem = traverseArray(item.children);
          if (elem) return elem;
        }
      }

      return undefined;
    }

    var el = traverseArray([$root[0]]);
    if (!el) el = firstPartial;
    return el;

    // var $elements = this.getMediaOverlayElements($root);
    // return this.getVisibleElements($elements, visibleContentOffsets);
  };

  this.getElementVisibility = function($element, visibleContentOffsets) {
    return visibilityCheckerFunc($element, visibleContentOffsets, true);
  };

  // /**
  //  * @deprecated
  //  */
  // this.getVisibleMediaOverlayElements = function(visibleContentOffsets) {
  // 
  //     var $elements = this.getMediaOverlayElements($("body", this.getRootElement()));
  //     return this.getVisibleElements($elements, visibleContentOffsets);
  // 
  // };

  this.isElementVisible = visibilityCheckerFunc;

  this.getAllVisibleElementsWithSelector = function(selector, visibleContentOffset) {
    var elements = $(selector, this.getRootElement()).filter(function(e) {
      return true;
    });
    var $newElements = [];
    $.each(elements, function() {
      $newElements.push($(this));
    });
    var visibleDivs = this.getVisibleElements($newElements, visibleContentOffset);
    return visibleDivs;

  };

  this.getVisibleElements = function($elements, visibleContentOffsets) {

    var visibleElements = [];

    // Find the first visible text node
    $.each($elements, function() {
      var $element = this;
      var visibilityPercentage = visibilityCheckerFunc(
        $element, visibleContentOffsets, true);

      if (visibilityPercentage) {
        var $visibleElement = $element;
        visibleElements.push({
          element: $visibleElement[0], // DOM Element is pushed
          percentVisible: visibilityPercentage
        });
        return true;
      }

      // if element's position cannot be determined, just go to next one
      if (visibilityPercentage === null) {
        return true;
      }

      // continue if no visibleElements have been found yet,
      // stop otherwise
      return visibleElements.length === 0;
    });

    return visibleElements;
  };

  this.getVisibleTextElements = function(visibleContentOffsets) {

    var $elements = this.getTextElements($("body", this.getRootElement()));

    return this.getVisibleElements($elements, visibleContentOffsets);
  };

  /**
   * @deprecated
   */
  this.getMediaOverlayElements = function($root) {

    var $elements = [];

    function traverseCollection(elements) {

      if (elements == undefined) return;

      for (var i = 0, count = elements.length; i < count; i++) {

        var $element = $(elements[i]);

        if ($element.data("mediaOverlayData")) {
          $elements.push($element);
        } else {
          traverseCollection($element[0].children);
        }

      }
    }

    traverseCollection([$root[0]]);

    return $elements;
  };

  this.getTextElements = function($root) {

    var $textElements = [];

    $root.find(":not(iframe)").contents().each(function() {

      if (isValidTextNode(this)) {
        $textElements.push($(this).parent());
      }

    });

    return $textElements;

  };

  function isValidTextNode(node) {

    if (node.nodeType === Node.TEXT_NODE) {

      // Heuristic to find a text node with actual text
      var nodeText = node.nodeValue.replace(/\n/g, "");
      nodeText = nodeText.replace(/ /g, "");

      return nodeText.length > 0;
    }

    return false;

  }

  this.getElement = function(selector) {

    var $element = $(selector, this.getRootElement());

    if ($element.length > 0) {
      return $element;
    }

    return undefined;
  };

};

module.exports = CfiNavigationLogic

},{"../helpers/rect":"/Users/craverod/opensource/readium-js/src/sdk/helpers/rect.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/constants.js":[function(require,module,exports){
module.exports = {
  ORIENTATION_LANDSCAPE: "orientation_landscape",
  ORIENTATION_PORTRAIT: "orientation_portrait"
}
},{}],"/Users/craverod/opensource/readium-js/src/sdk/views/fixed-view.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var _ = require('underscore')
var $ = require('jquery')
var Backbone = require('backbone')
var BookmarkData = require('../models/bookmark-data')
var CurrentPagesInfo = require('../models/current-pages-info')
var CSSTransition = require('../helpers/css-transition')
var deduceSyntheticSpread = require('../helpers/deduce-synthetic-spread')
var Events = require('../events')
var InternalEvents = require('../internal-events')
var loadTemplate = require('../helpers/load-template')
var Margins = require('../helpers/margins')
var OnePageView = require('./one-page-view')
var PageOpenRequest = require('../models/page-open-request')
var setStyles = require('../helpers/set-styles')
var Spread = require('../models/spread')

/**
 * View for rendering fixed layout page spread
 * @param options
 * @param reader
 * @constructor
 */
function FixedView(options, reader) {

  _.extend(this, Backbone.Events);

  var self = this;

  var _$el;
  var _$viewport = options.$viewport;
  var _spine = options.spine;
  var _userStyles = options.userStyles;
  var _bookStyles = options.bookStyles;
  var _zoom = options.zoom || {
    style: 'default'
  };
  var _currentScale;
  var _iframeLoader = options.iframeLoader;
  var _viewSettings = undefined;

  var _leftPageView = createOnePageView("fixed-page-frame-left");
  var _rightPageView = createOnePageView("fixed-page-frame-right");
  var _centerPageView = createOnePageView("fixed-page-frame-center");

  var _pageViews = [];
  _pageViews.push(_leftPageView);
  _pageViews.push(_rightPageView);
  _pageViews.push(_centerPageView);

  var _spread = new Spread(_spine, false);
  var _bookMargins;
  var _contentMetaSize;
  var _isRedrowing = false;
  var _redrawRequest = false;

  function createOnePageView(elementClass) {

    var pageView = new OnePageView(options, [elementClass],
      false, //enableBookStyleOverrides
      reader
    );

    pageView.on(OnePageView.SPINE_ITEM_OPEN_START, function($iframe, spineItem) {

      self.trigger(Events.CONTENT_DOCUMENT_LOAD_START, $iframe, spineItem);
    });

    return pageView;
  }

  this.isReflowable = function() {
    return false;
  };

  this.setZoom = function(zoom) {
    _zoom = zoom;

    resizeBook(false);
  }

  this.render = function() {

    var template = loadTemplate("fixed_book_frame", {});

    _$el = $(template);

    CSSTransition(_$el, "all 0 ease 0");

    _$el.css("overflow", "hidden");

    // Removed, see one_page_view@render()
    // var settings = reader.viewerSettings();
    // if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined")
    // {
    //     //defaults
    //     settings = new ViewerSettings({});
    // }
    // if (settings.enableGPUHardwareAccelerationCSS3D) {
    //
    //     // This fixes rendering issues with WebView (native apps), which crops content embedded in iframes unless GPU hardware acceleration is enabled for CSS rendering.
    //     _$el.css("transform", "translateZ(0)");
    // }

    _$viewport.append(_$el);

    self.applyStyles();

    return this;
  };

  this.remove = function() {

    _$el.remove();
  };


  this.setViewSettings = function(settings) {

    _viewSettings = settings;

    _spread.setSyntheticSpread(deduceSyntheticSpread(_$viewport, getFirstVisibleItem(), _viewSettings) == true); // force boolean value (from truthy/falsey return value)

    var views = getDisplayingViews();
    for (var i = 0, count = views.length; i < count; i++) {
      views[i].setViewSettings(settings);
    }
  };

  function getFirstVisibleItem() {

    var visibleItems = _spread.validItems();
    return visibleItems[0];
  }

  function redraw(initiator, paginationRequest) {

    if (_isRedrowing) {
      _redrawRequest = {
        initiator: initiator,
        paginationRequest: paginationRequest
      };
      return;
    }

    _isRedrowing = true;

    var context = {
      isElementAdded: false
    };

    var pageLoadDeferrals = createPageLoadDeferrals([{
      pageView: _leftPageView,
      spineItem: _spread.leftItem,
      context: context
    }, {
      pageView: _rightPageView,
      spineItem: _spread.rightItem,
      context: context
    }, {
      pageView: _centerPageView,
      spineItem: _spread.centerItem,
      context: context
    }]);

    $.when.apply($, pageLoadDeferrals).done(function() {
      _isRedrowing = false;

      if (_redrawRequest) {
        var p1 = _redrawRequest.initiator;
        var p2 = _redrawRequest.paginationRequest;
        _redrawRequest = undefined;
        redraw(p1, p2);
      } else {
        if (context.isElementAdded) {
          self.applyStyles();
        }

        if (paginationRequest) {
          onPagesLoaded(initiator, paginationRequest.spineItem, paginationRequest.elementId)
        } else {
          onPagesLoaded(initiator);
        }
      }

    });

  }

  // dir: 0 => new or same page, 1 => previous, 2 => next
  var updatePageSwitchDir = function(dir, hasChanged) {
    // irrespective of display state
    if (_leftPageView) _leftPageView.updatePageSwitchDir(dir, hasChanged);
    if (_rightPageView) _rightPageView.updatePageSwitchDir(dir, hasChanged);
    if (_centerPageView) _centerPageView.updatePageSwitchDir(dir, hasChanged);

    // var views = getDisplayingViews();
    // for(var i = 0, count = views.length; i < count; i++) {
    //     views[i].updatePageSwitchDir(dir, hasChanged);
    // }
  };


  this.applyStyles = function() {

    setStyles(_userStyles.getStyles(), _$el.parent());

    updateBookMargins();
    updateContentMetaSize();

    resizeBook();
  };

  this.applyBookStyles = function() {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {
      views[i].applyBookStyles();
    }
  };

  function createPageLoadDeferrals(viewItemPairs) {

    var pageLoadDeferrals = [];

    for (var i = 0; i < viewItemPairs.length; i++) {

      var dfd = updatePageViewForItem(viewItemPairs[i].pageView, viewItemPairs[i].spineItem, viewItemPairs[i].context);
      pageLoadDeferrals.push(dfd);
    }

    return pageLoadDeferrals;

  }

  function onPagesLoaded(initiator, paginationRequest_spineItem, paginationRequest_elementId) {

    updateContentMetaSize();
    resizeBook();

    self.trigger(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED, {
      paginationInfo: self.getPaginationInfo(),
      initiator: initiator,
      spineItem: paginationRequest_spineItem,
      elementId: paginationRequest_elementId
    });
  }

  this.onViewportResize = function() {

    //because change of the viewport orientation can alter pagination behaviour we have to check if
    //visible content stays same

    var firstVisibleItem = getFirstVisibleItem();
    if (!firstVisibleItem) {
      return;
    }

    var isSyntheticSpread = deduceSyntheticSpread(_$viewport, firstVisibleItem, _viewSettings) == true; // force boolean value (from truthy/falsey return value)

    if (isSpreadChanged(firstVisibleItem, isSyntheticSpread)) {
      _spread.setSyntheticSpread(isSyntheticSpread);
      var paginationRequest = new PageOpenRequest(firstVisibleItem, self);
      self.openPage(paginationRequest);
    } else {
      resizeBook(true);
    }
  };

  function isSpreadChanged(firstVisibleItem, isSyntheticSpread) {

    var tmpSpread = new Spread(_spine, isSyntheticSpread);
    tmpSpread.openItem(firstVisibleItem);

    return _spread.leftItem != tmpSpread.leftItem || _spread.rightItem != tmpSpread.rightItem || _spread.centerItem != tmpSpread.centerItem;
  }

  this.getViewScale = function() {
    return _currentScale;
  };

  function isContentRendered() {

    if (!_contentMetaSize || !_bookMargins) {
      return false;
    }

    var viewportWidth = _$viewport.width();
    var viewportHeight = _$viewport.height();

    return viewportWidth && viewportHeight;
  }

  function resizeBook(viewportIsResizing) {

    updatePageSwitchDir(0, false);

    if (!isContentRendered()) {
      return;
    }

    var viewportWidth = _$viewport.width();
    var viewportHeight = _$viewport.height();

    var leftPageMargins = _leftPageView.isDisplaying() ? Margins.fromElement(_leftPageView.element()) : Margins.empty();
    var rightPageMargins = _rightPageView.isDisplaying() ? Margins.fromElement(_rightPageView.element()) : Margins.empty();
    var centerPageMargins = _centerPageView.isDisplaying() ? Margins.fromElement(_centerPageView.element()) : Margins.empty();

    var pageMargins = getMaxPageMargins(leftPageMargins, rightPageMargins, centerPageMargins);

    var potentialTargetElementSize = {
      width: viewportWidth - _bookMargins.width(),
      height: viewportHeight - _bookMargins.height()
    };

    var potentialContentSize = {
      width: potentialTargetElementSize.width - pageMargins.width(),
      height: potentialTargetElementSize.height - pageMargins.height()
    };

    if (potentialTargetElementSize.width <= 0 || potentialTargetElementSize.height <= 0) {
      return;
    }

    var horScale = potentialContentSize.width / _contentMetaSize.width;
    var verScale = potentialContentSize.height / _contentMetaSize.height;

    _$viewport.css("overflow", "auto");

    var scale;
    if (_zoom.style == 'fit-width') {
      scale = horScale;
    } else if (_zoom.style == 'fit-height') {
      scale = verScale;
    } else if (_zoom.style == 'user') {
      scale = _zoom.scale;
    } else {
      scale = Math.min(horScale, verScale);

      // no need for pan during "viewport fit" zoom
      _$viewport.css("overflow", "hidden");
    }

    _currentScale = scale;

    var contentSize = {
      width: _contentMetaSize.width * scale,
      height: _contentMetaSize.height * scale
    };

    var targetElementSize = {
      width: contentSize.width + pageMargins.width(),
      height: contentSize.height + pageMargins.height()
    };

    var bookSize = {
      width: targetElementSize.width + _bookMargins.width(),
      height: targetElementSize.height + _bookMargins.height()
    };


    var bookLeft = Math.floor((viewportWidth - bookSize.width) / 2);
    var bookTop = Math.floor((viewportHeight - bookSize.height) / 2);

    if (bookLeft < 0) bookLeft = 0;
    if (bookTop < 0) bookTop = 0;

    _$el.css("left", bookLeft + "px");
    _$el.css("top", bookTop + "px");
    _$el.css("width", targetElementSize.width + "px");
    _$el.css("height", targetElementSize.height + "px");

    var left = _bookMargins.padding.left;
    var top = _bookMargins.padding.top;

    var transFunc = viewportIsResizing ? "transformContentImmediate" : "transformContent";

    if (_leftPageView.isDisplaying()) {

      _leftPageView[transFunc](scale, left, top);
    }

    if (_rightPageView.isDisplaying()) {

      left += _contentMetaSize.separatorPosition * scale;

      if (_leftPageView.isDisplaying()) {
        left += leftPageMargins.left;
      }

      _rightPageView[transFunc](scale, left, top);
    }

    if (_centerPageView.isDisplaying()) {

      _centerPageView[transFunc](scale, left, top);
    }

    self.trigger(Events.FXL_VIEW_RESIZED);
  }

  function getMaxPageMargins(leftPageMargins, rightPageMargins, centerPageMargins) {

    var sumMargin = {
      left: Math.max(leftPageMargins.margin.left, rightPageMargins.margin.left, centerPageMargins.margin.left),
      right: Math.max(leftPageMargins.margin.right, rightPageMargins.margin.right, centerPageMargins.margin.right),
      top: Math.max(leftPageMargins.margin.top, rightPageMargins.margin.top, centerPageMargins.margin.top),
      bottom: Math.max(leftPageMargins.margin.bottom, rightPageMargins.margin.bottom, centerPageMargins.margin.bottom)
    };

    var sumBorder = {
      left: Math.max(leftPageMargins.border.left, rightPageMargins.border.left, centerPageMargins.border.left),
      right: Math.max(leftPageMargins.border.right, rightPageMargins.border.right, centerPageMargins.border.right),
      top: Math.max(leftPageMargins.border.top, rightPageMargins.border.top, centerPageMargins.border.top),
      bottom: Math.max(leftPageMargins.border.bottom, rightPageMargins.border.bottom, centerPageMargins.border.bottom)
    };

    var sumPAdding = {
      left: Math.max(leftPageMargins.padding.left, rightPageMargins.padding.left, centerPageMargins.padding.left),
      right: Math.max(leftPageMargins.padding.right, rightPageMargins.padding.right, centerPageMargins.padding.right),
      top: Math.max(leftPageMargins.padding.top, rightPageMargins.padding.top, centerPageMargins.padding.top),
      bottom: Math.max(leftPageMargins.padding.bottom, rightPageMargins.padding.bottom, centerPageMargins.padding.bottom)
    };

    return new Margins(sumMargin, sumBorder, sumPAdding);

  }

  function updateContentMetaSize() {

    _contentMetaSize = {};

    if (_centerPageView.isDisplaying()) {
      _contentMetaSize.width = _centerPageView.meta_width();
      _contentMetaSize.height = _centerPageView.meta_height();
      _contentMetaSize.separatorPosition = 0;
    } else if (_leftPageView.isDisplaying() && _rightPageView.isDisplaying()) {
      if (_leftPageView.meta_height() == _rightPageView.meta_height()) {
        _contentMetaSize.width = _leftPageView.meta_width() + _rightPageView.meta_width();
        _contentMetaSize.height = _leftPageView.meta_height();
        _contentMetaSize.separatorPosition = _leftPageView.meta_width();
      } else {
        //normalize by height
        _contentMetaSize.width = _leftPageView.meta_width() + _rightPageView.meta_width() * (_leftPageView.meta_height() / _rightPageView.meta_height());
        _contentMetaSize.height = _leftPageView.meta_height();
        _contentMetaSize.separatorPosition = _leftPageView.meta_width();
      }
    } else if (_leftPageView.isDisplaying()) {
      _contentMetaSize.width = _leftPageView.meta_width() * 2;
      _contentMetaSize.height = _leftPageView.meta_height();
      _contentMetaSize.separatorPosition = _leftPageView.meta_width();
    } else if (_rightPageView.isDisplaying()) {
      _contentMetaSize.width = _rightPageView.meta_width() * 2;
      _contentMetaSize.height = _rightPageView.meta_height();
      _contentMetaSize.separatorPosition = _rightPageView.meta_width();
    } else {
      _contentMetaSize = undefined;
    }

  }

  function updateBookMargins() {
    _bookMargins = Margins.fromElement(_$el);
  }

  // dir: 0 => new or same page, 1 => previous, 2 => next
  this.openPage = function(paginationRequest, dir) {

    if (!paginationRequest.spineItem) {
      return;
    }

    var leftItem = _spread.leftItem;
    var rightItem = _spread.rightItem;
    var centerItem = _spread.centerItem;

    var isSyntheticSpread = deduceSyntheticSpread(_$viewport, paginationRequest.spineItem, _viewSettings) == true; // force boolean value (from truthy/falsey return value)
    _spread.setSyntheticSpread(isSyntheticSpread);
    _spread.openItem(paginationRequest.spineItem);

    var hasChanged = leftItem !== _spread.leftItem || rightItem !== _spread.rightItem || centerItem !== _spread.centerItem;

    if (dir === null || typeof dir === "undefined") dir = 0;

    updatePageSwitchDir(dir === 0 ? 0 : (_spread.spine.isRightToLeft() ? (dir === 1 ? 2 : 1) : dir), hasChanged);

    redraw(paginationRequest.initiator, paginationRequest);
  };


  this.openPagePrev = function(initiator) {

    _spread.openPrev();

    updatePageSwitchDir(_spread.spine.isRightToLeft() ? 2 : 1, true);

    redraw(initiator, undefined);
  };

  this.openPageNext = function(initiator) {

    _spread.openNext();

    updatePageSwitchDir(_spread.spine.isRightToLeft() ? 1 : 2, true);

    redraw(initiator, undefined);
  };

  function updatePageViewForItem(pageView, item, context) {

    var dfd = $.Deferred();

    if (!item) {
      if (pageView.isDisplaying()) {
        pageView.remove();
      }

      dfd.resolve();
    } else {

      if (!pageView.isDisplaying()) {

        _$el.append(pageView.render().element());

        context.isElementAdded = true;
      }

      pageView.loadSpineItem(item, function(success, $iframe, spineItem, isNewContentDocumentLoaded, context) {

        if (success && isNewContentDocumentLoaded) {

          //if we a re loading fixed view meta size should be defined
          if (!pageView.meta_height() || !pageView.meta_width()) {
            console.error("Invalid document " + spineItem.href + ": viewport is not specified!");
          }

          self.trigger(Events.CONTENT_DOCUMENT_LOADED, $iframe, spineItem);
        }

        dfd.resolve();

      }, context);
    }

    return dfd.promise();
  }

  this.getPaginationInfo = function() {

    var paginationInfo = new CurrentPagesInfo(_spine, true);

    var spreadItems = [_spread.leftItem, _spread.rightItem, _spread.centerItem];

    for (var i = 0; i < spreadItems.length; i++) {

      var spreadItem = spreadItems[i];

      if (spreadItem) {
        paginationInfo.addOpenPage(0, 1, spreadItem.idref, spreadItem.index);
      }
    }

    return paginationInfo;
  };

  this.bookmarkCurrentPage = function() {

    var views = getDisplayingViews();

    if (views.length > 0) {

      var idref = views[0].currentSpineItem().idref;
      var cfi = views[0].getFirstVisibleElementCfi();

      if (cfi == undefined) {
        cfi = "";
      }

      return new BookmarkData(idref, cfi);
    }

    return new BookmarkData("", "");
  };

  function getDisplayingViews() {

    var viewsToCheck = [];

    if (_spine.isLeftToRight()) {
      viewsToCheck = [_leftPageView, _centerPageView, _rightPageView];
    } else {
      viewsToCheck = [_rightPageView, _centerPageView, _leftPageView];
    }

    var views = [];

    for (var i = 0, count = viewsToCheck.length; i < count; i++) {
      if (viewsToCheck[i].isDisplaying()) {
        views.push(viewsToCheck[i]);
      }
    }

    return views;
  }

  this.getLoadedSpineItems = function() {

    return _spread.validItems();
  };

  this.getElement = function(spineItem, selector) {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {

      var view = views[i];
      if (view.currentSpineItem() == spineItem) {
        return view.getElement(spineItem, selector);
      }
    }

    console.error("spine item is not loaded");
    return undefined;
  };

  this.getElementById = function(spineItem, id) {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {

      var view = views[i];
      if (view.currentSpineItem() == spineItem) {
        return view.getElementById(spineItem, id);
      }
    }

    console.error("spine item is not loaded");
    return undefined;
  };

  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {

      var view = views[i];
      if (view.currentSpineItem() == spineItem) {
        return view.getElementByCfi(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist);
      }
    }

    console.error("spine item is not loaded");
    return undefined;
  };

  this.getFirstVisibleMediaOverlayElement = function() {

    var views = getDisplayingViews();

    for (var i = 0, count = views.length; i < count; i++) {
      var el = views[i].getFirstVisibleMediaOverlayElement();
      if (el) return el;
    }

    return undefined;
  };

  this.insureElementVisibility = function(spineItemId, element, initiator) {

    //TODO: during zoom+pan, playing element might not actualy be visible

  }
}

module.exports = FixedView
},{"../events":"/Users/craverod/opensource/readium-js/src/sdk/events.js","../helpers/css-transition":"/Users/craverod/opensource/readium-js/src/sdk/helpers/css-transition.js","../helpers/deduce-synthetic-spread":"/Users/craverod/opensource/readium-js/src/sdk/helpers/deduce-synthetic-spread.js","../helpers/load-template":"/Users/craverod/opensource/readium-js/src/sdk/helpers/load-template.js","../helpers/margins":"/Users/craverod/opensource/readium-js/src/sdk/helpers/margins.js","../helpers/set-styles":"/Users/craverod/opensource/readium-js/src/sdk/helpers/set-styles.js","../internal-events":"/Users/craverod/opensource/readium-js/src/sdk/internal-events.js","../models/bookmark-data":"/Users/craverod/opensource/readium-js/src/sdk/models/bookmark-data.js","../models/current-pages-info":"/Users/craverod/opensource/readium-js/src/sdk/models/current-pages-info.js","../models/page-open-request":"/Users/craverod/opensource/readium-js/src/sdk/models/page-open-request.js","../models/spread":"/Users/craverod/opensource/readium-js/src/sdk/models/spread.js","./one-page-view":"/Users/craverod/opensource/readium-js/src/sdk/views/one-page-view.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/iframe-loader.js":[function(require,module,exports){
var $ = require('jquery')
var _ = require('underscore')
var URI = require('URIjs')

function IFrameLoader() {

  var self = this;
  var eventListeners = {};


  this.addIFrameEventListener = function(eventName, callback, context) {

    if (eventListeners[eventName] == undefined) {
      eventListeners[eventName] = [];
    }

    eventListeners[eventName].push({
      callback: callback,
      context: context
    });
  };

  this.updateIframeEvents = function(iframe) {

    _.each(eventListeners, function(value, key) {
      for (var i = 0, count = value.length; i < count; i++) {
        $(iframe.contentWindow).off(key);
        $(iframe.contentWindow).on(key, value[i].callback, value[i].context);
      }
    });
  };

  this.loadIframe = function(iframe, src, callback, context, attachedData) {

    iframe.setAttribute("data-baseUri", iframe.baseURI);
    iframe.setAttribute("data-src", src);

    var loadedDocumentUri = new URI(src).absoluteTo(iframe.baseURI).toString();

    self._loadIframeWithUri(iframe, attachedData, loadedDocumentUri, function() {
      var doc = iframe.contentDocument || iframe.contentWindow.document;
      $('svg', doc).load(function() {
        console.log('loaded');
      });
      callback.call(context, true, attachedData);
    });
  };

  this._loadIframeWithUri = function(iframe, attachedData, contentUri, callback) {

    iframe.onload = function() {

      self.updateIframeEvents(iframe);

      var mathJax = iframe.contentWindow.MathJax;
      if (mathJax) {
        // If MathJax is being used, delay the callback until it has completed rendering
        var mathJaxCallback = _.once(callback);
        try {
          mathJax.Hub.Queue(mathJaxCallback);
        } catch (err) {
          console.error("MathJax fail!");
          callback();
        }
        // Or at an 8 second timeout, which ever comes first
        //window.setTimeout(mathJaxCallback, 8000);
      } else {
        callback();
      }
    };

    iframe.setAttribute("src", contentUri);

  };



}

module.exports = IFrameLoader
},{"URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/index.js":[function(require,module,exports){
// TODO Remove when all underscore deps are gone
var _ = require('underscore')

var Views = {
  IFrameLoader: require('./iframe-loader'),
  ReaderView: require('./reader-view')
}

var ViewsConstants = require('./constants')

_.extend(Views, ViewsConstants)

module.exports = Views
},{"./constants":"/Users/craverod/opensource/readium-js/src/sdk/views/constants.js","./iframe-loader":"/Users/craverod/opensource/readium-js/src/sdk/views/iframe-loader.js","./reader-view":"/Users/craverod/opensource/readium-js/src/sdk/views/reader-view.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/internal-links-support.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')
var Interpreter = require('epub-cfi').Interpreter
var URI = require('URIjs')

/**
 *
 * @param reader
 * @constructor
 */
function InternalLinksSupport(reader) {

  var self = this;

  function splitCfi(fullCfi) {

    var startIx = fullCfi.indexOf("(");
    var bungIx = fullCfi.indexOf("!");
    var endIx = fullCfi.indexOf(")");

    if (bungIx == -1) {
      return undefined;
    }

    if (endIx == -1) {
      endIx = fullCfi.length;
    }

    return {

      spineItemCfi: fullCfi.substring(startIx + 1, bungIx),
      elementCfi: fullCfi.substring(bungIx + 1, endIx)
    }
  }

  function getAbsoluteUriRelativeToSpineItem(hrefUri, spineItem) {

    var fullPath = reader.package().resolveRelativeUrl(spineItem.href);

    var absUrl = hrefUri.absoluteTo(fullPath);

    return absUrl;
  }

  function processDeepLink(hrefUri, spineItem) {

    var absoluteOpfUri = getAbsoluteUriRelativeToSpineItem(hrefUri, spineItem);

    if (!absoluteOpfUri) {
      console.error("Unable to resolve " + hrefUri.href())
      return;
    }

    var fullCfi = hrefUri.fragment();

    var absPath = absoluteOpfUri.toString();

    absPath = RemoveFromString(absPath, "#" + fullCfi);

    readOpfFile(absPath, function(opfText) {

      if (!opfText) {
        return;
      }

      var parser = new window.DOMParser;
      var packageDom = parser.parseFromString(opfText, 'text/xml');
      var cfi = splitCfi(fullCfi);

      if (!cfi) {
        console.warn("Unable to split cfi:" + fullCfi);
        return;
      }

      var contentDocRef = Interpreter.getContentDocHref("epubcfi(" + cfi.spineItemCfi + ")", packageDom);

      if (contentDocRef) {

        var newSpineItem = reader.spine().getItemByHref(contentDocRef);
        if (newSpineItem) {

          reader.openSpineItemElementCfi(newSpineItem.idref, cfi.elementCfi, self);
        } else {
          console.warn("Unable to find spineItem with href=" + contentDocRef);
        }

      } else {
        console.warn("Unable to find document ref from " + fullCfi + " cfi");
      }

    });

  }

  function readOpfFile(path, callback) {

    $.ajax({
      // encoding: "UTF-8",
      // mimeType: "text/plain; charset=UTF-8",
      // beforeSend: function( xhr ) {
      //     xhr.overrideMimeType("text/plain; charset=UTF-8");
      // },
      isLocal: path.indexOf("http") === 0 ? false : true,
      url: path,
      dataType: 'text',
      async: true,
      success: function(result) {
        callback(result);
      },
      error: function(xhr, status, errorThrown) {
        console.error('Error when AJAX fetching ' + path);
        console.error(status);
        console.error(errorThrown);
        callback();
      }
    });
  }

  //checks if href includes path to opf file and full cfi
  function isDeepLikHref(uri) {

    var fileName = uri.filename();
    return fileName && EndsWith(fileName, ".opf");
  }

  function processLinkWithHash(hrefUri, spineItem) {

    var fileName = hrefUri.filename();

    var idref;

    //reference to another file
    if (fileName) {
      var normalizedUri = new URI(hrefUri, spineItem.href);

      var pathname = decodeURIComponent(normalizedUri.pathname());

      var newSpineItem = reader.spine().getItemByHref(pathname);

      if (!newSpineItem) {
        console.error("spine item with href=" + pathname + " not found");
        return;
      }

      idref = newSpineItem.idref;
    } else { //hush in the same file
      idref = spineItem.idref;
    }

    var hashFrag = hrefUri.fragment();

    reader.openSpineItemElementId(idref, hashFrag, self);

  }

  this.processLinkElements = function($iframe, spineItem) {

    var epubContentDocument = $iframe[0].contentDocument;

    $('a', epubContentDocument).click(function(clickEvent) {
      // Check for both href and xlink:href attribute and get value
      var href;
      if (clickEvent.currentTarget.attributes["xlink:href"]) {

        href = clickEvent.currentTarget.attributes["xlink:href"].value;
      } else {
        href = clickEvent.currentTarget.attributes["href"].value;
      }

      var overrideClickEvent = false;
      var hrefUri = new URI(href);
      var hrefIsRelative = hrefUri.is('relative');

      if (hrefIsRelative) {

        if (isDeepLikHref(hrefUri)) {
          processDeepLink(hrefUri, spineItem);
          overrideClickEvent = true;
        } else {
          processLinkWithHash(hrefUri, spineItem);
          overrideClickEvent = true;
        }

      } else {
        // It's an absolute URL to a remote site - open it in a separate window outside the reader
        window.open(href, '_blank');
        overrideClickEvent = true;
      }

      if (overrideClickEvent) {
        clickEvent.preventDefault();
        clickEvent.stopPropagation();
      }
    });

  }

}

module.exports = InternalLinksSupport
},{"URIjs":"/Users/craverod/opensource/readium-js/node_modules/URIjs/src/URI.js","epub-cfi":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/index.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/media-overlay-data-injector.js":[function(require,module,exports){
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')
var EPUBcfi = require('epub-cfi')
var SmilIterator = require('../models/smil-iterator');
var ResolveContentRef = require('../helpers/resolve-content-ref')


/**
 *
 * @param mediaOverlay
 * @param mediaOverlayPlayer
 * @constructor
 */
function MediaOverlayDataInjector(mediaOverlay, mediaOverlayPlayer) {

  this.attachMediaOverlayData = function($iframe, spineItem, mediaOverlaySettings) {

    var contentDocElement = $iframe[0].contentDocument.documentElement;

    if (!spineItem.media_overlay_id && mediaOverlay.smil_models.length === 0) {
      return;
    }

    var $body = $("body", contentDocElement);
    if ($body.length == 0) {
      console.error("! BODY ???");
    } else {
      var click = $body.data("mediaOverlayClick");
      if (click) {
        console.error("[WARN] already mediaOverlayClick");
      } else {
        $body.data("mediaOverlayClick", {
          ping: "pong"
        });

        var clickEvent = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click';
        $body.bind(clickEvent, function(event) {
          var elem = $(this)[0]; // body
          elem = event.target; // body descendant

          if (!elem) {
            mediaOverlayPlayer.touchInit();
            return true;
          }

          //console.debug("MO CLICK: " + elem.id);

          var data = undefined;
          var el = elem;

          var inLink = false;
          if (el.nodeName.toLowerCase() === "a") {
            inLink = true;
          }

          while (!(data = $(el).data("mediaOverlayData"))) {
            if (el.nodeName.toLowerCase() === "a") {
              inLink = true;
            }
            el = el.parentNode;
            if (!el) {
              break;
            }
          }

          if (data && (data.par || data.pars)) {
            if (el !== elem) {
              //console.log("MO CLICK REDIRECT: " + el.id);
            }

            if (!mediaOverlaySettings.mediaOverlaysEnableClick) {
              console.log("MO CLICK DISABLED");
              mediaOverlayPlayer.touchInit();
              return true;
            }

            if (inLink) {
              console.log("MO CLICKED LINK");
              mediaOverlayPlayer.touchInit();
              return true;
            }

            var par = data.par ? data.par : data.pars[0];

            if (data.pars && (typeof rangy !== "undefined")) {
              var wasPaused = false;

              // To remove highlight which may have altered DOM (and break CFI expressions)
              if (mediaOverlayPlayer.isPlayingCfi()) {
                wasPaused = true;
                mediaOverlayPlayer.pause();
              }

              // /////////////////////
              // 
              // var p = {x: event.pageX, y: event.pageY};
              // if (webkitConvertPointFromPageToNode)
              // {
              //     p = webkitConvertPointFromPageToNode(elem.ownerDocument.body, new WebKitPoint(event.pageX, event.pageY));
              // }
              // 
              // var div = elem.ownerDocument.getElementById("CLICKED");
              // if (div)
              // {
              //     div.parentNode.removeChild(div);
              // }
              // 
              // div = elem.ownerDocument.createElementNS("http://www.w3.org/1999/xhtml", 'div');
              // div.setAttribute("style", "background-color: red; position: absolute; z-index: 999; width: 50px; height: 50px; left: " + p.x + "px; top: " + p.y + "px;");
              // div.id = "CLICKED";
              // div.setAttribute("id", div.id);
              // var divTxt = elem.ownerDocument.createTextNode(" ");
              // div.appendChild(divTxt);
              // elem.ownerDocument.body.appendChild(div);
              //                          
              // /////////////////////


              //rangy.init();
              try {
                // THIS WORKS (same as Rangy's method below)
                //                                 var r;
                //                                 if (elem.ownerDocument.caretRangeFromPoint)
                //                                 {
                //                                     r = elem.ownerDocument.caretRangeFromPoint(event.pageX, event.pageY);
                //                                 }
                //                                 else if (event.rangeParent)
                //                                 {
                //                                     r = elem.ownerDocument.createRange();
                //                                     range.setStart(event.rangeParent, event.rangeOffset);
                //                                 }
                //                                 
                // console.log("------ 1");
                // console.log(elem.ownerDocument);
                // console.log(event.pageX);
                // console.log(event.pageY);
                // console.log(r.startContainer);
                // console.log(r.startOffset);
                // console.log("------");

                var pos = rangy.positionFromPoint(event.pageX, event.pageY, elem.ownerDocument);
                // console.log("------ 2");
                // console.log(pos.node.textContent);
                // console.log(pos.offset);
                // console.log("------");

                par = undefined;

                for (var iPar = 0; iPar < data.pars.length; iPar++) {
                  var p = data.pars[iPar];

                  var startCFI = "epubcfi(" + p.cfi.partialStartCfi + ")";
                  var infoStart = EPUBcfi.getTextTerminusInfoWithPartialCFI(startCFI, elem.ownerDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                  //console.log(infoStart);

                  var endCFI = "epubcfi(" + p.cfi.partialEndCfi + ")";
                  var infoEnd = EPUBcfi.getTextTerminusInfoWithPartialCFI(endCFI, elem.ownerDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                  //console.log(infoEnd);

                  var range = rangy.createRange(elem.ownerDocument); //createNativeRange
                  range.setStartAndEnd(
                    infoStart.textNode[0], infoStart.textOffset,
                    infoEnd.textNode[0], infoEnd.textOffset
                  );

                  if (range.isPointInRange(pos.node, pos.offset)) {
                    // console.log(p.cfi.partialStartCfi);
                    // console.log(p.cfi.partialEndCfi);
                    // DOUBLE CHECK WITH getClientRects ??

                    par = p;
                    break;
                  }
                }
              } catch (e) {
                console.error(e);
              }

              if (!par) {
                if (wasPaused) {
                  mediaOverlayPlayer.toggleMediaOverlay();
                }
                return true;
              }
            }


            if (el && el != elem && el.nodeName.toLowerCase() === "body" && par && !par.getSmil().id) {
              //console.debug("MO CLICKED BLANK BODY");
              mediaOverlayPlayer.touchInit();
              return true;
            }

            mediaOverlayPlayer.playUserPar(par);
            return true;
          } else {
            var readaloud = $(elem).attr("ibooks:readaloud");
            if (!readaloud) {
              readaloud = $(elem).attr("epub:readaloud");
            }
            if (readaloud) {
              console.debug("MO readaloud attr: " + readaloud);

              var isPlaying = mediaOverlayPlayer.isPlaying();
              if (readaloud === "start" && !isPlaying ||
                readaloud === "stop" && isPlaying ||
                readaloud === "startstop") {
                mediaOverlayPlayer.toggleMediaOverlay();
                return true;
              }
            }
          }

          mediaOverlayPlayer.touchInit();
          return true;
        });
      }
    }

    var smil = mediaOverlay.getSmilBySpineItem(spineItem);
    if (!smil) {
      console.error("NO SMIL?? " + spineItem.idref + " /// " + spineItem.media_overlay_id);
      return;
    }

    var traverseSmilSeqs = function(root) {
      if (!root) return;

      if (root.nodeType && root.nodeType === "seq") {
        // if (root.element)
        // {
        //     console.error("WARN: seq.element already set: " + root.textref);
        // }

        if (root.textref) {
          var parts = root.textref.split('#');
          var file = parts[0];
          var fragmentId = (parts.length === 2) ? parts[1] : "";
          // 
          // console.debug(root.textref);
          // console.debug(fragmentId);
          // console.log("---- SHOULD BE EQUAL:");
          // console.debug(file);
          // console.debug(par.text.srcFile);
          // 
          // if (file !== par.text.srcFile)
          // {
          //     console.error("adjustParToSeqSyncGranularity textref.file !== par.text.srcFile ???");
          //     return par;
          // }
          // 
          // if (!fragmentId)
          // {
          //     console.error("adjustParToSeqSyncGranularity !fragmentId ???");
          //     return par;
          // }

          if (file && fragmentId) {
            var textRelativeRef = ResolveContentRef(file, smil.href);
            var same = textRelativeRef === spineItem.href;
            if (same) {
              root.element = $iframe[0].contentDocument.getElementById(fragmentId);

              if (!root.element) {
                console.error("seq.textref !element? " + root.textref);
              }

              // var selector = "#" + ReadiumSDK.Helpers.escapeJQuerySelector(fragmentId);
              // var $element = $(selector, element.ownerDocument.documentElement);
              // if ($element)
              // {
              //     seq.element = $element[0];
              // }
            }
          }
        }
      }

      if (root.children && root.children.length) {
        for (var i = 0; i < root.children.length; i++) {
          var child = root.children[i];
          traverseSmilSeqs(child);
        }
      }
    };
    traverseSmilSeqs(smil);

    //console.debug("[[MO ATTACH]] " + spineItem.idref + " /// " + spineItem.media_overlay_id + " === " + smil.id);

    var iter = new SmilIterator(smil);

    var fakeOpfRoot = "/99!";
    var epubCfiPrefix = "epubcfi";

    while (iter.currentPar) {
      iter.currentPar.element = undefined;
      iter.currentPar.cfi = undefined;

      if (true) { //iter.currentPar.text.srcFragmentId (includes empty frag ID)

        var textRelativeRef = ResolveContentRef(iter.currentPar.text.srcFile, iter.smil.href);

        var same = textRelativeRef === spineItem.href;
        if (same) {
          var selectBody = !iter.currentPar.text.srcFragmentId || iter.currentPar.text.srcFragmentId.length == 0;
          var selectId = iter.currentPar.text.srcFragmentId.indexOf(epubCfiPrefix) == 0 ? undefined : iter.currentPar.text.srcFragmentId;

          var $element = undefined;
          var isCfiTextRange = false;
          if (!selectBody && !selectId) {
            if (iter.currentPar.text.srcFragmentId.indexOf(epubCfiPrefix) === 0) {
              var partial = iter.currentPar.text.srcFragmentId.substr(epubCfiPrefix.length + 1, iter.currentPar.text.srcFragmentId.length - epubCfiPrefix.length - 2);

              if (partial.indexOf(fakeOpfRoot) === 0) {
                partial = partial.substr(fakeOpfRoot.length, partial.length - fakeOpfRoot.length);
              }
              //console.log(partial);
              var parts = partial.split(",");
              if (parts && parts.length === 3) {
                try {
                  var partialStartCfi = parts[0] + parts[1];
                  var startCFI = "epubcfi(" + partialStartCfi + ")";
                  var infoStart = EPUBcfi.getTextTerminusInfoWithPartialCFI(startCFI, $iframe[0].contentDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                  //console.log(infoStart);

                  var partialEndCfi = parts[0] + parts[2];
                  var endCFI = "epubcfi(" + partialEndCfi + ")";
                  var infoEnd = EPUBcfi.getTextTerminusInfoWithPartialCFI(endCFI, $iframe[0].contentDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                  //console.log(infoEnd);

                  var cfiTextParent = infoStart.textNode[0].parentNode;

                  iter.currentPar.cfi = {
                    smilTextSrcCfi: iter.currentPar.text.srcFragmentId,
                    partialRangeCfi: partial,
                    partialStartCfi: partialStartCfi,
                    partialEndCfi: partialEndCfi,

                    cfiTextParent: cfiTextParent

                    // textNode becomes invalid after highlighting! (dynamic span insertion/removal changes DOM)
                    // cfiRangeStart: infoStart,
                    // cfiRangeEnd: infoEnd
                  };

                  // TODO: not just start textNode, but all of them between start and end...
                  // ...that being said, CFI text ranges likely to be used only within a single common parent,
                  // so this is an acceptable implementation shortcut for this CFI experimentation (word-level text/audio synchronisation).
                  isCfiTextRange = true;
                  $element = $(cfiTextParent);
                  var modata = $element.data("mediaOverlayData");
                  if (!modata) {
                    modata = {
                      pars: [iter.currentPar]
                    };
                    $element.data("mediaOverlayData", modata);
                  } else {
                    if (modata.par) {
                      console.error("[WARN] non-CFI MO DATA already exists!");
                      modata.par = undefined;
                    }

                    var found = false;
                    if (modata.pars) {
                      for (var iPars = 0; iPars < modata.pars.length; iPars++) {
                        var par = modata.pars[iPars];

                        if (par === iter.currentPar) {
                          found = true;
                          console.error("[WARN] mediaOverlayData CFI PAR already registered!");
                        }
                      }
                    } else {
                      modata.pars = [];
                    }

                    if (!found) {
                      modata.pars.push(iter.currentPar);
                    }
                  }

                } catch (error) {
                  console.error(error);
                }
              } else {
                try {
                  var cfi = "epubcfi(" + partial + ")";
                  $element = EPUBcfi.getTargetElementWithPartialCFI(cfi, $iframe[0].contentDocument, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
                } catch (error) {
                  console.error(error);
                }
              }
            } else {
              console.error("SMIL text@src CFI fragment identifier scheme not supported: " + iter.currentPar.text.srcFragmentId);
            }
          } else {
            if (selectBody) {
              $element = $body; //$("body", contentDocElement);
            } else {
              $element = $($iframe[0].contentDocument.getElementById(selectId));
              //$element = $("#" + ReadiumSDK.Helpers.escapeJQuerySelector(iter.currentPar.text.srcFragmentId), contentDocElement);
            }
          }

          if ($element && $element.length > 0) {

            if (!isCfiTextRange) {
              if (iter.currentPar.element && iter.currentPar.element !== $element[0]) {
                console.error("DIFFERENT ELEMENTS??! " + iter.currentPar.text.srcFragmentId + " /// " + iter.currentPar.element.id);
              }

              var name = $element[0].nodeName ? $element[0].nodeName.toLowerCase() : undefined;
              if (name === "audio" || name === "video") {
                $element.attr("preload", "auto");
              }

              iter.currentPar.element = $element[0];

              var modata = $element.data("mediaOverlayData");
              if (modata) {
                console.error("[WARN] MO DATA already exists.");

                if (modata.par && modata.par !== iter.currentPar) {
                  console.error("DIFFERENT PARS??!");
                }
              }

              $element.data("mediaOverlayData", {
                par: iter.currentPar
              });

              /*
               $element.click(function() {
               var elem = $(this)[0];
               console.debug("MO CLICK (ELEM): " + elem.id);

               var par = $(this).data("mediaOverlayData").par;
               mediaOverlayPlayer.playUserPar(par);
               });
               */
            }
          } else {
            console.error("!! CANNOT FIND ELEMENT: " + iter.currentPar.text.srcFragmentId + " == " + iter.currentPar.text.srcFile + " /// " + spineItem.href);
          }
        } else {
          //console.debug("[INFO] " + spineItem.href + " != " + textRelativeRef + " # " + iter.currentPar.text.srcFragmentId);
        }
      }

      iter.next();
    }
  }
};

module.exports = MediaOverlayDataInjector

},{"../helpers/resolve-content-ref":"/Users/craverod/opensource/readium-js/src/sdk/helpers/resolve-content-ref.js","../models/smil-iterator":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-iterator.js","epub-cfi":"/Users/craverod/opensource/readium-js/node_modules/epub-cfi/src/index.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/media-overlay-element-highlighter.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery')
var rangy = require('rangy')

/**
 *
 * @param reader
 * @constructor
 */
function MediaOverlayElementHighlighter(reader) {

  this.includeParWhenAdjustingToSeqSyncGranularity = true;

  var DEFAULT_MO_ACTIVE_CLASS = "mo-active-default";
  var DEFAULT_MO_SUB_SYNC_CLASS = "mo-sub-sync";

  //var BACK_COLOR = "#99CCCC";

  var _highlightedElementPar = undefined;
  this.isElementHighlighted = function(par) {
    return _highlightedElementPar && par === _highlightedElementPar;
  };

  var _highlightedCfiPar = undefined;
  this.isCfiHighlighted = function(par) {
    return _highlightedCfiPar && par === _highlightedCfiPar;
  };

  var _activeClass = "";
  var _playbackActiveClass = "";

  var _reader = reader;

  var USE_RANGY = true && (typeof rangy !== "undefined");
  var _rangyCSS = undefined;
  var _rangyRange = undefined;

  var HIGHLIGHT_ID = "MO_SPEAK";

  var self = this;

  var $userStyle = undefined;

  this.reDo = function() {
    //this.reset();

    if ($userStyle) {
      $userStyle.remove();
    }
    $userStyle = undefined;

    var he = _highlightedElementPar;
    var hc = _highlightedCfiPar;
    var c1 = _activeClass;
    var c2 = _playbackActiveClass;

    if (_highlightedElementPar) {
      this.reset();

      this.highlightElement(he, c1, c2);
    } else if (_highlightedCfiPar) {
      this.reset();

      this.highlightCfi(hc, c1, c2);
    }
  };

  function ensureUserStyle($element, hasAuthorStyle, overrideWithUserStyle) {
    if ($userStyle) {
      try {
        if ($userStyle[0].ownerDocument === $element[0].ownerDocument) {
          return;
        }
      } catch (e) {

      }
    }


    $head = $("head", $element[0].ownerDocument.documentElement);

    $userStyle = $("<style type='text/css'> </style>");

    $userStyle.append("." + DEFAULT_MO_ACTIVE_CLASS + " {");

    var fallbackUserStyle = "background-color: yellow !important; color: black !important; border-radius: 0.4em;";

    var style = overrideWithUserStyle; //_reader.userStyles().findStyle("." + DEFAULT_MO_ACTIVE_CLASS);
    if (style) {
      var atLeastOne = false;
      for (var prop in style.declarations) {
        if (!style.declarations.hasOwnProperty(prop)) {
          continue;
        }

        atLeastOne = true;
        $userStyle.append(prop + ": " + style.declarations[prop] + "; ");
      }

      if (!atLeastOne && !hasAuthorStyle) {
        $userStyle.append(fallbackUserStyle);
      }
    } else if (!hasAuthorStyle) {
      $userStyle.append(fallbackUserStyle);
    }

    $userStyle.append("}");


    // ---- CFI
    //$userStyle.append(" .highlight {background-color: blue; border: 2x solid green;}"); //.hover-highlight


    $userStyle.appendTo($head);

    //console.debug($userStyle[0].textContent);
  };

  this.highlightElement = function(par, activeClass, playbackActiveClass) {

    if (!par || par === _highlightedElementPar) {
      return;
    }

    this.reset();

    _highlightedElementPar = par;
    _highlightedCfiPar = undefined;

    _activeClass = activeClass;
    _playbackActiveClass = playbackActiveClass;

    var seq = this.adjustParToSeqSyncGranularity(_highlightedElementPar);
    var element = seq.element;

    if (_playbackActiveClass && _playbackActiveClass !== "") {
      //console.debug("MO playbackActiveClass: " + _playbackActiveClass);
      $(element.ownerDocument.documentElement).addClass(_playbackActiveClass);
      //console.debug("MO playbackActiveClass 2: " + element.ownerDocument.documentElement.classList);
    }

    var $hel = $(element);

    var hasAuthorStyle = _activeClass && _activeClass !== "";
    var overrideWithUserStyle = _reader.userStyles().findStyle("." + DEFAULT_MO_ACTIVE_CLASS);

    ensureUserStyle($hel, hasAuthorStyle, overrideWithUserStyle);

    if (overrideWithUserStyle || !hasAuthorStyle) {
      //console.debug("MO active NO CLASS: " + _activeClass);

      if (hasAuthorStyle) {
        $hel.addClass(_activeClass);
      }

      $hel.addClass(DEFAULT_MO_ACTIVE_CLASS);

      //$(element).css("background", BACK_COLOR);
    } else {
      //console.debug("MO activeClass: " + _activeClass);
      $hel.addClass(_activeClass);
    }

    if (this.includeParWhenAdjustingToSeqSyncGranularity || _highlightedElementPar !== seq) {
      $(_highlightedElementPar.element).addClass(DEFAULT_MO_SUB_SYNC_CLASS);
    }

    // ---- CFI
    //         try
    //         {
    //             // //noinspection JSUnresolvedVariable
    //             // var cfi = EPUBcfi.Generator.generateElementCFIComponent(element); //$hel[0]
    //             // if(cfi[0] == "!") {
    //             //     cfi = cfi.substring(1);
    //             // }
    // 
    // //console.log(element);
    //         
    //             var firstTextNode = getFirstTextNode(element);
    //             var txtFirst = firstTextNode.textContent;
    // //console.log(txtFirst);
    // 
    //             var lastTextNode = getLastTextNode(element);
    //             var txtLast = lastTextNode.textContent;
    // //console.log(txtLast);
    //         
    //             var cfi = EPUBcfi.Generator.generateCharOffsetRangeComponent(
    //                     firstTextNode, 
    //                     0, 
    //                     lastTextNode, 
    //                     txtLast.length,
    //                     ["cfi-marker"],
    //                     [],
    //                     ["MathJax_Message"]
    //                     );
    //             
    //             var id = $hel.data("mediaOverlayData").par.getSmil().spineItemId;
    //             _reader.addHighlight(id, cfi, HIGHLIGHT_ID,
    //             "highlight", //"underline"
    //             undefined // styles
    //                         );
    //         }
    //         catch(error)
    //         {
    //             console.error(error);
    //         
    //             removeHighlight();
    //         }
  };

  this.highlightCfi = function(par, activeClass, playbackActiveClass) {

    if (!par || par === _highlightedCfiPar) {
      return;
    }

    this.reset();

    _highlightedElementPar = undefined;
    _highlightedCfiPar = par;

    _activeClass = activeClass;
    _playbackActiveClass = playbackActiveClass;

    var $hel = $(_highlightedCfiPar.cfi.cfiTextParent);

    var hasAuthorStyle = _activeClass && _activeClass !== "";
    var overrideWithUserStyle = _reader.userStyles().findStyle("." + DEFAULT_MO_ACTIVE_CLASS); // TODO: performance issue?

    ensureUserStyle($hel, hasAuthorStyle, overrideWithUserStyle);

    var clazz = (overrideWithUserStyle || !hasAuthorStyle) ? ((hasAuthorStyle ? (_activeClass + " ") : "") + DEFAULT_MO_ACTIVE_CLASS) : _activeClass;

    if (USE_RANGY) {
      var doc = _highlightedCfiPar.cfi.cfiTextParent.ownerDocument;

      _rangyRange = rangy.createRange(doc); //createNativeRange

      var startCFI = "epubcfi(" + _highlightedCfiPar.cfi.partialStartCfi + ")";
      var infoStart = EPUBcfi.getTextTerminusInfoWithPartialCFI(startCFI, doc, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
      //console.log(infoStart);

      var endCFI = "epubcfi(" + _highlightedCfiPar.cfi.partialEndCfi + ")";
      var infoEnd = EPUBcfi.getTextTerminusInfoWithPartialCFI(endCFI, doc, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
      //console.log(infoEnd);

      _rangyRange.setStartAndEnd(
        infoStart.textNode[0], infoStart.textOffset,
        infoEnd.textNode[0], infoEnd.textOffset
      );

      if (false && // we use CssClassApplier instead, because surroundContents() has no trivial undoSurroundContents() function (inc. text nodes normalisation, etc.)
        _rangyRange.canSurroundContents()) {
        _rangyRange.MO_createCssClassApplier = false;

        var span = doc.createElementNS("http://www.w3.org/1999/xhtml", 'span');
        span.id = HIGHLIGHT_ID;
        span.setAttribute("id", span.id);
        span.setAttribute("class", clazz + " mo-cfi-highlight");

        _rangyRange.surroundContents(span);
      } else {
        _rangyRange.MO_createCssClassApplier = true;

        if (!_rangyCSS || _rangyCSS.cssClass !== clazz) {
          _rangyCSS = rangy.createCssClassApplier(clazz, {
            elementTagName: "span",
            elementProperties: {
              className: "mo-cfi-highlight"
            },
            ignoreWhiteSpace: true,
            applyToEditableOnly: false,
            normalize: true
          }, ["span"]);
        }

        _rangyCSS.applyToRange(_rangyRange);
      }
    } else {
      try {
        //var id = $hel.data("mediaOverlayData").par.getSmil().spineItemId;
        var id = par.getSmil().spineItemId;
        _reader.addHighlight(id, par.cfi.partialRangeCfi, HIGHLIGHT_ID,
          "highlight", //"underline"
          undefined // styles
        );
      } catch (error) {
        console.error(error);
      }
    }
  };

  // ---- CFI
  //     
  //     function getFirstTextNode(node)
  //     {
  //         if (node.nodeType === Node.TEXT_NODE)
  //         {
  //             if (node.textContent.trim().length > 0)
  //                 return node;
  //         }
  //         
  //         for (var i = 0; i < node.childNodes.length; i++)
  //         {
  //             var child = node.childNodes[i];
  //             var first = getFirstTextNode(child);
  //             if (first)
  //             {
  //                 return first;
  //             }
  //         }
  //         
  //         return undefined;
  //     }
  //     
  //     function getLastTextNode(node)
  //     {
  //         if (node.nodeType === Node.TEXT_NODE)
  //         {
  //             if (node.textContent.trim().length > 0)
  //                 return node;
  //         }
  //         
  //         for (var i = node.childNodes.length-1; i >= 0; i--)
  //         {
  //             var child = node.childNodes[i];
  //             var last = getLastTextNode(child);
  //             if (last)
  //             {
  //                 return last;
  //             }
  //         }
  //         
  //         return undefined;
  //     }
  //     

  this.reset = function() {

    if (_highlightedCfiPar) {
      var doc = _highlightedCfiPar.cfi.cfiTextParent.ownerDocument;
      if (USE_RANGY) {
        if (_rangyCSS && _rangyRange.MO_createCssClassApplier) {
          _rangyCSS.undoToRange(_rangyRange);
        } else {
          var toRemove = undefined;
          while ((toRemove = doc.getElementById(HIGHLIGHT_ID)) !== null) {
            var txt = toRemove.textContent; // TODO: innerHTML? or better: hasChildNodes loop + detach and re-attach
            var txtNode = doc.createTextNode(txt);

            toRemove.parentNode.replaceChild(txtNode, toRemove);
            txtNode.parentNode.normalize();
          }
        }

        //_rangyCSS = undefined;
        _rangyRange = undefined;
      } else {
        try {
          _reader.removeHighlight(HIGHLIGHT_ID);

          var toRemove = undefined;
          while ((toRemove = doc.getElementById("start-" + HIGHLIGHT_ID)) !== null) {
            console.log("toRemove START");
            console.log(toRemove);
            toRemove.parentNode.removeChild(toRemove);
          }
          while ((toRemove = doc.getElementById("end-" + HIGHLIGHT_ID)) !== null) {
            console.log("toRemove END");
            console.log(toRemove);
            toRemove.parentNode.removeChild(toRemove);
          }
        } catch (error) {
          console.error(error);
        }
      }

      _highlightedCfiPar = undefined;
    }




    if (_highlightedElementPar) {

      var seq = this.adjustParToSeqSyncGranularity(_highlightedElementPar);
      var element = seq.element;
      if (this.includeParWhenAdjustingToSeqSyncGranularity || _highlightedElementPar !== seq) {
        $(_highlightedElementPar.element).removeClass(DEFAULT_MO_SUB_SYNC_CLASS);
      }

      if (_playbackActiveClass && _playbackActiveClass !== "") {
        //console.debug("MO RESET playbackActiveClass: " + _playbackActiveClass);
        $(element.ownerDocument.documentElement).removeClass(_playbackActiveClass);
      }

      if (_activeClass && _activeClass !== "") {
        //console.debug("MO RESET activeClass: " + _activeClass);
        $(element).removeClass(_activeClass);
      }
      //else
      //{
      //console.debug("MO RESET active NO CLASS: " + _activeClass);
      $(element).removeClass(DEFAULT_MO_ACTIVE_CLASS);
      //$(element).css("background", '');
      //}

      _highlightedElementPar = undefined;
    }

    _activeClass = "";
    _playbackActiveClass = "";
  };

  this.adjustParToSeqSyncGranularity = function(par) {
    if (!par) return undefined;

    var sync = _reader.viewerSettings().mediaOverlaysSynchronizationGranularity;
    if (sync && sync.length > 0) {
      var element = par.element || (par.cfi ? par.cfi.cfiTextParent : undefined);
      if (!element) {
        console.error("adjustParToSeqSyncGranularity !element ???");
        return par; // should never happen!
      }

      var seq = par.getFirstSeqAncestorWithEpubType(sync, this.includeParWhenAdjustingToSeqSyncGranularity);
      if (seq && seq.element) {
        return seq;
      }
    }

    return par;
  };
};

module.exports = MediaOverlayElementHighlighter
},{"jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","rangy":"/Users/craverod/opensource/readium-js/node_modules/rangy/lib/rangy-core.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/media-overlay-player.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var AudioPlayer = require('./audio-player')
var Events = require('../events')
var MediaOverlayElementHighlighter = require('./media-overlay-element-highlighter')
var ResolveContentRef = require('../helpers/resolve-content-ref')
var ScrollView = require('./scroll-view')
var SmilIterator = require('../models/smil-iterator')

/**
 *
 * @param reader
 * @param onStatusChanged
 * @constructor
 */
function MediaOverlayPlayer(reader, onStatusChanged) {


  var _smilIterator = undefined;

  var _audioPlayer = new AudioPlayer(onStatusChanged, onAudioPositionChanged, onAudioEnded, onPlay, onPause);

  var _ttsIsPlaying = false;
  var _currentTTS = undefined;
  var _enableHTMLSpeech = true && typeof window.speechSynthesis !== "undefined" && speechSynthesis != null; // set to false to force "native" platform TTS engine, rather than HTML Speech API

  var _SpeechSynthesisUtterance = undefined;
  //var _skipTTSEndEvent = false;
  var TOKENIZE_TTS = false;

  var _embeddedIsPlaying = false;
  var _currentEmbedded = undefined;


  this.isPlaying = function() {
    return _audioPlayer.isPlaying() || _ttsIsPlaying || _embeddedIsPlaying || _blankPagePlayer;
  }

  //var _currentPagination = undefined;
  var _package = reader.package();
  var _settings = reader.viewerSettings();
  var self = this;
  var _elementHighlighter = new MediaOverlayElementHighlighter(reader);

  reader.on(Events.READER_VIEW_DESTROYED, function() {

    self.reset();

  });


  this.applyStyles = function() {
    _elementHighlighter.reDo();
  };

  //
  // should use this.onSettingsApplied() instead!
  //    this.setRate = function(rate) {
  //        _audioPlayer.setRate(rate);
  //    };
  //    this.setVolume = function(volume) {
  //        _audioPlayer.setVolume(volume);
  //    };


  this.onSettingsApplied = function() {
    //console.debug(_settings);
    _audioPlayer.setRate(_settings.mediaOverlaysRate);
    _audioPlayer.setVolume(_settings.mediaOverlaysVolume / 100.0);
  };
  self.onSettingsApplied();
  //ReadiumSDK.
  reader.on(Events.SETTINGS_APPLIED, this.onSettingsApplied, this);

  /*
  var lastElement = undefined;
  var lastElementColor = "";
  */

  var _wasPlayingAtDocLoadStart = false;
  this.onDocLoadStart = function() {
    // 1) ReadiumSDK.Events.CONTENT_DOCUMENT_LOAD_START
    // (maybe 2-page fixed-layout or reflowable spread == 2 documents == 2x events)
    // MOPLayer.onDocLoad()

    // 2) ReadiumSDK.Events.CONTENT_DOCUMENT_LOADED
    // (maybe 2-page fixed-layout or reflowable spread == 2 documents == 2x events)
    //_mediaOverlayDataInjector.attachMediaOverlayData($iframe, spineItem, _viewerSettings);

    // 3) ReadiumSDK.Events.PAGINATION_CHANGED (layout finished, notified before rest of app, just once)
    // MOPLayer.onPageChanged()

    var wasPlaying = self.isPlaying();
    if (wasPlaying) {
      _wasPlayingAtDocLoadStart = true;
      self.pause();
    }
  };

  var _lastPaginationData = undefined;

  this.onPageChanged = function(paginationData) {

    _lastPaginationData = paginationData;

    var wasPausedBecauseNoAutoNextSmil = _wasPausedBecauseNoAutoNextSmil;
    _wasPausedBecauseNoAutoNextSmil = false;

    var wasPlayingAtDocLoadStart = _wasPlayingAtDocLoadStart;
    _wasPlayingAtDocLoadStart = false;

    if (!paginationData) {
      self.reset();
      return;
    }

    //        if (paginationData.paginationInfo)
    //        {
    //            _currentPagination = paginationData.paginationInfo;
    //        }

    /*
    if (lastElement)
    {
        $(lastElement).css("background-color", lastElementColor);
        lastElement = undefined;
    }
    */

    var element = undefined;
    var isCfiTextRange = false;

    var fakeOpfRoot = "/99!";
    var epubCfiPrefix = "epubcfi";

    if (paginationData.elementId || paginationData.initiator == self) {
      var spineItems = reader.getLoadedSpineItems();

      var rtl = reader.spine().isRightToLeft();

      for (var i = (rtl ? (spineItems.length - 1) : 0); rtl && i >= 0 || !rtl && i < spineItems.length; i += (rtl ? -1 : 1)) {
        var spineItem = spineItems[i];
        if (paginationData.spineItem && paginationData.spineItem != spineItem) {
          continue;
        }

        if (paginationData.elementId && paginationData.elementId.indexOf(epubCfiPrefix) === 0) {
          _elementHighlighter.reset(); // ensure clean DOM (no CFI span markers)

          var partial = paginationData.elementId.substr(epubCfiPrefix.length + 1, paginationData.elementId.length - epubCfiPrefix.length - 2);

          if (partial.indexOf(fakeOpfRoot) === 0) {
            partial = partial.substr(fakeOpfRoot.length, partial.length - fakeOpfRoot.length);
          }
          //console.log(partial);
          var parts = partial.split(",");
          if (parts && parts.length === 3) {
            try {
              var cfi = parts[0] + parts[1];
              var $element = reader.getElementByCfi(spineItem, cfi, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);

              element = ($element && $element.length > 0) ? $element[0] : undefined;
              if (element) {
                if (element.nodeType === Node.TEXT_NODE) {
                  element = element.parentNode;
                }
                break;
              }
            } catch (error) {
              console.error(error);
            }
          } else {
            try {
              //var cfi = "epubcfi(" + partial + ")";
              //var $element = EPUBcfi.getTargetElementWithPartialCFI(cfi, DOC);
              var $element = reader.getElementByCfi(spineItem, partial, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);

              element = ($element && $element.length > 0) ? $element[0] : undefined;
              if (element) {
                if (element.nodeType === Node.TEXT_NODE) {
                  element = element.parentNode;
                }
                break;
              }
            } catch (error) {
              console.error(error);
            }
          }
        }

        if (!element) {
          if (paginationData.initiator == self && !paginationData.elementId) {
            var $element = reader.getElement(spineItem, "body");
            element = ($element && $element.length > 0) ? $element[0] : undefined;
          } else {
            var $element = reader.getElementById(spineItem, paginationData.elementId);
            element = ($element && $element.length > 0) ? $element[0] : undefined;
            //("#" + ReadiumSDK.Helpers.escapeJQuerySelector(paginationData.elementId))
          }

          if (element) {
            /*
            console.error("GREEN: " + paginationData.elementId);
            lastElement = element;
            lastElementColor = $(element).css("background-color");
            $(element).css("background-color", "green");
             */
            break;
          }
        }
      }

      if (!element) {
        console.error("paginationData.elementId BUT !element: " + paginationData.elementId);
      }
    }

    var wasPlaying = self.isPlaying() || wasPlayingAtDocLoadStart;

    if (!_smilIterator || !_smilIterator.currentPar) {
      if (paginationData.initiator !== self) {
        clipBeginOffset = 0.0;
        self.reset();

        if (paginationData.elementId && element) {
          if (wasPlaying || wasPausedBecauseNoAutoNextSmil) {
            paginationData.elementIdResolved = element;
            self.toggleMediaOverlayRefresh(paginationData);
          }
        } else if (wasPlaying || wasPausedBecauseNoAutoNextSmil) {
          self.toggleMediaOverlay();
        }
        return;
      }

      //paginationData.initiator === self
      //
      //            if (!paginationData.elementId)
      //            {
      //                console.error("!paginationData.elementId");
      //                clipBeginOffset = 0.0;
      //                return;
      //            }

      if (!element) {
        console.error("!element: " + paginationData.elementId);
        clipBeginOffset = 0.0;
        return;
      }

      var moData = $(element).data("mediaOverlayData");
      if (!moData) {
        console.error("!moData: " + paginationData.elementId);
        clipBeginOffset = 0.0;
        return;
      }

      var parToPlay = moData.par ? moData.par : moData.pars[0];

      if (moData.pars) {
        for (var iPar = 0; iPar < moData.pars.length; iPar++) {
          var p = moData.pars[iPar];

          if (paginationData.elementId === p.cfi.smilTextSrcCfi) {
            parToPlay = p;
            break;
          }
        }
      }

      playPar(parToPlay);
      return;
    }

    var noReverseData = !_smilIterator.currentPar.element && !_smilIterator.currentPar.cfi;
    if (noReverseData) {
      console.error("!! _smilIterator.currentPar.element ??");
    }

    //console.debug("+++> paginationData.elementId: " + paginationData.elementId + " /// " + _smilIterator.currentPar.text.srcFile + " # " + _smilIterator.currentPar.text.srcFragmentId); //PageOpenRequest.elementId


    if (paginationData.initiator == self) {
      var notSameTargetID = paginationData.elementId && paginationData.elementId !== _smilIterator.currentPar.text.srcFragmentId;

      if (notSameTargetID) {
        console.error("!! paginationData.elementId !== _smilIterator.currentPar.text.srcFragmentId");
      }

      if (notSameTargetID || noReverseData) {
        clipBeginOffset = 0.0;
        return;
      }

      if (wasPlaying) {
        highlightCurrentElement();
      } else {
        playCurrentPar();
      }
    } else {
      if (!wasPlaying && !wasPausedBecauseNoAutoNextSmil) {
        self.reset();
        return;
      }

      if (!paginationData.elementId) {
        //self.reset();
      }

      if (paginationData.elementId && !element) {
        //self.reset();
        return;
      }

      if (paginationData.elementId) {
        paginationData.elementIdResolved = element;
      }

      self.toggleMediaOverlayRefresh(paginationData);
    }
  };

  function playPar(par) {

    var parSmil = par.getSmil();
    if (!_smilIterator || _smilIterator.smil != parSmil) {
      _smilIterator = new SmilIterator(parSmil);
    } else {
      _smilIterator.reset();
    }

    _smilIterator.goToPar(par);

    if (!_smilIterator.currentPar) {
      console.error("playPar !_smilIterator.currentPar");
      return;
    }

    playCurrentPar();
  }

  var clipBeginOffset = 0.0;

  var _blankPagePlayer = undefined;

  function initBlankPagePlayer() {
    self.resetBlankPage();

    _blankPagePlayer = setTimeout(function() {

      if (!_blankPagePlayer) {
        return;
      }

      self.resetBlankPage();

      if (!_smilIterator || !_smilIterator.currentPar) {
        self.reset();
        return;
      }

      audioCurrentTime = 0.0;
      //console.log("BLANK END.");
      //nextSmil(true);
      onAudioPositionChanged(_smilIterator.currentPar.audio.clipEnd + 0.1, 2);

    }, 2000);

    onStatusChanged({
      isPlaying: true
    });
  }

  function playCurrentPar() {
    _wasPlayingScrolling = false;

    if (!_smilIterator || !_smilIterator.currentPar) {
      console.error("playCurrentPar !_smilIterator || !_smilIterator.currentPar ???");
      return;
    }

    if (!_smilIterator.smil.id) {
      _audioPlayer.reset();

      self.resetTTS();
      self.resetEmbedded();

      setTimeout(function() {
        initBlankPagePlayer();
      }, 100);

      return;
    } else if (!_smilIterator.currentPar.audio.src) {
      clipBeginOffset = 0.0;

      //            if (_currentTTS)
      //            {
      //                _skipTTSEnded = true;
      //            }

      _audioPlayer.reset();

      var element = _smilIterator.currentPar.element;
      if (element) {
        audioCurrentTime = 0.0;

        var name = element.nodeName ? element.nodeName.toLowerCase() : undefined;

        if (name === "audio" || name === "video") {
          self.resetTTS();
          self.resetBlankPage();

          if (_currentEmbedded) {
            self.resetEmbedded();
          }

          _currentEmbedded = element;

          _currentEmbedded.pause();

          // DONE at reader_view.attachMO()
          //$(_currentEmbedded).attr("preload", "auto");

          _currentEmbedded.currentTime = 0;

          _currentEmbedded.play();

          $(_currentEmbedded).on("ended", self.onEmbeddedEnd);

          _embeddedIsPlaying = true;

          // gives the audio player some dispatcher time to raise the onPause event
          setTimeout(function() {
            onStatusChanged({
              isPlaying: true
            });
          }, 80);

          //                    $(element).on("seeked", function()
          //                    {
          //                        $(element).off("seeked", onSeeked);
          //                    });
        } else {
          self.resetEmbedded();
          self.resetBlankPage();

          _currentTTS = element.textContent; //.innerText (CSS display sensitive + script + style tags)
          if (!_currentTTS || _currentTTS == "") {
            _currentTTS = undefined;
          } else {
            speakStart(_currentTTS);
          }
        }
      }

      var cfi = _smilIterator.currentPar.cfi;
      if (cfi) {
        audioCurrentTime = 0.0;
        self.resetEmbedded();
        self.resetBlankPage();

        _elementHighlighter.reset(); // ensure clean DOM (no CFI span markers)

        var doc = cfi.cfiTextParent.ownerDocument;

        var startCFI = "epubcfi(" + cfi.partialStartCfi + ")";
        var infoStart = EPUBcfi.getTextTerminusInfoWithPartialCFI(startCFI, doc, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
        //console.log(infoStart);

        var endCFI = "epubcfi(" + cfi.partialEndCfi + ")";
        var infoEnd = EPUBcfi.getTextTerminusInfoWithPartialCFI(endCFI, doc, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
        //console.log(infoEnd);

        if (rangy) {
          //infoStart.textNode[0].parentNode.ownerDocument
          var range = rangy.createRange(doc); //createNativeRange
          range.setStartAndEnd(
            infoStart.textNode[0], infoStart.textOffset,
            infoEnd.textNode[0], infoEnd.textOffset
          );
          _currentTTS = range.toString(); //.text()
        } else {
          _currentTTS = undefined;
        }

        if (!_currentTTS || _currentTTS == "") {
          _currentTTS = undefined;
        } else {
          speakStart(_currentTTS);
        }
      }
    } else {
      self.resetTTS();
      self.resetEmbedded();
      self.resetBlankPage();

      var dur = _smilIterator.currentPar.audio.clipEnd - _smilIterator.currentPar.audio.clipBegin;
      if (dur <= 0 || clipBeginOffset > dur) {
        console.error("### MO XXX PAR OFFSET: " + clipBeginOffset + " / " + dur);
        clipBeginOffset = 0.0;
      } else {
        //console.debug("### MO PAR OFFSET: " + clipBeginOffset);
      }

      var audioContentRef = ResolveContentRef(_smilIterator.currentPar.audio.src, _smilIterator.smil.href);

      var audioSource = _package.resolveRelativeUrlMO(audioContentRef);

      var startTime = _smilIterator.currentPar.audio.clipBegin + clipBeginOffset;

      //console.debug("PLAY START TIME: " + startTime + "("+_smilIterator.currentPar.audio.clipBegin+" + "+clipBeginOffset+")");

      _audioPlayer.playFile(_smilIterator.currentPar.audio.src, audioSource, startTime); //_smilIterator.currentPar.element ? _smilIterator.currentPar.element : _smilIterator.currentPar.cfi.cfiTextParent
    }

    clipBeginOffset = 0.0;

    highlightCurrentElement();
  }

  function nextSmil(goNext) {
    self.pause();

    //console.debug("current Smil: " + _smilIterator.smil.href + " /// " + _smilIterator.smil.id);

    var nextSmil = goNext ? _package.media_overlay.getNextSmil(_smilIterator.smil) : _package.media_overlay.getPreviousSmil(_smilIterator.smil);
    if (nextSmil) {

      //console.debug("nextSmil: " + nextSmil.href + " /// " + nextSmil.id);

      _smilIterator = new SmilIterator(nextSmil);
      if (_smilIterator.currentPar) {
        if (!goNext) {
          while (!_smilIterator.isLast()) {
            _smilIterator.next();
          }
        }

        //console.debug("openContentUrl (nextSmil): " + _smilIterator.currentPar.text.src + " -- " + _smilIterator.smil.href);

        reader.openContentUrl(_smilIterator.currentPar.text.src, _smilIterator.smil.href, self);
      }
    } else {
      console.log("No more SMIL");
      self.reset();
    }
  }


  var _skipAudioEnded = false;
  //    var _skipTTSEnded = false;

  var audioCurrentTime = 0.0;

  var DIRECTION_MARK = -999;

  //    var _letPlay = false;

  //from
  //1 = audio player
  //2 = blank page
  //3 = video/audio embbeded
  //4 = TTS
  //5 = audio end
  //6 = user previous/next/escape
  function onAudioPositionChanged(position, from, skipping) { //noLetPlay

    audioCurrentTime = position;

    //        if (_letPlay)
    //        {
    //            return;
    //        }

    _skipAudioEnded = false;
    //        _skipTTSEnded = false;

    if (!_smilIterator || !_smilIterator.currentPar) {
      return;
    }

    var parFrom = _smilIterator.currentPar;

    var audio = _smilIterator.currentPar.audio;

    //var TOLERANCE = 0.05;
    if (
      //position >= (audio.clipBegin - TOLERANCE) &&
      position > DIRECTION_MARK &&
      position <= audio.clipEnd) {

      //console.debug("onAudioPositionChanged: " + position);
      return;
    }

    _skipAudioEnded = true;

    //console.debug("PLAY NEXT: " + "(" + audio.clipBegin + " -- " + audio.clipEnd + ") [" + from + "] " +  position);
    //console.debug(_smilIterator.currentPar.text.srcFragmentId);

    var isPlaying = _audioPlayer.isPlaying();
    if (isPlaying && from === 6) {
      console.debug("from userNav _audioPlayer.isPlaying() ???");
    }

    var goNext = position > audio.clipEnd;

    var doNotNextSmil = !_autoNextSmil && from !== 6 && goNext;

    var spineItemIdRef = (_smilIterator && _smilIterator.smil && _smilIterator.smil.spineItemId) ? _smilIterator.smil.spineItemId : ((_lastPaginationData && _lastPaginationData.spineItem && _lastPaginationData.spineItem.idref) ? _lastPaginationData.spineItem.idref : undefined);
    if (doNotNextSmil && spineItemIdRef && _lastPaginationData && _lastPaginationData.paginationInfo && _lastPaginationData.paginationInfo.openPages && _lastPaginationData.paginationInfo.openPages.length > 1) {
      //var iPage = _lastPaginationData.paginationInfo.isRightToLeft ? _lastPaginationData.paginationInfo.openPages.length - 1 : 0;
      var iPage = 0;

      var openPage = _lastPaginationData.paginationInfo.openPages[iPage];
      if (spineItemIdRef === openPage.idref) {
        doNotNextSmil = false;
      }
    }

    if (goNext) {
      _smilIterator.next();
    } else //position <= DIRECTION_MARK
    {
      _smilIterator.previous();
    }

    if (!_smilIterator.currentPar) {
      //
      //        if (!noLetPlay)
      //        {
      //            _letPlay = true;
      //            setTimeout(function()
      //            {
      //                _letPlay = false;
      //                nextSmil(goNext);
      //            }, 200);
      //        }
      //        else
      //        {
      //            nextSmil(goNext);
      //        }

      //console.debug("NEXT SMIL ON AUDIO POS");

      if (doNotNextSmil) {
        _wasPausedBecauseNoAutoNextSmil = true;
        self.reset();
        //self.pause();
      } else {
        nextSmil(goNext);
      }
      return;
    }

    //console.debug("ITER: " + _smilIterator.currentPar.text.srcFragmentId);

    if (!_smilIterator.currentPar.audio) {
      self.pause();
      return;
    }

    if (_settings.mediaOverlaysSkipSkippables) {
      var skip = false;
      var parent = _smilIterator.currentPar;
      while (parent) {
        if (parent.isSkippable && parent.isSkippable(_settings.mediaOverlaysSkippables)) {
          skip = true;
          break;
        }
        parent = parent.parent;
      }

      if (skip) {
        console.log("MO SKIP: " + parent.epubtype);

        self.pause();

        var pos = goNext ? _smilIterator.currentPar.audio.clipEnd + 0.1 : DIRECTION_MARK - 1;

        onAudioPositionChanged(pos, from, true); //noLetPlay
        return;
      }
    }

    // _settings.mediaOverlaysSynchronizationGranularity
    if (!isPlaying && (_smilIterator.currentPar.element || _smilIterator.currentPar.cfi && _smilIterator.currentPar.cfi.cfiTextParent)) {
      var scopeTo = _elementHighlighter.adjustParToSeqSyncGranularity(_smilIterator.currentPar);
      if (scopeTo && scopeTo !== _smilIterator.currentPar) {
        var scopeFrom = _elementHighlighter.adjustParToSeqSyncGranularity(parFrom);
        if (scopeFrom && (scopeFrom === scopeTo || !goNext)) {
          if (scopeFrom === scopeTo) {
            do {
              if (goNext) _smilIterator.next();
              else _smilIterator.previous();
            } while (_smilIterator.currentPar && _smilIterator.currentPar.hasAncestor(scopeFrom));

            if (!_smilIterator.currentPar) {
              //console.debug("adjustParToSeqSyncGranularity nextSmil(goNext)");

              if (doNotNextSmil) {
                _wasPausedBecauseNoAutoNextSmil = true;
                self.reset();
                //self.pause();
              } else {
                nextSmil(goNext);
              }

              return;
            }
          }

          //console.debug("ADJUSTED: " + _smilIterator.currentPar.text.srcFragmentId);
          if (!goNext) {
            var landed = _elementHighlighter.adjustParToSeqSyncGranularity(_smilIterator.currentPar);
            if (landed && landed !== _smilIterator.currentPar) {
              var backup = _smilIterator.currentPar;

              var innerPar = undefined;
              do {
                innerPar = _smilIterator.currentPar;
                _smilIterator.previous();
              }
              while (_smilIterator.currentPar && _smilIterator.currentPar.hasAncestor(landed));

              if (_smilIterator.currentPar) {
                _smilIterator.next();

                if (!_smilIterator.currentPar.hasAncestor(landed)) {
                  console.error("adjustParToSeqSyncGranularity !_smilIterator.currentPar.hasAncestor(landed) ???");
                }
                //assert 
              } else {
                //console.debug("adjustParToSeqSyncGranularity reached begin");

                _smilIterator.reset();

                if (_smilIterator.currentPar !== innerPar) {
                  console.error("adjustParToSeqSyncGranularity _smilIterator.currentPar !=== innerPar???");
                }
              }

              if (!_smilIterator.currentPar) {
                console.error("adjustParToSeqSyncGranularity !_smilIterator.currentPar ?????");
                _smilIterator.goToPar(backup);
              }

              //console.debug("ADJUSTED PREV: " + _smilIterator.currentPar.text.srcFragmentId);
            }
          }
        }
      }
    }

    if (_audioPlayer.isPlaying() && _smilIterator.currentPar.audio.src && _smilIterator.currentPar.audio.src == _audioPlayer.currentSmilSrc() && position >= _smilIterator.currentPar.audio.clipBegin && position <= _smilIterator.currentPar.audio.clipEnd) {
      //console.debug("ONLY highlightCurrentElement");
      highlightCurrentElement();
      return;
    }

    //position <= DIRECTION_MARK goes here (goto previous):

    //            if (!noLetPlay && position > DIRECTION_MARK
    //                && _audioPlayer.isPlaying() && _audioPlayer.srcRef() != _smilIterator.currentPar.audio.src)
    //            {
    //                _letPlay = true;
    //                setTimeout(function()
    //                {
    //                    _letPlay = false;
    //                    playCurrentPar();
    //                }, 100);
    //
    //                playCurrentPar();
    //
    //                return;
    //            }

    playCurrentPar();
  }

  this.touchInit = function() {
    var todo = _audioPlayer.touchInit();
    if (todo) {
      if (_enableHTMLSpeech) {
        speakStart("o", 0);
      }
    }
  };

  var tokeniseTTS = function(element) {
    var BLOCK_DELIMITERS = ['p', 'div', 'pagenum', 'td', 'table', 'li', 'ul', 'ol'];
    var BOUNDARY_PUNCTUATION = [',', ';', '.', '-', '??', '??', '?', '!'];
    var IGNORABLE_PUNCTUATION = ['"', '\'', '??', '??', '??', '??'];

    var flush = function(t, r) {
      if (t.word.length <= 0) {
        return;
      }

      var pos = t.text.length;
      r.spanMap[pos] = t.counter;
      t.text += t.word;
      t.markup += t.html.substring(0, t.wordStart) +
        '<span class="tts_off" id="tts_' + t.counter + '">' +
        t.html.substring(t.wordStart, t.wordEnd) +
        '</span>' + t.html.substring(t.wordEnd, t.html.length);
      t.word = "";
      t.html = "";
      t.wordStart = -1;
      t.wordEnd = -1;
      t.counter++;
    };

    var r = {
      element: element,
      innerHTML_tts: "",
      spanMap: {},
      text: "",
      lastCharIndex: undefined
    };
    r.element.innerHTML_original = element.innerHTML;

    var t = {
      inTag: false,
      counter: 0,
      wordStart: -1,
      wordEnd: -1,
      text: '',
      markup: '',
      word: '',
      html: ''
    };

    var limit = r.element.innerHTML_original.length;
    var i = 0;
    while (i <= limit) {
      if (t.inTag) {
        t.html += r.element.innerHTML_original[i];
        if (r.element.innerHTML_original[i] == ">") {
          t.inTag = false;
          // if it's a block element delimiter, flush
          var blockCheck = t.html.match(/<\/(.*?)>$/);
          if (blockCheck && BLOCK_DELIMITERS.indexOf(blockCheck[1]) > -1) {
            flush(t, r);
            t.text += ' ';
          }
        }
      } else {
        if (i == limit || r.element.innerHTML_original[i].match(/\s/)) {
          flush(t, r);

          // append the captured whitespace
          if (i < limit) {
            t.text += r.element.innerHTML_original[i];
            t.markup += r.element.innerHTML_original[i];
          }
        } else if (BOUNDARY_PUNCTUATION.indexOf(r.element.innerHTML_original[i]) > -1) {
          flush(t, r);

          t.wordStart = t.html.length;
          t.wordEnd = t.html.length + 1;
          t.word += r.element.innerHTML_original[i];
          t.html += r.element.innerHTML_original[i];

          flush(t, r);
        } else if (r.element.innerHTML_original[i] == "<") {
          t.inTag = true;
          t.html += r.element.innerHTML_original[i];
        } else {
          if (t.word.length == 0) {
            t.wordStart = t.html.length;
          }
          t.wordEnd = t.html.length + 1;
          t.word += r.element.innerHTML_original[i];
          t.html += r.element.innerHTML_original[i];
        }
      }
      i++;
    }
    //
    //console.debug(t.text);
    //        console.debug("----");
    //console.debug(t.markup);

    r.text = t.text;
    r.innerHTML_tts = t.markup;
    r.element.innerHTML = r.innerHTML_tts;

    return r;
  };

  var $ttsStyle = undefined;

  function ensureTTSStyle($element) {
    if ($ttsStyle && $ttsStyle[0].ownerDocument === $element[0].ownerDocument) {
      return;
    }

    var style = ".tts_on{background-color:red;color:white;} .tts_off{}";

    $head = $("head", $element[0].ownerDocument.documentElement);

    $ttsStyle = $("<style type='text/css'> </style>").appendTo($head);

    $ttsStyle.append(style);
  }

  var speakStart = function(txt, volume) {
    var tokenData = undefined;
    var curPar = (_smilIterator && _smilIterator.currentPar) ? _smilIterator.currentPar : undefined;
    var element = curPar ? curPar.element : undefined;
    var cfi = curPar ? curPar.cfi : undefined;

    if (!volume || volume > 0) {
      // gives the audio player some dispatcher time to raise the onPause event
      setTimeout(function() {
        onStatusChanged({
          isPlaying: true
        });
      }, 80);

      _ttsIsPlaying = true;

      if (TOKENIZE_TTS && element) {
        var $el = $(element);
        ensureTTSStyle($el);


        if (element.innerHTML_original) {
          element.innerHTML = element.innerHTML_original;
          element.innerHTML_original = undefined;
        }
        tokenData = tokeniseTTS(element);
      }
    }

    if (!_enableHTMLSpeech) {
      reader.trigger(Events.MEDIA_OVERLAY_TTS_SPEAK, {
        tts: txt
      }); // resume if txt == undefined
      return;
    }

    if (!txt && window.speechSynthesis.paused) {
      //console.debug("TTS resume");
      window.speechSynthesis.resume();

      return;
    }

    var text = txt || _currentTTS;

    if (text) {
      if (_SpeechSynthesisUtterance) {
        //console.debug("_SpeechSynthesisUtterance nullify");

        if (TOKENIZE_TTS) {
          if (_SpeechSynthesisUtterance.onend) {
            _SpeechSynthesisUtterance.onend({
              forceSkipEnd: true,
              target: _SpeechSynthesisUtterance
            });
          }

          _SpeechSynthesisUtterance.tokenData = undefined;

          _SpeechSynthesisUtterance.onboundary = undefined;
          //                 _SpeechSynthesisUtterance.onboundary = function(event)
          //                 {
          // console.debug("OLD TTS boundary");
          //                 
          //                         event.target.tokenData = undefined;
          //  
          //                 };
        }

        _SpeechSynthesisUtterance.onend = undefined;
        //                 _SpeechSynthesisUtterance.onend = function(event)
        //                 {
        // console.debug("OLD TTS ended");
        //                     if (TOKENIZE_TTS)
        //                     {
        //                         event.target.tokenData = undefined;
        //                     }
        //                 };

        _SpeechSynthesisUtterance.onerror = undefined;
        //                 _SpeechSynthesisUtterance.onerror = function(event)
        //                 {
        // console.debug("OLD TTS error");
        // //console.debug(event);
        //                     if (TOKENIZE_TTS)
        //                     {
        //                         event.target.tokenData = undefined;
        //                     }
        //                 };

        _SpeechSynthesisUtterance = undefined;
      }
      //
      //            if (window.speechSynthesis.pending ||
      //                window.speechSynthesis.speaking)
      //            {
      //                _skipTTSEndEvent = true;
      //            }

      console.debug("paused: " + window.speechSynthesis.paused);
      console.debug("speaking: " + window.speechSynthesis.speaking);
      console.debug("pending: " + window.speechSynthesis.pending);

      //             if (!window.speechSynthesis.paused)
      //             {
      // console.debug("TTS pause before speak");
      //                 window.speechSynthesis.pause();
      //             }

      function cancelTTS(first) {
        if (first || window.speechSynthesis.pending) {
          console.debug("TTS cancel before speak");
          window.speechSynthesis.cancel();

          setTimeout(function() {
            cancelTTS(false);
          }, 5);
        } else {
          updateTTS();
        }
      }
      cancelTTS(true);

      function updateTTS() {
        // setTimeout(function()
        // {

        _SpeechSynthesisUtterance = new SpeechSynthesisUtterance();

        if (TOKENIZE_TTS && tokenData) {
          _SpeechSynthesisUtterance.tokenData = tokenData;

          _SpeechSynthesisUtterance.onboundary = function(event)
            //_SpeechSynthesisUtterance.addEventListener("boundary", function(event)
            {
              if (!_SpeechSynthesisUtterance) {
                return;
              }

              console.debug("TTS boundary: " + event.name + " / " + event.charIndex);
              //console.debug(event);

              var tokenised = event.target.tokenData;
              if (!tokenised || !tokenised.spanMap.hasOwnProperty(event.charIndex)) {
                return;
              }

              if (false && tokenised.lastCharIndex) {
                //console.debug("TTS lastCharIndex: " + tokenised.lastCharIndex);
                var id = 'tts_' + tokenised.spanMap[tokenised.lastCharIndex];
                //console.debug("TTS lastCharIndex ID: " + id);
                var spanPrevious = tokenised.element.querySelector("#" + id);
                if (spanPrevious) {
                  //console.debug("TTS OFF");
                  spanPrevious.className = 'tts_off';
                  //spanPrevious.style.backgroundColor = "white";
                }
              } else {
                [].forEach.call(
                  tokenised.element.querySelectorAll(".tts_on"),
                  function(el) {
                    console.debug("TTS OFF " + el.id);
                    el.className = 'tts_off';
                  }
                );
              }

              var id = 'tts_' + tokenised.spanMap[event.charIndex];
              console.debug("TTS charIndex ID: " + id);
              var spanNew = tokenised.element.querySelector("#" + id);
              if (spanNew) {
                console.debug("TTS ON");
                spanNew.className = 'tts_on';
                //spanNew.style.backgroundColor = "transparent";
              }

              tokenised.lastCharIndex = event.charIndex;
            };
        }

        _SpeechSynthesisUtterance.onend = function(event)
          //_SpeechSynthesisUtterance.addEventListener("end", function(event)
          {
            if (!_SpeechSynthesisUtterance) {
              //_skipTTSEndEvent = false;
              return;
            }
            //
            //                if (_skipTTSEndEvent)
            //                {
            //                    _skipTTSEndEvent = false;
            //                    return;
            //                }

            console.debug("TTS ended");
            //console.debug(event);

            if (TOKENIZE_TTS) {
              var tokenised = event.target.tokenData;

              var doEnd = !event.forceSkipEnd && (_SpeechSynthesisUtterance === event.target) && (!tokenised || tokenised.element.innerHTML_original);

              if (tokenised) {
                if (tokenised.element.innerHTML_original) {
                  tokenised.element.innerHTML = tokenised.element.innerHTML_original;
                } else {
                  [].forEach.call(
                    tokenised.element.querySelectorAll(".tts_on"),
                    function(el) {
                      console.debug("TTS OFF (end)" + el.id);
                      el.className = 'tts_off';
                    }
                  );
                }

                tokenised.element.innerHTML_original = undefined;
              }


              if (doEnd) {
                self.onTTSEnd();
              } else {
                console.debug("TTS end SKIPPED");
              }
            } else {
              self.onTTSEnd();
            }
          };

        _SpeechSynthesisUtterance.onerror = function(event)
          //_SpeechSynthesisUtterance.addEventListener("error", function(event)
          {
            if (!_SpeechSynthesisUtterance) {
              return;
            }

            console.error("TTS error");
            //console.debug(event);
            console.debug(_SpeechSynthesisUtterance.text);
            console.debug(window.speechSynthesis.paused);
            console.debug(window.speechSynthesis.pending);
            console.debug(window.speechSynthesis.speaking);

            if (TOKENIZE_TTS) {
              var tokenised = event.target.tokenData;
              if (tokenised) {
                if (tokenised.element.innerHTML_original) {
                  tokenised.element.innerHTML = tokenised.element.innerHTML_original;
                } else {
                  [].forEach.call(
                    tokenised.element.ownerDocument.querySelectorAll(".tts_on"),
                    function(el) {
                      console.debug("TTS OFF (error)" + el.id);
                      el.className = 'tts_off';
                    }
                  );
                }
                tokenised.element.innerHTML_original = undefined;
              }
            }
          };

        var vol = volume || _audioPlayer.getVolume();
        _SpeechSynthesisUtterance.volume = vol;

        _SpeechSynthesisUtterance.rate = _audioPlayer.getRate();
        _SpeechSynthesisUtterance.pitch = 1;

        //_SpeechSynthesisUtterance.lang = "en-US";

        _SpeechSynthesisUtterance.text = text;

        //console.debug("TTS speak: " + text);
        window.speechSynthesis.speak(_SpeechSynthesisUtterance);

        if (window.speechSynthesis.paused) {
          console.debug("TTS resume");
          window.speechSynthesis.resume();
        }

        //}, 5);
      }
    }
  };

  var speakStop = function() {
    onStatusChanged({
      isPlaying: false
    });
    _ttsIsPlaying = false;

    if (!_enableHTMLSpeech) {
      reader.trigger(Events.MEDIA_OVERLAY_TTS_STOP, undefined);
      return;
    }

    //console.debug("TTS pause");
    window.speechSynthesis.pause();
  };

  var _timerTick = undefined;

  function onPlay() {
    onPause();

    var func = function() {

      if (!_smilIterator || !_smilIterator.currentPar) {
        return;
      }

      var smil = _smilIterator.smil; //currentPar.getSmil();
      if (!smil.mo) {
        return;
      }

      //            if (!_smilIterator.currentPar.audio.src)
      //            {
      //                return;
      //            }

      var playPosition = audioCurrentTime - _smilIterator.currentPar.audio.clipBegin;
      if (playPosition <= 0) {
        return;
      }

      var smilIndex = smil.mo.smil_models.indexOf(smil);

      var smilIterator = new SmilIterator(smil);
      var parIndex = -1;
      while (smilIterator.currentPar) {
        parIndex++;
        if (smilIterator.currentPar == _smilIterator.currentPar) {
          break;
        }
        smilIterator.next();
      }

      onStatusChanged({
        playPosition: playPosition,
        smilIndex: smilIndex,
        parIndex: parIndex
      });
    };

    setTimeout(func, 500);

    _timerTick = setInterval(func, 1500);
  }

  function onPause() {

    audioCurrentTime = 0.0;
    if (_timerTick !== undefined) {
      clearInterval(_timerTick);
    }
    _timerTick = undefined;
  }


  this.onEmbeddedEnd = function() {
    audioCurrentTime = 0.0;

    _embeddedIsPlaying = false;
    //_currentEmbedded = undefined;

    if (!_smilIterator || !_smilIterator.currentPar) {
      self.reset();
      return;
    }

    onAudioPositionChanged(_smilIterator.currentPar.audio.clipEnd + 0.1, 3);
  };

  this.onTTSEnd = function() {
    audioCurrentTime = 0.0;

    _ttsIsPlaying = false;
    //_currentTTS = undefined;

    //        if(_skipTTSEnded)
    //        {
    //            _skipTTSEnded = false;
    //            return;
    //        }

    if (!_smilIterator || !_smilIterator.currentPar) {
      self.reset();
      return;
    }

    onAudioPositionChanged(_smilIterator.currentPar.audio.clipEnd + 0.1, 4);
  };

  function onAudioEnded() {

    onPause();
    //
    //        if (_letPlay)
    //        {
    //            return;
    //        }

    if (_skipAudioEnded) {
      _skipAudioEnded = false;
      return;
    }

    if (!_smilIterator || !_smilIterator.currentPar) {
      self.reset();
      return;
    }

    onAudioPositionChanged(_smilIterator.currentPar.audio.clipEnd + 0.1, 5);
  }

  function highlightCurrentElement() {

    if (!_smilIterator) {
      return;
    }

    if (!_smilIterator.currentPar) {
      return;
    }

    if (_smilIterator.currentPar.text.srcFragmentId && _smilIterator.currentPar.text.srcFragmentId.length > 0) {
      if (_smilIterator.currentPar.element) {
        //console.error(_smilIterator.currentPar.element.id + ": " + _smilIterator.currentPar.audio.clipBegin + " / " + _smilIterator.currentPar.audio.clipEnd);

        if (!_elementHighlighter.isElementHighlighted(_smilIterator.currentPar)) {
          _elementHighlighter.highlightElement(_smilIterator.currentPar, _package.media_overlay.activeClass, _package.media_overlay.playbackActiveClass);

          if (!_wasPlayingScrolling) {
            reader.insureElementVisibility(_smilIterator.currentPar.getSmil().spineItemId, _smilIterator.currentPar.element, self);
          }
        }

        return;

      } else if (_smilIterator.currentPar.cfi) {

        if (!_elementHighlighter.isCfiHighlighted(_smilIterator.currentPar)) {
          _elementHighlighter.highlightCfi(_smilIterator.currentPar, _package.media_overlay.activeClass, _package.media_overlay.playbackActiveClass);

          if (!_wasPlayingScrolling) {
            reader.insureElementVisibility(_smilIterator.currentPar.getSmil().spineItemId, _smilIterator.currentPar.cfi.cfiTextParent, self);
          }
        }

        return;
      }
    }

    // body (not FRAG ID)
    if (_smilIterator.currentPar.element) {
      return;
    }

    //else: single SMIL per multiple XHTML? ==> open new spine item

    /*
        var textRelativeRef = ReadiumSDK.Helpers.ResolveContentRef(_smilIterator.currentPar.text.srcFile, _smilIterator.smil.href);
console.debug("textRelativeRef: " + textRelativeRef);
        if (textRelativeRef)
        {
            var textAbsoluteRef = _package.resolveRelativeUrl(textRelativeRef);
console.debug("textAbsoluteRef: " + textAbsoluteRef);
        }
        */

    var src = _smilIterator.currentPar.text.src;
    var base = _smilIterator.smil.href;

    //self.pause();
    //self.reset();
    _smilIterator = undefined;

    reader.openContentUrl(src, base, self);
  }

  this.escape = function() {

    if (!_smilIterator || !_smilIterator.currentPar) {

      this.toggleMediaOverlay();
      return;
    }

    if (!self.isPlaying()) {
      //playCurrentPar();
      self.play();
      return;
    }

    if (_settings.mediaOverlaysEscapeEscapables) {
      var parent = _smilIterator.currentPar;
      while (parent) {
        if (parent.isEscapable && parent.isEscapable(_settings.mediaOverlaysEscapables)) {
          do {
            _smilIterator.next();
          } while (_smilIterator.currentPar && _smilIterator.currentPar.hasAncestor(parent));

          if (!_smilIterator.currentPar) {
            nextSmil(true);
            return;
          }

          //_smilIterator.goToPar(_smilIterator.currentPar);
          playCurrentPar();
          return;
        }

        parent = parent.parent;
      }
    }

    this.nextMediaOverlay(true);
  };


  this.playUserPar = function(par) {
    if (self.isPlaying()) {
      self.pause();
    }

    if (par.element || par.cfi && par.cfi.cfiTextParent) {
      var seq = _elementHighlighter.adjustParToSeqSyncGranularity(par);
      if (seq && seq !== par) {
        var findFirstPar = function(smilNode) {
          if (smilNode.nodeType && smilNode.nodeType === "par") return smilNode;

          if (!smilNode.children || smilNode.children.length <= 0) return undefined;

          for (var i = 0; i < smilNode.children.length; i++) {
            var child = smilNode.children[i];
            var inPar = findFirstPar(child);
            if (inPar) return inPar;
          }
        };
        var firstPar = findFirstPar(seq);
        if (firstPar) par = firstPar;
      }
    }

    playPar(par);
  };

  this.resetTTS = function() {
    _currentTTS = undefined;
    //        _skipTTSEnded = false;
    speakStop();
  };

  this.resetBlankPage = function() {
    if (_blankPagePlayer) {
      var timer = _blankPagePlayer;
      _blankPagePlayer = undefined;
      clearTimeout(timer);
    }
    _blankPagePlayer = undefined;

    onStatusChanged({
      isPlaying: false
    });
  };

  this.resetEmbedded = function() {
    if (_currentEmbedded) {
      $(_currentEmbedded).off("ended", self.onEmbeddedEnd);
      _currentEmbedded.pause();
    }
    _currentEmbedded = undefined;
    onStatusChanged({
      isPlaying: false
    });
    _embeddedIsPlaying = false;
  };

  this.reset = function() {
    clipBeginOffset = 0.0;
    _audioPlayer.reset();
    self.resetTTS();
    self.resetEmbedded();
    self.resetBlankPage();
    _elementHighlighter.reset();
    _smilIterator = undefined;
    _skipAudioEnded = false;
  };

  this.play = function() {
    if (_smilIterator && _smilIterator.smil && !_smilIterator.smil.id) {
      initBlankPagePlayer();
      return;
    } else if (_currentEmbedded) {
      _embeddedIsPlaying = true;
      _currentEmbedded.play();
      onStatusChanged({
        isPlaying: true
      });
    } else if (_currentTTS) {
      speakStart(undefined);
    } else {
      if (!_audioPlayer.play()) {
        console.log("Audio player was dead, reactivating...");

        this.reset();
        this.toggleMediaOverlay();
        return;
      }
    }

    highlightCurrentElement();
  }

  this.pause = function() {
    _wasPlayingScrolling = false;

    if (_blankPagePlayer) {
      this.resetBlankPage();
    } else if (_embeddedIsPlaying) {
      _embeddedIsPlaying = false;
      if (_currentEmbedded) {
        _currentEmbedded.pause();
      }
      onStatusChanged({
        isPlaying: false
      });
    } else if (_ttsIsPlaying) {
      speakStop();
    } else {
      _audioPlayer.pause();
    }

    _elementHighlighter.reset();
  }

  this.isMediaOverlayAvailable = function() {

    //        console.debug("isMediaOverlayAvailable()");
    //
    //        var now1 = window.performance && window.performance.now ? window.performance.now() : Date.now();
    //
    //        if (console.time)
    //        {
    //            console.time("MO");
    //        }

    var visibleMediaElement = reader.getFirstVisibleMediaOverlayElement();

    //        if (console.timeEnd)
    //        {
    //            console.timeEnd("MO");
    //        }
    //
    //        var now2 = window.performance && window.performance.now ? window.performance.now() : Date.now();
    //
    //        console.debug(now2 - now1);

    return typeof visibleMediaElement !== "undefined";
  };

  this.nextOrPreviousMediaOverlay = function(previous) {
    if (self.isPlaying()) {
      self.pause();
    } else {
      if (_smilIterator && _smilIterator.currentPar) {
        //playCurrentPar();
        self.play();
        return;
      }
    }

    if (!_smilIterator) {
      this.toggleMediaOverlay();
      return;
    }

    var position = previous ? DIRECTION_MARK - 1 : _smilIterator.currentPar.audio.clipEnd + 0.1;

    onAudioPositionChanged(position, 6);
    // setTimeout(function(){
    //     
    // }, 1);

    //self.play();
    //playCurrentPar();
  };

  this.nextMediaOverlay = function() {
    this.nextOrPreviousMediaOverlay(false);
  };

  this.previousMediaOverlay = function() {
    this.nextOrPreviousMediaOverlay(true);
  };

  /*
  this.setMediaOverlaySkippables = function(items) {

  };

  this.setMediaOverlayEscapables = function(items) {

  };
  */

  this.mediaOverlaysOpenContentUrl = function(contentRefUrl, sourceFileHref, offset) {
    clipBeginOffset = offset;

    //self.pause();
    //self.reset();
    _smilIterator = undefined;

    reader.openContentUrl(contentRefUrl, sourceFileHref, self);

    /*
    if (_currentPagination && _currentPagination.isFixedLayout && _currentPagination.openPages && _currentPagination.openPages.length > 0)
    {
        var combinedPath = ReadiumSDK.Helpers.ResolveContentRef(contentRefUrl, sourceFileHref);

        var hashIndex = combinedPath.indexOf("#");
        var hrefPart;
        var elementId;
        if(hashIndex >= 0) {
            hrefPart = combinedPath.substr(0, hashIndex);
            elementId = combinedPath.substr(hashIndex + 1);
        }
        else {
            hrefPart = combinedPath;
            elementId = undefined;
        }

        var spineItem = reader.spine.getItemByHref(hrefPart);
        var spineItemIndex = _currentPagination.openPages[0].spineItemIndex;

        //var idref = _currentPagination.openPages[0].idref;
        //spineItem.idref === idref
        //var currentSpineItem = reader.spine.getItemById(idref);
        //currentSpineItem == spineItem
        if (spineItem.index === spineItemIndex)
        {
            self.onPageChanged({
                paginationInfo: _currentPagination,
                elementId: elementId,
                initiator: self
            });
        }
    }
    */
  };

  this.toggleMediaOverlay = function() {
    if (self.isPlaying()) {
      self.pause();
      return;
    }

    //if we have position to continue from (reset wasn't called)
    if (_smilIterator) {
      self.play();
      return;
    }

    this.toggleMediaOverlayRefresh(undefined);
  };

  var _wasPlayingScrolling = false;

  this.toggleMediaOverlayRefresh = function(paginationData) {
    //console.debug("moData SMIL: " + moData.par.getSmil().href + " // " + + moData.par.getSmil().id);

    var spineItems = reader.getLoadedSpineItems();

    //paginationData.isRightToLeft
    var rtl = reader.spine().isRightToLeft();

    //paginationData.spineItemCount
    //paginationData.openPages
    //{spineItemPageIndex: , spineItemPageCount: , idref: , spineItemIndex: }

    var playingPar = undefined;
    var wasPlaying = self.isPlaying();
    if (wasPlaying && _smilIterator) {
      var isScrollView = paginationData.initiator && paginationData.initiator instanceof ScrollView;
      if (isScrollView && _settings.mediaOverlaysPreservePlaybackWhenScroll) {
        _wasPlayingScrolling = true;
        return;
      }

      playingPar = _smilIterator.currentPar;
      self.pause();
    }

    _wasPlayingScrolling = false;

    //paginationData && paginationData.elementId
    //paginationData.initiator != self

    //_package.isFixedLayout()

    var element = (paginationData && paginationData.elementIdResolved) ? paginationData.elementIdResolved : undefined;

    var id = (paginationData && paginationData.elementId) ? paginationData.elementId : undefined;

    if (!element) {
      if (id) {
        console.error("[WARN] id did not resolve to element?");
      }

      for (var i = (rtl ? (spineItems.length - 1) : 0);
        (rtl && i >= 0) || (!rtl && i < spineItems.length); i += (rtl ? -1 : 1)) {
        var spineItem = spineItems[i];
        if (!spineItem) {
          console.error("spineItems[i] is undefined??");
          continue;
        }

        if (paginationData && paginationData.spineItem && paginationData.spineItem != spineItem) {
          continue;
        }

        if (id) {
          var $element = reader.getElementById(spineItem, id);
          //var $element = reader.getElement(spineItem, "#" + ReadiumSDK.Helpers.escapeJQuerySelector(id));
          element = ($element && $element.length > 0) ? $element[0] : undefined;
        } else if (spineItem.isFixedLayout()) {
          if (paginationData && paginationData.paginationInfo && paginationData.paginationInfo.openPages) {
            // openPages are sorted by spineItem index, so the smallest index on display is the one we need to play (page on the left in LTR, or page on the right in RTL progression)
            var index = 0; // !paginationData.paginationInfo.isRightToLeft ? 0 : paginationData.paginationInfo.openPages.length - 1;

            if (paginationData.paginationInfo.openPages[index] && paginationData.paginationInfo.openPages[index].idref && paginationData.paginationInfo.openPages[index].idref === spineItem.idref) {
              var $element = reader.getElement(spineItem, "body");
              element = ($element && $element.length > 0) ? $element[0] : undefined;
            }
          }
        }

        if (element) {
          break;
        }
      }
    }

    if (!element) {
      element = reader.getFirstVisibleMediaOverlayElement();
    }

    if (!element) {
      self.reset();
      return;
    }

    var moData = $(element).data("mediaOverlayData");

    if (!moData) {
      var foundMe = false;
      var depthFirstTraversal = function(elements) {
        if (!elements) {
          return false;
        }

        for (var i = 0; i < elements.length; i++) {
          if (element === elements[i]) foundMe = true;

          if (foundMe) {
            var d = $(elements[i]).data("mediaOverlayData");
            if (d) {
              moData = d;
              return true;
            }
          }

          var found = depthFirstTraversal(elements[i].children);
          if (found) {
            return true;
          }
        }

        return false;
      }

      var root = element;
      while (root && root.nodeName.toLowerCase() !== "body") {
        root = root.parentNode;
      }

      if (!root) {
        self.reset();
        return;
      }

      depthFirstTraversal([root]);
    }

    if (!moData) {
      self.reset();
      return;
    }

    var zPar = moData.par ? moData.par : moData.pars[0];
    var parSmil = zPar.getSmil();
    if (!_smilIterator || _smilIterator.smil != parSmil) {
      _smilIterator = new SmilIterator(parSmil);
    } else {
      _smilIterator.reset();
    }

    _smilIterator.goToPar(zPar);

    if (!_smilIterator.currentPar && id) {
      _smilIterator.reset();
      _smilIterator.findTextId(id);
    }

    if (!_smilIterator.currentPar) {
      self.reset();
      return;
    }

    if (wasPlaying && playingPar && playingPar === _smilIterator.currentPar) {
      self.play();
    } else {
      playCurrentPar();
      //playPar(zPar);
    }
  };

  this.isPlayingCfi = function() {
    return _smilIterator && _smilIterator.currentPar && _smilIterator.currentPar.cfi;
  };

  var _wasPausedBecauseNoAutoNextSmil = false;
  var _autoNextSmil = true;
  this.setAutomaticNextSmil = function(autoNext) {
    _autoNextSmil = autoNext;
  };
};

module.exports = MediaOverlayPlayer

},{"../events":"/Users/craverod/opensource/readium-js/src/sdk/events.js","../helpers/resolve-content-ref":"/Users/craverod/opensource/readium-js/src/sdk/helpers/resolve-content-ref.js","../models/smil-iterator":"/Users/craverod/opensource/readium-js/src/sdk/models/smil-iterator.js","./audio-player":"/Users/craverod/opensource/readium-js/src/sdk/views/audio-player.js","./media-overlay-element-highlighter":"/Users/craverod/opensource/readium-js/src/sdk/views/media-overlay-element-highlighter.js","./scroll-view":"/Users/craverod/opensource/readium-js/src/sdk/views/scroll-view.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/one-page-view.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var $ = require('jquery');
var _ = require('underscore')
var Backbone = require('backbone')
var CfiNavigationLogic = require('./cfi-navigation-logic')
var CSSTransition = require('../helpers/css-transition')
var CSSTransformString = require('../helpers/css-transform-string')
var isIFrameAlive = require('../helpers/is-iframe-alive')
var loadTemplate = require('../helpers/load-template')
var setStyles = require('../helpers/set-styles')
var UpdateHtmlFontSize = require('../helpers/update-html-font-size')
var ViewerSettings = require('../models/viewer-settings')

/**
 * Renders one page of fixed layout spread
 *
 * @param options
 * @param classes
 * @param enableBookStyleOverrides
 * @constructor
 */
function OnePageView(options, classes, enableBookStyleOverrides, reader) {

  _.extend(this, Backbone.Events);

  var self = this;

  var _$epubHtml;
  var _$el;
  var _$iframe;
  var _currentSpineItem;
  var _spine = options.spine;
  var _iframeLoader = options.iframeLoader;
  var _bookStyles = options.bookStyles;

  var _$viewport = options.$viewport;

  var _isIframeLoaded = false;

  var _$scaler;

  var PageTransitionHandler = function(opts) {
    var PageTransition = function(begin, end) {
      this.begin = begin;
      this.end = end;
    };

    var _pageTransition_OPACITY = new PageTransition(
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "0");
      },
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("transform", "none");

        CSSTransition($el, "opacity 150ms ease-out");

        $el.css("opacity", "1");
      }
    );

    var _pageTransition_TRANSLATE = new PageTransition(
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "0");

        var elWidth = Math.ceil(meta_width * scale);

        var initialLeft = elWidth * 0.8 * (pageSwitchDir === 2 ? 1 : -1);
        var move = CSSTransformString({
          left: Math.round(initialLeft),
          origin: "50% 50% 0",
          enable3D: _enable3D
        });
        $el.css(move);
      },
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "1");

        CSSTransition($el, "transform 150ms ease-out");

        $el.css("transform", "none");
      }
    );

    var _pageTransition_ROTATE = new PageTransition(
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "0");

        var elWidth = Math.ceil(meta_width * scale);

        var initialLeft = elWidth * 1.7 * (pageSwitchDir === 2 ? 1 : -1);
        var trans = CSSTransformString({
          left: Math.round(initialLeft),
          angle: (pageSwitchDir === 2 ? -1 : 1) * 30,
          origin: "50% 50% 0",
          enable3D: _enable3D
        }); //(pageSwitchDir === 2 ? '0% 0%' : '100% 0%')
        $el.css(trans);
      },
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "1");

        CSSTransition($el, "transform 300ms ease-in-out");

        $el.css("transform", "none");
      }
    );

    var _pageTransition_SWING = new PageTransition(
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "0");

        // SUPER HACKY!! (just for demo)
        var isLeft = false;
        var isCenter = false;
        var isRight = false;
        for (var i = 0; i < classes.length; i++) {
          var c = classes[i].toLowerCase();
          if (c.indexOf("left") >= 0) {
            isLeft = true;
            break;
          }
          if (c.indexOf("right") >= 0) {
            isRight = true;
            break;
          }
          if (c.indexOf("center") >= 0) {
            isCenter = true;
            break;
          }
        }

        var elWidth = Math.ceil(meta_width * scale);

        var initialLeft = elWidth * 0.5 * ((isLeft || isCenter && pageSwitchDir === 1) ? 1 : -1);
        var trans = CSSTransformString({
          scale: 0.2,
          left: Math.round(initialLeft),
          angle: ((isLeft || isCenter && pageSwitchDir === 1) ? 1 : -1) * 30,
          origin: '50% 50% 0',
          enable3D: _enable3D
        });
        $el.css(trans);
      },
      function(scale, left, top, $el, meta_width, meta_height, pageSwitchDir) {
        $el.css("opacity", "1");

        CSSTransition($el, "transform 400ms ease-out");

        $el.css("transform", "none");
      }
    );

    var _pageTransitions = [];
    _pageTransitions.push(_pageTransition_OPACITY); // 0
    _pageTransitions.push(_pageTransition_TRANSLATE); // 1
    _pageTransitions.push(_pageTransition_ROTATE); // 2
    _pageTransitions.push(_pageTransition_SWING); // 3

    var _disablePageTransitions = opts.disablePageTransitions || false;

    var _pageTransition = -1;

    var _enable3D = new ViewerSettings({}).enableGPUHardwareAccelerationCSS3D;

    var _viewerSettings = undefined;
    this.updateOptions = function(o) {
      _viewerSettings = o;

      var settings = _viewerSettings;
      if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
        //defaults
        settings = new ViewerSettings({});
      }
      if (settings.enableGPUHardwareAccelerationCSS3D) {
        _enable3D = true;
      }

      if (o.pageTransition !== null && typeof o.pageTransition !== "undefined") {
        _pageTransition = o.pageTransition;
      }
    };
    this.updateOptions(opts);

    var _pageSwitchDir = 0;
    var _pageSwitchActuallyChanged = false;
    var _pageSwitchActuallyChanged_IFRAME_LOAD = false;

    // dir: 0 => new or same page, 1 => previous, 2 => next
    this.updatePageSwitchDir = function(dir, hasChanged) {
      if (_pageSwitchActuallyChanged_IFRAME_LOAD) {
        return;
      }

      _pageSwitchDir = dir;
      _pageSwitchActuallyChanged = hasChanged;
    };

    this.onIFrameLoad = function() {
      _pageSwitchActuallyChanged_IFRAME_LOAD = true; // second pass, but initial display for transition
    };

    this.transformContentImmediate_BEGIN = function($el, scale, left, top) {
      var pageSwitchActuallyChanged = _pageSwitchActuallyChanged || _pageSwitchActuallyChanged_IFRAME_LOAD;
      _pageSwitchActuallyChanged_IFRAME_LOAD = false;

      if (_disablePageTransitions || _pageTransition === -1) return;

      CSSTransition($el, "all 0 ease 0");

      if (!pageSwitchActuallyChanged) return;

      var pageTransition = (_pageTransition >= 0 && _pageTransition < _pageTransitions.length) ? _pageTransitions[_pageTransition] : undefined;

      if (_pageSwitchDir === 0 || !pageTransition) {
        $el.css("opacity", "0");
      } else {
        pageTransition.begin(scale, left, top, $el, self.meta_width(), self.meta_height(), _pageSwitchDir);
      }
    };

    this.transformContentImmediate_END = function($el, scale, left, top) {
      if (_disablePageTransitions || _pageTransition === -1) {
        $el.css("transform", "none");
        return;
      }

      setTimeout(function() {
        var pageTransition = (_pageTransition >= 0 && _pageTransition < _pageTransitions.length) ? _pageTransitions[_pageTransition] : undefined;

        if (_pageSwitchDir === 0 || !pageTransition) {
          $el.css("transform", "none");

          CSSTransition($el, "opacity 250ms linear");

          $el.css("opacity", "1");
        } else {
          pageTransition.end(scale, left, top, $el, self.meta_width(), self.meta_height(), _pageSwitchDir);
        }

      }, 10);
    };
  };
  var _pageTransitionHandler = new PageTransitionHandler(options);


  // fixed layout does not apply user styles to publisher content, but reflowable scroll view does
  var _enableBookStyleOverrides = enableBookStyleOverrides || false;

  var _meta_size = {
    width: 0,
    height: 0
  };

  this.element = function() {
    return _$el;
  };

  this.meta_height = function() {
    return _meta_size.height;
  };

  this.meta_width = function() {
    return _meta_size.width;
  };

  this.isDisplaying = function() {

    return _isIframeLoaded;
  };

  this.render = function() {

    var template = loadTemplate("single_page_frame", {});

    _$el = $(template);

    _$scaler = $("#scaler", _$el);

    CSSTransition(_$el, "all 0 ease 0");

    _$el.css("transform", "none");

    var settings = reader.viewerSettings();
    if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
      //defaults
      settings = new ViewerSettings({});
    }
    if (settings.enableGPUHardwareAccelerationCSS3D) {

      // This fixes rendering issues with WebView (native apps), which crops content embedded in iframes unless GPU hardware acceleration is enabled for CSS rendering.
      _$el.css("transform", "translateZ(0)");
    }

    _$el.css("height", "100%");
    _$el.css("width", "100%");

    for (var i = 0, count = classes.length; i < count; i++) {
      _$el.addClass(classes[i]);
    }

    _$iframe = $("iframe", _$el);

    return this;
  };


  this.decorateIframe = function() {
    if (!_$iframe || !_$iframe.length) return;

    _$iframe.css("border-bottom", "1px dashed silver");
    _$iframe.css("border-top", "1px dashed silver");
  }

  this.remove = function() {
    _isIframeLoaded = false;
    _currentSpineItem = undefined;
    _$el.remove();
  };

  this.clear = function() {
    _isIframeLoaded = false;
    _$iframe[0].src = "";
  };

  this.currentSpineItem = function() {

    return _currentSpineItem;
  };

  function onIFrameLoad(success) {

    if (success) {
      _isIframeLoaded = true;
      var epubContentDocument = _$iframe[0].contentDocument;
      _$epubHtml = $("html", epubContentDocument);
      if (!_$epubHtml || _$epubHtml.length == 0) {
        _$epubHtml = $("svg", epubContentDocument);
      }

      //_$epubHtml.css("overflow", "hidden");

      if (_enableBookStyleOverrides) {
        self.applyBookStyles();
      }

      updateMetaSize();

      _pageTransitionHandler.onIFrameLoad();
    }
  }

  var _viewSettings = undefined;
  this.setViewSettings = function(settings) {

    _viewSettings = settings;

    if (_enableBookStyleOverrides) {
      self.applyBookStyles();
    }

    updateMetaSize();

    _pageTransitionHandler.updateOptions(settings);
  };

  function updateHtmlFontSize() {

    if (!_enableBookStyleOverrides) return;

    if (_$epubHtml && _viewSettings) {
      UpdateHtmlFontSize(_$epubHtml, _viewSettings.fontSize);
    }
  }

  this.applyBookStyles = function() {

    if (!_enableBookStyleOverrides) return;

    if (_$epubHtml) {
      setStyles(_bookStyles.getStyles(), _$epubHtml);
      updateHtmlFontSize();
    }
  };

  //this is called by scroll_view for fixed spine item
  this.scaleToWidth = function(width) {

    if (_meta_size.width <= 0) return; // resize event too early!

    var scale = width / _meta_size.width;
    self.transformContentImmediate(scale, 0, 0);
  };

  //this is called by scroll_view for reflowable spine item
  this.resizeIFrameToContent = function() {
    var contHeight = getContentDocHeight();
    //console.log("resizeIFrameToContent: " + contHeight);

    self.setHeight(contHeight);

    self.showIFrame();
  };

  this.setHeight = function(height) {

    _$scaler.css("height", height + "px");
    _$el.css("height", height + "px");

    //        _$iframe.css("height", height + "px");
  };

  var _useCSSTransformToHideIframe = true;

  this.showIFrame = function() {

    _$iframe.css("visibility", "visible");

    if (_useCSSTransformToHideIframe) {
      _$iframe.css("transform", "none");

      var enable3D = false;
      var settings = _viewSettings;
      if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
        //defaults
        settings = new ViewerSettings({});
      }
      if (settings.enableGPUHardwareAccelerationCSS3D) {
        enable3D = true;
        _$iframe.css("transform", "translateZ(0)");
      }
    } else {
      _$iframe.css({
        left: "0px",
        top: "0px"
      });
    }
  };

  this.hideIFrame = function() {

    _$iframe.css("visibility", "hidden");

    // With some books, despite the iframe and its containing div wrapper being hidden,
    // the iframe's contentWindow / contentDocument is still visible!
    // Thus why we translate the iframe out of view instead.

    if (_useCSSTransformToHideIframe) {
      var enable3D = false;
      var settings = _viewSettings;
      if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
        //defaults
        settings = new ViewerSettings({});
      }
      if (settings.enableGPUHardwareAccelerationCSS3D) {
        enable3D = true;
      }

      var css = CSSTransformString({
        left: "10000",
        top: "10000",
        enable3D: enable3D
      });
      _$iframe.css(css);
    } else {
      _$iframe.css({
        left: "10000px",
        top: "10000px"
      });
    }
  };

  function getContentDocHeight() {

    if (!_$iframe || !_$iframe.length) {
      return 0;
    }

    if (isIframeAlive(_$iframe[0])) {
      var win = _$iframe[0].contentWindow;
      var doc = _$iframe[0].contentDocument;

      var height = Math.round(parseFloat(win.getComputedStyle(doc.documentElement).height)); //body can be shorter!
      return height;
    } else if (_$epubHtml) {
      console.error("getContentDocHeight ??");

      var jqueryHeight = _$epubHtml.height();
      return jqueryHeight;
    }

    return 0;
  }

  // dir: 0 => new or same page, 1 => previous, 2 => next
  this.updatePageSwitchDir = function(dir, hasChanged) {
    _pageTransitionHandler.updatePageSwitchDir(dir, hasChanged);
  };


  this.transformContentImmediate = function(scale, left, top) {

    var elWidth = Math.ceil(_meta_size.width * scale);
    var elHeight = Math.floor(_meta_size.height * scale);

    _pageTransitionHandler.transformContentImmediate_BEGIN(_$el, scale, left, top);

    _$el.css("left", left + "px");
    _$el.css("top", top + "px");
    _$el.css("width", elWidth + "px");
    _$el.css("height", elHeight + "px");

    if (!_$epubHtml) {
      //            debugger;
      return;
    }

    var enable3D = false;
    var settings = _viewSettings;
    if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
      //defaults
      settings = new ViewerSettings({});
    }
    if (settings.enableGPUHardwareAccelerationCSS3D) {
      enable3D = true;
    }

    if (reader.needsFixedLayoutScalerWorkAround()) {
      var css1 = CSSTransformString({
        scale: scale,
        enable3D: enable3D
      });
      _$epubHtml.css(css1);

      var css2 = CSSTransformString({
        scale: 1,
        enable3D: enable3D
      });
      css2["width"] = _meta_size.width;
      css2["height"] = _meta_size.height;
      _$scaler.css(css2);
    } else {
      var css = CSSTransformString({
        scale: scale,
        enable3D: enable3D
      });
      css["width"] = _meta_size.width;
      css["height"] = _meta_size.height;
      _$scaler.css(css);
    }

    // Chrome workaround: otherwise text is sometimes invisible (probably a rendering glitch due to the 3D transform graphics backend?)
    //_$epubHtml.css("visibility", "hidden"); // "flashing" in two-page spread mode is annoying :(
    _$epubHtml.css("opacity", "0.999");

    self.showIFrame();

    setTimeout(function() {
      //_$epubHtml.css("visibility", "visible");
      _$epubHtml.css("opacity", "1");
    }, 0);

    _pageTransitionHandler.transformContentImmediate_END(_$el, scale, left, top);
  };

  this.getCalculatedPageHeight = function() {
    return _$el.height();
  };

  this.transformContent = _.bind(_.debounce(this.transformContentImmediate, 50), self);

  function updateMetaSize() {

    _meta_size.width = 0;
    _meta_size.height = 0;

    var size = undefined;

    var contentDocument = _$iframe[0].contentDocument;

    // first try to read viewport size
    var content = $('meta[name=viewport]', contentDocument).attr("content");

    // if not found try viewbox (used for SVG)
    if (!content) {
      content = $('meta[name=viewbox]', contentDocument).attr("content");
    }

    if (content) {
      size = parseMetaSize(content);
    }

    if (!size) {
      // TODO: the picked SVG element may be the root...may be deep inside the markup!
      var $svg = $(contentDocument).find('svg');
      //var $svg = $(contentDocument.documentElement);
      // contentDocument.documentElement.nodeName == "svg"
      if ($svg.length > 0) {

        var width = undefined;
        var height = undefined;

        var wAttr = $svg[0].getAttribute("width");
        if (wAttr) {
          try {
            width = parseInt(wAttr, 10);
          } catch (err) {}
        }
        var hAttr = $svg[0].getAttribute("height");
        if (hAttr) {
          try {
            height = parseInt(hAttr, 10);
          } catch (err) {}
        }

        if (width && height) {
          size = {
            width: width,
            height: height
          }
        } else {
          /// DISABLED (not a satisfactory fallback)
          // content = $svg.attr('viewBox');
          // if(content) {
          //     size = parseViewBoxSize(content);
          // }
          //
          // if (size) {
          //     console.warn("Viewport SVG: using viewbox!");
          // }
        }
      }
    }

    if (!size && _currentSpineItem) {
      content = _currentSpineItem.getRenditionViewport();

      if (content) {
        size = parseMetaSize(content);
        if (size) {
          console.log("Viewport: using rendition:viewport dimensions");
        }
      }
    }

    if (!size) {
      // Image fallback (auto-generated HTML template when WebView / iFrame is fed with image media type)
      var $img = $(contentDocument).find('img');
      if ($img.length > 0) {
        size = {
            width: $img.width(),
            height: $img.height()
          }
          // if (contentDocument && contentDocument.documentElement && contentDocument.documentElement.nodeName && contentDocument.documentElement.nodeName.toLowerCase() == "svg") {
          //     contentDocument.documentElement.setAttribute("width", size.width);
          //     contentDocument.documentElement.setAttribute("height", size.height);
          // }

        var isImage = _currentSpineItem && _currentSpineItem.media_type && _currentSpineItem.media_type.length && _currentSpineItem.media_type.indexOf("image/") == 0;
        if (!isImage) {
          console.warn("Viewport: using img dimensions!");
        }
      } else {
        $img = $(contentDocument).find('image');
        if ($img.length > 0) {
          var width = undefined;
          var height = undefined;

          var wAttr = $img[0].getAttribute("width");
          if (wAttr) {
            try {
              width = parseInt(wAttr, 10);
            } catch (err) {}
          }
          var hAttr = $img[0].getAttribute("height");
          if (hAttr) {
            try {
              height = parseInt(hAttr, 10);
            } catch (err) {}
          }

          if (width && height) {
            size = {
              width: width,
              height: height
            }

            // if (contentDocument && contentDocument.documentElement && contentDocument.documentElement.nodeName && contentDocument.documentElement.nodeName.toLowerCase() == "svg") {
            //     contentDocument.documentElement.setAttribute("width", size.width);
            //     contentDocument.documentElement.setAttribute("height", size.height);
            // }

            console.warn("Viewport: using image dimensions!");
          }
        }
      }
    }

    if (!size) {
      // Not a great fallback, as it has the aspect ratio of the full window, but it is better than no display at all.
      width = _$viewport.width();
      height = _$viewport.height();
      size = {
        width: width,
        height: height
      }

      console.warn("Viewport: using browser / e-reader viewport dimensions!");
    }

    if (size) {
      _meta_size.width = size.width;
      _meta_size.height = size.height;
    }
  }

  //expected callback signature: function(success, $iframe, spineItem, isNewlyLoaded, context)
  this.loadSpineItem = function(spineItem, callback, context) {

    if (_currentSpineItem != spineItem) {

      _currentSpineItem = spineItem;
      var src = _spine.package.resolveRelativeUrl(spineItem.href);

      //if (spineItem && spineItem.isFixedLayout())
      if (true) // both fixed layout and reflowable documents need hiding due to flashing during layout/rendering
      {
        //hide iframe until content is scaled
        self.hideIFrame();
      }

      self.trigger(OnePageView.SPINE_ITEM_OPEN_START, _$iframe, _currentSpineItem);
      _iframeLoader.loadIframe(_$iframe[0], src, function(success) {

        if (success && callback) {
          var func = function() {
            callback(success, _$iframe, _currentSpineItem, true, context);
          };

          if (isIFrameAlive(_$iframe[0])) {
            onIFrameLoad(success); // applies styles

            func();
          } else {
            console.error("onIFrameLoad !! doc && win + TIMEOUT");
            console.debug(spineItem.href);

            onIFrameLoad(success);

            setTimeout(func, 500);
          }
        } else {
          onIFrameLoad(success);
        }

      }, self, {
        spineItem: _currentSpineItem
      });
    } else {
      if (callback) {
        callback(true, _$iframe, _currentSpineItem, false, context);
      }
    }
  };
  //
  // function parseViewBoxSize(viewBoxString) {
  //
  //     var parts = viewBoxString.split(' ');
  //
  //     if(parts.length < 4) {
  //         console.warn(viewBoxString + " value is not valid viewBox size")
  //         return undefined;
  //     }
  //
  //     var width = parseInt(parts[2]);
  //     var height = parseInt(parts[3]);
  //
  //     if(!isNaN(width) && !isNaN(height)) {
  //         return { width: width, height: height} ;
  //     }
  //
  //     return undefined;
  // }

  function parseMetaSize(content) {

    var pairs = content.replace(/\s/g, '').split(",");

    var dict = {};

    for (var i = 0; i < pairs.length; i++) {
      var nameVal = pairs[i].split("=");
      if (nameVal.length == 2) {

        dict[nameVal[0]] = nameVal[1];
      }
    }

    var width = Number.NaN;
    var height = Number.NaN;

    if (dict["width"]) {
      width = parseInt(dict["width"]);
    }

    if (dict["height"]) {
      height = parseInt(dict["height"]);
    }

    if (!isNaN(width) && !isNaN(height)) {
      return {
        width: width,
        height: height
      };
    }

    return undefined;
  }

  this.getFirstVisibleElementCfi = function() {

    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getFirstVisibleElementCfi(0);

  };

  this.getNavigator = function() {

    return new CfiNavigationLogic(_$el, _$iframe);
  };

  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getElementByCfi(cfi, classBlacklist, elementBlacklist, idBlacklist);
  };

  this.getElementById = function(spineItem, id) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getElementById(id);
  };

  this.getElement = function(spineItem, selector) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getElement(selector);
  };

  this.getFirstVisibleMediaOverlayElement = function() {
    var navigation = new CfiNavigationLogic(_$el, _$iframe);
    return navigation.getFirstVisibleMediaOverlayElement({
      top: 0,
      bottom: _$iframe.height()
    });
  };

  this.offset = function() {
    if (_$iframe) {
      return _$iframe.offset();
    }
    return undefined;
  }
}

OnePageView.SPINE_ITEM_OPEN_START = "SpineItemOpenStart";

module.exports = OnePageView

},{"../helpers/css-transform-string":"/Users/craverod/opensource/readium-js/src/sdk/helpers/css-transform-string.js","../helpers/css-transition":"/Users/craverod/opensource/readium-js/src/sdk/helpers/css-transition.js","../helpers/is-iframe-alive":"/Users/craverod/opensource/readium-js/src/sdk/helpers/is-iframe-alive.js","../helpers/load-template":"/Users/craverod/opensource/readium-js/src/sdk/helpers/load-template.js","../helpers/set-styles":"/Users/craverod/opensource/readium-js/src/sdk/helpers/set-styles.js","../helpers/update-html-font-size":"/Users/craverod/opensource/readium-js/src/sdk/helpers/update-html-font-size.js","../models/viewer-settings":"/Users/craverod/opensource/readium-js/src/sdk/models/viewer-settings.js","./cfi-navigation-logic":"/Users/craverod/opensource/readium-js/src/sdk/views/cfi-navigation-logic.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/reader-view.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * Options passed on the reader from the readium loader/initializer
 *
 * @typedef {object} ReadiumSDK.Views.ReaderView.ReaderOptions
 * @property {jQueryElement|string} el   The element the reader view should create itself in. Can be a jquery wrapped element or a query selector.
 * @property {ReadiumSDK.Views.IFrameLoader} iframeLoader   An instance of an iframe loader or one expanding it.
 * @property {boolean} needsFixedLayoutScalerWorkAround
 */

var _ = require('underscore')
var $ = require('jquery')
var AnnotationsManager = require('./annotations-manager')
var Backbone = require('backbone')
var Events = require('../events')
var extendedThrottle = require('../helpers/extended-throttle')
var FixedView = require('./fixed-view')
var IFrameLoader = require('./iframe-loader')
var InternalEvents = require('../internal-events')
var InternalLinksSupport = require('./internal-links-support')
var isIframeAlive = require('../helpers/is-iframe-alive')
var MediaOverlayDataInjector = require('./media-overlay-data-injector')
var MediaOverlayPlayer = require('./media-overlay-player')
var Package = require('../models/package')
var PageOpenRequest = require('../models/page-open-request')
var ReflowableView = require('./reflowable-view')
var ResolveContentRef = require('../helpers/resolve-content-ref')
var ScrollView = require('./scroll-view')
var setStyles = require('../helpers/set-styles')
var StyleCollection = require('../collections/style')
var Switches = require('../models/switches')
var Trigger = require('../models/trigger')
var ViewerSettings = require('../models/viewer-settings')

/**
 * View Type
 * @typedef {object} ReadiumSDK.Views.ReaderView.ViewType
 * @property {number} VIEW_TYPE_COLUMNIZED          Reflowable document view
 * @property {number} VIEW_TYPE_FIXED               Fixed layout document view
 * @property {number} VIEW_TYPE_SCROLLED_DOC        Scrollable document view
 * @property {number} VIEW_TYPE_SCROLLED_CONTINUOUS Continuous scrollable document view
 */
var VIEW_TYPE_COLUMNIZED = 1;
var VIEW_TYPE_FIXED = 2;
var VIEW_TYPE_SCROLLED_DOC = 3;
var VIEW_TYPE_SCROLLED_CONTINUOUS = 4;


/**
 * Top level View object. Interface for view manipulation public APIs
 * @param {ReadiumSDK.Views.ReaderView.ReaderOptions} options
 * @constructor
 */
function ReaderView(options) {

  _.extend(this, Backbone.Events);

  var self = this;
  var _currentView = undefined;
  var _package = undefined;
  var _spine = undefined;
  var _viewerSettings = new ViewerSettings({});
  //styles applied to the container divs
  var _userStyles = new StyleCollection();
  //styles applied to the content documents
  var _bookStyles = new StyleCollection();
  var _internalLinksSupport = new InternalLinksSupport(this);
  var _mediaOverlayPlayer;
  var _mediaOverlayDataInjector;
  var _iframeLoader;
  var _$el;
  var _annotationsManager = new AnnotationsManager(self, options);

  //We will call onViewportResize after user stopped resizing window
  var lazyResize = extendedThrottle(
    handleViewportResizeStart,
    handleViewportResizeTick,
    handleViewportResizeEnd, 250, 1000, self);

  $(window).on("resize.ReadiumSDK.readerView", lazyResize);

  if (options.el instanceof $) {
    _$el = options.el;
    console.log("** EL is a jQuery selector:" + options.el.attr('id'));
  } else {
    _$el = $(options.el);
    console.log("** EL is a string:" + _$el.attr('id'));
  }

  if (options.iframeLoader) {
    _iframeLoader = options.iframeLoader;
  } else {
    _iframeLoader = new IFrameLoader({
      mathJaxUrl: options.mathJaxUrl
    });
  }


  _needsFixedLayoutScalerWorkAround = options.needsFixedLayoutScalerWorkAround;
  /**
   * @returns {boolean}
   */
  this.needsFixedLayoutScalerWorkAround = function() {
    return _needsFixedLayoutScalerWorkAround;
  }

  /**
   * Create a view based on the given view type.
   * @param {ReadiumSDK.Views.ReaderView.ViewType} viewType
   * @param {ReadiumSDK.Views.ReaderView.ViewCreationOptions} options
   * @returns {*}
   */
  this.createViewForType = function(viewType, options) {
    var createdView;

    // NOTE: _$el == options.$viewport
    _$el.css("overflow", "hidden");

    switch (viewType) {
      case VIEW_TYPE_FIXED:

        _$el.css("overflow", "auto"); // for content pan, see self.setZoom()

        createdView = new FixedView(options, self);
        break;
      case VIEW_TYPE_SCROLLED_DOC:
        createdView = new ScrollView(options, false, self);
        break;
      case VIEW_TYPE_SCROLLED_CONTINUOUS:
        createdView = new ScrollView(options, true, self);
        break;
      default:
        createdView = new ReflowableView(options, self);
        break;
    }

    return createdView;
  };

  /**
   * Returns the current view type of the reader view
   * @returns {ReaderView.ViewType}
   */
  this.getCurrentViewType = function() {

    if (!_currentView) {
      return undefined;
    }

    if (_currentView instanceof ReflowableView) {
      return VIEW_TYPE_COLUMNIZED;
    }

    if (_currentView instanceof FixedView) {
      return VIEW_TYPE_FIXED;
    }

    if (_currentView instanceof ScrollView) {
      if (_currentView.isContinuousScroll()) {
        return VIEW_TYPE_SCROLLED_CONTINUOUS;
      }

      return VIEW_TYPE_SCROLLED_DOC;
    }

    console.error("Unrecognized view type");
    return undefined;
  };

  //based on https://docs.google.com/spreadsheet/ccc?key=0AoPMUkQhc4wcdDI0anFvWm96N0xRT184ZE96MXFRdFE&usp=drive_web#gid=0 document
  function deduceDesiredViewType(spineItem) {

    //check settings
    if (_viewerSettings.scroll == "scroll-doc") {
      return VIEW_TYPE_SCROLLED_DOC;
    }

    if (_viewerSettings.scroll == "scroll-continuous") {
      return VIEW_TYPE_SCROLLED_CONTINUOUS;
    }

    //is fixed layout ignore flow
    if (spineItem.isFixedLayout()) {
      return VIEW_TYPE_FIXED;
    }

    //flow
    if (spineItem.isFlowScrolledDoc()) {
      return VIEW_TYPE_SCROLLED_DOC;
    }

    if (spineItem.isFlowScrolledContinuous()) {
      return VIEW_TYPE_SCROLLED_CONTINUOUS;
    }

    return VIEW_TYPE_COLUMNIZED;
  }

  // returns true is view changed
  function initViewForItem(spineItem, callback) {

    var desiredViewType = deduceDesiredViewType(spineItem);

    if (_currentView) {

      if (self.getCurrentViewType() == desiredViewType) {
        callback(false);
        return;
      }

      resetCurrentView();
    }

    /**
     * View creation options
     * @typedef {object} ReadiumSDK.Views.ReaderView.ViewCreationOptions
     * @property {jQueryElement} $viewport  The view port element the reader view has created.
     * @property {Models.Spine} spine The spine item collection object
     * @property {ReadiumSDK.Collections.StyleCollection} userStyles User styles
     * @property {ReadiumSDK.Collections.StyleCollection} bookStyles Book styles
     * @property {ReadiumSDK.Views.IFrameLoader} iframeLoader   An instance of an iframe loader or one expanding it.
     */
    var viewCreationParams = {
      $viewport: _$el,
      spine: _spine,
      userStyles: _userStyles,
      bookStyles: _bookStyles,
      iframeLoader: _iframeLoader
    };


    _currentView = self.createViewForType(desiredViewType, viewCreationParams);
    self.trigger(Events.READER_VIEW_CREATED, desiredViewType);

    _currentView.on(Events.CONTENT_DOCUMENT_LOADED, function($iframe, spineItem) {

      if (!isIframeAlive($iframe[0])) return;

      // performance degrades with large DOM (e.g. word-level text-audio sync)
      _mediaOverlayDataInjector.attachMediaOverlayData($iframe, spineItem, _viewerSettings);

      _internalLinksSupport.processLinkElements($iframe, spineItem);
      _annotationsManager.attachAnnotations($iframe, spineItem);

      var contentDoc = $iframe[0].contentDocument;
      Trigger.register(contentDoc);
      Switches.apply(contentDoc);

      self.trigger(Events.CONTENT_DOCUMENT_LOADED, $iframe, spineItem);
    });

    _currentView.on(Events.CONTENT_DOCUMENT_LOAD_START, function($iframe, spineItem) {
      self.trigger(Events.CONTENT_DOCUMENT_LOAD_START, $iframe, spineItem);
    });

    _currentView.on(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED, function(pageChangeData) {

      //we call on onPageChanged explicitly instead of subscribing to the ReadiumSDK.Events.PAGINATION_CHANGED by
      //mediaOverlayPlayer because we hve to guarantee that mediaOverlayPlayer will be updated before the host
      //application will be notified by the same ReadiumSDK.Events.PAGINATION_CHANGED event
      _mediaOverlayPlayer.onPageChanged(pageChangeData);

      self.trigger(Events.PAGINATION_CHANGED, pageChangeData);
    });

    _currentView.on(Events.FXL_VIEW_RESIZED, function() {
      self.trigger(Events.FXL_VIEW_RESIZED);
    })

    _currentView.render();
    _currentView.setViewSettings(_viewerSettings);

    // we do this to wait until elements are rendered otherwise book is not able to determine view size.
    setTimeout(function() {

      callback(true);

    }, 50);

  }

  /**
   * Returns a list of the currently active spine items
   *
   * @returns {Models.SpineItem[]}
   */
  this.getLoadedSpineItems = function() {

    if (_currentView) {
      return _currentView.getLoadedSpineItems();
    }

    return [];
  };

  function resetCurrentView() {

    if (!_currentView) {
      return;
    }

    self.trigger(Events.READER_VIEW_DESTROYED);

    _currentView.off(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED);
    _currentView.remove();
    _currentView = undefined;
  }

  /**
   * Returns the currently instanced viewer settings
   *
   * @returns {Models.ViewerSettings}
   */
  this.viewerSettings = function() {
    return _viewerSettings;
  };

  /**
   * Returns a data object based on the package document
   *
   * @returns {Models.Package}
   */
  this.package = function() {
    return _package;
  };

  /**
   * Returns a representation of the spine as a data object, also acts as list of spine items
   *
   * @returns {Models.Spine}
   */
  this.spine = function() {
    return _spine;
  };

  /**
   * Returns the user CSS styles collection
   *
   * @returns {ReadiumSDK.Collections.StyleCollection}
   */
  this.userStyles = function() {
    return _userStyles;
  };

  /**
   * Open Book Data
   *
   * @typedef {object} ReadiumSDK.Views.ReaderView.OpenBookData
   * @property {Models.Package} package - packageData (required)
   * @property {Models.PageOpenRequest} openPageRequest - openPageRequestData, (optional) data related to open page request
   * @property {ReadiumSDK.Views.ReaderView.SettingsData} [settings]
   * @property {ReadiumSDK.Collections.StyleCollection} styles: [cssStyles]
   * @todo Define missing types
   */

  /**
   * Triggers the process of opening the book and requesting resources specified in the packageData
   *
   * @param {ReadiumSDK.Views.ReaderView.OpenBookData} openBookData - object with open book data
   */
  this.openBook = function(openBookData) {

    var packageData = openBookData.package ? openBookData.package : openBookData;

    _package = new Package(packageData);

    _spine = _package.spine;
    _spine.handleLinear(true);

    if (_mediaOverlayPlayer) {
      _mediaOverlayPlayer.reset();
    }

    _mediaOverlayPlayer = new MediaOverlayPlayer(self, $.proxy(onMediaPlayerStatusChanged, self));
    _mediaOverlayPlayer.setAutomaticNextSmil(_viewerSettings.mediaOverlaysAutomaticPageTurn ? true : false); // just to ensure the internal var is set to the default settings (user settings are applied below at self.updateSettings(openBookData.settings);)

    _mediaOverlayDataInjector = new MediaOverlayDataInjector(_package.media_overlay, _mediaOverlayPlayer);


    resetCurrentView();

    if (openBookData.settings) {
      self.updateSettings(openBookData.settings);
    }

    if (openBookData.styles) {
      self.setStyles(openBookData.styles);
    }

    var pageRequestData = undefined;

    if (openBookData.openPageRequest) {

      if (openBookData.openPageRequest.idref || (openBookData.openPageRequest.contentRefUrl && openBookData.openPageRequest.sourceFileHref)) {
        pageRequestData = openBookData.openPageRequest;
      } else {
        console.log("Invalid page request data: idref required!");
      }
    }

    var fallback = false;
    if (pageRequestData) {

      pageRequestData = openBookData.openPageRequest;

      try {
        if (pageRequestData.idref) {

          if (pageRequestData.spineItemPageIndex) {
            fallback = !self.openSpineItemPage(pageRequestData.idref, pageRequestData.spineItemPageIndex, self);
          } else if (pageRequestData.elementCfi) {
            fallback = !self.openSpineItemElementCfi(pageRequestData.idref, pageRequestData.elementCfi, self);
          } else {
            fallback = !self.openSpineItemPage(pageRequestData.idref, 0, self);
          }
        } else {
          fallback = !self.openContentUrl(pageRequestData.contentRefUrl, pageRequestData.sourceFileHref, self);
        }
      } catch (err) {
        console.error("openPageRequest fail: fallback to first page!")
        console.log(err);
        fallback = true;
      }
    } else {
      fallback = true;
    }

    if (fallback) { // if we where not asked to open specific page we will open the first one

      var spineItem = _spine.first();
      if (spineItem) {
        var pageOpenRequest = new PageOpenRequest(spineItem, self);
        pageOpenRequest.setFirstPage();
        openPage(pageOpenRequest, 0);
      }

    }

  };

  function onMediaPlayerStatusChanged(status) {
    self.trigger(Events.MEDIA_OVERLAY_STATUS_CHANGED, status);
  }

  /**
   * Flips the page from left to right.
   * Takes to account the page progression direction to decide to flip to prev or next page.
   */
  this.openPageLeft = function() {

    if (_package.spine.isLeftToRight()) {
      self.openPagePrev();
    } else {
      self.openPageNext();
    }
  };

  /**
   * Flips the page from right to left.
   * Takes to account the page progression direction to decide to flip to prev or next page.
   */
  this.openPageRight = function() {

    if (_package.spine.isLeftToRight()) {
      self.openPageNext();
    } else {
      self.openPagePrev();
    }

  };

  /**
   * Returns if the current child view is an instance of a fixed page view
   *
   * @returns {boolean}
   */
  this.isCurrentViewFixedLayout = function() {
    return _currentView instanceof FixedView;
  };

  /**
   * Zoom options
   *
   * @typedef {object} ReadiumSDK.Views.ReaderView.ZoomOptions
   * @property {string} style - "user"|"fit-screen"|"fit-width"
   * @property {number} scale - 0.0 to 1.0
   */

  /**
   * Set the zoom options.
   *
   * @param {ReadiumSDK.Views.ReaderView.ZoomOptions} zoom Zoom options
   */
  this.setZoom = function(zoom) {
    // zoom only handled by fixed layout views 
    if (self.isCurrentViewFixedLayout()) {
      _currentView.setZoom(zoom);
    }
  };

  /**
   * Returns the current view scale as a percentage
   *
   * @returns {number}
   */
  this.getViewScale = function() {
    if (self.isCurrentViewFixedLayout()) {
      return 100 * _currentView.getViewScale();
    } else {
      return 100;
    }
  };

  /**
   * Settings Data
   *
   * @typedef {object} ReadiumSDK.Views.ReaderView.SettingsData
   * @property {number} fontSize - Font size as percentage
   * @property {(string|boolean)} syntheticSpread - "auto"|true|false
   * @property {(string|boolean)} scroll - "auto"|true|false
   * @property {boolean} doNotUpdateView - Indicates whether the view should be updated after the settings are applied
   * @property {boolean} mediaOverlaysEnableClick - Indicates whether media overlays are interactive on mouse clicks
   */

  /**
   * Updates reader view based on the settings specified in settingsData object
   *
   * @param {ReadiumSDK.Views.ReaderView.SettingsData} settingsData Settings data
   * @fires ReadiumSDK.Events.SETTINGS_APPLIED
   */
  this.updateSettings = function(settingsData) {

    //console.debug("UpdateSettings: " + JSON.stringify(settingsData));

    _viewerSettings.update(settingsData);

    if (_mediaOverlayPlayer) {
      _mediaOverlayPlayer.setAutomaticNextSmil(_viewerSettings.mediaOverlaysAutomaticPageTurn ? true : false);
    }

    if (_currentView && !settingsData.doNotUpdateView) {

      var bookMark = _currentView.bookmarkCurrentPage();

      if (bookMark && bookMark.idref) {

        var wasPlaying = false;
        if (_currentView.isReflowable && _currentView.isReflowable()) {
          wasPlaying = self.isPlayingMediaOverlay();
          if (wasPlaying) {
            self.pauseMediaOverlay();
          }
        }

        var spineItem = _spine.getItemById(bookMark.idref);

        initViewForItem(spineItem, function(isViewChanged) {

          if (!isViewChanged) {
            _currentView.setViewSettings(_viewerSettings);
          }

          self.openSpineItemElementCfi(bookMark.idref, bookMark.contentCFI, self);

          if (wasPlaying) {
            self.playMediaOverlay();
            // setTimeout(function()
            // {
            // }, 60);
          }

          self.trigger(Events.SETTINGS_APPLIED);
          return;
        });
      }
    }

    self.trigger(Events.SETTINGS_APPLIED);
  };

  /**
   * Opens the next page.
   */
  this.openPageNext = function() {

    if (self.getCurrentViewType() === VIEW_TYPE_SCROLLED_CONTINUOUS) {
      _currentView.openPageNext(self);
      return;
    }

    var paginationInfo = _currentView.getPaginationInfo();

    if (paginationInfo.openPages.length == 0) {
      return;
    }

    var lastOpenPage = paginationInfo.openPages[paginationInfo.openPages.length - 1];

    if (lastOpenPage.spineItemPageIndex < lastOpenPage.spineItemPageCount - 1) {
      _currentView.openPageNext(self);
      return;
    }

    var currentSpineItem = _spine.getItemById(lastOpenPage.idref);

    var nextSpineItem = _spine.nextItem(currentSpineItem);

    if (!nextSpineItem) {
      return;
    }

    var openPageRequest = new PageOpenRequest(nextSpineItem, self);
    openPageRequest.setFirstPage();

    openPage(openPageRequest, 2);
  };

  /**
   * Opens the previous page.
   */
  this.openPagePrev = function() {

    if (self.getCurrentViewType() === VIEW_TYPE_SCROLLED_CONTINUOUS) {
      _currentView.openPagePrev(self);
      return;
    }

    var paginationInfo = _currentView.getPaginationInfo();

    if (paginationInfo.openPages.length == 0) {
      return;
    }

    var firstOpenPage = paginationInfo.openPages[0];

    if (firstOpenPage.spineItemPageIndex > 0) {
      _currentView.openPagePrev(self);
      return;
    }

    var currentSpineItem = _spine.getItemById(firstOpenPage.idref);

    var prevSpineItem = _spine.prevItem(currentSpineItem);

    if (!prevSpineItem) {
      return;
    }

    var openPageRequest = new PageOpenRequest(prevSpineItem, self);
    openPageRequest.setLastPage();

    openPage(openPageRequest, 1);
  };

  function getSpineItem(idref) {

    if (!idref) {

      console.log("idref parameter value missing!");
      return undefined;
    }

    var spineItem = _spine.getItemById(idref);
    if (!spineItem) {
      console.log("Spine item with id " + idref + " not found!");
      return undefined;
    }

    return spineItem;

  }

  /**
   * Opens the page of the spine item with element with provided cfi
   *
   * @param {string} idref Id of the spine item
   * @param {string} elementCfi CFI of the element to be shown
   * @param {object} initiator optional
   */
  this.openSpineItemElementCfi = function(idref, elementCfi, initiator) {

    var spineItem = getSpineItem(idref);

    if (!spineItem) {
      return false;
    }

    var pageData = new PageOpenRequest(spineItem, initiator);
    if (elementCfi) {
      pageData.setElementCfi(elementCfi);
    }

    openPage(pageData, 0);

    return true;
  };

  /**
   * Opens specified page index of the current spine item
   *
   * @param {number} pageIndex Zero based index of the page in the current spine item
   * @param {object} initiator optional
   */
  this.openPageIndex = function(pageIndex, initiator) {

    if (!_currentView) {
      return false;
    }

    var pageRequest;

    if (_package.isFixedLayout()) {
      var spineItem = _spine.items[pageIndex];
      if (!spineItem) {
        return false;
      }

      pageRequest = new PageOpenRequest(spineItem, initiator);
      pageRequest.setPageIndex(0);
    } else {

      var spineItems = this.getLoadedSpineItems();
      if (spineItems.length > 0) {
        pageRequest = new PageOpenRequest(spineItems[0], initiator);
        pageRequest.setPageIndex(pageIndex);
      }
    }

    openPage(pageRequest, 0);

    return true;
  };

  // dir: 0 => new or same page, 1 => previous, 2 => next
  function openPage(pageRequest, dir) {

    initViewForItem(pageRequest.spineItem, function(isViewChanged) {

      if (!isViewChanged) {
        _currentView.setViewSettings(_viewerSettings);
      }

      _currentView.openPage(pageRequest, dir);
    });
  }


  /**
   * Opens page index of the spine item with idref provided
   *
   * @param {string} idref Id of the spine item
   * @param {number} pageIndex Zero based index of the page in the spine item
   * @param {object} initiator optional
   */
  this.openSpineItemPage = function(idref, pageIndex, initiator) {

    var spineItem = getSpineItem(idref);

    if (!spineItem) {
      return false;
    }

    var pageData = new PageOpenRequest(spineItem, initiator);
    if (pageIndex) {
      pageData.setPageIndex(pageIndex);
    }

    openPage(pageData, 0);

    return true;
  };

  /**
   * Set CSS Styles to the reader container
   *
   * @param {ReadiumSDK.Collections.StyleCollection} styles   Style collection containing selector property and declarations object
   * @param {boolean} doNotUpdateView                         Whether to update the view after the styles are applied.
   */
  this.setStyles = function(styles, doNotUpdateView) {

    var count = styles.length;

    for (var i = 0; i < count; i++) {
      if (styles[i].declarations) {
        _userStyles.addStyle(styles[i].selector, styles[i].declarations);
      } else {
        _userStyles.removeStyle(styles[i].selector);
      }
    }

    applyStyles(doNotUpdateView);

  };

  /**
   * Set CSS Styles to the content documents
   *
   * @param {ReadiumSDK.Collections.StyleCollection} styles    Style collection containing selector property and declarations object
   */
  this.setBookStyles = function(styles) {

    var count = styles.length;

    for (var i = 0; i < count; i++) {
      _bookStyles.addStyle(styles[i].selector, styles[i].declarations);
    }

    if (_currentView) {
      _currentView.applyBookStyles();
    }

  };

  /**
   * Gets an element from active content documents based on a query selector.
   *
   * @param {Models.SpineItem} spineItem       The spine item object associated with an active content document
   * @param {string} selector                      The query selector
   * @returns {HTMLElement|undefined}
   */
  this.getElement = function(spineItem, selector) {

    if (_currentView) {
      return _currentView.getElement(spineItem, selector);
    }

    return undefined;
  };

  /**
   * Gets an element from active content documents based on an element id.
   *
   * @param {Models.SpineItem} spineItem      The spine item object associated with an active content document
   * @param {string} id                                  The element id
   * @returns {HTMLElement|undefined}
   */
  this.getElementById = function(spineItem, id) {

    if (_currentView) {
      return _currentView.getElementById(spineItem, id);
    }

    return undefined;
  };

  /**
   * Gets an element from active content documents based on a content CFI.
   *
   * @param {Models.SpineItem} spineItem     The spine item idref associated with an active content document
   * @param {string} cfi                                The partial content CFI
   * @param {string[]} [classBlacklist]
   * @param {string[]} [elementBlacklist]
   * @param {string[]} [idBlacklist]
   * @returns {HTMLElement|undefined}
   */
  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    if (_currentView) {
      return _currentView.getElementByCfi(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist);
    }

    return undefined;

  };

  function applyStyles(doNotUpdateView) {

    setStyles(_userStyles.getStyles(), _$el);

    if (_mediaOverlayPlayer)
      _mediaOverlayPlayer.applyStyles();

    if (doNotUpdateView) return;

    if (_currentView) {
      _currentView.applyStyles();
    }
  }

  /**
   * Opens a content url from a media player context
   *
   * @param {string} contentRefUrl
   * @param {string} sourceFileHref
   * @param offset
   */
  this.mediaOverlaysOpenContentUrl = function(contentRefUrl, sourceFileHref, offset) {
    _mediaOverlayPlayer.mediaOverlaysOpenContentUrl(contentRefUrl, sourceFileHref, offset);
  };



  /**
   * Opens the content document specified by the url
   *
   * @param {string} contentRefUrl Url of the content document
   * @param {string | undefined} sourceFileHref Url to the file that contentRefUrl is relative to. If contentRefUrl is
   * relative ot the source file that contains it instead of the package file (ex. TOC file) We have to know the
   * sourceFileHref to resolve contentUrl relative to the package file.
   * @param {object} initiator optional
   */
  this.openContentUrl = function(contentRefUrl, sourceFileHref, initiator) {

    var combinedPath = ResolveContentRef(contentRefUrl, sourceFileHref);

    var hashIndex = combinedPath.indexOf("#");
    var hrefPart;
    var elementId;
    if (hashIndex >= 0) {
      hrefPart = combinedPath.substr(0, hashIndex);
      elementId = combinedPath.substr(hashIndex + 1);
    } else {
      hrefPart = combinedPath;
      elementId = undefined;
    }

    var spineItem = _spine.getItemByHref(hrefPart);
    if (!spineItem) {
      console.warn('spineItem ' + hrefPart + ' not found');
      // sometimes that happens because spine item's URI gets encoded,
      // yet it's compared with raw strings by `getItemByHref()` -
      // so we try to search with decoded link as well
      var decodedHrefPart = decodeURIComponent(hrefPart);
      spineItem = _spine.getItemByHref(decodedHrefPart);
      if (!spineItem) {
        console.warn('decoded spineItem ' + decodedHrefPart + ' missing as well');
        return false;
      }
    }

    return self.openSpineItemElementId(spineItem.idref, elementId, initiator);
  };

  /**
   * Opens the page of the spine item with element with provided cfi
   *
   * @param {string} idref Id of the spine item
   * @param {string} elementId id of the element to be shown
   * @param {object} initiator optional
   */
  this.openSpineItemElementId = function(idref, elementId, initiator) {

    var spineItem = _spine.getItemById(idref);
    if (!spineItem) {
      return false;
    }

    var pageData = new PageOpenRequest(spineItem, initiator);

    if (elementId) {
      pageData.setElementId(elementId);
    }


    openPage(pageData, 0);

    return true;
  };

  /**
   * Returns the bookmark associated with currently opened page.
   *
   * @returns {string} Serialized Models.BookmarkData object as JSON string.
   */
  this.bookmarkCurrentPage = function() {
    return JSON.stringify(_currentView.bookmarkCurrentPage());
  };

  /**
   * Resets all the custom styles set by setStyle callers at runtime
   */
  this.clearStyles = function() {

    _userStyles.resetStyleValues();
    applyStyles();
    _userStyles.clear();
  };

  /**
   * Resets all the custom styles set by setBookStyle callers at runtime
   */
  this.clearBookStyles = function() {

    if (_currentView) {

      _bookStyles.resetStyleValues();
      _currentView.applyBookStyles();
    }

    _bookStyles.clear();
  };

  /**
   * Returns true if media overlay available for one of the open pages.
   *
   * @returns {boolean}
   */
  this.isMediaOverlayAvailable = function() {

    if (!_mediaOverlayPlayer) return false;

    return _mediaOverlayPlayer.isMediaOverlayAvailable();
  };

  /*
      this.setMediaOverlaySkippables = function(items) {

          _mediaOverlayPlayer.setMediaOverlaySkippables(items);
      };

      this.setMediaOverlayEscapables = function(items) {

          _mediaOverlayPlayer.setMediaOverlayEscapables(items);
      };
  */

  /**
   * Starts/Stop playing media overlay on current page
   */
  this.toggleMediaOverlay = function() {

    _mediaOverlayPlayer.toggleMediaOverlay();
  };


  /**
   * Plays next fragment media overlay
   */
  this.nextMediaOverlay = function() {

    _mediaOverlayPlayer.nextMediaOverlay();

  };

  /**
   * Plays previous fragment media overlay
   */
  this.previousMediaOverlay = function() {

    _mediaOverlayPlayer.previousMediaOverlay();

  };

  /**
   * Plays next available fragment media overlay that is outside of the current escapable scope
   */
  this.escapeMediaOverlay = function() {

    _mediaOverlayPlayer.escape();
  };

  /**
   * End media overlay TTS
   * @todo Clarify what this does with Daniel.
   */
  this.ttsEndedMediaOverlay = function() {

    _mediaOverlayPlayer.onTTSEnd();
  };

  /**
   * Pause currently playing media overlays.
   */
  this.pauseMediaOverlay = function() {

    _mediaOverlayPlayer.pause();
  };

  /**
   * Start/Resume playback of media overlays.
   */
  this.playMediaOverlay = function() {

    _mediaOverlayPlayer.play();
  };

  /**
   * Determine if media overlays are currently playing.
   * @returns {boolean}
   */
  this.isPlayingMediaOverlay = function() {

    return _mediaOverlayPlayer.isPlaying();
  };

  //
  // should use ReadiumSDK.Events.SETTINGS_APPLIED instead!
  //    this.setRateMediaOverlay = function(rate) {
  //
  //        _mediaOverlayPlayer.setRate(rate);
  //    };
  //    this.setVolumeMediaOverlay = function(volume){
  //
  //        _mediaOverlayPlayer.setVolume(volume);
  //    };

  /**
   * Get the first visible media overlay element from the currently active content document(s)
   * @returns {HTMLElement|undefined}
   */
  this.getFirstVisibleMediaOverlayElement = function() {

    if (_currentView) {
      return _currentView.getFirstVisibleMediaOverlayElement();
    }

    return undefined;
  };

  /**
   * Used to jump to an element to make sure it is visible when a content document is paginated
   * @param {string}      spineItemId   The spine item idref associated with an active content document
   * @param {HTMLElement} element       The element to make visible
   * @param [initiator]
   */
  this.insureElementVisibility = function(spineItemId, element, initiator) {

    if (_currentView) {
      _currentView.insureElementVisibility(spineItemId, element, initiator);
    }
  };

  var _resizeBookmark = null;
  var _resizeMOWasPlaying = false;

  function handleViewportResizeStart() {

    _resizeBookmark = null;
    _resizeMOWasPlaying = false;

    if (_currentView) {

      if (_currentView.isReflowable && _currentView.isReflowable()) {
        _resizeMOWasPlaying = self.isPlayingMediaOverlay();
        if (_resizeMOWasPlaying) {
          self.pauseMediaOverlay();
        }
      }

      _resizeBookmark = _currentView.bookmarkCurrentPage(); // not self! (JSON string)
    }
  }

  function handleViewportResizeTick() {
    if (_currentView) {
      self.handleViewportResize(_resizeBookmark);
    }
  }

  function handleViewportResizeEnd() {
    //same as doing one final tick for now
    handleViewportResizeTick();

    if (_resizeMOWasPlaying) self.playMediaOverlay();
  }

  this.handleViewportResize = function(bookmarkToRestore) {
    if (!_currentView) return;

    var bookMark = bookmarkToRestore || _currentView.bookmarkCurrentPage(); // not self! (JSON string)

    if (_currentView.isReflowable && _currentView.isReflowable() && bookMark && bookMark.idref) {
      var spineItem = _spine.getItemById(bookMark.idref);

      initViewForItem(spineItem, function(isViewChanged) {
        self.openSpineItemElementCfi(bookMark.idref, bookMark.contentCFI, self);
        return;
      });
    } else {
      _currentView.onViewportResize();
    }
  };

  /**
   * Returns current selection partial Cfi, useful for workflows that need to check whether the user has selected something.
   *
   * @returns {object | undefined} partial cfi object or undefined if nothing is selected
   */
  this.getCurrentSelectionCfi = function() {
    return _annotationsManager.getCurrentSelectionCfi();
  };

  /**
   * Creates a higlight based on given parameters
   *
   * @param {string} spineIdRef    spine idref that defines the partial Cfi
   * @param {string} cfi           partial CFI (withouth the indirection step) relative to the spine index
   * @param {string} id            id of the highlight. must be unique
   * @param {string} type          currently "highlight" only
   *
   * @returns {object | undefined} partial cfi object of the created highlight
   */
  this.addHighlight = function(spineIdRef, Cfi, id, type, styles) {
    return _annotationsManager.addHighlight(spineIdRef, Cfi, id, type, styles);
  };


  /**
   * Creates a higlight based on the current selection
   *
   * @param {string} id id of the highlight. must be unique
   * @param {string} type currently "highlight" only
   *
   * @returns {object | undefined} partial cfi object of the created highlight
   */
  this.addSelectionHighlight = function(id, type) {
    return _annotationsManager.addSelectionHighlight(id, type);
  };

  /**
   * Removes A given highlight
   *
   * @param {string} id  The id associated with the highlight.
   *
   * @returns {undefined}
   *
   */
  this.removeHighlight = function(id) {
    return _annotationsManager.removeHighlight(id);
  };

  /**
   *
   * @param {string} eventName              Event name.
   * @param {function} callback             Callback function.
   * @param {object} context                User specified data passed to the callback function.
   * @returns {undefined}
   */
  this.addIFrameEventListener = function(eventName, callback, context) {
    _iframeLoader.addIFrameEventListener(eventName, callback, context);
  };

  // TODO Extract
  var BackgroundAudioTrackManager = function() {
    var _spineItemIframeMap = {};
    var _wasPlaying = false;

    var _callback_playPause = undefined;
    this.setCallback_PlayPause = function(callback) {
      _callback_playPause = callback;
    };

    var _callback_isAvailable = undefined;
    this.setCallback_IsAvailable = function(callback) {
      _callback_isAvailable = callback;
    };

    this.playPause = function(doPlay) {
      _playPause(doPlay);
    };

    var _playPause = function(doPlay) {
      if (_callback_playPause) {
        _callback_playPause(doPlay);
      }

      try {
        var $iframe = undefined;

        for (var prop in _spineItemIframeMap) {
          if (!_spineItemIframeMap.hasOwnProperty(prop)) continue;

          var data = _spineItemIframeMap[prop];
          if (!data || !data.active) continue;

          if ($iframe) console.error("More than one active iframe?? (pagination)");

          $iframe = data["$iframe"];
          if (!$iframe) continue;

          var $audios = $("audio", $iframe[0].contentDocument);

          $.each($audios, function() {

            var attr = this.getAttribute("epub:type") || this.getAttribute("type");

            if (!attr) return true; // continue

            if (attr.indexOf("ibooks:soundtrack") < 0 && attr.indexOf("media:soundtrack") < 0 && attr.indexOf("media:background") < 0) return true; // continue

            if (doPlay && this.play) {
              this.play();
            } else if (this.pause) {
              this.pause();
            }

            return true; // continue (more than one track?)
          });
        }
      } catch (err) {
        console.error(err);
      }
    };

    this.setPlayState = function(wasPlaying) {
      _wasPlaying = wasPlaying;
    };

    self.on(Events.CONTENT_DOCUMENT_LOADED, function($iframe, spineItem) {
      try {
        if (spineItem && spineItem.idref && $iframe && $iframe[0]) {
          // console.log("CONTENT_DOCUMENT_LOADED");
          // console.debug(spineItem.href);
          // console.debug(spineItem.idref);

          _spineItemIframeMap[spineItem.idref] = {
            "$iframe": $iframe,
            href: spineItem.href
          };
        }
      } catch (err) {
        console.error(err);
      }
    });

    self.on(Events.PAGINATION_CHANGED, function(pageChangeData) {
      // console.log("PAGINATION_CHANGED");
      // console.debug(pageChangeData);
      // 
      // if (pageChangeData.spineItem)
      // {
      //     console.debug(pageChangeData.spineItem.href);
      //     console.debug(pageChangeData.spineItem.idref);
      // }
      // else
      // {
      //     //console.error(pageChangeData);
      // }
      // 
      // if (pageChangeData.paginationInfo && pageChangeData.paginationInfo.openPages && pageChangeData.paginationInfo.openPages.length)
      // {
      //     for (var i = 0; i < pageChangeData.paginationInfo.openPages.length; i++)
      //     {
      //         console.log(pageChangeData.paginationInfo.openPages[i].idref);
      //     }
      // }

      var atLeastOne = false;

      try {
        for (var prop in _spineItemIframeMap) {
          if (!_spineItemIframeMap.hasOwnProperty(prop)) continue;

          var isActive = pageChangeData.spineItem && pageChangeData.spineItem.idref === prop;

          var isDisplayed = false;

          if (pageChangeData.paginationInfo && pageChangeData.paginationInfo.openPages.length) {
            var allSame = true;

            for (var i = 0; i < pageChangeData.paginationInfo.openPages.length; i++) {
              if (pageChangeData.paginationInfo.openPages[i].idref === prop) {
                isDisplayed = true;
              } else {
                allSame = false;
              }
            }

            if (!isActive && allSame) isActive = true;
          }

          if (isActive || isDisplayed) {
            var data = _spineItemIframeMap[prop];
            if (!data) continue;

            _spineItemIframeMap[prop]["active"] = isActive;

            var $iframe = data["$iframe"];
            var href = data.href;

            var $audios = $("audio", $iframe[0].contentDocument);
            $.each($audios, function() {

              var attr = this.getAttribute("epub:type") || this.getAttribute("type");

              if (!attr) return true; // continue

              if (attr.indexOf("ibooks:soundtrack") < 0 && attr.indexOf("media:soundtrack") < 0 && attr.indexOf("media:background") < 0) return true; // continue

              this.setAttribute("loop", "loop");
              this.removeAttribute("autoplay");

              // DEBUG!
              //this.setAttribute("controls", "controls");

              if (isActive) {
                // DEBUG!
                //$(this).css({border:"2px solid green"});
              } else {
                if (this.pause) this.pause();

                // DEBUG!
                //$(this).css({border:"2px solid red"});
              }

              atLeastOne = true;

              return true; // continue (more than one track?)
            });

            continue;
          } else {
            if (_spineItemIframeMap[prop]) _spineItemIframeMap[prop]["$iframe"] = undefined;
            _spineItemIframeMap[prop] = undefined;
          }
        }
      } catch (err) {
        console.error(err);
      }

      if (_callback_isAvailable) {
        _callback_isAvailable(atLeastOne);
      }

      if (atLeastOne) {
        if (_wasPlaying) {
          _playPause(true);
        } else {
          _playPause(false); // ensure correct paused state
        }
      } else {
        _playPause(false); // ensure correct paused state
      }
    });

    self.on(Events.MEDIA_OVERLAY_STATUS_CHANGED, function(value) {
      if (!value.smilIndex) return;
      var package = self.package();
      var smil = package.media_overlay.smilAt(value.smilIndex);
      if (!smil || !smil.spineItemId) return;

      var needUpdate = false;
      for (var prop in _spineItemIframeMap) {
        if (!_spineItemIframeMap.hasOwnProperty(prop)) continue;

        var data = _spineItemIframeMap[prop];
        if (!data) continue;

        if (data.active) {
          if (prop !== smil.spineItemId) {
            _playPause(false); // ensure correct paused state
            data.active = false;
            needUpdate = true;
          }
        }
      }

      if (needUpdate) {
        for (var prop in _spineItemIframeMap) {
          if (!_spineItemIframeMap.hasOwnProperty(prop)) continue;

          var data = _spineItemIframeMap[prop];
          if (!data) continue;

          if (!data.active) {
            if (prop === smil.spineItemId) {
              data.active = true;
            }
          }
        }

        if (_wasPlaying) {
          _playPause(true);
        }
      }
    });
  };
  this.backgroundAudioTrackManager = new BackgroundAudioTrackManager();
};

module.exports = ReaderView;
},{"../collections/style":"/Users/craverod/opensource/readium-js/src/sdk/collections/style.js","../events":"/Users/craverod/opensource/readium-js/src/sdk/events.js","../helpers/extended-throttle":"/Users/craverod/opensource/readium-js/src/sdk/helpers/extended-throttle.js","../helpers/is-iframe-alive":"/Users/craverod/opensource/readium-js/src/sdk/helpers/is-iframe-alive.js","../helpers/resolve-content-ref":"/Users/craverod/opensource/readium-js/src/sdk/helpers/resolve-content-ref.js","../helpers/set-styles":"/Users/craverod/opensource/readium-js/src/sdk/helpers/set-styles.js","../internal-events":"/Users/craverod/opensource/readium-js/src/sdk/internal-events.js","../models/package":"/Users/craverod/opensource/readium-js/src/sdk/models/package.js","../models/page-open-request":"/Users/craverod/opensource/readium-js/src/sdk/models/page-open-request.js","../models/switches":"/Users/craverod/opensource/readium-js/src/sdk/models/switches.js","../models/trigger":"/Users/craverod/opensource/readium-js/src/sdk/models/trigger.js","../models/viewer-settings":"/Users/craverod/opensource/readium-js/src/sdk/models/viewer-settings.js","./annotations-manager":"/Users/craverod/opensource/readium-js/src/sdk/views/annotations-manager.js","./fixed-view":"/Users/craverod/opensource/readium-js/src/sdk/views/fixed-view.js","./iframe-loader":"/Users/craverod/opensource/readium-js/src/sdk/views/iframe-loader.js","./internal-links-support":"/Users/craverod/opensource/readium-js/src/sdk/views/internal-links-support.js","./media-overlay-data-injector":"/Users/craverod/opensource/readium-js/src/sdk/views/media-overlay-data-injector.js","./media-overlay-player":"/Users/craverod/opensource/readium-js/src/sdk/views/media-overlay-player.js","./reflowable-view":"/Users/craverod/opensource/readium-js/src/sdk/views/reflowable-view.js","./scroll-view":"/Users/craverod/opensource/readium-js/src/sdk/views/scroll-view.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/reflowable-view.js":[function(require,module,exports){
//  LauncherOSX
//
//  Created by Boris Schneiderman.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var _ = require('underscore')
var $ = require('jquery')
var Backbone = require('backbone')
var BookmarkData = require('../models/bookmark-data')
var CfiNavigationLogic = require('./cfi-navigation-logic')
var CurrentPagesInfo = require('../models/current-pages-info')
var Events = require('../events')
var deduceSyntheticSpread = require('../helpers/deduce-synthetic-spread')
var InternalEvents = require('../internal-events')
var loadTemplate = require('../helpers/load-template')
var Margins = require('../helpers/margins')
var PageOpenRequest = require('../models/page-open-request')
var triggerLayout = require('../helpers/trigger-layout')
var setStyles = require('../helpers/set-styles')
var UpdateHtmlFontSize = require('../helpers/update-html-font-size')
var ViewerSettings = require('../models/viewer-settings')

/**
 * Renders reflowable content using CSS columns
 * @param options
 * @constructor
 */
function ReflowableView(options, reader) {

  _.extend(this, Backbone.Events);

  var self = this;

  var _$viewport = options.$viewport;
  var _spine = options.spine;
  var _userStyles = options.userStyles;
  var _bookStyles = options.bookStyles;
  var _iframeLoader = options.iframeLoader;

  var _currentSpineItem;
  var _isWaitingFrameRender = false;
  var _deferredPageRequest;
  var _fontSize = 100;
  var _$contentFrame;
  var _navigationLogic;
  var _$el;
  var _$iframe;
  var _$epubHtml;

  var _$htmlBody;

  var _htmlBodyIsVerticalWritingMode;
  var _htmlBodyIsLTRDirection;
  var _htmlBodyIsLTRWritingMode;


  var _currentOpacity = -1;

  var _lastViewPortSize = {
    width: undefined,
    height: undefined
  };

  var _paginationInfo = {

    visibleColumnCount: 2,
    columnGap: 20,
    spreadCount: 0,
    currentSpreadIndex: 0,
    columnWidth: undefined,
    pageOffset: 0,
    columnCount: 0
  };

  this.render = function() {

    var template = loadTemplate("reflowable_book_frame", {});

    _$el = $(template);
    _$viewport.append(_$el);

    var settings = reader.viewerSettings();
    if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
      //defaults
      settings = new ViewerSettings({});
    }
    if (settings.enableGPUHardwareAccelerationCSS3D) {
      // This fixes rendering issues with WebView (native apps), which clips content embedded in iframes unless GPU hardware acceleration is enabled for CSS rendering.
      _$el.css("transform", "translateZ(0)");
    }

    // See ReaderView.handleViewportResize
    // var lazyResize = _.debounce(self.onViewportResize, 100);
    // $(window).on("resize.ReadiumSDK.reflowableView", _.bind(lazyResize, self));
    renderIframe();

    return self;
  };

  function setFrameSizesToRectangle(rectangle) {
    _$contentFrame.css("left", rectangle.left + "px");
    _$contentFrame.css("top", rectangle.top + "px");
    _$contentFrame.css("right", rectangle.right + "px");
    _$contentFrame.css("bottom", rectangle.bottom + "px");

  }

  this.remove = function() {

    //$(window).off("resize.ReadiumSDK.reflowableView");
    _$el.remove();

  };

  this.isReflowable = function() {
    return true;
  };

  this.onViewportResize = function() {

    if (updateViewportSize()) {
      updatePagination();
    }
  };

  var _viewSettings = undefined;
  this.setViewSettings = function(settings) {

    _viewSettings = settings;

    _paginationInfo.columnGap = settings.columnGap;
    _fontSize = settings.fontSize;

    updateHtmlFontSize();
    updateColumnGap();

    updateViewportSize();
    updatePagination();
  };

  function renderIframe() {
    if (_$contentFrame) {
      //destroy old contentFrame
      _$contentFrame.remove();
    }

    var template = loadTemplate("reflowable_book_page_frame", {});
    var $bookFrame = $(template);
    $bookFrame = _$el.append($bookFrame);

    _$contentFrame = $("#reflowable-content-frame", $bookFrame);

    _$iframe = $("#epubContentIframe", $bookFrame);

    _$iframe.css("left", "");
    _$iframe.css("right", "");
    _$iframe.css("position", "relative");
    //_$iframe.css(_spine.isLeftToRight() ? "left" : "right", "0px");
    _$iframe.css("overflow", "hidden");

    _navigationLogic = new CfiNavigationLogic(
      _$contentFrame, _$iframe, {
        rectangleBased: true,
        paginationInfo: _paginationInfo
      });
  }

  function loadSpineItem(spineItem) {

    if (_currentSpineItem != spineItem) {

      //create & append iframe to container frame
      renderIframe();

      _paginationInfo.pageOffset = 0;
      _paginationInfo.currentSpreadIndex = 0;
      _currentSpineItem = spineItem;
      _isWaitingFrameRender = true;

      var src = _spine.package.resolveRelativeUrl(spineItem.href);
      self.trigger(Events.CONTENT_DOCUMENT_LOAD_START, _$iframe, spineItem);

      _$iframe.css("opacity", "0.01");

      _iframeLoader.loadIframe(_$iframe[0], src, onIFrameLoad, self, {
        spineItem: spineItem
      });
    }
  }

  function updateHtmlFontSize() {

    if (_$epubHtml) {
      UpdateHtmlFontSize(_$epubHtml, _fontSize);
    }
  }

  function updateColumnGap() {

    if (_$epubHtml) {

      _$epubHtml.css("column-gap", _paginationInfo.columnGap + "px");
    }
  }

  function onIFrameLoad(success) {

    _isWaitingFrameRender = false;

    //while we where loading frame new request came
    if (_deferredPageRequest && _deferredPageRequest.spineItem != _currentSpineItem) {
      loadSpineItem(_deferredPageRequest.spineItem);
      return;
    }

    if (!success) {
      _$iframe.css("opacity", "1");
      _deferredPageRequest = undefined;
      return;
    }

    self.trigger(Events.CONTENT_DOCUMENT_LOADED, _$iframe, _currentSpineItem);

    var epubContentDocument = _$iframe[0].contentDocument;
    _$epubHtml = $("html", epubContentDocument);
    _$htmlBody = $("body", _$epubHtml);

    // Video surface sometimes (depends on the video codec) disappears from CSS column (i.e. reflow page) during playback (audio continues to play normally, but video canvas is invisible).
    // Enabling CSS3D fixes this Chrome-specific rendering bug.
    if (window.chrome && window.navigator.vendor === "Google Inc.") // TODO: Opera (WebKit) sometimes suffers from this rendering bug too (depends on the video codec), but unfortunately GPU-accelerated rendering makes the video controls unresponsive!!
    {
      $("video", _$htmlBody).css("transform", "translateZ(0)");
    }

    _htmlBodyIsVerticalWritingMode = false;
    _htmlBodyIsLTRDirection = true;
    _htmlBodyIsLTRWritingMode = undefined;

    var win = _$iframe[0].contentDocument.defaultView || _$iframe[0].contentWindow;

    //Helpers.isIframeAlive
    var htmlBodyComputedStyle = win.getComputedStyle(_$htmlBody[0], null);
    if (htmlBodyComputedStyle) {
      _htmlBodyIsLTRDirection = htmlBodyComputedStyle.direction === "ltr";

      var writingMode = undefined;
      if (htmlBodyComputedStyle.getPropertyValue) {
        writingMode = htmlBodyComputedStyle.getPropertyValue("-webkit-writing-mode") || htmlBodyComputedStyle.getPropertyValue("-moz-writing-mode") || htmlBodyComputedStyle.getPropertyValue("-ms-writing-mode") || htmlBodyComputedStyle.getPropertyValue("-o-writing-mode") || htmlBodyComputedStyle.getPropertyValue("-epub-writing-mode") || htmlBodyComputedStyle.getPropertyValue("writing-mode");
      } else {
        writingMode = htmlBodyComputedStyle.webkitWritingMode || htmlBodyComputedStyle.mozWritingMode || htmlBodyComputedStyle.msWritingMode || htmlBodyComputedStyle.oWritingMode || htmlBodyComputedStyle.epubWritingMode || htmlBodyComputedStyle.writingMode;
      }

      if (writingMode) {
        _htmlBodyIsLTRWritingMode = writingMode.indexOf("-lr") >= 0; // || writingMode.indexOf("horizontal-") >= 0; we need explicit!

        if (writingMode.indexOf("vertical") >= 0 || writingMode.indexOf("tb-") >= 0 || writingMode.indexOf("bt-") >= 0) {
          _htmlBodyIsVerticalWritingMode = true;
        }
      }
    }

    if (_htmlBodyIsLTRDirection) {
      if (_$htmlBody[0].getAttribute("dir") === "rtl" || _$epubHtml[0].getAttribute("dir") === "rtl") {
        _htmlBodyIsLTRDirection = false;
      }
    }

    // Some EPUBs may not have explicit RTL content direction (via CSS "direction" property or @dir attribute) despite having a RTL page progression direction. Readium consequently tweaks the HTML in order to restore the correct block flow in the browser renderer, resulting in the appropriate CSS columnisation (which is used to emulate pagination).
    if (!_spine.isLeftToRight() && _htmlBodyIsLTRDirection && !_htmlBodyIsVerticalWritingMode) {
      _$htmlBody[0].setAttribute("dir", "rtl");
      _htmlBodyIsLTRDirection = false;
      _htmlBodyIsLTRWritingMode = false;
    }

    _paginationInfo.isVerticalWritingMode = _htmlBodyIsVerticalWritingMode;

    hideBook();
    _$iframe.css("opacity", "1");

    updateViewportSize();
    _$epubHtml.css("height", _lastViewPortSize.height + "px");

    _$epubHtml.css("position", "relative");
    _$epubHtml.css("margin", "0");
    _$epubHtml.css("padding", "0");

    _$epubHtml.css("column-axis", (_htmlBodyIsVerticalWritingMode ? "vertical" : "horizontal"));

    //
    // /////////
    // //Columns Debugging
    //
    //     _$epubHtml.css("column-rule-color", "red");
    //     _$epubHtml.css("column-rule-style", "dashed");
    //     _$epubHtml.css("column-rule-width", "1px");
    // _$epubHtml.css("background-color", '#b0c4de');
    //
    // ////

    self.applyBookStyles();
    resizeImages();

    updateHtmlFontSize();
    updateColumnGap();


    self.applyStyles();
  }

  this.applyStyles = function() {

    setStyles(_userStyles.getStyles(), _$el.parent());

    //because left, top, bottom, right setting ignores padding of parent container
    //we have to take it to account manually
    var elementMargins = Margins.fromElement(_$el);
    setFrameSizesToRectangle(elementMargins.padding);


    updateViewportSize();
    updatePagination();
  };

  this.applyBookStyles = function() {

    if (_$epubHtml) {
      setStyles(_bookStyles.getStyles(), _$epubHtml);
    }
  };

  function openDeferredElement() {

    if (!_deferredPageRequest) {
      return;
    }

    var deferredData = _deferredPageRequest;
    _deferredPageRequest = undefined;
    self.openPage(deferredData);

  }

  this.openPage = function(pageRequest) {

    if (_isWaitingFrameRender) {
      _deferredPageRequest = pageRequest;
      return;
    }

    // if no spine item specified we are talking about current spine item
    if (pageRequest.spineItem && pageRequest.spineItem != _currentSpineItem) {
      _deferredPageRequest = pageRequest;
      loadSpineItem(pageRequest.spineItem);
      return;
    }

    var pageIndex = undefined;


    if (pageRequest.spineItemPageIndex !== undefined) {
      pageIndex = pageRequest.spineItemPageIndex;
    } else if (pageRequest.elementId) {
      pageIndex = _navigationLogic.getPageForElementId(pageRequest.elementId);
    } else if (pageRequest.elementCfi) {
      try {
        pageIndex = _navigationLogic.getPageForElementCfi(pageRequest.elementCfi, ["cfi-marker", "mo-cfi-highlight"], [], ["MathJax_Message"]);
      } catch (e) {
        pageIndex = 0;
        console.error(e);
      }
    } else if (pageRequest.firstPage) {
      pageIndex = 0;
    } else if (pageRequest.lastPage) {
      pageIndex = _paginationInfo.columnCount - 1;
    } else {
      console.debug("No criteria in pageRequest");
      pageIndex = 0;
    }

    if (pageIndex >= 0 && pageIndex < _paginationInfo.columnCount) {
      _paginationInfo.currentSpreadIndex = Math.floor(pageIndex / _paginationInfo.visibleColumnCount);
      onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
    } else {
      console.log('Illegal pageIndex value: ', pageIndex, 'column count is ', _paginationInfo.columnCount);
    }
  };

  function redraw() {

    var offsetVal = -_paginationInfo.pageOffset + "px";

    if (_htmlBodyIsVerticalWritingMode) {
      _$epubHtml.css("top", offsetVal);
    } else {
      var ltr = _htmlBodyIsLTRDirection || _htmlBodyIsLTRWritingMode;

      _$epubHtml.css("left", ltr ? offsetVal : "");
      _$epubHtml.css("right", !ltr ? offsetVal : "");
    }

    showBook(); // as it's no longer hidden by shifting the position
  }

  function updateViewportSize() {

    var newWidth = _$contentFrame.width();
    var newHeight = _$contentFrame.height();

    if (_lastViewPortSize.width !== newWidth || _lastViewPortSize.height !== newHeight) {

      _lastViewPortSize.width = newWidth;
      _lastViewPortSize.height = newHeight;
      return true;
    }

    return false;
  }

  function onPaginationChanged(initiator, paginationRequest_spineItem, paginationRequest_elementId) {

    _paginationInfo.pageOffset = (_paginationInfo.columnWidth + _paginationInfo.columnGap) * _paginationInfo.visibleColumnCount * _paginationInfo.currentSpreadIndex;

    redraw();
    self.trigger(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED, {
      paginationInfo: self.getPaginationInfo(),
      initiator: initiator,
      spineItem: paginationRequest_spineItem,
      elementId: paginationRequest_elementId
    });
  }

  this.openPagePrev = function(initiator) {

    if (!_currentSpineItem) {
      return;
    }

    if (_paginationInfo.currentSpreadIndex > 0) {
      _paginationInfo.currentSpreadIndex--;
      onPaginationChanged(initiator);
    } else {

      var prevSpineItem = _spine.prevItem(_currentSpineItem, true);
      if (prevSpineItem) {

        var pageRequest = new PageOpenRequest(prevSpineItem, initiator);
        pageRequest.setLastPage();
        self.openPage(pageRequest);
      }
    }
  };

  this.openPageNext = function(initiator) {

    if (!_currentSpineItem) {
      return;
    }

    if (_paginationInfo.currentSpreadIndex < _paginationInfo.spreadCount - 1) {
      _paginationInfo.currentSpreadIndex++;
      onPaginationChanged(initiator);
    } else {

      var nextSpineItem = _spine.nextItem(_currentSpineItem, true);
      if (nextSpineItem) {

        var pageRequest = new PageOpenRequest(nextSpineItem, initiator);
        pageRequest.setFirstPage();
        self.openPage(pageRequest);
      }
    }
  };


  function updatePagination() {

    // At 100% font-size = 16px (on HTML, not body or descendant markup!)
    var MAXW = 550; //TODO user/vendor-configurable?
    var MINW = 400;

    var isDoublePageSyntheticSpread = deduceSyntheticSpread(_$viewport, _currentSpineItem, _viewSettings);

    var forced = (isDoublePageSyntheticSpread === false) || (isDoublePageSyntheticSpread === true);
    // excludes 0 and 1 falsy/truthy values which denote non-forced result

    // console.debug("isDoublePageSyntheticSpread: " + isDoublePageSyntheticSpread);
    // console.debug("forced: " + forced);
    //
    if (isDoublePageSyntheticSpread === 0) {
      isDoublePageSyntheticSpread = 1; // try double page, will shrink if doesn't fit
      // console.debug("TRYING SPREAD INSTEAD OF SINGLE...");
    }

    _paginationInfo.visibleColumnCount = isDoublePageSyntheticSpread ? 2 : 1;

    if (_htmlBodyIsVerticalWritingMode) {
      MAXW *= 2;
      isDoublePageSyntheticSpread = false;
      forced = true;
      _paginationInfo.visibleColumnCount = 1;
      // console.debug("Vertical Writing Mode => single CSS column, but behaves as if two-page spread");
    }

    if (!_$epubHtml) {
      return;
    }

    hideBook(); // shiftBookOfScreen();

    var borderLeft = parseInt(_$viewport.css("border-left-width"));
    var borderRight = parseInt(_$viewport.css("border-right-width"));
    var adjustedGapLeft = _paginationInfo.columnGap / 2;
    adjustedGapLeft = Math.max(0, adjustedGapLeft - borderLeft)
    var adjustedGapRight = _paginationInfo.columnGap / 2;
    adjustedGapRight = Math.max(0, adjustedGapRight - borderRight)

    var filler = 0;

    //         var win = _$iframe[0].contentDocument.defaultView || _$iframe[0].contentWindow;
    //         var htmlBodyComputedStyle = win.getComputedStyle(_$htmlBody[0], null);
    //         if (htmlBodyComputedStyle)
    //         {
    //             var fontSize = undefined;
    //             if (htmlBodyComputedStyle.getPropertyValue)
    //             {
    //                 fontSize = htmlBodyComputedStyle.getPropertyValue("font-size");
    //             }
    //             else
    //             {
    //                 fontSize = htmlBodyComputedStyle.fontSize;
    //             }
    // console.debug(fontSize);
    //         }

    if (_viewSettings.fontSize) {
      var fontSizeAdjust = (_viewSettings.fontSize * 0.8) / 100;
      MAXW = Math.floor(MAXW * fontSizeAdjust);
      MINW = Math.floor(MINW * fontSizeAdjust);
    }

    var availableWidth = _$viewport.width();
    var textWidth = availableWidth - borderLeft - borderRight - adjustedGapLeft - adjustedGapRight;
    if (isDoublePageSyntheticSpread) {
      textWidth = (textWidth - _paginationInfo.columnGap) * 0.5;
    }

    if (textWidth > MAXW) {
      // console.debug("LIMITING WIDTH");
      filler = Math.floor((textWidth - MAXW) * (isDoublePageSyntheticSpread ? 1 : 0.5));
    } else if (!forced && textWidth < MINW && isDoublePageSyntheticSpread) {
      //console.debug("REDUCING SPREAD TO SINGLE");
      isDoublePageSyntheticSpread = false;
      _paginationInfo.visibleColumnCount = 1;

      textWidth = availableWidth - borderLeft - borderRight - adjustedGapLeft - adjustedGapRight;
      if (textWidth > MAXW) {
        filler = Math.floor((textWidth - MAXW) * 0.5);
      }
    }

    _$el.css({
      "left": (filler + adjustedGapLeft + "px"),
      "right": (filler + adjustedGapRight + "px")
    });
    updateViewportSize(); //_$contentFrame ==> _lastViewPortSize


    _$iframe.css("width", _lastViewPortSize.width + "px");
    _$iframe.css("height", _lastViewPortSize.height + "px");

    _$epubHtml.css("height", _lastViewPortSize.height + "px");

    // below min- max- are required in vertical writing mode (height is not enough, in some cases...weird!)
    _$epubHtml.css("min-height", _lastViewPortSize.height + "px");
    _$epubHtml.css("max-height", _lastViewPortSize.height + "px");

    //normalise spacing to avoid interference with column-isation
    _$epubHtml.css('margin', 0);
    _$epubHtml.css('padding', 0);
    _$epubHtml.css('border', 0);
    _$htmlBody.css('margin', 0);
    _$htmlBody.css('padding', 0);

    var spacing = 0;
    try {
      spacing = parseInt(_$htmlBody.css('padding-top')) + parseInt(_$htmlBody.css('border-top-width')) + parseInt(_$htmlBody.css('border-bottom-width'));
    } catch (err) {

    }
    // Needed for Firefox, otherwise content shrinks vertically, resulting in scrollWidth accomodating more columns than necessary
    //_$htmlBody.css("min-height", _lastViewPortSize.height-spacing-9 + "px");
    _$htmlBody.css("min-height", "50%");
    _$htmlBody.css("max-height", _lastViewPortSize.height - spacing + "px");

    _paginationInfo.rightToLeft = _spine.isRightToLeft();

    _paginationInfo.columnWidth = Math.round(((_htmlBodyIsVerticalWritingMode ? _lastViewPortSize.height : _lastViewPortSize.width) - _paginationInfo.columnGap * (_paginationInfo.visibleColumnCount - 1)) / _paginationInfo.visibleColumnCount);

    _$epubHtml.css("width", (_htmlBodyIsVerticalWritingMode ? _lastViewPortSize.width : _paginationInfo.columnWidth) + "px");

    _$epubHtml.css("column-width", _paginationInfo.columnWidth + "px");

    _$epubHtml.css({
      left: "0",
      right: "0",
      top: "0"
    });

    triggerLayout(_$iframe);

    _paginationInfo.columnCount = ((_htmlBodyIsVerticalWritingMode ? _$epubHtml[0].scrollHeight : _$epubHtml[0].scrollWidth) + _paginationInfo.columnGap) / (_paginationInfo.columnWidth + _paginationInfo.columnGap);
    _paginationInfo.columnCount = Math.round(_paginationInfo.columnCount);

    var totalGaps = (_paginationInfo.columnCount - 1) * _paginationInfo.columnGap;
    var colWidthCheck = ((_htmlBodyIsVerticalWritingMode ? _$epubHtml[0].scrollHeight : _$epubHtml[0].scrollWidth) - totalGaps) / _paginationInfo.columnCount;
    colWidthCheck = Math.round(colWidthCheck);

    if (colWidthCheck > _paginationInfo.columnWidth) {
      console.debug("ADJUST COLUMN");
      console.log(_paginationInfo.columnWidth);
      console.log(colWidthCheck);

      _paginationInfo.columnWidth = colWidthCheck;
    }

    _paginationInfo.spreadCount = Math.ceil(_paginationInfo.columnCount / _paginationInfo.visibleColumnCount);

    if (_paginationInfo.currentSpreadIndex >= _paginationInfo.spreadCount) {
      _paginationInfo.currentSpreadIndex = _paginationInfo.spreadCount - 1;
    }

    if (_deferredPageRequest) {

      //if there is a request for specific page we get here
      openDeferredElement();
    } else {

      //we get here on resizing the viewport

      onPaginationChanged(self); // => redraw() => showBook(), so the trick below is not needed

      // //We do this to force re-rendering of the document in the iframe.
      // //There is a bug in WebView control with right to left columns layout - after resizing the window html document
      // //is shifted in side the containing div. Hiding and showing the html element puts document in place.
      // _$epubHtml.hide();
      // setTimeout(function() {
      //     _$epubHtml.show();
      //     onPaginationChanged(self); // => redraw() => showBook()
      // }, 50);

    }
  }

  //    function shiftBookOfScreen() {
  //
  //        if(_spine.isLeftToRight()) {
  //            _$epubHtml.css("left", (_lastViewPortSize.width + 1000) + "px");
  //        }
  //        else {
  //            _$epubHtml.css("right", (_lastViewPortSize.width + 1000) + "px");
  //        }
  //    }

  function hideBook() {
    if (_currentOpacity != -1) return; // already hidden

    _currentOpacity = _$epubHtml.css('opacity');
    _$epubHtml.css('opacity', "0");
  }

  function showBook() {
    if (_currentOpacity != -1) {
      _$epubHtml.css('opacity', _currentOpacity);
    }
    _currentOpacity = -1;
  }

  this.getFirstVisibleElementCfi = function() {

    var contentOffsets = getVisibleContentOffsets();
    return _navigationLogic.getFirstVisibleElementCfi(contentOffsets);
  };

  this.getPaginationInfo = function() {

    var paginationInfo = new CurrentPagesInfo(_spine, false);

    if (!_currentSpineItem) {
      return paginationInfo;
    }

    var pageIndexes = getOpenPageIndexes();

    for (var i = 0, count = pageIndexes.length; i < count; i++) {

      paginationInfo.addOpenPage(pageIndexes[i], _paginationInfo.columnCount, _currentSpineItem.idref, _currentSpineItem.index);
    }

    return paginationInfo;

  };

  function getOpenPageIndexes() {

    var indexes = [];

    var currentPage = _paginationInfo.currentSpreadIndex * _paginationInfo.visibleColumnCount;

    for (var i = 0; i < _paginationInfo.visibleColumnCount && (currentPage + i) < _paginationInfo.columnCount; i++) {

      indexes.push(currentPage + i);
    }

    return indexes;

  }

  //we need this styles for css columnizer not to chop big images
  function resizeImages() {

    if (!_$epubHtml) {
      return;
    }

    var $elem;
    var height;
    var width;

    $('img, svg', _$epubHtml).each(function() {

      $elem = $(this);

      // if we set max-width/max-height to 100% columnizing engine chops images embedded in the text
      // (but not if we set it to 99-98%) go figure.
      // TODO: CSS min-w/h is content-box, not border-box (does not take into account padding + border)? => images may still overrun?
      $elem.css('max-width', '98%');
      $elem.css('max-height', '98%');

      if (!$elem.css('height')) {
        $elem.css('height', 'auto');
      }

      if (!$elem.css('width')) {
        $elem.css('width', 'auto');
      }

    });
  }

  this.bookmarkCurrentPage = function() {

    if (!_currentSpineItem) {

      return new BookmarkData("", "");
    }

    return new BookmarkData(_currentSpineItem.idref, self.getFirstVisibleElementCfi());
  };

  function getVisibleContentOffsets() {
    //TODO: _htmlBodyIsVerticalWritingMode ? (_lastViewPortSize.height * _paginationInfo.currentSpreadIndex)
    // NOT used with options.rectangleBased anyway (see CfiNavigationLogic constructor call, here in this reflow engine class)
    var columnsLeftOfViewport = Math.round(_paginationInfo.pageOffset / (_paginationInfo.columnWidth + _paginationInfo.columnGap));

    var topOffset = columnsLeftOfViewport * _$contentFrame.height();
    var bottomOffset = topOffset + _paginationInfo.visibleColumnCount * _$contentFrame.height();

    return {
      top: topOffset,
      bottom: bottomOffset
    };
  }

  this.getLoadedSpineItems = function() {
    return [_currentSpineItem];
  };

  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return _navigationLogic.getElementByCfi(cfi, classBlacklist, elementBlacklist, idBlacklist);
  };

  this.getElementById = function(spineItem, id) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return _navigationLogic.getElementById(id);
  };

  this.getElement = function(spineItem, selector) {

    if (spineItem != _currentSpineItem) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return _navigationLogic.getElement(selector);
  };

  this.getFirstVisibleMediaOverlayElement = function() {

    var visibleContentOffsets = getVisibleContentOffsets();
    return _navigationLogic.getFirstVisibleMediaOverlayElement(visibleContentOffsets);
  };

  // /**
  //  * @deprecated
  //  */
  // this.getVisibleMediaOverlayElements = function() {
  // 
  //     var visibleContentOffsets = getVisibleContentOffsets();
  //     return _navigationLogic.getVisibleMediaOverlayElements(visibleContentOffsets);
  // };

  this.insureElementVisibility = function(spineItemId, element, initiator) {

    var $element = $(element);
    if (_navigationLogic.isElementVisible($element, getVisibleContentOffsets())) {
      return;
    }

    var page = _navigationLogic.getPageForElement($element);

    if (page == -1) {
      return;
    }

    var openPageRequest = new PageOpenRequest(_currentSpineItem, initiator);
    openPageRequest.setPageIndex(page);

    var id = element.id;
    if (!id) {
      id = element.getAttribute("id");
    }

    if (id) {
      openPageRequest.setElementId(id);
    }

    self.openPage(openPageRequest);
  }

}

module.exports = ReflowableView
},{"../events":"/Users/craverod/opensource/readium-js/src/sdk/events.js","../helpers/deduce-synthetic-spread":"/Users/craverod/opensource/readium-js/src/sdk/helpers/deduce-synthetic-spread.js","../helpers/load-template":"/Users/craverod/opensource/readium-js/src/sdk/helpers/load-template.js","../helpers/margins":"/Users/craverod/opensource/readium-js/src/sdk/helpers/margins.js","../helpers/set-styles":"/Users/craverod/opensource/readium-js/src/sdk/helpers/set-styles.js","../helpers/trigger-layout":"/Users/craverod/opensource/readium-js/src/sdk/helpers/trigger-layout.js","../helpers/update-html-font-size":"/Users/craverod/opensource/readium-js/src/sdk/helpers/update-html-font-size.js","../internal-events":"/Users/craverod/opensource/readium-js/src/sdk/internal-events.js","../models/bookmark-data":"/Users/craverod/opensource/readium-js/src/sdk/models/bookmark-data.js","../models/current-pages-info":"/Users/craverod/opensource/readium-js/src/sdk/models/current-pages-info.js","../models/page-open-request":"/Users/craverod/opensource/readium-js/src/sdk/models/page-open-request.js","../models/viewer-settings":"/Users/craverod/opensource/readium-js/src/sdk/models/viewer-settings.js","./cfi-navigation-logic":"/Users/craverod/opensource/readium-js/src/sdk/views/cfi-navigation-logic.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}],"/Users/craverod/opensource/readium-js/src/sdk/views/scroll-view.js":[function(require,module,exports){
//  Created by Boris Schneiderman.
// Modified by Daniel Weck
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

var _ = require('underscore')
var $ = require('jquery')
var Backbone = require('backbone')
var BookmarkData = require('../models/bookmark-data')
var CurrentPagesInfo = require('../models/current-pages-info')
var Events = require('../events')
var InternalEvents = require('../internal-events')
var isIFrameAlive = require('../helpers/is-iframe-alive')
var loadTemplate = require('../helpers/load-template')
var Margins = require('../helpers/margins')
var OnePageView = require('./one-page-view')
var PageOpenRequest = require('../models/page-open-request')
var setStyles = require('../helpers/set-styles')
var ViewerSettings = require('../models/viewer-settings')

/**
 * Renders content inside a scrollable view port
 * @param options
 * @param isContinuousScroll
 * @param reader
 * @constructor
 */
function ScrollView(options, isContinuousScroll, reader) {

  var _DEBUG = false;

  _.extend(this, Backbone.Events);

  var SCROLL_MARGIN_TO_SHOW_LAST_VISBLE_LINE = 5;
  var ITEM_LOAD_SCROLL_BUFFER = 2000;
  var ON_SCROLL_TIME_DALAY = 300;

  var self = this;

  var _$viewport = options.$viewport;
  var _spine = options.spine;
  var _userStyles = options.userStyles;
  var _deferredPageRequest;
  var _$contentFrame;
  var _$el;

  var _stopTransientViewUpdate = false;

  //this flags used to prevent onScroll event triggering pagination changed when internal layout modifications happens
  //if we trigger pagination change without reference to the original request that started the change - we brake the
  //Media Overlay bechaviyour
  //We can't reuse same flag for all of this action because this actions mey happen in parallel
  var _isPerformingLayoutModifications = false; //performing asynch  actions that may trigger onScroll;
  var _isSettingScrollPosition = false; //this happens when we set scroll position based on open element request
  var _isLoadingNewSpineItemOnPageRequest = false; //

  this.isContinuousScroll = function() {
    return isContinuousScroll;
  };

  this.render = function() {

    var template = loadTemplate("scrolled_book_frame", {});

    _$el = $(template);
    _$viewport.append(_$el);

    _$contentFrame = $("#scrolled-content-frame", _$el);
    _$contentFrame.css("overflow", "");
    _$contentFrame.css("overflow-y", "auto");
    _$contentFrame.css("overflow-x", "hidden");
    _$contentFrame.css("-webkit-overflow-scrolling", "touch");
    _$contentFrame.css("width", "100%");
    _$contentFrame.css("height", "100%");
    _$contentFrame.css("position", "relative");

    var settings = reader.viewerSettings();
    if (!settings || typeof settings.enableGPUHardwareAccelerationCSS3D === "undefined") {
      //defaults
      settings = new ViewerSettings({});
    }
    if (settings.enableGPUHardwareAccelerationCSS3D) {
      // This is a necessary counterpart for the same CSS GPU hardware acceleration trick in one_page_view.js
      // This affects the stacking order and re-enables the scrollbar in Safari (works fine in Chrome otherwise)
      _$contentFrame.css("transform", "translateZ(0)");
    }

    // _$contentFrame.css("box-sizing", "border-box");
    // _$contentFrame.css("border", "20px solid red");

    self.applyStyles();

    var lazyScroll = _.debounce(onScroll, ON_SCROLL_TIME_DALAY);

    _$contentFrame.on('scroll', function(e) {
      lazyScroll(e);
      onScrollDirect();
    });

    return self;
  };

  function updateLoadedViewsTop(callback, assertScrollPosition) {

    if (_stopTransientViewUpdate) {
      callback();
      return;
    }

    var viewPage = firstLoadedView();
    if (!viewPage) {
      callback();
      return;
    }

    var viewPortRange = getVisibleRange(0);
    var firstViewRange = getPageViewRange(viewPage);

    if ((viewPortRange.top - firstViewRange.bottom) > ITEM_LOAD_SCROLL_BUFFER) {
      var scrollPos = scrollTop();
      removePageView(viewPage);
      scrollTo(scrollPos - (firstViewRange.bottom - firstViewRange.top), undefined);
      assertScrollPosition("updateLoadedViewsTop 1");
      updateLoadedViewsTop(callback, assertScrollPosition); //recursion
    } else if ((viewPortRange.top - firstViewRange.top) < ITEM_LOAD_SCROLL_BUFFER) {
      addToTopOf(viewPage, function(isElementAdded) {
        if (isElementAdded) {
          assertScrollPosition("updateLoadedViewsTop 2");
          updateLoadedViewsTop(callback, assertScrollPosition); //recursion
        } else {
          callback();
        }
      });
    } else {
      callback();
    }

  }

  function updateLoadedViewsBottom(callback, assertScrollPosition) {

    if (_stopTransientViewUpdate) {
      callback();
      return;
    }

    var viewPage = lastLoadedView();
    if (!viewPage) {
      callback();
      return;
    }

    var viewPortRange = getVisibleRange(0);
    var lastViewRange = getPageViewRange(viewPage);

    if ((lastViewRange.top - viewPortRange.bottom) > ITEM_LOAD_SCROLL_BUFFER) {
      removePageView(viewPage);
      assertScrollPosition("updateLoadedViewsBottom 1");
      updateLoadedViewsBottom(callback, assertScrollPosition); //recursion
    } else if ((lastViewRange.bottom - viewPortRange.bottom) < ITEM_LOAD_SCROLL_BUFFER) {
      addToBottomOf(viewPage, function(newPageLoaded) {
        assertScrollPosition("updateLoadedViewsBottom 2");
        if (newPageLoaded) {
          updateLoadedViewsBottom(callback, assertScrollPosition); //recursion
        } else {
          callback();
        }
      });
    } else {
      callback();
    }

  }

  function updateTransientViews(pageView) {

    if (!isContinuousScroll) {
      return;
    }

    var scrollPosBefore = undefined;
    if (_DEBUG) {
      if (pageView) {
        var offset = pageView.offset();
        if (offset) scrollPosBefore = offset.top;
      }
    }

    // This function double-checks whether the browser has shifted the scroll position because of unforeseen rendering issues.
    // (this should never happen because we handle scroll adjustments during iframe height resizes explicitely in this code)
    var assertScrollPosition = function(msg) {
      if (_DEBUG) {
        if (!scrollPosBefore) return;
        var scrollPosAfter = undefined;

        var offset = pageView.offset();
        if (offset) scrollPosAfter = offset.top;

        if (!scrollPosAfter) return;

        var diff = scrollPosAfter - scrollPosBefore;
        if (Math.abs(diff) > 1) {
          console.debug("@@@@@@@@@@@@@@@ SCROLL ADJUST (" + msg + ") " + diff + " -- " + pageView.currentSpineItem().href);
          //_$contentFrame[0].scrollTop = _$contentFrame[0].scrollTop + diff;
        }
      }
    };

    _isPerformingLayoutModifications = true;
    updateLoadedViewsBottom(function() {
      updateLoadedViewsTop(function() {
        setTimeout(function() {
          _isPerformingLayoutModifications = false;
        }, ON_SCROLL_TIME_DALAY + 100);
      }, assertScrollPosition);
    }, assertScrollPosition);
  }

  var _mediaOverlaysWasPlayingLastTimeScrollStarted = false;

  function onScrollDirect(e) {
    var settings = reader.viewerSettings();
    if (!settings.mediaOverlaysPreservePlaybackWhenScroll) {
      if (!_mediaOverlaysWasPlayingLastTimeScrollStarted && reader.isMediaOverlayAvailable()) {
        _mediaOverlaysWasPlayingLastTimeScrollStarted = reader.isPlayingMediaOverlay();
        if (_mediaOverlaysWasPlayingLastTimeScrollStarted) {
          reader.pauseMediaOverlay();
        }
      }
    }
  }

  function onScroll(e) {
    if (!_isPerformingLayoutModifications && !_isSettingScrollPosition && !_isLoadingNewSpineItemOnPageRequest) {

      updateTransientViews();
      onPaginationChanged(self);

      var settings = reader.viewerSettings();
      if (!settings.mediaOverlaysPreservePlaybackWhenScroll) {
        if (_mediaOverlaysWasPlayingLastTimeScrollStarted) {
          setTimeout(function() {
            reader.playMediaOverlay();
            _mediaOverlaysWasPlayingLastTimeScrollStarted = false;
          }, 100);
        }
      }
    }
  }

  function scrollTo(offset, pageRequest) {

    _$contentFrame[0].scrollTop = offset;

    if (pageRequest) {
      onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
    }
  }

  function updatePageViewSizeAndAdjustScroll(pageView) {
    var scrollPos = scrollTop();
    var rangeBeforeResize = getPageViewRange(pageView);

    updatePageViewSize(pageView);

    var rangeAfterResize = getPageViewRange(pageView);

    var heightAfter = rangeAfterResize.bottom - rangeAfterResize.top;
    var heightBefore = rangeBeforeResize.bottom - rangeBeforeResize.top;

    var delta = heightAfter - heightBefore;

    if (Math.abs(delta) > 0) {
      if (_DEBUG) {
        console.debug("IMMEDIATE SCROLL ADJUST: " + pageView.currentSpineItem().href + " == " + delta);
      }
      scrollTo(scrollPos + delta);
    }
  }

  function reachStableContentHeight(updateScroll, pageView, iframe, href, fixedLayout, metaWidth, msg, callback) {
    if (!isIframeAlive(iframe)) {
      if (_DEBUG) {
        console.log("reachStableContentHeight ! win && doc (iFrame disposed?)");
      }

      if (callback) callback(false);
      return;
    }

    var MAX_ATTEMPTS = 10;
    var TIME_MS = 300;

    var w = iframe.contentWindow;
    var d = iframe.contentDocument;

    var previousPolledContentHeight = parseInt(Math.round(parseFloat(w.getComputedStyle(d.documentElement).height))); //body can be shorter!;

    var initialContentHeight = previousPolledContentHeight;

    if (updateScroll === 0) {
      updatePageViewSizeAndAdjustScroll(pageView);
    } else {
      updatePageViewSize(pageView);
    }

    var tryAgainFunc = function(tryAgain) {
      if (_DEBUG && tryAgain !== MAX_ATTEMPTS) {
        console.log("tryAgainFunc - " + tryAgain + ": " + href + "  <" + initialContentHeight + " -- " + previousPolledContentHeight + ">");
      }

      tryAgain--;
      if (tryAgain < 0) {
        if (_DEBUG) {
          console.error("tryAgainFunc abort: " + href);
        }

        if (callback) callback(true);
        return;
      }

      setTimeout(function() {
        try {
          if (isIframeAlive(iframe)) {
            var win = iframe.contentWindow;
            var doc = iframe.contentDocument;

            var iframeHeight = parseInt(Math.round(parseFloat(window.getComputedStyle(iframe).height)));

            var docHeight = parseInt(Math.round(parseFloat(win.getComputedStyle(doc.documentElement).height))); //body can be shorter!

            if (previousPolledContentHeight !== docHeight) {
              previousPolledContentHeight = docHeight;

              tryAgainFunc(tryAgain);
              return;
            }

            // CONTENT HEIGHT IS NOW STABILISED

            var diff = iframeHeight - docHeight;
            if (Math.abs(diff) > 4) {
              if (_DEBUG) {
                console.log("$$$ IFRAME HEIGHT ADJUST: " + href + "  [" + diff + "]<" + initialContentHeight + " -- " + previousPolledContentHeight + ">");
                console.log(msg);
              }

              if (updateScroll === 0) {
                updatePageViewSizeAndAdjustScroll(pageView);
              } else {
                updatePageViewSize(pageView);
              }

              if (isIframeAlive(iframe)) {
                var win = iframe.contentWindow;
                var doc = iframe.contentDocument;

                var docHeightAfter = parseInt(Math.round(parseFloat(win.getComputedStyle(doc.documentElement).height))); //body can be shorter!
                var iframeHeightAfter = parseInt(Math.round(parseFloat(window.getComputedStyle(iframe).height)));

                var newdiff = iframeHeightAfter - docHeightAfter;
                if (Math.abs(newdiff) > 4) {
                  if (_DEBUG) {
                    console.error("## IFRAME HEIGHT ADJUST: " + href + "  [" + newdiff + "]<" + initialContentHeight + " -- " + previousPolledContentHeight + ">");
                    console.log(msg);
                  }

                  tryAgainFunc(tryAgain);
                  return;
                } else {
                  if (_DEBUG) {
                    console.log(">> IFRAME HEIGHT ADJUSTED OKAY: " + href + "  [" + diff + "]<" + initialContentHeight + " -- " + previousPolledContentHeight + ">");
                    // console.log(msg);
                  }
                }
              } else {
                if (_DEBUG) {
                  console.log("tryAgainFunc ! win && doc (iFrame disposed?)");
                }

                if (callback) callback(false);
                return;
              }
            } else {
              //if (_DEBUG)
              // console.debug("IFRAME HEIGHT NO NEED ADJUST: " + href);
              // console.log(msg);
            }
          } else {
            if (_DEBUG) {
              console.log("tryAgainFunc ! win && doc (iFrame disposed?)");
            }

            if (callback) callback(false);
            return;
          }
        } catch (ex) {
          console.error(ex);

          if (callback) callback(false);
          return;
        }

        if (callback) callback(true);

      }, TIME_MS);
    };

    tryAgainFunc(MAX_ATTEMPTS);
  }


  function addToTopOf(topView, callback) {

    var prevSpineItem = _spine.prevItem(topView.currentSpineItem(), true);
    if (!prevSpineItem) {
      callback(false);
      return;
    }

    var tmpView = createPageViewForSpineItem(true);

    // add to the end first to avoid scrolling during load
    var lastView = lastLoadedView();
    tmpView.element().insertAfter(lastView.element());

    tmpView.loadSpineItem(prevSpineItem, function(success, $iframe, spineItem, isNewlyLoaded, context) {
      if (success) {

        updatePageViewSize(tmpView);
        var range = getPageViewRange(tmpView);

        removePageView(tmpView);


        var scrollPos = scrollTop();

        var newView = createPageViewForSpineItem();
        var originalHeight = range.bottom - range.top;


        newView.setHeight(originalHeight);
        // iframe is loaded hidden here
        //this.showIFrame();
        //===> not necessary here (temporary iframe)

        newView.element().insertBefore(topView.element());

        scrollPos = scrollPos + originalHeight;

        scrollTo(scrollPos, undefined);

        newView.loadSpineItem(prevSpineItem, function(success, $iframe, spineItem, isNewlyLoaded, context) {
          if (success) {

            var continueCallback = function(successFlag) {
              onPageViewLoaded(newView, success, $iframe, spineItem, isNewlyLoaded, context);

              callback(successFlag);
            };

            reachStableContentHeight(0, newView, $iframe[0], spineItem.href, spineItem.isFixedLayout(), spineItem.isFixedLayout() ? newView.meta_width() : 0, "addToTopOf", continueCallback); // //onIFrameLoad called before this callback, so okay.
          } else {
            console.error("Unable to open 2 " + prevSpineItem.href);
            removePageView(newView);
            callback(false);
          }

        });
      } else {
        console.error("Unable to open 1 " + prevSpineItem.href);
        removePageView(tmpView);
        callback(false);
      }

    });
  }

  function updatePageViewSize(pageView) {

    if (pageView.currentSpineItem().isFixedLayout()) {
      pageView.scaleToWidth(_$contentFrame.width());
    } else {
      pageView.resizeIFrameToContent();
    }
  }

  function addToBottomOf(bottomView, callback) {

    var nexSpineItem = _spine.nextItem(bottomView.currentSpineItem(), true);
    if (!nexSpineItem) {
      callback(false);
      return;
    }

    var scrollPos = scrollTop();

    var newView = createPageViewForSpineItem();
    newView.element().insertAfter(bottomView.element());

    newView.loadSpineItem(nexSpineItem, function(success, $iframe, spineItem, isNewlyLoaded, context) {
      if (success) {

        var continueCallback = function(successFlag) {
          onPageViewLoaded(newView, success, $iframe, spineItem, isNewlyLoaded, context);

          callback(successFlag);
        };

        reachStableContentHeight(2, newView, $iframe[0], spineItem.href, spineItem.isFixedLayout(), spineItem.isFixedLayout() ? newView.meta_width() : 0, "addToBottomOf", continueCallback); // //onIFrameLoad called before this callback, so okay.
      } else {
        console.error("Unable to load " + nexSpineItem.href);
        callback(false);
      }

    });
  }

  function removeLoadedItems() {

    var loadedPageViews = [];

    forEachItemView(function(pageView) {
      loadedPageViews.push(pageView);
    }, false);

    for (var i = 0, count = loadedPageViews.length; i < count; i++) {
      removePageView(loadedPageViews[i]);
    }
  }

  function removePageView(pageView) {

    pageView.element().remove();

  }


  function setFrameSizesToRectangle(rectangle) {

    _$contentFrame.css("left", rectangle.left);
    _$contentFrame.css("top", rectangle.top);
    _$contentFrame.css("right", rectangle.right);
    _$contentFrame.css("bottom", rectangle.bottom);

  }

  this.remove = function() {
    _$el.remove();
  };

  this.onViewportResize = function() {

    if (!_$contentFrame) {
      return;
    }

    forEachItemView(function(pageView) {

      updatePageViewSize(pageView);
    }, false);

    onPaginationChanged(self);

    updateTransientViews();
  };

  var _viewSettings = undefined;
  this.setViewSettings = function(settings) {

    _viewSettings = settings;

    forEachItemView(function(pageView) {

      pageView.setViewSettings(settings);

    }, false);
  };

  function createPageViewForSpineItem(isTemporaryView) {

    options.disablePageTransitions = true; // force

    var pageView = new OnePageView(
      options, ["content-doc-frame"],
      true, //enableBookStyleOverrides
      reader);

    pageView.render();
    if (_viewSettings) pageView.setViewSettings(_viewSettings);

    if (!isTemporaryView) {
      pageView.element().data("pageView", pageView);
    }


    if (isContinuousScroll) {
      pageView.decorateIframe();
    }

    return pageView;
  }

  function findPageViewForSpineItem(spineItem, reverse) {

    var retView = undefined;

    forEachItemView(function(pageView) {
      if (pageView.currentSpineItem() == spineItem) {
        retView = pageView;
        //brake the iteration
        return false;
      } else {
        return true;
      }

    }, reverse);

    return retView;
  }

  function forEachItemView(func, reverse) {

    var pageNodes = _$contentFrame.children();

    var count = pageNodes.length;
    var iter = reverse ? function(ix) {
      return ix - 1
    } : function(ix) {
      return ix + 1
    };

    var compare = reverse ? function(ix) {
      return ix >= 0
    } : function(ix) {
      return ix < count
    };

    var start = reverse ? count - 1 : 0;

    for (var i = start; compare(i); i = iter(i)) {

      var $element = pageNodes.eq(i);
      var curView = $element.data("pageView");

      if (curView) {

        if (func(curView) === false) {
          return;
        }
      }
    }
  }

  function firstLoadedView() {

    var firstView = undefined;

    forEachItemView(function(pageView) {

      firstView = pageView;
      return false;

    }, false);

    return firstView;
  }

  function lastLoadedView() {

    var lastView = undefined;

    forEachItemView(function(pageView) {
      lastView = pageView;
      return false;

    }, true);

    return lastView;
  }

  function onPageViewLoaded(pageView, success, $iframe, spineItem, isNewlyLoaded, context) {

    if (success && isNewlyLoaded) {
      self.trigger(Events.CONTENT_DOCUMENT_LOADED, $iframe, spineItem);
    }

  }

  function loadSpineItem(spineItem, callback) {

    removeLoadedItems();

    var scrollPos = scrollTop();

    var loadedView = createPageViewForSpineItem();

    _$contentFrame.append(loadedView.element());

    loadedView.loadSpineItem(spineItem, function(success, $iframe, spineItem, isNewlyLoaded, context) {

      if (success) {

        var continueCallback = function(successFlag) {
          onPageViewLoaded(loadedView, success, $iframe, spineItem, isNewlyLoaded, context);

          callback(loadedView);

          //successFlag should always be true as loadedView iFrame cannot be dead at this stage.
        };

        reachStableContentHeight(1, loadedView, $iframe[0], spineItem.href, spineItem.isFixedLayout(), spineItem.isFixedLayout() ? loadedView.meta_width() : 0, "openPage", continueCallback); // //onIFrameLoad called before this callback, so okay.
      } else {
        console.error("Unable to load " + spineItem.href);

        removePageView(loadedView);
        loadedView = undefined;
      }

      callback(loadedView);

    });

  }

  this.applyStyles = function() {

    setStyles(_userStyles.getStyles(), _$el.parent());

    //because left, top, bottom, right setting ignores padding of parent container
    //we have to take it to account manually
    var elementMargins = Margins.fromElement(_$el);

    setFrameSizesToRectangle(elementMargins.padding);

  };

  this.applyBookStyles = function() {

    forEachItemView(function(pageView) {
      pageView.applyBookStyles();
    }, false);
  };


  this.openPage = function(pageRequest) {

    _stopTransientViewUpdate = true;

    //local helper function
    var doneLoadingSpineItem = function(pageView, pageRequest) {

      _deferredPageRequest = undefined;
      openPageViewElement(pageView, pageRequest);
      _stopTransientViewUpdate = false;
      updateTransientViews(pageView);
    };

    if (pageRequest.spineItem) {

      var pageView = findPageViewForSpineItem(pageRequest.spineItem);
      if (pageView) {
        doneLoadingSpineItem(pageView, pageRequest);
      } else {
        _deferredPageRequest = pageRequest;
        _isLoadingNewSpineItemOnPageRequest = true;

        loadSpineItem(pageRequest.spineItem, function(pageView) {

          setTimeout(function() {
            _isLoadingNewSpineItemOnPageRequest = false;
          }, ON_SCROLL_TIME_DALAY + 100);

          if (pageView && _deferredPageRequest) {
            if (pageView.currentSpineItem() === _deferredPageRequest.spineItem) {
              doneLoadingSpineItem(pageView, _deferredPageRequest);
            } else { //while we where waiting for load new request come
              self.openPage(_deferredPageRequest); //recursion
            }
          } else {
            onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
          }

        });
      }
    } else {
      doneLoadingSpineItem(undefined, pageRequest);
    }
  };

  function openPageViewElement(pageView, pageRequest) {

    var topOffset = 0;
    var pageCount;
    var $element;
    var sfiNav;
    var pageRange;

    if (pageRequest.scrollTop !== undefined) {

      topOffset = pageRequest.scrollTop;
    } else if (pageRequest.spineItemPageIndex !== undefined) {

      var pageIndex;
      pageCount = calculatePageCount();
      if (pageRequest.spineItemPageIndex < 0) {
        pageIndex = 0;
      } else if (pageRequest.spineItemPageIndex >= pageCount) {
        pageIndex = pageCount - 1;
      } else {
        pageIndex = pageRequest.spineItemPageIndex;
      }

      topOffset = pageIndex * viewHeight();
    } else if (pageView && pageRequest.elementId) {

      pageRange = getPageViewRange(pageView);
      sfiNav = pageView.getNavigator();
      $element = sfiNav.getElementById(pageRequest.elementId);

      if (!$element || !$element.length) {
        console.warn("Element id=" + pageRequest.elementId + " not found!");
        return;
      }

      if (isElementVisibleOnScreen(pageView, $element, 60)) {
        //TODO refactoring required
        // this is artificial call because MO player waits for this event to continue playing.
        onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
        return;
      }

      topOffset = sfiNav.getVerticalOffsetForElement($element) + pageRange.top;

    } else if (pageView && pageRequest.elementCfi) {

      pageRange = getPageViewRange(pageView);
      sfiNav = pageView.getNavigator();
      $element = sfiNav.getElementByCfi(pageRequest.elementCfi);

      if (!$element || !$element.length) {
        console.warn("Element cfi=" + pageRequest.elementCfi + " not found!");
        return;
      }

      if (isElementVisibleOnScreen(pageView, $element, 60)) {
        //TODO refactoring required
        // this is artificial call because MO player waits for this event to continue playing.
        onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
        return;
      }

      topOffset = sfiNav.getVerticalOffsetForElement($element) + pageRange.top;

    } else if (pageRequest.firstPage) {

      topOffset = 0;
    } else if (pageRequest.lastPage) {
      pageCount = calculatePageCount();

      if (pageCount === 0) {
        return;
      }

      topOffset = scrollHeight() - viewHeight() - 5;
    } else if (pageView) {

      pageRange = getPageViewRange(pageView);
      topOffset = pageRange.top;
    } else {
      topOffset = 0;
    }

    if (scrollTop() != topOffset) {

      _isSettingScrollPosition = true;
      scrollTo(topOffset, pageRequest);

      setTimeout(function() {
        _isSettingScrollPosition = false;
      }, ON_SCROLL_TIME_DALAY + 100); //we have to wait more than scroll delay to make sure that we don't react on onScroll

    } else {
      onPaginationChanged(pageRequest.initiator, pageRequest.spineItem, pageRequest.elementId);
    }
  }

  function calculatePageCount() {

    return Math.ceil(scrollHeight() / viewHeight());
  }

  function onPaginationChanged(initiator, paginationRequest_spineItem, paginationRequest_elementId) {
    self.trigger(InternalEvents.CURRENT_VIEW_PAGINATION_CHANGED, {
      paginationInfo: self.getPaginationInfo(),
      initiator: initiator,
      spineItem: paginationRequest_spineItem,
      elementId: paginationRequest_elementId
    });
  }

  function scrollTop() {
    return _$contentFrame[0].scrollTop;
  }

  function scrollBottom() {
    return scrollHeight() - (scrollTop() + viewHeight());
  }

  function viewHeight() {
    return _$contentFrame.height();
  }

  function scrollHeight() {
    return _$contentFrame[0].scrollHeight;
  }

  this.openPageNext = function(initiator) {

    var pageRequest;

    if (scrollBottom() > 0) {

      pageRequest = new PageOpenRequest(undefined, initiator);
      pageRequest.scrollTop = scrollTop() + Math.min(scrollBottom(), viewHeight() - SCROLL_MARGIN_TO_SHOW_LAST_VISBLE_LINE);
      openPageViewElement(undefined, pageRequest);
    }

  };

  this.openPagePrev = function(initiator) {

    var pageRequest;

    if (scrollTop() > 0) {

      pageRequest = new PageOpenRequest(undefined, initiator);
      pageRequest.scrollTop = scrollTop() - (viewHeight() - SCROLL_MARGIN_TO_SHOW_LAST_VISBLE_LINE);
      if (pageRequest.scrollTop < 0) {
        pageRequest.scrollTop = 0;
      }

      openPageViewElement(undefined, pageRequest);
    }
  };

  function getVisiblePageViews() {

    var views = [];

    var range = getVisibleRange(-SCROLL_MARGIN_TO_SHOW_LAST_VISBLE_LINE);

    forEachItemView(function(pageView) {

      if (isPageViewVisibleInRange(pageView, range)) {

        views.push(pageView);
      } else if (views.length > 0) {

        return false;
      }

      return true;

    }, false);

    return views;

  }


  function getFirstVisiblePageView() {

    var visibleViews = getVisiblePageViews();

    return visibleViews[0];
  }

  function isPageViewVisibleInRange(pageView, range) {
    var pageViewRange = getPageViewRange(pageView);
    return rangeLength(intersectRanges(pageViewRange, range)) > 0;
  }

  function getPageViewRange(pageView) {
    var range = {
      top: 0,
      bottom: 0
    };

    range.top = pageView.element().position().top + scrollTop();
    range.bottom = range.top + pageView.getCalculatedPageHeight();

    return range;
  }

  this.getFirstVisibleElementCfi = function() {
    var visibleViewPage = getFirstVisiblePageView();
    if (visibleViewPage) {
      return visibleViewPage.getNavigator().getFirstVisibleElementCfi(scrollTop());
    }

    return undefined;
  };

  this.getPaginationInfo = function() {
    var spineItem;
    var pageCount;
    var pageView;
    var pageViewRange;
    var heightAboveViewport;
    var heightBelowViewport;
    var pageCountAbove;
    var pageCountBelow;

    var viewPortRange = getVisibleRange();
    var viewPortHeight = viewPortRange.bottom - viewPortRange.top;

    var paginationInfo = new CurrentPagesInfo(_spine, false);

    var visibleViews = getVisiblePageViews();

    for (var i = 0, count = visibleViews.length; i < count; i++) {

      pageView = visibleViews[i];
      spineItem = pageView.currentSpineItem();
      pageViewRange = getPageViewRange(pageView);

      heightAboveViewport = Math.max(viewPortRange.top - pageViewRange.top, 0);
      heightBelowViewport = Math.max(pageViewRange.bottom - viewPortRange.bottom, 0);

      pageCountAbove = Math.ceil(heightAboveViewport / viewPortHeight);
      pageCountBelow = Math.ceil(heightBelowViewport / viewPortHeight);
      pageCount = pageCountAbove + pageCountBelow + 1;

      paginationInfo.addOpenPage(pageCountAbove, pageCount, spineItem.idref, spineItem.index);
    }

    return paginationInfo;
  };

  this.bookmarkCurrentPage = function() {
    var pageView = getFirstVisiblePageView();

    if (!pageView) {

      return new BookmarkData("", "");
    }

    return new BookmarkData(pageView.currentSpineItem().idref, self.getFirstVisibleElementCfi());
  };


  this.getLoadedSpineItems = function() {
    var spineItems = [];

    forEachItemView(function(pageView) {
      spineItems.push(pageView.currentSpineItem());
    }, false);

    return spineItems;
  };

  this.getElement = function(spineItem, selector) {
    var element = undefined;

    forEachItemView(function(pageView) {
      if (pageView.currentSpineItem() == spineItem) {

        element = pageView.getNavigator().getElement(selector);

        return false;
      }

      return true;

    }, false);

    return element;
  };

  this.getElementByCfi = function(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist) {

    var found = undefined;

    forEachItemView(function(pageView) {
      if (pageView.currentSpineItem() == spineItem) {

        found = pageView.getElementByCfi(spineItem, cfi, classBlacklist, elementBlacklist, idBlacklist);
        return false;
      }

      return true;

    }, false);

    if (!found) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return found;
  };

  this.getElementById = function(spineItem, id) {

    var found = undefined;

    forEachItemView(function(pageView) {
      if (pageView.currentSpineItem() == spineItem) {

        found = pageView.getNavigator().getElementById(id);
        return false;
      }

      return true;

    }, false);

    if (!found) {
      console.error("spine item is not loaded");
      return undefined;
    }

    return found;
  };

  this.getFirstVisibleMediaOverlayElement = function() {
    var viewPortRange = getVisibleRange();

    var moElement = undefined;
    var normalizedRange = {
      top: 0,
      bottom: 0
    };
    var pageViewRange;

    var steppedToVisiblePage = false;

    forEachItemView(function(pageView) {
      pageViewRange = getPageViewRange(pageView);

      normalizedRange.top = Math.max(pageViewRange.top, viewPortRange.top) - pageViewRange.top;
      normalizedRange.bottom = Math.min(pageViewRange.bottom, viewPortRange.bottom) - pageViewRange.top;

      if (rangeLength(normalizedRange) > 0) {
        steppedToVisiblePage = true;

        moElement = pageView.getNavigator().getFirstVisibleMediaOverlayElement(normalizedRange);
        if (moElement) {
          return false;
        }
      } else if (steppedToVisiblePage) {
        return false;
      }

      return true; //continue iteration

    }, false);

    return moElement;
  };

  // /**
  //  * @deprecated
  //  */
  // this.getVisibleMediaOverlayElements = function() {
  //     var viewPortRange = getVisibleRange();
  // 
  //     var pageMoElements;
  //     var moElements = [];
  //     var normalizedRange = {top: 0, bottom: 0};
  //     var pageViewRange;
  // 
  //     forEachItemView(function(pageView){
  //         pageViewRange = getPageViewRange(pageView);
  // 
  //         normalizedRange.top = Math.max(pageViewRange.top, viewPortRange.top) - pageViewRange.top;
  //         normalizedRange.bottom = Math.min(pageViewRange.bottom, viewPortRange.bottom) - pageViewRange.top;
  // 
  //         if(rangeLength(normalizedRange) > 0) {
  //             pageMoElements = pageView.getNavigator().getVisibleMediaOverlayElements(normalizedRange);
  //             moElements.push.apply(moElements, pageMoElements);
  //         }
  //     }, false);
  // 
  //     return moElements;
  // };

  function getVisibleRange(expand) {
    if (expand !== 0 && !expand) {
      expand = 0;
    }

    var range = {

      top: scrollTop() - expand,
      bottom: scrollTop() + viewHeight() + expand
    };

    if (range.top < 0) {
      range.top = 0;
    }

    if (range.bottom > scrollHeight()) {
      range.bottom = scrollHeight();
    }

    return range;

  }

  function intersectRanges(r1, r2) {
    return {

      top: Math.max(r1.top, r2.top),
      bottom: Math.min(r1.bottom, r2.bottom)
    };
  }

  function rangeLength(range) {
    if (range.bottom < range.top) {
      return 0;
    }

    return range.bottom - range.top;
  }

  function isElementVisibleOnScreen(pageView, $element, percentVisible) {

    var elementRange = getElementRange(pageView, $element);

    return isRangeIsVisibleOnScreen(elementRange, percentVisible);
  }

  function isRangeIsVisibleOnScreen(range, percentVisible) {

    var visibleRange = getVisibleRange();

    var smallestVisibleLength = Math.min(rangeLength(visibleRange), rangeLength(range));
    if (smallestVisibleLength === 0) {
      smallestVisibleLength = 5; // if element is 0 height we will set it to arbitrary 5 pixels - not to divide by 0
    }

    var intersectionRange = intersectRanges(visibleRange, range);

    var visiblePercent = (rangeLength(intersectionRange) / smallestVisibleLength) * 100;

    return visiblePercent >= percentVisible;
  }

  function getElementRange(pageView, $element) {

    var pageRange = getPageViewRange(pageView);

    var elementRange = {
      top: 0,
      bottom: 0
    };
    elementRange.top = $element.offset().top + pageRange.top;
    elementRange.bottom = elementRange.top + $element.height();

    return elementRange;
  }

  this.insureElementVisibility = function(spineItemId, element, initiator) {
    var pageView = undefined;

    forEachItemView(function(pv) {
      if (pv.currentSpineItem().idref === spineItemId) {

        pageView = pv;
        return false;
      }

      return true;
    }, false);

    if (!pageView) {
      console.warn("Page for element " + element + " not found");
      return;
    }

    var $element = $(element);

    var elementRange = getElementRange(pageView, $element);

    if (!isRangeIsVisibleOnScreen(elementRange, 60)) {

      var spineItem = _spine.getItemById(spineItemId);
      var openPageRequest = new PageOpenRequest(spineItem, initiator);
      openPageRequest.scrollTop = elementRange.top;

      self.openPage(openPageRequest);
    }

  }
}

module.exports = ScrollView
},{"../events":"/Users/craverod/opensource/readium-js/src/sdk/events.js","../helpers/is-iframe-alive":"/Users/craverod/opensource/readium-js/src/sdk/helpers/is-iframe-alive.js","../helpers/load-template":"/Users/craverod/opensource/readium-js/src/sdk/helpers/load-template.js","../helpers/margins":"/Users/craverod/opensource/readium-js/src/sdk/helpers/margins.js","../helpers/set-styles":"/Users/craverod/opensource/readium-js/src/sdk/helpers/set-styles.js","../internal-events":"/Users/craverod/opensource/readium-js/src/sdk/internal-events.js","../models/bookmark-data":"/Users/craverod/opensource/readium-js/src/sdk/models/bookmark-data.js","../models/current-pages-info":"/Users/craverod/opensource/readium-js/src/sdk/models/current-pages-info.js","../models/page-open-request":"/Users/craverod/opensource/readium-js/src/sdk/models/page-open-request.js","../models/viewer-settings":"/Users/craverod/opensource/readium-js/src/sdk/models/viewer-settings.js","./one-page-view":"/Users/craverod/opensource/readium-js/src/sdk/views/one-page-view.js","backbone":"/Users/craverod/opensource/readium-js/node_modules/backbone/backbone.js","jquery":"/Users/craverod/opensource/readium-js/node_modules/jquery/dist/jquery.js","underscore":"/Users/craverod/opensource/readium-js/node_modules/underscore/underscore.js"}]},{},["/Users/craverod/opensource/readium-js/src/app.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy93YXRjaGlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwibGliL2VwdWJqcy9wYXJzZXIuanMiLCJsaWIvanF1ZXJ5LXNpemVzLmpzIiwibm9kZV9tb2R1bGVzL0JhY2tib25lL2JhY2tib25lLmpzIiwibm9kZV9tb2R1bGVzL1VSSWpzL3NyYy9JUHY2LmpzIiwibm9kZV9tb2R1bGVzL1VSSWpzL3NyYy9TZWNvbmRMZXZlbERvbWFpbnMuanMiLCJub2RlX21vZHVsZXMvVVJJanMvc3JjL1VSSS5qcyIsIm5vZGVfbW9kdWxlcy9VUklqcy9zcmMvcHVueWNvZGUuanMiLCJub2RlX21vZHVsZXMvYmFja2JvbmUvYmFja2JvbmUuanMiLCJub2RlX21vZHVsZXMvZXB1Yi1jZmkvcGFyc2VyL2VwdWItY2ZpLmpzIiwibm9kZV9tb2R1bGVzL2VwdWItY2ZpL3NyYy9lcnJvcnMvY2ZpLWFzc2VydGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9lcHViLWNmaS9zcmMvZXJyb3JzL25vZGUtdHlwZS5qcyIsIm5vZGVfbW9kdWxlcy9lcHViLWNmaS9zcmMvZXJyb3JzL291dC1vZi1yYW5nZS5qcyIsIm5vZGVfbW9kdWxlcy9lcHViLWNmaS9zcmMvZXJyb3JzL3Rlcm1pbnVzLmpzIiwibm9kZV9tb2R1bGVzL2VwdWItY2ZpL3NyYy9nZW5lcmF0b3IuanMiLCJub2RlX21vZHVsZXMvZXB1Yi1jZmkvc3JjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VwdWItY2ZpL3NyYy9pbnN0cnVjdGlvbnMuanMiLCJub2RlX21vZHVsZXMvZXB1Yi1jZmkvc3JjL2ludGVycHJldGVyLmpzIiwibm9kZV9tb2R1bGVzL2VwdWItY2ZpL3NyYy9wYXJzZXIuanMiLCJub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwibm9kZV9tb2R1bGVzL3Jhbmd5L2xpYi9yYW5neS1jb3JlLmpzIiwibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvdW5kZXJzY29yZS5qcyIsIm5vZGVfbW9kdWxlcy93YXRjaGlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwicGFja2FnZS5qc29uIiwic3JjL2FwcC5qcyIsInNyYy9lcHViLWFubm90YXRpb25zL2Fubm90YXRpb25zLmpzIiwic3JjL2VwdWItYW5ub3RhdGlvbnMvYm9va21hcmstdmlldy5qcyIsInNyYy9lcHViLWFubm90YXRpb25zL2Jvb2ttYXJrLmpzIiwic3JjL2VwdWItYW5ub3RhdGlvbnMvaGlnaGxpZ2h0LWdyb3VwLmpzIiwic3JjL2VwdWItYW5ub3RhdGlvbnMvaGlnaGxpZ2h0LXZpZXcuanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy9oaWdobGlnaHQuanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy9pbWFnZS1hbm5vdGF0aW9uLmpzIiwic3JjL2VwdWItYW5ub3RhdGlvbnMvaW5kZXguanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy9yZWZsb3dhYmxlLWFubm90YXRpb25zLmpzIiwic3JjL2VwdWItYW5ub3RhdGlvbnMvdGV4dC1saW5lLWluZmVycmVyLmpzIiwic3JjL2VwdWItYW5ub3RhdGlvbnMvdW5kZXJsaW5lLWdyb3VwLmpzIiwic3JjL2VwdWItYW5ub3RhdGlvbnMvdW5kZXJsaW5lLXZpZXcuanMiLCJzcmMvZXB1Yi1hbm5vdGF0aW9ucy91bmRlcmxpbmUuanMiLCJzcmMvZXB1Yi1mZXRjaC9jb250ZW50LWRvY3VtZW50LWZldGNoZXIuanMiLCJzcmMvZXB1Yi1mZXRjaC9kaXNjb3Zlci1jb250ZW50LXR5cGUuanMiLCJzcmMvZXB1Yi1mZXRjaC9lbmNyeXB0aW9uLWhhbmRsZXIuanMiLCJzcmMvZXB1Yi1mZXRjaC9tYXJrdXAtcGFyc2VyLmpzIiwic3JjL2VwdWItZmV0Y2gvcGxhaW4tcmVzb3VyY2UtZmV0Y2hlci5qcyIsInNyYy9lcHViLWZldGNoL3B1YmxpY2F0aW9uLWZldGNoZXIuanMiLCJzcmMvZXB1Yi1mZXRjaC9yZXNvdXJjZS1jYWNoZS5qcyIsInNyYy9lcHViLWZldGNoL3ppcC1yZXNvdXJjZS1mZXRjaGVyLmpzIiwic3JjL2VwdWIvbWFuaWZlc3QuanMiLCJzcmMvZXB1Yi9tZXRhZGF0YS5qcyIsInNyYy9lcHViL3BhY2thZ2UtZG9jdW1lbnQtcGFyc2VyLmpzIiwic3JjL2VwdWIvcGFja2FnZS1kb2N1bWVudC5qcyIsInNyYy9lcHViL3NtaWwtZG9jdW1lbnQtcGFyc2VyLmpzIiwic3JjL2luZGV4LmpzIiwic3JjL3JlYWRlci5qcyIsInNyYy9zZGsvY29sbGVjdGlvbnMvc3R5bGUuanMiLCJzcmMvc2RrL2V2ZW50cy5qcyIsInNyYy9zZGsvaGVscGVycy9iZWdpbnMtd2l0aC5qcyIsInNyYy9zZGsvaGVscGVycy9jc3MtdHJhbnNmb3JtLXN0cmluZy5qcyIsInNyYy9zZGsvaGVscGVycy9jc3MtdHJhbnNpdGlvbi5qcyIsInNyYy9zZGsvaGVscGVycy9kZWR1Y2Utc3ludGhldGljLXNwcmVhZC5qcyIsInNyYy9zZGsvaGVscGVycy9lbmRzLXdpdGguanMiLCJzcmMvc2RrL2hlbHBlcnMvZXNjYXBlLWpxdWVyeS1zZWxlY3Rvci5qcyIsInNyYy9zZGsvaGVscGVycy9leHRlbmRlZC10aHJvdHRsZS5qcyIsInNyYy9zZGsvaGVscGVycy9nZXQtb3JpZW50YXRpb24uanMiLCJzcmMvc2RrL2hlbHBlcnMvaW5kZXguanMiLCJzcmMvc2RrL2hlbHBlcnMvaXMtaWZyYW1lLWFsaXZlLmpzIiwic3JjL3Nkay9oZWxwZXJzL2lzLXJlbmRpdGlvbi1zcHJlYWQtcGVybWl0dGVkLWZvci1pdGVtLmpzIiwic3JjL3Nkay9oZWxwZXJzL2xvYWQtdGVtcGxhdGUuanMiLCJzcmMvc2RrL2hlbHBlcnMvbWFyZ2lucy5qcyIsInNyYy9zZGsvaGVscGVycy9yZWN0LmpzIiwic3JjL3Nkay9oZWxwZXJzL3JlbW92ZS1mcm9tLXN0cmluZy5qcyIsInNyYy9zZGsvaGVscGVycy9yZXNvbHZlLWNvbnRlbnQtcmVmLmpzIiwic3JjL3Nkay9oZWxwZXJzL3NldC1zdHlsZXMuanMiLCJzcmMvc2RrL2hlbHBlcnMvdHJpZ2dlci1sYXlvdXQuanMiLCJzcmMvc2RrL2hlbHBlcnMvdXBkYXRlLWh0bWwtZm9udC1zaXplLmpzIiwic3JjL3Nkay9pbmRleC5qcyIsInNyYy9zZGsvaW50ZXJuYWwtZXZlbnRzLmpzIiwic3JjL3Nkay9tb2RlbHMvYm9va21hcmstZGF0YS5qcyIsInNyYy9zZGsvbW9kZWxzL2N1cnJlbnQtcGFnZXMtaW5mby5qcyIsInNyYy9zZGsvbW9kZWxzL21lZGlhLW92ZXJsYXkuanMiLCJzcmMvc2RrL21vZGVscy9wYWNrYWdlLmpzIiwic3JjL3Nkay9tb2RlbHMvcGFnZS1vcGVuLXJlcXVlc3QuanMiLCJzcmMvc2RrL21vZGVscy9zbWlsLWl0ZXJhdG9yLmpzIiwic3JjL3Nkay9tb2RlbHMvc21pbC1tb2RlbC9hdWRpby1ub2RlLmpzIiwic3JjL3Nkay9tb2RlbHMvc21pbC1tb2RlbC9pbmRleC5qcyIsInNyYy9zZGsvbW9kZWxzL3NtaWwtbW9kZWwvbWVkaWEtbm9kZS5qcyIsInNyYy9zZGsvbW9kZWxzL3NtaWwtbW9kZWwvcGFyLW5vZGUuanMiLCJzcmMvc2RrL21vZGVscy9zbWlsLW1vZGVsL3NlcS1ub2RlLmpzIiwic3JjL3Nkay9tb2RlbHMvc21pbC1tb2RlbC9zbWlsLW5vZGUuanMiLCJzcmMvc2RrL21vZGVscy9zbWlsLW1vZGVsL3RleHQtbm9kZS5qcyIsInNyYy9zZGsvbW9kZWxzL3NtaWwtbW9kZWwvdGltZS1jb250YWluZXItbm9kZS5qcyIsInNyYy9zZGsvbW9kZWxzL3NwaW5lLWl0ZW0tY29uc3RhbnRzLmpzIiwic3JjL3Nkay9tb2RlbHMvc3BpbmUtaXRlbS5qcyIsInNyYy9zZGsvbW9kZWxzL3NwaW5lLmpzIiwic3JjL3Nkay9tb2RlbHMvc3ByZWFkLmpzIiwic3JjL3Nkay9tb2RlbHMvc3R5bGUuanMiLCJzcmMvc2RrL21vZGVscy9zd2l0Y2hlcy5qcyIsInNyYy9zZGsvbW9kZWxzL3RyaWdnZXIuanMiLCJzcmMvc2RrL21vZGVscy92aWV3ZXItc2V0dGluZ3MuanMiLCJzcmMvc2RrL25hdmlnYXRvci1zaGltLmpzIiwic3JjL3Nkay92aWV3cy9hbm5vdGF0aW9ucy1tYW5hZ2VyLmpzIiwic3JjL3Nkay92aWV3cy9hdWRpby1wbGF5ZXIuanMiLCJzcmMvc2RrL3ZpZXdzL2NmaS1uYXZpZ2F0aW9uLWxvZ2ljLmpzIiwic3JjL3Nkay92aWV3cy9jb25zdGFudHMuanMiLCJzcmMvc2RrL3ZpZXdzL2ZpeGVkLXZpZXcuanMiLCJzcmMvc2RrL3ZpZXdzL2lmcmFtZS1sb2FkZXIuanMiLCJzcmMvc2RrL3ZpZXdzL2luZGV4LmpzIiwic3JjL3Nkay92aWV3cy9pbnRlcm5hbC1saW5rcy1zdXBwb3J0LmpzIiwic3JjL3Nkay92aWV3cy9tZWRpYS1vdmVybGF5LWRhdGEtaW5qZWN0b3IuanMiLCJzcmMvc2RrL3ZpZXdzL21lZGlhLW92ZXJsYXktZWxlbWVudC1oaWdobGlnaHRlci5qcyIsInNyYy9zZGsvdmlld3MvbWVkaWEtb3ZlcmxheS1wbGF5ZXIuanMiLCJzcmMvc2RrL3ZpZXdzL29uZS1wYWdlLXZpZXcuanMiLCJzcmMvc2RrL3ZpZXdzL3JlYWRlci12aWV3LmpzIiwic3JjL3Nkay92aWV3cy9yZWZsb3dhYmxlLXZpZXcuanMiLCJzcmMvc2RrL3ZpZXdzL3Njcm9sbC12aWV3LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeGtEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2w5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzVmQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2o2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5VkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1VUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOVdBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3IvUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcnJIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoZ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1VUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BQQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25IQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25IQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2VEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNW1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuMkJBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOU5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOWRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzljQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2oxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMTRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3Y5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxMkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgUGFyc2VyID0gZnVuY3Rpb24oYmFzZVVybCl7XG4gIHRoaXMuYmFzZVVybCA9IGJhc2VVcmwgfHwgJyc7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm5hdiA9IGZ1bmN0aW9uKG5hdkh0bWwsIHNwaW5lSW5kZXhCeVVSTCwgYm9va1NwaW5lKXtcbiAgdmFyIG5hdkVsID0gbmF2SHRtbC5xdWVyeVNlbGVjdG9yKCduYXZbKnx0eXBlPVwidG9jXCJdJyksIC8vLS0gWyp8dHlwZT1cInRvY1wiXSAqIERvZXNuJ3Qgc2VlbSB0byB3b3JrXG4gIGlkQ291bnRlciA9IDA7XG5cbiAgaWYoIW5hdkVsKSByZXR1cm4gW107XG5cbiAgLy8gSW1wbGVtZW50cyBgPiBvbCA+IGxpYFxuICBmdW5jdGlvbiBmaW5kTGlzdEl0ZW1zKHBhcmVudCl7XG4gICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwYXJlbnQuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbihub2RlKXtcbiAgICAgIGlmKCdvbCcgPT0gbm9kZS50YWdOYW1lKXtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgIGlmKCdsaScgPT0gaXRlbS50YWdOYW1lKXtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpdGVtcztcblxuICB9XG5cbiAgLy8gSW1wbGVtZW50cyBgPiBhLCA+IHNwYW5gXG4gIGZ1bmN0aW9uIGZpbmRBbmNob3JPclNwYW4ocGFyZW50KXtcbiAgICB2YXIgaXRlbSA9IG51bGw7XG5cbiAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwYXJlbnQuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbihub2RlKXtcbiAgICAgIGlmKCdhJyA9PSBub2RlLnRhZ05hbWUgfHwgJ3NwYW4nID09IG5vZGUudGFnTmFtZSl7XG4gICAgICAgIGl0ZW0gPSBub2RlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUT0MocGFyZW50KXtcbiAgICB2YXIgbGlzdCA9IFtdLFxuICAgIG5vZGVzID0gZmluZExpc3RJdGVtcyhwYXJlbnQpLFxuICAgIGl0ZW1zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZXMpLFxuICAgIGxlbmd0aCA9IGl0ZW1zLmxlbmd0aCxcbiAgICBub2RlO1xuXG4gICAgaWYobGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgdmFyIGlkID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgZmFsc2UsXG4gICAgICBjb250ZW50ID0gZmluZEFuY2hvck9yU3BhbihpdGVtKSxcbiAgICAgIGhyZWYgPSBjb250ZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpIHx8ICcnLFxuICAgICAgdGV4dCA9IGNvbnRlbnQudGV4dENvbnRlbnQgfHwgXCJcIixcbiAgICAgIHNwbGl0ID0gaHJlZi5zcGxpdChcIiNcIiksXG4gICAgICBiYXNlVXJsID0gc3BsaXRbMF0sXG4gICAgICBzdWJpdGVtcyA9IGdldFRPQyhpdGVtKSxcbiAgICAgIHNwaW5lUG9zID0gc3BpbmVJbmRleEJ5VVJMW2Jhc2VVcmxdLFxuICAgICAgc3BpbmVJdGVtID0gYm9va1NwaW5lW3NwaW5lUG9zXSxcbiAgICAgIGNmaSA9ICAgc3BpbmVJdGVtID8gc3BpbmVJdGVtLmNmaSA6ICcnO1xuXG4gICAgICBpZighaWQpIHtcbiAgICAgICAgaWYoc3BpbmVQb3MpIHtcbiAgICAgICAgICBzcGluZUl0ZW0gPSBib29rU3BpbmVbc3BpbmVQb3NdO1xuICAgICAgICAgIGlkID0gc3BpbmVJdGVtLmlkO1xuICAgICAgICAgIGNmaSA9IHNwaW5lSXRlbS5jZmk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWQgPSAnZXB1YmpzLWF1dG9nZW4tdG9jLWlkLScgKyAoaWRDb3VudGVyKyspO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdpZCcsIGlkKTsgLy8gRW5zdXJlIGFsbCBlbGVtZW50cyBoYXZlIGFuIGlkXG4gICAgICBsaXN0LnB1c2goe1xuICAgICAgICBcImlkXCI6IGlkLFxuICAgICAgICBcImhyZWZcIjogaHJlZixcbiAgICAgICAgXCJsYWJlbFwiOiB0ZXh0LFxuICAgICAgICBcInN1Yml0ZW1zXCIgOiBzdWJpdGVtcyxcbiAgICAgICAgXCJwYXJlbnRcIiA6IHBhcmVudCA/IHBhcmVudC5nZXRBdHRyaWJ1dGUoJ2lkJykgOiBudWxsLFxuICAgICAgICBcImNmaVwiIDogY2ZpXG4gICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICByZXR1cm4gZ2V0VE9DKG5hdkVsKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuIiwiLy8gaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2JyYW1zdGVpbi9qc2l6ZXMvbWFzdGVyL2xpYi9qcXVlcnkuc2l6ZXMuanNcblxuLyoqXG4gKiBAcHJlc2VydmUgSlNpemVzIC0gSlF1ZXJ5IHBsdWdpbiB2MC4zM1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSByZXZpc2VkIEJTRCBMaWNlbnNlLlxuICogQ29weXJpZ2h0IDIwMDgtMjAxMCBCcmFtIFN0ZWluXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG5cbnZhciBudW0gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKSB8fCAwO1xuICB9O1xuXG4vKipcbiAgKiBTZXRzIG9yIGdldHMgdGhlIHZhbHVlcyBmb3IgbWluLXdpZHRoLCBtaW4taGVpZ2h0LCBtYXgtd2lkdGhcbiAgKiBhbmQgbWF4LWhlaWdodC5cbiAgKi9cbiQuZWFjaChbJ21pbicsICdtYXgnXSwgZnVuY3Rpb24gKGksIG5hbWUpIHtcbiAgJC5mbltuYW1lICsgJ1NpemUnXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciB3aWR0aCwgaGVpZ2h0O1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jc3MobmFtZSArICctd2lkdGgnLCB2YWx1ZS53aWR0aCk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUuaGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jc3MobmFtZSArICctaGVpZ2h0JywgdmFsdWUuaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2lkdGggPSB0aGlzLmNzcyhuYW1lICsgJy13aWR0aCcpO1xuICAgICAgaGVpZ2h0ID0gdGhpcy5jc3MobmFtZSArICctaGVpZ2h0Jyk7XG4gICAgICAvLyBBcHBhcmVudGx5OlxuICAgICAgLy8gICogT3BlcmEgcmV0dXJucyAtMXB4IGluc3RlYWQgb2Ygbm9uZVxuICAgICAgLy8gICogSUU2IHJldHVybnMgdW5kZWZpbmVkIGluc3RlYWQgb2Ygbm9uZVxuICAgICAgcmV0dXJuIHsnd2lkdGgnOiAobmFtZSA9PT0gJ21heCcgJiYgKHdpZHRoID09PSB1bmRlZmluZWQgfHwgd2lkdGggPT09ICdub25lJyB8fCBudW0od2lkdGgpID09PSAtMSkgJiYgTnVtYmVyLk1BWF9WQUxVRSkgfHwgbnVtKHdpZHRoKSwgXG4gICAgICAgICAgJ2hlaWdodCc6IChuYW1lID09PSAnbWF4JyAmJiAoaGVpZ2h0ID09PSB1bmRlZmluZWQgfHwgaGVpZ2h0ID09PSAnbm9uZScgfHwgbnVtKGhlaWdodCkgPT09IC0xKSAmJiBOdW1iZXIuTUFYX1ZBTFVFKSB8fCBudW0oaGVpZ2h0KX07XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cbi8qKlxuICAqIFJldHVybnMgd2hldGhlciBvciBub3QgYW4gZWxlbWVudCBpcyB2aXNpYmxlLlxuICAqL1xuJC5mbi5pc1Zpc2libGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmlzKCc6dmlzaWJsZScpO1xufTtcblxuLyoqXG4gICogU2V0cyBvciBnZXRzIHRoZSB2YWx1ZXMgZm9yIGJvcmRlciwgbWFyZ2luIGFuZCBwYWRkaW5nLlxuICAqL1xuJC5lYWNoKFsnYm9yZGVyJywgJ21hcmdpbicsICdwYWRkaW5nJ10sIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG4gICQuZm5bbmFtZV0gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZS50b3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmNzcyhuYW1lICsgJy10b3AnICsgKG5hbWUgPT09ICdib3JkZXInID8gJy13aWR0aCcgOiAnJyksIHZhbHVlLnRvcCk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUuYm90dG9tICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jc3MobmFtZSArICctYm90dG9tJyArIChuYW1lID09PSAnYm9yZGVyJyA/ICctd2lkdGgnIDogJycpLCB2YWx1ZS5ib3R0b20pO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLmxlZnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmNzcyhuYW1lICsgJy1sZWZ0JyArIChuYW1lID09PSAnYm9yZGVyJyA/ICctd2lkdGgnIDogJycpLCB2YWx1ZS5sZWZ0KTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZS5yaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuY3NzKG5hbWUgKyAnLXJpZ2h0JyArIChuYW1lID09PSAnYm9yZGVyJyA/ICctd2lkdGgnIDogJycpLCB2YWx1ZS5yaWdodCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7dG9wOiBudW0odGhpcy5jc3MobmFtZSArICctdG9wJyArIChuYW1lID09PSAnYm9yZGVyJyA/ICctd2lkdGgnIDogJycpKSksXG4gICAgICAgICAgYm90dG9tOiBudW0odGhpcy5jc3MobmFtZSArICctYm90dG9tJyArIChuYW1lID09PSAnYm9yZGVyJyA/ICctd2lkdGgnIDogJycpKSksXG4gICAgICAgICAgbGVmdDogbnVtKHRoaXMuY3NzKG5hbWUgKyAnLWxlZnQnICsgKG5hbWUgPT09ICdib3JkZXInID8gJy13aWR0aCcgOiAnJykpKSxcbiAgICAgICAgICByaWdodDogbnVtKHRoaXMuY3NzKG5hbWUgKyAnLXJpZ2h0JyArIChuYW1lID09PSAnYm9yZGVyJyA/ICctd2lkdGgnIDogJycpKSl9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuIiwiLy8gICAgIEJhY2tib25lLmpzIDEuMS4yXG5cbi8vICAgICAoYykgMjAxMC0yMDE0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4vLyAgICAgQmFja2JvbmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyAgICAgRm9yIGFsbCBkZXRhaWxzIGFuZCBkb2N1bWVudGF0aW9uOlxuLy8gICAgIGh0dHA6Ly9iYWNrYm9uZWpzLm9yZ1xuXG4oZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuXG4gIC8vIFNldCB1cCBCYWNrYm9uZSBhcHByb3ByaWF0ZWx5IGZvciB0aGUgZW52aXJvbm1lbnQuIFN0YXJ0IHdpdGggQU1ELlxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsndW5kZXJzY29yZScsICdqcXVlcnknLCAnZXhwb3J0cyddLCBmdW5jdGlvbihfLCAkLCBleHBvcnRzKSB7XG4gICAgICAvLyBFeHBvcnQgZ2xvYmFsIGV2ZW4gaW4gQU1EIGNhc2UgaW4gY2FzZSB0aGlzIHNjcmlwdCBpcyBsb2FkZWQgd2l0aFxuICAgICAgLy8gb3RoZXJzIHRoYXQgbWF5IHN0aWxsIGV4cGVjdCBhIGdsb2JhbCBCYWNrYm9uZS5cbiAgICAgIHJvb3QuQmFja2JvbmUgPSBmYWN0b3J5KHJvb3QsIGV4cG9ydHMsIF8sICQpO1xuICAgIH0pO1xuXG4gIC8vIE5leHQgZm9yIE5vZGUuanMgb3IgQ29tbW9uSlMuIGpRdWVyeSBtYXkgbm90IGJlIG5lZWRlZCBhcyBhIG1vZHVsZS5cbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbiAgICBmYWN0b3J5KHJvb3QsIGV4cG9ydHMsIF8pO1xuXG4gIC8vIEZpbmFsbHksIGFzIGEgYnJvd3NlciBnbG9iYWwuXG4gIH0gZWxzZSB7XG4gICAgcm9vdC5CYWNrYm9uZSA9IGZhY3Rvcnkocm9vdCwge30sIHJvb3QuXywgKHJvb3QualF1ZXJ5IHx8IHJvb3QuWmVwdG8gfHwgcm9vdC5lbmRlciB8fCByb290LiQpKTtcbiAgfVxuXG59KHRoaXMsIGZ1bmN0aW9uKHJvb3QsIEJhY2tib25lLCBfLCAkKSB7XG5cbiAgLy8gSW5pdGlhbCBTZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tXG5cbiAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBCYWNrYm9uZWAgdmFyaWFibGUsIHNvIHRoYXQgaXQgY2FuIGJlXG4gIC8vIHJlc3RvcmVkIGxhdGVyIG9uLCBpZiBgbm9Db25mbGljdGAgaXMgdXNlZC5cbiAgdmFyIHByZXZpb3VzQmFja2JvbmUgPSByb290LkJhY2tib25lO1xuXG4gIC8vIENyZWF0ZSBsb2NhbCByZWZlcmVuY2VzIHRvIGFycmF5IG1ldGhvZHMgd2UnbGwgd2FudCB0byB1c2UgbGF0ZXIuXG4gIHZhciBhcnJheSA9IFtdO1xuICB2YXIgcHVzaCA9IGFycmF5LnB1c2g7XG4gIHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuICB2YXIgc3BsaWNlID0gYXJyYXkuc3BsaWNlO1xuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgbGlicmFyeS4gS2VlcCBpbiBzeW5jIHdpdGggYHBhY2thZ2UuanNvbmAuXG4gIEJhY2tib25lLlZFUlNJT04gPSAnMS4xLjInO1xuXG4gIC8vIEZvciBCYWNrYm9uZSdzIHB1cnBvc2VzLCBqUXVlcnksIFplcHRvLCBFbmRlciwgb3IgTXkgTGlicmFyeSAoa2lkZGluZykgb3duc1xuICAvLyB0aGUgYCRgIHZhcmlhYmxlLlxuICBCYWNrYm9uZS4kID0gJDtcblxuICAvLyBSdW5zIEJhY2tib25lLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBCYWNrYm9uZWAgdmFyaWFibGVcbiAgLy8gdG8gaXRzIHByZXZpb3VzIG93bmVyLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoaXMgQmFja2JvbmUgb2JqZWN0LlxuICBCYWNrYm9uZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcm9vdC5CYWNrYm9uZSA9IHByZXZpb3VzQmFja2JvbmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gVHVybiBvbiBgZW11bGF0ZUhUVFBgIHRvIHN1cHBvcnQgbGVnYWN5IEhUVFAgc2VydmVycy4gU2V0dGluZyB0aGlzIG9wdGlvblxuICAvLyB3aWxsIGZha2UgYFwiUEFUQ0hcImAsIGBcIlBVVFwiYCBhbmQgYFwiREVMRVRFXCJgIHJlcXVlc3RzIHZpYSB0aGUgYF9tZXRob2RgIHBhcmFtZXRlciBhbmRcbiAgLy8gc2V0IGEgYFgtSHR0cC1NZXRob2QtT3ZlcnJpZGVgIGhlYWRlci5cbiAgQmFja2JvbmUuZW11bGF0ZUhUVFAgPSBmYWxzZTtcblxuICAvLyBUdXJuIG9uIGBlbXVsYXRlSlNPTmAgdG8gc3VwcG9ydCBsZWdhY3kgc2VydmVycyB0aGF0IGNhbid0IGRlYWwgd2l0aCBkaXJlY3RcbiAgLy8gYGFwcGxpY2F0aW9uL2pzb25gIHJlcXVlc3RzIC4uLiB3aWxsIGVuY29kZSB0aGUgYm9keSBhc1xuICAvLyBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYCBpbnN0ZWFkIGFuZCB3aWxsIHNlbmQgdGhlIG1vZGVsIGluIGFcbiAgLy8gZm9ybSBwYXJhbSBuYW1lZCBgbW9kZWxgLlxuICBCYWNrYm9uZS5lbXVsYXRlSlNPTiA9IGZhbHNlO1xuXG4gIC8vIEJhY2tib25lLkV2ZW50c1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBBIG1vZHVsZSB0aGF0IGNhbiBiZSBtaXhlZCBpbiB0byAqYW55IG9iamVjdCogaW4gb3JkZXIgdG8gcHJvdmlkZSBpdCB3aXRoXG4gIC8vIGN1c3RvbSBldmVudHMuIFlvdSBtYXkgYmluZCB3aXRoIGBvbmAgb3IgcmVtb3ZlIHdpdGggYG9mZmAgY2FsbGJhY2tcbiAgLy8gZnVuY3Rpb25zIHRvIGFuIGV2ZW50OyBgdHJpZ2dlcmAtaW5nIGFuIGV2ZW50IGZpcmVzIGFsbCBjYWxsYmFja3MgaW5cbiAgLy8gc3VjY2Vzc2lvbi5cbiAgLy9cbiAgLy8gICAgIHZhciBvYmplY3QgPSB7fTtcbiAgLy8gICAgIF8uZXh0ZW5kKG9iamVjdCwgQmFja2JvbmUuRXZlbnRzKTtcbiAgLy8gICAgIG9iamVjdC5vbignZXhwYW5kJywgZnVuY3Rpb24oKXsgYWxlcnQoJ2V4cGFuZGVkJyk7IH0pO1xuICAvLyAgICAgb2JqZWN0LnRyaWdnZXIoJ2V4cGFuZCcpO1xuICAvL1xuICB2YXIgRXZlbnRzID0gQmFja2JvbmUuRXZlbnRzID0ge1xuXG4gICAgLy8gQmluZCBhbiBldmVudCB0byBhIGBjYWxsYmFja2AgZnVuY3Rpb24uIFBhc3NpbmcgYFwiYWxsXCJgIHdpbGwgYmluZFxuICAgIC8vIHRoZSBjYWxsYmFjayB0byBhbGwgZXZlbnRzIGZpcmVkLlxuICAgIG9uOiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgaWYgKCFldmVudHNBcGkodGhpcywgJ29uJywgbmFtZSwgW2NhbGxiYWNrLCBjb250ZXh0XSkgfHwgIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgICAgIHRoaXMuX2V2ZW50cyB8fCAodGhpcy5fZXZlbnRzID0ge30pO1xuICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tuYW1lXSB8fCAodGhpcy5fZXZlbnRzW25hbWVdID0gW10pO1xuICAgICAgZXZlbnRzLnB1c2goe2NhbGxiYWNrOiBjYWxsYmFjaywgY29udGV4dDogY29udGV4dCwgY3R4OiBjb250ZXh0IHx8IHRoaXN9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBCaW5kIGFuIGV2ZW50IHRvIG9ubHkgYmUgdHJpZ2dlcmVkIGEgc2luZ2xlIHRpbWUuIEFmdGVyIHRoZSBmaXJzdCB0aW1lXG4gICAgLy8gdGhlIGNhbGxiYWNrIGlzIGludm9rZWQsIGl0IHdpbGwgYmUgcmVtb3ZlZC5cbiAgICBvbmNlOiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgaWYgKCFldmVudHNBcGkodGhpcywgJ29uY2UnLCBuYW1lLCBbY2FsbGJhY2ssIGNvbnRleHRdKSB8fCAhY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIG9uY2UgPSBfLm9uY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYub2ZmKG5hbWUsIG9uY2UpO1xuICAgICAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgICBvbmNlLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgcmV0dXJuIHRoaXMub24obmFtZSwgb25jZSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIC8vIFJlbW92ZSBvbmUgb3IgbWFueSBjYWxsYmFja3MuIElmIGBjb250ZXh0YCBpcyBudWxsLCByZW1vdmVzIGFsbFxuICAgIC8vIGNhbGxiYWNrcyB3aXRoIHRoYXQgZnVuY3Rpb24uIElmIGBjYWxsYmFja2AgaXMgbnVsbCwgcmVtb3ZlcyBhbGxcbiAgICAvLyBjYWxsYmFja3MgZm9yIHRoZSBldmVudC4gSWYgYG5hbWVgIGlzIG51bGwsIHJlbW92ZXMgYWxsIGJvdW5kXG4gICAgLy8gY2FsbGJhY2tzIGZvciBhbGwgZXZlbnRzLlxuICAgIG9mZjogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgIHZhciByZXRhaW4sIGV2LCBldmVudHMsIG5hbWVzLCBpLCBsLCBqLCBrO1xuICAgICAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIWV2ZW50c0FwaSh0aGlzLCAnb2ZmJywgbmFtZSwgW2NhbGxiYWNrLCBjb250ZXh0XSkpIHJldHVybiB0aGlzO1xuICAgICAgaWYgKCFuYW1lICYmICFjYWxsYmFjayAmJiAhY29udGV4dCkge1xuICAgICAgICB0aGlzLl9ldmVudHMgPSB2b2lkIDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgbmFtZXMgPSBuYW1lID8gW25hbWVdIDogXy5rZXlzKHRoaXMuX2V2ZW50cyk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gbmFtZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgICAgaWYgKGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tuYW1lXSkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50c1tuYW1lXSA9IHJldGFpbiA9IFtdO1xuICAgICAgICAgIGlmIChjYWxsYmFjayB8fCBjb250ZXh0KSB7XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBrID0gZXZlbnRzLmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgICBldiA9IGV2ZW50c1tqXTtcbiAgICAgICAgICAgICAgaWYgKChjYWxsYmFjayAmJiBjYWxsYmFjayAhPT0gZXYuY2FsbGJhY2sgJiYgY2FsbGJhY2sgIT09IGV2LmNhbGxiYWNrLl9jYWxsYmFjaykgfHxcbiAgICAgICAgICAgICAgICAgIChjb250ZXh0ICYmIGNvbnRleHQgIT09IGV2LmNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0YWluLnB1c2goZXYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcmV0YWluLmxlbmd0aCkgZGVsZXRlIHRoaXMuX2V2ZW50c1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gVHJpZ2dlciBvbmUgb3IgbWFueSBldmVudHMsIGZpcmluZyBhbGwgYm91bmQgY2FsbGJhY2tzLiBDYWxsYmFja3MgYXJlXG4gICAgLy8gcGFzc2VkIHRoZSBzYW1lIGFyZ3VtZW50cyBhcyBgdHJpZ2dlcmAgaXMsIGFwYXJ0IGZyb20gdGhlIGV2ZW50IG5hbWVcbiAgICAvLyAodW5sZXNzIHlvdSdyZSBsaXN0ZW5pbmcgb24gYFwiYWxsXCJgLCB3aGljaCB3aWxsIGNhdXNlIHlvdXIgY2FsbGJhY2sgdG9cbiAgICAvLyByZWNlaXZlIHRoZSB0cnVlIG5hbWUgb2YgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBhcmd1bWVudCkuXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24obmFtZSkge1xuICAgICAgaWYgKCF0aGlzLl9ldmVudHMpIHJldHVybiB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAndHJpZ2dlcicsIG5hbWUsIGFyZ3MpKSByZXR1cm4gdGhpcztcbiAgICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNbbmFtZV07XG4gICAgICB2YXIgYWxsRXZlbnRzID0gdGhpcy5fZXZlbnRzLmFsbDtcbiAgICAgIGlmIChldmVudHMpIHRyaWdnZXJFdmVudHMoZXZlbnRzLCBhcmdzKTtcbiAgICAgIGlmIChhbGxFdmVudHMpIHRyaWdnZXJFdmVudHMoYWxsRXZlbnRzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFRlbGwgdGhpcyBvYmplY3QgdG8gc3RvcCBsaXN0ZW5pbmcgdG8gZWl0aGVyIHNwZWNpZmljIGV2ZW50cyAuLi4gb3JcbiAgICAvLyB0byBldmVyeSBvYmplY3QgaXQncyBjdXJyZW50bHkgbGlzdGVuaW5nIHRvLlxuICAgIHN0b3BMaXN0ZW5pbmc6IGZ1bmN0aW9uKG9iaiwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBsaXN0ZW5pbmdUbyA9IHRoaXMuX2xpc3RlbmluZ1RvO1xuICAgICAgaWYgKCFsaXN0ZW5pbmdUbykgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgcmVtb3ZlID0gIW5hbWUgJiYgIWNhbGxiYWNrO1xuICAgICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIGNhbGxiYWNrID0gdGhpcztcbiAgICAgIGlmIChvYmopIChsaXN0ZW5pbmdUbyA9IHt9KVtvYmouX2xpc3RlbklkXSA9IG9iajtcbiAgICAgIGZvciAodmFyIGlkIGluIGxpc3RlbmluZ1RvKSB7XG4gICAgICAgIG9iaiA9IGxpc3RlbmluZ1RvW2lkXTtcbiAgICAgICAgb2JqLm9mZihuYW1lLCBjYWxsYmFjaywgdGhpcyk7XG4gICAgICAgIGlmIChyZW1vdmUgfHwgXy5pc0VtcHR5KG9iai5fZXZlbnRzKSkgZGVsZXRlIHRoaXMuX2xpc3RlbmluZ1RvW2lkXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICB9O1xuXG4gIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHNwbGl0IGV2ZW50IHN0cmluZ3MuXG4gIHZhciBldmVudFNwbGl0dGVyID0gL1xccysvO1xuXG4gIC8vIEltcGxlbWVudCBmYW5jeSBmZWF0dXJlcyBvZiB0aGUgRXZlbnRzIEFQSSBzdWNoIGFzIG11bHRpcGxlIGV2ZW50XG4gIC8vIG5hbWVzIGBcImNoYW5nZSBibHVyXCJgIGFuZCBqUXVlcnktc3R5bGUgZXZlbnQgbWFwcyBge2NoYW5nZTogYWN0aW9ufWBcbiAgLy8gaW4gdGVybXMgb2YgdGhlIGV4aXN0aW5nIEFQSS5cbiAgdmFyIGV2ZW50c0FwaSA9IGZ1bmN0aW9uKG9iaiwgYWN0aW9uLCBuYW1lLCByZXN0KSB7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gdHJ1ZTtcblxuICAgIC8vIEhhbmRsZSBldmVudCBtYXBzLlxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7XG4gICAgICAgIG9ialthY3Rpb25dLmFwcGx5KG9iaiwgW2tleSwgbmFtZVtrZXldXS5jb25jYXQocmVzdCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBzcGFjZSBzZXBhcmF0ZWQgZXZlbnQgbmFtZXMuXG4gICAgaWYgKGV2ZW50U3BsaXR0ZXIudGVzdChuYW1lKSkge1xuICAgICAgdmFyIG5hbWVzID0gbmFtZS5zcGxpdChldmVudFNwbGl0dGVyKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbmFtZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG9ialthY3Rpb25dLmFwcGx5KG9iaiwgW25hbWVzW2ldXS5jb25jYXQocmVzdCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIEEgZGlmZmljdWx0LXRvLWJlbGlldmUsIGJ1dCBvcHRpbWl6ZWQgaW50ZXJuYWwgZGlzcGF0Y2ggZnVuY3Rpb24gZm9yXG4gIC8vIHRyaWdnZXJpbmcgZXZlbnRzLiBUcmllcyB0byBrZWVwIHRoZSB1c3VhbCBjYXNlcyBzcGVlZHkgKG1vc3QgaW50ZXJuYWxcbiAgLy8gQmFja2JvbmUgZXZlbnRzIGhhdmUgMyBhcmd1bWVudHMpLlxuICB2YXIgdHJpZ2dlckV2ZW50cyA9IGZ1bmN0aW9uKGV2ZW50cywgYXJncykge1xuICAgIHZhciBldiwgaSA9IC0xLCBsID0gZXZlbnRzLmxlbmd0aCwgYTEgPSBhcmdzWzBdLCBhMiA9IGFyZ3NbMV0sIGEzID0gYXJnc1syXTtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHdoaWxlICgrK2kgPCBsKSAoZXYgPSBldmVudHNbaV0pLmNhbGxiYWNrLmNhbGwoZXYuY3R4KTsgcmV0dXJuO1xuICAgICAgY2FzZSAxOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEpOyByZXR1cm47XG4gICAgICBjYXNlIDI6IHdoaWxlICgrK2kgPCBsKSAoZXYgPSBldmVudHNbaV0pLmNhbGxiYWNrLmNhbGwoZXYuY3R4LCBhMSwgYTIpOyByZXR1cm47XG4gICAgICBjYXNlIDM6IHdoaWxlICgrK2kgPCBsKSAoZXYgPSBldmVudHNbaV0pLmNhbGxiYWNrLmNhbGwoZXYuY3R4LCBhMSwgYTIsIGEzKTsgcmV0dXJuO1xuICAgICAgZGVmYXVsdDogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suYXBwbHkoZXYuY3R4LCBhcmdzKTsgcmV0dXJuO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuTWV0aG9kcyA9IHtsaXN0ZW5UbzogJ29uJywgbGlzdGVuVG9PbmNlOiAnb25jZSd9O1xuXG4gIC8vIEludmVyc2lvbi1vZi1jb250cm9sIHZlcnNpb25zIG9mIGBvbmAgYW5kIGBvbmNlYC4gVGVsbCAqdGhpcyogb2JqZWN0IHRvXG4gIC8vIGxpc3RlbiB0byBhbiBldmVudCBpbiBhbm90aGVyIG9iamVjdCAuLi4ga2VlcGluZyB0cmFjayBvZiB3aGF0IGl0J3NcbiAgLy8gbGlzdGVuaW5nIHRvLlxuICBfLmVhY2gobGlzdGVuTWV0aG9kcywgZnVuY3Rpb24oaW1wbGVtZW50YXRpb24sIG1ldGhvZCkge1xuICAgIEV2ZW50c1ttZXRob2RdID0gZnVuY3Rpb24ob2JqLCBuYW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGxpc3RlbmluZ1RvID0gdGhpcy5fbGlzdGVuaW5nVG8gfHwgKHRoaXMuX2xpc3RlbmluZ1RvID0ge30pO1xuICAgICAgdmFyIGlkID0gb2JqLl9saXN0ZW5JZCB8fCAob2JqLl9saXN0ZW5JZCA9IF8udW5pcXVlSWQoJ2wnKSk7XG4gICAgICBsaXN0ZW5pbmdUb1tpZF0gPSBvYmo7XG4gICAgICBpZiAoIWNhbGxiYWNrICYmIHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgY2FsbGJhY2sgPSB0aGlzO1xuICAgICAgb2JqW2ltcGxlbWVudGF0aW9uXShuYW1lLCBjYWxsYmFjaywgdGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICB9KTtcblxuICAvLyBBbGlhc2VzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgRXZlbnRzLmJpbmQgICA9IEV2ZW50cy5vbjtcbiAgRXZlbnRzLnVuYmluZCA9IEV2ZW50cy5vZmY7XG5cbiAgLy8gQWxsb3cgdGhlIGBCYWNrYm9uZWAgb2JqZWN0IHRvIHNlcnZlIGFzIGEgZ2xvYmFsIGV2ZW50IGJ1cywgZm9yIGZvbGtzIHdob1xuICAvLyB3YW50IGdsb2JhbCBcInB1YnN1YlwiIGluIGEgY29udmVuaWVudCBwbGFjZS5cbiAgXy5leHRlbmQoQmFja2JvbmUsIEV2ZW50cyk7XG5cbiAgLy8gQmFja2JvbmUuTW9kZWxcbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICAvLyBCYWNrYm9uZSAqKk1vZGVscyoqIGFyZSB0aGUgYmFzaWMgZGF0YSBvYmplY3QgaW4gdGhlIGZyYW1ld29yayAtLVxuICAvLyBmcmVxdWVudGx5IHJlcHJlc2VudGluZyBhIHJvdyBpbiBhIHRhYmxlIGluIGEgZGF0YWJhc2Ugb24geW91ciBzZXJ2ZXIuXG4gIC8vIEEgZGlzY3JldGUgY2h1bmsgb2YgZGF0YSBhbmQgYSBidW5jaCBvZiB1c2VmdWwsIHJlbGF0ZWQgbWV0aG9kcyBmb3JcbiAgLy8gcGVyZm9ybWluZyBjb21wdXRhdGlvbnMgYW5kIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGF0IGRhdGEuXG5cbiAgLy8gQ3JlYXRlIGEgbmV3IG1vZGVsIHdpdGggdGhlIHNwZWNpZmllZCBhdHRyaWJ1dGVzLiBBIGNsaWVudCBpZCAoYGNpZGApXG4gIC8vIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGFuZCBhc3NpZ25lZCBmb3IgeW91LlxuICB2YXIgTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbCA9IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYXR0cnMgPSBhdHRyaWJ1dGVzIHx8IHt9O1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKCdjJyk7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgaWYgKG9wdGlvbnMuY29sbGVjdGlvbikgdGhpcy5jb2xsZWN0aW9uID0gb3B0aW9ucy5jb2xsZWN0aW9uO1xuICAgIGlmIChvcHRpb25zLnBhcnNlKSBhdHRycyA9IHRoaXMucGFyc2UoYXR0cnMsIG9wdGlvbnMpIHx8IHt9O1xuICAgIGF0dHJzID0gXy5kZWZhdWx0cyh7fSwgYXR0cnMsIF8ucmVzdWx0KHRoaXMsICdkZWZhdWx0cycpKTtcbiAgICB0aGlzLnNldChhdHRycywgb3B0aW9ucyk7XG4gICAgdGhpcy5jaGFuZ2VkID0ge307XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQXR0YWNoIGFsbCBpbmhlcml0YWJsZSBtZXRob2RzIHRvIHRoZSBNb2RlbCBwcm90b3R5cGUuXG4gIF8uZXh0ZW5kKE1vZGVsLnByb3RvdHlwZSwgRXZlbnRzLCB7XG5cbiAgICAvLyBBIGhhc2ggb2YgYXR0cmlidXRlcyB3aG9zZSBjdXJyZW50IGFuZCBwcmV2aW91cyB2YWx1ZSBkaWZmZXIuXG4gICAgY2hhbmdlZDogbnVsbCxcblxuICAgIC8vIFRoZSB2YWx1ZSByZXR1cm5lZCBkdXJpbmcgdGhlIGxhc3QgZmFpbGVkIHZhbGlkYXRpb24uXG4gICAgdmFsaWRhdGlvbkVycm9yOiBudWxsLFxuXG4gICAgLy8gVGhlIGRlZmF1bHQgbmFtZSBmb3IgdGhlIEpTT04gYGlkYCBhdHRyaWJ1dGUgaXMgYFwiaWRcImAuIE1vbmdvREIgYW5kXG4gICAgLy8gQ291Y2hEQiB1c2VycyBtYXkgd2FudCB0byBzZXQgdGhpcyB0byBgXCJfaWRcImAuXG4gICAgaWRBdHRyaWJ1dGU6ICdpZCcsXG5cbiAgICAvLyBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd25cbiAgICAvLyBpbml0aWFsaXphdGlvbiBsb2dpYy5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sXG5cbiAgICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBtb2RlbCdzIGBhdHRyaWJ1dGVzYCBvYmplY3QuXG4gICAgdG9KU09OOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gXy5jbG9uZSh0aGlzLmF0dHJpYnV0ZXMpO1xuICAgIH0sXG5cbiAgICAvLyBQcm94eSBgQmFja2JvbmUuc3luY2AgYnkgZGVmYXVsdCAtLSBidXQgb3ZlcnJpZGUgdGhpcyBpZiB5b3UgbmVlZFxuICAgIC8vIGN1c3RvbSBzeW5jaW5nIHNlbWFudGljcyBmb3IgKnRoaXMqIHBhcnRpY3VsYXIgbW9kZWwuXG4gICAgc3luYzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gQmFja2JvbmUuc3luYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgdGhlIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS5cbiAgICBnZXQ6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYXR0cl07XG4gICAgfSxcblxuICAgIC8vIEdldCB0aGUgSFRNTC1lc2NhcGVkIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS5cbiAgICBlc2NhcGU6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHJldHVybiBfLmVzY2FwZSh0aGlzLmdldChhdHRyKSk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgYHRydWVgIGlmIHRoZSBhdHRyaWJ1dGUgY29udGFpbnMgYSB2YWx1ZSB0aGF0IGlzIG5vdCBudWxsXG4gICAgLy8gb3IgdW5kZWZpbmVkLlxuICAgIGhhczogZnVuY3Rpb24oYXR0cikge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KGF0dHIpICE9IG51bGw7XG4gICAgfSxcblxuICAgIC8vIFNldCBhIGhhc2ggb2YgbW9kZWwgYXR0cmlidXRlcyBvbiB0aGUgb2JqZWN0LCBmaXJpbmcgYFwiY2hhbmdlXCJgLiBUaGlzIGlzXG4gICAgLy8gdGhlIGNvcmUgcHJpbWl0aXZlIG9wZXJhdGlvbiBvZiBhIG1vZGVsLCB1cGRhdGluZyB0aGUgZGF0YSBhbmQgbm90aWZ5aW5nXG4gICAgLy8gYW55b25lIHdobyBuZWVkcyB0byBrbm93IGFib3V0IHRoZSBjaGFuZ2UgaW4gc3RhdGUuIFRoZSBoZWFydCBvZiB0aGUgYmVhc3QuXG4gICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgb3B0aW9ucykge1xuICAgICAgdmFyIGF0dHIsIGF0dHJzLCB1bnNldCwgY2hhbmdlcywgc2lsZW50LCBjaGFuZ2luZywgcHJldiwgY3VycmVudDtcbiAgICAgIGlmIChrZXkgPT0gbnVsbCkgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIEhhbmRsZSBib3RoIGBcImtleVwiLCB2YWx1ZWAgYW5kIGB7a2V5OiB2YWx1ZX1gIC1zdHlsZSBhcmd1bWVudHMuXG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYXR0cnMgPSBrZXk7XG4gICAgICAgIG9wdGlvbnMgPSB2YWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoYXR0cnMgPSB7fSlba2V5XSA9IHZhbDtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcblxuICAgICAgLy8gUnVuIHZhbGlkYXRpb24uXG4gICAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAvLyBFeHRyYWN0IGF0dHJpYnV0ZXMgYW5kIG9wdGlvbnMuXG4gICAgICB1bnNldCAgICAgICAgICAgPSBvcHRpb25zLnVuc2V0O1xuICAgICAgc2lsZW50ICAgICAgICAgID0gb3B0aW9ucy5zaWxlbnQ7XG4gICAgICBjaGFuZ2VzICAgICAgICAgPSBbXTtcbiAgICAgIGNoYW5naW5nICAgICAgICA9IHRoaXMuX2NoYW5naW5nO1xuICAgICAgdGhpcy5fY2hhbmdpbmcgID0gdHJ1ZTtcblxuICAgICAgaWYgKCFjaGFuZ2luZykge1xuICAgICAgICB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMgPSBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IHt9O1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IHRoaXMuYXR0cmlidXRlcywgcHJldiA9IHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcztcblxuICAgICAgLy8gQ2hlY2sgZm9yIGNoYW5nZXMgb2YgYGlkYC5cbiAgICAgIGlmICh0aGlzLmlkQXR0cmlidXRlIGluIGF0dHJzKSB0aGlzLmlkID0gYXR0cnNbdGhpcy5pZEF0dHJpYnV0ZV07XG5cbiAgICAgIC8vIEZvciBlYWNoIGBzZXRgIGF0dHJpYnV0ZSwgdXBkYXRlIG9yIGRlbGV0ZSB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICAgIGZvciAoYXR0ciBpbiBhdHRycykge1xuICAgICAgICB2YWwgPSBhdHRyc1thdHRyXTtcbiAgICAgICAgaWYgKCFfLmlzRXF1YWwoY3VycmVudFthdHRyXSwgdmFsKSkgY2hhbmdlcy5wdXNoKGF0dHIpO1xuICAgICAgICBpZiAoIV8uaXNFcXVhbChwcmV2W2F0dHJdLCB2YWwpKSB7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VkW2F0dHJdID0gdmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLmNoYW5nZWRbYXR0cl07XG4gICAgICAgIH1cbiAgICAgICAgdW5zZXQgPyBkZWxldGUgY3VycmVudFthdHRyXSA6IGN1cnJlbnRbYXR0cl0gPSB2YWw7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyaWdnZXIgYWxsIHJlbGV2YW50IGF0dHJpYnV0ZSBjaGFuZ2VzLlxuICAgICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgICAgaWYgKGNoYW5nZXMubGVuZ3RoKSB0aGlzLl9wZW5kaW5nID0gb3B0aW9ucztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGFuZ2VzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlOicgKyBjaGFuZ2VzW2ldLCB0aGlzLCBjdXJyZW50W2NoYW5nZXNbaV1dLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBZb3UgbWlnaHQgYmUgd29uZGVyaW5nIHdoeSB0aGVyZSdzIGEgYHdoaWxlYCBsb29wIGhlcmUuIENoYW5nZXMgY2FuXG4gICAgICAvLyBiZSByZWN1cnNpdmVseSBuZXN0ZWQgd2l0aGluIGBcImNoYW5nZVwiYCBldmVudHMuXG4gICAgICBpZiAoY2hhbmdpbmcpIHJldHVybiB0aGlzO1xuICAgICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuX3BlbmRpbmcpIHtcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5fcGVuZGluZztcbiAgICAgICAgICB0aGlzLl9wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2UnLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fcGVuZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5fY2hhbmdpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBSZW1vdmUgYW4gYXR0cmlidXRlIGZyb20gdGhlIG1vZGVsLCBmaXJpbmcgYFwiY2hhbmdlXCJgLiBgdW5zZXRgIGlzIGEgbm9vcFxuICAgIC8vIGlmIHRoZSBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdC5cbiAgICB1bnNldDogZnVuY3Rpb24oYXR0ciwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHIsIHZvaWQgMCwgXy5leHRlbmQoe30sIG9wdGlvbnMsIHt1bnNldDogdHJ1ZX0pKTtcbiAgICB9LFxuXG4gICAgLy8gQ2xlYXIgYWxsIGF0dHJpYnV0ZXMgb24gdGhlIG1vZGVsLCBmaXJpbmcgYFwiY2hhbmdlXCJgLlxuICAgIGNsZWFyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgYXR0cnMgPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmF0dHJpYnV0ZXMpIGF0dHJzW2tleV0gPSB2b2lkIDA7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoYXR0cnMsIF8uZXh0ZW5kKHt9LCBvcHRpb25zLCB7dW5zZXQ6IHRydWV9KSk7XG4gICAgfSxcblxuICAgIC8vIERldGVybWluZSBpZiB0aGUgbW9kZWwgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYFwiY2hhbmdlXCJgIGV2ZW50LlxuICAgIC8vIElmIHlvdSBzcGVjaWZ5IGFuIGF0dHJpYnV0ZSBuYW1lLCBkZXRlcm1pbmUgaWYgdGhhdCBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQuXG4gICAgaGFzQ2hhbmdlZDogZnVuY3Rpb24oYXR0cikge1xuICAgICAgaWYgKGF0dHIgPT0gbnVsbCkgcmV0dXJuICFfLmlzRW1wdHkodGhpcy5jaGFuZ2VkKTtcbiAgICAgIHJldHVybiBfLmhhcyh0aGlzLmNoYW5nZWQsIGF0dHIpO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBhdHRyaWJ1dGVzIHRoYXQgaGF2ZSBjaGFuZ2VkLCBvclxuICAgIC8vIGZhbHNlIGlmIHRoZXJlIGFyZSBubyBjaGFuZ2VkIGF0dHJpYnV0ZXMuIFVzZWZ1bCBmb3IgZGV0ZXJtaW5pbmcgd2hhdFxuICAgIC8vIHBhcnRzIG9mIGEgdmlldyBuZWVkIHRvIGJlIHVwZGF0ZWQgYW5kL29yIHdoYXQgYXR0cmlidXRlcyBuZWVkIHRvIGJlXG4gICAgLy8gcGVyc2lzdGVkIHRvIHRoZSBzZXJ2ZXIuIFVuc2V0IGF0dHJpYnV0ZXMgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICAgIC8vIFlvdSBjYW4gYWxzbyBwYXNzIGFuIGF0dHJpYnV0ZXMgb2JqZWN0IHRvIGRpZmYgYWdhaW5zdCB0aGUgbW9kZWwsXG4gICAgLy8gZGV0ZXJtaW5pbmcgaWYgdGhlcmUgKndvdWxkIGJlKiBhIGNoYW5nZS5cbiAgICBjaGFuZ2VkQXR0cmlidXRlczogZnVuY3Rpb24oZGlmZikge1xuICAgICAgaWYgKCFkaWZmKSByZXR1cm4gdGhpcy5oYXNDaGFuZ2VkKCkgPyBfLmNsb25lKHRoaXMuY2hhbmdlZCkgOiBmYWxzZTtcbiAgICAgIHZhciB2YWwsIGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHZhciBvbGQgPSB0aGlzLl9jaGFuZ2luZyA/IHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA6IHRoaXMuYXR0cmlidXRlcztcbiAgICAgIGZvciAodmFyIGF0dHIgaW4gZGlmZikge1xuICAgICAgICBpZiAoXy5pc0VxdWFsKG9sZFthdHRyXSwgKHZhbCA9IGRpZmZbYXR0cl0pKSkgY29udGludWU7XG4gICAgICAgIChjaGFuZ2VkIHx8IChjaGFuZ2VkID0ge30pKVthdHRyXSA9IHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgdGhlIHByZXZpb3VzIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZSwgcmVjb3JkZWQgYXQgdGhlIHRpbWUgdGhlIGxhc3RcbiAgICAvLyBgXCJjaGFuZ2VcImAgZXZlbnQgd2FzIGZpcmVkLlxuICAgIHByZXZpb3VzOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICBpZiAoYXR0ciA9PSBudWxsIHx8ICF0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlc1thdHRyXTtcbiAgICB9LFxuXG4gICAgLy8gR2V0IGFsbCBvZiB0aGUgYXR0cmlidXRlcyBvZiB0aGUgbW9kZWwgYXQgdGhlIHRpbWUgb2YgdGhlIHByZXZpb3VzXG4gICAgLy8gYFwiY2hhbmdlXCJgIGV2ZW50LlxuICAgIHByZXZpb3VzQXR0cmlidXRlczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXy5jbG9uZSh0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMpO1xuICAgIH0sXG5cbiAgICAvLyBGZXRjaCB0aGUgbW9kZWwgZnJvbSB0aGUgc2VydmVyLiBJZiB0aGUgc2VydmVyJ3MgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gICAgLy8gbW9kZWwgZGlmZmVycyBmcm9tIGl0cyBjdXJyZW50IGF0dHJpYnV0ZXMsIHRoZXkgd2lsbCBiZSBvdmVycmlkZGVuLFxuICAgIC8vIHRyaWdnZXJpbmcgYSBgXCJjaGFuZ2VcImAgZXZlbnQuXG4gICAgZmV0Y2g6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7XG4gICAgICB2YXIgbW9kZWwgPSB0aGlzO1xuICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7XG4gICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgIGlmICghbW9kZWwuc2V0KG1vZGVsLnBhcnNlKHJlc3AsIG9wdGlvbnMpLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICAgIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgd3JhcEVycm9yKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRoaXMuc3luYygncmVhZCcsIHRoaXMsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvLyBTZXQgYSBoYXNoIG9mIG1vZGVsIGF0dHJpYnV0ZXMsIGFuZCBzeW5jIHRoZSBtb2RlbCB0byB0aGUgc2VydmVyLlxuICAgIC8vIElmIHRoZSBzZXJ2ZXIgcmV0dXJucyBhbiBhdHRyaWJ1dGVzIGhhc2ggdGhhdCBkaWZmZXJzLCB0aGUgbW9kZWwnc1xuICAgIC8vIHN0YXRlIHdpbGwgYmUgYHNldGAgYWdhaW4uXG4gICAgc2F2ZTogZnVuY3Rpb24oa2V5LCB2YWwsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBhdHRycywgbWV0aG9kLCB4aHIsIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cbiAgICAgIC8vIEhhbmRsZSBib3RoIGBcImtleVwiLCB2YWx1ZWAgYW5kIGB7a2V5OiB2YWx1ZX1gIC1zdHlsZSBhcmd1bWVudHMuXG4gICAgICBpZiAoa2V5ID09IG51bGwgfHwgdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYXR0cnMgPSBrZXk7XG4gICAgICAgIG9wdGlvbnMgPSB2YWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoYXR0cnMgPSB7fSlba2V5XSA9IHZhbDtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyA9IF8uZXh0ZW5kKHt2YWxpZGF0ZTogdHJ1ZX0sIG9wdGlvbnMpO1xuXG4gICAgICAvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBhbmQgYXR0cmlidXRlcyBleGlzdCwgc2F2ZSBhY3RzIGFzXG4gICAgICAvLyBgc2V0KGF0dHIpLnNhdmUobnVsbCwgb3B0cylgIHdpdGggdmFsaWRhdGlvbi4gT3RoZXJ3aXNlLCBjaGVjayBpZlxuICAgICAgLy8gdGhlIG1vZGVsIHdpbGwgYmUgdmFsaWQgd2hlbiB0aGUgYXR0cmlidXRlcywgaWYgYW55LCBhcmUgc2V0LlxuICAgICAgaWYgKGF0dHJzICYmICFvcHRpb25zLndhaXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNldChhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5fdmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCB0ZW1wb3JhcnkgYXR0cmlidXRlcyBpZiBge3dhaXQ6IHRydWV9YC5cbiAgICAgIGlmIChhdHRycyAmJiBvcHRpb25zLndhaXQpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gXy5leHRlbmQoe30sIGF0dHJpYnV0ZXMsIGF0dHJzKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWZ0ZXIgYSBzdWNjZXNzZnVsIHNlcnZlci1zaWRlIHNhdmUsIHRoZSBjbGllbnQgaXMgKG9wdGlvbmFsbHkpXG4gICAgICAvLyB1cGRhdGVkIHdpdGggdGhlIHNlcnZlci1zaWRlIHN0YXRlLlxuICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7XG4gICAgICB2YXIgbW9kZWwgPSB0aGlzO1xuICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7XG4gICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgIC8vIEVuc3VyZSBhdHRyaWJ1dGVzIGFyZSByZXN0b3JlZCBkdXJpbmcgc3luY2hyb25vdXMgc2F2ZXMuXG4gICAgICAgIG1vZGVsLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgc2VydmVyQXR0cnMgPSBtb2RlbC5wYXJzZShyZXNwLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCkgc2VydmVyQXR0cnMgPSBfLmV4dGVuZChhdHRycyB8fCB7fSwgc2VydmVyQXR0cnMpO1xuICAgICAgICBpZiAoXy5pc09iamVjdChzZXJ2ZXJBdHRycykgJiYgIW1vZGVsLnNldChzZXJ2ZXJBdHRycywgb3B0aW9ucykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBFcnJvcih0aGlzLCBvcHRpb25zKTtcblxuICAgICAgbWV0aG9kID0gdGhpcy5pc05ldygpID8gJ2NyZWF0ZScgOiAob3B0aW9ucy5wYXRjaCA/ICdwYXRjaCcgOiAndXBkYXRlJyk7XG4gICAgICBpZiAobWV0aG9kID09PSAncGF0Y2gnKSBvcHRpb25zLmF0dHJzID0gYXR0cnM7XG4gICAgICB4aHIgPSB0aGlzLnN5bmMobWV0aG9kLCB0aGlzLCBvcHRpb25zKTtcblxuICAgICAgLy8gUmVzdG9yZSBhdHRyaWJ1dGVzLlxuICAgICAgaWYgKGF0dHJzICYmIG9wdGlvbnMud2FpdCkgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcblxuICAgICAgcmV0dXJuIHhocjtcbiAgICB9LFxuXG4gICAgLy8gRGVzdHJveSB0aGlzIG1vZGVsIG9uIHRoZSBzZXJ2ZXIgaWYgaXQgd2FzIGFscmVhZHkgcGVyc2lzdGVkLlxuICAgIC8vIE9wdGltaXN0aWNhbGx5IHJlbW92ZXMgdGhlIG1vZGVsIGZyb20gaXRzIGNvbGxlY3Rpb24sIGlmIGl0IGhhcyBvbmUuXG4gICAgLy8gSWYgYHdhaXQ6IHRydWVgIGlzIHBhc3NlZCwgd2FpdHMgZm9yIHRoZSBzZXJ2ZXIgdG8gcmVzcG9uZCBiZWZvcmUgcmVtb3ZhbC5cbiAgICBkZXN0cm95OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTtcbiAgICAgIHZhciBtb2RlbCA9IHRoaXM7XG4gICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcblxuICAgICAgdmFyIGRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbW9kZWwudHJpZ2dlcignZGVzdHJveScsIG1vZGVsLCBtb2RlbC5jb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgIH07XG5cbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCB8fCBtb2RlbC5pc05ldygpKSBkZXN0cm95KCk7XG4gICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKCFtb2RlbC5pc05ldygpKSBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuaXNOZXcoKSkge1xuICAgICAgICBvcHRpb25zLnN1Y2Nlc3MoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgd3JhcEVycm9yKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICB2YXIgeGhyID0gdGhpcy5zeW5jKCdkZWxldGUnLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgIGlmICghb3B0aW9ucy53YWl0KSBkZXN0cm95KCk7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH0sXG5cbiAgICAvLyBEZWZhdWx0IFVSTCBmb3IgdGhlIG1vZGVsJ3MgcmVwcmVzZW50YXRpb24gb24gdGhlIHNlcnZlciAtLSBpZiB5b3UncmVcbiAgICAvLyB1c2luZyBCYWNrYm9uZSdzIHJlc3RmdWwgbWV0aG9kcywgb3ZlcnJpZGUgdGhpcyB0byBjaGFuZ2UgdGhlIGVuZHBvaW50XG4gICAgLy8gdGhhdCB3aWxsIGJlIGNhbGxlZC5cbiAgICB1cmw6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGJhc2UgPVxuICAgICAgICBfLnJlc3VsdCh0aGlzLCAndXJsUm9vdCcpIHx8XG4gICAgICAgIF8ucmVzdWx0KHRoaXMuY29sbGVjdGlvbiwgJ3VybCcpIHx8XG4gICAgICAgIHVybEVycm9yKCk7XG4gICAgICBpZiAodGhpcy5pc05ldygpKSByZXR1cm4gYmFzZTtcbiAgICAgIHJldHVybiBiYXNlLnJlcGxhY2UoLyhbXlxcL10pJC8sICckMS8nKSArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmlkKTtcbiAgICB9LFxuXG4gICAgLy8gKipwYXJzZSoqIGNvbnZlcnRzIGEgcmVzcG9uc2UgaW50byB0aGUgaGFzaCBvZiBhdHRyaWJ1dGVzIHRvIGJlIGBzZXRgIG9uXG4gICAgLy8gdGhlIG1vZGVsLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgdGhlIHJlc3BvbnNlIGFsb25nLlxuICAgIHBhcnNlOiBmdW5jdGlvbihyZXNwLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gcmVzcDtcbiAgICB9LFxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IG1vZGVsIHdpdGggaWRlbnRpY2FsIGF0dHJpYnV0ZXMgdG8gdGhpcyBvbmUuXG4gICAgY2xvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuYXR0cmlidXRlcyk7XG4gICAgfSxcblxuICAgIC8vIEEgbW9kZWwgaXMgbmV3IGlmIGl0IGhhcyBuZXZlciBiZWVuIHNhdmVkIHRvIHRoZSBzZXJ2ZXIsIGFuZCBsYWNrcyBhbiBpZC5cbiAgICBpc05ldzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXRoaXMuaGFzKHRoaXMuaWRBdHRyaWJ1dGUpO1xuICAgIH0sXG5cbiAgICAvLyBDaGVjayBpZiB0aGUgbW9kZWwgaXMgY3VycmVudGx5IGluIGEgdmFsaWQgc3RhdGUuXG4gICAgaXNWYWxpZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlKHt9LCBfLmV4dGVuZChvcHRpb25zIHx8IHt9LCB7IHZhbGlkYXRlOiB0cnVlIH0pKTtcbiAgICB9LFxuXG4gICAgLy8gUnVuIHZhbGlkYXRpb24gYWdhaW5zdCB0aGUgbmV4dCBjb21wbGV0ZSBzZXQgb2YgbW9kZWwgYXR0cmlidXRlcyxcbiAgICAvLyByZXR1cm5pbmcgYHRydWVgIGlmIGFsbCBpcyB3ZWxsLiBPdGhlcndpc2UsIGZpcmUgYW4gYFwiaW52YWxpZFwiYCBldmVudC5cbiAgICBfdmFsaWRhdGU6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIW9wdGlvbnMudmFsaWRhdGUgfHwgIXRoaXMudmFsaWRhdGUpIHJldHVybiB0cnVlO1xuICAgICAgYXR0cnMgPSBfLmV4dGVuZCh7fSwgdGhpcy5hdHRyaWJ1dGVzLCBhdHRycyk7XG4gICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRpb25FcnJvciA9IHRoaXMudmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpIHx8IG51bGw7XG4gICAgICBpZiAoIWVycm9yKSByZXR1cm4gdHJ1ZTtcbiAgICAgIHRoaXMudHJpZ2dlcignaW52YWxpZCcsIHRoaXMsIGVycm9yLCBfLmV4dGVuZChvcHRpb25zLCB7dmFsaWRhdGlvbkVycm9yOiBlcnJvcn0pKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gVW5kZXJzY29yZSBtZXRob2RzIHRoYXQgd2Ugd2FudCB0byBpbXBsZW1lbnQgb24gdGhlIE1vZGVsLlxuICB2YXIgbW9kZWxNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdwYWlycycsICdpbnZlcnQnLCAncGljaycsICdvbWl0J107XG5cbiAgLy8gTWl4IGluIGVhY2ggVW5kZXJzY29yZSBtZXRob2QgYXMgYSBwcm94eSB0byBgTW9kZWwjYXR0cmlidXRlc2AuXG4gIF8uZWFjaChtb2RlbE1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIE1vZGVsLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzLmF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIF9bbWV0aG9kXS5hcHBseShfLCBhcmdzKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBCYWNrYm9uZS5Db2xsZWN0aW9uXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBJZiBtb2RlbHMgdGVuZCB0byByZXByZXNlbnQgYSBzaW5nbGUgcm93IG9mIGRhdGEsIGEgQmFja2JvbmUgQ29sbGVjdGlvbiBpc1xuICAvLyBtb3JlIGFuYWxhZ291cyB0byBhIHRhYmxlIGZ1bGwgb2YgZGF0YSAuLi4gb3IgYSBzbWFsbCBzbGljZSBvciBwYWdlIG9mIHRoYXRcbiAgLy8gdGFibGUsIG9yIGEgY29sbGVjdGlvbiBvZiByb3dzIHRoYXQgYmVsb25nIHRvZ2V0aGVyIGZvciBhIHBhcnRpY3VsYXIgcmVhc29uXG4gIC8vIC0tIGFsbCBvZiB0aGUgbWVzc2FnZXMgaW4gdGhpcyBwYXJ0aWN1bGFyIGZvbGRlciwgYWxsIG9mIHRoZSBkb2N1bWVudHNcbiAgLy8gYmVsb25naW5nIHRvIHRoaXMgcGFydGljdWxhciBhdXRob3IsIGFuZCBzbyBvbi4gQ29sbGVjdGlvbnMgbWFpbnRhaW5cbiAgLy8gaW5kZXhlcyBvZiB0aGVpciBtb2RlbHMsIGJvdGggaW4gb3JkZXIsIGFuZCBmb3IgbG9va3VwIGJ5IGBpZGAuXG5cbiAgLy8gQ3JlYXRlIGEgbmV3ICoqQ29sbGVjdGlvbioqLCBwZXJoYXBzIHRvIGNvbnRhaW4gYSBzcGVjaWZpYyB0eXBlIG9mIGBtb2RlbGAuXG4gIC8vIElmIGEgYGNvbXBhcmF0b3JgIGlzIHNwZWNpZmllZCwgdGhlIENvbGxlY3Rpb24gd2lsbCBtYWludGFpblxuICAvLyBpdHMgbW9kZWxzIGluIHNvcnQgb3JkZXIsIGFzIHRoZXkncmUgYWRkZWQgYW5kIHJlbW92ZWQuXG4gIHZhciBDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgaWYgKG9wdGlvbnMubW9kZWwpIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmF0b3IgIT09IHZvaWQgMCkgdGhpcy5jb21wYXJhdG9yID0gb3B0aW9ucy5jb21wYXJhdG9yO1xuICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKG1vZGVscykgdGhpcy5yZXNldChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7XG4gIH07XG5cbiAgLy8gRGVmYXVsdCBvcHRpb25zIGZvciBgQ29sbGVjdGlvbiNzZXRgLlxuICB2YXIgc2V0T3B0aW9ucyA9IHthZGQ6IHRydWUsIHJlbW92ZTogdHJ1ZSwgbWVyZ2U6IHRydWV9O1xuICB2YXIgYWRkT3B0aW9ucyA9IHthZGQ6IHRydWUsIHJlbW92ZTogZmFsc2V9O1xuXG4gIC8vIERlZmluZSB0aGUgQ29sbGVjdGlvbidzIGluaGVyaXRhYmxlIG1ldGhvZHMuXG4gIF8uZXh0ZW5kKENvbGxlY3Rpb24ucHJvdG90eXBlLCBFdmVudHMsIHtcblxuICAgIC8vIFRoZSBkZWZhdWx0IG1vZGVsIGZvciBhIGNvbGxlY3Rpb24gaXMganVzdCBhICoqQmFja2JvbmUuTW9kZWwqKi5cbiAgICAvLyBUaGlzIHNob3VsZCBiZSBvdmVycmlkZGVuIGluIG1vc3QgY2FzZXMuXG4gICAgbW9kZWw6IE1vZGVsLFxuXG4gICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duXG4gICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LFxuXG4gICAgLy8gVGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYSBDb2xsZWN0aW9uIGlzIGFuIGFycmF5IG9mIHRoZVxuICAgIC8vIG1vZGVscycgYXR0cmlidXRlcy5cbiAgICB0b0pTT046IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbihtb2RlbCl7IHJldHVybiBtb2RlbC50b0pTT04ob3B0aW9ucyk7IH0pO1xuICAgIH0sXG5cbiAgICAvLyBQcm94eSBgQmFja2JvbmUuc3luY2AgYnkgZGVmYXVsdC5cbiAgICBzeW5jOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBCYWNrYm9uZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSxcblxuICAgIC8vIEFkZCBhIG1vZGVsLCBvciBsaXN0IG9mIG1vZGVscyB0byB0aGUgc2V0LlxuICAgIGFkZDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQobW9kZWxzLCBfLmV4dGVuZCh7bWVyZ2U6IGZhbHNlfSwgb3B0aW9ucywgYWRkT3B0aW9ucykpO1xuICAgIH0sXG5cbiAgICAvLyBSZW1vdmUgYSBtb2RlbCwgb3IgYSBsaXN0IG9mIG1vZGVscyBmcm9tIHRoZSBzZXQuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzaW5ndWxhciA9ICFfLmlzQXJyYXkobW9kZWxzKTtcbiAgICAgIG1vZGVscyA9IHNpbmd1bGFyID8gW21vZGVsc10gOiBfLmNsb25lKG1vZGVscyk7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgICAgdmFyIGksIGwsIGluZGV4LCBtb2RlbDtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBtb2RlbHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG1vZGVsID0gbW9kZWxzW2ldID0gdGhpcy5nZXQobW9kZWxzW2ldKTtcbiAgICAgICAgaWYgKCFtb2RlbCkgY29udGludWU7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLmlkXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2J5SWRbbW9kZWwuY2lkXTtcbiAgICAgICAgaW5kZXggPSB0aGlzLmluZGV4T2YobW9kZWwpO1xuICAgICAgICB0aGlzLm1vZGVscy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLmxlbmd0aC0tO1xuICAgICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgb3B0aW9ucy5pbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1vZGVsLnRyaWdnZXIoJ3JlbW92ZScsIG1vZGVsLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW1vdmVSZWZlcmVuY2UobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNpbmd1bGFyID8gbW9kZWxzWzBdIDogbW9kZWxzO1xuICAgIH0sXG5cbiAgICAvLyBVcGRhdGUgYSBjb2xsZWN0aW9uIGJ5IGBzZXRgLWluZyBhIG5ldyBsaXN0IG9mIG1vZGVscywgYWRkaW5nIG5ldyBvbmVzLFxuICAgIC8vIHJlbW92aW5nIG1vZGVscyB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudCwgYW5kIG1lcmdpbmcgbW9kZWxzIHRoYXRcbiAgICAvLyBhbHJlYWR5IGV4aXN0IGluIHRoZSBjb2xsZWN0aW9uLCBhcyBuZWNlc3NhcnkuIFNpbWlsYXIgdG8gKipNb2RlbCNzZXQqKixcbiAgICAvLyB0aGUgY29yZSBvcGVyYXRpb24gZm9yIHVwZGF0aW5nIHRoZSBkYXRhIGNvbnRhaW5lZCBieSB0aGUgY29sbGVjdGlvbi5cbiAgICBzZXQ6IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IF8uZGVmYXVsdHMoe30sIG9wdGlvbnMsIHNldE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMucGFyc2UpIG1vZGVscyA9IHRoaXMucGFyc2UobW9kZWxzLCBvcHRpb25zKTtcbiAgICAgIHZhciBzaW5ndWxhciA9ICFfLmlzQXJyYXkobW9kZWxzKTtcbiAgICAgIG1vZGVscyA9IHNpbmd1bGFyID8gKG1vZGVscyA/IFttb2RlbHNdIDogW10pIDogXy5jbG9uZShtb2RlbHMpO1xuICAgICAgdmFyIGksIGwsIGlkLCBtb2RlbCwgYXR0cnMsIGV4aXN0aW5nLCBzb3J0O1xuICAgICAgdmFyIGF0ID0gb3B0aW9ucy5hdDtcbiAgICAgIHZhciB0YXJnZXRNb2RlbCA9IHRoaXMubW9kZWw7XG4gICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmNvbXBhcmF0b3IgJiYgKGF0ID09IG51bGwpICYmIG9wdGlvbnMuc29ydCAhPT0gZmFsc2U7XG4gICAgICB2YXIgc29ydEF0dHIgPSBfLmlzU3RyaW5nKHRoaXMuY29tcGFyYXRvcikgPyB0aGlzLmNvbXBhcmF0b3IgOiBudWxsO1xuICAgICAgdmFyIHRvQWRkID0gW10sIHRvUmVtb3ZlID0gW10sIG1vZGVsTWFwID0ge307XG4gICAgICB2YXIgYWRkID0gb3B0aW9ucy5hZGQsIG1lcmdlID0gb3B0aW9ucy5tZXJnZSwgcmVtb3ZlID0gb3B0aW9ucy5yZW1vdmU7XG4gICAgICB2YXIgb3JkZXIgPSAhc29ydGFibGUgJiYgYWRkICYmIHJlbW92ZSA/IFtdIDogZmFsc2U7XG5cbiAgICAgIC8vIFR1cm4gYmFyZSBvYmplY3RzIGludG8gbW9kZWwgcmVmZXJlbmNlcywgYW5kIHByZXZlbnQgaW52YWxpZCBtb2RlbHNcbiAgICAgIC8vIGZyb20gYmVpbmcgYWRkZWQuXG4gICAgICBmb3IgKGkgPSAwLCBsID0gbW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBhdHRycyA9IG1vZGVsc1tpXSB8fCB7fTtcbiAgICAgICAgaWYgKGF0dHJzIGluc3RhbmNlb2YgTW9kZWwpIHtcbiAgICAgICAgICBpZCA9IG1vZGVsID0gYXR0cnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWQgPSBhdHRyc1t0YXJnZXRNb2RlbC5wcm90b3R5cGUuaWRBdHRyaWJ1dGUgfHwgJ2lkJ107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBhIGR1cGxpY2F0ZSBpcyBmb3VuZCwgcHJldmVudCBpdCBmcm9tIGJlaW5nIGFkZGVkIGFuZFxuICAgICAgICAvLyBvcHRpb25hbGx5IG1lcmdlIGl0IGludG8gdGhlIGV4aXN0aW5nIG1vZGVsLlxuICAgICAgICBpZiAoZXhpc3RpbmcgPSB0aGlzLmdldChpZCkpIHtcbiAgICAgICAgICBpZiAocmVtb3ZlKSBtb2RlbE1hcFtleGlzdGluZy5jaWRdID0gdHJ1ZTtcbiAgICAgICAgICBpZiAobWVyZ2UpIHtcbiAgICAgICAgICAgIGF0dHJzID0gYXR0cnMgPT09IG1vZGVsID8gbW9kZWwuYXR0cmlidXRlcyA6IGF0dHJzO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFyc2UpIGF0dHJzID0gZXhpc3RpbmcucGFyc2UoYXR0cnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgZXhpc3Rpbmcuc2V0KGF0dHJzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChzb3J0YWJsZSAmJiAhc29ydCAmJiBleGlzdGluZy5oYXNDaGFuZ2VkKHNvcnRBdHRyKSkgc29ydCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1vZGVsc1tpXSA9IGV4aXN0aW5nO1xuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBuZXcsIHZhbGlkIG1vZGVsLCBwdXNoIGl0IHRvIHRoZSBgdG9BZGRgIGxpc3QuXG4gICAgICAgIH0gZWxzZSBpZiAoYWRkKSB7XG4gICAgICAgICAgbW9kZWwgPSBtb2RlbHNbaV0gPSB0aGlzLl9wcmVwYXJlTW9kZWwoYXR0cnMsIG9wdGlvbnMpO1xuICAgICAgICAgIGlmICghbW9kZWwpIGNvbnRpbnVlO1xuICAgICAgICAgIHRvQWRkLnB1c2gobW9kZWwpO1xuICAgICAgICAgIHRoaXMuX2FkZFJlZmVyZW5jZShtb2RlbCwgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEbyBub3QgYWRkIG11bHRpcGxlIG1vZGVscyB3aXRoIHRoZSBzYW1lIGBpZGAuXG4gICAgICAgIG1vZGVsID0gZXhpc3RpbmcgfHwgbW9kZWw7XG4gICAgICAgIGlmIChvcmRlciAmJiAobW9kZWwuaXNOZXcoKSB8fCAhbW9kZWxNYXBbbW9kZWwuaWRdKSkgb3JkZXIucHVzaChtb2RlbCk7XG4gICAgICAgIG1vZGVsTWFwW21vZGVsLmlkXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBub25leGlzdGVudCBtb2RlbHMgaWYgYXBwcm9wcmlhdGUuXG4gICAgICBpZiAocmVtb3ZlKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgIGlmICghbW9kZWxNYXBbKG1vZGVsID0gdGhpcy5tb2RlbHNbaV0pLmNpZF0pIHRvUmVtb3ZlLnB1c2gobW9kZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b1JlbW92ZS5sZW5ndGgpIHRoaXMucmVtb3ZlKHRvUmVtb3ZlLCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VlIGlmIHNvcnRpbmcgaXMgbmVlZGVkLCB1cGRhdGUgYGxlbmd0aGAgYW5kIHNwbGljZSBpbiBuZXcgbW9kZWxzLlxuICAgICAgaWYgKHRvQWRkLmxlbmd0aCB8fCAob3JkZXIgJiYgb3JkZXIubGVuZ3RoKSkge1xuICAgICAgICBpZiAoc29ydGFibGUpIHNvcnQgPSB0cnVlO1xuICAgICAgICB0aGlzLmxlbmd0aCArPSB0b0FkZC5sZW5ndGg7XG4gICAgICAgIGlmIChhdCAhPSBudWxsKSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRvQWRkLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5tb2RlbHMuc3BsaWNlKGF0ICsgaSwgMCwgdG9BZGRbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAob3JkZXIpIHRoaXMubW9kZWxzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgdmFyIG9yZGVyZWRNb2RlbHMgPSBvcmRlciB8fCB0b0FkZDtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gb3JkZXJlZE1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWxzLnB1c2gob3JkZXJlZE1vZGVsc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFNpbGVudGx5IHNvcnQgdGhlIGNvbGxlY3Rpb24gaWYgYXBwcm9wcmlhdGUuXG4gICAgICBpZiAoc29ydCkgdGhpcy5zb3J0KHtzaWxlbnQ6IHRydWV9KTtcblxuICAgICAgLy8gVW5sZXNzIHNpbGVuY2VkLCBpdCdzIHRpbWUgdG8gZmlyZSBhbGwgYXBwcm9wcmlhdGUgYWRkL3NvcnQgZXZlbnRzLlxuICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gdG9BZGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgKG1vZGVsID0gdG9BZGRbaV0pLnRyaWdnZXIoJ2FkZCcsIG1vZGVsLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc29ydCB8fCAob3JkZXIgJiYgb3JkZXIubGVuZ3RoKSkgdGhpcy50cmlnZ2VyKCdzb3J0JywgdGhpcywgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiB0aGUgYWRkZWQgKG9yIG1lcmdlZCkgbW9kZWwgKG9yIG1vZGVscykuXG4gICAgICByZXR1cm4gc2luZ3VsYXIgPyBtb2RlbHNbMF0gOiBtb2RlbHM7XG4gICAgfSxcblxuICAgIC8vIFdoZW4geW91IGhhdmUgbW9yZSBpdGVtcyB0aGFuIHlvdSB3YW50IHRvIGFkZCBvciByZW1vdmUgaW5kaXZpZHVhbGx5LFxuICAgIC8vIHlvdSBjYW4gcmVzZXQgdGhlIGVudGlyZSBzZXQgd2l0aCBhIG5ldyBsaXN0IG9mIG1vZGVscywgd2l0aG91dCBmaXJpbmdcbiAgICAvLyBhbnkgZ3JhbnVsYXIgYGFkZGAgb3IgYHJlbW92ZWAgZXZlbnRzLiBGaXJlcyBgcmVzZXRgIHdoZW4gZmluaXNoZWQuXG4gICAgLy8gVXNlZnVsIGZvciBidWxrIG9wZXJhdGlvbnMgYW5kIG9wdGltaXphdGlvbnMuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5tb2RlbHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZSh0aGlzLm1vZGVsc1tpXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zLnByZXZpb3VzTW9kZWxzID0gdGhpcy5tb2RlbHM7XG4gICAgICB0aGlzLl9yZXNldCgpO1xuICAgICAgbW9kZWxzID0gdGhpcy5hZGQobW9kZWxzLCBfLmV4dGVuZCh7c2lsZW50OiB0cnVlfSwgb3B0aW9ucykpO1xuICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy50cmlnZ2VyKCdyZXNldCcsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG1vZGVscztcbiAgICB9LFxuXG4gICAgLy8gQWRkIGEgbW9kZWwgdG8gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICBwdXNoOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuYWRkKG1vZGVsLCBfLmV4dGVuZCh7YXQ6IHRoaXMubGVuZ3RofSwgb3B0aW9ucykpO1xuICAgIH0sXG5cbiAgICAvLyBSZW1vdmUgYSBtb2RlbCBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAgcG9wOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgbW9kZWwgPSB0aGlzLmF0KHRoaXMubGVuZ3RoIC0gMSk7XG4gICAgICB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gbW9kZWw7XG4gICAgfSxcblxuICAgIC8vIEFkZCBhIG1vZGVsIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAgdW5zaGlmdDogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkZChtb2RlbCwgXy5leHRlbmQoe2F0OiAwfSwgb3B0aW9ucykpO1xuICAgIH0sXG5cbiAgICAvLyBSZW1vdmUgYSBtb2RlbCBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAgc2hpZnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBtb2RlbCA9IHRoaXMuYXQoMCk7XG4gICAgICB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gbW9kZWw7XG4gICAgfSxcblxuICAgIC8vIFNsaWNlIG91dCBhIHN1Yi1hcnJheSBvZiBtb2RlbHMgZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAgICBzbGljZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2xpY2UuYXBwbHkodGhpcy5tb2RlbHMsIGFyZ3VtZW50cyk7XG4gICAgfSxcblxuICAgIC8vIEdldCBhIG1vZGVsIGZyb20gdGhlIHNldCBieSBpZC5cbiAgICBnZXQ6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgICAgcmV0dXJuIHRoaXMuX2J5SWRbb2JqXSB8fCB0aGlzLl9ieUlkW29iai5pZF0gfHwgdGhpcy5fYnlJZFtvYmouY2lkXTtcbiAgICB9LFxuXG4gICAgLy8gR2V0IHRoZSBtb2RlbCBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAgYXQ6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbHNbaW5kZXhdO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm4gbW9kZWxzIHdpdGggbWF0Y2hpbmcgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBzaW1wbGUgY2FzZXMgb2ZcbiAgICAvLyBgZmlsdGVyYC5cbiAgICB3aGVyZTogZnVuY3Rpb24oYXR0cnMsIGZpcnN0KSB7XG4gICAgICBpZiAoXy5pc0VtcHR5KGF0dHJzKSkgcmV0dXJuIGZpcnN0ID8gdm9pZCAwIDogW107XG4gICAgICByZXR1cm4gdGhpc1tmaXJzdCA/ICdmaW5kJyA6ICdmaWx0ZXInXShmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgICBpZiAoYXR0cnNba2V5XSAhPT0gbW9kZWwuZ2V0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm4gdGhlIGZpcnN0IG1vZGVsIHdpdGggbWF0Y2hpbmcgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBzaW1wbGUgY2FzZXNcbiAgICAvLyBvZiBgZmluZGAuXG4gICAgZmluZFdoZXJlOiBmdW5jdGlvbihhdHRycykge1xuICAgICAgcmV0dXJuIHRoaXMud2hlcmUoYXR0cnMsIHRydWUpO1xuICAgIH0sXG5cbiAgICAvLyBGb3JjZSB0aGUgY29sbGVjdGlvbiB0byByZS1zb3J0IGl0c2VsZi4gWW91IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzIHVuZGVyXG4gICAgLy8gbm9ybWFsIGNpcmN1bXN0YW5jZXMsIGFzIHRoZSBzZXQgd2lsbCBtYWludGFpbiBzb3J0IG9yZGVyIGFzIGVhY2ggaXRlbVxuICAgIC8vIGlzIGFkZGVkLlxuICAgIHNvcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICghdGhpcy5jb21wYXJhdG9yKSB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzb3J0IGEgc2V0IHdpdGhvdXQgYSBjb21wYXJhdG9yJyk7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuXG4gICAgICAvLyBSdW4gc29ydCBiYXNlZCBvbiB0eXBlIG9mIGBjb21wYXJhdG9yYC5cbiAgICAgIGlmIChfLmlzU3RyaW5nKHRoaXMuY29tcGFyYXRvcikgfHwgdGhpcy5jb21wYXJhdG9yLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0aGlzLm1vZGVscyA9IHRoaXMuc29ydEJ5KHRoaXMuY29tcGFyYXRvciwgdGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1vZGVscy5zb3J0KF8uYmluZCh0aGlzLmNvbXBhcmF0b3IsIHRoaXMpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy50cmlnZ2VyKCdzb3J0JywgdGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gUGx1Y2sgYW4gYXR0cmlidXRlIGZyb20gZWFjaCBtb2RlbCBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICBwbHVjazogZnVuY3Rpb24oYXR0cikge1xuICAgICAgcmV0dXJuIF8uaW52b2tlKHRoaXMubW9kZWxzLCAnZ2V0JywgYXR0cik7XG4gICAgfSxcblxuICAgIC8vIEZldGNoIHRoZSBkZWZhdWx0IHNldCBvZiBtb2RlbHMgZm9yIHRoaXMgY29sbGVjdGlvbiwgcmVzZXR0aW5nIHRoZVxuICAgIC8vIGNvbGxlY3Rpb24gd2hlbiB0aGV5IGFycml2ZS4gSWYgYHJlc2V0OiB0cnVlYCBpcyBwYXNzZWQsIHRoZSByZXNwb25zZVxuICAgIC8vIGRhdGEgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCB0aGUgYHJlc2V0YCBtZXRob2QgaW5zdGVhZCBvZiBgc2V0YC5cbiAgICBmZXRjaDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307XG4gICAgICBpZiAob3B0aW9ucy5wYXJzZSA9PT0gdm9pZCAwKSBvcHRpb25zLnBhcnNlID0gdHJ1ZTtcbiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICB2YXIgbWV0aG9kID0gb3B0aW9ucy5yZXNldCA/ICdyZXNldCcgOiAnc2V0JztcbiAgICAgICAgY29sbGVjdGlvblttZXRob2RdKHJlc3AsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhjb2xsZWN0aW9uLCByZXNwLCBvcHRpb25zKTtcbiAgICAgICAgY29sbGVjdGlvbi50cmlnZ2VyKCdzeW5jJywgY29sbGVjdGlvbiwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgd3JhcEVycm9yKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRoaXMuc3luYygncmVhZCcsIHRoaXMsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgYSBtb2RlbCBpbiB0aGlzIGNvbGxlY3Rpb24uIEFkZCB0aGUgbW9kZWwgdG8gdGhlXG4gICAgLy8gY29sbGVjdGlvbiBpbW1lZGlhdGVseSwgdW5sZXNzIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIGluIHdoaWNoIGNhc2Ugd2VcbiAgICAvLyB3YWl0IGZvciB0aGUgc2VydmVyIHRvIGFncmVlLlxuICAgIGNyZWF0ZTogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgICAgaWYgKCEobW9kZWwgPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWwsIG9wdGlvbnMpKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKCFvcHRpb25zLndhaXQpIHRoaXMuYWRkKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24obW9kZWwsIHJlc3ApIHtcbiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCkgY29sbGVjdGlvbi5hZGQobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgbW9kZWwuc2F2ZShudWxsLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9LFxuXG4gICAgLy8gKipwYXJzZSoqIGNvbnZlcnRzIGEgcmVzcG9uc2UgaW50byBhIGxpc3Qgb2YgbW9kZWxzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgIC8vIGNvbGxlY3Rpb24uIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGlzIGp1c3QgdG8gcGFzcyBpdCB0aHJvdWdoLlxuICAgIHBhcnNlOiBmdW5jdGlvbihyZXNwLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gcmVzcDtcbiAgICB9LFxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGNvbGxlY3Rpb24gd2l0aCBhbiBpZGVudGljYWwgbGlzdCBvZiBtb2RlbHMgYXMgdGhpcyBvbmUuXG4gICAgY2xvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubW9kZWxzKTtcbiAgICB9LFxuXG4gICAgLy8gUHJpdmF0ZSBtZXRob2QgdG8gcmVzZXQgYWxsIGludGVybmFsIHN0YXRlLiBDYWxsZWQgd2hlbiB0aGUgY29sbGVjdGlvblxuICAgIC8vIGlzIGZpcnN0IGluaXRpYWxpemVkIG9yIHJlc2V0LlxuICAgIF9yZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLm1vZGVscyA9IFtdO1xuICAgICAgdGhpcy5fYnlJZCAgPSB7fTtcbiAgICB9LFxuXG4gICAgLy8gUHJlcGFyZSBhIGhhc2ggb2YgYXR0cmlidXRlcyAob3Igb3RoZXIgbW9kZWwpIHRvIGJlIGFkZGVkIHRvIHRoaXNcbiAgICAvLyBjb2xsZWN0aW9uLlxuICAgIF9wcmVwYXJlTW9kZWw6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7XG4gICAgICBpZiAoYXR0cnMgaW5zdGFuY2VvZiBNb2RlbCkgcmV0dXJuIGF0dHJzO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307XG4gICAgICBvcHRpb25zLmNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgdmFyIG1vZGVsID0gbmV3IHRoaXMubW9kZWwoYXR0cnMsIG9wdGlvbnMpO1xuICAgICAgaWYgKCFtb2RlbC52YWxpZGF0aW9uRXJyb3IpIHJldHVybiBtb2RlbDtcbiAgICAgIHRoaXMudHJpZ2dlcignaW52YWxpZCcsIHRoaXMsIG1vZGVsLnZhbGlkYXRpb25FcnJvciwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIEludGVybmFsIG1ldGhvZCB0byBjcmVhdGUgYSBtb2RlbCdzIHRpZXMgdG8gYSBjb2xsZWN0aW9uLlxuICAgIF9hZGRSZWZlcmVuY2U6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICB0aGlzLl9ieUlkW21vZGVsLmNpZF0gPSBtb2RlbDtcbiAgICAgIGlmIChtb2RlbC5pZCAhPSBudWxsKSB0aGlzLl9ieUlkW21vZGVsLmlkXSA9IG1vZGVsO1xuICAgICAgaWYgKCFtb2RlbC5jb2xsZWN0aW9uKSBtb2RlbC5jb2xsZWN0aW9uID0gdGhpcztcbiAgICAgIG1vZGVsLm9uKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpO1xuICAgIH0sXG5cbiAgICAvLyBJbnRlcm5hbCBtZXRob2QgdG8gc2V2ZXIgYSBtb2RlbCdzIHRpZXMgdG8gYSBjb2xsZWN0aW9uLlxuICAgIF9yZW1vdmVSZWZlcmVuY2U6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICBpZiAodGhpcyA9PT0gbW9kZWwuY29sbGVjdGlvbikgZGVsZXRlIG1vZGVsLmNvbGxlY3Rpb247XG4gICAgICBtb2RlbC5vZmYoJ2FsbCcsIHRoaXMuX29uTW9kZWxFdmVudCwgdGhpcyk7XG4gICAgfSxcblxuICAgIC8vIEludGVybmFsIG1ldGhvZCBjYWxsZWQgZXZlcnkgdGltZSBhIG1vZGVsIGluIHRoZSBzZXQgZmlyZXMgYW4gZXZlbnQuXG4gICAgLy8gU2V0cyBuZWVkIHRvIHVwZGF0ZSB0aGVpciBpbmRleGVzIHdoZW4gbW9kZWxzIGNoYW5nZSBpZHMuIEFsbCBvdGhlclxuICAgIC8vIGV2ZW50cyBzaW1wbHkgcHJveHkgdGhyb3VnaC4gXCJhZGRcIiBhbmQgXCJyZW1vdmVcIiBldmVudHMgdGhhdCBvcmlnaW5hdGVcbiAgICAvLyBpbiBvdGhlciBjb2xsZWN0aW9ucyBhcmUgaWdub3JlZC5cbiAgICBfb25Nb2RlbEV2ZW50OiBmdW5jdGlvbihldmVudCwgbW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgIGlmICgoZXZlbnQgPT09ICdhZGQnIHx8IGV2ZW50ID09PSAncmVtb3ZlJykgJiYgY29sbGVjdGlvbiAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgaWYgKGV2ZW50ID09PSAnZGVzdHJveScpIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgIGlmIChtb2RlbCAmJiBldmVudCA9PT0gJ2NoYW5nZTonICsgbW9kZWwuaWRBdHRyaWJ1dGUpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2J5SWRbbW9kZWwucHJldmlvdXMobW9kZWwuaWRBdHRyaWJ1dGUpXTtcbiAgICAgICAgaWYgKG1vZGVsLmlkICE9IG51bGwpIHRoaXMuX2J5SWRbbW9kZWwuaWRdID0gbW9kZWw7XG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gVW5kZXJzY29yZSBtZXRob2RzIHRoYXQgd2Ugd2FudCB0byBpbXBsZW1lbnQgb24gdGhlIENvbGxlY3Rpb24uXG4gIC8vIDkwJSBvZiB0aGUgY29yZSB1c2VmdWxuZXNzIG9mIEJhY2tib25lIENvbGxlY3Rpb25zIGlzIGFjdHVhbGx5IGltcGxlbWVudGVkXG4gIC8vIHJpZ2h0IGhlcmU6XG4gIHZhciBtZXRob2RzID0gWydmb3JFYWNoJywgJ2VhY2gnLCAnbWFwJywgJ2NvbGxlY3QnLCAncmVkdWNlJywgJ2ZvbGRsJyxcbiAgICAnaW5qZWN0JywgJ3JlZHVjZVJpZ2h0JywgJ2ZvbGRyJywgJ2ZpbmQnLCAnZGV0ZWN0JywgJ2ZpbHRlcicsICdzZWxlY3QnLFxuICAgICdyZWplY3QnLCAnZXZlcnknLCAnYWxsJywgJ3NvbWUnLCAnYW55JywgJ2luY2x1ZGUnLCAnY29udGFpbnMnLCAnaW52b2tlJyxcbiAgICAnbWF4JywgJ21pbicsICd0b0FycmF5JywgJ3NpemUnLCAnZmlyc3QnLCAnaGVhZCcsICd0YWtlJywgJ2luaXRpYWwnLCAncmVzdCcsXG4gICAgJ3RhaWwnLCAnZHJvcCcsICdsYXN0JywgJ3dpdGhvdXQnLCAnZGlmZmVyZW5jZScsICdpbmRleE9mJywgJ3NodWZmbGUnLFxuICAgICdsYXN0SW5kZXhPZicsICdpc0VtcHR5JywgJ2NoYWluJywgJ3NhbXBsZSddO1xuXG4gIC8vIE1peCBpbiBlYWNoIFVuZGVyc2NvcmUgbWV0aG9kIGFzIGEgcHJveHkgdG8gYENvbGxlY3Rpb24jbW9kZWxzYC5cbiAgXy5lYWNoKG1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgYXJncy51bnNoaWZ0KHRoaXMubW9kZWxzKTtcbiAgICAgIHJldHVybiBfW21ldGhvZF0uYXBwbHkoXywgYXJncyk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gVW5kZXJzY29yZSBtZXRob2RzIHRoYXQgdGFrZSBhIHByb3BlcnR5IG5hbWUgYXMgYW4gYXJndW1lbnQuXG4gIHZhciBhdHRyaWJ1dGVNZXRob2RzID0gWydncm91cEJ5JywgJ2NvdW50QnknLCAnc29ydEJ5JywgJ2luZGV4QnknXTtcblxuICAvLyBVc2UgYXR0cmlidXRlcyBpbnN0ZWFkIG9mIHByb3BlcnRpZXMuXG4gIF8uZWFjaChhdHRyaWJ1dGVNZXRob2RzLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICAgIHJldHVybiBtb2RlbC5nZXQodmFsdWUpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfW21ldGhvZF0odGhpcy5tb2RlbHMsIGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBCYWNrYm9uZS5WaWV3XG4gIC8vIC0tLS0tLS0tLS0tLS1cblxuICAvLyBCYWNrYm9uZSBWaWV3cyBhcmUgYWxtb3N0IG1vcmUgY29udmVudGlvbiB0aGFuIHRoZXkgYXJlIGFjdHVhbCBjb2RlLiBBIFZpZXdcbiAgLy8gaXMgc2ltcGx5IGEgSmF2YVNjcmlwdCBvYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbG9naWNhbCBjaHVuayBvZiBVSSBpbiB0aGVcbiAgLy8gRE9NLiBUaGlzIG1pZ2h0IGJlIGEgc2luZ2xlIGl0ZW0sIGFuIGVudGlyZSBsaXN0LCBhIHNpZGViYXIgb3IgcGFuZWwsIG9yXG4gIC8vIGV2ZW4gdGhlIHN1cnJvdW5kaW5nIGZyYW1lIHdoaWNoIHdyYXBzIHlvdXIgd2hvbGUgYXBwLiBEZWZpbmluZyBhIGNodW5rIG9mXG4gIC8vIFVJIGFzIGEgKipWaWV3KiogYWxsb3dzIHlvdSB0byBkZWZpbmUgeW91ciBET00gZXZlbnRzIGRlY2xhcmF0aXZlbHksIHdpdGhvdXRcbiAgLy8gaGF2aW5nIHRvIHdvcnJ5IGFib3V0IHJlbmRlciBvcmRlciAuLi4gYW5kIG1ha2VzIGl0IGVhc3kgZm9yIHRoZSB2aWV3IHRvXG4gIC8vIHJlYWN0IHRvIHNwZWNpZmljIGNoYW5nZXMgaW4gdGhlIHN0YXRlIG9mIHlvdXIgbW9kZWxzLlxuXG4gIC8vIENyZWF0aW5nIGEgQmFja2JvbmUuVmlldyBjcmVhdGVzIGl0cyBpbml0aWFsIGVsZW1lbnQgb3V0c2lkZSBvZiB0aGUgRE9NLFxuICAvLyBpZiBhbiBleGlzdGluZyBlbGVtZW50IGlzIG5vdCBwcm92aWRlZC4uLlxuICB2YXIgVmlldyA9IEJhY2tib25lLlZpZXcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKCd2aWV3Jyk7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICBfLmV4dGVuZCh0aGlzLCBfLnBpY2sob3B0aW9ucywgdmlld09wdGlvbnMpKTtcbiAgICB0aGlzLl9lbnN1cmVFbGVtZW50KCk7XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpO1xuICB9O1xuXG4gIC8vIENhY2hlZCByZWdleCB0byBzcGxpdCBrZXlzIGZvciBgZGVsZWdhdGVgLlxuICB2YXIgZGVsZWdhdGVFdmVudFNwbGl0dGVyID0gL14oXFxTKylcXHMqKC4qKSQvO1xuXG4gIC8vIExpc3Qgb2YgdmlldyBvcHRpb25zIHRvIGJlIG1lcmdlZCBhcyBwcm9wZXJ0aWVzLlxuICB2YXIgdmlld09wdGlvbnMgPSBbJ21vZGVsJywgJ2NvbGxlY3Rpb24nLCAnZWwnLCAnaWQnLCAnYXR0cmlidXRlcycsICdjbGFzc05hbWUnLCAndGFnTmFtZScsICdldmVudHMnXTtcblxuICAvLyBTZXQgdXAgYWxsIGluaGVyaXRhYmxlICoqQmFja2JvbmUuVmlldyoqIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuXG4gIF8uZXh0ZW5kKFZpZXcucHJvdG90eXBlLCBFdmVudHMsIHtcblxuICAgIC8vIFRoZSBkZWZhdWx0IGB0YWdOYW1lYCBvZiBhIFZpZXcncyBlbGVtZW50IGlzIGBcImRpdlwiYC5cbiAgICB0YWdOYW1lOiAnZGl2JyxcblxuICAgIC8vIGpRdWVyeSBkZWxlZ2F0ZSBmb3IgZWxlbWVudCBsb29rdXAsIHNjb3BlZCB0byBET00gZWxlbWVudHMgd2l0aGluIHRoZVxuICAgIC8vIGN1cnJlbnQgdmlldy4gVGhpcyBzaG91bGQgYmUgcHJlZmVycmVkIHRvIGdsb2JhbCBsb29rdXBzIHdoZXJlIHBvc3NpYmxlLlxuICAgICQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChzZWxlY3Rvcik7XG4gICAgfSxcblxuICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93blxuICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSxcblxuICAgIC8vICoqcmVuZGVyKiogaXMgdGhlIGNvcmUgZnVuY3Rpb24gdGhhdCB5b3VyIHZpZXcgc2hvdWxkIG92ZXJyaWRlLCBpbiBvcmRlclxuICAgIC8vIHRvIHBvcHVsYXRlIGl0cyBlbGVtZW50IChgdGhpcy5lbGApLCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBIVE1MLiBUaGVcbiAgICAvLyBjb252ZW50aW9uIGlzIGZvciAqKnJlbmRlcioqIHRvIGFsd2F5cyByZXR1cm4gYHRoaXNgLlxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIHRoaXMgdmlldyBieSB0YWtpbmcgdGhlIGVsZW1lbnQgb3V0IG9mIHRoZSBET00sIGFuZCByZW1vdmluZyBhbnlcbiAgICAvLyBhcHBsaWNhYmxlIEJhY2tib25lLkV2ZW50cyBsaXN0ZW5lcnMuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZSgpO1xuICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3J3MgZWxlbWVudCAoYHRoaXMuZWxgIHByb3BlcnR5KSwgaW5jbHVkaW5nIGV2ZW50XG4gICAgLy8gcmUtZGVsZWdhdGlvbi5cbiAgICBzZXRFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBkZWxlZ2F0ZSkge1xuICAgICAgaWYgKHRoaXMuJGVsKSB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgIHRoaXMuJGVsID0gZWxlbWVudCBpbnN0YW5jZW9mIEJhY2tib25lLiQgPyBlbGVtZW50IDogQmFja2JvbmUuJChlbGVtZW50KTtcbiAgICAgIHRoaXMuZWwgPSB0aGlzLiRlbFswXTtcbiAgICAgIGlmIChkZWxlZ2F0ZSAhPT0gZmFsc2UpIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBTZXQgY2FsbGJhY2tzLCB3aGVyZSBgdGhpcy5ldmVudHNgIGlzIGEgaGFzaCBvZlxuICAgIC8vXG4gICAgLy8gKntcImV2ZW50IHNlbGVjdG9yXCI6IFwiY2FsbGJhY2tcIn0qXG4gICAgLy9cbiAgICAvLyAgICAge1xuICAgIC8vICAgICAgICdtb3VzZWRvd24gLnRpdGxlJzogICdlZGl0JyxcbiAgICAvLyAgICAgICAnY2xpY2sgLmJ1dHRvbic6ICAgICAnc2F2ZScsXG4gICAgLy8gICAgICAgJ2NsaWNrIC5vcGVuJzogICAgICAgZnVuY3Rpb24oZSkgeyAuLi4gfVxuICAgIC8vICAgICB9XG4gICAgLy9cbiAgICAvLyBwYWlycy4gQ2FsbGJhY2tzIHdpbGwgYmUgYm91bmQgdG8gdGhlIHZpZXcsIHdpdGggYHRoaXNgIHNldCBwcm9wZXJseS5cbiAgICAvLyBVc2VzIGV2ZW50IGRlbGVnYXRpb24gZm9yIGVmZmljaWVuY3kuXG4gICAgLy8gT21pdHRpbmcgdGhlIHNlbGVjdG9yIGJpbmRzIHRoZSBldmVudCB0byBgdGhpcy5lbGAuXG4gICAgLy8gVGhpcyBvbmx5IHdvcmtzIGZvciBkZWxlZ2F0ZS1hYmxlIGV2ZW50czogbm90IGBmb2N1c2AsIGBibHVyYCwgYW5kXG4gICAgLy8gbm90IGBjaGFuZ2VgLCBgc3VibWl0YCwgYW5kIGByZXNldGAgaW4gSW50ZXJuZXQgRXhwbG9yZXIuXG4gICAgZGVsZWdhdGVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cykge1xuICAgICAgaWYgKCEoZXZlbnRzIHx8IChldmVudHMgPSBfLnJlc3VsdCh0aGlzLCAnZXZlbnRzJykpKSkgcmV0dXJuIHRoaXM7XG4gICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBldmVudHMpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IGV2ZW50c1trZXldO1xuICAgICAgICBpZiAoIV8uaXNGdW5jdGlvbihtZXRob2QpKSBtZXRob2QgPSB0aGlzW2V2ZW50c1trZXldXTtcbiAgICAgICAgaWYgKCFtZXRob2QpIGNvbnRpbnVlO1xuXG4gICAgICAgIHZhciBtYXRjaCA9IGtleS5tYXRjaChkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIpO1xuICAgICAgICB2YXIgZXZlbnROYW1lID0gbWF0Y2hbMV0sIHNlbGVjdG9yID0gbWF0Y2hbMl07XG4gICAgICAgIG1ldGhvZCA9IF8uYmluZChtZXRob2QsIHRoaXMpO1xuICAgICAgICBldmVudE5hbWUgKz0gJy5kZWxlZ2F0ZUV2ZW50cycgKyB0aGlzLmNpZDtcbiAgICAgICAgaWYgKHNlbGVjdG9yID09PSAnJykge1xuICAgICAgICAgIHRoaXMuJGVsLm9uKGV2ZW50TmFtZSwgbWV0aG9kKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRlbC5vbihldmVudE5hbWUsIHNlbGVjdG9yLCBtZXRob2QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gQ2xlYXJzIGFsbCBjYWxsYmFja3MgcHJldmlvdXNseSBib3VuZCB0byB0aGUgdmlldyB3aXRoIGBkZWxlZ2F0ZUV2ZW50c2AuXG4gICAgLy8gWW91IHVzdWFsbHkgZG9uJ3QgbmVlZCB0byB1c2UgdGhpcywgYnV0IG1heSB3aXNoIHRvIGlmIHlvdSBoYXZlIG11bHRpcGxlXG4gICAgLy8gQmFja2JvbmUgdmlld3MgYXR0YWNoZWQgdG8gdGhlIHNhbWUgRE9NIGVsZW1lbnQuXG4gICAgdW5kZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRlbC5vZmYoJy5kZWxlZ2F0ZUV2ZW50cycgKyB0aGlzLmNpZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIFZpZXcgaGFzIGEgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uXG4gICAgLy8gSWYgYHRoaXMuZWxgIGlzIGEgc3RyaW5nLCBwYXNzIGl0IHRocm91Z2ggYCQoKWAsIHRha2UgdGhlIGZpcnN0XG4gICAgLy8gbWF0Y2hpbmcgZWxlbWVudCwgYW5kIHJlLWFzc2lnbiBpdCB0byBgZWxgLiBPdGhlcndpc2UsIGNyZWF0ZVxuICAgIC8vIGFuIGVsZW1lbnQgZnJvbSB0aGUgYGlkYCwgYGNsYXNzTmFtZWAgYW5kIGB0YWdOYW1lYCBwcm9wZXJ0aWVzLlxuICAgIF9lbnN1cmVFbGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5lbCkge1xuICAgICAgICB2YXIgYXR0cnMgPSBfLmV4dGVuZCh7fSwgXy5yZXN1bHQodGhpcywgJ2F0dHJpYnV0ZXMnKSk7XG4gICAgICAgIGlmICh0aGlzLmlkKSBhdHRycy5pZCA9IF8ucmVzdWx0KHRoaXMsICdpZCcpO1xuICAgICAgICBpZiAodGhpcy5jbGFzc05hbWUpIGF0dHJzWydjbGFzcyddID0gXy5yZXN1bHQodGhpcywgJ2NsYXNzTmFtZScpO1xuICAgICAgICB2YXIgJGVsID0gQmFja2JvbmUuJCgnPCcgKyBfLnJlc3VsdCh0aGlzLCAndGFnTmFtZScpICsgJz4nKS5hdHRyKGF0dHJzKTtcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50KCRlbCwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50KF8ucmVzdWx0KHRoaXMsICdlbCcpLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gIH0pO1xuXG4gIC8vIEJhY2tib25lLnN5bmNcbiAgLy8gLS0tLS0tLS0tLS0tLVxuXG4gIC8vIE92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gdG8gY2hhbmdlIHRoZSBtYW5uZXIgaW4gd2hpY2ggQmFja2JvbmUgcGVyc2lzdHNcbiAgLy8gbW9kZWxzIHRvIHRoZSBzZXJ2ZXIuIFlvdSB3aWxsIGJlIHBhc3NlZCB0aGUgdHlwZSBvZiByZXF1ZXN0LCBhbmQgdGhlXG4gIC8vIG1vZGVsIGluIHF1ZXN0aW9uLiBCeSBkZWZhdWx0LCBtYWtlcyBhIFJFU1RmdWwgQWpheCByZXF1ZXN0XG4gIC8vIHRvIHRoZSBtb2RlbCdzIGB1cmwoKWAuIFNvbWUgcG9zc2libGUgY3VzdG9taXphdGlvbnMgY291bGQgYmU6XG4gIC8vXG4gIC8vICogVXNlIGBzZXRUaW1lb3V0YCB0byBiYXRjaCByYXBpZC1maXJlIHVwZGF0ZXMgaW50byBhIHNpbmdsZSByZXF1ZXN0LlxuICAvLyAqIFNlbmQgdXAgdGhlIG1vZGVscyBhcyBYTUwgaW5zdGVhZCBvZiBKU09OLlxuICAvLyAqIFBlcnNpc3QgbW9kZWxzIHZpYSBXZWJTb2NrZXRzIGluc3RlYWQgb2YgQWpheC5cbiAgLy9cbiAgLy8gVHVybiBvbiBgQmFja2JvbmUuZW11bGF0ZUhUVFBgIGluIG9yZGVyIHRvIHNlbmQgYFBVVGAgYW5kIGBERUxFVEVgIHJlcXVlc3RzXG4gIC8vIGFzIGBQT1NUYCwgd2l0aCBhIGBfbWV0aG9kYCBwYXJhbWV0ZXIgY29udGFpbmluZyB0aGUgdHJ1ZSBIVFRQIG1ldGhvZCxcbiAgLy8gYXMgd2VsbCBhcyBhbGwgcmVxdWVzdHMgd2l0aCB0aGUgYm9keSBhcyBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYFxuICAvLyBpbnN0ZWFkIG9mIGBhcHBsaWNhdGlvbi9qc29uYCB3aXRoIHRoZSBtb2RlbCBpbiBhIHBhcmFtIG5hbWVkIGBtb2RlbGAuXG4gIC8vIFVzZWZ1bCB3aGVuIGludGVyZmFjaW5nIHdpdGggc2VydmVyLXNpZGUgbGFuZ3VhZ2VzIGxpa2UgKipQSFAqKiB0aGF0IG1ha2VcbiAgLy8gaXQgZGlmZmljdWx0IHRvIHJlYWQgdGhlIGJvZHkgb2YgYFBVVGAgcmVxdWVzdHMuXG4gIEJhY2tib25lLnN5bmMgPSBmdW5jdGlvbihtZXRob2QsIG1vZGVsLCBvcHRpb25zKSB7XG4gICAgdmFyIHR5cGUgPSBtZXRob2RNYXBbbWV0aG9kXTtcblxuICAgIC8vIERlZmF1bHQgb3B0aW9ucywgdW5sZXNzIHNwZWNpZmllZC5cbiAgICBfLmRlZmF1bHRzKG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSksIHtcbiAgICAgIGVtdWxhdGVIVFRQOiBCYWNrYm9uZS5lbXVsYXRlSFRUUCxcbiAgICAgIGVtdWxhdGVKU09OOiBCYWNrYm9uZS5lbXVsYXRlSlNPTlxuICAgIH0pO1xuXG4gICAgLy8gRGVmYXVsdCBKU09OLXJlcXVlc3Qgb3B0aW9ucy5cbiAgICB2YXIgcGFyYW1zID0ge3R5cGU6IHR5cGUsIGRhdGFUeXBlOiAnanNvbid9O1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgd2UgaGF2ZSBhIFVSTC5cbiAgICBpZiAoIW9wdGlvbnMudXJsKSB7XG4gICAgICBwYXJhbXMudXJsID0gXy5yZXN1bHQobW9kZWwsICd1cmwnKSB8fCB1cmxFcnJvcigpO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSB0aGF0IHdlIGhhdmUgdGhlIGFwcHJvcHJpYXRlIHJlcXVlc3QgZGF0YS5cbiAgICBpZiAob3B0aW9ucy5kYXRhID09IG51bGwgJiYgbW9kZWwgJiYgKG1ldGhvZCA9PT0gJ2NyZWF0ZScgfHwgbWV0aG9kID09PSAndXBkYXRlJyB8fCBtZXRob2QgPT09ICdwYXRjaCcpKSB7XG4gICAgICBwYXJhbXMuY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICBwYXJhbXMuZGF0YSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYXR0cnMgfHwgbW9kZWwudG9KU09OKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICAvLyBGb3Igb2xkZXIgc2VydmVycywgZW11bGF0ZSBKU09OIGJ5IGVuY29kaW5nIHRoZSByZXF1ZXN0IGludG8gYW4gSFRNTC1mb3JtLlxuICAgIGlmIChvcHRpb25zLmVtdWxhdGVKU09OKSB7XG4gICAgICBwYXJhbXMuY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgICAgIHBhcmFtcy5kYXRhID0gcGFyYW1zLmRhdGEgPyB7bW9kZWw6IHBhcmFtcy5kYXRhfSA6IHt9O1xuICAgIH1cblxuICAgIC8vIEZvciBvbGRlciBzZXJ2ZXJzLCBlbXVsYXRlIEhUVFAgYnkgbWltaWNraW5nIHRoZSBIVFRQIG1ldGhvZCB3aXRoIGBfbWV0aG9kYFxuICAgIC8vIEFuZCBhbiBgWC1IVFRQLU1ldGhvZC1PdmVycmlkZWAgaGVhZGVyLlxuICAgIGlmIChvcHRpb25zLmVtdWxhdGVIVFRQICYmICh0eXBlID09PSAnUFVUJyB8fCB0eXBlID09PSAnREVMRVRFJyB8fCB0eXBlID09PSAnUEFUQ0gnKSkge1xuICAgICAgcGFyYW1zLnR5cGUgPSAnUE9TVCc7XG4gICAgICBpZiAob3B0aW9ucy5lbXVsYXRlSlNPTikgcGFyYW1zLmRhdGEuX21ldGhvZCA9IHR5cGU7XG4gICAgICB2YXIgYmVmb3JlU2VuZCA9IG9wdGlvbnMuYmVmb3JlU2VuZDtcbiAgICAgIG9wdGlvbnMuYmVmb3JlU2VuZCA9IGZ1bmN0aW9uKHhocikge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1IVFRQLU1ldGhvZC1PdmVycmlkZScsIHR5cGUpO1xuICAgICAgICBpZiAoYmVmb3JlU2VuZCkgcmV0dXJuIGJlZm9yZVNlbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRG9uJ3QgcHJvY2VzcyBkYXRhIG9uIGEgbm9uLUdFVCByZXF1ZXN0LlxuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ0dFVCcgJiYgIW9wdGlvbnMuZW11bGF0ZUpTT04pIHtcbiAgICAgIHBhcmFtcy5wcm9jZXNzRGF0YSA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIElmIHdlJ3JlIHNlbmRpbmcgYSBgUEFUQ0hgIHJlcXVlc3QsIGFuZCB3ZSdyZSBpbiBhbiBvbGQgSW50ZXJuZXQgRXhwbG9yZXJcbiAgICAvLyB0aGF0IHN0aWxsIGhhcyBBY3RpdmVYIGVuYWJsZWQgYnkgZGVmYXVsdCwgb3ZlcnJpZGUgalF1ZXJ5IHRvIHVzZSB0aGF0XG4gICAgLy8gZm9yIFhIUiBpbnN0ZWFkLiBSZW1vdmUgdGhpcyBsaW5lIHdoZW4galF1ZXJ5IHN1cHBvcnRzIGBQQVRDSGAgb24gSUU4LlxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ1BBVENIJyAmJiBub1hoclBhdGNoKSB7XG4gICAgICBwYXJhbXMueGhyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHRoZSByZXF1ZXN0LCBhbGxvd2luZyB0aGUgdXNlciB0byBvdmVycmlkZSBhbnkgQWpheCBvcHRpb25zLlxuICAgIHZhciB4aHIgPSBvcHRpb25zLnhociA9IEJhY2tib25lLmFqYXgoXy5leHRlbmQocGFyYW1zLCBvcHRpb25zKSk7XG4gICAgbW9kZWwudHJpZ2dlcigncmVxdWVzdCcsIG1vZGVsLCB4aHIsIG9wdGlvbnMpO1xuICAgIHJldHVybiB4aHI7XG4gIH07XG5cbiAgdmFyIG5vWGhyUGF0Y2ggPVxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICEhd2luZG93LkFjdGl2ZVhPYmplY3QgJiZcbiAgICAgICEod2luZG93LlhNTEh0dHBSZXF1ZXN0ICYmIChuZXcgWE1MSHR0cFJlcXVlc3QpLmRpc3BhdGNoRXZlbnQpO1xuXG4gIC8vIE1hcCBmcm9tIENSVUQgdG8gSFRUUCBmb3Igb3VyIGRlZmF1bHQgYEJhY2tib25lLnN5bmNgIGltcGxlbWVudGF0aW9uLlxuICB2YXIgbWV0aG9kTWFwID0ge1xuICAgICdjcmVhdGUnOiAnUE9TVCcsXG4gICAgJ3VwZGF0ZSc6ICdQVVQnLFxuICAgICdwYXRjaCc6ICAnUEFUQ0gnLFxuICAgICdkZWxldGUnOiAnREVMRVRFJyxcbiAgICAncmVhZCc6ICAgJ0dFVCdcbiAgfTtcblxuICAvLyBTZXQgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYEJhY2tib25lLmFqYXhgIHRvIHByb3h5IHRocm91Z2ggdG8gYCRgLlxuICAvLyBPdmVycmlkZSB0aGlzIGlmIHlvdSdkIGxpa2UgdG8gdXNlIGEgZGlmZmVyZW50IGxpYnJhcnkuXG4gIEJhY2tib25lLmFqYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gQmFja2JvbmUuJC5hamF4LmFwcGx5KEJhY2tib25lLiQsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQmFja2JvbmUuUm91dGVyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJvdXRlcnMgbWFwIGZhdXgtVVJMcyB0byBhY3Rpb25zLCBhbmQgZmlyZSBldmVudHMgd2hlbiByb3V0ZXMgYXJlXG4gIC8vIG1hdGNoZWQuIENyZWF0aW5nIGEgbmV3IG9uZSBzZXRzIGl0cyBgcm91dGVzYCBoYXNoLCBpZiBub3Qgc2V0IHN0YXRpY2FsbHkuXG4gIHZhciBSb3V0ZXIgPSBCYWNrYm9uZS5Sb3V0ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICBpZiAob3B0aW9ucy5yb3V0ZXMpIHRoaXMucm91dGVzID0gb3B0aW9ucy5yb3V0ZXM7XG4gICAgdGhpcy5fYmluZFJvdXRlcygpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIC8vIENhY2hlZCByZWd1bGFyIGV4cHJlc3Npb25zIGZvciBtYXRjaGluZyBuYW1lZCBwYXJhbSBwYXJ0cyBhbmQgc3BsYXR0ZWRcbiAgLy8gcGFydHMgb2Ygcm91dGUgc3RyaW5ncy5cbiAgdmFyIG9wdGlvbmFsUGFyYW0gPSAvXFwoKC4qPylcXCkvZztcbiAgdmFyIG5hbWVkUGFyYW0gICAgPSAvKFxcKFxcPyk/OlxcdysvZztcbiAgdmFyIHNwbGF0UGFyYW0gICAgPSAvXFwqXFx3Ky9nO1xuICB2YXIgZXNjYXBlUmVnRXhwICA9IC9bXFwte31cXFtcXF0rPy4sXFxcXFxcXiR8I1xcc10vZztcblxuICAvLyBTZXQgdXAgYWxsIGluaGVyaXRhYmxlICoqQmFja2JvbmUuUm91dGVyKiogcHJvcGVydGllcyBhbmQgbWV0aG9kcy5cbiAgXy5leHRlbmQoUm91dGVyLnByb3RvdHlwZSwgRXZlbnRzLCB7XG5cbiAgICAvLyBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd25cbiAgICAvLyBpbml0aWFsaXphdGlvbiBsb2dpYy5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sXG5cbiAgICAvLyBNYW51YWxseSBiaW5kIGEgc2luZ2xlIG5hbWVkIHJvdXRlIHRvIGEgY2FsbGJhY2suIEZvciBleGFtcGxlOlxuICAgIC8vXG4gICAgLy8gICAgIHRoaXMucm91dGUoJ3NlYXJjaC86cXVlcnkvcDpudW0nLCAnc2VhcmNoJywgZnVuY3Rpb24ocXVlcnksIG51bSkge1xuICAgIC8vICAgICAgIC4uLlxuICAgIC8vICAgICB9KTtcbiAgICAvL1xuICAgIHJvdXRlOiBmdW5jdGlvbihyb3V0ZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmICghXy5pc1JlZ0V4cChyb3V0ZSkpIHJvdXRlID0gdGhpcy5fcm91dGVUb1JlZ0V4cChyb3V0ZSk7XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKG5hbWUpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmFtZTtcbiAgICAgICAgbmFtZSA9ICcnO1xuICAgICAgfVxuICAgICAgaWYgKCFjYWxsYmFjaykgY2FsbGJhY2sgPSB0aGlzW25hbWVdO1xuICAgICAgdmFyIHJvdXRlciA9IHRoaXM7XG4gICAgICBCYWNrYm9uZS5oaXN0b3J5LnJvdXRlKHJvdXRlLCBmdW5jdGlvbihmcmFnbWVudCkge1xuICAgICAgICB2YXIgYXJncyA9IHJvdXRlci5fZXh0cmFjdFBhcmFtZXRlcnMocm91dGUsIGZyYWdtZW50KTtcbiAgICAgICAgcm91dGVyLmV4ZWN1dGUoY2FsbGJhY2ssIGFyZ3MpO1xuICAgICAgICByb3V0ZXIudHJpZ2dlci5hcHBseShyb3V0ZXIsIFsncm91dGU6JyArIG5hbWVdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIHJvdXRlci50cmlnZ2VyKCdyb3V0ZScsIG5hbWUsIGFyZ3MpO1xuICAgICAgICBCYWNrYm9uZS5oaXN0b3J5LnRyaWdnZXIoJ3JvdXRlJywgcm91dGVyLCBuYW1lLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIEV4ZWN1dGUgYSByb3V0ZSBoYW5kbGVyIHdpdGggdGhlIHByb3ZpZGVkIHBhcmFtZXRlcnMuICBUaGlzIGlzIGFuXG4gICAgLy8gZXhjZWxsZW50IHBsYWNlIHRvIGRvIHByZS1yb3V0ZSBzZXR1cCBvciBwb3N0LXJvdXRlIGNsZWFudXAuXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24oY2FsbGJhY2ssIGFyZ3MpIHtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSxcblxuICAgIC8vIFNpbXBsZSBwcm94eSB0byBgQmFja2JvbmUuaGlzdG9yeWAgdG8gc2F2ZSBhIGZyYWdtZW50IGludG8gdGhlIGhpc3RvcnkuXG4gICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7XG4gICAgICBCYWNrYm9uZS5oaXN0b3J5Lm5hdmlnYXRlKGZyYWdtZW50LCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBCaW5kIGFsbCBkZWZpbmVkIHJvdXRlcyB0byBgQmFja2JvbmUuaGlzdG9yeWAuIFdlIGhhdmUgdG8gcmV2ZXJzZSB0aGVcbiAgICAvLyBvcmRlciBvZiB0aGUgcm91dGVzIGhlcmUgdG8gc3VwcG9ydCBiZWhhdmlvciB3aGVyZSB0aGUgbW9zdCBnZW5lcmFsXG4gICAgLy8gcm91dGVzIGNhbiBiZSBkZWZpbmVkIGF0IHRoZSBib3R0b20gb2YgdGhlIHJvdXRlIG1hcC5cbiAgICBfYmluZFJvdXRlczogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMucm91dGVzKSByZXR1cm47XG4gICAgICB0aGlzLnJvdXRlcyA9IF8ucmVzdWx0KHRoaXMsICdyb3V0ZXMnKTtcbiAgICAgIHZhciByb3V0ZSwgcm91dGVzID0gXy5rZXlzKHRoaXMucm91dGVzKTtcbiAgICAgIHdoaWxlICgocm91dGUgPSByb3V0ZXMucG9wKCkpICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5yb3V0ZShyb3V0ZSwgdGhpcy5yb3V0ZXNbcm91dGVdKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIHJvdXRlIHN0cmluZyBpbnRvIGEgcmVndWxhciBleHByZXNzaW9uLCBzdWl0YWJsZSBmb3IgbWF0Y2hpbmdcbiAgICAvLyBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uIGhhc2guXG4gICAgX3JvdXRlVG9SZWdFeHA6IGZ1bmN0aW9uKHJvdXRlKSB7XG4gICAgICByb3V0ZSA9IHJvdXRlLnJlcGxhY2UoZXNjYXBlUmVnRXhwLCAnXFxcXCQmJylcbiAgICAgICAgICAgICAgICAgICAucmVwbGFjZShvcHRpb25hbFBhcmFtLCAnKD86JDEpPycpXG4gICAgICAgICAgICAgICAgICAgLnJlcGxhY2UobmFtZWRQYXJhbSwgZnVuY3Rpb24obWF0Y2gsIG9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uYWwgPyBtYXRjaCA6ICcoW14vP10rKSc7XG4gICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAucmVwbGFjZShzcGxhdFBhcmFtLCAnKFteP10qPyknKTtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHJvdXRlICsgJyg/OlxcXFw/KFtcXFxcc1xcXFxTXSopKT8kJyk7XG4gICAgfSxcblxuICAgIC8vIEdpdmVuIGEgcm91dGUsIGFuZCBhIFVSTCBmcmFnbWVudCB0aGF0IGl0IG1hdGNoZXMsIHJldHVybiB0aGUgYXJyYXkgb2ZcbiAgICAvLyBleHRyYWN0ZWQgZGVjb2RlZCBwYXJhbWV0ZXJzLiBFbXB0eSBvciB1bm1hdGNoZWQgcGFyYW1ldGVycyB3aWxsIGJlXG4gICAgLy8gdHJlYXRlZCBhcyBgbnVsbGAgdG8gbm9ybWFsaXplIGNyb3NzLWJyb3dzZXIgYmVoYXZpb3IuXG4gICAgX2V4dHJhY3RQYXJhbWV0ZXJzOiBmdW5jdGlvbihyb3V0ZSwgZnJhZ21lbnQpIHtcbiAgICAgIHZhciBwYXJhbXMgPSByb3V0ZS5leGVjKGZyYWdtZW50KS5zbGljZSgxKTtcbiAgICAgIHJldHVybiBfLm1hcChwYXJhbXMsIGZ1bmN0aW9uKHBhcmFtLCBpKSB7XG4gICAgICAgIC8vIERvbid0IGRlY29kZSB0aGUgc2VhcmNoIHBhcmFtcy5cbiAgICAgICAgaWYgKGkgPT09IHBhcmFtcy5sZW5ndGggLSAxKSByZXR1cm4gcGFyYW0gfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIHBhcmFtID8gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtKSA6IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gQmFja2JvbmUuSGlzdG9yeVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gSGFuZGxlcyBjcm9zcy1icm93c2VyIGhpc3RvcnkgbWFuYWdlbWVudCwgYmFzZWQgb24gZWl0aGVyXG4gIC8vIFtwdXNoU3RhdGVdKGh0dHA6Ly9kaXZlaW50b2h0bWw1LmluZm8vaGlzdG9yeS5odG1sKSBhbmQgcmVhbCBVUkxzLCBvclxuICAvLyBbb25oYXNoY2hhbmdlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS93aW5kb3cub25oYXNoY2hhbmdlKVxuICAvLyBhbmQgVVJMIGZyYWdtZW50cy4gSWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgbmVpdGhlciAob2xkIElFLCBuYXRjaCksXG4gIC8vIGZhbGxzIGJhY2sgdG8gcG9sbGluZy5cbiAgdmFyIEhpc3RvcnkgPSBCYWNrYm9uZS5IaXN0b3J5ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIF8uYmluZEFsbCh0aGlzLCAnY2hlY2tVcmwnKTtcblxuICAgIC8vIEVuc3VyZSB0aGF0IGBIaXN0b3J5YCBjYW4gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBicm93c2VyLlxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5sb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICAgIHRoaXMuaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICAgIH1cbiAgfTtcblxuICAvLyBDYWNoZWQgcmVnZXggZm9yIHN0cmlwcGluZyBhIGxlYWRpbmcgaGFzaC9zbGFzaCBhbmQgdHJhaWxpbmcgc3BhY2UuXG4gIHZhciByb3V0ZVN0cmlwcGVyID0gL15bI1xcL118XFxzKyQvZztcblxuICAvLyBDYWNoZWQgcmVnZXggZm9yIHN0cmlwcGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzLlxuICB2YXIgcm9vdFN0cmlwcGVyID0gL15cXC8rfFxcLyskL2c7XG5cbiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBkZXRlY3RpbmcgTVNJRS5cbiAgdmFyIGlzRXhwbG9yZXIgPSAvbXNpZSBbXFx3Ll0rLztcblxuICAvLyBDYWNoZWQgcmVnZXggZm9yIHJlbW92aW5nIGEgdHJhaWxpbmcgc2xhc2guXG4gIHZhciB0cmFpbGluZ1NsYXNoID0gL1xcLyQvO1xuXG4gIC8vIENhY2hlZCByZWdleCBmb3Igc3RyaXBwaW5nIHVybHMgb2YgaGFzaC5cbiAgdmFyIHBhdGhTdHJpcHBlciA9IC8jLiokLztcblxuICAvLyBIYXMgdGhlIGhpc3RvcnkgaGFuZGxpbmcgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQ/XG4gIEhpc3Rvcnkuc3RhcnRlZCA9IGZhbHNlO1xuXG4gIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5IaXN0b3J5KiogcHJvcGVydGllcyBhbmQgbWV0aG9kcy5cbiAgXy5leHRlbmQoSGlzdG9yeS5wcm90b3R5cGUsIEV2ZW50cywge1xuXG4gICAgLy8gVGhlIGRlZmF1bHQgaW50ZXJ2YWwgdG8gcG9sbCBmb3IgaGFzaCBjaGFuZ2VzLCBpZiBuZWNlc3NhcnksIGlzXG4gICAgLy8gdHdlbnR5IHRpbWVzIGEgc2Vjb25kLlxuICAgIGludGVydmFsOiA1MCxcblxuICAgIC8vIEFyZSB3ZSBhdCB0aGUgYXBwIHJvb3Q/XG4gICAgYXRSb290OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1teXFwvXSQvLCAnJCYvJykgPT09IHRoaXMucm9vdDtcbiAgICB9LFxuXG4gICAgLy8gR2V0cyB0aGUgdHJ1ZSBoYXNoIHZhbHVlLiBDYW5ub3QgdXNlIGxvY2F0aW9uLmhhc2ggZGlyZWN0bHkgZHVlIHRvIGJ1Z1xuICAgIC8vIGluIEZpcmVmb3ggd2hlcmUgbG9jYXRpb24uaGFzaCB3aWxsIGFsd2F5cyBiZSBkZWNvZGVkLlxuICAgIGdldEhhc2g6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgICAgdmFyIG1hdGNoID0gKHdpbmRvdyB8fCB0aGlzKS5sb2NhdGlvbi5ocmVmLm1hdGNoKC8jKC4qKSQvKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJyc7XG4gICAgfSxcblxuICAgIC8vIEdldCB0aGUgY3Jvc3MtYnJvd3NlciBub3JtYWxpemVkIFVSTCBmcmFnbWVudCwgZWl0aGVyIGZyb20gdGhlIFVSTCxcbiAgICAvLyB0aGUgaGFzaCwgb3IgdGhlIG92ZXJyaWRlLlxuICAgIGdldEZyYWdtZW50OiBmdW5jdGlvbihmcmFnbWVudCwgZm9yY2VQdXNoU3RhdGUpIHtcbiAgICAgIGlmIChmcmFnbWVudCA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUgfHwgIXRoaXMuX3dhbnRzSGFzaENoYW5nZSB8fCBmb3JjZVB1c2hTdGF0ZSkge1xuICAgICAgICAgIGZyYWdtZW50ID0gZGVjb2RlVVJJKHRoaXMubG9jYXRpb24ucGF0aG5hbWUgKyB0aGlzLmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3QucmVwbGFjZSh0cmFpbGluZ1NsYXNoLCAnJyk7XG4gICAgICAgICAgaWYgKCFmcmFnbWVudC5pbmRleE9mKHJvb3QpKSBmcmFnbWVudCA9IGZyYWdtZW50LnNsaWNlKHJvb3QubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZnJhZ21lbnQucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7XG4gICAgfSxcblxuICAgIC8vIFN0YXJ0IHRoZSBoYXNoIGNoYW5nZSBoYW5kbGluZywgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgY3VycmVudCBVUkwgbWF0Y2hlc1xuICAgIC8vIGFuIGV4aXN0aW5nIHJvdXRlLCBhbmQgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmIChIaXN0b3J5LnN0YXJ0ZWQpIHRocm93IG5ldyBFcnJvcihcIkJhY2tib25lLmhpc3RvcnkgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkXCIpO1xuICAgICAgSGlzdG9yeS5zdGFydGVkID0gdHJ1ZTtcblxuICAgICAgLy8gRmlndXJlIG91dCB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uLiBEbyB3ZSBuZWVkIGFuIGlmcmFtZT9cbiAgICAgIC8vIElzIHB1c2hTdGF0ZSBkZXNpcmVkIC4uLiBpcyBpdCBhdmFpbGFibGU/XG4gICAgICB0aGlzLm9wdGlvbnMgICAgICAgICAgPSBfLmV4dGVuZCh7cm9vdDogJy8nfSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMucm9vdCAgICAgICAgICAgICA9IHRoaXMub3B0aW9ucy5yb290O1xuICAgICAgdGhpcy5fd2FudHNIYXNoQ2hhbmdlID0gdGhpcy5vcHRpb25zLmhhc2hDaGFuZ2UgIT09IGZhbHNlO1xuICAgICAgdGhpcy5fd2FudHNQdXNoU3RhdGUgID0gISF0aGlzLm9wdGlvbnMucHVzaFN0YXRlO1xuICAgICAgdGhpcy5faGFzUHVzaFN0YXRlICAgID0gISEodGhpcy5vcHRpb25zLnB1c2hTdGF0ZSAmJiB0aGlzLmhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5LnB1c2hTdGF0ZSk7XG4gICAgICB2YXIgZnJhZ21lbnQgICAgICAgICAgPSB0aGlzLmdldEZyYWdtZW50KCk7XG4gICAgICB2YXIgZG9jTW9kZSAgICAgICAgICAgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG4gICAgICB2YXIgb2xkSUUgICAgICAgICAgICAgPSAoaXNFeHBsb3Jlci5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSkgJiYgKCFkb2NNb2RlIHx8IGRvY01vZGUgPD0gNykpO1xuXG4gICAgICAvLyBOb3JtYWxpemUgcm9vdCB0byBhbHdheXMgaW5jbHVkZSBhIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoLlxuICAgICAgdGhpcy5yb290ID0gKCcvJyArIHRoaXMucm9vdCArICcvJykucmVwbGFjZShyb290U3RyaXBwZXIsICcvJyk7XG5cbiAgICAgIGlmIChvbGRJRSAmJiB0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHtcbiAgICAgICAgdmFyIGZyYW1lID0gQmFja2JvbmUuJCgnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiB0YWJpbmRleD1cIi0xXCI+Jyk7XG4gICAgICAgIHRoaXMuaWZyYW1lID0gZnJhbWUuaGlkZSgpLmFwcGVuZFRvKCdib2R5JylbMF0uY29udGVudFdpbmRvdztcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZShmcmFnbWVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERlcGVuZGluZyBvbiB3aGV0aGVyIHdlJ3JlIHVzaW5nIHB1c2hTdGF0ZSBvciBoYXNoZXMsIGFuZCB3aGV0aGVyXG4gICAgICAvLyAnb25oYXNoY2hhbmdlJyBpcyBzdXBwb3J0ZWQsIGRldGVybWluZSBob3cgd2UgY2hlY2sgdGhlIFVSTCBzdGF0ZS5cbiAgICAgIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUpIHtcbiAgICAgICAgQmFja2JvbmUuJCh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRoaXMuY2hlY2tVcmwpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiYgKCdvbmhhc2hjaGFuZ2UnIGluIHdpbmRvdykgJiYgIW9sZElFKSB7XG4gICAgICAgIEJhY2tib25lLiQod2luZG93KS5vbignaGFzaGNoYW5nZScsIHRoaXMuY2hlY2tVcmwpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tVcmxJbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMuY2hlY2tVcmwsIHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgfVxuXG4gICAgICAvLyBEZXRlcm1pbmUgaWYgd2UgbmVlZCB0byBjaGFuZ2UgdGhlIGJhc2UgdXJsLCBmb3IgYSBwdXNoU3RhdGUgbGlua1xuICAgICAgLy8gb3BlbmVkIGJ5IGEgbm9uLXB1c2hTdGF0ZSBicm93c2VyLlxuICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50O1xuICAgICAgdmFyIGxvYyA9IHRoaXMubG9jYXRpb247XG5cbiAgICAgIC8vIFRyYW5zaXRpb24gZnJvbSBoYXNoQ2hhbmdlIHRvIHB1c2hTdGF0ZSBvciB2aWNlIHZlcnNhIGlmIGJvdGggYXJlXG4gICAgICAvLyByZXF1ZXN0ZWQuXG4gICAgICBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlICYmIHRoaXMuX3dhbnRzUHVzaFN0YXRlKSB7XG5cbiAgICAgICAgLy8gSWYgd2UndmUgc3RhcnRlZCBvZmYgd2l0aCBhIHJvdXRlIGZyb20gYSBgcHVzaFN0YXRlYC1lbmFibGVkXG4gICAgICAgIC8vIGJyb3dzZXIsIGJ1dCB3ZSdyZSBjdXJyZW50bHkgaW4gYSBicm93c2VyIHRoYXQgZG9lc24ndCBzdXBwb3J0IGl0Li4uXG4gICAgICAgIGlmICghdGhpcy5faGFzUHVzaFN0YXRlICYmICF0aGlzLmF0Um9vdCgpKSB7XG4gICAgICAgICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQobnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgdGhpcy5sb2NhdGlvbi5yZXBsYWNlKHRoaXMucm9vdCArICcjJyArIHRoaXMuZnJhZ21lbnQpO1xuICAgICAgICAgIC8vIFJldHVybiBpbW1lZGlhdGVseSBhcyBicm93c2VyIHdpbGwgZG8gcmVkaXJlY3QgdG8gbmV3IHVybFxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIC8vIE9yIGlmIHdlJ3ZlIHN0YXJ0ZWQgb3V0IHdpdGggYSBoYXNoLWJhc2VkIHJvdXRlLCBidXQgd2UncmUgY3VycmVudGx5XG4gICAgICAgIC8vIGluIGEgYnJvd3NlciB3aGVyZSBpdCBjb3VsZCBiZSBgcHVzaFN0YXRlYC1iYXNlZCBpbnN0ZWFkLi4uXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5faGFzUHVzaFN0YXRlICYmIHRoaXMuYXRSb290KCkgJiYgbG9jLmhhc2gpIHtcbiAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRIYXNoKCkucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7XG4gICAgICAgICAgdGhpcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgZG9jdW1lbnQudGl0bGUsIHRoaXMucm9vdCArIHRoaXMuZnJhZ21lbnQpO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2lsZW50KSByZXR1cm4gdGhpcy5sb2FkVXJsKCk7XG4gICAgfSxcblxuICAgIC8vIERpc2FibGUgQmFja2JvbmUuaGlzdG9yeSwgcGVyaGFwcyB0ZW1wb3JhcmlseS4gTm90IHVzZWZ1bCBpbiBhIHJlYWwgYXBwLFxuICAgIC8vIGJ1dCBwb3NzaWJseSB1c2VmdWwgZm9yIHVuaXQgdGVzdGluZyBSb3V0ZXJzLlxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgQmFja2JvbmUuJCh3aW5kb3cpLm9mZigncG9wc3RhdGUnLCB0aGlzLmNoZWNrVXJsKS5vZmYoJ2hhc2hjaGFuZ2UnLCB0aGlzLmNoZWNrVXJsKTtcbiAgICAgIGlmICh0aGlzLl9jaGVja1VybEludGVydmFsKSBjbGVhckludGVydmFsKHRoaXMuX2NoZWNrVXJsSW50ZXJ2YWwpO1xuICAgICAgSGlzdG9yeS5zdGFydGVkID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIEFkZCBhIHJvdXRlIHRvIGJlIHRlc3RlZCB3aGVuIHRoZSBmcmFnbWVudCBjaGFuZ2VzLiBSb3V0ZXMgYWRkZWQgbGF0ZXJcbiAgICAvLyBtYXkgb3ZlcnJpZGUgcHJldmlvdXMgcm91dGVzLlxuICAgIHJvdXRlOiBmdW5jdGlvbihyb3V0ZSwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMudW5zaGlmdCh7cm91dGU6IHJvdXRlLCBjYWxsYmFjazogY2FsbGJhY2t9KTtcbiAgICB9LFxuXG4gICAgLy8gQ2hlY2tzIHRoZSBjdXJyZW50IFVSTCB0byBzZWUgaWYgaXQgaGFzIGNoYW5nZWQsIGFuZCBpZiBpdCBoYXMsXG4gICAgLy8gY2FsbHMgYGxvYWRVcmxgLCBub3JtYWxpemluZyBhY3Jvc3MgdGhlIGhpZGRlbiBpZnJhbWUuXG4gICAgY2hlY2tVcmw6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5nZXRGcmFnbWVudCgpO1xuICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZnJhZ21lbnQgJiYgdGhpcy5pZnJhbWUpIHtcbiAgICAgICAgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudCA9PT0gdGhpcy5mcmFnbWVudCkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKHRoaXMuaWZyYW1lKSB0aGlzLm5hdmlnYXRlKGN1cnJlbnQpO1xuICAgICAgdGhpcy5sb2FkVXJsKCk7XG4gICAgfSxcblxuICAgIC8vIEF0dGVtcHQgdG8gbG9hZCB0aGUgY3VycmVudCBVUkwgZnJhZ21lbnQuIElmIGEgcm91dGUgc3VjY2VlZHMgd2l0aCBhXG4gICAgLy8gbWF0Y2gsIHJldHVybnMgYHRydWVgLiBJZiBubyBkZWZpbmVkIHJvdXRlcyBtYXRjaGVzIHRoZSBmcmFnbWVudCxcbiAgICAvLyByZXR1cm5zIGBmYWxzZWAuXG4gICAgbG9hZFVybDogZnVuY3Rpb24oZnJhZ21lbnQpIHtcbiAgICAgIGZyYWdtZW50ID0gdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoZnJhZ21lbnQpO1xuICAgICAgcmV0dXJuIF8uYW55KHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGhhbmRsZXIucm91dGUudGVzdChmcmFnbWVudCkpIHtcbiAgICAgICAgICBoYW5kbGVyLmNhbGxiYWNrKGZyYWdtZW50KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIFNhdmUgYSBmcmFnbWVudCBpbnRvIHRoZSBoYXNoIGhpc3RvcnksIG9yIHJlcGxhY2UgdGhlIFVSTCBzdGF0ZSBpZiB0aGVcbiAgICAvLyAncmVwbGFjZScgb3B0aW9uIGlzIHBhc3NlZC4gWW91IGFyZSByZXNwb25zaWJsZSBmb3IgcHJvcGVybHkgVVJMLWVuY29kaW5nXG4gICAgLy8gdGhlIGZyYWdtZW50IGluIGFkdmFuY2UuXG4gICAgLy9cbiAgICAvLyBUaGUgb3B0aW9ucyBvYmplY3QgY2FuIGNvbnRhaW4gYHRyaWdnZXI6IHRydWVgIGlmIHlvdSB3aXNoIHRvIGhhdmUgdGhlXG4gICAgLy8gcm91dGUgY2FsbGJhY2sgYmUgZmlyZWQgKG5vdCB1c3VhbGx5IGRlc2lyYWJsZSksIG9yIGByZXBsYWNlOiB0cnVlYCwgaWZcbiAgICAvLyB5b3Ugd2lzaCB0byBtb2RpZnkgdGhlIGN1cnJlbnQgVVJMIHdpdGhvdXQgYWRkaW5nIGFuIGVudHJ5IHRvIHRoZSBoaXN0b3J5LlxuICAgIG5hdmlnYXRlOiBmdW5jdGlvbihmcmFnbWVudCwgb3B0aW9ucykge1xuICAgICAgaWYgKCFIaXN0b3J5LnN0YXJ0ZWQpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICghb3B0aW9ucyB8fCBvcHRpb25zID09PSB0cnVlKSBvcHRpb25zID0ge3RyaWdnZXI6ICEhb3B0aW9uc307XG5cbiAgICAgIHZhciB1cmwgPSB0aGlzLnJvb3QgKyAoZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KGZyYWdtZW50IHx8ICcnKSk7XG5cbiAgICAgIC8vIFN0cmlwIHRoZSBoYXNoIGZvciBtYXRjaGluZy5cbiAgICAgIGZyYWdtZW50ID0gZnJhZ21lbnQucmVwbGFjZShwYXRoU3RyaXBwZXIsICcnKTtcblxuICAgICAgaWYgKHRoaXMuZnJhZ21lbnQgPT09IGZyYWdtZW50KSByZXR1cm47XG4gICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQ7XG5cbiAgICAgIC8vIERvbid0IGluY2x1ZGUgYSB0cmFpbGluZyBzbGFzaCBvbiB0aGUgcm9vdC5cbiAgICAgIGlmIChmcmFnbWVudCA9PT0gJycgJiYgdXJsICE9PSAnLycpIHVybCA9IHVybC5zbGljZSgwLCAtMSk7XG5cbiAgICAgIC8vIElmIHB1c2hTdGF0ZSBpcyBhdmFpbGFibGUsIHdlIHVzZSBpdCB0byBzZXQgdGhlIGZyYWdtZW50IGFzIGEgcmVhbCBVUkwuXG4gICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlKSB7XG4gICAgICAgIHRoaXMuaGlzdG9yeVtvcHRpb25zLnJlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXSh7fSwgZG9jdW1lbnQudGl0bGUsIHVybCk7XG5cbiAgICAgIC8vIElmIGhhc2ggY2hhbmdlcyBoYXZlbid0IGJlZW4gZXhwbGljaXRseSBkaXNhYmxlZCwgdXBkYXRlIHRoZSBoYXNoXG4gICAgICAvLyBmcmFnbWVudCB0byBzdG9yZSBoaXN0b3J5LlxuICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlSGFzaCh0aGlzLmxvY2F0aW9uLCBmcmFnbWVudCwgb3B0aW9ucy5yZXBsYWNlKTtcbiAgICAgICAgaWYgKHRoaXMuaWZyYW1lICYmIChmcmFnbWVudCAhPT0gdGhpcy5nZXRGcmFnbWVudCh0aGlzLmdldEhhc2godGhpcy5pZnJhbWUpKSkpIHtcbiAgICAgICAgICAvLyBPcGVuaW5nIGFuZCBjbG9zaW5nIHRoZSBpZnJhbWUgdHJpY2tzIElFNyBhbmQgZWFybGllciB0byBwdXNoIGFcbiAgICAgICAgICAvLyBoaXN0b3J5IGVudHJ5IG9uIGhhc2gtdGFnIGNoYW5nZS4gIFdoZW4gcmVwbGFjZSBpcyB0cnVlLCB3ZSBkb24ndFxuICAgICAgICAgIC8vIHdhbnQgdGhpcy5cbiAgICAgICAgICBpZighb3B0aW9ucy5yZXBsYWNlKSB0aGlzLmlmcmFtZS5kb2N1bWVudC5vcGVuKCkuY2xvc2UoKTtcbiAgICAgICAgICB0aGlzLl91cGRhdGVIYXNoKHRoaXMuaWZyYW1lLmxvY2F0aW9uLCBmcmFnbWVudCwgb3B0aW9ucy5yZXBsYWNlKTtcbiAgICAgICAgfVxuXG4gICAgICAvLyBJZiB5b3UndmUgdG9sZCB1cyB0aGF0IHlvdSBleHBsaWNpdGx5IGRvbid0IHdhbnQgZmFsbGJhY2sgaGFzaGNoYW5nZS1cbiAgICAgIC8vIGJhc2VkIGhpc3RvcnksIHRoZW4gYG5hdmlnYXRlYCBiZWNvbWVzIGEgcGFnZSByZWZyZXNoLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy50cmlnZ2VyKSByZXR1cm4gdGhpcy5sb2FkVXJsKGZyYWdtZW50KTtcbiAgICB9LFxuXG4gICAgLy8gVXBkYXRlIHRoZSBoYXNoIGxvY2F0aW9uLCBlaXRoZXIgcmVwbGFjaW5nIHRoZSBjdXJyZW50IGVudHJ5LCBvciBhZGRpbmdcbiAgICAvLyBhIG5ldyBvbmUgdG8gdGhlIGJyb3dzZXIgaGlzdG9yeS5cbiAgICBfdXBkYXRlSGFzaDogZnVuY3Rpb24obG9jYXRpb24sIGZyYWdtZW50LCByZXBsYWNlKSB7XG4gICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICB2YXIgaHJlZiA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvKGphdmFzY3JpcHQ6fCMpLiokLywgJycpO1xuICAgICAgICBsb2NhdGlvbi5yZXBsYWNlKGhyZWYgKyAnIycgKyBmcmFnbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTb21lIGJyb3dzZXJzIHJlcXVpcmUgdGhhdCBgaGFzaGAgY29udGFpbnMgYSBsZWFkaW5nICMuXG4gICAgICAgIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBmcmFnbWVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IEJhY2tib25lLmhpc3RvcnkuXG4gIEJhY2tib25lLmhpc3RvcnkgPSBuZXcgSGlzdG9yeTtcblxuICAvLyBIZWxwZXJzXG4gIC8vIC0tLS0tLS1cblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29ycmVjdGx5IHNldCB1cCB0aGUgcHJvdG90eXBlIGNoYWluLCBmb3Igc3ViY2xhc3Nlcy5cbiAgLy8gU2ltaWxhciB0byBgZ29vZy5pbmhlcml0c2AsIGJ1dCB1c2VzIGEgaGFzaCBvZiBwcm90b3R5cGUgcHJvcGVydGllcyBhbmRcbiAgLy8gY2xhc3MgcHJvcGVydGllcyB0byBiZSBleHRlbmRlZC5cbiAgdmFyIGV4dGVuZCA9IGZ1bmN0aW9uKHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXM7XG4gICAgdmFyIGNoaWxkO1xuXG4gICAgLy8gVGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgbmV3IHN1YmNsYXNzIGlzIGVpdGhlciBkZWZpbmVkIGJ5IHlvdVxuICAgIC8vICh0aGUgXCJjb25zdHJ1Y3RvclwiIHByb3BlcnR5IGluIHlvdXIgYGV4dGVuZGAgZGVmaW5pdGlvbiksIG9yIGRlZmF1bHRlZFxuICAgIC8vIGJ5IHVzIHRvIHNpbXBseSBjYWxsIHRoZSBwYXJlbnQncyBjb25zdHJ1Y3Rvci5cbiAgICBpZiAocHJvdG9Qcm9wcyAmJiBfLmhhcyhwcm90b1Byb3BzLCAnY29uc3RydWN0b3InKSkge1xuICAgICAgY2hpbGQgPSBwcm90b1Byb3BzLmNvbnN0cnVjdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZCA9IGZ1bmN0aW9uKCl7IHJldHVybiBwYXJlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgICB9XG5cbiAgICAvLyBBZGQgc3RhdGljIHByb3BlcnRpZXMgdG8gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLCBpZiBzdXBwbGllZC5cbiAgICBfLmV4dGVuZChjaGlsZCwgcGFyZW50LCBzdGF0aWNQcm9wcyk7XG5cbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBjaGFpbiB0byBpbmhlcml0IGZyb20gYHBhcmVudGAsIHdpdGhvdXQgY2FsbGluZ1xuICAgIC8vIGBwYXJlbnRgJ3MgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgdmFyIFN1cnJvZ2F0ZSA9IGZ1bmN0aW9uKCl7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfTtcbiAgICBTdXJyb2dhdGUucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTtcbiAgICBjaGlsZC5wcm90b3R5cGUgPSBuZXcgU3Vycm9nYXRlO1xuXG4gICAgLy8gQWRkIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChpbnN0YW5jZSBwcm9wZXJ0aWVzKSB0byB0aGUgc3ViY2xhc3MsXG4gICAgLy8gaWYgc3VwcGxpZWQuXG4gICAgaWYgKHByb3RvUHJvcHMpIF8uZXh0ZW5kKGNoaWxkLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG5cbiAgICAvLyBTZXQgYSBjb252ZW5pZW5jZSBwcm9wZXJ0eSBpbiBjYXNlIHRoZSBwYXJlbnQncyBwcm90b3R5cGUgaXMgbmVlZGVkXG4gICAgLy8gbGF0ZXIuXG4gICAgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTtcblxuICAgIHJldHVybiBjaGlsZDtcbiAgfTtcblxuICAvLyBTZXQgdXAgaW5oZXJpdGFuY2UgZm9yIHRoZSBtb2RlbCwgY29sbGVjdGlvbiwgcm91dGVyLCB2aWV3IGFuZCBoaXN0b3J5LlxuICBNb2RlbC5leHRlbmQgPSBDb2xsZWN0aW9uLmV4dGVuZCA9IFJvdXRlci5leHRlbmQgPSBWaWV3LmV4dGVuZCA9IEhpc3RvcnkuZXh0ZW5kID0gZXh0ZW5kO1xuXG4gIC8vIFRocm93IGFuIGVycm9yIHdoZW4gYSBVUkwgaXMgbmVlZGVkLCBhbmQgbm9uZSBpcyBzdXBwbGllZC5cbiAgdmFyIHVybEVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBIFwidXJsXCIgcHJvcGVydHkgb3IgZnVuY3Rpb24gbXVzdCBiZSBzcGVjaWZpZWQnKTtcbiAgfTtcblxuICAvLyBXcmFwIGFuIG9wdGlvbmFsIGVycm9yIGNhbGxiYWNrIHdpdGggYSBmYWxsYmFjayBlcnJvciBldmVudC5cbiAgdmFyIHdyYXBFcnJvciA9IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgdmFyIGVycm9yID0gb3B0aW9ucy5lcnJvcjtcbiAgICBvcHRpb25zLmVycm9yID0gZnVuY3Rpb24ocmVzcCkge1xuICAgICAgaWYgKGVycm9yKSBlcnJvcihtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICBtb2RlbC50cmlnZ2VyKCdlcnJvcicsIG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBCYWNrYm9uZTtcblxufSkpO1xuIiwiLyohXG4gKiBVUkkuanMgLSBNdXRhdGluZyBVUkxzXG4gKiBJUHY2IFN1cHBvcnRcbiAqXG4gKiBWZXJzaW9uOiAxLjE0LjFcbiAqXG4gKiBBdXRob3I6IFJvZG5leSBSZWhtXG4gKiBXZWI6IGh0dHA6Ly9tZWRpYWxpemUuZ2l0aHViLmlvL1VSSS5qcy9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlclxuICogICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKiAgIEdQTCB2MyBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvR1BMLTMuMFxuICpcbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3JldHVybkV4cG9ydHMuanNcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGVcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgcm9vdC5JUHY2ID0gZmFjdG9yeShyb290KTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAocm9vdCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLypcbiAgdmFyIF9pbiA9IFwiZmU4MDowMDAwOjAwMDA6MDAwMDowMjA0OjYxZmY6ZmU5ZDpmMTU2XCI7XG4gIHZhciBfb3V0ID0gSVB2Ni5iZXN0KF9pbik7XG4gIHZhciBfZXhwZWN0ZWQgPSBcImZlODA6OjIwNDo2MWZmOmZlOWQ6ZjE1NlwiO1xuXG4gIGNvbnNvbGUubG9nKF9pbiwgX291dCwgX2V4cGVjdGVkLCBfb3V0ID09PSBfZXhwZWN0ZWQpO1xuICAqL1xuXG4gIC8vIHNhdmUgY3VycmVudCBJUHY2IHZhcmlhYmxlLCBpZiBhbnlcbiAgdmFyIF9JUHY2ID0gcm9vdCAmJiByb290LklQdjY7XG5cbiAgZnVuY3Rpb24gYmVzdFByZXNlbnRhdGlvbihhZGRyZXNzKSB7XG4gICAgLy8gYmFzZWQgb246XG4gICAgLy8gSmF2YXNjcmlwdCB0byB0ZXN0IGFuIElQdjYgYWRkcmVzcyBmb3IgcHJvcGVyIGZvcm1hdCwgYW5kIHRvXG4gICAgLy8gcHJlc2VudCB0aGUgXCJiZXN0IHRleHQgcmVwcmVzZW50YXRpb25cIiBhY2NvcmRpbmcgdG8gSUVURiBEcmFmdCBSRkMgYXRcbiAgICAvLyBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLTZtYW4tdGV4dC1hZGRyLXJlcHJlc2VudGF0aW9uLTA0XG4gICAgLy8gOCBGZWIgMjAxMCBSaWNoIEJyb3duLCBEYXJ0d2FyZSwgTExDXG4gICAgLy8gUGxlYXNlIGZlZWwgZnJlZSB0byB1c2UgdGhpcyBjb2RlIGFzIGxvbmcgYXMgeW91IHByb3ZpZGUgYSBsaW5rIHRvXG4gICAgLy8gaHR0cDovL3d3dy5pbnRlcm1hcHBlci5jb21cbiAgICAvLyBodHRwOi8vaW50ZXJtYXBwZXIuY29tL3N1cHBvcnQvdG9vbHMvSVBWNi1WYWxpZGF0b3IuYXNweFxuICAgIC8vIGh0dHA6Ly9kb3dubG9hZC5kYXJ0d2FyZS5jb20vdGhpcmRwYXJ0eS9pcHY2dmFsaWRhdG9yLmpzXG5cbiAgICB2YXIgX2FkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIHNlZ21lbnRzID0gX2FkZHJlc3Muc3BsaXQoJzonKTtcbiAgICB2YXIgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoO1xuICAgIHZhciB0b3RhbCA9IDg7XG5cbiAgICAvLyB0cmltIGNvbG9ucyAoOjogb3IgOjphOmI6Y+KApiBvciDigKZhOmI6Yzo6KVxuICAgIGlmIChzZWdtZW50c1swXSA9PT0gJycgJiYgc2VnbWVudHNbMV0gPT09ICcnICYmIHNlZ21lbnRzWzJdID09PSAnJykge1xuICAgICAgLy8gbXVzdCBoYXZlIGJlZW4gOjpcbiAgICAgIC8vIHJlbW92ZSBmaXJzdCB0d28gaXRlbXNcbiAgICAgIHNlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICBzZWdtZW50cy5zaGlmdCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudHNbMF0gPT09ICcnICYmIHNlZ21lbnRzWzFdID09PSAnJykge1xuICAgICAgLy8gbXVzdCBoYXZlIGJlZW4gOjp4eHh4XG4gICAgICAvLyByZW1vdmUgdGhlIGZpcnN0IGl0ZW1cbiAgICAgIHNlZ21lbnRzLnNoaWZ0KCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50c1tsZW5ndGggLSAxXSA9PT0gJycgJiYgc2VnbWVudHNbbGVuZ3RoIC0gMl0gPT09ICcnKSB7XG4gICAgICAvLyBtdXN0IGhhdmUgYmVlbiB4eHh4OjpcbiAgICAgIHNlZ21lbnRzLnBvcCgpO1xuICAgIH1cblxuICAgIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICAgIC8vIGFkanVzdCB0b3RhbCBzZWdtZW50cyBmb3IgSVB2NCB0cmFpbGVyXG4gICAgaWYgKHNlZ21lbnRzW2xlbmd0aCAtIDFdLmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcbiAgICAgIC8vIGZvdW5kIGEgXCIuXCIgd2hpY2ggbWVhbnMgSVB2NFxuICAgICAgdG90YWwgPSA3O1xuICAgIH1cblxuICAgIC8vIGZpbGwgZW1wdHkgc2VnbWVudHMgdGhlbSB3aXRoIFwiMDAwMFwiXG4gICAgdmFyIHBvcztcbiAgICBmb3IgKHBvcyA9IDA7IHBvcyA8IGxlbmd0aDsgcG9zKyspIHtcbiAgICAgIGlmIChzZWdtZW50c1twb3NdID09PSAnJykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zIDwgdG90YWwpIHtcbiAgICAgIHNlZ21lbnRzLnNwbGljZShwb3MsIDEsICcwMDAwJyk7XG4gICAgICB3aGlsZSAoc2VnbWVudHMubGVuZ3RoIDwgdG90YWwpIHtcbiAgICAgICAgc2VnbWVudHMuc3BsaWNlKHBvcywgMCwgJzAwMDAnKTtcbiAgICAgIH1cblxuICAgICAgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoO1xuICAgIH1cblxuICAgIC8vIHN0cmlwIGxlYWRpbmcgemVyb3NcbiAgICB2YXIgX3NlZ21lbnRzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuICAgICAgX3NlZ21lbnRzID0gc2VnbWVudHNbaV0uc3BsaXQoJycpO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAzIDsgaisrKSB7XG4gICAgICAgIGlmIChfc2VnbWVudHNbMF0gPT09ICcwJyAmJiBfc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIF9zZWdtZW50cy5zcGxpY2UoMCwxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50c1tpXSA9IF9zZWdtZW50cy5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvLyBmaW5kIGxvbmdlc3Qgc2VxdWVuY2Ugb2YgemVyb2VzIGFuZCBjb2FsZXNjZSB0aGVtIGludG8gb25lIHNlZ21lbnRcbiAgICB2YXIgYmVzdCA9IC0xO1xuICAgIHZhciBfYmVzdCA9IDA7XG4gICAgdmFyIF9jdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudCA9IC0xO1xuICAgIHZhciBpbnplcm9lcyA9IGZhbHNlO1xuICAgIC8vIGk7IGFscmVhZHkgZGVjbGFyZWRcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7XG4gICAgICBpZiAoaW56ZXJvZXMpIHtcbiAgICAgICAgaWYgKHNlZ21lbnRzW2ldID09PSAnMCcpIHtcbiAgICAgICAgICBfY3VycmVudCArPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluemVyb2VzID0gZmFsc2U7XG4gICAgICAgICAgaWYgKF9jdXJyZW50ID4gX2Jlc3QpIHtcbiAgICAgICAgICAgIGJlc3QgPSBjdXJyZW50O1xuICAgICAgICAgICAgX2Jlc3QgPSBfY3VycmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZWdtZW50c1tpXSA9PT0gJzAnKSB7XG4gICAgICAgICAgaW56ZXJvZXMgPSB0cnVlO1xuICAgICAgICAgIGN1cnJlbnQgPSBpO1xuICAgICAgICAgIF9jdXJyZW50ID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfY3VycmVudCA+IF9iZXN0KSB7XG4gICAgICBiZXN0ID0gY3VycmVudDtcbiAgICAgIF9iZXN0ID0gX2N1cnJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKF9iZXN0ID4gMSkge1xuICAgICAgc2VnbWVudHMuc3BsaWNlKGJlc3QsIF9iZXN0LCAnJyk7XG4gICAgfVxuXG4gICAgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gICAgLy8gYXNzZW1ibGUgcmVtYWluaW5nIHNlZ21lbnRzXG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIGlmIChzZWdtZW50c1swXSA9PT0gJycpICB7XG4gICAgICByZXN1bHQgPSAnOic7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gc2VnbWVudHNbaV07XG4gICAgICBpZiAoaSA9PT0gbGVuZ3RoIC0gMSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ICs9ICc6JztcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudHNbbGVuZ3RoIC0gMV0gPT09ICcnKSB7XG4gICAgICByZXN1bHQgKz0gJzonO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgIC8qanNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgIGlmIChyb290LklQdjYgPT09IHRoaXMpIHtcbiAgICAgIHJvb3QuSVB2NiA9IF9JUHY2O1xuICAgIH1cbiAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJlc3Q6IGJlc3RQcmVzZW50YXRpb24sXG4gICAgbm9Db25mbGljdDogbm9Db25mbGljdFxuICB9O1xufSkpO1xuIiwiLyohXG4gKiBVUkkuanMgLSBNdXRhdGluZyBVUkxzXG4gKiBTZWNvbmQgTGV2ZWwgRG9tYWluIChTTEQpIFN1cHBvcnRcbiAqXG4gKiBWZXJzaW9uOiAxLjE0LjFcbiAqXG4gKiBBdXRob3I6IFJvZG5leSBSZWhtXG4gKiBXZWI6IGh0dHA6Ly9tZWRpYWxpemUuZ2l0aHViLmlvL1VSSS5qcy9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlclxuICogICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKiAgIEdQTCB2MyBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvR1BMLTMuMFxuICpcbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3JldHVybkV4cG9ydHMuanNcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGVcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMgPSBmYWN0b3J5KHJvb3QpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uIChyb290KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBzYXZlIGN1cnJlbnQgU2Vjb25kTGV2ZWxEb21haW5zIHZhcmlhYmxlLCBpZiBhbnlcbiAgdmFyIF9TZWNvbmRMZXZlbERvbWFpbnMgPSByb290ICYmIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zO1xuXG4gIHZhciBTTEQgPSB7XG4gICAgLy8gbGlzdCBvZiBrbm93biBTZWNvbmQgTGV2ZWwgRG9tYWluc1xuICAgIC8vIGNvbnZlcnRlZCBsaXN0IG9mIFNMRHMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ2F2aW5nbWlsbGVyL3NlY29uZC1sZXZlbC1kb21haW5zXG4gICAgLy8gLS0tLVxuICAgIC8vIHB1YmxpY3N1ZmZpeC5vcmcgaXMgbW9yZSBjdXJyZW50IGFuZCBhY3R1YWxseSB1c2VkIGJ5IGEgY291cGxlIG9mIGJyb3dzZXJzIGludGVybmFsbHkuXG4gICAgLy8gZG93bnNpZGUgaXMgaXQgYWxzbyBjb250YWlucyBkb21haW5zIGxpa2UgXCJkeW5kbnMub3JnXCIgLSB3aGljaCBpcyBmaW5lIGZvciB0aGUgc2VjdXJpdHlcbiAgICAvLyBpc3N1ZXMgYnJvd3NlciBoYXZlIHRvIGRlYWwgd2l0aCAoU09QIGZvciBjb29raWVzLCBldGMpIC0gYnV0IGlzIHdheSBvdmVyYm9hcmQgZm9yIFVSSS5qc1xuICAgIC8vIC0tLS1cbiAgICBsaXN0OiB7XG4gICAgICAnYWMnOicgY29tIGdvdiBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ2FlJzonIGFjIGNvIGdvdiBtaWwgbmFtZSBuZXQgb3JnIHBybyBzY2ggJyxcbiAgICAgICdhZic6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnYWwnOicgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdhbyc6JyBjbyBlZCBndiBpdCBvZyBwYiAnLFxuICAgICAgJ2FyJzonIGNvbSBlZHUgZ29iIGdvdiBpbnQgbWlsIG5ldCBvcmcgdHVyICcsXG4gICAgICAnYXQnOicgYWMgY28gZ3Ygb3IgJyxcbiAgICAgICdhdSc6JyBhc24gY29tIGNzaXJvIGVkdSBnb3YgaWQgbmV0IG9yZyAnLFxuICAgICAgJ2JhJzonIGNvIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnIHJzIHVuYmkgdW5tbyB1bnNhIHVudHogdW56ZSAnLFxuICAgICAgJ2JiJzonIGJpeiBjbyBjb20gZWR1IGdvdiBpbmZvIG5ldCBvcmcgc3RvcmUgdHYgJyxcbiAgICAgICdiaCc6JyBiaXogY2MgY29tIGVkdSBnb3YgaW5mbyBuZXQgb3JnICcsXG4gICAgICAnYm4nOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2JvJzonIGNvbSBlZHUgZ29iIGdvdiBpbnQgbWlsIG5ldCBvcmcgdHYgJyxcbiAgICAgICdicic6JyBhZG0gYWR2IGFnciBhbSBhcnEgYXJ0IGF0byBiIGJpbyBibG9nIGJtZCBjaW0gY25nIGNudCBjb20gY29vcCBlY24gZWR1IGVuZyBlc3AgZXRjIGV0aSBmYXIgZmxvZyBmbSBmbmQgZm90IGZzdCBnMTIgZ2dmIGdvdiBpbWIgaW5kIGluZiBqb3IganVzIGxlbCBtYXQgbWVkIG1pbCBtdXMgbmV0IG5vbSBub3QgbnRyIG9kbyBvcmcgcHBnIHBybyBwc2MgcHNpIHFzbCByZWMgc2xnIHNydiB0bXAgdHJkIHR1ciB0diB2ZXQgdmxvZyB3aWtpIHpsZyAnLFxuICAgICAgJ2JzJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdieic6JyBkdSBldCBvbSBvdiByZyAnLFxuICAgICAgJ2NhJzonIGFiIGJjIG1iIG5iIG5mIG5sIG5zIG50IG51IG9uIHBlIHFjIHNrIHlrICcsXG4gICAgICAnY2snOicgYml6IGNvIGVkdSBnZW4gZ292IGluZm8gbmV0IG9yZyAnLFxuICAgICAgJ2NuJzonIGFjIGFoIGJqIGNvbSBjcSBlZHUgZmogZ2QgZ292IGdzIGd4IGd6IGhhIGhiIGhlIGhpIGhsIGhuIGpsIGpzIGp4IGxuIG1pbCBuZXQgbm0gbnggb3JnIHFoIHNjIHNkIHNoIHNuIHN4IHRqIHR3IHhqIHh6IHluIHpqICcsXG4gICAgICAnY28nOicgY29tIGVkdSBnb3YgbWlsIG5ldCBub20gb3JnICcsXG4gICAgICAnY3InOicgYWMgYyBjbyBlZCBmaSBnbyBvciBzYSAnLFxuICAgICAgJ2N5JzonIGFjIGJpeiBjb20gZWtsb2dlcyBnb3YgbHRkIG5hbWUgbmV0IG9yZyBwYXJsaWFtZW50IHByZXNzIHBybyB0bSAnLFxuICAgICAgJ2RvJzonIGFydCBjb20gZWR1IGdvYiBnb3YgbWlsIG5ldCBvcmcgc2xkIHdlYiAnLFxuICAgICAgJ2R6JzonIGFydCBhc3NvIGNvbSBlZHUgZ292IG5ldCBvcmcgcG9sICcsXG4gICAgICAnZWMnOicgY29tIGVkdSBmaW4gZ292IGluZm8gbWVkIG1pbCBuZXQgb3JnIHBybyAnLFxuICAgICAgJ2VnJzonIGNvbSBlZHUgZXVuIGdvdiBtaWwgbmFtZSBuZXQgb3JnIHNjaSAnLFxuICAgICAgJ2VyJzonIGNvbSBlZHUgZ292IGluZCBtaWwgbmV0IG9yZyByb2NoZXN0IHcgJyxcbiAgICAgICdlcyc6JyBjb20gZWR1IGdvYiBub20gb3JnICcsXG4gICAgICAnZXQnOicgYml6IGNvbSBlZHUgZ292IGluZm8gbmFtZSBuZXQgb3JnICcsXG4gICAgICAnZmonOicgYWMgYml6IGNvbSBpbmZvIG1pbCBuYW1lIG5ldCBvcmcgcHJvICcsXG4gICAgICAnZmsnOicgYWMgY28gZ292IG5ldCBub20gb3JnICcsXG4gICAgICAnZnInOicgYXNzbyBjb20gZiBnb3V2IG5vbSBwcmQgcHJlc3NlIHRtICcsXG4gICAgICAnZ2cnOicgY28gbmV0IG9yZyAnLFxuICAgICAgJ2doJzonIGNvbSBlZHUgZ292IG1pbCBvcmcgJyxcbiAgICAgICdnbic6JyBhYyBjb20gZ292IG5ldCBvcmcgJyxcbiAgICAgICdncic6JyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ2d0JzonIGNvbSBlZHUgZ29iIGluZCBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ2d1JzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdoayc6JyBjb20gZWR1IGdvdiBpZHYgbmV0IG9yZyAnLFxuICAgICAgJ2h1JzonIDIwMDAgYWdyYXIgYm9sdCBjYXNpbm8gY2l0eSBjbyBlcm90aWNhIGVyb3Rpa2EgZmlsbSBmb3J1bSBnYW1lcyBob3RlbCBpbmZvIGluZ2F0bGFuIGpvZ2FzeiBrb255dmVsbyBsYWthcyBtZWRpYSBuZXdzIG9yZyBwcml2IHJla2xhbSBzZXggc2hvcCBzcG9ydCBzdWxpIHN6ZXggdG0gdG96c2RlIHV0YXphcyB2aWRlbyAnLFxuICAgICAgJ2lkJzonIGFjIGNvIGdvIG1pbCBuZXQgb3Igc2NoIHdlYiAnLFxuICAgICAgJ2lsJzonIGFjIGNvIGdvdiBpZGYgazEyIG11bmkgbmV0IG9yZyAnLFxuICAgICAgJ2luJzonIGFjIGNvIGVkdSBlcm5ldCBmaXJtIGdlbiBnb3YgaSBpbmQgbWlsIG5ldCBuaWMgb3JnIHJlcyAnLFxuICAgICAgJ2lxJzonIGNvbSBlZHUgZ292IGkgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdpcic6JyBhYyBjbyBkbnNzZWMgZ292IGkgaWQgbmV0IG9yZyBzY2ggJyxcbiAgICAgICdpdCc6JyBlZHUgZ292ICcsXG4gICAgICAnamUnOicgY28gbmV0IG9yZyAnLFxuICAgICAgJ2pvJzonIGNvbSBlZHUgZ292IG1pbCBuYW1lIG5ldCBvcmcgc2NoICcsXG4gICAgICAnanAnOicgYWMgYWQgY28gZWQgZ28gZ3IgbGcgbmUgb3IgJyxcbiAgICAgICdrZSc6JyBhYyBjbyBnbyBpbmZvIG1lIG1vYmkgbmUgb3Igc2MgJyxcbiAgICAgICdraCc6JyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyBwZXIgJyxcbiAgICAgICdraSc6JyBiaXogY29tIGRlIGVkdSBnb3YgaW5mbyBtb2IgbmV0IG9yZyB0ZWwgJyxcbiAgICAgICdrbSc6JyBhc3NvIGNvbSBjb29wIGVkdSBnb3V2IGsgbWVkZWNpbiBtaWwgbm9tIG5vdGFpcmVzIHBoYXJtYWNpZW5zIHByZXNzZSB0bSB2ZXRlcmluYWlyZSAnLFxuICAgICAgJ2tuJzonIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2tyJzonIGFjIGJ1c2FuIGNodW5nYnVrIGNodW5nbmFtIGNvIGRhZWd1IGRhZWplb24gZXMgZ2FuZ3dvbiBnbyBnd2FuZ2p1IGd5ZW9uZ2J1ayBneWVvbmdnaSBneWVvbmduYW0gaHMgaW5jaGVvbiBqZWp1IGplb25idWsgamVvbm5hbSBrIGtnIG1pbCBtcyBuZSBvciBwZSByZSBzYyBzZW91bCB1bHNhbiAnLFxuICAgICAgJ2t3JzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdreSc6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAna3onOicgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdsYic6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnbGsnOicgYXNzbiBjb20gZWR1IGdvdiBncnAgaG90ZWwgaW50IGx0ZCBuZXQgbmdvIG9yZyBzY2ggc29jIHdlYiAnLFxuICAgICAgJ2xyJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdsdic6JyBhc24gY29tIGNvbmYgZWR1IGdvdiBpZCBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ2x5JzonIGNvbSBlZHUgZ292IGlkIG1lZCBuZXQgb3JnIHBsYyBzY2ggJyxcbiAgICAgICdtYSc6JyBhYyBjbyBnb3YgbSBuZXQgb3JnIHByZXNzICcsXG4gICAgICAnbWMnOicgYXNzbyB0bSAnLFxuICAgICAgJ21lJzonIGFjIGNvIGVkdSBnb3YgaXRzIG5ldCBvcmcgcHJpdiAnLFxuICAgICAgJ21nJzonIGNvbSBlZHUgZ292IG1pbCBub20gb3JnIHByZCB0bSAnLFxuICAgICAgJ21rJzonIGNvbSBlZHUgZ292IGluZiBuYW1lIG5ldCBvcmcgcHJvICcsXG4gICAgICAnbWwnOicgY29tIGVkdSBnb3YgbmV0IG9yZyBwcmVzc2UgJyxcbiAgICAgICdtbic6JyBlZHUgZ292IG9yZyAnLFxuICAgICAgJ21vJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdtdCc6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnbXYnOicgYWVybyBiaXogY29tIGNvb3AgZWR1IGdvdiBpbmZvIGludCBtaWwgbXVzZXVtIG5hbWUgbmV0IG9yZyBwcm8gJyxcbiAgICAgICdtdyc6JyBhYyBjbyBjb20gY29vcCBlZHUgZ292IGludCBtdXNldW0gbmV0IG9yZyAnLFxuICAgICAgJ214JzonIGNvbSBlZHUgZ29iIG5ldCBvcmcgJyxcbiAgICAgICdteSc6JyBjb20gZWR1IGdvdiBtaWwgbmFtZSBuZXQgb3JnIHNjaCAnLFxuICAgICAgJ25mJzonIGFydHMgY29tIGZpcm0gaW5mbyBuZXQgb3RoZXIgcGVyIHJlYyBzdG9yZSB3ZWIgJyxcbiAgICAgICduZyc6JyBiaXogY29tIGVkdSBnb3YgbWlsIG1vYmkgbmFtZSBuZXQgb3JnIHNjaCAnLFxuICAgICAgJ25pJzonIGFjIGNvIGNvbSBlZHUgZ29iIG1pbCBuZXQgbm9tIG9yZyAnLFxuICAgICAgJ25wJzonIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICcsXG4gICAgICAnbnInOicgYml6IGNvbSBlZHUgZ292IGluZm8gbmV0IG9yZyAnLFxuICAgICAgJ29tJzonIGFjIGJpeiBjbyBjb20gZWR1IGdvdiBtZWQgbWlsIG11c2V1bSBuZXQgb3JnIHBybyBzY2ggJyxcbiAgICAgICdwZSc6JyBjb20gZWR1IGdvYiBtaWwgbmV0IG5vbSBvcmcgc2xkICcsXG4gICAgICAncGgnOicgY29tIGVkdSBnb3YgaSBtaWwgbmV0IG5nbyBvcmcgJyxcbiAgICAgICdwayc6JyBiaXogY29tIGVkdSBmYW0gZ29iIGdvayBnb24gZ29wIGdvcyBnb3YgbmV0IG9yZyB3ZWIgJyxcbiAgICAgICdwbCc6JyBhcnQgYmlhbHlzdG9rIGJpeiBjb20gZWR1IGdkYSBnZGFuc2sgZ29yem93IGdvdiBpbmZvIGthdG93aWNlIGtyYWtvdyBsb2R6IGx1YmxpbiBtaWwgbmV0IG5nbyBvbHN6dHluIG9yZyBwb3puYW4gcHdyIHJhZG9tIHNsdXBzayBzemN6ZWNpbiB0b3J1biB3YXJzemF3YSB3YXcgd3JvYyB3cm9jbGF3IHpnb3JhICcsXG4gICAgICAncHInOicgYWMgYml6IGNvbSBlZHUgZXN0IGdvdiBpbmZvIGlzbGEgbmFtZSBuZXQgb3JnIHBybyBwcm9mICcsXG4gICAgICAncHMnOicgY29tIGVkdSBnb3YgbmV0IG9yZyBwbG8gc2VjICcsXG4gICAgICAncHcnOicgYmVsYXUgY28gZWQgZ28gbmUgb3IgJyxcbiAgICAgICdybyc6JyBhcnRzIGNvbSBmaXJtIGluZm8gbm9tIG50IG9yZyByZWMgc3RvcmUgdG0gd3d3ICcsXG4gICAgICAncnMnOicgYWMgY28gZWR1IGdvdiBpbiBvcmcgJyxcbiAgICAgICdzYic6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnc2MnOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ3NoJzonIGNvIGNvbSBlZHUgZ292IG5ldCBub20gb3JnICcsXG4gICAgICAnc2wnOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ3N0JzonIGNvIGNvbSBjb25zdWxhZG8gZWR1IGVtYmFpeGFkYSBnb3YgbWlsIG5ldCBvcmcgcHJpbmNpcGUgc2FvdG9tZSBzdG9yZSAnLFxuICAgICAgJ3N2JzonIGNvbSBlZHUgZ29iIG9yZyByZWQgJyxcbiAgICAgICdzeic6JyBhYyBjbyBvcmcgJyxcbiAgICAgICd0cic6JyBhdiBiYnMgYmVsIGJpeiBjb20gZHIgZWR1IGdlbiBnb3YgaW5mbyBrMTIgbmFtZSBuZXQgb3JnIHBvbCB0ZWwgdHNrIHR2IHdlYiAnLFxuICAgICAgJ3R0JzonIGFlcm8gYml6IGNhdCBjbyBjb20gY29vcCBlZHUgZ292IGluZm8gaW50IGpvYnMgbWlsIG1vYmkgbXVzZXVtIG5hbWUgbmV0IG9yZyBwcm8gdGVsIHRyYXZlbCAnLFxuICAgICAgJ3R3JzonIGNsdWIgY29tIGViaXogZWR1IGdhbWUgZ292IGlkdiBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ211JzonIGFjIGNvIGNvbSBnb3YgbmV0IG9yIG9yZyAnLFxuICAgICAgJ216JzonIGFjIGNvIGVkdSBnb3Ygb3JnICcsXG4gICAgICAnbmEnOicgY28gY29tICcsXG4gICAgICAnbnonOicgYWMgY28gY3JpIGdlZWsgZ2VuIGdvdnQgaGVhbHRoIGl3aSBtYW9yaSBtaWwgbmV0IG9yZyBwYXJsaWFtZW50IHNjaG9vbCAnLFxuICAgICAgJ3BhJzonIGFibyBhYyBjb20gZWR1IGdvYiBpbmcgbWVkIG5ldCBub20gb3JnIHNsZCAnLFxuICAgICAgJ3B0JzonIGNvbSBlZHUgZ292IGludCBuZXQgbm9tZSBvcmcgcHVibCAnLFxuICAgICAgJ3B5JzonIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICcsXG4gICAgICAncWEnOicgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdyZSc6JyBhc3NvIGNvbSBub20gJyxcbiAgICAgICdydSc6JyBhYyBhZHlnZXlhIGFsdGFpIGFtdXIgYXJraGFuZ2Vsc2sgYXN0cmFraGFuIGJhc2hraXJpYSBiZWxnb3JvZCBiaXIgYnJ5YW5zayBidXJ5YXRpYSBjYmcgY2hlbCBjaGVseWFiaW5zayBjaGl0YSBjaHVrb3RrYSBjaHV2YXNoaWEgY29tIGRhZ2VzdGFuIGUtYnVyZyBlZHUgZ292IGdyb3pueSBpbnQgaXJrdXRzayBpdmFub3ZvIGl6aGV2c2sgamFyIGpvc2hrYXItb2xhIGthbG15a2lhIGthbHVnYSBrYW1jaGF0a2Ega2FyZWxpYSBrYXphbiBrY2hyIGtlbWVyb3ZvIGtoYWJhcm92c2sga2hha2Fzc2lhIGtodiBraXJvdiBrb2VuaWcga29taSBrb3N0cm9tYSBrcmFub3lhcnNrIGt1YmFuIGt1cmdhbiBrdXJzayBsaXBldHNrIG1hZ2FkYW4gbWFyaSBtYXJpLWVsIG1hcmluZSBtaWwgbW9yZG92aWEgbW9zcmVnIG1zayBtdXJtYW5zayBuYWxjaGlrIG5ldCBubm92IG5vdiBub3Zvc2liaXJzayBuc2sgb21zayBvcmVuYnVyZyBvcmcgb3J5b2wgcGVuemEgcGVybSBwcCBwc2tvdiBwdHogcm5kIHJ5YXphbiBzYWtoYWxpbiBzYW1hcmEgc2FyYXRvdiBzaW1iaXJzayBzbW9sZW5zayBzcGIgc3RhdnJvcG9sIHN0diBzdXJndXQgdGFtYm92IHRhdGFyc3RhbiB0b20gdG9tc2sgdHNhcml0c3luIHRzayB0dWxhIHR1dmEgdHZlciB0eXVtZW4gdWRtIHVkbXVydGlhIHVsYW4tdWRlIHZsYWRpa2F2a2F6IHZsYWRpbWlyIHZsYWRpdm9zdG9rIHZvbGdvZ3JhZCB2b2xvZ2RhIHZvcm9uZXpoIHZybiB2eWF0a2EgeWFrdXRpYSB5YW1hbCB5ZWthdGVyaW5idXJnIHl1emhuby1zYWtoYWxpbnNrICcsXG4gICAgICAncncnOicgYWMgY28gY29tIGVkdSBnb3V2IGdvdiBpbnQgbWlsIG5ldCAnLFxuICAgICAgJ3NhJzonIGNvbSBlZHUgZ292IG1lZCBuZXQgb3JnIHB1YiBzY2ggJyxcbiAgICAgICdzZCc6JyBjb20gZWR1IGdvdiBpbmZvIG1lZCBuZXQgb3JnIHR2ICcsXG4gICAgICAnc2UnOicgYSBhYyBiIGJkIGMgZCBlIGYgZyBoIGkgayBsIG0gbiBvIG9yZyBwIHBhcnRpIHBwIHByZXNzIHIgcyB0IHRtIHUgdyB4IHkgeiAnLFxuICAgICAgJ3NnJzonIGNvbSBlZHUgZ292IGlkbiBuZXQgb3JnIHBlciAnLFxuICAgICAgJ3NuJzonIGFydCBjb20gZWR1IGdvdXYgb3JnIHBlcnNvIHVuaXYgJyxcbiAgICAgICdzeSc6JyBjb20gZWR1IGdvdiBtaWwgbmV0IG5ld3Mgb3JnICcsXG4gICAgICAndGgnOicgYWMgY28gZ28gaW4gbWkgbmV0IG9yICcsXG4gICAgICAndGonOicgYWMgYml6IGNvIGNvbSBlZHUgZ28gZ292IGluZm8gaW50IG1pbCBuYW1lIG5ldCBuaWMgb3JnIHRlc3Qgd2ViICcsXG4gICAgICAndG4nOicgYWdyaW5ldCBjb20gZGVmZW5zZSBlZHVuZXQgZW5zIGZpbiBnb3YgaW5kIGluZm8gaW50bCBtaW5jb20gbmF0IG5ldCBvcmcgcGVyc28gcm5ydCBybnMgcm51IHRvdXJpc20gJyxcbiAgICAgICd0eic6JyBhYyBjbyBnbyBuZSBvciAnLFxuICAgICAgJ3VhJzonIGJpeiBjaGVya2Fzc3kgY2hlcm5pZ292IGNoZXJub3Z0c3kgY2sgY24gY28gY29tIGNyaW1lYSBjdiBkbiBkbmVwcm9wZXRyb3ZzayBkb25ldHNrIGRwIGVkdSBnb3YgaWYgaW4gaXZhbm8tZnJhbmtpdnNrIGtoIGtoYXJrb3Yga2hlcnNvbiBraG1lbG5pdHNraXkga2lldiBraXJvdm9ncmFkIGttIGtyIGtzIGt2IGxnIGx1Z2Fuc2sgbHV0c2sgbHZpdiBtZSBtayBuZXQgbmlrb2xhZXYgb2Qgb2Rlc3NhIG9yZyBwbCBwb2x0YXZhIHBwIHJvdm5vIHJ2IHNlYmFzdG9wb2wgc3VteSB0ZSB0ZXJub3BpbCB1emhnb3JvZCB2aW5uaWNhIHZuIHphcG9yaXpoemhlIHpoaXRvbWlyIHpwIHp0ICcsXG4gICAgICAndWcnOicgYWMgY28gZ28gbmUgb3Igb3JnIHNjICcsXG4gICAgICAndWsnOicgYWMgYmwgYnJpdGlzaC1saWJyYXJ5IGNvIGN5bSBnb3YgZ292dCBpY25ldCBqZXQgbGVhIGx0ZCBtZSBtaWwgbW9kIG5hdGlvbmFsLWxpYnJhcnktc2NvdGxhbmQgbmVsIG5ldCBuaHMgbmljIG5scyBvcmcgb3JnbiBwYXJsaWFtZW50IHBsYyBwb2xpY2Ugc2NoIHNjb3Qgc29jICcsXG4gICAgICAndXMnOicgZG5pIGZlZCBpc2Ega2lkcyBuc24gJyxcbiAgICAgICd1eSc6JyBjb20gZWR1IGd1YiBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ3ZlJzonIGNvIGNvbSBlZHUgZ29iIGluZm8gbWlsIG5ldCBvcmcgd2ViICcsXG4gICAgICAndmknOicgY28gY29tIGsxMiBuZXQgb3JnICcsXG4gICAgICAndm4nOicgYWMgYml6IGNvbSBlZHUgZ292IGhlYWx0aCBpbmZvIGludCBuYW1lIG5ldCBvcmcgcHJvICcsXG4gICAgICAneWUnOicgY28gY29tIGdvdiBsdGQgbWUgbmV0IG9yZyBwbGMgJyxcbiAgICAgICd5dSc6JyBhYyBjbyBlZHUgZ292IG9yZyAnLFxuICAgICAgJ3phJzonIGFjIGFncmljIGFsdCBib3Vyc2UgY2l0eSBjbyBjeWJlcm5ldCBkYiBlZHUgZ292IGdyb25kYXIgaWFjY2VzcyBpbXQgaW5jYSBsYW5kZXNpZ24gbGF3IG1pbCBuZXQgbmdvIG5pcyBub20gb2xpdmV0dGkgb3JnIHBpeCBzY2hvb2wgdG0gd2ViICcsXG4gICAgICAnem0nOicgYWMgY28gY29tIGVkdSBnb3YgbmV0IG9yZyBzY2ggJ1xuICAgIH0sXG4gICAgLy8gZ29yaGlsbCAyMDEzLTEwLTI1OiBVc2luZyBpbmRleE9mKCkgaW5zdGVhZCBSZWdleHAoKS4gU2lnbmlmaWNhbnQgYm9vc3RcbiAgICAvLyBpbiBib3RoIHBlcmZvcm1hbmNlIGFuZCBtZW1vcnkgZm9vdHByaW50LiBObyBpbml0aWFsaXphdGlvbiByZXF1aXJlZC5cbiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS91cmktanMtc2xkLXJlZ2V4LXZzLWJpbmFyeS1zZWFyY2gvNFxuICAgIC8vIEZvbGxvd2luZyBtZXRob2RzIHVzZSBsYXN0SW5kZXhPZigpIHJhdGhlciB0aGFuIGFycmF5LnNwbGl0KCkgaW4gb3JkZXJcbiAgICAvLyB0byBhdm9pZCBhbnkgbWVtb3J5IGFsbG9jYXRpb25zLlxuICAgIGhhczogZnVuY3Rpb24oZG9tYWluKSB7XG4gICAgICB2YXIgdGxkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICBpZiAodGxkT2Zmc2V0IDw9IDAgfHwgdGxkT2Zmc2V0ID49IChkb21haW4ubGVuZ3RoLTEpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBzbGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoJy4nLCB0bGRPZmZzZXQtMSk7XG4gICAgICBpZiAoc2xkT2Zmc2V0IDw9IDAgfHwgc2xkT2Zmc2V0ID49ICh0bGRPZmZzZXQtMSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHNsZExpc3QgPSBTTEQubGlzdFtkb21haW4uc2xpY2UodGxkT2Zmc2V0KzEpXTtcbiAgICAgIGlmICghc2xkTGlzdCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2xkTGlzdC5pbmRleE9mKCcgJyArIGRvbWFpbi5zbGljZShzbGRPZmZzZXQrMSwgdGxkT2Zmc2V0KSArICcgJykgPj0gMDtcbiAgICB9LFxuICAgIGlzOiBmdW5jdGlvbihkb21haW4pIHtcbiAgICAgIHZhciB0bGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIGlmICh0bGRPZmZzZXQgPD0gMCB8fCB0bGRPZmZzZXQgPj0gKGRvbWFpbi5sZW5ndGgtMSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHNsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZignLicsIHRsZE9mZnNldC0xKTtcbiAgICAgIGlmIChzbGRPZmZzZXQgPj0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgc2xkTGlzdCA9IFNMRC5saXN0W2RvbWFpbi5zbGljZSh0bGRPZmZzZXQrMSldO1xuICAgICAgaWYgKCFzbGRMaXN0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbGRMaXN0LmluZGV4T2YoJyAnICsgZG9tYWluLnNsaWNlKDAsIHRsZE9mZnNldCkgKyAnICcpID49IDA7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uKGRvbWFpbikge1xuICAgICAgdmFyIHRsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZignLicpO1xuICAgICAgaWYgKHRsZE9mZnNldCA8PSAwIHx8IHRsZE9mZnNldCA+PSAoZG9tYWluLmxlbmd0aC0xKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBzbGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoJy4nLCB0bGRPZmZzZXQtMSk7XG4gICAgICBpZiAoc2xkT2Zmc2V0IDw9IDAgfHwgc2xkT2Zmc2V0ID49ICh0bGRPZmZzZXQtMSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgc2xkTGlzdCA9IFNMRC5saXN0W2RvbWFpbi5zbGljZSh0bGRPZmZzZXQrMSldO1xuICAgICAgaWYgKCFzbGRMaXN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHNsZExpc3QuaW5kZXhPZignICcgKyBkb21haW4uc2xpY2Uoc2xkT2Zmc2V0KzEsIHRsZE9mZnNldCkgKyAnICcpIDwgMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkb21haW4uc2xpY2Uoc2xkT2Zmc2V0KzEpO1xuICAgIH0sXG4gICAgbm9Db25mbGljdDogZnVuY3Rpb24oKXtcbiAgICAgIGlmIChyb290LlNlY29uZExldmVsRG9tYWlucyA9PT0gdGhpcykge1xuICAgICAgICByb290LlNlY29uZExldmVsRG9tYWlucyA9IF9TZWNvbmRMZXZlbERvbWFpbnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNMRDtcbn0pKTtcbiIsIi8qIVxuICogVVJJLmpzIC0gTXV0YXRpbmcgVVJMc1xuICpcbiAqIFZlcnNpb246IDEuMTQuMVxuICpcbiAqIEF1dGhvcjogUm9kbmV5IFJlaG1cbiAqIFdlYjogaHR0cDovL21lZGlhbGl6ZS5naXRodWIuaW8vVVJJLmpzL1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyXG4gKiAgIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqICAgR1BMIHYzIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9HUEwtMy4wXG4gKlxuICovXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3JldHVybkV4cG9ydHMuanNcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGVcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnLi9wdW55Y29kZScpLCByZXF1aXJlKCcuL0lQdjYnKSwgcmVxdWlyZSgnLi9TZWNvbmRMZXZlbERvbWFpbnMnKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShbJy4vcHVueWNvZGUnLCAnLi9JUHY2JywgJy4vU2Vjb25kTGV2ZWxEb21haW5zJ10sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgcm9vdC5VUkkgPSBmYWN0b3J5KHJvb3QucHVueWNvZGUsIHJvb3QuSVB2Niwgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMsIHJvb3QpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uIChwdW55Y29kZSwgSVB2NiwgU0xELCByb290KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLypnbG9iYWwgbG9jYXRpb24sIGVzY2FwZSwgdW5lc2NhcGUgKi9cbiAgLy8gRklYTUU6IHYyLjAuMCByZW5hbWNlIG5vbi1jYW1lbENhc2UgcHJvcGVydGllcyB0byB1cHBlcmNhc2VcbiAgLypqc2hpbnQgY2FtZWxjYXNlOiBmYWxzZSAqL1xuXG4gIC8vIHNhdmUgY3VycmVudCBVUkkgdmFyaWFibGUsIGlmIGFueVxuICB2YXIgX1VSSSA9IHJvb3QgJiYgcm9vdC5VUkk7XG5cbiAgZnVuY3Rpb24gVVJJKHVybCwgYmFzZSkge1xuICAgIC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAgICByZXR1cm4gbmV3IFVSSSh1cmwsIGJhc2UpO1xuICAgIH1cblxuICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXJsID0gbG9jYXRpb24uaHJlZiArICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsID0gJyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5ocmVmKHVybCk7XG5cbiAgICAvLyByZXNvbHZlIHRvIGJhc2UgYWNjb3JkaW5nIHRvIGh0dHA6Ly9kdmNzLnczLm9yZy9oZy91cmwvcmF3LWZpbGUvdGlwL092ZXJ2aWV3Lmh0bWwjY29uc3RydWN0b3JcbiAgICBpZiAoYmFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnNvbHV0ZVRvKGJhc2UpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgVVJJLnZlcnNpb24gPSAnMS4xNC4xJztcblxuICB2YXIgcCA9IFVSSS5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4KHN0cmluZykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2NvbW1pdC84NWFjMjE3ODNjMTFmOGNjYWIwNjEwNmRiYTk3MzVhMzFhODY5MjRkI2NvbW1pdGNvbW1lbnQtODIxOTYzXG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oWy4qKz9ePSE6JHt9KCl8W1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUeXBlKHZhbHVlKSB7XG4gICAgLy8gSUU4IGRvZXNuJ3QgcmV0dXJuIFtPYmplY3QgVW5kZWZpbmVkXSBidXQgW09iamVjdCBPYmplY3RdIGZvciB1bmRlZmluZWQgdmFsdWVcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICdVbmRlZmluZWQnO1xuICAgIH1cblxuICAgIHJldHVybiBTdHJpbmcoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSkuc2xpY2UoOCwgLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBcnJheShvYmopIHtcbiAgICByZXR1cm4gZ2V0VHlwZShvYmopID09PSAnQXJyYXknO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YSwgdmFsdWUpIHtcbiAgICB2YXIgbG9va3VwID0ge307XG4gICAgdmFyIGksIGxlbmd0aDtcblxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbG9va3VwW3ZhbHVlW2ldXSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvb2t1cFt2YWx1ZV0gPSB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsb29rdXBbZGF0YVtpXV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkYXRhLnNwbGljZShpLCAxKTtcbiAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFycmF5Q29udGFpbnMobGlzdCwgdmFsdWUpIHtcbiAgICB2YXIgaSwgbGVuZ3RoO1xuXG4gICAgLy8gdmFsdWUgbWF5IGJlIHN0cmluZywgbnVtYmVyLCBhcnJheSwgcmVnZXhwXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAvLyBOb3RlOiB0aGlzIGNhbiBiZSBvcHRpbWl6ZWQgdG8gTyhuKSAoaW5zdGVhZCBvZiBjdXJyZW50IE8obSAqIG4pKVxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFhcnJheUNvbnRhaW5zKGxpc3QsIHZhbHVlW2ldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgX3R5cGUgPSBnZXRUeXBlKHZhbHVlKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoX3R5cGUgPT09ICdSZWdFeHAnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdFtpXSA9PT0gJ3N0cmluZycgJiYgbGlzdFtpXS5tYXRjaCh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsaXN0W2ldID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBhcnJheXNFcXVhbChvbmUsIHR3bykge1xuICAgIGlmICghaXNBcnJheShvbmUpIHx8ICFpc0FycmF5KHR3bykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBhcnJheXMgY2FuJ3QgYmUgZXF1YWwgaWYgdGhleSBoYXZlIGRpZmZlcmVudCBhbW91bnQgb2YgY29udGVudFxuICAgIGlmIChvbmUubGVuZ3RoICE9PSB0d28ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgb25lLnNvcnQoKTtcbiAgICB0d28uc29ydCgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvbmUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAob25lW2ldICE9PSB0d29baV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgVVJJLl9wYXJ0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm90b2NvbDogbnVsbCxcbiAgICAgIHVzZXJuYW1lOiBudWxsLFxuICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICBob3N0bmFtZTogbnVsbCxcbiAgICAgIHVybjogbnVsbCxcbiAgICAgIHBvcnQ6IG51bGwsXG4gICAgICBwYXRoOiBudWxsLFxuICAgICAgcXVlcnk6IG51bGwsXG4gICAgICBmcmFnbWVudDogbnVsbCxcbiAgICAgIC8vIHN0YXRlXG4gICAgICBkdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnM6IFVSSS5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsXG4gICAgICBlc2NhcGVRdWVyeVNwYWNlOiBVUkkuZXNjYXBlUXVlcnlTcGFjZVxuICAgIH07XG4gIH07XG4gIC8vIHN0YXRlOiBhbGxvdyBkdXBsaWNhdGUgcXVlcnkgcGFyYW1ldGVycyAoYT0xJmE9MSlcbiAgVVJJLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyA9IGZhbHNlO1xuICAvLyBzdGF0ZTogcmVwbGFjZXMgKyB3aXRoICUyMCAoc3BhY2UgaW4gcXVlcnkgc3RyaW5ncylcbiAgVVJJLmVzY2FwZVF1ZXJ5U3BhY2UgPSB0cnVlO1xuICAvLyBzdGF0aWMgcHJvcGVydGllc1xuICBVUkkucHJvdG9jb2xfZXhwcmVzc2lvbiA9IC9eW2Etel1bYS16MC05ListXSokL2k7XG4gIFVSSS5pZG5fZXhwcmVzc2lvbiA9IC9bXmEtejAtOVxcLi1dL2k7XG4gIFVSSS5wdW55Y29kZV9leHByZXNzaW9uID0gLyh4bi0tKS9pO1xuICAvLyB3ZWxsLCAzMzMuNDQ0LjU1NS42NjYgbWF0Y2hlcywgYnV0IGl0IHN1cmUgYWluJ3Qgbm8gSVB2NCAtIGRvIHdlIGNhcmU/XG4gIFVSSS5pcDRfZXhwcmVzc2lvbiA9IC9eXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM30kLztcbiAgLy8gY3JlZGl0cyB0byBSaWNoIEJyb3duXG4gIC8vIHNvdXJjZTogaHR0cDovL2ZvcnVtcy5pbnRlcm1hcHBlci5jb20vdmlld3RvcGljLnBocD9wPTEwOTYjMTA5NlxuICAvLyBzcGVjaWZpY2F0aW9uOiBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MjkxLnR4dFxuICBVUkkuaXA2X2V4cHJlc3Npb24gPSAvXlxccyooKChbMC05QS1GYS1mXXsxLDR9Oil7N30oWzAtOUEtRmEtZl17MSw0fXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Nn0oOlswLTlBLUZhLWZdezEsNH18KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs1fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDJ9KXw6KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs0fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDN9KXwoKDpbMC05QS1GYS1mXXsxLDR9KT86KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7M30oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw0fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwyfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsyfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDV9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDN9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezF9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNn0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNH06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KDooKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw3fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCw1fTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKSkoJS4rKT9cXHMqJC87XG4gIC8vIGV4cHJlc3Npb24gdXNlZCBpcyBcImdydWJlciByZXZpc2VkXCIgKEBncnViZXIgdjIpIGRldGVybWluZWQgdG8gYmUgdGhlXG4gIC8vIGJlc3Qgc29sdXRpb24gaW4gYSByZWdleC1nb2xmIHdlIGRpZCBhIGNvdXBsZSBvZiBhZ2VzIGFnbyBhdFxuICAvLyAqIGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL2RlbW8vdXJsLXJlZ2V4XG4gIC8vICogaHR0cDovL3JvZG5leXJlaG0uZGUvdC91cmwtcmVnZXguaHRtbFxuICBVUkkuZmluZF91cmlfZXhwcmVzc2lvbiA9IC9cXGIoKD86W2Etel1bXFx3LV0rOig/OlxcL3sxLDN9fFthLXowLTklXSl8d3d3XFxkezAsM31bLl18W2EtejAtOS5cXC1dK1suXVthLXpdezIsNH1cXC8pKD86W15cXHMoKTw+XSt8XFwoKFteXFxzKCk8Pl0rfChcXChbXlxccygpPD5dK1xcKSkpKlxcKSkrKD86XFwoKFteXFxzKCk8Pl0rfChcXChbXlxccygpPD5dK1xcKSkpKlxcKXxbXlxcc2AhKClcXFtcXF17fTs6J1wiLiw8Pj/Cq8K74oCc4oCd4oCY4oCZXSkpL2lnO1xuICBVUkkuZmluZFVyaSA9IHtcbiAgICAvLyB2YWxpZCBcInNjaGVtZTovL1wiIG9yIFwid3d3LlwiXG4gICAgc3RhcnQ6IC9cXGIoPzooW2Etel1bYS16MC05ListXSo6XFwvXFwvKXx3d3dcXC4pL2dpLFxuICAgIC8vIGV2ZXJ5dGhpbmcgdXAgdG8gdGhlIG5leHQgd2hpdGVzcGFjZVxuICAgIGVuZDogL1tcXHNcXHJcXG5dfCQvLFxuICAgIC8vIHRyaW0gdHJhaWxpbmcgcHVuY3R1YXRpb24gY2FwdHVyZWQgYnkgZW5kIFJlZ0V4cFxuICAgIHRyaW06IC9bYCEoKVxcW1xcXXt9OzonXCIuLDw+P8KrwrvigJzigJ3igJ7igJjigJldKyQvXG4gIH07XG4gIC8vIGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMuaHRtbFxuICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfVENQX2FuZF9VRFBfcG9ydF9udW1iZXJzI1dlbGwta25vd25fcG9ydHNcbiAgVVJJLmRlZmF1bHRQb3J0cyA9IHtcbiAgICBodHRwOiAnODAnLFxuICAgIGh0dHBzOiAnNDQzJyxcbiAgICBmdHA6ICcyMScsXG4gICAgZ29waGVyOiAnNzAnLFxuICAgIHdzOiAnODAnLFxuICAgIHdzczogJzQ0MydcbiAgfTtcbiAgLy8gYWxsb3dlZCBob3N0bmFtZSBjaGFyYWN0ZXJzIGFjY29yZGluZyB0byBSRkMgMzk4NlxuICAvLyBBTFBIQSBESUdJVCBcIi1cIiBcIi5cIiBcIl9cIiBcIn5cIiBcIiFcIiBcIiRcIiBcIiZcIiBcIidcIiBcIihcIiBcIilcIiBcIipcIiBcIitcIiBcIixcIiBcIjtcIiBcIj1cIiAlZW5jb2RlZFxuICAvLyBJJ3ZlIG5ldmVyIHNlZW4gYSAobm9uLUlETikgaG9zdG5hbWUgb3RoZXIgdGhhbjogQUxQSEEgRElHSVQgLiAtXG4gIFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMgPSAvW15hLXpBLVowLTlcXC4tXS87XG4gIC8vIG1hcCBET00gRWxlbWVudHMgdG8gdGhlaXIgVVJJIGF0dHJpYnV0ZVxuICBVUkkuZG9tQXR0cmlidXRlcyA9IHtcbiAgICAnYSc6ICdocmVmJyxcbiAgICAnYmxvY2txdW90ZSc6ICdjaXRlJyxcbiAgICAnbGluayc6ICdocmVmJyxcbiAgICAnYmFzZSc6ICdocmVmJyxcbiAgICAnc2NyaXB0JzogJ3NyYycsXG4gICAgJ2Zvcm0nOiAnYWN0aW9uJyxcbiAgICAnaW1nJzogJ3NyYycsXG4gICAgJ2FyZWEnOiAnaHJlZicsXG4gICAgJ2lmcmFtZSc6ICdzcmMnLFxuICAgICdlbWJlZCc6ICdzcmMnLFxuICAgICdzb3VyY2UnOiAnc3JjJyxcbiAgICAndHJhY2snOiAnc3JjJyxcbiAgICAnaW5wdXQnOiAnc3JjJywgLy8gYnV0IG9ubHkgaWYgdHlwZT1cImltYWdlXCJcbiAgICAnYXVkaW8nOiAnc3JjJyxcbiAgICAndmlkZW8nOiAnc3JjJ1xuICB9O1xuICBVUkkuZ2V0RG9tQXR0cmlidXRlID0gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZSB8fCAhbm9kZS5ub2RlTmFtZSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gPGlucHV0PiBzaG91bGQgb25seSBleHBvc2Ugc3JjIGZvciB0eXBlPVwiaW1hZ2VcIlxuICAgIGlmIChub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBub2RlLnR5cGUgIT09ICdpbWFnZScpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFVSSS5kb21BdHRyaWJ1dGVzW25vZGVOYW1lXTtcbiAgfTtcblxuICBmdW5jdGlvbiBlc2NhcGVGb3JEdW1iRmlyZWZveDM2KHZhbHVlKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzkxXG4gICAgcmV0dXJuIGVzY2FwZSh2YWx1ZSk7XG4gIH1cblxuICAvLyBlbmNvZGluZyAvIGRlY29kaW5nIGFjY29yZGluZyB0byBSRkMzOTg2XG4gIGZ1bmN0aW9uIHN0cmljdEVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpIHtcbiAgICAvLyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9lbmNvZGVVUklDb21wb25lbnRcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZylcbiAgICAgIC5yZXBsYWNlKC9bIScoKSpdL2csIGVzY2FwZUZvckR1bWJGaXJlZm94MzYpXG4gICAgICAucmVwbGFjZSgvXFwqL2csICclMkEnKTtcbiAgfVxuICBVUkkuZW5jb2RlID0gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50O1xuICBVUkkuZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xuICBVUkkuaXNvODg1OSA9IGZ1bmN0aW9uKCkge1xuICAgIFVSSS5lbmNvZGUgPSBlc2NhcGU7XG4gICAgVVJJLmRlY29kZSA9IHVuZXNjYXBlO1xuICB9O1xuICBVUkkudW5pY29kZSA9IGZ1bmN0aW9uKCkge1xuICAgIFVSSS5lbmNvZGUgPSBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQ7XG4gICAgVVJJLmRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcbiAgfTtcbiAgVVJJLmNoYXJhY3RlcnMgPSB7XG4gICAgcGF0aG5hbWU6IHtcbiAgICAgIGVuY29kZToge1xuICAgICAgICAvLyBSRkMzOTg2IDIuMTogRm9yIGNvbnNpc3RlbmN5LCBVUkkgcHJvZHVjZXJzIGFuZCBub3JtYWxpemVycyBzaG91bGRcbiAgICAgICAgLy8gdXNlIHVwcGVyY2FzZSBoZXhhZGVjaW1hbCBkaWdpdHMgZm9yIGFsbCBwZXJjZW50LWVuY29kaW5ncy5cbiAgICAgICAgZXhwcmVzc2lvbjogLyUoMjR8MjZ8MkJ8MkN8M0J8M0R8M0F8NDApL2lnLFxuICAgICAgICBtYXA6IHtcbiAgICAgICAgICAvLyAtLl9+IScoKSpcbiAgICAgICAgICAnJTI0JzogJyQnLFxuICAgICAgICAgICclMjYnOiAnJicsXG4gICAgICAgICAgJyUyQic6ICcrJyxcbiAgICAgICAgICAnJTJDJzogJywnLFxuICAgICAgICAgICclM0InOiAnOycsXG4gICAgICAgICAgJyUzRCc6ICc9JyxcbiAgICAgICAgICAnJTNBJzogJzonLFxuICAgICAgICAgICclNDAnOiAnQCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlY29kZToge1xuICAgICAgICBleHByZXNzaW9uOiAvW1xcL1xcPyNdL2csXG4gICAgICAgIG1hcDoge1xuICAgICAgICAgICcvJzogJyUyRicsXG4gICAgICAgICAgJz8nOiAnJTNGJyxcbiAgICAgICAgICAnIyc6ICclMjMnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2VydmVkOiB7XG4gICAgICBlbmNvZGU6IHtcbiAgICAgICAgLy8gUkZDMzk4NiAyLjE6IEZvciBjb25zaXN0ZW5jeSwgVVJJIHByb2R1Y2VycyBhbmQgbm9ybWFsaXplcnMgc2hvdWxkXG4gICAgICAgIC8vIHVzZSB1cHBlcmNhc2UgaGV4YWRlY2ltYWwgZGlnaXRzIGZvciBhbGwgcGVyY2VudC1lbmNvZGluZ3MuXG4gICAgICAgIGV4cHJlc3Npb246IC8lKDIxfDIzfDI0fDI2fDI3fDI4fDI5fDJBfDJCfDJDfDJGfDNBfDNCfDNEfDNGfDQwfDVCfDVEKS9pZyxcbiAgICAgICAgbWFwOiB7XG4gICAgICAgICAgLy8gZ2VuLWRlbGltc1xuICAgICAgICAgICclM0EnOiAnOicsXG4gICAgICAgICAgJyUyRic6ICcvJyxcbiAgICAgICAgICAnJTNGJzogJz8nLFxuICAgICAgICAgICclMjMnOiAnIycsXG4gICAgICAgICAgJyU1Qic6ICdbJyxcbiAgICAgICAgICAnJTVEJzogJ10nLFxuICAgICAgICAgICclNDAnOiAnQCcsXG4gICAgICAgICAgLy8gc3ViLWRlbGltc1xuICAgICAgICAgICclMjEnOiAnIScsXG4gICAgICAgICAgJyUyNCc6ICckJyxcbiAgICAgICAgICAnJTI2JzogJyYnLFxuICAgICAgICAgICclMjcnOiAnXFwnJyxcbiAgICAgICAgICAnJTI4JzogJygnLFxuICAgICAgICAgICclMjknOiAnKScsXG4gICAgICAgICAgJyUyQSc6ICcqJyxcbiAgICAgICAgICAnJTJCJzogJysnLFxuICAgICAgICAgICclMkMnOiAnLCcsXG4gICAgICAgICAgJyUzQic6ICc7JyxcbiAgICAgICAgICAnJTNEJzogJz0nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIFVSSS5lbmNvZGVRdWVyeSA9IGZ1bmN0aW9uKHN0cmluZywgZXNjYXBlUXVlcnlTcGFjZSkge1xuICAgIHZhciBlc2NhcGVkID0gVVJJLmVuY29kZShzdHJpbmcgKyAnJyk7XG4gICAgaWYgKGVzY2FwZVF1ZXJ5U3BhY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXNjYXBlUXVlcnlTcGFjZSA9IFVSSS5lc2NhcGVRdWVyeVNwYWNlO1xuICAgIH1cblxuICAgIHJldHVybiBlc2NhcGVRdWVyeVNwYWNlID8gZXNjYXBlZC5yZXBsYWNlKC8lMjAvZywgJysnKSA6IGVzY2FwZWQ7XG4gIH07XG4gIFVSSS5kZWNvZGVRdWVyeSA9IGZ1bmN0aW9uKHN0cmluZywgZXNjYXBlUXVlcnlTcGFjZSkge1xuICAgIHN0cmluZyArPSAnJztcbiAgICBpZiAoZXNjYXBlUXVlcnlTcGFjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlc2NhcGVRdWVyeVNwYWNlID0gVVJJLmVzY2FwZVF1ZXJ5U3BhY2U7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBVUkkuZGVjb2RlKGVzY2FwZVF1ZXJ5U3BhY2UgPyBzdHJpbmcucmVwbGFjZSgvXFwrL2csICclMjAnKSA6IHN0cmluZyk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAvLyB3ZSdyZSBub3QgZ29pbmcgdG8gbWVzcyB3aXRoIHdlaXJkIGVuY29kaW5ncyxcbiAgICAgIC8vIGdpdmUgdXAgYW5kIHJldHVybiB0aGUgdW5kZWNvZGVkIG9yaWdpbmFsIHN0cmluZ1xuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy84N1xuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy85MlxuICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG4gIH07XG4gIFVSSS5yZWNvZGVQYXRoID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gKHN0cmluZyArICcnKS5zcGxpdCgnLycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgc2VnbWVudHNbaV0gPSBVUkkuZW5jb2RlUGF0aFNlZ21lbnQoVVJJLmRlY29kZShzZWdtZW50c1tpXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWdtZW50cy5qb2luKCcvJyk7XG4gIH07XG4gIFVSSS5kZWNvZGVQYXRoID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gKHN0cmluZyArICcnKS5zcGxpdCgnLycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgc2VnbWVudHNbaV0gPSBVUkkuZGVjb2RlUGF0aFNlZ21lbnQoc2VnbWVudHNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBzZWdtZW50cy5qb2luKCcvJyk7XG4gIH07XG4gIC8vIGdlbmVyYXRlIGVuY29kZS9kZWNvZGUgcGF0aCBmdW5jdGlvbnNcbiAgdmFyIF9wYXJ0cyA9IHsnZW5jb2RlJzonZW5jb2RlJywgJ2RlY29kZSc6J2RlY29kZSd9O1xuICB2YXIgX3BhcnQ7XG4gIHZhciBnZW5lcmF0ZUFjY2Vzc29yID0gZnVuY3Rpb24oX2dyb3VwLCBfcGFydCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBVUklbX3BhcnRdKHN0cmluZyArICcnKS5yZXBsYWNlKFVSSS5jaGFyYWN0ZXJzW19ncm91cF1bX3BhcnRdLmV4cHJlc3Npb24sIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICByZXR1cm4gVVJJLmNoYXJhY3RlcnNbX2dyb3VwXVtfcGFydF0ubWFwW2NdO1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gd2UncmUgbm90IGdvaW5nIHRvIG1lc3Mgd2l0aCB3ZWlyZCBlbmNvZGluZ3MsXG4gICAgICAgIC8vIGdpdmUgdXAgYW5kIHJldHVybiB0aGUgdW5kZWNvZGVkIG9yaWdpbmFsIHN0cmluZ1xuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzg3XG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvOTJcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIGZvciAoX3BhcnQgaW4gX3BhcnRzKSB7XG4gICAgVVJJW19wYXJ0ICsgJ1BhdGhTZWdtZW50J10gPSBnZW5lcmF0ZUFjY2Vzc29yKCdwYXRobmFtZScsIF9wYXJ0c1tfcGFydF0pO1xuICB9XG5cbiAgVVJJLmVuY29kZVJlc2VydmVkID0gZ2VuZXJhdGVBY2Nlc3NvcigncmVzZXJ2ZWQnLCAnZW5jb2RlJyk7XG5cbiAgVVJJLnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nLCBwYXJ0cykge1xuICAgIHZhciBwb3M7XG4gICAgaWYgKCFwYXJ0cykge1xuICAgICAgcGFydHMgPSB7fTtcbiAgICB9XG4gICAgLy8gW3Byb3RvY29sXCI6Ly9cIlt1c2VybmFtZVtcIjpcInBhc3N3b3JkXVwiQFwiXWhvc3RuYW1lW1wiOlwicG9ydF1cIi9cIj9dW3BhdGhdW1wiP1wicXVlcnlzdHJpbmddW1wiI1wiZnJhZ21lbnRdXG5cbiAgICAvLyBleHRyYWN0IGZyYWdtZW50XG4gICAgcG9zID0gc3RyaW5nLmluZGV4T2YoJyMnKTtcbiAgICBpZiAocG9zID4gLTEpIHtcbiAgICAgIC8vIGVzY2FwaW5nP1xuICAgICAgcGFydHMuZnJhZ21lbnQgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpIHx8IG51bGw7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcyk7XG4gICAgfVxuXG4gICAgLy8gZXh0cmFjdCBxdWVyeVxuICAgIHBvcyA9IHN0cmluZy5pbmRleE9mKCc/Jyk7XG4gICAgaWYgKHBvcyA+IC0xKSB7XG4gICAgICAvLyBlc2NhcGluZz9cbiAgICAgIHBhcnRzLnF1ZXJ5ID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKSB8fCBudWxsO1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpO1xuICAgIH1cblxuICAgIC8vIGV4dHJhY3QgcHJvdG9jb2xcbiAgICBpZiAoc3RyaW5nLnN1YnN0cmluZygwLCAyKSA9PT0gJy8vJykge1xuICAgICAgLy8gcmVsYXRpdmUtc2NoZW1lXG4gICAgICBwYXJ0cy5wcm90b2NvbCA9IG51bGw7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDIpO1xuICAgICAgLy8gZXh0cmFjdCBcInVzZXI6cGFzc0Bob3N0OnBvcnRcIlxuICAgICAgc3RyaW5nID0gVVJJLnBhcnNlQXV0aG9yaXR5KHN0cmluZywgcGFydHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3MgPSBzdHJpbmcuaW5kZXhPZignOicpO1xuICAgICAgaWYgKHBvcyA+IC0xKSB7XG4gICAgICAgIHBhcnRzLnByb3RvY29sID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpIHx8IG51bGw7XG4gICAgICAgIGlmIChwYXJ0cy5wcm90b2NvbCAmJiAhcGFydHMucHJvdG9jb2wubWF0Y2goVVJJLnByb3RvY29sX2V4cHJlc3Npb24pKSB7XG4gICAgICAgICAgLy8gOiBtYXkgYmUgd2l0aGluIHRoZSBwYXRoXG4gICAgICAgICAgcGFydHMucHJvdG9jb2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxLCBwb3MgKyAzKSA9PT0gJy8vJykge1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMyk7XG5cbiAgICAgICAgICAvLyBleHRyYWN0IFwidXNlcjpwYXNzQGhvc3Q6cG9ydFwiXG4gICAgICAgICAgc3RyaW5nID0gVVJJLnBhcnNlQXV0aG9yaXR5KHN0cmluZywgcGFydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSk7XG4gICAgICAgICAgcGFydHMudXJuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHdoYXQncyBsZWZ0IG11c3QgYmUgdGhlIHBhdGhcbiAgICBwYXJ0cy5wYXRoID0gc3RyaW5nO1xuXG4gICAgLy8gYW5kIHdlJ3JlIGRvbmVcbiAgICByZXR1cm4gcGFydHM7XG4gIH07XG4gIFVSSS5wYXJzZUhvc3QgPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7XG4gICAgLy8gZXh0cmFjdCBob3N0OnBvcnRcbiAgICB2YXIgcG9zID0gc3RyaW5nLmluZGV4T2YoJy8nKTtcbiAgICB2YXIgYnJhY2tldFBvcztcbiAgICB2YXIgdDtcblxuICAgIGlmIChwb3MgPT09IC0xKSB7XG4gICAgICBwb3MgPSBzdHJpbmcubGVuZ3RoO1xuICAgIH1cblxuICAgIGlmIChzdHJpbmcuY2hhckF0KDApID09PSAnWycpIHtcbiAgICAgIC8vIElQdjYgaG9zdCAtIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtNm1hbi10ZXh0LWFkZHItcmVwcmVzZW50YXRpb24tMDQjc2VjdGlvbi02XG4gICAgICAvLyBJIGNsYWltIG1vc3QgY2xpZW50IHNvZnR3YXJlIGJyZWFrcyBvbiBJUHY2IGFueXdheXMuIFRvIHNpbXBsaWZ5IHRoaW5ncywgVVJJIG9ubHkgYWNjZXB0c1xuICAgICAgLy8gSVB2Nitwb3J0IGluIHRoZSBmb3JtYXQgWzIwMDE6ZGI4OjoxXTo4MCAoZm9yIHRoZSB0aW1lIGJlaW5nKVxuICAgICAgYnJhY2tldFBvcyA9IHN0cmluZy5pbmRleE9mKCddJyk7XG4gICAgICBwYXJ0cy5ob3N0bmFtZSA9IHN0cmluZy5zdWJzdHJpbmcoMSwgYnJhY2tldFBvcykgfHwgbnVsbDtcbiAgICAgIHBhcnRzLnBvcnQgPSBzdHJpbmcuc3Vic3RyaW5nKGJyYWNrZXRQb3MgKyAyLCBwb3MpIHx8IG51bGw7XG4gICAgICBpZiAocGFydHMucG9ydCA9PT0gJy8nKSB7XG4gICAgICAgIHBhcnRzLnBvcnQgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoJzonKSAhPT0gc3RyaW5nLmxhc3RJbmRleE9mKCc6JykpIHtcbiAgICAgIC8vIElQdjYgaG9zdCBjb250YWlucyBtdWx0aXBsZSBjb2xvbnMgLSBidXQgbm8gcG9ydFxuICAgICAgLy8gdGhpcyBub3RhdGlvbiBpcyBhY3R1YWxseSBub3QgYWxsb3dlZCBieSBSRkMgMzk4NiwgYnV0IHdlJ3JlIGEgbGliZXJhbCBwYXJzZXJcbiAgICAgIHBhcnRzLmhvc3RuYW1lID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpIHx8IG51bGw7XG4gICAgICBwYXJ0cy5wb3J0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdCA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKS5zcGxpdCgnOicpO1xuICAgICAgcGFydHMuaG9zdG5hbWUgPSB0WzBdIHx8IG51bGw7XG4gICAgICBwYXJ0cy5wb3J0ID0gdFsxXSB8fCBudWxsO1xuICAgIH1cblxuICAgIGlmIChwYXJ0cy5ob3N0bmFtZSAmJiBzdHJpbmcuc3Vic3RyaW5nKHBvcykuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIHBvcysrO1xuICAgICAgc3RyaW5nID0gJy8nICsgc3RyaW5nO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKHBvcykgfHwgJy8nO1xuICB9O1xuICBVUkkucGFyc2VBdXRob3JpdHkgPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7XG4gICAgc3RyaW5nID0gVVJJLnBhcnNlVXNlcmluZm8oc3RyaW5nLCBwYXJ0cyk7XG4gICAgcmV0dXJuIFVSSS5wYXJzZUhvc3Qoc3RyaW5nLCBwYXJ0cyk7XG4gIH07XG4gIFVSSS5wYXJzZVVzZXJpbmZvID0gZnVuY3Rpb24oc3RyaW5nLCBwYXJ0cykge1xuICAgIC8vIGV4dHJhY3QgdXNlcm5hbWU6cGFzc3dvcmRcbiAgICB2YXIgZmlyc3RTbGFzaCA9IHN0cmluZy5pbmRleE9mKCcvJyk7XG4gICAgdmFyIHBvcyA9IHN0cmluZy5sYXN0SW5kZXhPZignQCcsIGZpcnN0U2xhc2ggPiAtMSA/IGZpcnN0U2xhc2ggOiBzdHJpbmcubGVuZ3RoIC0gMSk7XG4gICAgdmFyIHQ7XG5cbiAgICAvLyBhdXRob3JpdHlAIG11c3QgY29tZSBiZWZvcmUgL3BhdGhcbiAgICBpZiAocG9zID4gLTEgJiYgKGZpcnN0U2xhc2ggPT09IC0xIHx8IHBvcyA8IGZpcnN0U2xhc2gpKSB7XG4gICAgICB0ID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpLnNwbGl0KCc6Jyk7XG4gICAgICBwYXJ0cy51c2VybmFtZSA9IHRbMF0gPyBVUkkuZGVjb2RlKHRbMF0pIDogbnVsbDtcbiAgICAgIHQuc2hpZnQoKTtcbiAgICAgIHBhcnRzLnBhc3N3b3JkID0gdFswXSA/IFVSSS5kZWNvZGUodC5qb2luKCc6JykpIDogbnVsbDtcbiAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRzLnVzZXJuYW1lID0gbnVsbDtcbiAgICAgIHBhcnRzLnBhc3N3b3JkID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xuICBVUkkucGFyc2VRdWVyeSA9IGZ1bmN0aW9uKHN0cmluZywgZXNjYXBlUXVlcnlTcGFjZSkge1xuICAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLy8gdGhyb3cgb3V0IHRoZSBmdW5reSBidXNpbmVzcyAtIFwiP1wiW25hbWVcIj1cInZhbHVlXCImXCJdK1xuICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC8mKy9nLCAnJicpLnJlcGxhY2UoL15cXD8qJip8JiskL2csICcnKTtcblxuICAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgdmFyIGl0ZW1zID0ge307XG4gICAgdmFyIHNwbGl0cyA9IHN0cmluZy5zcGxpdCgnJicpO1xuICAgIHZhciBsZW5ndGggPSBzcGxpdHMubGVuZ3RoO1xuICAgIHZhciB2LCBuYW1lLCB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHYgPSBzcGxpdHNbaV0uc3BsaXQoJz0nKTtcbiAgICAgIG5hbWUgPSBVUkkuZGVjb2RlUXVlcnkodi5zaGlmdCgpLCBlc2NhcGVRdWVyeVNwYWNlKTtcbiAgICAgIC8vIG5vIFwiPVwiIGlzIG51bGwgYWNjb3JkaW5nIHRvIGh0dHA6Ly9kdmNzLnczLm9yZy9oZy91cmwvcmF3LWZpbGUvdGlwL092ZXJ2aWV3Lmh0bWwjY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuICAgICAgdmFsdWUgPSB2Lmxlbmd0aCA/IFVSSS5kZWNvZGVRdWVyeSh2LmpvaW4oJz0nKSwgZXNjYXBlUXVlcnlTcGFjZSkgOiBudWxsO1xuXG4gICAgICBpZiAoaGFzT3duLmNhbGwoaXRlbXMsIG5hbWUpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbXNbbmFtZV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaXRlbXNbbmFtZV0gPSBbaXRlbXNbbmFtZV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgaXRlbXNbbmFtZV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVtcztcbiAgfTtcblxuICBVUkkuYnVpbGQgPSBmdW5jdGlvbihwYXJ0cykge1xuICAgIHZhciB0ID0gJyc7XG5cbiAgICBpZiAocGFydHMucHJvdG9jb2wpIHtcbiAgICAgIHQgKz0gcGFydHMucHJvdG9jb2wgKyAnOic7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJ0cy51cm4gJiYgKHQgfHwgcGFydHMuaG9zdG5hbWUpKSB7XG4gICAgICB0ICs9ICcvLyc7XG4gICAgfVxuXG4gICAgdCArPSAoVVJJLmJ1aWxkQXV0aG9yaXR5KHBhcnRzKSB8fCAnJyk7XG5cbiAgICBpZiAodHlwZW9mIHBhcnRzLnBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAocGFydHMucGF0aC5jaGFyQXQoMCkgIT09ICcvJyAmJiB0eXBlb2YgcGFydHMuaG9zdG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHQgKz0gJy8nO1xuICAgICAgfVxuXG4gICAgICB0ICs9IHBhcnRzLnBhdGg7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwYXJ0cy5xdWVyeSA9PT0gJ3N0cmluZycgJiYgcGFydHMucXVlcnkpIHtcbiAgICAgIHQgKz0gJz8nICsgcGFydHMucXVlcnk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwYXJ0cy5mcmFnbWVudCA9PT0gJ3N0cmluZycgJiYgcGFydHMuZnJhZ21lbnQpIHtcbiAgICAgIHQgKz0gJyMnICsgcGFydHMuZnJhZ21lbnQ7XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9O1xuICBVUkkuYnVpbGRIb3N0ID0gZnVuY3Rpb24ocGFydHMpIHtcbiAgICB2YXIgdCA9ICcnO1xuXG4gICAgaWYgKCFwYXJ0cy5ob3N0bmFtZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAoVVJJLmlwNl9leHByZXNzaW9uLnRlc3QocGFydHMuaG9zdG5hbWUpKSB7XG4gICAgICB0ICs9ICdbJyArIHBhcnRzLmhvc3RuYW1lICsgJ10nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ICs9IHBhcnRzLmhvc3RuYW1lO1xuICAgIH1cblxuICAgIGlmIChwYXJ0cy5wb3J0KSB7XG4gICAgICB0ICs9ICc6JyArIHBhcnRzLnBvcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG4gIFVSSS5idWlsZEF1dGhvcml0eSA9IGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgcmV0dXJuIFVSSS5idWlsZFVzZXJpbmZvKHBhcnRzKSArIFVSSS5idWlsZEhvc3QocGFydHMpO1xuICB9O1xuICBVUkkuYnVpbGRVc2VyaW5mbyA9IGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgdmFyIHQgPSAnJztcblxuICAgIGlmIChwYXJ0cy51c2VybmFtZSkge1xuICAgICAgdCArPSBVUkkuZW5jb2RlKHBhcnRzLnVzZXJuYW1lKTtcblxuICAgICAgaWYgKHBhcnRzLnBhc3N3b3JkKSB7XG4gICAgICAgIHQgKz0gJzonICsgVVJJLmVuY29kZShwYXJ0cy5wYXNzd29yZCk7XG4gICAgICB9XG5cbiAgICAgIHQgKz0gJ0AnO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9O1xuICBVUkkuYnVpbGRRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgZXNjYXBlUXVlcnlTcGFjZSkge1xuICAgIC8vIGFjY29yZGluZyB0byBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2IG9yIGh0dHA6Ly9sYWJzLmFwYWNoZS5vcmcvd2ViYXJjaC91cmkvcmZjL3JmYzM5ODYuaHRtbFxuICAgIC8vIGJlaW5nIMK7LS5ffiEkJicoKSorLDs9OkAvP8KrICVIRVggYW5kIGFsbnVtIGFyZSBhbGxvd2VkXG4gICAgLy8gdGhlIFJGQyBleHBsaWNpdGx5IHN0YXRlcyA/L2ZvbyBiZWluZyBhIHZhbGlkIHVzZSBjYXNlLCBubyBtZW50aW9uIG9mIHBhcmFtZXRlciBzeW50YXghXG4gICAgLy8gVVJJLmpzIHRyZWF0cyB0aGUgcXVlcnkgc3RyaW5nIGFzIGJlaW5nIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICAgIC8vIHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwL2ludGVyYWN0L2Zvcm1zLmh0bWwjZm9ybS1jb250ZW50LXR5cGVcblxuICAgIHZhciB0ID0gJyc7XG4gICAgdmFyIHVuaXF1ZSwga2V5LCBpLCBsZW5ndGg7XG4gICAgZm9yIChrZXkgaW4gZGF0YSkge1xuICAgICAgaWYgKGhhc093bi5jYWxsKGRhdGEsIGtleSkgJiYga2V5KSB7XG4gICAgICAgIGlmIChpc0FycmF5KGRhdGFba2V5XSkpIHtcbiAgICAgICAgICB1bmlxdWUgPSB7fTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBkYXRhW2tleV0ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChkYXRhW2tleV1baV0gIT09IHVuZGVmaW5lZCAmJiB1bmlxdWVbZGF0YVtrZXldW2ldICsgJyddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgdCArPSAnJicgKyBVUkkuYnVpbGRRdWVyeVBhcmFtZXRlcihrZXksIGRhdGFba2V5XVtpXSwgZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgICAgICAgICAgIGlmIChkdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB1bmlxdWVbZGF0YVtrZXldW2ldICsgJyddID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHQgKz0gJyYnICsgVVJJLmJ1aWxkUXVlcnlQYXJhbWV0ZXIoa2V5LCBkYXRhW2tleV0sIGVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHQuc3Vic3RyaW5nKDEpO1xuICB9O1xuICBVUkkuYnVpbGRRdWVyeVBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBlc2NhcGVRdWVyeVNwYWNlKSB7XG4gICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MC9pbnRlcmFjdC9mb3Jtcy5odG1sI2Zvcm0tY29udGVudC10eXBlIC0tIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICAgIC8vIGRvbid0IGFwcGVuZCBcIj1cIiBmb3IgbnVsbCB2YWx1ZXMsIGFjY29yZGluZyB0byBodHRwOi8vZHZjcy53My5vcmcvaGcvdXJsL3Jhdy1maWxlL3RpcC9PdmVydmlldy5odG1sI3VybC1wYXJhbWV0ZXItc2VyaWFsaXphdGlvblxuICAgIHJldHVybiBVUkkuZW5jb2RlUXVlcnkobmFtZSwgZXNjYXBlUXVlcnlTcGFjZSkgKyAodmFsdWUgIT09IG51bGwgPyAnPScgKyBVUkkuZW5jb2RlUXVlcnkodmFsdWUsIGVzY2FwZVF1ZXJ5U3BhY2UpIDogJycpO1xuICB9O1xuXG4gIFVSSS5hZGRRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHtcbiAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHtcbiAgICAgICAgICBVUkkuYWRkUXVlcnkoZGF0YSwga2V5LCBuYW1lW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChkYXRhW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGF0YVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhW25hbWVdID09PSAnc3RyaW5nJykge1xuICAgICAgICBkYXRhW25hbWVdID0gW2RhdGFbbmFtZV1dO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gW3ZhbHVlXTtcbiAgICAgIH1cblxuICAgICAgZGF0YVtuYW1lXSA9IChkYXRhW25hbWVdIHx8IFtdKS5jb25jYXQodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuYWRkUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBuYW1lIHBhcmFtZXRlcicpO1xuICAgIH1cbiAgfTtcbiAgVVJJLnJlbW92ZVF1ZXJ5ID0gZnVuY3Rpb24oZGF0YSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaSwgbGVuZ3RoLCBrZXk7XG5cbiAgICBpZiAoaXNBcnJheShuYW1lKSkge1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbmFtZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBkYXRhW25hbWVbaV1dID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKGtleSBpbiBuYW1lKSB7XG4gICAgICAgIGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7XG4gICAgICAgICAgVVJJLnJlbW92ZVF1ZXJ5KGRhdGEsIGtleSwgbmFtZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZGF0YVtuYW1lXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICBkYXRhW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YVtuYW1lXSkpIHtcbiAgICAgICAgICBkYXRhW25hbWVdID0gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YVtuYW1lXSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuYWRkUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXInKTtcbiAgICB9XG4gIH07XG4gIFVSSS5oYXNRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7XG4gICAgICAgIGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7XG4gICAgICAgICAgaWYgKCFVUkkuaGFzUXVlcnkoZGF0YSwga2V5LCBuYW1lW2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuaGFzUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBuYW1lIHBhcmFtZXRlcicpO1xuICAgIH1cblxuICAgIHN3aXRjaCAoZ2V0VHlwZSh2YWx1ZSkpIHtcbiAgICAgIGNhc2UgJ1VuZGVmaW5lZCc6XG4gICAgICAgIC8vIHRydWUgaWYgZXhpc3RzIChidXQgbWF5IGJlIGVtcHR5KVxuICAgICAgICByZXR1cm4gbmFtZSBpbiBkYXRhOyAvLyBkYXRhW25hbWVdICE9PSB1bmRlZmluZWQ7XG5cbiAgICAgIGNhc2UgJ0Jvb2xlYW4nOlxuICAgICAgICAvLyB0cnVlIGlmIGV4aXN0cyBhbmQgbm9uLWVtcHR5XG4gICAgICAgIHZhciBfYm9vbHkgPSBCb29sZWFuKGlzQXJyYXkoZGF0YVtuYW1lXSkgPyBkYXRhW25hbWVdLmxlbmd0aCA6IGRhdGFbbmFtZV0pO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IF9ib29seTtcblxuICAgICAgY2FzZSAnRnVuY3Rpb24nOlxuICAgICAgICAvLyBhbGxvdyBjb21wbGV4IGNvbXBhcmlzb25cbiAgICAgICAgcmV0dXJuICEhdmFsdWUoZGF0YVtuYW1lXSwgbmFtZSwgZGF0YSk7XG5cbiAgICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgICAgaWYgKCFpc0FycmF5KGRhdGFbbmFtZV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wID0gd2l0aGluQXJyYXkgPyBhcnJheUNvbnRhaW5zIDogYXJyYXlzRXF1YWw7XG4gICAgICAgIHJldHVybiBvcChkYXRhW25hbWVdLCB2YWx1ZSk7XG5cbiAgICAgIGNhc2UgJ1JlZ0V4cCc6XG4gICAgICAgIGlmICghaXNBcnJheShkYXRhW25hbWVdKSkge1xuICAgICAgICAgIHJldHVybiBCb29sZWFuKGRhdGFbbmFtZV0gJiYgZGF0YVtuYW1lXS5tYXRjaCh2YWx1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF3aXRoaW5BcnJheSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnJheUNvbnRhaW5zKGRhdGFbbmFtZV0sIHZhbHVlKTtcblxuICAgICAgY2FzZSAnTnVtYmVyJzpcbiAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlICdTdHJpbmcnOlxuICAgICAgICBpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YVtuYW1lXSA9PT0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXdpdGhpbkFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycmF5Q29udGFpbnMoZGF0YVtuYW1lXSwgdmFsdWUpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuaGFzUXVlcnkoKSBhY2NlcHRzIHVuZGVmaW5lZCwgYm9vbGVhbiwgc3RyaW5nLCBudW1iZXIsIFJlZ0V4cCwgRnVuY3Rpb24gYXMgdGhlIHZhbHVlIHBhcmFtZXRlcicpO1xuICAgIH1cbiAgfTtcblxuXG4gIFVSSS5jb21tb25QYXRoID0gZnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4ob25lLmxlbmd0aCwgdHdvLmxlbmd0aCk7XG4gICAgdmFyIHBvcztcblxuICAgIC8vIGZpbmQgZmlyc3Qgbm9uLW1hdGNoaW5nIGNoYXJhY3RlclxuICAgIGZvciAocG9zID0gMDsgcG9zIDwgbGVuZ3RoOyBwb3MrKykge1xuICAgICAgaWYgKG9uZS5jaGFyQXQocG9zKSAhPT0gdHdvLmNoYXJBdChwb3MpKSB7XG4gICAgICAgIHBvcy0tO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zIDwgMSkge1xuICAgICAgcmV0dXJuIG9uZS5jaGFyQXQoMCkgPT09IHR3by5jaGFyQXQoMCkgJiYgb25lLmNoYXJBdCgwKSA9PT0gJy8nID8gJy8nIDogJyc7XG4gICAgfVxuXG4gICAgLy8gcmV2ZXJ0IHRvIGxhc3QgL1xuICAgIGlmIChvbmUuY2hhckF0KHBvcykgIT09ICcvJyB8fCB0d28uY2hhckF0KHBvcykgIT09ICcvJykge1xuICAgICAgcG9zID0gb25lLnN1YnN0cmluZygwLCBwb3MpLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9uZS5zdWJzdHJpbmcoMCwgcG9zICsgMSk7XG4gIH07XG5cbiAgVVJJLndpdGhpblN0cmluZyA9IGZ1bmN0aW9uKHN0cmluZywgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIHZhciBfc3RhcnQgPSBvcHRpb25zLnN0YXJ0IHx8IFVSSS5maW5kVXJpLnN0YXJ0O1xuICAgIHZhciBfZW5kID0gb3B0aW9ucy5lbmQgfHwgVVJJLmZpbmRVcmkuZW5kO1xuICAgIHZhciBfdHJpbSA9IG9wdGlvbnMudHJpbSB8fCBVUkkuZmluZFVyaS50cmltO1xuICAgIHZhciBfYXR0cmlidXRlT3BlbiA9IC9bYS16MC05LV09W1wiJ10/JC9pO1xuXG4gICAgX3N0YXJ0Lmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHZhciBtYXRjaCA9IF9zdGFydC5leGVjKHN0cmluZyk7XG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnQgPSBtYXRjaC5pbmRleDtcbiAgICAgIGlmIChvcHRpb25zLmlnbm9yZUh0bWwpIHtcbiAgICAgICAgLy8gYXR0cmlidXQoZT1bXCInXT8kKVxuICAgICAgICB2YXIgYXR0cmlidXRlT3BlbiA9IHN0cmluZy5zbGljZShNYXRoLm1heChzdGFydCAtIDMsIDApLCBzdGFydCk7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVPcGVuICYmIF9hdHRyaWJ1dGVPcGVuLnRlc3QoYXR0cmlidXRlT3BlbikpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZW5kID0gc3RhcnQgKyBzdHJpbmcuc2xpY2Uoc3RhcnQpLnNlYXJjaChfZW5kKTtcbiAgICAgIHZhciBzbGljZSA9IHN0cmluZy5zbGljZShzdGFydCwgZW5kKS5yZXBsYWNlKF90cmltLCAnJyk7XG4gICAgICBpZiAob3B0aW9ucy5pZ25vcmUgJiYgb3B0aW9ucy5pZ25vcmUudGVzdChzbGljZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZCA9IHN0YXJ0ICsgc2xpY2UubGVuZ3RoO1xuICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKHNsaWNlLCBzdGFydCwgZW5kLCBzdHJpbmcpO1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKDAsIHN0YXJ0KSArIHJlc3VsdCArIHN0cmluZy5zbGljZShlbmQpO1xuICAgICAgX3N0YXJ0Lmxhc3RJbmRleCA9IHN0YXJ0ICsgcmVzdWx0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICBfc3RhcnQubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xuXG4gIFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lID0gZnVuY3Rpb24odikge1xuICAgIC8vIFRoZW9yZXRpY2FsbHkgVVJJcyBhbGxvdyBwZXJjZW50LWVuY29kaW5nIGluIEhvc3RuYW1lcyAoYWNjb3JkaW5nIHRvIFJGQyAzOTg2KVxuICAgIC8vIHRoZXkgYXJlIG5vdCBwYXJ0IG9mIEROUyBhbmQgdGhlcmVmb3JlIGlnbm9yZWQgYnkgVVJJLmpzXG5cbiAgICBpZiAodi5tYXRjaChVUkkuaW52YWxpZF9ob3N0bmFtZV9jaGFyYWN0ZXJzKSkge1xuICAgICAgLy8gdGVzdCBwdW55Y29kZVxuICAgICAgaWYgKCFwdW55Y29kZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dIGFuZCBQdW55Y29kZS5qcyBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwdW55Y29kZS50b0FTQ0lJKHYpLm1hdGNoKFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gbm9Db25mbGljdFxuICBVUkkubm9Db25mbGljdCA9IGZ1bmN0aW9uKHJlbW92ZUFsbCkge1xuICAgIGlmIChyZW1vdmVBbGwpIHtcbiAgICAgIHZhciB1bmNvbmZsaWN0ZWQgPSB7XG4gICAgICAgIFVSSTogdGhpcy5ub0NvbmZsaWN0KClcbiAgICAgIH07XG5cbiAgICAgIGlmIChyb290LlVSSVRlbXBsYXRlICYmIHR5cGVvZiByb290LlVSSVRlbXBsYXRlLm5vQ29uZmxpY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdW5jb25mbGljdGVkLlVSSVRlbXBsYXRlID0gcm9vdC5VUklUZW1wbGF0ZS5ub0NvbmZsaWN0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb290LklQdjYgJiYgdHlwZW9mIHJvb3QuSVB2Ni5ub0NvbmZsaWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHVuY29uZmxpY3RlZC5JUHY2ID0gcm9vdC5JUHY2Lm5vQ29uZmxpY3QoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zICYmIHR5cGVvZiByb290LlNlY29uZExldmVsRG9tYWlucy5ub0NvbmZsaWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHVuY29uZmxpY3RlZC5TZWNvbmRMZXZlbERvbWFpbnMgPSByb290LlNlY29uZExldmVsRG9tYWlucy5ub0NvbmZsaWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmNvbmZsaWN0ZWQ7XG4gICAgfSBlbHNlIGlmIChyb290LlVSSSA9PT0gdGhpcykge1xuICAgICAgcm9vdC5VUkkgPSBfVVJJO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHAuYnVpbGQgPSBmdW5jdGlvbihkZWZlckJ1aWxkKSB7XG4gICAgaWYgKGRlZmVyQnVpbGQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuX2RlZmVycmVkX2J1aWxkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGRlZmVyQnVpbGQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl9kZWZlcnJlZF9idWlsZCkge1xuICAgICAgdGhpcy5fc3RyaW5nID0gVVJJLmJ1aWxkKHRoaXMuX3BhcnRzKTtcbiAgICAgIHRoaXMuX2RlZmVycmVkX2J1aWxkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcC5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgVVJJKHRoaXMpO1xuICB9O1xuXG4gIHAudmFsdWVPZiA9IHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZChmYWxzZSkuX3N0cmluZztcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoX3BhcnQpe1xuICAgIHJldHVybiBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFydHNbX3BhcnRdIHx8ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcGFydHNbX3BhcnRdID0gdiB8fCBudWxsO1xuICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZVByZWZpeEFjY2Vzc29yKF9wYXJ0LCBfa2V5KXtcbiAgICByZXR1cm4gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzW19wYXJ0XSB8fCAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2ICE9PSBudWxsKSB7XG4gICAgICAgICAgdiA9IHYgKyAnJztcbiAgICAgICAgICBpZiAodi5jaGFyQXQoMCkgPT09IF9rZXkpIHtcbiAgICAgICAgICAgIHYgPSB2LnN1YnN0cmluZygxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wYXJ0c1tfcGFydF0gPSB2O1xuICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBwLnByb3RvY29sID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigncHJvdG9jb2wnKTtcbiAgcC51c2VybmFtZSA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ3VzZXJuYW1lJyk7XG4gIHAucGFzc3dvcmQgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCdwYXNzd29yZCcpO1xuICBwLmhvc3RuYW1lID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcignaG9zdG5hbWUnKTtcbiAgcC5wb3J0ID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigncG9ydCcpO1xuICBwLnF1ZXJ5ID0gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcigncXVlcnknLCAnPycpO1xuICBwLmZyYWdtZW50ID0gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcignZnJhZ21lbnQnLCAnIycpO1xuXG4gIHAuc2VhcmNoID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICB2YXIgdCA9IHRoaXMucXVlcnkodiwgYnVpbGQpO1xuICAgIHJldHVybiB0eXBlb2YgdCA9PT0gJ3N0cmluZycgJiYgdC5sZW5ndGggPyAoJz8nICsgdCkgOiB0O1xuICB9O1xuICBwLmhhc2ggPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIHZhciB0ID0gdGhpcy5mcmFnbWVudCh2LCBidWlsZCk7XG4gICAgcmV0dXJuIHR5cGVvZiB0ID09PSAnc3RyaW5nJyAmJiB0Lmxlbmd0aCA/ICgnIycgKyB0KSA6IHQ7XG4gIH07XG5cbiAgcC5wYXRobmFtZSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSB0cnVlKSB7XG4gICAgICB2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aCB8fCAodGhpcy5fcGFydHMuaG9zdG5hbWUgPyAnLycgOiAnJyk7XG4gICAgICByZXR1cm4gdiA/IFVSSS5kZWNvZGVQYXRoKHJlcykgOiByZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB2ID8gVVJJLnJlY29kZVBhdGgodikgOiAnLyc7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAucGF0aCA9IHAucGF0aG5hbWU7XG4gIHAuaHJlZiA9IGZ1bmN0aW9uKGhyZWYsIGJ1aWxkKSB7XG4gICAgdmFyIGtleTtcblxuICAgIGlmIChocmVmID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RyaW5nID0gJyc7XG4gICAgdGhpcy5fcGFydHMgPSBVUkkuX3BhcnRzKCk7XG5cbiAgICB2YXIgX1VSSSA9IGhyZWYgaW5zdGFuY2VvZiBVUkk7XG4gICAgdmFyIF9vYmplY3QgPSB0eXBlb2YgaHJlZiA9PT0gJ29iamVjdCcgJiYgKGhyZWYuaG9zdG5hbWUgfHwgaHJlZi5wYXRoIHx8IGhyZWYucGF0aG5hbWUpO1xuICAgIGlmIChocmVmLm5vZGVOYW1lKSB7XG4gICAgICB2YXIgYXR0cmlidXRlID0gVVJJLmdldERvbUF0dHJpYnV0ZShocmVmKTtcbiAgICAgIGhyZWYgPSBocmVmW2F0dHJpYnV0ZV0gfHwgJyc7XG4gICAgICBfb2JqZWN0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gd2luZG93LmxvY2F0aW9uIGlzIHJlcG9ydGVkIHRvIGJlIGFuIG9iamVjdCwgYnV0IGl0J3Mgbm90IHRoZSBzb3J0XG4gICAgLy8gb2Ygb2JqZWN0IHdlJ3JlIGxvb2tpbmcgZm9yOlxuICAgIC8vICogbG9jYXRpb24ucHJvdG9jb2wgZW5kcyB3aXRoIGEgY29sb25cbiAgICAvLyAqIGxvY2F0aW9uLnF1ZXJ5ICE9IG9iamVjdC5zZWFyY2hcbiAgICAvLyAqIGxvY2F0aW9uLmhhc2ggIT0gb2JqZWN0LmZyYWdtZW50XG4gICAgLy8gc2ltcGx5IHNlcmlhbGl6aW5nIHRoZSB1bmtub3duIG9iamVjdCBzaG91bGQgZG8gdGhlIHRyaWNrXG4gICAgLy8gKGZvciBsb2NhdGlvbiwgbm90IGZvciBldmVyeXRoaW5nLi4uKVxuICAgIGlmICghX1VSSSAmJiBfb2JqZWN0ICYmIGhyZWYucGF0aG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaHJlZiA9IGhyZWYudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGhyZWYgPT09ICdzdHJpbmcnIHx8IGhyZWYgaW5zdGFuY2VvZiBTdHJpbmcpIHtcbiAgICAgIHRoaXMuX3BhcnRzID0gVVJJLnBhcnNlKFN0cmluZyhocmVmKSwgdGhpcy5fcGFydHMpO1xuICAgIH0gZWxzZSBpZiAoX1VSSSB8fCBfb2JqZWN0KSB7XG4gICAgICB2YXIgc3JjID0gX1VSSSA/IGhyZWYuX3BhcnRzIDogaHJlZjtcbiAgICAgIGZvciAoa2V5IGluIHNyYykge1xuICAgICAgICBpZiAoaGFzT3duLmNhbGwodGhpcy5fcGFydHMsIGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9wYXJ0c1trZXldID0gc3JjW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpbnB1dCcpO1xuICAgIH1cblxuICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBpZGVudGlmaWNhdGlvbiBhY2Nlc3NvcnNcbiAgcC5pcyA9IGZ1bmN0aW9uKHdoYXQpIHtcbiAgICB2YXIgaXAgPSBmYWxzZTtcbiAgICB2YXIgaXA0ID0gZmFsc2U7XG4gICAgdmFyIGlwNiA9IGZhbHNlO1xuICAgIHZhciBuYW1lID0gZmFsc2U7XG4gICAgdmFyIHNsZCA9IGZhbHNlO1xuICAgIHZhciBpZG4gPSBmYWxzZTtcbiAgICB2YXIgcHVueWNvZGUgPSBmYWxzZTtcbiAgICB2YXIgcmVsYXRpdmUgPSAhdGhpcy5fcGFydHMudXJuO1xuXG4gICAgaWYgKHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7XG4gICAgICByZWxhdGl2ZSA9IGZhbHNlO1xuICAgICAgaXA0ID0gVVJJLmlwNF9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpO1xuICAgICAgaXA2ID0gVVJJLmlwNl9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpO1xuICAgICAgaXAgPSBpcDQgfHwgaXA2O1xuICAgICAgbmFtZSA9ICFpcDtcbiAgICAgIHNsZCA9IG5hbWUgJiYgU0xEICYmIFNMRC5oYXModGhpcy5fcGFydHMuaG9zdG5hbWUpO1xuICAgICAgaWRuID0gbmFtZSAmJiBVUkkuaWRuX2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG4gICAgICBwdW55Y29kZSA9IG5hbWUgJiYgVVJJLnB1bnljb2RlX2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh3aGF0LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgJ3JlbGF0aXZlJzpcbiAgICAgICAgcmV0dXJuIHJlbGF0aXZlO1xuXG4gICAgICBjYXNlICdhYnNvbHV0ZSc6XG4gICAgICAgIHJldHVybiAhcmVsYXRpdmU7XG5cbiAgICAgIC8vIGhvc3RuYW1lIGlkZW50aWZpY2F0aW9uXG4gICAgICBjYXNlICdkb21haW4nOlxuICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgIHJldHVybiBuYW1lO1xuXG4gICAgICBjYXNlICdzbGQnOlxuICAgICAgICByZXR1cm4gc2xkO1xuXG4gICAgICBjYXNlICdpcCc6XG4gICAgICAgIHJldHVybiBpcDtcblxuICAgICAgY2FzZSAnaXA0JzpcbiAgICAgIGNhc2UgJ2lwdjQnOlxuICAgICAgY2FzZSAnaW5ldDQnOlxuICAgICAgICByZXR1cm4gaXA0O1xuXG4gICAgICBjYXNlICdpcDYnOlxuICAgICAgY2FzZSAnaXB2Nic6XG4gICAgICBjYXNlICdpbmV0Nic6XG4gICAgICAgIHJldHVybiBpcDY7XG5cbiAgICAgIGNhc2UgJ2lkbic6XG4gICAgICAgIHJldHVybiBpZG47XG5cbiAgICAgIGNhc2UgJ3VybCc6XG4gICAgICAgIHJldHVybiAhdGhpcy5fcGFydHMudXJuO1xuXG4gICAgICBjYXNlICd1cm4nOlxuICAgICAgICByZXR1cm4gISF0aGlzLl9wYXJ0cy51cm47XG5cbiAgICAgIGNhc2UgJ3B1bnljb2RlJzpcbiAgICAgICAgcmV0dXJuIHB1bnljb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8vIGNvbXBvbmVudCBzcGVjaWZpYyBpbnB1dCB2YWxpZGF0aW9uXG4gIHZhciBfcHJvdG9jb2wgPSBwLnByb3RvY29sO1xuICB2YXIgX3BvcnQgPSBwLnBvcnQ7XG4gIHZhciBfaG9zdG5hbWUgPSBwLmhvc3RuYW1lO1xuXG4gIHAucHJvdG9jb2wgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh2KSB7XG4gICAgICAgIC8vIGFjY2VwdCB0cmFpbGluZyA6Ly9cbiAgICAgICAgdiA9IHYucmVwbGFjZSgvOihcXC9cXC8pPyQvLCAnJyk7XG5cbiAgICAgICAgaWYgKCF2Lm1hdGNoKFVSSS5wcm90b2NvbF9leHByZXNzaW9uKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3RvY29sIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuKy1dIG9yIGRvZXNuXFwndCBzdGFydCB3aXRoIFtBLVpdJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9wcm90b2NvbC5jYWxsKHRoaXMsIHYsIGJ1aWxkKTtcbiAgfTtcbiAgcC5zY2hlbWUgPSBwLnByb3RvY29sO1xuICBwLnBvcnQgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHYgPT09IDApIHtcbiAgICAgICAgdiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh2KSB7XG4gICAgICAgIHYgKz0gJyc7XG4gICAgICAgIGlmICh2LmNoYXJBdCgwKSA9PT0gJzonKSB7XG4gICAgICAgICAgdiA9IHYuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHYubWF0Y2goL1teMC05XS8pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUG9ydCBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbMC05XScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfcG9ydC5jYWxsKHRoaXMsIHYsIGJ1aWxkKTtcbiAgfTtcbiAgcC5ob3N0bmFtZSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgeCA9IHt9O1xuICAgICAgVVJJLnBhcnNlSG9zdCh2LCB4KTtcbiAgICAgIHYgPSB4Lmhvc3RuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gX2hvc3RuYW1lLmNhbGwodGhpcywgdiwgYnVpbGQpO1xuICB9O1xuXG4gIC8vIGNvbXBvdW5kIGFjY2Vzc29yc1xuICBwLmhvc3QgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gVVJJLmJ1aWxkSG9zdCh0aGlzLl9wYXJ0cykgOiAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgVVJJLnBhcnNlSG9zdCh2LCB0aGlzLl9wYXJ0cyk7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAuYXV0aG9yaXR5ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/IFVSSS5idWlsZEF1dGhvcml0eSh0aGlzLl9wYXJ0cykgOiAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgVVJJLnBhcnNlQXV0aG9yaXR5KHYsIHRoaXMuX3BhcnRzKTtcbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgcC51c2VyaW5mbyA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXRoaXMuX3BhcnRzLnVzZXJuYW1lKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgdmFyIHQgPSBVUkkuYnVpbGRVc2VyaW5mbyh0aGlzLl9wYXJ0cyk7XG4gICAgICByZXR1cm4gdC5zdWJzdHJpbmcoMCwgdC5sZW5ndGggLTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodlt2Lmxlbmd0aC0xXSAhPT0gJ0AnKSB7XG4gICAgICAgIHYgKz0gJ0AnO1xuICAgICAgfVxuXG4gICAgICBVUkkucGFyc2VVc2VyaW5mbyh2LCB0aGlzLl9wYXJ0cyk7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAucmVzb3VyY2UgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIHZhciBwYXJ0cztcblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhdGgoKSArIHRoaXMuc2VhcmNoKCkgKyB0aGlzLmhhc2goKTtcbiAgICB9XG5cbiAgICBwYXJ0cyA9IFVSSS5wYXJzZSh2KTtcbiAgICB0aGlzLl9wYXJ0cy5wYXRoID0gcGFydHMucGF0aDtcbiAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IHBhcnRzLnF1ZXJ5O1xuICAgIHRoaXMuX3BhcnRzLmZyYWdtZW50ID0gcGFydHMuZnJhZ21lbnQ7XG4gICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIGZyYWN0aW9uIGFjY2Vzc29yc1xuICBwLnN1YmRvbWFpbiA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICAvLyBjb252ZW5pZW5jZSwgcmV0dXJuIFwid3d3XCIgZnJvbSBcInd3dy5leGFtcGxlLm9yZ1wiXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgLy8gZ3JhYiBkb21haW4gYW5kIGFkZCBhbm90aGVyIHNlZ21lbnRcbiAgICAgIHZhciBlbmQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sZW5ndGggLSB0aGlzLmRvbWFpbigpLmxlbmd0aCAtIDE7XG4gICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKDAsIGVuZCkgfHwgJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy5kb21haW4oKS5sZW5ndGg7XG4gICAgICB2YXIgc3ViID0gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKDAsIGUpO1xuICAgICAgdmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKCdeJyArIGVzY2FwZVJlZ0V4KHN1YikpO1xuXG4gICAgICBpZiAodiAmJiB2LmNoYXJBdCh2Lmxlbmd0aCAtIDEpICE9PSAnLicpIHtcbiAgICAgICAgdiArPSAnLic7XG4gICAgICB9XG5cbiAgICAgIGlmICh2KSB7XG4gICAgICAgIFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lKHYpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnJlcGxhY2UocmVwbGFjZSwgdik7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAuZG9tYWluID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBidWlsZCA9IHY7XG4gICAgICB2ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIGNvbnZlbmllbmNlLCByZXR1cm4gXCJleGFtcGxlLm9yZ1wiIGZyb20gXCJ3d3cuZXhhbXBsZS5vcmdcIlxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGhvc3RuYW1lIGNvbnNpc3RzIG9mIDEgb3IgMiBzZWdtZW50cywgaXQgbXVzdCBiZSB0aGUgZG9tYWluXG4gICAgICB2YXIgdCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLm1hdGNoKC9cXC4vZyk7XG4gICAgICBpZiAodCAmJiB0Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lO1xuICAgICAgfVxuXG4gICAgICAvLyBncmFiIHRsZCBhbmQgYWRkIGFub3RoZXIgc2VnbWVudFxuICAgICAgdmFyIGVuZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxlbmd0aCAtIHRoaXMudGxkKGJ1aWxkKS5sZW5ndGggLSAxO1xuICAgICAgZW5kID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGFzdEluZGV4T2YoJy4nLCBlbmQgLTEpICsgMTtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoZW5kKSB8fCAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF2KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nhbm5vdCBzZXQgZG9tYWluIGVtcHR5Jyk7XG4gICAgICB9XG5cbiAgICAgIFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lKHYpO1xuXG4gICAgICBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoJ0lQJykpIHtcbiAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB2O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMuZG9tYWluKCkpICsgJyQnKTtcbiAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAudGxkID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBidWlsZCA9IHY7XG4gICAgICB2ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIHJldHVybiBcIm9yZ1wiIGZyb20gXCJ3d3cuZXhhbXBsZS5vcmdcIlxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3MgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgdmFyIHRsZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZyhwb3MgKyAxKTtcblxuICAgICAgaWYgKGJ1aWxkICE9PSB0cnVlICYmIFNMRCAmJiBTTEQubGlzdFt0bGQudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgcmV0dXJuIFNMRC5nZXQodGhpcy5fcGFydHMuaG9zdG5hbWUpIHx8IHRsZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRsZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJlcGxhY2U7XG5cbiAgICAgIGlmICghdikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3Qgc2V0IFRMRCBlbXB0eScpO1xuICAgICAgfSBlbHNlIGlmICh2Lm1hdGNoKC9bXmEtekEtWjAtOS1dLykpIHtcbiAgICAgICAgaWYgKFNMRCAmJiBTTEQuaXModikpIHtcbiAgICAgICAgICByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLnRsZCgpKSArICckJyk7XG4gICAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RMRCBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05XScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignY2Fubm90IHNldCBUTEQgb24gbm9uLWRvbWFpbiBob3N0Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLnRsZCgpKSArICckJyk7XG4gICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLmRpcmVjdG9yeSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IHRydWUpIHtcbiAgICAgIGlmICghdGhpcy5fcGFydHMucGF0aCAmJiAhdGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XG4gICAgICAgIHJldHVybiAnLyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbmQgPSB0aGlzLl9wYXJ0cy5wYXRoLmxlbmd0aCAtIHRoaXMuZmlsZW5hbWUoKS5sZW5ndGggLSAxO1xuICAgICAgdmFyIHJlcyA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKDAsIGVuZCkgfHwgKHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gJy8nIDogJycpO1xuXG4gICAgICByZXR1cm4gdiA/IFVSSS5kZWNvZGVQYXRoKHJlcykgOiByZXM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGUgPSB0aGlzLl9wYXJ0cy5wYXRoLmxlbmd0aCAtIHRoaXMuZmlsZW5hbWUoKS5sZW5ndGg7XG4gICAgICB2YXIgZGlyZWN0b3J5ID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcoMCwgZSk7XG4gICAgICB2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoJ14nICsgZXNjYXBlUmVnRXgoZGlyZWN0b3J5KSk7XG5cbiAgICAgIC8vIGZ1bGx5IHF1YWxpZmllciBkaXJlY3RvcmllcyBiZWdpbiB3aXRoIGEgc2xhc2hcbiAgICAgIGlmICghdGhpcy5pcygncmVsYXRpdmUnKSkge1xuICAgICAgICBpZiAoIXYpIHtcbiAgICAgICAgICB2ID0gJy8nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHYuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgICAgICB2ID0gJy8nICsgdjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBkaXJlY3RvcmllcyBhbHdheXMgZW5kIHdpdGggYSBzbGFzaFxuICAgICAgaWYgKHYgJiYgdi5jaGFyQXQodi5sZW5ndGggLSAxKSAhPT0gJy8nKSB7XG4gICAgICAgIHYgKz0gJy8nO1xuICAgICAgfVxuXG4gICAgICB2ID0gVVJJLnJlY29kZVBhdGgodik7XG4gICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLmZpbGVuYW1lID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5wYXRoIHx8IHRoaXMuX3BhcnRzLnBhdGggPT09ICcvJykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3MgPSB0aGlzLl9wYXJ0cy5wYXRoLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICB2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcocG9zKzEpO1xuXG4gICAgICByZXR1cm4gdiA/IFVSSS5kZWNvZGVQYXRoU2VnbWVudChyZXMpIDogcmVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbXV0YXRlZERpcmVjdG9yeSA9IGZhbHNlO1xuXG4gICAgICBpZiAodi5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgICB2ID0gdi5zdWJzdHJpbmcoMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lm1hdGNoKC9cXC4/XFwvLykpIHtcbiAgICAgICAgbXV0YXRlZERpcmVjdG9yeSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLmZpbGVuYW1lKCkpICsgJyQnKTtcbiAgICAgIHYgPSBVUkkucmVjb2RlUGF0aCh2KTtcbiAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB0aGlzLl9wYXJ0cy5wYXRoLnJlcGxhY2UocmVwbGFjZSwgdik7XG5cbiAgICAgIGlmIChtdXRhdGVkRGlyZWN0b3J5KSB7XG4gICAgICAgIHRoaXMubm9ybWFsaXplUGF0aChidWlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgcC5zdWZmaXggPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSB0cnVlKSB7XG4gICAgICBpZiAoIXRoaXMuX3BhcnRzLnBhdGggfHwgdGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgdmFyIGZpbGVuYW1lID0gdGhpcy5maWxlbmFtZSgpO1xuICAgICAgdmFyIHBvcyA9IGZpbGVuYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICB2YXIgcywgcmVzO1xuXG4gICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIC8vIHN1ZmZpeCBtYXkgb25seSBjb250YWluIGFsbnVtIGNoYXJhY3RlcnMgKHl1cCwgSSBtYWRlIHRoaXMgdXAuKVxuICAgICAgcyA9IGZpbGVuYW1lLnN1YnN0cmluZyhwb3MrMSk7XG4gICAgICByZXMgPSAoL15bYS16MC05JV0rJC9pKS50ZXN0KHMpID8gcyA6ICcnO1xuICAgICAgcmV0dXJuIHYgPyBVUkkuZGVjb2RlUGF0aFNlZ21lbnQocmVzKSA6IHJlcztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHYuY2hhckF0KDApID09PSAnLicpIHtcbiAgICAgICAgdiA9IHYuc3Vic3RyaW5nKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3VmZml4ID0gdGhpcy5zdWZmaXgoKTtcbiAgICAgIHZhciByZXBsYWNlO1xuXG4gICAgICBpZiAoIXN1ZmZpeCkge1xuICAgICAgICBpZiAoIXYpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BhcnRzLnBhdGggKz0gJy4nICsgVVJJLnJlY29kZVBhdGgodik7XG4gICAgICB9IGVsc2UgaWYgKCF2KSB7XG4gICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KCcuJyArIHN1ZmZpeCkgKyAnJCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgoc3VmZml4KSArICckJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgIHYgPSBVUkkucmVjb2RlUGF0aCh2KTtcbiAgICAgICAgdGhpcy5fcGFydHMucGF0aCA9IHRoaXMuX3BhcnRzLnBhdGgucmVwbGFjZShyZXBsYWNlLCB2KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLnNlZ21lbnQgPSBmdW5jdGlvbihzZWdtZW50LCB2LCBidWlsZCkge1xuICAgIHZhciBzZXBhcmF0b3IgPSB0aGlzLl9wYXJ0cy51cm4gPyAnOicgOiAnLyc7XG4gICAgdmFyIHBhdGggPSB0aGlzLnBhdGgoKTtcbiAgICB2YXIgYWJzb2x1dGUgPSBwYXRoLnN1YnN0cmluZygwLCAxKSA9PT0gJy8nO1xuICAgIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoc2VwYXJhdG9yKTtcblxuICAgIGlmIChzZWdtZW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHNlZ21lbnQgIT09ICdudW1iZXInKSB7XG4gICAgICBidWlsZCA9IHY7XG4gICAgICB2ID0gc2VnbWVudDtcbiAgICAgIHNlZ21lbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHNlZ21lbnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc2VnbWVudCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmFkIHNlZ21lbnQgXCInICsgc2VnbWVudCArICdcIiwgbXVzdCBiZSAwLWJhc2VkIGludGVnZXInKTtcbiAgICB9XG5cbiAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgIHNlZ21lbnRzLnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgaWYgKHNlZ21lbnQgPCAwKSB7XG4gICAgICAvLyBhbGxvdyBuZWdhdGl2ZSBpbmRleGVzIHRvIGFkZHJlc3MgZnJvbSB0aGUgZW5kXG4gICAgICBzZWdtZW50ID0gTWF0aC5tYXgoc2VnbWVudHMubGVuZ3RoICsgc2VnbWVudCwgMCk7XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLypqc2hpbnQgbGF4YnJlYWs6IHRydWUgKi9cbiAgICAgIHJldHVybiBzZWdtZW50ID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBzZWdtZW50c1xuICAgICAgICA6IHNlZ21lbnRzW3NlZ21lbnRdO1xuICAgICAgLypqc2hpbnQgbGF4YnJlYWs6IGZhbHNlICovXG4gICAgfSBlbHNlIGlmIChzZWdtZW50ID09PSBudWxsIHx8IHNlZ21lbnRzW3NlZ21lbnRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChpc0FycmF5KHYpKSB7XG4gICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgIC8vIGNvbGxhcHNlIGVtcHR5IGVsZW1lbnRzIHdpdGhpbiBhcnJheVxuICAgICAgICBmb3IgKHZhciBpPTAsIGw9di5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoIXZbaV0ubGVuZ3RoICYmICghc2VnbWVudHMubGVuZ3RoIHx8ICFzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLTFdLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggJiYgIXNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtMV0ubGVuZ3RoKSB7XG4gICAgICAgICAgICBzZWdtZW50cy5wb3AoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWdtZW50cy5wdXNoKHZbaV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHYgfHwgdHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLTFdID09PSAnJykge1xuICAgICAgICAgIC8vIGVtcHR5IHRyYWlsaW5nIGVsZW1lbnRzIGhhdmUgdG8gYmUgb3ZlcndyaXR0ZW5cbiAgICAgICAgICAvLyB0byBwcmV2ZW50IHJlc3VsdHMgc3VjaCBhcyAvZm9vLy9iYXJcbiAgICAgICAgICBzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLTFdID0gdjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWdtZW50cy5wdXNoKHYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2KSB7XG4gICAgICAgIHNlZ21lbnRzW3NlZ21lbnRdID0gdjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZ21lbnRzLnNwbGljZShzZWdtZW50LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgIHNlZ21lbnRzLnVuc2hpZnQoJycpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBhdGgoc2VnbWVudHMuam9pbihzZXBhcmF0b3IpLCBidWlsZCk7XG4gIH07XG4gIHAuc2VnbWVudENvZGVkID0gZnVuY3Rpb24oc2VnbWVudCwgdiwgYnVpbGQpIHtcbiAgICB2YXIgc2VnbWVudHMsIGksIGw7XG5cbiAgICBpZiAodHlwZW9mIHNlZ21lbnQgIT09ICdudW1iZXInKSB7XG4gICAgICBidWlsZCA9IHY7XG4gICAgICB2ID0gc2VnbWVudDtcbiAgICAgIHNlZ21lbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnQoc2VnbWVudCwgdiwgYnVpbGQpO1xuICAgICAgaWYgKCFpc0FycmF5KHNlZ21lbnRzKSkge1xuICAgICAgICBzZWdtZW50cyA9IHNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBVUkkuZGVjb2RlKHNlZ21lbnRzKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBzZWdtZW50c1tpXSA9IFVSSS5kZWNvZGUoc2VnbWVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICB9XG5cbiAgICBpZiAoIWlzQXJyYXkodikpIHtcbiAgICAgIHYgPSAodHlwZW9mIHYgPT09ICdzdHJpbmcnIHx8IHYgaW5zdGFuY2VvZiBTdHJpbmcpID8gVVJJLmVuY29kZSh2KSA6IHY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSB2Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2W2ldID0gVVJJLmRlY29kZSh2W2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zZWdtZW50KHNlZ21lbnQsIHYsIGJ1aWxkKTtcbiAgfTtcblxuICAvLyBtdXRhdGluZyBxdWVyeSBzdHJpbmdcbiAgdmFyIHEgPSBwLnF1ZXJ5O1xuICBwLnF1ZXJ5ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodiA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICAgIHZhciByZXN1bHQgPSB2LmNhbGwodGhpcywgZGF0YSk7XG4gICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KHJlc3VsdCB8fCBkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIGlmICh2ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KHYsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHEuY2FsbCh0aGlzLCB2LCBidWlsZCk7XG4gICAgfVxuICB9O1xuICBwLnNldFF1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGJ1aWxkKSB7XG4gICAgdmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG5cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IG5hbWUgaW5zdGFuY2VvZiBTdHJpbmcpIHtcbiAgICAgIGRhdGFbbmFtZV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBudWxsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xuICAgICAgICBpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkge1xuICAgICAgICAgIGRhdGFba2V5XSA9IG5hbWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuYWRkUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBuYW1lIHBhcmFtZXRlcicpO1xuICAgIH1cblxuICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkoZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBidWlsZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcC5hZGRRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBidWlsZCkge1xuICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgIFVSSS5hZGRRdWVyeShkYXRhLCBuYW1lLCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHZhbHVlKTtcbiAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgYnVpbGQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHAucmVtb3ZlUXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgYnVpbGQpIHtcbiAgICB2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICBVUkkucmVtb3ZlUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUpO1xuICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkoZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBidWlsZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcC5oYXNRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSkge1xuICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgIHJldHVybiBVUkkuaGFzUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUsIHdpdGhpbkFycmF5KTtcbiAgfTtcbiAgcC5zZXRTZWFyY2ggPSBwLnNldFF1ZXJ5O1xuICBwLmFkZFNlYXJjaCA9IHAuYWRkUXVlcnk7XG4gIHAucmVtb3ZlU2VhcmNoID0gcC5yZW1vdmVRdWVyeTtcbiAgcC5oYXNTZWFyY2ggPSBwLmhhc1F1ZXJ5O1xuXG4gIC8vIHNhbml0aXppbmcgVVJMc1xuICBwLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIC5ub3JtYWxpemVQcm90b2NvbChmYWxzZSlcbiAgICAgICAgLm5vcm1hbGl6ZVF1ZXJ5KGZhbHNlKVxuICAgICAgICAubm9ybWFsaXplRnJhZ21lbnQoZmFsc2UpXG4gICAgICAgIC5idWlsZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gICAgICAubm9ybWFsaXplUHJvdG9jb2woZmFsc2UpXG4gICAgICAubm9ybWFsaXplSG9zdG5hbWUoZmFsc2UpXG4gICAgICAubm9ybWFsaXplUG9ydChmYWxzZSlcbiAgICAgIC5ub3JtYWxpemVQYXRoKGZhbHNlKVxuICAgICAgLm5vcm1hbGl6ZVF1ZXJ5KGZhbHNlKVxuICAgICAgLm5vcm1hbGl6ZUZyYWdtZW50KGZhbHNlKVxuICAgICAgLmJ1aWxkKCk7XG4gIH07XG4gIHAubm9ybWFsaXplUHJvdG9jb2wgPSBmdW5jdGlvbihidWlsZCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fcGFydHMucHJvdG9jb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9wYXJ0cy5wcm90b2NvbCA9IHRoaXMuX3BhcnRzLnByb3RvY29sLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHAubm9ybWFsaXplSG9zdG5hbWUgPSBmdW5jdGlvbihidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkge1xuICAgICAgaWYgKHRoaXMuaXMoJ0lETicpICYmIHB1bnljb2RlKSB7XG4gICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXMoJ0lQdjYnKSAmJiBJUHY2KSB7XG4gICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gSVB2Ni5iZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBwLm5vcm1hbGl6ZVBvcnQgPSBmdW5jdGlvbihidWlsZCkge1xuICAgIC8vIHJlbW92ZSBwb3J0IG9mIGl0J3MgdGhlIHByb3RvY29sJ3MgZGVmYXVsdFxuICAgIGlmICh0eXBlb2YgdGhpcy5fcGFydHMucHJvdG9jb2wgPT09ICdzdHJpbmcnICYmIHRoaXMuX3BhcnRzLnBvcnQgPT09IFVSSS5kZWZhdWx0UG9ydHNbdGhpcy5fcGFydHMucHJvdG9jb2xdKSB7XG4gICAgICB0aGlzLl9wYXJ0cy5wb3J0ID0gbnVsbDtcbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcC5ub3JtYWxpemVQYXRoID0gZnVuY3Rpb24oYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX3BhcnRzLnBhdGggfHwgdGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3dhc19yZWxhdGl2ZTtcbiAgICB2YXIgX3BhdGggPSB0aGlzLl9wYXJ0cy5wYXRoO1xuICAgIHZhciBfbGVhZGluZ1BhcmVudHMgPSAnJztcbiAgICB2YXIgX3BhcmVudCwgX3BvcztcblxuICAgIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRoc1xuICAgIGlmIChfcGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgX3dhc19yZWxhdGl2ZSA9IHRydWU7XG4gICAgICBfcGF0aCA9ICcvJyArIF9wYXRoO1xuICAgIH1cblxuICAgIC8vIHJlc29sdmUgc2ltcGxlc1xuICAgIF9wYXRoID0gX3BhdGhcbiAgICAgIC5yZXBsYWNlKC8oXFwvKFxcLlxcLykrKXwoXFwvXFwuJCkvZywgJy8nKVxuICAgICAgLnJlcGxhY2UoL1xcL3syLH0vZywgJy8nKTtcblxuICAgIC8vIHJlbWVtYmVyIGxlYWRpbmcgcGFyZW50c1xuICAgIGlmIChfd2FzX3JlbGF0aXZlKSB7XG4gICAgICBfbGVhZGluZ1BhcmVudHMgPSBfcGF0aC5zdWJzdHJpbmcoMSkubWF0Y2goL14oXFwuXFwuXFwvKSsvKSB8fCAnJztcbiAgICAgIGlmIChfbGVhZGluZ1BhcmVudHMpIHtcbiAgICAgICAgX2xlYWRpbmdQYXJlbnRzID0gX2xlYWRpbmdQYXJlbnRzWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJlc29sdmUgcGFyZW50c1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBfcGFyZW50ID0gX3BhdGguaW5kZXhPZignLy4uJyk7XG4gICAgICBpZiAoX3BhcmVudCA9PT0gLTEpIHtcbiAgICAgICAgLy8gbm8gbW9yZSAuLi8gdG8gcmVzb2x2ZVxuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAoX3BhcmVudCA9PT0gMCkge1xuICAgICAgICAvLyB0b3AgbGV2ZWwgY2Fubm90IGJlIHJlbGF0aXZlLCBza2lwIGl0XG4gICAgICAgIF9wYXRoID0gX3BhdGguc3Vic3RyaW5nKDMpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgX3BvcyA9IF9wYXRoLnN1YnN0cmluZygwLCBfcGFyZW50KS5sYXN0SW5kZXhPZignLycpO1xuICAgICAgaWYgKF9wb3MgPT09IC0xKSB7XG4gICAgICAgIF9wb3MgPSBfcGFyZW50O1xuICAgICAgfVxuICAgICAgX3BhdGggPSBfcGF0aC5zdWJzdHJpbmcoMCwgX3BvcykgKyBfcGF0aC5zdWJzdHJpbmcoX3BhcmVudCArIDMpO1xuICAgIH1cblxuICAgIC8vIHJldmVydCB0byByZWxhdGl2ZVxuICAgIGlmIChfd2FzX3JlbGF0aXZlICYmIHRoaXMuaXMoJ3JlbGF0aXZlJykpIHtcbiAgICAgIF9wYXRoID0gX2xlYWRpbmdQYXJlbnRzICsgX3BhdGguc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIF9wYXRoID0gVVJJLnJlY29kZVBhdGgoX3BhdGgpO1xuICAgIHRoaXMuX3BhcnRzLnBhdGggPSBfcGF0aDtcbiAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHAubm9ybWFsaXplUGF0aG5hbWUgPSBwLm5vcm1hbGl6ZVBhdGg7XG4gIHAubm9ybWFsaXplUXVlcnkgPSBmdW5jdGlvbihidWlsZCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fcGFydHMucXVlcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoIXRoaXMuX3BhcnRzLnF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1ZXJ5KFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcC5ub3JtYWxpemVGcmFnbWVudCA9IGZ1bmN0aW9uKGJ1aWxkKSB7XG4gICAgaWYgKCF0aGlzLl9wYXJ0cy5mcmFnbWVudCkge1xuICAgICAgdGhpcy5fcGFydHMuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBwLm5vcm1hbGl6ZVNlYXJjaCA9IHAubm9ybWFsaXplUXVlcnk7XG4gIHAubm9ybWFsaXplSGFzaCA9IHAubm9ybWFsaXplRnJhZ21lbnQ7XG5cbiAgcC5pc284ODU5ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gZXhwZWN0IHVuaWNvZGUgaW5wdXQsIGlzbzg4NTkgb3V0cHV0XG4gICAgdmFyIGUgPSBVUkkuZW5jb2RlO1xuICAgIHZhciBkID0gVVJJLmRlY29kZTtcblxuICAgIFVSSS5lbmNvZGUgPSBlc2NhcGU7XG4gICAgVVJJLmRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcbiAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuICAgIFVSSS5lbmNvZGUgPSBlO1xuICAgIFVSSS5kZWNvZGUgPSBkO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHAudW5pY29kZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGV4cGVjdCBpc284ODU5IGlucHV0LCB1bmljb2RlIG91dHB1dFxuICAgIHZhciBlID0gVVJJLmVuY29kZTtcbiAgICB2YXIgZCA9IFVSSS5kZWNvZGU7XG5cbiAgICBVUkkuZW5jb2RlID0gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50O1xuICAgIFVSSS5kZWNvZGUgPSB1bmVzY2FwZTtcbiAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuICAgIFVSSS5lbmNvZGUgPSBlO1xuICAgIFVSSS5kZWNvZGUgPSBkO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHAucmVhZGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdXJpID0gdGhpcy5jbG9uZSgpO1xuICAgIC8vIHJlbW92aW5nIHVzZXJuYW1lLCBwYXNzd29yZCwgYmVjYXVzZSB0aGV5IHNob3VsZG4ndCBiZSBkaXNwbGF5ZWQgYWNjb3JkaW5nIHRvIFJGQyAzOTg2XG4gICAgdXJpLnVzZXJuYW1lKCcnKS5wYXNzd29yZCgnJykubm9ybWFsaXplKCk7XG4gICAgdmFyIHQgPSAnJztcbiAgICBpZiAodXJpLl9wYXJ0cy5wcm90b2NvbCkge1xuICAgICAgdCArPSB1cmkuX3BhcnRzLnByb3RvY29sICsgJzovLyc7XG4gICAgfVxuXG4gICAgaWYgKHVyaS5fcGFydHMuaG9zdG5hbWUpIHtcbiAgICAgIGlmICh1cmkuaXMoJ3B1bnljb2RlJykgJiYgcHVueWNvZGUpIHtcbiAgICAgICAgdCArPSBwdW55Y29kZS50b1VuaWNvZGUodXJpLl9wYXJ0cy5ob3N0bmFtZSk7XG4gICAgICAgIGlmICh1cmkuX3BhcnRzLnBvcnQpIHtcbiAgICAgICAgICB0ICs9ICc6JyArIHVyaS5fcGFydHMucG9ydDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdCArPSB1cmkuaG9zdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1cmkuX3BhcnRzLmhvc3RuYW1lICYmIHVyaS5fcGFydHMucGF0aCAmJiB1cmkuX3BhcnRzLnBhdGguY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIHQgKz0gJy8nO1xuICAgIH1cblxuICAgIHQgKz0gdXJpLnBhdGgodHJ1ZSk7XG4gICAgaWYgKHVyaS5fcGFydHMucXVlcnkpIHtcbiAgICAgIHZhciBxID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMCwgcXAgPSB1cmkuX3BhcnRzLnF1ZXJ5LnNwbGl0KCcmJyksIGwgPSBxcC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIGt2ID0gKHFwW2ldIHx8ICcnKS5zcGxpdCgnPScpO1xuICAgICAgICBxICs9ICcmJyArIFVSSS5kZWNvZGVRdWVyeShrdlswXSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSlcbiAgICAgICAgICAucmVwbGFjZSgvJi9nLCAnJTI2Jyk7XG5cbiAgICAgICAgaWYgKGt2WzFdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBxICs9ICc9JyArIFVSSS5kZWNvZGVRdWVyeShrdlsxXSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC8mL2csICclMjYnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdCArPSAnPycgKyBxLnN1YnN0cmluZygxKTtcbiAgICB9XG5cbiAgICB0ICs9IFVSSS5kZWNvZGVRdWVyeSh1cmkuaGFzaCgpLCB0cnVlKTtcbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyByZXNvbHZpbmcgcmVsYXRpdmUgYW5kIGFic29sdXRlIFVSTHNcbiAgcC5hYnNvbHV0ZVRvID0gZnVuY3Rpb24oYmFzZSkge1xuICAgIHZhciByZXNvbHZlZCA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgcHJvcGVydGllcyA9IFsncHJvdG9jb2wnLCAndXNlcm5hbWUnLCAncGFzc3dvcmQnLCAnaG9zdG5hbWUnLCAncG9ydCddO1xuICAgIHZhciBiYXNlZGlyLCBpLCBwO1xuXG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVUk5zIGRvIG5vdCBoYXZlIGFueSBnZW5lcmFsbHkgZGVmaW5lZCBoaWVyYXJjaGljYWwgY29tcG9uZW50cycpO1xuICAgIH1cblxuICAgIGlmICghKGJhc2UgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAgICBiYXNlID0gbmV3IFVSSShiYXNlKTtcbiAgICB9XG5cbiAgICBpZiAoIXJlc29sdmVkLl9wYXJ0cy5wcm90b2NvbCkge1xuICAgICAgcmVzb2x2ZWQuX3BhcnRzLnByb3RvY29sID0gYmFzZS5fcGFydHMucHJvdG9jb2w7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgKHAgPSBwcm9wZXJ0aWVzW2ldKTsgaSsrKSB7XG4gICAgICByZXNvbHZlZC5fcGFydHNbcF0gPSBiYXNlLl9wYXJ0c1twXTtcbiAgICB9XG5cbiAgICBpZiAoIXJlc29sdmVkLl9wYXJ0cy5wYXRoKSB7XG4gICAgICByZXNvbHZlZC5fcGFydHMucGF0aCA9IGJhc2UuX3BhcnRzLnBhdGg7XG4gICAgICBpZiAoIXJlc29sdmVkLl9wYXJ0cy5xdWVyeSkge1xuICAgICAgICByZXNvbHZlZC5fcGFydHMucXVlcnkgPSBiYXNlLl9wYXJ0cy5xdWVyeTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJlc29sdmVkLl9wYXJ0cy5wYXRoLnN1YnN0cmluZygtMikgPT09ICcuLicpIHtcbiAgICAgIHJlc29sdmVkLl9wYXJ0cy5wYXRoICs9ICcvJztcbiAgICB9XG5cbiAgICBpZiAocmVzb2x2ZWQucGF0aCgpLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBiYXNlZGlyID0gYmFzZS5kaXJlY3RvcnkoKTtcbiAgICAgIHJlc29sdmVkLl9wYXJ0cy5wYXRoID0gKGJhc2VkaXIgPyAoYmFzZWRpciArICcvJykgOiAnJykgKyByZXNvbHZlZC5fcGFydHMucGF0aDtcbiAgICAgIHJlc29sdmVkLm5vcm1hbGl6ZVBhdGgoKTtcbiAgICB9XG5cbiAgICByZXNvbHZlZC5idWlsZCgpO1xuICAgIHJldHVybiByZXNvbHZlZDtcbiAgfTtcbiAgcC5yZWxhdGl2ZVRvID0gZnVuY3Rpb24oYmFzZSkge1xuICAgIHZhciByZWxhdGl2ZSA9IHRoaXMuY2xvbmUoKS5ub3JtYWxpemUoKTtcbiAgICB2YXIgcmVsYXRpdmVQYXJ0cywgYmFzZVBhcnRzLCBjb21tb24sIHJlbGF0aXZlUGF0aCwgYmFzZVBhdGg7XG5cbiAgICBpZiAocmVsYXRpdmUuX3BhcnRzLnVybikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVUk5zIGRvIG5vdCBoYXZlIGFueSBnZW5lcmFsbHkgZGVmaW5lZCBoaWVyYXJjaGljYWwgY29tcG9uZW50cycpO1xuICAgIH1cblxuICAgIGJhc2UgPSBuZXcgVVJJKGJhc2UpLm5vcm1hbGl6ZSgpO1xuICAgIHJlbGF0aXZlUGFydHMgPSByZWxhdGl2ZS5fcGFydHM7XG4gICAgYmFzZVBhcnRzID0gYmFzZS5fcGFydHM7XG4gICAgcmVsYXRpdmVQYXRoID0gcmVsYXRpdmUucGF0aCgpO1xuICAgIGJhc2VQYXRoID0gYmFzZS5wYXRoKCk7XG5cbiAgICBpZiAocmVsYXRpdmVQYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VSSSBpcyBhbHJlYWR5IHJlbGF0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKGJhc2VQYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjYWxjdWxhdGUgYSBVUkkgcmVsYXRpdmUgdG8gYW5vdGhlciByZWxhdGl2ZSBVUkknKTtcbiAgICB9XG5cbiAgICBpZiAocmVsYXRpdmVQYXJ0cy5wcm90b2NvbCA9PT0gYmFzZVBhcnRzLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZVBhcnRzLnByb3RvY29sID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAocmVsYXRpdmVQYXJ0cy51c2VybmFtZSAhPT0gYmFzZVBhcnRzLnVzZXJuYW1lIHx8IHJlbGF0aXZlUGFydHMucGFzc3dvcmQgIT09IGJhc2VQYXJ0cy5wYXNzd29yZCkge1xuICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gICAgfVxuXG4gICAgaWYgKHJlbGF0aXZlUGFydHMucHJvdG9jb2wgIT09IG51bGwgfHwgcmVsYXRpdmVQYXJ0cy51c2VybmFtZSAhPT0gbnVsbCB8fCByZWxhdGl2ZVBhcnRzLnBhc3N3b3JkICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcbiAgICB9XG5cbiAgICBpZiAocmVsYXRpdmVQYXJ0cy5ob3N0bmFtZSA9PT0gYmFzZVBhcnRzLmhvc3RuYW1lICYmIHJlbGF0aXZlUGFydHMucG9ydCA9PT0gYmFzZVBhcnRzLnBvcnQpIHtcbiAgICAgIHJlbGF0aXZlUGFydHMuaG9zdG5hbWUgPSBudWxsO1xuICAgICAgcmVsYXRpdmVQYXJ0cy5wb3J0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gICAgfVxuXG4gICAgaWYgKHJlbGF0aXZlUGF0aCA9PT0gYmFzZVBhdGgpIHtcbiAgICAgIHJlbGF0aXZlUGFydHMucGF0aCA9ICcnO1xuICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gICAgfVxuXG4gICAgLy8gZGV0ZXJtaW5lIGNvbW1vbiBzdWIgcGF0aFxuICAgIGNvbW1vbiA9IFVSSS5jb21tb25QYXRoKHJlbGF0aXZlLnBhdGgoKSwgYmFzZS5wYXRoKCkpO1xuXG4gICAgLy8gSWYgdGhlIHBhdGhzIGhhdmUgbm90aGluZyBpbiBjb21tb24sIHJldHVybiBhIHJlbGF0aXZlIFVSTCB3aXRoIHRoZSBhYnNvbHV0ZSBwYXRoLlxuICAgIGlmICghY29tbW9uKSB7XG4gICAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50cyA9IGJhc2VQYXJ0cy5wYXRoXG4gICAgICAuc3Vic3RyaW5nKGNvbW1vbi5sZW5ndGgpXG4gICAgICAucmVwbGFjZSgvW15cXC9dKiQvLCAnJylcbiAgICAgIC5yZXBsYWNlKC8uKj9cXC8vZywgJy4uLycpO1xuXG4gICAgcmVsYXRpdmVQYXJ0cy5wYXRoID0gcGFyZW50cyArIHJlbGF0aXZlUGFydHMucGF0aC5zdWJzdHJpbmcoY29tbW9uLmxlbmd0aCk7XG5cbiAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcbiAgfTtcblxuICAvLyBjb21wYXJpbmcgVVJJc1xuICBwLmVxdWFscyA9IGZ1bmN0aW9uKHVyaSkge1xuICAgIHZhciBvbmUgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIHR3byA9IG5ldyBVUkkodXJpKTtcbiAgICB2YXIgb25lX21hcCA9IHt9O1xuICAgIHZhciB0d29fbWFwID0ge307XG4gICAgdmFyIGNoZWNrZWQgPSB7fTtcbiAgICB2YXIgb25lX3F1ZXJ5LCB0d29fcXVlcnksIGtleTtcblxuICAgIG9uZS5ub3JtYWxpemUoKTtcbiAgICB0d28ubm9ybWFsaXplKCk7XG5cbiAgICAvLyBleGFjdCBtYXRjaFxuICAgIGlmIChvbmUudG9TdHJpbmcoKSA9PT0gdHdvLnRvU3RyaW5nKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIGV4dHJhY3QgcXVlcnkgc3RyaW5nXG4gICAgb25lX3F1ZXJ5ID0gb25lLnF1ZXJ5KCk7XG4gICAgdHdvX3F1ZXJ5ID0gdHdvLnF1ZXJ5KCk7XG4gICAgb25lLnF1ZXJ5KCcnKTtcbiAgICB0d28ucXVlcnkoJycpO1xuXG4gICAgLy8gZGVmaW5pdGVseSBub3QgZXF1YWwgaWYgbm90IGV2ZW4gbm9uLXF1ZXJ5IHBhcnRzIG1hdGNoXG4gICAgaWYgKG9uZS50b1N0cmluZygpICE9PSB0d28udG9TdHJpbmcoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHF1ZXJ5IHBhcmFtZXRlcnMgaGF2ZSB0aGUgc2FtZSBsZW5ndGgsIGV2ZW4gaWYgdGhleSdyZSBwZXJtdXRlZFxuICAgIGlmIChvbmVfcXVlcnkubGVuZ3RoICE9PSB0d29fcXVlcnkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgb25lX21hcCA9IFVSSS5wYXJzZVF1ZXJ5KG9uZV9xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgdHdvX21hcCA9IFVSSS5wYXJzZVF1ZXJ5KHR3b19xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG5cbiAgICBmb3IgKGtleSBpbiBvbmVfbWFwKSB7XG4gICAgICBpZiAoaGFzT3duLmNhbGwob25lX21hcCwga2V5KSkge1xuICAgICAgICBpZiAoIWlzQXJyYXkob25lX21hcFtrZXldKSkge1xuICAgICAgICAgIGlmIChvbmVfbWFwW2tleV0gIT09IHR3b19tYXBba2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghYXJyYXlzRXF1YWwob25lX21hcFtrZXldLCB0d29fbWFwW2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hlY2tlZFtrZXldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGtleSBpbiB0d29fbWFwKSB7XG4gICAgICBpZiAoaGFzT3duLmNhbGwodHdvX21hcCwga2V5KSkge1xuICAgICAgICBpZiAoIWNoZWNrZWRba2V5XSkge1xuICAgICAgICAgIC8vIHR3byBjb250YWlucyBhIHBhcmFtZXRlciBub3QgcHJlc2VudCBpbiBvbmVcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBzdGF0ZVxuICBwLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyA9IGZ1bmN0aW9uKHYpIHtcbiAgICB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSAhIXY7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcC5lc2NhcGVRdWVyeVNwYWNlID0gZnVuY3Rpb24odikge1xuICAgIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UgPSAhIXY7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIFVSSTtcbn0pKTtcbiIsIi8qISBodHRwOi8vbXRocy5iZS9wdW55Y29kZSB2MS4yLjMgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsKSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LlxuXHQgKiBAbmFtZSBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdHZhciBwdW55Y29kZSxcblxuXHQvKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cdG1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuXHQvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG5cdGJhc2UgPSAzNixcblx0dE1pbiA9IDEsXG5cdHRNYXggPSAyNixcblx0c2tldyA9IDM4LFxuXHRkYW1wID0gNzAwLFxuXHRpbml0aWFsQmlhcyA9IDcyLFxuXHRpbml0aWFsTiA9IDEyOCwgLy8gMHg4MFxuXHRkZWxpbWl0ZXIgPSAnLScsIC8vICdcXHgyRCdcblxuXHQvKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xuXHRyZWdleFB1bnljb2RlID0gL154bi0tLyxcblx0cmVnZXhOb25BU0NJSSA9IC9bXiAtfl0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvXFx4MkV8XFx1MzAwMnxcXHVGRjBFfFxcdUZGNjEvZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0d2hpbGUgKGxlbmd0aC0tKSB7XG5cdFx0XHRhcnJheVtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiBhcnJheTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3MuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0cmV0dXJuIG1hcChzdHJpbmcuc3BsaXQocmVnZXhTZXBhcmF0b3JzKSwgZm4pLmpvaW4oJy4nKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGRlY29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgY291bnRlciA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZW5jb2RlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBuZXcgVW5pY29kZSBzdHJpbmcgKFVDUy0yKS5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHRyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fSkuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuXHQgKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuXHQgKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50IC0gNDggPCAxMCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gNjUgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gOTcgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuXHRcdH1cblx0XHRyZXR1cm4gYmFzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gZGlnaXQgVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuXHQgKiBgMGAgdG8gYGJhc2UgLSAxYC4gSWYgYGZsYWdgIGlzIG5vbi16ZXJvLCB0aGUgdXBwZXJjYXNlIGZvcm0gaXNcblx0ICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcblx0ICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cblx0ICovXG5cdGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuXHRcdC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG5cdFx0Ly8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG5cdFx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuXHQgKiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGxlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIHRvIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHlcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIHRvIFVuaWNvZGUuIE9ubHkgdGhlXG5cdCAqIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS4gaXQgZG9lc24ndFxuXHQgKiBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGNvbnZlcnRlZCB0b1xuXHQgKiBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgUHVueWNvZGUgZG9tYWluIG5hbWUgdG8gY29udmVydCB0byBVbmljb2RlLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcblx0ICogc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9Vbmljb2RlKGRvbWFpbikge1xuXHRcdHJldHVybiBtYXBEb21haW4oZG9tYWluLCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSB0byBQdW55Y29kZS4gT25seSB0aGVcblx0ICogbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLiBpdCBkb2Vzbid0XG5cdCAqIG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluIEFTQ0lJLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgdG8gY29udmVydCwgYXMgYSBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZS5cblx0ICovXG5cdGZ1bmN0aW9uIHRvQVNDSUkoZG9tYWluKSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihkb21haW4sIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjIuMycsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH1cdGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuXHRcdGlmIChmcmVlTW9kdWxlKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcbiIsImFyZ3VtZW50c1s0XVtcIi9Vc2Vycy9jcmF2ZXJvZC9vcGVuc291cmNlL3JlYWRpdW0tanMvbm9kZV9tb2R1bGVzL0JhY2tib25lL2JhY2tib25lLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAvKlxuICAgKiBHZW5lcmF0ZWQgYnkgUEVHLmpzIDAuOC4wLlxuICAgKlxuICAgKiBodHRwOi8vcGVnanMubWFqZGEuY3ovXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHBlZyRzdWJjbGFzcyhjaGlsZCwgcGFyZW50KSB7XG4gICAgZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9XG4gICAgY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlO1xuICAgIGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7XG4gIH1cblxuICBmdW5jdGlvbiBTeW50YXhFcnJvcihtZXNzYWdlLCBleHBlY3RlZCwgZm91bmQsIG9mZnNldCwgbGluZSwgY29sdW1uKSB7XG4gICAgdGhpcy5tZXNzYWdlICA9IG1lc3NhZ2U7XG4gICAgdGhpcy5leHBlY3RlZCA9IGV4cGVjdGVkO1xuICAgIHRoaXMuZm91bmQgICAgPSBmb3VuZDtcbiAgICB0aGlzLm9mZnNldCAgID0gb2Zmc2V0O1xuICAgIHRoaXMubGluZSAgICAgPSBsaW5lO1xuICAgIHRoaXMuY29sdW1uICAgPSBjb2x1bW47XG5cbiAgICB0aGlzLm5hbWUgICAgID0gXCJTeW50YXhFcnJvclwiO1xuICB9XG5cbiAgcGVnJHN1YmNsYXNzKFN5bnRheEVycm9yLCBFcnJvcik7XG5cbiAgZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDoge30sXG5cbiAgICAgICAgcGVnJEZBSUxFRCA9IHt9LFxuXG4gICAgICAgIHBlZyRzdGFydFJ1bGVGdW5jdGlvbnMgPSB7IGZyYWdtZW50OiBwZWckcGFyc2VmcmFnbWVudCB9LFxuICAgICAgICBwZWckc3RhcnRSdWxlRnVuY3Rpb24gID0gcGVnJHBhcnNlZnJhZ21lbnQsXG5cbiAgICAgICAgcGVnJGMwID0gcGVnJEZBSUxFRCxcbiAgICAgICAgcGVnJGMxID0gXCJlcHViY2ZpKFwiLFxuICAgICAgICBwZWckYzIgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJlcHViY2ZpKFwiLCBkZXNjcmlwdGlvbjogXCJcXFwiZXB1YmNmaShcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMzID0gXCIpXCIsXG4gICAgICAgIHBlZyRjNCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIilcIiwgZGVzY3JpcHRpb246IFwiXFxcIilcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM1ID0gZnVuY3Rpb24oZnJhZ21lbnRWYWwpIHsgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTpcIkNGSUFTVFwiLCBjZmlTdHJpbmc6ZnJhZ21lbnRWYWwgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHBlZyRjNiA9IFwiLFwiLFxuICAgICAgICBwZWckYzcgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIsXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIsXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjOCA9IGZ1bmN0aW9uKHN0ZXBWYWwsIGxvY2FsUGF0aFZhbCwgcmFuZ2VMb2NhbFBhdGgxVmFsLCByYW5nZUxvY2FsUGF0aDJWYWwpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6XCJyYW5nZVwiLCBwYXRoOnN0ZXBWYWwsIGxvY2FsUGF0aDpsb2NhbFBhdGhWYWwsIHJhbmdlMTpyYW5nZUxvY2FsUGF0aDFWYWwsIHJhbmdlMjpyYW5nZUxvY2FsUGF0aDJWYWwgfTtcbiAgICAgICAgICB9LFxuICAgICAgICBwZWckYzkgPSBmdW5jdGlvbihzdGVwVmFsLCBsb2NhbFBhdGhWYWwpIHsgXG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOlwicGF0aFwiLCBwYXRoOnN0ZXBWYWwsIGxvY2FsUGF0aDpsb2NhbFBhdGhWYWwgfTsgXG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzEwID0gW10sXG4gICAgICAgIHBlZyRjMTEgPSBudWxsLFxuICAgICAgICBwZWckYzEyID0gZnVuY3Rpb24obG9jYWxQYXRoU3RlcFZhbCwgdGVybVN0ZXBWYWwpIHsgXG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdGVwczpsb2NhbFBhdGhTdGVwVmFsLCB0ZXJtU3RlcDp0ZXJtU3RlcFZhbCB9OyBcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHBlZyRjMTMgPSBcIi9cIixcbiAgICAgICAgcGVnJGMxNCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIi9cIiwgZGVzY3JpcHRpb246IFwiXFxcIi9cXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxNSA9IFwiW1wiLFxuICAgICAgICBwZWckYzE2ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiW1wiLCBkZXNjcmlwdGlvbjogXCJcXFwiW1xcXCJcIiB9LFxuICAgICAgICBwZWckYzE3ID0gXCJdXCIsXG4gICAgICAgIHBlZyRjMTggPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJdXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJdXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTkgPSBmdW5jdGlvbihzdGVwTGVuZ3RoVmFsLCBhc3NlcnRWYWwpIHsgXG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOlwiaW5kZXhTdGVwXCIsIHN0ZXBMZW5ndGg6c3RlcExlbmd0aFZhbCwgaWRBc3NlcnRpb246YXNzZXJ0VmFsWzFdIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzIwID0gXCIhL1wiLFxuICAgICAgICBwZWckYzIxID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiIS9cIiwgZGVzY3JpcHRpb246IFwiXFxcIiEvXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMjIgPSBmdW5jdGlvbihzdGVwTGVuZ3RoVmFsLCBhc3NlcnRWYWwpIHsgXG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOlwiaW5kaXJlY3Rpb25TdGVwXCIsIHN0ZXBMZW5ndGg6c3RlcExlbmd0aFZhbCwgaWRBc3NlcnRpb246YXNzZXJ0VmFsWzFdIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzIzID0gXCI6XCIsXG4gICAgICAgIHBlZyRjMjQgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCI6XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCI6XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMjUgPSBmdW5jdGlvbih0ZXh0T2Zmc2V0VmFsdWUsIHRleHRMb2NBc3NlcnRWYWwpIHsgXG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOlwidGV4dFRlcm1pbnVzXCIsIG9mZnNldFZhbHVlOnRleHRPZmZzZXRWYWx1ZSwgdGV4dEFzc2VydGlvbjp0ZXh0TG9jQXNzZXJ0VmFsWzFdIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzI2ID0gZnVuY3Rpb24oaWRWYWwpIHsgXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaWRWYWw7IFxuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMyNyA9IGZ1bmN0aW9uKGNzdlZhbCwgcGFyYW1WYWwpIHsgXG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOlwidGV4dExvY2F0aW9uQXNzZXJ0aW9uXCIsIGNzdjpjc3ZWYWwsIHBhcmFtZXRlcjpwYXJhbVZhbCB9OyBcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHBlZyRjMjggPSBcIjtcIixcbiAgICAgICAgcGVnJGMyOSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIjtcIiwgZGVzY3JpcHRpb246IFwiXFxcIjtcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMzMCA9IFwiPVwiLFxuICAgICAgICBwZWckYzMxID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiPVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiPVxcXCJcIiB9LFxuICAgICAgICBwZWckYzMyID0gZnVuY3Rpb24ocGFyYW1MSFNWYWwsIHBhcmFtUkhTVmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTpcInBhcmFtZXRlclwiLCBMSFNWYWx1ZTpwYXJhbUxIU1ZhbCwgUkhTVmFsdWU6cGFyYW1SSFNWYWwgfTsgXG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzMzID0gZnVuY3Rpb24ocHJlQXNzZXJ0aW9uVmFsLCBwb3N0QXNzZXJ0aW9uVmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTpcImNzdlwiLCBwcmVBc3NlcnRpb246cHJlQXNzZXJ0aW9uVmFsLCBwb3N0QXNzZXJ0aW9uOnBvc3RBc3NlcnRpb25WYWwgfTsgXG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzM0ID0gZnVuY3Rpb24oc3RyaW5nVmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1ZhbC5qb2luKCcnKTsgXG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzM1ID0gZnVuY3Rpb24oZXNjU3BlY0NoYXJWYWwpIHsgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVzY1NwZWNDaGFyVmFsWzFdOyBcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHBlZyRjMzYgPSAvXlsxLTldLyxcbiAgICAgICAgcGVnJGMzNyA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbMS05XVwiLCBkZXNjcmlwdGlvbjogXCJbMS05XVwiIH0sXG4gICAgICAgIHBlZyRjMzggPSAvXlswLTldLyxcbiAgICAgICAgcGVnJGMzOSA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbMC05XVwiLCBkZXNjcmlwdGlvbjogXCJbMC05XVwiIH0sXG4gICAgICAgIHBlZyRjNDAgPSBcIi5cIixcbiAgICAgICAgcGVnJGM0MSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIi5cIiwgZGVzY3JpcHRpb246IFwiXFxcIi5cXFwiXCIgfSxcbiAgICAgICAgcGVnJGM0MiA9IGZ1bmN0aW9uKGludFBhcnRWYWwsIGZyYWNQYXJ0VmFsKSB7IFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGludFBhcnRWYWwuam9pbignJykgKyBcIi5cIiArIGZyYWNQYXJ0VmFsLmpvaW4oJycpOyBcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHBlZyRjNDMgPSBcIjBcIixcbiAgICAgICAgcGVnJGM0NCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIjBcIiwgZGVzY3JpcHRpb246IFwiXFxcIjBcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM0NSA9IGZ1bmN0aW9uKGludGVnZXJWYWwpIHsgXG5cbiAgICAgICAgICAgICAgICBpZiAoaW50ZWdlclZhbCA9PT0gXCIwXCIpIHsgXG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIwXCI7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICBlbHNlIHsgXG4gICAgICAgICAgICAgICAgICByZXR1cm4gaW50ZWdlclZhbFswXS5jb25jYXQoaW50ZWdlclZhbFsxXS5qb2luKCcnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGM0NiA9IFwiIFwiLFxuICAgICAgICBwZWckYzQ3ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiIFwiLCBkZXNjcmlwdGlvbjogXCJcXFwiIFxcXCJcIiB9LFxuICAgICAgICBwZWckYzQ4ID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIiBcIjsgfSxcbiAgICAgICAgcGVnJGM0OSA9IFwiXlwiLFxuICAgICAgICBwZWckYzUwID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiXlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXlxcXCJcIiB9LFxuICAgICAgICBwZWckYzUxID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIl5cIjsgfSxcbiAgICAgICAgcGVnJGM1MiA9IFwiXFxcIlwiLFxuICAgICAgICBwZWckYzUzID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiXFxcIlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXFxcXFxcXCJcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM1NCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gJ1wiJzsgfSxcbiAgICAgICAgcGVnJGM1NSA9IGZ1bmN0aW9uKGJyYWNrZXRWYWwpIHsgcmV0dXJuIGJyYWNrZXRWYWw7IH0sXG4gICAgICAgIHBlZyRjNTYgPSBcIihcIixcbiAgICAgICAgcGVnJGM1NyA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIihcIiwgZGVzY3JpcHRpb246IFwiXFxcIihcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM1OCA9IGZ1bmN0aW9uKHBhcmFWYWwpIHsgcmV0dXJuIHBhcmFWYWw7IH0sXG4gICAgICAgIHBlZyRjNTkgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwiLFwiOyB9LFxuICAgICAgICBwZWckYzYwID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIjtcIjsgfSxcbiAgICAgICAgcGVnJGM2MSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCI9XCI7IH0sXG4gICAgICAgIHBlZyRjNjIgPSAvXlthLXpdLyxcbiAgICAgICAgcGVnJGM2MyA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbYS16XVwiLCBkZXNjcmlwdGlvbjogXCJbYS16XVwiIH0sXG4gICAgICAgIHBlZyRjNjQgPSAvXltBLVpdLyxcbiAgICAgICAgcGVnJGM2NSA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbQS1aXVwiLCBkZXNjcmlwdGlvbjogXCJbQS1aXVwiIH0sXG4gICAgICAgIHBlZyRjNjYgPSBcIi1cIixcbiAgICAgICAgcGVnJGM2NyA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIi1cIiwgZGVzY3JpcHRpb246IFwiXFxcIi1cXFwiXCIgfSxcbiAgICAgICAgcGVnJGM2OCA9IFwiX1wiLFxuICAgICAgICBwZWckYzY5ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiX1wiLCBkZXNjcmlwdGlvbjogXCJcXFwiX1xcXCJcIiB9LFxuICAgICAgICBwZWckYzcwID0gZnVuY3Rpb24oY2hhclZhbCkgeyByZXR1cm4gY2hhclZhbDsgfSxcblxuICAgICAgICBwZWckY3VyclBvcyAgICAgICAgICA9IDAsXG4gICAgICAgIHBlZyRyZXBvcnRlZFBvcyAgICAgID0gMCxcbiAgICAgICAgcGVnJGNhY2hlZFBvcyAgICAgICAgPSAwLFxuICAgICAgICBwZWckY2FjaGVkUG9zRGV0YWlscyA9IHsgbGluZTogMSwgY29sdW1uOiAxLCBzZWVuQ1I6IGZhbHNlIH0sXG4gICAgICAgIHBlZyRtYXhGYWlsUG9zICAgICAgID0gMCxcbiAgICAgICAgcGVnJG1heEZhaWxFeHBlY3RlZCAgPSBbXSxcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzICAgICAgPSAwLFxuXG4gICAgICAgIHBlZyRyZXN1bHQ7XG5cbiAgICBpZiAoXCJzdGFydFJ1bGVcIiBpbiBvcHRpb25zKSB7XG4gICAgICBpZiAoIShvcHRpb25zLnN0YXJ0UnVsZSBpbiBwZWckc3RhcnRSdWxlRnVuY3Rpb25zKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBzdGFydCBwYXJzaW5nIGZyb20gcnVsZSBcXFwiXCIgKyBvcHRpb25zLnN0YXJ0UnVsZSArIFwiXFxcIi5cIik7XG4gICAgICB9XG5cbiAgICAgIHBlZyRzdGFydFJ1bGVGdW5jdGlvbiA9IHBlZyRzdGFydFJ1bGVGdW5jdGlvbnNbb3B0aW9ucy5zdGFydFJ1bGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRleHQoKSB7XG4gICAgICByZXR1cm4gaW5wdXQuc3Vic3RyaW5nKHBlZyRyZXBvcnRlZFBvcywgcGVnJGN1cnJQb3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgICAgIHJldHVybiBwZWckcmVwb3J0ZWRQb3M7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZSgpIHtcbiAgICAgIHJldHVybiBwZWckY29tcHV0ZVBvc0RldGFpbHMocGVnJHJlcG9ydGVkUG9zKS5saW5lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbHVtbigpIHtcbiAgICAgIHJldHVybiBwZWckY29tcHV0ZVBvc0RldGFpbHMocGVnJHJlcG9ydGVkUG9zKS5jb2x1bW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwZWN0ZWQoZGVzY3JpcHRpb24pIHtcbiAgICAgIHRocm93IHBlZyRidWlsZEV4Y2VwdGlvbihcbiAgICAgICAgbnVsbCxcbiAgICAgICAgW3sgdHlwZTogXCJvdGhlclwiLCBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24gfV0sXG4gICAgICAgIHBlZyRyZXBvcnRlZFBvc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcnJvcihtZXNzYWdlKSB7XG4gICAgICB0aHJvdyBwZWckYnVpbGRFeGNlcHRpb24obWVzc2FnZSwgbnVsbCwgcGVnJHJlcG9ydGVkUG9zKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckY29tcHV0ZVBvc0RldGFpbHMocG9zKSB7XG4gICAgICBmdW5jdGlvbiBhZHZhbmNlKGRldGFpbHMsIHN0YXJ0UG9zLCBlbmRQb3MpIHtcbiAgICAgICAgdmFyIHAsIGNoO1xuXG4gICAgICAgIGZvciAocCA9IHN0YXJ0UG9zOyBwIDwgZW5kUG9zOyBwKyspIHtcbiAgICAgICAgICBjaCA9IGlucHV0LmNoYXJBdChwKTtcbiAgICAgICAgICBpZiAoY2ggPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgIGlmICghZGV0YWlscy5zZWVuQ1IpIHsgZGV0YWlscy5saW5lKys7IH1cbiAgICAgICAgICAgIGRldGFpbHMuY29sdW1uID0gMTtcbiAgICAgICAgICAgIGRldGFpbHMuc2VlbkNSID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gXCJcXHJcIiB8fCBjaCA9PT0gXCJcXHUyMDI4XCIgfHwgY2ggPT09IFwiXFx1MjAyOVwiKSB7XG4gICAgICAgICAgICBkZXRhaWxzLmxpbmUrKztcbiAgICAgICAgICAgIGRldGFpbHMuY29sdW1uID0gMTtcbiAgICAgICAgICAgIGRldGFpbHMuc2VlbkNSID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGV0YWlscy5jb2x1bW4rKztcbiAgICAgICAgICAgIGRldGFpbHMuc2VlbkNSID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwZWckY2FjaGVkUG9zICE9PSBwb3MpIHtcbiAgICAgICAgaWYgKHBlZyRjYWNoZWRQb3MgPiBwb3MpIHtcbiAgICAgICAgICBwZWckY2FjaGVkUG9zID0gMDtcbiAgICAgICAgICBwZWckY2FjaGVkUG9zRGV0YWlscyA9IHsgbGluZTogMSwgY29sdW1uOiAxLCBzZWVuQ1I6IGZhbHNlIH07XG4gICAgICAgIH1cbiAgICAgICAgYWR2YW5jZShwZWckY2FjaGVkUG9zRGV0YWlscywgcGVnJGNhY2hlZFBvcywgcG9zKTtcbiAgICAgICAgcGVnJGNhY2hlZFBvcyA9IHBvcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBlZyRjYWNoZWRQb3NEZXRhaWxzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRmYWlsKGV4cGVjdGVkKSB7XG4gICAgICBpZiAocGVnJGN1cnJQb3MgPCBwZWckbWF4RmFpbFBvcykgeyByZXR1cm47IH1cblxuICAgICAgaWYgKHBlZyRjdXJyUG9zID4gcGVnJG1heEZhaWxQb3MpIHtcbiAgICAgICAgcGVnJG1heEZhaWxQb3MgPSBwZWckY3VyclBvcztcbiAgICAgICAgcGVnJG1heEZhaWxFeHBlY3RlZCA9IFtdO1xuICAgICAgfVxuXG4gICAgICBwZWckbWF4RmFpbEV4cGVjdGVkLnB1c2goZXhwZWN0ZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRidWlsZEV4Y2VwdGlvbihtZXNzYWdlLCBleHBlY3RlZCwgcG9zKSB7XG4gICAgICBmdW5jdGlvbiBjbGVhbnVwRXhwZWN0ZWQoZXhwZWN0ZWQpIHtcbiAgICAgICAgdmFyIGkgPSAxO1xuXG4gICAgICAgIGV4cGVjdGVkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIGlmIChhLmRlc2NyaXB0aW9uIDwgYi5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYS5kZXNjcmlwdGlvbiA+IGIuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdoaWxlIChpIDwgZXhwZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKGV4cGVjdGVkW2kgLSAxXSA9PT0gZXhwZWN0ZWRbaV0pIHtcbiAgICAgICAgICAgIGV4cGVjdGVkLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZE1lc3NhZ2UoZXhwZWN0ZWQsIGZvdW5kKSB7XG4gICAgICAgIGZ1bmN0aW9uIHN0cmluZ0VzY2FwZShzKSB7XG4gICAgICAgICAgZnVuY3Rpb24gaGV4KGNoKSB7IHJldHVybiBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9XG5cbiAgICAgICAgICByZXR1cm4gc1xuICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFwvZywgICAnXFxcXFxcXFwnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csICAgICdcXFxcXCInKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xceDA4L2csICdcXFxcYicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFx0L2csICAgJ1xcXFx0JylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgICAnXFxcXG4nKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcZi9nLCAgICdcXFxcZicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxyL2csICAgJ1xcXFxyJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx4MDAtXFx4MDdcXHgwQlxceDBFXFx4MEZdL2csIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHgwJyArIGhleChjaCk7IH0pXG4gICAgICAgICAgICAucmVwbGFjZSgvW1xceDEwLVxceDFGXFx4ODAtXFx4RkZdL2csICAgIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHgnICArIGhleChjaCk7IH0pXG4gICAgICAgICAgICAucmVwbGFjZSgvW1xcdTAxODAtXFx1MEZGRl0vZywgICAgICAgICBmdW5jdGlvbihjaCkgeyByZXR1cm4gJ1xcXFx1MCcgKyBoZXgoY2gpOyB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHUxMDgwLVxcdUZGRkZdL2csICAgICAgICAgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxcdScgICsgaGV4KGNoKTsgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXhwZWN0ZWREZXNjcyA9IG5ldyBBcnJheShleHBlY3RlZC5sZW5ndGgpLFxuICAgICAgICAgICAgZXhwZWN0ZWREZXNjLCBmb3VuZERlc2MsIGk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGV4cGVjdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZXhwZWN0ZWREZXNjc1tpXSA9IGV4cGVjdGVkW2ldLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0ZWREZXNjID0gZXhwZWN0ZWQubGVuZ3RoID4gMVxuICAgICAgICAgID8gZXhwZWN0ZWREZXNjcy5zbGljZSgwLCAtMSkuam9pbihcIiwgXCIpXG4gICAgICAgICAgICAgICsgXCIgb3IgXCJcbiAgICAgICAgICAgICAgKyBleHBlY3RlZERlc2NzW2V4cGVjdGVkLmxlbmd0aCAtIDFdXG4gICAgICAgICAgOiBleHBlY3RlZERlc2NzWzBdO1xuXG4gICAgICAgIGZvdW5kRGVzYyA9IGZvdW5kID8gXCJcXFwiXCIgKyBzdHJpbmdFc2NhcGUoZm91bmQpICsgXCJcXFwiXCIgOiBcImVuZCBvZiBpbnB1dFwiO1xuXG4gICAgICAgIHJldHVybiBcIkV4cGVjdGVkIFwiICsgZXhwZWN0ZWREZXNjICsgXCIgYnV0IFwiICsgZm91bmREZXNjICsgXCIgZm91bmQuXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3NEZXRhaWxzID0gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBvcyksXG4gICAgICAgICAgZm91bmQgICAgICA9IHBvcyA8IGlucHV0Lmxlbmd0aCA/IGlucHV0LmNoYXJBdChwb3MpIDogbnVsbDtcblxuICAgICAgaWYgKGV4cGVjdGVkICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFudXBFeHBlY3RlZChleHBlY3RlZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgU3ludGF4RXJyb3IoXG4gICAgICAgIG1lc3NhZ2UgIT09IG51bGwgPyBtZXNzYWdlIDogYnVpbGRNZXNzYWdlKGV4cGVjdGVkLCBmb3VuZCksXG4gICAgICAgIGV4cGVjdGVkLFxuICAgICAgICBmb3VuZCxcbiAgICAgICAgcG9zLFxuICAgICAgICBwb3NEZXRhaWxzLmxpbmUsXG4gICAgICAgIHBvc0RldGFpbHMuY29sdW1uXG4gICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWZyYWdtZW50KCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgOCkgPT09IHBlZyRjMSkge1xuICAgICAgICBzMSA9IHBlZyRjMTtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gODtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VyYW5nZSgpO1xuICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZXBhdGgoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMztcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzUoczIpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXJhbmdlKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VpbmRleFN0ZXAoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZWxvY2FsX3BhdGgoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgczMgPSBwZWckYzY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNyk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZWxvY2FsX3BhdGgoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckYzY7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzcpOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2Vsb2NhbF9wYXRoKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM4KHMxLCBzMiwgczQsIHM2KTtcbiAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VwYXRoKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZWluZGV4U3RlcCgpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlbG9jYWxfcGF0aCgpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjOShzMSwgczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2Vsb2NhbF9wYXRoKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IFtdO1xuICAgICAgczIgPSBwZWckcGFyc2VpbmRleFN0ZXAoKTtcbiAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZWluZGlyZWN0aW9uU3RlcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMxLnB1c2goczIpO1xuICAgICAgICAgIHMyID0gcGVnJHBhcnNlaW5kZXhTdGVwKCk7XG4gICAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWluZGlyZWN0aW9uU3RlcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V0ZXJtaW51cygpO1xuICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjMTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzEyKHMxLCBzMik7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWluZGV4U3RlcCgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDcpIHtcbiAgICAgICAgczEgPSBwZWckYzEzO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTQpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VpbnRlZ2VyKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5MSkge1xuICAgICAgICAgICAgczQgPSBwZWckYzE1O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE2KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlaWRBc3NlcnRpb24oKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkzKSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckYzE3O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOCk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNCA9IFtzNCwgczUsIHM2XTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBwZWckYzExO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzE5KHMyLCBzMyk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlaW5kaXJlY3Rpb25TdGVwKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjApIHtcbiAgICAgICAgczEgPSBwZWckYzIwO1xuICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjEpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VpbnRlZ2VyKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5MSkge1xuICAgICAgICAgICAgczQgPSBwZWckYzE1O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE2KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlaWRBc3NlcnRpb24oKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkzKSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckYzE3O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOCk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNCA9IFtzNCwgczUsIHM2XTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBwZWckYzExO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzIyKHMyLCBzMyk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNldGVybWludXMoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczY7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU4KSB7XG4gICAgICAgIHMxID0gcGVnJGMyMztcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI0KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlaW50ZWdlcigpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTEpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJGMxNTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNik7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRwYXJzZXRleHRMb2NhdGlvbkFzc2VydGlvbigpO1xuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTMpIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRjMTc7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE4KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM0ID0gW3M0LCBzNSwgczZdO1xuICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMjUoczIsIHMzKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VpZEFzc2VydGlvbigpIHtcbiAgICAgIHZhciBzMCwgczE7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZXZhbHVlKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMyNihzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNldGV4dExvY2F0aW9uQXNzZXJ0aW9uKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZWNzdigpO1xuICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMxID0gcGVnJGMxMTtcbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXBhcmFtZXRlcigpO1xuICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjMTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzI3KHMxLCBzMik7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXBhcmFtZXRlcigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU5KSB7XG4gICAgICAgIHMxID0gcGVnJGMyODtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI5KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNldmFsdWVOb1NwYWNlKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjEpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGMzMDtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXZhbHVlTm9TcGFjZSgpO1xuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMzIoczIsIHM0KTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlY3N2KCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2V2YWx1ZSgpO1xuICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMxID0gcGVnJGMxMTtcbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgczIgPSBwZWckYzY7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2V2YWx1ZSgpO1xuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBwZWckYzExO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzMzKHMxLCBzMyk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNldmFsdWVOb1NwYWNlKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IFtdO1xuICAgICAgczIgPSBwZWckcGFyc2Vlc2NhcGVkU3BlY2lhbENoYXJzKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VjaGFyYWN0ZXIoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZWVzY2FwZWRTcGVjaWFsQ2hhcnMoKTtcbiAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlY2hhcmFjdGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzM0KHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2V2YWx1ZSgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBbXTtcbiAgICAgIHMyID0gcGVnJHBhcnNlZXNjYXBlZFNwZWNpYWxDaGFycygpO1xuICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlY2hhcmFjdGVyKCk7XG4gICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gcGVnJHBhcnNlc3BhY2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMxLnB1c2goczIpO1xuICAgICAgICAgIHMyID0gcGVnJHBhcnNlZXNjYXBlZFNwZWNpYWxDaGFycygpO1xuICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VjaGFyYWN0ZXIoKTtcbiAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXNwYWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzM0KHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2Vlc2NhcGVkU3BlY2lhbENoYXJzKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgIHMyID0gcGVnJHBhcnNlY2lyY3VtZmxleCgpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlY2lyY3VtZmxleCgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgIHMxID0gczI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICB9XG4gICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgICAgczIgPSBwZWckcGFyc2VjaXJjdW1mbGV4KCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlc3F1YXJlQnJhY2tldCgpO1xuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICAgIHMxID0gczI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMyID0gcGVnJHBhcnNlY2lyY3VtZmxleCgpO1xuICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2VwYXJlbnRoZXNlcygpO1xuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgICAgICAgIHMxID0gczI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWNpcmN1bWZsZXgoKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWNvbW1hKCk7XG4gICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgICAgICAgICAgczEgPSBzMjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWNpcmN1bWZsZXgoKTtcbiAgICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VzZW1pY29sb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWNpcmN1bWZsZXgoKTtcbiAgICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlZXF1YWwoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzM1KHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VudW1iZXIoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAocGVnJGMzNi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM3KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gW107XG4gICAgICAgIGlmIChwZWckYzM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICBzNCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM5KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMucHVzaChzNCk7XG4gICAgICAgICAgICBpZiAocGVnJGMzOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM5KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgIHMxID0gczI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Nikge1xuICAgICAgICAgIHMyID0gcGVnJGM0MDtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDEpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzNCA9IFtdO1xuICAgICAgICAgIGlmIChwZWckYzM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHM1ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNC5wdXNoKHM1KTtcbiAgICAgICAgICAgIGlmIChwZWckYzM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgczUgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzkpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKHBlZyRjMzYudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICBzNSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNyk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM0MihzMSwgczMpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWludGVnZXIoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0OCkge1xuICAgICAgICBzMSA9IHBlZyRjNDM7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0NCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAocGVnJGMzNi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNyk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IFtdO1xuICAgICAgICAgIGlmIChwZWckYzM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMy5wdXNoKHM0KTtcbiAgICAgICAgICAgIGlmIChwZWckYzM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgczQgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzkpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICAgIHMxID0gczI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjNDUoczEpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXNwYWNlKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzIpIHtcbiAgICAgICAgczEgPSBwZWckYzQ2O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDcpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM0OCgpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWNpcmN1bWZsZXgoKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5NCkge1xuICAgICAgICBzMSA9IHBlZyRjNDk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM1MCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzUxKCk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlZG91YmxlUXVvdGUoKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzNCkge1xuICAgICAgICBzMSA9IHBlZyRjNTI7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM1Myk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzU0KCk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlc3F1YXJlQnJhY2tldCgpIHtcbiAgICAgIHZhciBzMCwgczE7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkxKSB7XG4gICAgICAgIHMxID0gcGVnJGMxNTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE2KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTMpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjMTc7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE4KTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM1NShzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlcGFyZW50aGVzZXMoKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICBzMSA9IHBlZyRjNTY7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM1Nyk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgczEgPSBwZWckYzM7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzU4KHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2Vjb21tYSgpIHtcbiAgICAgIHZhciBzMCwgczE7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgIHMxID0gcGVnJGM2O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNyk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzU5KCk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlc2VtaWNvbG9uKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTkpIHtcbiAgICAgICAgczEgPSBwZWckYzI4O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjkpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM2MCgpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWVxdWFsKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjEpIHtcbiAgICAgICAgczEgPSBwZWckYzMwO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzEpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM2MSgpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWNoYXJhY3RlcigpIHtcbiAgICAgIHZhciBzMCwgczE7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAocGVnJGM2Mi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzYzKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChwZWckYzY0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY1KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChwZWckYzM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ1KSB7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGM2NjtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY3KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTUpIHtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNjg7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY5KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDYpIHtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM0MDtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MSk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzcwKHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBwZWckcmVzdWx0ID0gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uKCk7XG5cbiAgICBpZiAocGVnJHJlc3VsdCAhPT0gcGVnJEZBSUxFRCAmJiBwZWckY3VyclBvcyA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcGVnJHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBlZyRyZXN1bHQgIT09IHBlZyRGQUlMRUQgJiYgcGVnJGN1cnJQb3MgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgcGVnJGZhaWwoeyB0eXBlOiBcImVuZFwiLCBkZXNjcmlwdGlvbjogXCJlbmQgb2YgaW5wdXRcIiB9KTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgcGVnJGJ1aWxkRXhjZXB0aW9uKG51bGwsIHBlZyRtYXhGYWlsRXhwZWN0ZWQsIHBlZyRtYXhGYWlsUG9zKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFN5bnRheEVycm9yOiBTeW50YXhFcnJvcixcbiAgICBwYXJzZTogICAgICAgcGFyc2VcbiAgfTtcbn0pKCk7XG4iLCJ2YXIgQ0ZJQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiAoZXhwZWN0ZWRBc3NlcnRpb24sIHRhcmdldEVsZW1lbnRBc3NlcnRpb24sIG1lc3NhZ2UpIHtcblxuICAgIGZ1bmN0aW9uIENGSUFzc2VydGlvbkVycm9yICgpIHtcblxuICAgICAgICB0aGlzLmV4cGVjdGVkQXNzZXJ0aW9uID0gZXhwZWN0ZWRBc3NlcnRpb247XG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudEFzc2VydGlvbiA9IHRhcmdldEVsZW1lbnRBc3NlcnRpb247XG4gICAgfVxuXG4gICAgQ0ZJQXNzZXJ0aW9uRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIENGSUFzc2VydGlvbkVycm9yLmNvbnN0cnVjdG9yID0gQ0ZJQXNzZXJ0aW9uRXJyb3IoKTtcblxuICAgIHJldHVybiBuZXcgQ0ZJQXNzZXJ0aW9uRXJyb3IoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ0ZJQXNzZXJ0aW9uRXJyb3JcbiIsIi8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogVGhpcyB0eXBlIG9mIGVycm9yIG1heSBub3QgYmUgcmVxdWlyZWQgaW4gdGhlIGxvbmcgcnVuLiBUaGUgcGFyc2VyIHNob3VsZCBjYXRjaCBhbnkgc3ludGF4IGVycm9ycywgXG4vLyAgIHByb3ZpZGVkIGl0IGlzIGVycm9yLWZyZWUsIGFuZCBhcyBzdWNoLCB0aGUgQVNUIHNob3VsZCBuZXZlciByZWFsbHkgaGF2ZSBhbnkgbm9kZSB0eXBlIGVycm9ycywgd2hpY2ggYXJlIGVzc2VudGlhbGx5IGVycm9yc1xuLy8gICBpbiB0aGUgc3RydWN0dXJlIG9mIHRoZSBBU1QuIFRoaXMgZXJyb3Igc2hvdWxkIHByb2JhYmx5IGJlIHJlZmFjdG9yZWQgb3V0IHdoZW4gdGhlIGdyYW1tYXIgYW5kIGludGVycHJldGVyIGFyZSBtb3JlIHN0YWJsZS5cbnZhciBOb2RlVHlwZUVycm9yID0gZnVuY3Rpb24gKG5vZGUsIG1lc3NhZ2UpIHtcblxuICAgIGZ1bmN0aW9uIE5vZGVUeXBlRXJyb3IgKCkge1xuXG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgfVxuXG4gICAgTm9kZVR5cGVFcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgTm9kZVR5cGVFcnJvci5jb25zdHJ1Y3RvciA9IE5vZGVUeXBlRXJyb3I7XG5cbiAgICByZXR1cm4gbmV3IE5vZGVUeXBlRXJyb3IoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTm9kZVR5cGVFcnJvclxuIiwiLy8gUkVGQUNUT1JJTkcgQ0FORElEQVRFOiBNaWdodCBtYWtlIHNlbnNlIHRvIGluY2x1ZGUgc29tZSBtb3JlIHNwZWNpZmljcyBhYm91dCB0aGUgb3V0LW9mLXJhbmdleW5lc3MuXG52YXIgT3V0T2ZSYW5nZUVycm9yID0gZnVuY3Rpb24gKHRhcmdldEluZGV4LCBtYXhJbmRleCwgbWVzc2FnZSkge1xuXG4gICAgZnVuY3Rpb24gT3V0T2ZSYW5nZUVycm9yICgpIHtcblxuICAgICAgICB0aGlzLnRhcmdldEluZGV4ID0gdGFyZ2V0SW5kZXg7XG4gICAgICAgIHRoaXMubWF4SW5kZXggPSBtYXhJbmRleDtcbiAgICB9XG5cbiAgICBPdXRPZlJhbmdlRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIE91dE9mUmFuZ2VFcnJvci5jb25zdHJ1Y3RvciA9IE91dE9mUmFuZ2VFcnJvcigpXG5cbiAgICByZXR1cm4gbmV3IE91dE9mUmFuZ2VFcnJvcigpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPdXRPZlJhbmdlRXJyb3JcbiIsIi8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogVGhpcyBpcyBhIGJpdCB0b28gZ2VuZXJhbCB0byBiZSB1c2VmdWwuIFdoZW4gSSBoYXZlIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2YgdGhlIHR5cGUgb2YgZXJyb3JzXG4vLyAgIHRoYXQgY2FuIG9jY3VyIHdpdGggdGhlIHZhcmlvdXMgdGVybWludXMgY29uZGl0aW9ucywgaXQnbGwgbWFrZSBtb3JlIHNlbnNlIHRvIHJldmlzaXQgdGhpcy4gXG52YXIgVGVybWludXNFcnJvciA9IGZ1bmN0aW9uICh0ZXJtaW51c1R5cGUsIHRlcm1pbnVzQ29uZGl0aW9uLCBtZXNzYWdlKSB7XG5cbiAgICBmdW5jdGlvbiBUZXJtaW51c0Vycm9yICgpIHtcblxuICAgICAgICB0aGlzLnRlcm1pbnVzVHlwZSA9IHRlcm1pbnVzVHlwZTtcbiAgICAgICAgdGhpcy50ZXJtaW51c0NvbmRpdGlvbiA9IHRlcm1pbnVzQ29uZGl0aW9uO1xuICAgIH1cblxuICAgIFRlcm1pbnVzRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIFRlcm1pbnVzRXJyb3IuY29uc3RydWN0b3IgPSBUZXJtaW51c0Vycm9yKCk7XG5cbiAgICByZXR1cm4gbmV3IFRlcm1pbnVzRXJyb3IoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGVybWludXNFcnJvclxuIiwidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIEluc3RydWN0aW9ucyA9IHJlcXVpcmUoJy4vaW5zdHJ1Y3Rpb25zJylcbnZhciBOb2RlVHlwZUVycm9yID0gcmVxdWlyZSgnLi9lcnJvcnMvbm9kZS10eXBlJylcbnZhciBPdXRPZlJhbmdlRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9ycy9vdXQtb2YtcmFuZ2UnKVxuXG52YXIgR2VuZXJhdG9yID0ge1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4gICAgLy8gIFwiUFVCTElDXCIgTUVUSE9EUyAoVEhFIEFQSSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAgIGdlbmVyYXRlQ2hhck9mZnNldFJhbmdlQ29tcG9uZW50IDogZnVuY3Rpb24gKHJhbmdlU3RhcnRFbGVtZW50LCBzdGFydE9mZnNldCwgcmFuZ2VFbmRFbGVtZW50LCBlbmRPZmZzZXQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciBkb2NSYW5nZTtcbiAgICAgICAgdmFyIGNvbW1vbkFuY2VzdG9yO1xuICAgICAgICB2YXIgcmFuZ2UxT2Zmc2V0U3RlcDtcbiAgICAgICAgdmFyIHJhbmdlMUNGSTtcbiAgICAgICAgdmFyIHJhbmdlMk9mZnNldFN0ZXA7XG4gICAgICAgIHZhciByYW5nZTJDRkk7XG4gICAgICAgIHZhciBjb21tb25DRklDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy52YWxpZGF0ZVN0YXJ0VGV4dE5vZGUocmFuZ2VTdGFydEVsZW1lbnQpO1xuICAgICAgICB0aGlzLnZhbGlkYXRlU3RhcnRUZXh0Tm9kZShyYW5nZUVuZEVsZW1lbnQpO1xuXG4gICAgICAgIC8vIFBhcmVudCBlbGVtZW50IGlzIHRoZSBzYW1lXG4gICAgICAgIGlmICgkKHJhbmdlU3RhcnRFbGVtZW50KS5wYXJlbnQoKVswXSA9PT0gJChyYW5nZUVuZEVsZW1lbnQpLnBhcmVudCgpWzBdKSB7XG4gICAgICAgICAgICByYW5nZTFPZmZzZXRTdGVwID0gdGhpcy5jcmVhdGVDRklUZXh0Tm9kZVN0ZXAoJChyYW5nZVN0YXJ0RWxlbWVudCksIHN0YXJ0T2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgICAgICAgcmFuZ2UyT2Zmc2V0U3RlcCA9IHRoaXMuY3JlYXRlQ0ZJVGV4dE5vZGVTdGVwKCQocmFuZ2VFbmRFbGVtZW50KSwgZW5kT2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpOyAgICAgICAgICBcbiAgICAgICAgICAgIGNvbW1vbkNGSUNvbXBvbmVudCA9IHRoaXMuY3JlYXRlQ0ZJRWxlbWVudFN0ZXBzKCQocmFuZ2VTdGFydEVsZW1lbnQpLnBhcmVudCgpLCBcImh0bWxcIiwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICAgICAgICAgIHJldHVybiBjb21tb25DRklDb21wb25lbnQuc3Vic3RyaW5nKDEsIGNvbW1vbkNGSUNvbXBvbmVudC5sZW5ndGgpICsgXCIsXCIgKyByYW5nZTFPZmZzZXRTdGVwICsgXCIsXCIgKyByYW5nZTJPZmZzZXRTdGVwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBkb2N1bWVudCByYW5nZSB0byBmaW5kIHRoZSBjb21tb24gYW5jZXN0b3JcbiAgICAgICAgICAgIGRvY1JhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgIGRvY1JhbmdlLnNldFN0YXJ0KHJhbmdlU3RhcnRFbGVtZW50LCBzdGFydE9mZnNldCk7XG4gICAgICAgICAgICBkb2NSYW5nZS5zZXRFbmQocmFuZ2VFbmRFbGVtZW50LCBlbmRPZmZzZXQpO1xuICAgICAgICAgICAgY29tbW9uQW5jZXN0b3IgPSBkb2NSYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgdGVybWluYXRpbmcgb2Zmc2V0IGFuZCByYW5nZSAxXG4gICAgICAgICAgICByYW5nZTFPZmZzZXRTdGVwID0gdGhpcy5jcmVhdGVDRklUZXh0Tm9kZVN0ZXAoJChyYW5nZVN0YXJ0RWxlbWVudCksIHN0YXJ0T2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgICAgICAgcmFuZ2UxQ0ZJID0gdGhpcy5jcmVhdGVDRklFbGVtZW50U3RlcHMoJChyYW5nZVN0YXJ0RWxlbWVudCkucGFyZW50KCksIGNvbW1vbkFuY2VzdG9yLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpICsgcmFuZ2UxT2Zmc2V0U3RlcDtcblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgdGVybWluYXRpbmcgb2Zmc2V0IGFuZCByYW5nZSAyXG4gICAgICAgICAgICByYW5nZTJPZmZzZXRTdGVwID0gdGhpcy5jcmVhdGVDRklUZXh0Tm9kZVN0ZXAoJChyYW5nZUVuZEVsZW1lbnQpLCBlbmRPZmZzZXQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgICAgICAgICByYW5nZTJDRkkgPSB0aGlzLmNyZWF0ZUNGSUVsZW1lbnRTdGVwcygkKHJhbmdlRW5kRWxlbWVudCkucGFyZW50KCksIGNvbW1vbkFuY2VzdG9yLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpICsgcmFuZ2UyT2Zmc2V0U3RlcDtcblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgc2hhcmVkIGNvbXBvbmVudFxuICAgICAgICAgICAgY29tbW9uQ0ZJQ29tcG9uZW50ID0gdGhpcy5jcmVhdGVDRklFbGVtZW50U3RlcHMoJChjb21tb25BbmNlc3RvciksIFwiaHRtbFwiLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIHJlc3VsdFxuICAgICAgICAgICAgcmV0dXJuIGNvbW1vbkNGSUNvbXBvbmVudC5zdWJzdHJpbmcoMSwgY29tbW9uQ0ZJQ29tcG9uZW50Lmxlbmd0aCkgKyBcIixcIiArIHJhbmdlMUNGSSArIFwiLFwiICsgcmFuZ2UyQ0ZJO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdlbmVyYXRlRWxlbWVudFJhbmdlQ29tcG9uZW50IDogZnVuY3Rpb24gKHJhbmdlU3RhcnRFbGVtZW50LCByYW5nZUVuZEVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciBkb2NSYW5nZTtcbiAgICAgICAgdmFyIGNvbW1vbkFuY2VzdG9yO1xuICAgICAgICB2YXIgcmFuZ2UxQ0ZJO1xuICAgICAgICB2YXIgcmFuZ2UyQ0ZJO1xuICAgICAgICB2YXIgY29tbW9uQ0ZJQ29tcG9uZW50O1xuXG4gICAgICAgIHRoaXMudmFsaWRhdGVTdGFydEVsZW1lbnQocmFuZ2VTdGFydEVsZW1lbnQpO1xuICAgICAgICB0aGlzLnZhbGlkYXRlU3RhcnRFbGVtZW50KHJhbmdlRW5kRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHJhbmdlU3RhcnRFbGVtZW50ID09PSByYW5nZUVuZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0YXJ0IGFuZCBlbmQgZWxlbWVudCBjYW5ub3QgYmUgdGhlIHNhbWUgZm9yIGEgQ0ZJIHJhbmdlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgZG9jdW1lbnQgcmFuZ2UgdG8gZmluZCB0aGUgY29tbW9uIGFuY2VzdG9yXG4gICAgICAgIGRvY1JhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgZG9jUmFuZ2Uuc2V0U3RhcnQocmFuZ2VTdGFydEVsZW1lbnQsIDApO1xuICAgICAgICBkb2NSYW5nZS5zZXRFbmQocmFuZ2VFbmRFbGVtZW50LCByYW5nZUVuZEVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAgICBjb21tb25BbmNlc3RvciA9IGRvY1JhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIHJhbmdlIDFcbiAgICAgICAgcmFuZ2UxQ0ZJID0gdGhpcy5jcmVhdGVDRklFbGVtZW50U3RlcHMoJChyYW5nZVN0YXJ0RWxlbWVudCksIGNvbW1vbkFuY2VzdG9yLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIHJhbmdlIDJcbiAgICAgICAgcmFuZ2UyQ0ZJID0gdGhpcy5jcmVhdGVDRklFbGVtZW50U3RlcHMoJChyYW5nZUVuZEVsZW1lbnQpLCBjb21tb25BbmNlc3RvciwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBHZW5lcmF0ZSBzaGFyZWQgY29tcG9uZW50XG4gICAgICAgIGNvbW1vbkNGSUNvbXBvbmVudCA9IHRoaXMuY3JlYXRlQ0ZJRWxlbWVudFN0ZXBzKCQoY29tbW9uQW5jZXN0b3IpLCBcImh0bWxcIiwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBSZXR1cm4gdGhlIHJlc3VsdFxuICAgICAgICByZXR1cm4gY29tbW9uQ0ZJQ29tcG9uZW50LnN1YnN0cmluZygxLCBjb21tb25DRklDb21wb25lbnQubGVuZ3RoKSArIFwiLFwiICsgcmFuZ2UxQ0ZJICsgXCIsXCIgKyByYW5nZTJDRkk7XG4gICAgfSxcblxuICAgIC8vIERlc2NyaXB0aW9uOiBHZW5lcmF0ZXMgYSBjaGFyYWN0ZXIgb2Zmc2V0IENGSSBcbiAgICAvLyBBcmd1bWVudHM6IFRoZSB0ZXh0IG5vZGUgdGhhdCBjb250YWlucyB0aGUgb2Zmc2V0IHJlZmVyZW5jZWQgYnkgdGhlIGNmaSwgdGhlIG9mZnNldCB2YWx1ZSwgdGhlIG5hbWUgb2YgdGhlIFxuICAgIC8vICAgY29udGVudCBkb2N1bWVudCB0aGF0IGNvbnRhaW5zIHRoZSB0ZXh0IG5vZGUsIHRoZSBwYWNrYWdlIGRvY3VtZW50IGZvciB0aGlzIEVQVUIuXG4gICAgZ2VuZXJhdGVDaGFyYWN0ZXJPZmZzZXRDRklDb21wb25lbnQgOiBmdW5jdGlvbiAoc3RhcnRUZXh0Tm9kZSwgY2hhcmFjdGVyT2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgdGV4dE5vZGVTdGVwO1xuICAgICAgICB2YXIgY29udGVudERvY0NGSTtcbiAgICAgICAgdmFyICRpdGVtUmVmU3RhcnROb2RlO1xuICAgICAgICB2YXIgcGFja2FnZURvY0NGSTtcblxuICAgICAgICB0aGlzLnZhbGlkYXRlU3RhcnRUZXh0Tm9kZShzdGFydFRleHROb2RlLCBjaGFyYWN0ZXJPZmZzZXQpO1xuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgdGV4dCBub2RlIHN0ZXBcbiAgICAgICAgdGV4dE5vZGVTdGVwID0gdGhpcy5jcmVhdGVDRklUZXh0Tm9kZVN0ZXAoJChzdGFydFRleHROb2RlKSwgY2hhcmFjdGVyT2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIENhbGwgdGhlIHJlY3Vyc2l2ZSBtZXRob2QgdG8gY3JlYXRlIGFsbCB0aGUgc3RlcHMgdXAgdG8gdGhlIGhlYWQgZWxlbWVudCBvZiB0aGUgY29udGVudCBkb2N1bWVudCAodGhlIFwiaHRtbFwiIGVsZW1lbnQpXG4gICAgICAgIGNvbnRlbnREb2NDRkkgPSB0aGlzLmNyZWF0ZUNGSUVsZW1lbnRTdGVwcygkKHN0YXJ0VGV4dE5vZGUpLnBhcmVudCgpLCBcImh0bWxcIiwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSArIHRleHROb2RlU3RlcDtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnREb2NDRkkuc3Vic3RyaW5nKDEsIGNvbnRlbnREb2NDRkkubGVuZ3RoKTtcbiAgICB9LFxuXG4gICAgZ2VuZXJhdGVFbGVtZW50Q0ZJQ29tcG9uZW50IDogZnVuY3Rpb24gKHN0YXJ0RWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgdmFyIGNvbnRlbnREb2NDRkk7XG4gICAgICAgIHZhciAkaXRlbVJlZlN0YXJ0Tm9kZTtcbiAgICAgICAgdmFyIHBhY2thZ2VEb2NDRkk7XG5cbiAgICAgICAgdGhpcy52YWxpZGF0ZVN0YXJ0RWxlbWVudChzdGFydEVsZW1lbnQpO1xuXG4gICAgICAgIC8vIENhbGwgdGhlIHJlY3Vyc2l2ZSBtZXRob2QgdG8gY3JlYXRlIGFsbCB0aGUgc3RlcHMgdXAgdG8gdGhlIGhlYWQgZWxlbWVudCBvZiB0aGUgY29udGVudCBkb2N1bWVudCAodGhlIFwiaHRtbFwiIGVsZW1lbnQpXG4gICAgICAgIGNvbnRlbnREb2NDRkkgPSB0aGlzLmNyZWF0ZUNGSUVsZW1lbnRTdGVwcygkKHN0YXJ0RWxlbWVudCksIFwiaHRtbFwiLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgISBcbiAgICAgICAgcmV0dXJuIGNvbnRlbnREb2NDRkkuc3Vic3RyaW5nKDEsIGNvbnRlbnREb2NDRkkubGVuZ3RoKTtcbiAgICB9LFxuXG4gICAgZ2VuZXJhdGVQYWNrYWdlRG9jdW1lbnRDRklDb21wb25lbnQgOiBmdW5jdGlvbiAoY29udGVudERvY3VtZW50TmFtZSwgcGFja2FnZURvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB0aGlzLnZhbGlkYXRlQ29udGVudERvY3VtZW50TmFtZShjb250ZW50RG9jdW1lbnROYW1lKTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVBhY2thZ2VEb2N1bWVudChwYWNrYWdlRG9jdW1lbnQsIGNvbnRlbnREb2N1bWVudE5hbWUpO1xuXG4gICAgICAgIC8vIEdldCB0aGUgc3RhcnQgbm9kZSAoaXRlbXJlZiBlbGVtZW50KSB0aGF0IHJlZmVyZW5jZXMgdGhlIGNvbnRlbnQgZG9jdW1lbnRcbiAgICAgICAgJGl0ZW1SZWZTdGFydE5vZGUgPSAkKFwiaXRlbXJlZltpZHJlZj0nXCIgKyBjb250ZW50RG9jdW1lbnROYW1lICsgXCInXVwiLCAkKHBhY2thZ2VEb2N1bWVudCkpO1xuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgc3RlcHMgdXAgdG8gdGhlIHRvcCBlbGVtZW50IG9mIHRoZSBwYWNrYWdlIGRvY3VtZW50ICh0aGUgXCJwYWNrYWdlXCIgZWxlbWVudClcbiAgICAgICAgcGFja2FnZURvY0NGSUNvbXBvbmVudCA9IHRoaXMuY3JlYXRlQ0ZJRWxlbWVudFN0ZXBzKCRpdGVtUmVmU3RhcnROb2RlLCBcInBhY2thZ2VcIiwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBBcHBlbmQgYW4gITsgdGhpcyBhc3N1bWVzIHRoYXQgYSBDRkkgY29udGVudCBkb2N1bWVudCBDRkkgY29tcG9uZW50IHdpbGwgYmUgYXBwZW5kZWQgYXQgc29tZSBwb2ludFxuICAgICAgICByZXR1cm4gcGFja2FnZURvY0NGSUNvbXBvbmVudCArIFwiIVwiO1xuICAgIH0sXG5cbiAgICBnZW5lcmF0ZVBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudFdpdGhTcGluZUluZGV4IDogZnVuY3Rpb24gKHNwaW5lSW5kZXgsIHBhY2thZ2VEb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBzdGFydCBub2RlIChpdGVtcmVmIGVsZW1lbnQpIHRoYXQgcmVmZXJlbmNlcyB0aGUgY29udGVudCBkb2N1bWVudFxuICAgICAgICAkaXRlbVJlZlN0YXJ0Tm9kZSA9ICQoJChcInNwaW5lXCIsIHBhY2thZ2VEb2N1bWVudCkuY2hpbGRyZW4oKVtzcGluZUluZGV4XSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBzdGVwcyB1cCB0byB0aGUgdG9wIGVsZW1lbnQgb2YgdGhlIHBhY2thZ2UgZG9jdW1lbnQgKHRoZSBcInBhY2thZ2VcIiBlbGVtZW50KVxuICAgICAgICBwYWNrYWdlRG9jQ0ZJQ29tcG9uZW50ID0gdGhpcy5jcmVhdGVDRklFbGVtZW50U3RlcHMoJGl0ZW1SZWZTdGFydE5vZGUsIFwicGFja2FnZVwiLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIEFwcGVuZCBhbiAhOyB0aGlzIGFzc3VtZXMgdGhhdCBhIENGSSBjb250ZW50IGRvY3VtZW50IENGSSBjb21wb25lbnQgd2lsbCBiZSBhcHBlbmRlZCBhdCBzb21lIHBvaW50XG4gICAgICAgIHJldHVybiBwYWNrYWdlRG9jQ0ZJQ29tcG9uZW50ICsgXCIhXCI7XG4gICAgfSxcblxuICAgIGdlbmVyYXRlQ29tcGxldGVDRkkgOiBmdW5jdGlvbiAocGFja2FnZURvY3VtZW50Q0ZJQ29tcG9uZW50LCBjb250ZW50RG9jdW1lbnRDRklDb21wb25lbnQpIHtcblxuICAgICAgICByZXR1cm4gXCJlcHViY2ZpKFwiICsgcGFja2FnZURvY3VtZW50Q0ZJQ29tcG9uZW50ICsgY29udGVudERvY3VtZW50Q0ZJQ29tcG9uZW50ICsgXCIpXCI7ICBcbiAgICB9LFxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4gICAgLy8gIFwiUFJJVkFURVwiIEhFTFBFUlMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAgIHZhbGlkYXRlU3RhcnRUZXh0Tm9kZSA6IGZ1bmN0aW9uIChzdGFydFRleHROb2RlLCBjaGFyYWN0ZXJPZmZzZXQpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIHRleHQgbm9kZSB0byBzdGFydCBmcm9tIElTIGEgdGV4dCBub2RlXG4gICAgICAgIGlmICghc3RhcnRUZXh0Tm9kZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vZGVUeXBlRXJyb3Ioc3RhcnRUZXh0Tm9kZSwgXCJDYW5ub3QgZ2VuZXJhdGUgYSBjaGFyYWN0ZXIgb2Zmc2V0IGZyb20gYSBzdGFydGluZyBwb2ludCB0aGF0IGlzIG5vdCBhIHRleHQgbm9kZVwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGFydFRleHROb2RlLm5vZGVUeXBlICE9IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb2RlVHlwZUVycm9yKHN0YXJ0VGV4dE5vZGUsIFwiQ2Fubm90IGdlbmVyYXRlIGEgY2hhcmFjdGVyIG9mZnNldCBmcm9tIGEgc3RhcnRpbmcgcG9pbnQgdGhhdCBpcyBub3QgYSB0ZXh0IG5vZGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBjaGFyYWN0ZXIgb2Zmc2V0IGlzIHdpdGhpbiBhIHZhbGlkIHJhbmdlIGZvciB0aGUgdGV4dCBub2RlIHN1cHBsaWVkXG4gICAgICAgIGlmIChjaGFyYWN0ZXJPZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3V0T2ZSYW5nZUVycm9yKGNoYXJhY3Rlck9mZnNldCwgMCwgXCJDaGFyYWN0ZXIgb2Zmc2V0IGNhbm5vdCBiZSBsZXNzIHRoYW4gMFwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGFyYWN0ZXJPZmZzZXQgPiBzdGFydFRleHROb2RlLm5vZGVWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPdXRPZlJhbmdlRXJyb3IoY2hhcmFjdGVyT2Zmc2V0LCBzdGFydFRleHROb2RlLm5vZGVWYWx1ZS5sZW5ndGggLSAxLCBcImNoYXJhY3RlciBvZmZzZXQgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiB0aGUgbGVuZ3RoIG9mIHRoZSB0ZXh0IG5vZGVcIik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdmFsaWRhdGVTdGFydEVsZW1lbnQgOiBmdW5jdGlvbiAoc3RhcnRFbGVtZW50KSB7XG5cbiAgICAgICAgaWYgKCFzdGFydEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb2RlVHlwZUVycm9yKHN0YXJ0RWxlbWVudCwgXCJDRkkgdGFyZ2V0IGVsZW1lbnQgaXMgdW5kZWZpbmVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEoc3RhcnRFbGVtZW50Lm5vZGVUeXBlICYmIHN0YXJ0RWxlbWVudC5ub2RlVHlwZSA9PT0gMSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb2RlVHlwZUVycm9yKHN0YXJ0RWxlbWVudCwgXCJDRkkgdGFyZ2V0IGVsZW1lbnQgaXMgbm90IGFuIEhUTUwgZWxlbWVudFwiKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZUNvbnRlbnREb2N1bWVudE5hbWUgOiBmdW5jdGlvbiAoY29udGVudERvY3VtZW50TmFtZSkge1xuXG4gICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIGlkcmVmIGZvciB0aGUgY29udGVudCBkb2N1bWVudCBoYXMgYmVlbiBwcm92aWRlZFxuICAgICAgICBpZiAoIWNvbnRlbnREb2N1bWVudE5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBpZHJlZiBmb3IgdGhlIGNvbnRlbnQgZG9jdW1lbnQsIGFzIGZvdW5kIGluIHRoZSBzcGluZSwgbXVzdCBiZSBzdXBwbGllZFwiKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZVBhY2thZ2VEb2N1bWVudCA6IGZ1bmN0aW9uIChwYWNrYWdlRG9jdW1lbnQsIGNvbnRlbnREb2N1bWVudE5hbWUpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIHBhY2thZ2UgZG9jdW1lbnQgaXMgbm9uLWVtcHR5IGFuZCBjb250YWlucyBhbiBpdGVtcmVmIGVsZW1lbnQgZm9yIHRoZSBzdXBwbGllZCBpZHJlZlxuICAgICAgICBpZiAoIXBhY2thZ2VEb2N1bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSBwYWNrYWdlIGRvY3VtZW50IG11c3QgYmUgc3VwcGxpZWQgdG8gZ2VuZXJhdGUgYSBDRklcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJCgkKFwiaXRlbXJlZltpZHJlZj0nXCIgKyBjb250ZW50RG9jdW1lbnROYW1lICsgXCInXVwiLCBwYWNrYWdlRG9jdW1lbnQpWzBdKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBpZHJlZiBvZiB0aGUgY29udGVudCBkb2N1bWVudCBjb3VsZCBub3QgYmUgZm91bmQgaW4gdGhlIHNwaW5lXCIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIERlc2NyaXB0aW9uOiBDcmVhdGVzIGEgQ0ZJIHRlcm1pbmF0aW5nIHN0ZXAgdG8gYSB0ZXh0IG5vZGUsIHdpdGggYSBjaGFyYWN0ZXIgb2Zmc2V0XG4gICAgLy8gUkVGQUNUT1JJTkcgQ0FORElEQVRFOiBTb21lIG9mIHRoZSBwYXJ0cyBvZiB0aGlzIG1ldGhvZCBjb3VsZCBiZSByZWZhY3RvcmVkIGludG8gdGhlaXIgb3duIG1ldGhvZHNcbiAgICBjcmVhdGVDRklUZXh0Tm9kZVN0ZXAgOiBmdW5jdGlvbiAoJHN0YXJ0VGV4dE5vZGUsIGNoYXJhY3Rlck9mZnNldCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgdmFyICRwYXJlbnROb2RlO1xuICAgICAgICB2YXIgJGNvbnRlbnRzRXhjbHVkaW5nTWFya2VycztcbiAgICAgICAgdmFyIENGSUluZGV4O1xuICAgICAgICB2YXIgaW5kZXhPZlRleHROb2RlO1xuICAgICAgICB2YXIgcHJlQXNzZXJ0aW9uO1xuICAgICAgICB2YXIgcHJlQXNzZXJ0aW9uU3RhcnRJbmRleDtcbiAgICAgICAgdmFyIHRleHRMZW5ndGg7XG4gICAgICAgIHZhciBwb3N0QXNzZXJ0aW9uO1xuICAgICAgICB2YXIgcG9zdEFzc2VydGlvbkVuZEluZGV4O1xuXG4gICAgICAgIC8vIEZpbmQgdGV4dCBub2RlIHBvc2l0aW9uIGluIHRoZSBzZXQgb2YgY2hpbGQgZWxlbWVudHMsIGlnbm9yaW5nIGFueSBibGFja2xpc3RlZCBlbGVtZW50cyBcbiAgICAgICAgJHBhcmVudE5vZGUgPSAkc3RhcnRUZXh0Tm9kZS5wYXJlbnQoKTtcbiAgICAgICAgJGNvbnRlbnRzRXhjbHVkaW5nTWFya2VycyA9IEluc3RydWN0aW9ucy5hcHBseUJsYWNrbGlzdCgkcGFyZW50Tm9kZS5jb250ZW50cygpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIEZpbmQgdGhlIHRleHQgbm9kZSBpbmRleCBpbiB0aGUgcGFyZW50IGxpc3QsIGluZmVycmluZyBub2RlcyB0aGF0IHdlcmUgb3JpZ2luYWxseSBhIHNpbmdsZSB0ZXh0IG5vZGVcbiAgICAgICAgdmFyIHByZXZOb2RlV2FzVGV4dE5vZGU7XG4gICAgICAgIHZhciBpbmRleE9mRmlyc3RJblNlcXVlbmNlO1xuICAgICAgICB2YXIgdGV4dE5vZGVPbmx5SW5kZXggPSAwO1xuICAgICAgICB2YXIgY2hhcmFjdGVyT2Zmc2V0U2luY2VVbnNwbGl0ID0gMDtcbiAgICAgICAgdmFyIGZpbmFsQ2hhcmFjdGVyT2Zmc2V0SW5TZXF1ZW5jZSA9IDA7XG4gICAgICAgICQuZWFjaCgkY29udGVudHNFeGNsdWRpbmdNYXJrZXJzLCBcbiAgICAgICAgICAgIGZ1bmN0aW9uIChpbmRleCkge1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRleHQgbm9kZSwgY2hlY2sgaWYgaXQgbWF0Y2hlcyBhbmQgcmV0dXJuIHRoZSBjdXJyZW50IGluZGV4XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09ICRzdGFydFRleHROb2RlWzBdKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBpbmRleCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFkamFjZW50IHNlcXVlbmNlIG9mIHRleHQgbm9kZXMsIG9yIGFzIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBub2RlIGlmIHRoaXMgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIG5vZGUgaXMgYSBzdGFuZGFyZCBvbmUgc2FuZHdpY2hlZCBiZXR3ZWVuIHR3byBlbGVtZW50IG5vZGVzLiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2Tm9kZVdhc1RleHROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhPZlRleHROb2RlID0gaW5kZXhPZkZpcnN0SW5TZXF1ZW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbENoYXJhY3Rlck9mZnNldEluU2VxdWVuY2UgPSBjaGFyYWN0ZXJPZmZzZXRTaW5jZVVuc3BsaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleE9mVGV4dE5vZGUgPSB0ZXh0Tm9kZU9ubHlJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnJlYWsgb3V0IG9mIC5lYWNoIGxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBTYXZlIHRoaXMgaW5kZXggYXMgdGhlIGZpcnN0IGluIHNlcXVlbmNlIG9mIGFkamFjZW50IHRleHQgbm9kZXMsIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHNldCBieSB0aGlzIHBvaW50XG4gICAgICAgICAgICAgICAgICAgIHByZXZOb2RlV2FzVGV4dE5vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJPZmZzZXRTaW5jZVVuc3BsaXQgPSBjaGFyYWN0ZXJPZmZzZXRTaW5jZVVuc3BsaXQgKyB0aGlzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXhPZkZpcnN0SW5TZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleE9mRmlyc3RJblNlcXVlbmNlID0gdGV4dE5vZGVPbmx5SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Tm9kZU9ubHlJbmRleCA9IHRleHROb2RlT25seUluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgbm90IGEgdGV4dCBub2RlXG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZOb2RlV2FzVGV4dE5vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZkZpcnN0SW5TZXF1ZW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyT2Zmc2V0U2luY2VVbnNwbGl0ICA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHRleHQgbm9kZSBpbmRleCB0byBhIENGSSBvZGQtaW50ZWdlciByZXByZXNlbnRhdGlvblxuICAgICAgICBDRklJbmRleCA9IChpbmRleE9mVGV4dE5vZGUgKiAyKSArIDE7XG5cbiAgICAgICAgLy8gVE9ETzogdGV4dCBhc3NlcnRpb25zIGFyZSBub3QgaW4gdGhlIGdyYW1tYXIgeWV0LCBJIHRoaW5rLCBvciB0aGV5J3JlIGp1c3QgY2F1c2luZyBwcm9ibGVtcy4gVGhpcyBoYXNcbiAgICAgICAgLy8gICBiZWVuIHRlbXBvcmFyaWx5IHJlbW92ZWQuIFxuXG4gICAgICAgIC8vIEFkZCBwcmUtIGFuZCBwb3N0LSB0ZXh0IGFzc2VydGlvbnNcbiAgICAgICAgLy8gcHJlQXNzZXJ0aW9uU3RhcnRJbmRleCA9IChjaGFyYWN0ZXJPZmZzZXQgLSAzID49IDApID8gY2hhcmFjdGVyT2Zmc2V0IC0gMyA6IDA7XG4gICAgICAgIC8vIHByZUFzc2VydGlvbiA9ICRzdGFydFRleHROb2RlWzBdLm5vZGVWYWx1ZS5zdWJzdHJpbmcocHJlQXNzZXJ0aW9uU3RhcnRJbmRleCwgY2hhcmFjdGVyT2Zmc2V0KTtcblxuICAgICAgICAvLyB0ZXh0TGVuZ3RoID0gJHN0YXJ0VGV4dE5vZGVbMF0ubm9kZVZhbHVlLmxlbmd0aDtcbiAgICAgICAgLy8gcG9zdEFzc2VydGlvbkVuZEluZGV4ID0gKGNoYXJhY3Rlck9mZnNldCArIDMgPD0gdGV4dExlbmd0aCkgPyBjaGFyYWN0ZXJPZmZzZXQgKyAzIDogdGV4dExlbmd0aDtcbiAgICAgICAgLy8gcG9zdEFzc2VydGlvbiA9ICRzdGFydFRleHROb2RlWzBdLm5vZGVWYWx1ZS5zdWJzdHJpbmcoY2hhcmFjdGVyT2Zmc2V0LCBwb3N0QXNzZXJ0aW9uRW5kSW5kZXgpO1xuXG4gICAgICAgIC8vIEdvdHRhIGluZmVyIHRoZSBjb3JyZWN0IGNoYXJhY3RlciBvZmZzZXQsIGFzIHdlbGxcblxuICAgICAgICAvLyBSZXR1cm4gdGhlIGNvbnN0cnVjdGVkIENGSSB0ZXh0IG5vZGUgc3RlcFxuICAgICAgICByZXR1cm4gXCIvXCIgKyBDRklJbmRleCArIFwiOlwiICsgKGZpbmFsQ2hhcmFjdGVyT2Zmc2V0SW5TZXF1ZW5jZSArIGNoYXJhY3Rlck9mZnNldCk7XG4gICAgICAgICAvLyArIFwiW1wiICsgcHJlQXNzZXJ0aW9uICsgXCIsXCIgKyBwb3N0QXNzZXJ0aW9uICsgXCJdXCI7XG4gICAgfSxcblxuICAgIGNyZWF0ZUNGSUVsZW1lbnRTdGVwcyA6IGZ1bmN0aW9uICgkY3Vyck5vZGUsIHRvcExldmVsRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgdmFyICRibGFja2xpc3RFeGNsdWRlZDtcbiAgICAgICAgdmFyICRwYXJlbnROb2RlO1xuICAgICAgICB2YXIgY3Vyck5vZGVQb3NpdGlvbjtcbiAgICAgICAgdmFyIENGSVBvc2l0aW9uO1xuICAgICAgICB2YXIgaWRBc3NlcnRpb247XG4gICAgICAgIHZhciBlbGVtZW50U3RlcDsgXG5cbiAgICAgICAgLy8gRmluZCBwb3NpdGlvbiBvZiBjdXJyZW50IG5vZGUgaW4gcGFyZW50IGxpc3RcbiAgICAgICAgJGJsYWNrbGlzdEV4Y2x1ZGVkID0gSW5zdHJ1Y3Rpb25zLmFwcGx5QmxhY2tsaXN0KCRjdXJyTm9kZS5wYXJlbnQoKS5jaGlsZHJlbigpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgICAkLmVhY2goJGJsYWNrbGlzdEV4Y2x1ZGVkLCBcbiAgICAgICAgICAgIGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzID09PSAkY3Vyck5vZGVbMF0pIHtcblxuICAgICAgICAgICAgICAgICAgICBjdXJyTm9kZVBvc2l0aW9uID0gaW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQnJlYWsgbG9vcFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDb252ZXJ0IHBvc2l0aW9uIHRvIHRoZSBDRkkgZXZlbi1pbnRlZ2VyIHJlcHJlc2VudGF0aW9uXG4gICAgICAgIENGSVBvc2l0aW9uID0gKGN1cnJOb2RlUG9zaXRpb24gKyAxKSAqIDI7XG5cbiAgICAgICAgLy8gQ3JlYXRlIENGSSBzdGVwIHdpdGggaWQgYXNzZXJ0aW9uLCBpZiB0aGUgZWxlbWVudCBoYXMgYW4gaWRcbiAgICAgICAgaWYgKCRjdXJyTm9kZS5hdHRyKFwiaWRcIikpIHtcbiAgICAgICAgICAgIGVsZW1lbnRTdGVwID0gXCIvXCIgKyBDRklQb3NpdGlvbiArIFwiW1wiICsgJGN1cnJOb2RlLmF0dHIoXCJpZFwiKSArIFwiXVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudFN0ZXAgPSBcIi9cIiArIENGSVBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYSBwYXJlbnQgaXMgYW4gaHRtbCBlbGVtZW50IHJldHVybiB0aGUgKGxhc3QpIHN0ZXAgZm9yIHRoaXMgY29udGVudCBkb2N1bWVudCwgb3RoZXJ3aXNlLCBjb250aW51ZS5cbiAgICAgICAgLy8gICBBbHNvIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGN1cnJlbnQgbm9kZSBpcyB0aGUgdG9wLWxldmVsIGVsZW1lbnQuIFRoaXMgY2FuIG9jY3VyIGlmIHRoZSBzdGFydCBub2RlIGlzIGFsc28gdGhlXG4gICAgICAgIC8vICAgdG9wIGxldmVsIGVsZW1lbnQuXG4gICAgICAgICRwYXJlbnROb2RlID0gJGN1cnJOb2RlLnBhcmVudCgpO1xuICAgICAgICBpZiAoJHBhcmVudE5vZGUuaXModG9wTGV2ZWxFbGVtZW50KSB8fCAkY3Vyck5vZGUuaXModG9wTGV2ZWxFbGVtZW50KSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJZiB0aGUgdG9wIGxldmVsIG5vZGUgaXMgYSB0eXBlIGZyb20gd2hpY2ggYW4gaW5kaXJlY3Rpb24gc3RlcCwgYWRkIGFuIGluZGlyZWN0aW9uIHN0ZXAgY2hhcmFjdGVyICghKVxuICAgICAgICAgICAgLy8gUkVGQUNUT1JJTkcgQ0FORElEQVRFOiBJdCBpcyBwb3NzaWJsZSB0aGF0IHRoaXMgc2hvdWxkIGJlIGNoYW5nZWQgdG86IGlmICh0b3BMZXZlbEVsZW1lbnQgPSAncGFja2FnZScpIGRvXG4gICAgICAgICAgICAvLyAgIG5vdCByZXR1cm4gYW4gaW5kaXJlY3Rpb24gY2hhcmFjdGVyLiBFdmVyeSBvdGhlciB0eXBlIG9mIHRvcC1sZXZlbCBlbGVtZW50IG1heSByZXF1aXJlIGFuIGluZGlyZWN0aW9uXG4gICAgICAgICAgICAvLyAgIHN0ZXAgdG8gbmF2aWdhdGUgdG8sIHRodXMgcmVxdWlyaW5nIHRoYXQgISBpcyBhbHdheXMgcHJlcGVuZGVkLiBcbiAgICAgICAgICAgIGlmICh0b3BMZXZlbEVsZW1lbnQgPT09ICdodG1sJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIiFcIiArIGVsZW1lbnRTdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRTdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ0ZJRWxlbWVudFN0ZXBzKCRwYXJlbnROb2RlLCB0b3BMZXZlbEVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkgKyBlbGVtZW50U3RlcDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR2VuZXJhdG9yXG4iLCJ2YXIgZ2VuZXJhdG9yICAgICA9IHJlcXVpcmUoJy4vZ2VuZXJhdG9yJyk7XG52YXIgaW5zdHJ1Y3Rpb25zICA9IHJlcXVpcmUoJy4vaW5zdHJ1Y3Rpb25zJyk7XG52YXIgaW50ZXJwcmV0ZXIgICA9IHJlcXVpcmUoJy4vaW50ZXJwcmV0ZXInKTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVDaGFyYWN0ZXJPZmZzZXRDRklDb21wb25lbnQoc3RhcnRUZXh0Tm9kZSwgY2hhcmFjdGVyT2Zmc2V0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRvci5nZW5lcmF0ZUNoYXJhY3Rlck9mZnNldENGSUNvbXBvbmVudChzdGFydFRleHROb2RlLCBjaGFyYWN0ZXJPZmZzZXQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ2hhck9mZnNldFJhbmdlQ29tcG9uZW50KHJhbmdlU3RhcnRFbGVtZW50LCBzdGFydE9mZnNldCwgcmFuZ2VFbmRFbGVtZW50LCBlbmRPZmZzZXQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuICByZXR1cm4gZ2VuZXJhdG9yLmdlbmVyYXRlQ2hhck9mZnNldFJhbmdlQ29tcG9uZW50KHJhbmdlU3RhcnRFbGVtZW50LCBzdGFydE9mZnNldCwgcmFuZ2VFbmRFbGVtZW50LCBlbmRPZmZzZXQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29tcGxldGVDRkkocGFja2FnZURvY3VtZW50Q0ZJQ29tcG9uZW50LCBjb250ZW50RG9jdW1lbnRDRklDb21wb25lbnQpIHtcbiAgcmV0dXJuIGdlbmVyYXRvci5nZW5lcmF0ZUNvbXBsZXRlQ0ZJKHBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudCwgY29udGVudERvY3VtZW50Q0ZJQ29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVFbGVtZW50Q0ZJQ29tcG9uZW50KHN0YXJ0RWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG4gIHJldHVybiBnZW5lcmF0b3IuZ2VuZXJhdGVFbGVtZW50Q0ZJQ29tcG9uZW50KHN0YXJ0RWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVFbGVtZW50UmFuZ2VDb21wb25lbnQocmFuZ2VTdGFydEVsZW1lbnQsIHJhbmdlRW5kRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG4gIHJldHVybiBnZW5lcmF0b3IuZ2VuZXJhdGVFbGVtZW50UmFuZ2VDb21wb25lbnQocmFuZ2VTdGFydEVsZW1lbnQsIHJhbmdlRW5kRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYWNrYWdlRG9jdW1lbnRDRklDb21wb25lbnQoY29udGVudERvY3VtZW50TmFtZSwgcGFja2FnZURvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRvci5nZW5lcmF0ZVBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudChjb250ZW50RG9jdW1lbnROYW1lLCBwYWNrYWdlRG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGFja2FnZURvY3VtZW50Q0ZJQ29tcG9uZW50V2l0aFNwaW5lSW5kZXgoc3BpbmVJbmRleCwgcGFja2FnZURvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRvci5nZW5lcmF0ZVBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudFdpdGhTcGluZUluZGV4KHNwaW5lSW5kZXgsIHBhY2thZ2VEb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGVudERvY0hyZWYoQ0ZJLCBwYWNrYWdlRG9jdW1lbnQpIHtcbiAgcmV0dXJuIGludGVycHJldGVyLmdldENvbnRlbnREb2NIcmVmKENGSSwgcGFja2FnZURvY3VtZW50KTtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZ2VUYXJnZXRFbGVtZW50cyhyYW5nZUNGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcbiAgcmV0dXJuIGludGVycHJldGVyLmdldFJhbmdlVGFyZ2V0RWxlbWVudHMocmFuZ2VDRkksIGNvbnRlbnREb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0RWxlbWVudChDRkksIGNvbnRlbnREb2N1bWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG4gIHJldHVybiBpbnRlcnByZXRlci5nZXRUYXJnZXRFbGVtZW50KENGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRFbGVtZW50V2l0aFBhcnRpYWxDRkkoY29udGVudERvY3VtZW50Q0ZJLCBjb250ZW50RG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuICByZXR1cm4gaW50ZXJwcmV0ZXIuZ2V0VGFyZ2V0RWxlbWVudFdpdGhQYXJ0aWFsQ0ZJKGNvbnRlbnREb2N1bWVudENGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xufVxuXG5mdW5jdGlvbiBnZXRUZXh0VGVybWludXNJbmZvV2l0aFBhcnRpYWxDRkkoY29udGVudERvY3VtZW50Q0ZJLCBjb250ZW50RG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuICByZXR1cm4gaW50ZXJwcmV0ZXIuZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJKGNvbnRlbnREb2N1bWVudENGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xufVxuXG5mdW5jdGlvbiBpbmplY3RFbGVtZW50KENGSSwgY29udGVudERvY3VtZW50LCBlbGVtZW50VG9JbmplY3QsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuICByZXR1cm4gaW50ZXJwcmV0ZXIuaW5qZWN0RWxlbWVudChDRkksIGNvbnRlbnREb2N1bWVudCwgZWxlbWVudFRvSW5qZWN0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xufVxuXG5mdW5jdGlvbiBpbmplY3RFbGVtZW50QXRPZmZzZXQoJHRleHROb2RlTGlzdCwgdGV4dE9mZnNldCwgZWxlbWVudFRvSW5qZWN0KSB7XG4gIHJldHVybiBpbnN0cnVjdGlvbnMuaW5qZWN0Q0ZJTWFya2VySW50b1RleHQoJHRleHROb2RlTGlzdCwgdGV4dE9mZnNldCwgZWxlbWVudFRvSW5qZWN0KTtcbn1cblxuZnVuY3Rpb24gaW5qZWN0UmFuZ2VFbGVtZW50cyhyYW5nZUNGSSwgY29udGVudERvY3VtZW50LCBzdGFydEVsZW1lbnRUb0luamVjdCwgZW5kRWxlbWVudFRvSW5qZWN0LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcbiAgcmV0dXJuIGludGVycHJldGVyLmluamVjdFJhbmdlRWxlbWVudHMocmFuZ2VDRkksIGNvbnRlbnREb2N1bWVudCwgc3RhcnRFbGVtZW50VG9JbmplY3QsIGVuZEVsZW1lbnRUb0luamVjdCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdlbmVyYXRlQ2hhcmFjdGVyT2Zmc2V0Q0ZJQ29tcG9uZW50OiBnZW5lcmF0ZUNoYXJhY3Rlck9mZnNldENGSUNvbXBvbmVudCxcbiAgZ2VuZXJhdGVDaGFyT2Zmc2V0UmFuZ2VDb21wb25lbnQ6IGdlbmVyYXRlQ2hhck9mZnNldFJhbmdlQ29tcG9uZW50LFxuICBnZW5lcmF0ZUNvbXBsZXRlQ0ZJOiBnZW5lcmF0ZUNvbXBsZXRlQ0ZJLFxuICBnZW5lcmF0ZUVsZW1lbnRDRklDb21wb25lbnQ6IGdlbmVyYXRlRWxlbWVudENGSUNvbXBvbmVudCxcbiAgZ2VuZXJhdGVFbGVtZW50UmFuZ2VDb21wb25lbnQ6IGdlbmVyYXRlRWxlbWVudFJhbmdlQ29tcG9uZW50LFxuICBnZW5lcmF0ZVBhY2thZ2VEb2N1bWVudENGSUNvbXBvbmVudDogZ2VuZXJhdGVQYWNrYWdlRG9jdW1lbnRDRklDb21wb25lbnQsXG4gIGdlbmVyYXRlUGFja2FnZURvY3VtZW50Q0ZJQ29tcG9uZW50V2l0aFNwaW5lSW5kZXg6IGdlbmVyYXRlUGFja2FnZURvY3VtZW50Q0ZJQ29tcG9uZW50V2l0aFNwaW5lSW5kZXgsXG4gIGdldENvbnRlbnREb2NIcmVmOiBnZXRDb250ZW50RG9jSHJlZixcbiAgZ2V0UmFuZ2VUYXJnZXRFbGVtZW50czogZ2V0UmFuZ2VUYXJnZXRFbGVtZW50cyxcbiAgZ2V0VGFyZ2V0RWxlbWVudDogZ2V0VGFyZ2V0RWxlbWVudCxcbiAgZ2V0VGFyZ2V0RWxlbWVudFdpdGhQYXJ0aWFsQ0ZJOiBnZXRUYXJnZXRFbGVtZW50V2l0aFBhcnRpYWxDRkksXG4gIGdldFRleHRUZXJtaW51c0luZm9XaXRoUGFydGlhbENGSTogZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJLFxuICBpbmplY3RFbGVtZW50OiBpbmplY3RFbGVtZW50LFxuICBpbmplY3RFbGVtZW50QXRPZmZzZXQ6IGluamVjdEVsZW1lbnRBdE9mZnNldCxcbiAgaW5qZWN0UmFuZ2VFbGVtZW50czogaW5qZWN0UmFuZ2VFbGVtZW50c1xufVxuIiwiLy8gRGVzY3JpcHRpb246IFRoaXMgbW9kZWwgY29udGFpbnMgdGhlIGltcGxlbWVudGF0aW9uIGZvciBcImluc3RydWN0aW9uc1wiIGluY2x1ZGVkIGluIHRoZSBFUFVCIENGSSBkb21haW4gc3BlY2lmaWMgbGFuZ3VhZ2UgKERTTCkuIFxuLy8gICBMZXhpbmcgYW5kIHBhcnNpbmcgYSBDRkkgcHJvZHVjZXMgYSBzZXQgb2YgZXhlY3V0YWJsZSBpbnN0cnVjdGlvbnMgZm9yIHByb2Nlc3NpbmcgYSBDRkkgKHJlcHJlc2VudGVkIGluIHRoZSBBU1QpLiBcbi8vICAgVGhpcyBvYmplY3QgY29udGFpbnMgYSBzZXQgb2YgZnVuY3Rpb25zIHRoYXQgaW1wbGVtZW50IGVhY2ggb2YgdGhlIGV4ZWN1dGFibGUgaW5zdHJ1Y3Rpb25zIGluIHRoZSBBU1QuIFxuXG52YXIgTm9kZVR5cGVFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JzL25vZGUtdHlwZScpXG52YXIgT3V0T2ZSYW5nZUVycm9yID0gcmVxdWlyZSgnLi9lcnJvcnMvb3V0LW9mLXJhbmdlJylcbnZhciBUZXJtaW51c0Vycm9yID0gcmVxdWlyZSgnLi9lcnJvcnMvdGVybWludXMnKVxuXG52YXIgSW5zdHJ1Y3Rpb25zID0ge1xuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXHQvLyAgXCJQVUJMSUNcIiBNRVRIT0RTIChUSEUgQVBJKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuXHQvLyBEZXNjcmlwdGlvbjogRm9sbG93cyBhIHN0ZXBcblx0Ly8gUmF0aW9uYWxlOiBUaGUgdXNlIG9mIGNoaWxkcmVuKCkgaXMgaW1wb3J0YW50IGhlcmUsIGFzIHRoaXMgalF1ZXJ5IG1ldGhvZCByZXR1cm5zIGEgdHJlZSBvZiB4bWwgbm9kZXMsIEVYQ0xVRElOR1xuXHQvLyAgIENEQVRBIGFuZCB0ZXh0IG5vZGVzLiBXaGVuIHdlIGluZGV4IGludG8gdGhlIHNldCBvZiBjaGlsZCBlbGVtZW50cywgd2UgYXJlIGFzc3VtaW5nIHRoYXQgdGV4dCBub2RlcyBoYXZlIGJlZW4gXG5cdC8vICAgZXhjbHVkZWQuXG5cdC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogVGhpcyBzaG91bGQgYmUgY2FsbGVkIFwiZm9sbG93SW5kZXhTdGVwXCJcblx0Z2V0TmV4dE5vZGUgOiBmdW5jdGlvbiAoQ0ZJU3RlcFZhbHVlLCAkY3Vyck5vZGUsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG5cdFx0Ly8gRmluZCB0aGUganF1ZXJ5IGluZGV4IGZvciB0aGUgY3VycmVudCBub2RlXG5cdFx0dmFyICR0YXJnZXROb2RlO1xuXHRcdGlmIChDRklTdGVwVmFsdWUgJSAyID09IDApIHtcblxuXHRcdFx0JHRhcmdldE5vZGUgPSB0aGlzLmVsZW1lbnROb2RlU3RlcChDRklTdGVwVmFsdWUsICRjdXJyTm9kZSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cblx0XHRcdCR0YXJnZXROb2RlID0gdGhpcy5pbmZlclRhcmdldFRleHROb2RlKENGSVN0ZXBWYWx1ZSwgJGN1cnJOb2RlLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXHRcdH1cblxuXHRcdHJldHVybiAkdGFyZ2V0Tm9kZTtcblx0fSxcblxuXHQvLyBEZXNjcmlwdGlvbjogVGhpcyBpbnN0cnVjdGlvbiBleGVjdXRlcyBhbiBpbmRpcmVjdGlvbiBzdGVwLCB3aGVyZSBhIHJlc291cmNlIGlzIHJldHJpZXZlZCB1c2luZyBhIFxuXHQvLyAgIGxpbmsgY29udGFpbmVkIG9uIGEgYXR0cmlidXRlIG9mIHRoZSB0YXJnZXQgZWxlbWVudC4gVGhlIGF0dHJpYnV0ZSB0aGF0IGNvbnRhaW5zIHRoZSBsaW5rIGRpZmZlcnNcblx0Ly8gICBkZXBlbmRpbmcgb24gdGhlIHRhcmdldC4gXG5cdC8vIE5vdGU6IElmcmFtZSBpbmRpcmVjdGlvbiB3aWxsIChzaG91bGQpIGZhaWwgaWYgdGhlIGlmcmFtZSBpcyBub3QgZnJvbSB0aGUgc2FtZSBkb21haW4gYXMgaXRzIGNvbnRhaW5pbmcgc2NyaXB0IGR1ZSB0byBcblx0Ly8gICB0aGUgY3Jvc3Mgb3JpZ2luIHNlY3VyaXR5IHBvbGljeVxuXHRmb2xsb3dJbmRpcmVjdGlvblN0ZXAgOiBmdW5jdGlvbiAoQ0ZJU3RlcFZhbHVlLCAkY3Vyck5vZGUsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXHRcdHZhciAkY29udGVudERvY3VtZW50OyBcblx0XHR2YXIgJGJsYWNrbGlzdEV4Y2x1ZGVkO1xuXHRcdHZhciAkc3RhcnRFbGVtZW50O1xuXHRcdHZhciAkdGFyZ2V0Tm9kZTtcblxuXHRcdC8vIFRPRE86IFRoaXMgY2hlY2sgbXVzdCBiZSBleHBhbmRlZCB0byBhbGwgdGhlIGRpZmZlcmVudCB0eXBlcyBvZiBpbmRpcmVjdGlvbiBzdGVwXG5cdFx0Ly8gT25seSBleHBlY3RzIGlmcmFtZXMsIGF0IHRoZSBtb21lbnRcblx0XHRpZiAoJGN1cnJOb2RlID09PSB1bmRlZmluZWQgfHwgISRjdXJyTm9kZS5pcyhcImlmcmFtZVwiKSkge1xuXG5cdFx0XHR0aHJvdyBOb2RlVHlwZUVycm9yKCRjdXJyTm9kZSwgXCJleHBlY3RlZCBhbiBpZnJhbWUgZWxlbWVudFwiKTtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBub2RlIHR5cGU7IG9ubHkgaWZyYW1lIGluZGlyZWN0aW9uIGlzIGhhbmRsZWQsIGF0IHRoZSBtb21lbnRcblx0XHRpZiAoJGN1cnJOb2RlLmlzKFwiaWZyYW1lXCIpKSB7XG5cblx0XHRcdC8vIEdldCBjb250ZW50XG5cdFx0XHQkY29udGVudERvY3VtZW50ID0gJGN1cnJOb2RlLmNvbnRlbnRzKCk7XG5cblx0XHRcdC8vIEdvIHRvIHRoZSBmaXJzdCBYSFRNTCBlbGVtZW50LCB3aGljaCB3aWxsIGJlIHRoZSBmaXJzdCBjaGlsZCBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdFxuXHRcdFx0JGJsYWNrbGlzdEV4Y2x1ZGVkID0gdGhpcy5hcHBseUJsYWNrbGlzdCgkY29udGVudERvY3VtZW50LmNoaWxkcmVuKCksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cdFx0XHQkc3RhcnRFbGVtZW50ID0gJCgkYmxhY2tsaXN0RXhjbHVkZWRbMF0pO1xuXG5cdFx0XHQvLyBGb2xsb3cgYW4gaW5kZXggc3RlcFxuXHRcdFx0JHRhcmdldE5vZGUgPSB0aGlzLmdldE5leHROb2RlKENGSVN0ZXBWYWx1ZSwgJHN0YXJ0RWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuXHRcdFx0Ly8gUmV0dXJuIHRoYXQgc2hpdCFcblx0XHRcdHJldHVybiAkdGFyZ2V0Tm9kZTsgXG5cdFx0fVxuXG5cdFx0Ly8gVE9ETzogT3RoZXIgdHlwZXMgb2YgaW5kaXJlY3Rpb25cblx0XHQvLyBUT0RPOiAkdGFyZ2V0Tm9kZS5pcyhcImVtYmVkXCIpKSA6IHNyY1xuXHRcdC8vIFRPRE86ICgkdGFyZ2V0Tm9kZS5pcyhcIm9iamVjdFwiKSkgOiBkYXRhXG5cdFx0Ly8gVE9ETzogKCR0YXJnZXROb2RlLmlzKFwiaW1hZ2VcIikgfHwgJHRhcmdldE5vZGUuaXMoXCJ4bGluazpocmVmXCIpKSA6IHhsaW5rOmhyZWZcblx0fSxcblxuXHQvLyBEZXNjcmlwdGlvbjogSW5qZWN0cyBhbiBlbGVtZW50IGF0IHRoZSBzcGVjaWZpZWQgdGV4dCBub2RlXG5cdC8vIEFyZ3VtZW50czogYSBjZmkgdGV4dCB0ZXJtaW5hdGlvbiBzdHJpbmcsIGEganF1ZXJ5IG9iamVjdCB0byB0aGUgY3VycmVudCBub2RlXG5cdC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogUmVuYW1lIHRoaXMgdG8gaW5kaWNhdGUgdGhhdCBpdCBpbmplY3RzIGludG8gYSB0ZXh0IHRlcm1pbnVzXG5cdHRleHRUZXJtaW5hdGlvbiA6IGZ1bmN0aW9uICgkY3Vyck5vZGUsIHRleHRPZmZzZXQsIGVsZW1lbnRUb0luamVjdCkge1xuXG5cdFx0dmFyICRpbmplY3RlZEVsZW1lbnQ7XG5cdFx0Ly8gR2V0IHRoZSBmaXJzdCBub2RlLCB0aGlzIHNob3VsZCBiZSBhIHRleHQgbm9kZVxuXHRcdGlmICgkY3Vyck5vZGUgPT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHR0aHJvdyBOb2RlVHlwZUVycm9yKCRjdXJyTm9kZSwgXCJleHBlY3RlZCBhIHRlcm1pbmF0aW5nIG5vZGUsIG9yIG5vZGUgbGlzdFwiKTtcblx0XHR9IFxuXHRcdGVsc2UgaWYgKCRjdXJyTm9kZS5sZW5ndGggPT09IDApIHtcblxuXHRcdFx0dGhyb3cgVGVybWludXNFcnJvcihcIlRleHRcIiwgXCJUZXh0IG9mZnNldDpcIiArIHRleHRPZmZzZXQsIFwibm8gbm9kZXMgZm91bmQgZm9yIHRlcm1pbmF0aW9uIGNvbmRpdGlvblwiKTtcblx0XHR9XG5cblx0XHQkaW5qZWN0ZWRFbGVtZW50ID0gdGhpcy5pbmplY3RDRklNYXJrZXJJbnRvVGV4dCgkY3Vyck5vZGUsIHRleHRPZmZzZXQsIGVsZW1lbnRUb0luamVjdCk7XG5cdFx0cmV0dXJuICRpbmplY3RlZEVsZW1lbnQ7XG5cdH0sXG5cblx0Ly8gRGVzY3JpcHRpb246IENoZWNrcyB0aGF0IHRoZSBpZCBhc3NlcnRpb24gZm9yIHRoZSBub2RlIHRhcmdldCBtYXRjaGVzIHRoYXQgb24gXG5cdC8vICAgdGhlIGZvdW5kIG5vZGUuIFxuXHR0YXJnZXRJZE1hdGNoZXNJZEFzc2VydGlvbiA6IGZ1bmN0aW9uICgkZm91bmROb2RlLCBpZEFzc2VydGlvbikge1xuXG5cdFx0aWYgKCRmb3VuZE5vZGUuYXR0cihcImlkXCIpID09PSBpZEFzc2VydGlvbikge1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cdC8vICBcIlBSSVZBVEVcIiBIRUxQRVJTICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5cdC8vIERlc2NyaXB0aW9uOiBTdGVwIHJlZmVyZW5jZSBmb3IgeG1sIGVsZW1lbnQgbm9kZS4gRXhwZWN0ZWQgdGhhdCBDRklTdGVwVmFsdWUgaXMgYW4gZXZlbiBpbnRlZ2VyXG5cdGVsZW1lbnROb2RlU3RlcCA6IGZ1bmN0aW9uIChDRklTdGVwVmFsdWUsICRjdXJyTm9kZSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cblx0XHR2YXIgJHRhcmdldE5vZGU7XG5cdFx0dmFyICRibGFja2xpc3RFeGNsdWRlZDtcblx0XHR2YXIgbnVtRWxlbWVudHM7XG5cdFx0dmFyIGpxdWVyeVRhcmdldE5vZGVJbmRleCA9IChDRklTdGVwVmFsdWUgLyAyKSAtIDE7XG5cblx0XHQkYmxhY2tsaXN0RXhjbHVkZWQgPSB0aGlzLmFwcGx5QmxhY2tsaXN0KCRjdXJyTm9kZS5jaGlsZHJlbigpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXHRcdG51bUVsZW1lbnRzID0gJGJsYWNrbGlzdEV4Y2x1ZGVkLmxlbmd0aDtcblxuXHRcdGlmICh0aGlzLmluZGV4T3V0T2ZSYW5nZShqcXVlcnlUYXJnZXROb2RlSW5kZXgsIG51bUVsZW1lbnRzKSkge1xuXG5cdFx0XHR0aHJvdyBPdXRPZlJhbmdlRXJyb3IoanF1ZXJ5VGFyZ2V0Tm9kZUluZGV4LCBudW1FbGVtZW50cyAtIDEsIFwiXCIpO1xuXHRcdH1cblxuXHQgICAgJHRhcmdldE5vZGUgPSAkKCRibGFja2xpc3RFeGNsdWRlZFtqcXVlcnlUYXJnZXROb2RlSW5kZXhdKTtcblx0XHRyZXR1cm4gJHRhcmdldE5vZGU7XG5cdH0sXG5cblx0cmV0cmlldmVJdGVtUmVmSHJlZiA6IGZ1bmN0aW9uICgkaXRlbVJlZkVsZW1lbnQsICRwYWNrYWdlRG9jdW1lbnQpIHtcblxuXHRcdHJldHVybiAkKFwiI1wiICsgJGl0ZW1SZWZFbGVtZW50LmF0dHIoXCJpZHJlZlwiKSwgJHBhY2thZ2VEb2N1bWVudCkuYXR0cihcImhyZWZcIik7XG5cdH0sXG5cblx0aW5kZXhPdXRPZlJhbmdlIDogZnVuY3Rpb24gKHRhcmdldEluZGV4LCBudW1DaGlsZEVsZW1lbnRzKSB7XG5cblx0XHRyZXR1cm4gKHRhcmdldEluZGV4ID4gbnVtQ2hpbGRFbGVtZW50cyAtIDEpID8gdHJ1ZSA6IGZhbHNlO1xuXHR9LFxuXG5cdC8vIFJhdGlvbmFsZTogSW4gb3JkZXIgdG8gaW5qZWN0IGFuIGVsZW1lbnQgaW50byBhIHNwZWNpZmljIHBvc2l0aW9uLCBhY2Nlc3MgdG8gdGhlIHBhcmVudCBvYmplY3QgXG5cdC8vICAgaXMgcmVxdWlyZWQuIFRoaXMgaXMgb2J0YWluZWQgd2l0aCB0aGUganF1ZXJ5IHBhcmVudCgpIG1ldGhvZC4gQW4gYWx0ZXJuYXRpdmUgd291bGQgYmUgdG8gXG5cdC8vICAgcGFzcyBpbiB0aGUgcGFyZW50IHdpdGggYSBmaWx0ZXJlZCBsaXN0IGNvbnRhaW5pbmcgb25seSBjaGlsZHJlbiB0aGF0IGFyZSBwYXJ0IG9mIHRoZSB0YXJnZXQgdGV4dCBub2RlLlxuICAgIGluamVjdENGSU1hcmtlckludG9UZXh0IDogZnVuY3Rpb24gKCR0ZXh0Tm9kZUxpc3QsIHRleHRPZmZzZXQsIGVsZW1lbnRUb0luamVjdCkge1xuXG4gICAgICAgIHZhciBub2RlTnVtO1xuICAgICAgICB2YXIgY3Vyck5vZGVMZW5ndGg7XG4gICAgICAgIHZhciBjdXJyVGV4dFBvc2l0aW9uID0gMDtcbiAgICAgICAgdmFyIG5vZGVPZmZzZXQ7XG4gICAgICAgIHZhciBvcmlnaW5hbFRleHQ7XG4gICAgICAgIHZhciAkaW5qZWN0ZWROb2RlO1xuICAgICAgICB2YXIgJG5ld1RleHROb2RlO1xuICAgICAgICAvLyBUaGUgaXRlcmF0aW9uIGNvdW50ZXIgbWF5IGJlIGluY29ycmVjdCBoZXJlIChzaG91bGQgYmUgJHRleHROb2RlTGlzdC5sZW5ndGggLSAxID8/KVxuICAgICAgICBmb3IgKG5vZGVOdW0gPSAwOyBub2RlTnVtIDw9ICR0ZXh0Tm9kZUxpc3QubGVuZ3RoOyBub2RlTnVtKyspIHtcblxuICAgICAgICAgICAgaWYgKCR0ZXh0Tm9kZUxpc3Rbbm9kZU51bV0ubm9kZVR5cGUgPT09IDMpIHtcblxuICAgICAgICAgICAgICAgIGN1cnJOb2RlTWF4SW5kZXggPSAkdGV4dE5vZGVMaXN0W25vZGVOdW1dLm5vZGVWYWx1ZS5sZW5ndGggICsgY3VyclRleHRQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICBub2RlT2Zmc2V0ID0gdGV4dE9mZnNldCAtIGN1cnJUZXh0UG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICBpZiAoY3Vyck5vZGVNYXhJbmRleCA+IHRleHRPZmZzZXQpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgZ29pbmcgdG8gYmUgc3BsaXQgYW5kIHRoZSBjb21wb25lbnRzIHJlLWluc2VydGVkXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVGV4dCA9ICR0ZXh0Tm9kZUxpc3Rbbm9kZU51bV0ubm9kZVZhbHVlO1x0XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQmVmb3JlIHBhcnRcbiAgICAgICAgICAgICAgICAgICAgJHRleHROb2RlTGlzdFtub2RlTnVtXS5ub2RlVmFsdWUgPSBvcmlnaW5hbFRleHQuc2xpY2UoMCwgbm9kZU9mZnNldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW5qZWN0ZWQgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAkaW5qZWN0ZWROb2RlID0gJChlbGVtZW50VG9JbmplY3QpLmluc2VydEFmdGVyKCR0ZXh0Tm9kZUxpc3QuZXEobm9kZU51bSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFmdGVyIHBhcnRcbiAgICAgICAgICAgICAgICAgICAgJG5ld1RleHROb2RlID0gJChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvcmlnaW5hbFRleHQuc2xpY2Uobm9kZU9mZnNldCwgb3JpZ2luYWxUZXh0Lmxlbmd0aCkpKTtcbiAgICAgICAgICAgICAgICAgICAgJCgkbmV3VGV4dE5vZGUpLmluc2VydEFmdGVyKCRpbmplY3RlZE5vZGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkaW5qZWN0ZWROb2RlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Vyck5vZGVNYXhJbmRleCA9PSB0ZXh0T2Zmc2V0KXtcbiAgICAgICAgICAgICAgICAgICAgJGluamVjdGVkTm9kZSA9ICQoZWxlbWVudFRvSW5qZWN0KS5pbnNlcnRBZnRlcigkdGV4dE5vZGVMaXN0LmVxKG5vZGVOdW0pKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRpbmplY3RlZE5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGN1cnJUZXh0UG9zaXRpb24gPSBjdXJyTm9kZU1heEluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IFRlcm1pbnVzRXJyb3IoXCJUZXh0XCIsIFwiVGV4dCBvZmZzZXQ6XCIgKyB0ZXh0T2Zmc2V0LCBcIlRoZSBvZmZzZXQgZXhjZWVkZWQgdGhlIGxlbmd0aCBvZiB0aGUgdGV4dFwiKTtcbiAgICB9LFxuXG5cdC8vIFJhdGlvbmFsZTogSW4gb3JkZXIgdG8gaW5qZWN0IGFuIGVsZW1lbnQgaW50byBhIHNwZWNpZmljIHBvc2l0aW9uLCBhY2Nlc3MgdG8gdGhlIHBhcmVudCBvYmplY3QgXG5cdC8vICAgaXMgcmVxdWlyZWQuIFRoaXMgaXMgb2J0YWluZWQgd2l0aCB0aGUganF1ZXJ5IHBhcmVudCgpIG1ldGhvZC4gQW4gYWx0ZXJuYXRpdmUgd291bGQgYmUgdG8gXG5cdC8vICAgcGFzcyBpbiB0aGUgcGFyZW50IHdpdGggYSBmaWx0ZXJlZCBsaXN0IGNvbnRhaW5pbmcgb25seSBjaGlsZHJlbiB0aGF0IGFyZSBwYXJ0IG9mIHRoZSB0YXJnZXQgdGV4dCBub2RlLlxuXG5cdC8vIERlc2NyaXB0aW9uOiBUaGlzIG1ldGhvZCBmaW5kcyBhIHRhcmdldCB0ZXh0IG5vZGUgYW5kIHRoZW4gaW5qZWN0cyBhbiBlbGVtZW50IGludG8gdGhlIGFwcHJvcHJpYXRlIG5vZGVcblx0Ly8gUmF0aW9uYWxlOiBUaGUgcG9zc2liaWxpdHkgdGhhdCBjZmkgbWFya2VyIGVsZW1lbnRzIGhhdmUgYmVlbiBpbmplY3RlZCBpbnRvIGEgdGV4dCBub2RlIGF0IHNvbWUgcG9pbnQgcHJldmlvdXMgdG8gXG5cdC8vICAgdGhpcyBtZXRob2QgYmVpbmcgY2FsbGVkIChhbmQgdGh1cyBzcGxpdHRpbmcgdGhlIG9yaWdpbmFsIHRleHQgbm9kZSBpbnRvIHR3byBzZXBhcmF0ZSB0ZXh0IG5vZGVzKSBuZWNlc3NpdGF0ZXMgdGhhdFxuXHQvLyAgIHRoZSBzZXQgb2Ygbm9kZXMgdGhhdCBjb21wcm9taXNlZCB0aGUgb3JpZ2luYWwgdGFyZ2V0IHRleHQgbm9kZSBhcmUgaW5mZXJyZWQgYW5kIHJldHVybmVkLlxuXHQvLyBOb3RlczogUGFzc2VkIGEgY3VycmVudCBub2RlLiBUaGlzIG5vZGUgc2hvdWxkIGhhdmUgYSBzZXQgb2YgZWxlbWVudHMgdW5kZXIgaXQuIFRoaXMgd2lsbCBpbmNsdWRlIGF0IGxlYXN0IG9uZSB0ZXh0IG5vZGUsIFxuXHQvLyAgIGVsZW1lbnQgbm9kZXMgKG1heWJlKSwgb3IgcG9zc2libHkgYSBtaXguIFxuXHQvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IFRoaXMgbWV0aG9kIGlzIHByZXR0eSBsb25nIChhbmQgY29uZnVzaW5nKS4gV29ydGggaW52ZXN0aWdhdGluZyB0byBzZWUgaWYgaXQgY2FuIGJlIHJlZmFjdG9yZWQgaW50byBzb21ldGhpbmcgY2xlYXJlci5cblx0aW5mZXJUYXJnZXRUZXh0Tm9kZSA6IGZ1bmN0aW9uIChDRklTdGVwVmFsdWUsICRjdXJyTm9kZSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cdFx0XG5cdFx0dmFyICRlbGVtZW50c1dpdGhvdXRNYXJrZXJzO1xuXHRcdHZhciBjdXJyTG9naWNhbFRleHROb2RlSW5kZXg7XG5cdFx0dmFyIHRhcmdldExvZ2ljYWxUZXh0Tm9kZUluZGV4O1xuXHRcdHZhciBub2RlTnVtO1xuXHRcdHZhciAkdGFyZ2V0VGV4dE5vZGVMaXN0O1xuXHRcdHZhciBwcmV2Tm9kZVdhc1RleHROb2RlO1xuXG5cdFx0Ly8gUmVtb3ZlIGFueSBjZmkgbWFya2VyIGVsZW1lbnRzIGZyb20gdGhlIHNldCBvZiBlbGVtZW50cy4gXG5cdFx0Ly8gUmF0aW9uYWxlOiBBIGZpbHRlcmluZyBmdW5jdGlvbiBpcyB1c2VkLCBhcyBzaW1wbHkgdXNpbmcgYSBjbGFzcyBzZWxlY3RvciB3aXRoIGpxdWVyeSBhcHBlYXJzIHRvIFxuXHRcdC8vICAgcmVzdWx0IGluIGJlaGF2aW91ciB3aGVyZSB0ZXh0IG5vZGVzIGFyZSBhbHNvIGZpbHRlcmVkIG91dCwgYWxvbmcgd2l0aCB0aGUgY2xhc3MgZWxlbWVudCBiZWluZyBmaWx0ZXJlZC5cblx0XHQkZWxlbWVudHNXaXRob3V0TWFya2VycyA9IHRoaXMuYXBwbHlCbGFja2xpc3QoJGN1cnJOb2RlLmNvbnRlbnRzKCksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cblx0XHQvLyBDb252ZXJ0IENGSVN0ZXBWYWx1ZSB0byBsb2dpY2FsIGluZGV4OyBhc3N1bWVzIG9kZCBpbnRlZ2VyIGZvciB0aGUgc3RlcCB2YWx1ZVxuXHRcdHRhcmdldExvZ2ljYWxUZXh0Tm9kZUluZGV4ID0gKChwYXJzZUludChDRklTdGVwVmFsdWUpICsgMSkgLyAyKSAtIDE7XG5cblx0XHQvLyBTZXQgdGV4dCBub2RlIHBvc2l0aW9uIGNvdW50ZXJcblx0XHRjdXJyTG9naWNhbFRleHROb2RlSW5kZXggPSAwO1xuXHRcdHByZXZOb2RlV2FzVGV4dE5vZGUgPSBmYWxzZTtcblx0XHQkdGFyZ2V0VGV4dE5vZGVMaXN0ID0gJGVsZW1lbnRzV2l0aG91dE1hcmtlcnMuZmlsdGVyKFxuXHRcdFx0ZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlmIChjdXJyTG9naWNhbFRleHROb2RlSW5kZXggPT09IHRhcmdldExvZ2ljYWxUZXh0Tm9kZUluZGV4KSB7XG5cblx0XHRcdFx0XHQvLyBJZiBpdCdzIGEgdGV4dCBub2RlXG5cdFx0XHRcdFx0aWYgKHRoaXMubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG5cdFx0XHRcdFx0XHRwcmV2Tm9kZVdhc1RleHROb2RlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBSYXRpb25hbGU6IFRoZSBsb2dpY2FsIHRleHQgbm9kZSBwb3NpdGlvbiBpcyBvbmx5IGluY3JlbWVudGVkIG9uY2UgYSBncm91cCBvZiB0ZXh0IG5vZGVzIChhIHNpbmdsZSBsb2dpY2FsXG5cdFx0XHRcdFx0Ly8gICB0ZXh0IG5vZGUpIGhhcyBiZWVuIHBhc3NlZCBieSB0aGUgbG9vcC4gXG5cdFx0XHRcdFx0ZWxzZSBpZiAocHJldk5vZGVXYXNUZXh0Tm9kZSAmJiAodGhpcy5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUpKSB7XG5cdFx0XHRcdFx0XHRjdXJyTG9naWNhbFRleHROb2RlSW5kZXgrKztcblx0XHRcdFx0XHRcdHByZXZOb2RlV2FzVGV4dE5vZGUgPSBmYWxzZTtcdFx0XHRcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIGFueSBlbGVtZW50c1xuXHRcdFx0XHRlbHNlIHtcblxuXHRcdFx0XHRcdGlmICh0aGlzLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuXHRcdFx0XHRcdFx0cHJldk5vZGVXYXNUZXh0Tm9kZSA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKHByZXZOb2RlV2FzVGV4dE5vZGUgJiYgKHRoaXMubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSAmJiAodGhpcyAhPT0gJGVsZW1lbnRzV2l0aG91dE1hcmtlcnMubGFzdENoaWxkKSkge1xuXHRcdFx0XHRcdFx0Y3VyckxvZ2ljYWxUZXh0Tm9kZUluZGV4Kys7XG5cdFx0XHRcdFx0XHRwcmV2Tm9kZVdhc1RleHROb2RlID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdC8vIFRoZSBmaWx0ZXJpbmcgYWJvdmUgc2hvdWxkIGhhdmUgY291bnRlZCB0aGUgbnVtYmVyIG9mIFwibG9naWNhbFwiIHRleHQgbm9kZXM7IHRoaXMgY2FuIGJlIHVzZWQgdG8gXG5cdFx0Ly8gZGV0ZWN0IG91dCBvZiByYW5nZSBlcnJvcnNcblx0XHRpZiAoJHRhcmdldFRleHROb2RlTGlzdC5sZW5ndGggPT09IDApIHtcblx0XHRcdHRocm93IE91dE9mUmFuZ2VFcnJvcihsb2dpY2FsVGFyZ2V0VGV4dE5vZGVJbmRleCwgY3VyckxvZ2ljYWxUZXh0Tm9kZUluZGV4LCBcIkluZGV4IG91dCBvZiByYW5nZVwiKTtcblx0XHR9XG5cblx0XHQvLyByZXR1cm4gdGhlIHRleHQgbm9kZSBsaXN0XG5cdFx0cmV0dXJuICR0YXJnZXRUZXh0Tm9kZUxpc3Q7XG5cdH0sXG5cblx0YXBwbHlCbGFja2xpc3QgOiBmdW5jdGlvbiAoJGVsZW1lbnRzLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgJGZpbHRlcmVkRWxlbWVudHM7XG5cbiAgICAgICAgJGZpbHRlcmVkRWxlbWVudHMgPSAkZWxlbWVudHMuZmlsdGVyKFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyICRjdXJyRWxlbWVudCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgdmFyIGluY2x1ZGVJbkxpc3QgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzQmxhY2tsaXN0KSB7XG5cbiAgICAgICAgICAgICAgICBcdC8vIEZpbHRlciBlYWNoIGVsZW1lbnQgd2l0aCB0aGUgY2xhc3MgdHlwZVxuICAgICAgICAgICAgICAgIFx0JC5lYWNoKGNsYXNzQmxhY2tsaXN0LCBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoJGN1cnJFbGVtZW50Lmhhc0NsYXNzKHZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIFx0aW5jbHVkZUluTGlzdCA9IGZhbHNlO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgXHQvLyBCcmVhayB0aGlzIGxvb3Bcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcdH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50QmxhY2tsaXN0KSB7XG4gICAgICAgICAgICAgICAgXHRcblx0ICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIHR5cGUgb2YgZWxlbWVudFxuXHQgICAgICAgICAgICAgICAgJC5lYWNoKGVsZW1lbnRCbGFja2xpc3QsIGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICgkY3VyckVsZW1lbnQuaXModmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgXHRpbmNsdWRlSW5MaXN0ID0gZmFsc2U7XG5cblx0ICAgICAgICAgICAgICAgICAgICBcdC8vIEJyZWFrIHRoaXMgbG9vcFxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaWRCbGFja2xpc3QpIHtcbiAgICAgICAgICAgICAgICBcdFxuXHQgICAgICAgICAgICAgICAgLy8gRm9yIGVhY2ggdHlwZSBvZiBlbGVtZW50XG5cdCAgICAgICAgICAgICAgICAkLmVhY2goaWRCbGFja2xpc3QsIGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICgkY3VyckVsZW1lbnQuYXR0cihcImlkXCIpID09PSB2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIFx0aW5jbHVkZUluTGlzdCA9IGZhbHNlO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgXHQvLyBCcmVhayB0aGlzIGxvb3Bcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHRcdFx0XHR9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZUluTGlzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gJGZpbHRlcmVkRWxlbWVudHM7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnN0cnVjdGlvbnNcbiIsIi8vIERlc2NyaXB0aW9uOiBUaGlzIGlzIGFuIGludGVycHJldGVyIHRoYXQgaW50ZXByZXRzIGFuIEFic3RyYWN0IFN5bnRheCBUcmVlIChBU1QpIGZvciBhIENGSS4gVGhlIHJlc3VsdCBvZiBleGVjdXRpbmcgdGhlIGludGVycHJldGVyXG4vLyAgIGlzIHRvIGluamVjdCBhbiBlbGVtZW50LCBvciBzZXQgb2YgZWxlbWVudHMsIGludG8gYW4gRVBVQiBjb250ZW50IGRvY3VtZW50ICh3aGljaCBpcyBqdXN0IGFuIFhIVE1MIGRvY3VtZW50KS4gVGhlc2UgZWxlbWVudChzKSB3aWxsXG4vLyAgIHJlcHJlc2VudCB0aGUgcG9zaXRpb24gb3IgYXJlYSBpbiB0aGUgRVBVQiByZWZlcmVuY2VkIGJ5IGEgQ0ZJLlxuLy8gUmF0aW9uYWxlOiBUaGUgQVNUIGlzIGEgY2xlYW4gYW5kIHJlYWRhYmxlIGV4cHJlc3Npb24gb2YgdGhlIHN0ZXAtdGVybWludXMgc3RydWN0dXJlIG9mIGEgQ0ZJLiBBbHRob3VnaCBidWlsZGluZyBhbiBpbnRlcnByZXRlciBhZGRzIHRvIHRoZVxuLy8gICBDRkkgaW5mcmFzdHJ1Y3R1cmUsIGl0IHByb3ZpZGVzIGEgbnVtYmVyIG9mIGJlbmVmaXRzLiBGaXJzdCwgaXQgZW1waGFzaXplcyBhIGNsZWFyIHNlcGFyYXRpb24gb2YgY29uY2VybnMgYmV0d2VlbiBsZXhpbmcvcGFyc2luZyBhXG4vLyAgIENGSSwgd2hpY2ggaW52b2x2ZXMgc29tZSBjb21wbGV4aXR5IHJlbGF0ZWQgdG8gZXNjYXBlZCBhbmQgc3BlY2lhbCBjaGFyYWN0ZXJzLCBhbmQgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgdW5kZXJseWluZyBzZXQgb2Ygc3RlcHMgXG4vLyAgIHJlcHJlc2VudGVkIGJ5IHRoZSBDRkkuIFNlY29uZCwgaXQgd2lsbCBiZSBlYXNpZXIgdG8gZXh0ZW5kIHRoZSBpbnRlcnByZXRlciB0byBhY2NvdW50IGZvciBuZXcvYWx0ZXJlZCBDRkkgc3RlcHMgKHNheSBmb3IgcmVmZXJlbmNlc1xuLy8gICB0byB2ZWN0b3Igb2JqZWN0cyBvciBtdWx0aXBsZSBDRklzKSB0aGFuIGlmIGxleGluZywgcGFyc2luZyBhbmQgaW50ZXJwcmV0YXRpb24gd2VyZSBhbGwgaGFuZGxlZCBpbiBhIHNpbmdsZSBzdGVwLiBGaW5hbGx5LCBSZWFkaXVtJ3Mgb2JqZWN0aXZlIGlzIFxuLy8gICB0byBkZW1vbnN0cmF0ZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgRVBVQiAzLjAgc3BlYy4gQW4gaW1wbGVtZW50YXRpb24gd2l0aCBhIHN0cm9uZyBzZXBhcmF0aW9uIG9mIGNvbmNlcm5zIHRoYXQgY29uZm9ybXMgdG8gXG4vLyAgIHdlbGwtdW5kZXJzdG9vZCBwYXR0ZXJucyBmb3IgRFNMIHByb2Nlc3Npbmcgc2hvdWxkIGJlIGVhc2llciB0byBjb21tdW5pY2F0ZSwgYW5hbHl6ZSBhbmQgdW5kZXJzdGFuZC4gXG4vLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IG5vZGUgdHlwZSBlcnJvcnMgc2hvdWxkbid0IHJlYWxseSBiZSBwb3NzaWJsZSBpZiB0aGUgQ0ZJIHN5bnRheCBpcyBjb3JyZWN0IGFuZCB0aGUgcGFyc2VyIGlzIGVycm9yIGZyZWUuIFxuLy8gICBNaWdodCB3YW50IHRvIG1ha2UgdGhlIHNjcmlwdCBkaWUgaW4gdGhvc2UgaW5zdGFuY2VzLCBvbmNlIHRoZSBncmFtbWFyIGFuZCBpbnRlcnByZXRlciBhcmUgbW9yZSBzdGFibGUuIFxuLy8gUkVGQUNUT1JJTkcgQ0FORElEQVRFOiBUaGUgdXNlIG9mIHRoZSAnbm9kZVR5cGUnIHByb3BlcnR5IGlzIGNvbmZ1c2luZyBhcyB0aGlzIGlzIGEgRE9NIG5vZGUgcHJvcGVydHkgYW5kIHRoZSB0d28gYXJlIHVucmVsYXRlZC4gXG4vLyAgIFdob29wcy4gVGhlcmUgc2hvdWxkbid0IGJlIGFueSBpbnRlcmZlcmVuY2UsIGhvd2V2ZXIsIEkgdGhpbmsgdGhpcyBzaG91bGQgYmUgY2hhbmdlZC4gXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBDRklBc3NlcnRpb25FcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JzL2NmaS1hc3NlcnRpb24nKVxudmFyIEluc3RydWN0aW9ucyA9IHJlcXVpcmUoJy4vaW5zdHJ1Y3Rpb25zJylcbnZhciBOb2RlVHlwZUVycm9yID0gcmVxdWlyZSgnLi9lcnJvcnMvbm9kZS10eXBlJylcbnZhciBQYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpXG5cbnZhciBJbnRlcnByZXRlciA9IHtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuICAgIC8vICBcIlBVQkxJQ1wiIE1FVEhPRFMgKFRIRSBBUEkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgICAvLyBEZXNjcmlwdGlvbjogRmluZCB0aGUgY29udGVudCBkb2N1bWVudCByZWZlcmVuY2VkIGJ5IHRoZSBzcGluZSBpdGVtLiBUaGlzIHNob3VsZCBiZSB0aGUgc3BpbmUgaXRlbSBcbiAgICAvLyAgIHJlZmVyZW5jZWQgYnkgdGhlIGZpcnN0IGluZGlyZWN0aW9uIHN0ZXAgaW4gdGhlIENGSS5cbiAgICAvLyBSYXRpb25hbGU6IFRoaXMgbWV0aG9kIGlzIGEgcGFydCBvZiB0aGUgQVBJIHNvIHRoYXQgdGhlIHJlYWRpbmcgc3lzdGVtIGNhbiBcImludGVyYWN0XCIgdGhlIGNvbnRlbnQgZG9jdW1lbnQgXG4gICAgLy8gICBwb2ludGVkIHRvIGJ5IGEgQ0ZJLiBJZiB0aGlzIGlzIG5vdCBhIHNlcGFyYXRlIHN0ZXAsIHRoZSBwcm9jZXNzaW5nIG9mIHRoZSBDRkkgbXVzdCBiZSB0aWdodGx5IGNvdXBsZWQgd2l0aCBcbiAgICAvLyAgIHRoZSByZWFkaW5nIHN5c3RlbSwgYXMgaXQgc3RhbmRzIG5vdy4gXG4gICAgZ2V0Q29udGVudERvY0hyZWYgOiBmdW5jdGlvbiAoQ0ZJLCBwYWNrYWdlRG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciAkcGFja2FnZURvY3VtZW50ID0gJChwYWNrYWdlRG9jdW1lbnQpO1xuICAgICAgICB2YXIgZGVjb2RlZENGSSA9IGRlY29kZVVSSShDRkkpO1xuICAgICAgICB2YXIgQ0ZJQVNUID0gUGFyc2VyLnBhcnNlKGRlY29kZWRDRkkpO1xuXG4gICAgICAgIGlmICghQ0ZJQVNUIHx8IENGSUFTVC50eXBlICE9PSBcIkNGSUFTVFwiKSB7IFxuICAgICAgICAgICAgdGhyb3cgTm9kZVR5cGVFcnJvcihDRklBU1QsIFwiZXhwZWN0ZWQgQ0ZJIEFTVCByb290IG5vZGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnRlcnBldCB0aGUgcGF0aCBub2RlICh0aGUgcGFja2FnZSBkb2N1bWVudCBzdGVwKVxuICAgICAgICB2YXIgJHBhY2thZ2VFbGVtZW50ID0gJCgkKFwicGFja2FnZVwiLCAkcGFja2FnZURvY3VtZW50KVswXSk7XG4gICAgICAgIHZhciAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldEluZGV4U3RlcE5vZGUoQ0ZJQVNULmNmaVN0cmluZy5wYXRoLCAkcGFja2FnZUVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgICAgIGZvdW5kSHJlZiA9IHRoaXMuc2VhcmNoTG9jYWxQYXRoRm9ySHJlZigkY3VyckVsZW1lbnQsICRwYWNrYWdlRG9jdW1lbnQsIENGSUFTVC5jZmlTdHJpbmcubG9jYWxQYXRoLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIGlmIChmb3VuZEhyZWYpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3VuZEhyZWY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIERlc2NyaXB0aW9uOiBJbmplY3QgYW4gYXJiaXRyYXJ5IGh0bWwgZWxlbWVudCBpbnRvIGEgcG9zaXRpb24gaW4gYSBjb250ZW50IGRvY3VtZW50IHJlZmVyZW5jZWQgYnkgYSBDRklcbiAgICBpbmplY3RFbGVtZW50IDogZnVuY3Rpb24gKENGSSwgY29udGVudERvY3VtZW50LCBlbGVtZW50VG9JbmplY3QsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciBkZWNvZGVkQ0ZJID0gZGVjb2RlVVJJKENGSSk7XG4gICAgICAgIHZhciBDRklBU1QgPSBQYXJzZXIucGFyc2UoZGVjb2RlZENGSSk7XG4gICAgICAgIHZhciBpbmRpcmVjdGlvbk5vZGU7XG4gICAgICAgIHZhciBpbmRpcmVjdGlvblN0ZXBOdW07XG4gICAgICAgIHZhciAkY3VyckVsZW1lbnQ7XG5cbiAgICAgICAgLy8gUmF0aW9uYWxlOiBTaW5jZSB0aGUgY29ycmVjdCBjb250ZW50IGRvY3VtZW50IGZvciB0aGlzIENGSSBpcyBhbHJlYWR5IGJlaW5nIHBhc3NlZCwgd2UgY2FuIHNraXAgdG8gdGhlIGJlZ2lubmluZyBcbiAgICAgICAgLy8gICBvZiB0aGUgaW5kaXJlY3Rpb24gc3RlcCB0aGF0IHJlZmVyZW5jZWQgdGhlIGNvbnRlbnQgZG9jdW1lbnQuXG4gICAgICAgIC8vIE5vdGU6IFRoaXMgYXNzdW1lcyB0aGF0IGluZGlyZWN0aW9uIHN0ZXBzIGFuZCBpbmRleCBzdGVwcyBjb25mb3JtIHRvIGFuIGludGVyZmFjZTogYW4gb2JqZWN0IHdpdGggc3RlcExlbmd0aCwgaWRBc3NlcnRpb25cbiAgICAgICAgaW5kaXJlY3Rpb25TdGVwTnVtID0gdGhpcy5nZXRGaXJzdEluZGlyZWN0aW9uU3RlcE51bShDRklBU1QpO1xuICAgICAgICBpbmRpcmVjdGlvbk5vZGUgPSBDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aC5zdGVwc1tpbmRpcmVjdGlvblN0ZXBOdW1dO1xuICAgICAgICBpbmRpcmVjdGlvbk5vZGUudHlwZSA9IFwiaW5kZXhTdGVwXCI7XG5cbiAgICAgICAgLy8gSW50ZXJwcmV0IHRoZSByZXN0IG9mIHRoZSBzdGVwc1xuICAgICAgICAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldExvY2FsUGF0aChDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aCwgaW5kaXJlY3Rpb25TdGVwTnVtLCAkKFwiaHRtbFwiLCBjb250ZW50RG9jdW1lbnQpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIFRPRE86IGRldGVjdCB3aGF0IGtpbmQgb2YgdGVybWludXM7IGZvciBub3csIHRleHQgbm9kZSB0ZXJtaW5pIGFyZSB0aGUgb25seSBraW5kIGltcGxlbWVudGVkXG4gICAgICAgICRjdXJyRWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0VGV4dFRlcm1pbnVzTm9kZShDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aC50ZXJtU3RlcCwgJGN1cnJFbGVtZW50LCBlbGVtZW50VG9JbmplY3QpO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgZWxlbWVudCB0aGF0IHdhcyBpbmplY3RlZCBpbnRvXG4gICAgICAgIHJldHVybiAkY3VyckVsZW1lbnQ7XG4gICAgfSxcblxuICAgIC8vIERlc2NyaXB0aW9uOiBJbmplY3QgYW4gYXJiaXRyYXJ5IGh0bWwgZWxlbWVudCBpbnRvIGEgcG9zaXRpb24gaW4gYSBjb250ZW50IGRvY3VtZW50IHJlZmVyZW5jZWQgYnkgYSBDRklcbiAgICBpbmplY3RSYW5nZUVsZW1lbnRzIDogZnVuY3Rpb24gKHJhbmdlQ0ZJLCBjb250ZW50RG9jdW1lbnQsIHN0YXJ0RWxlbWVudFRvSW5qZWN0LCBlbmRFbGVtZW50VG9JbmplY3QsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciBkZWNvZGVkQ0ZJID0gZGVjb2RlVVJJKHJhbmdlQ0ZJKTtcbiAgICAgICAgdmFyIENGSUFTVCA9IFBhcnNlci5wYXJzZShkZWNvZGVkQ0ZJKTtcbiAgICAgICAgdmFyIGluZGlyZWN0aW9uTm9kZTtcbiAgICAgICAgdmFyIGluZGlyZWN0aW9uU3RlcE51bTtcbiAgICAgICAgdmFyICRjdXJyRWxlbWVudDtcbiAgICAgICAgdmFyICRyYW5nZTFUYXJnZXRFbGVtZW50O1xuICAgICAgICB2YXIgJHJhbmdlMlRhcmdldEVsZW1lbnQ7XG5cbiAgICAgICAgLy8gUmF0aW9uYWxlOiBTaW5jZSB0aGUgY29ycmVjdCBjb250ZW50IGRvY3VtZW50IGZvciB0aGlzIENGSSBpcyBhbHJlYWR5IGJlaW5nIHBhc3NlZCwgd2UgY2FuIHNraXAgdG8gdGhlIGJlZ2lubmluZyBcbiAgICAgICAgLy8gICBvZiB0aGUgaW5kaXJlY3Rpb24gc3RlcCB0aGF0IHJlZmVyZW5jZWQgdGhlIGNvbnRlbnQgZG9jdW1lbnQuXG4gICAgICAgIC8vIE5vdGU6IFRoaXMgYXNzdW1lcyB0aGF0IGluZGlyZWN0aW9uIHN0ZXBzIGFuZCBpbmRleCBzdGVwcyBjb25mb3JtIHRvIGFuIGludGVyZmFjZTogYW4gb2JqZWN0IHdpdGggc3RlcExlbmd0aCwgaWRBc3NlcnRpb25cbiAgICAgICAgaW5kaXJlY3Rpb25TdGVwTnVtID0gdGhpcy5nZXRGaXJzdEluZGlyZWN0aW9uU3RlcE51bShDRklBU1QpO1xuICAgICAgICBpbmRpcmVjdGlvbk5vZGUgPSBDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aC5zdGVwc1tpbmRpcmVjdGlvblN0ZXBOdW1dO1xuICAgICAgICBpbmRpcmVjdGlvbk5vZGUudHlwZSA9IFwiaW5kZXhTdGVwXCI7XG5cbiAgICAgICAgLy8gSW50ZXJwcmV0IHRoZSByZXN0IG9mIHRoZSBzdGVwcyBpbiB0aGUgZmlyc3QgbG9jYWwgcGF0aFxuICAgICAgICAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldExvY2FsUGF0aChDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aCwgaW5kaXJlY3Rpb25TdGVwTnVtLCAkKFwiaHRtbFwiLCBjb250ZW50RG9jdW1lbnQpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgZmlyc3QgcmFuZ2UgbG9jYWxfcGF0aFxuICAgICAgICAkcmFuZ2UxVGFyZ2V0RWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0TG9jYWxQYXRoKENGSUFTVC5jZmlTdHJpbmcucmFuZ2UxLCAwLCAkY3VyckVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgICAgICRyYW5nZTFUYXJnZXRFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRUZXh0VGVybWludXNOb2RlKENGSUFTVC5jZmlTdHJpbmcucmFuZ2UxLnRlcm1TdGVwLCAkcmFuZ2UxVGFyZ2V0RWxlbWVudCwgc3RhcnRFbGVtZW50VG9JbmplY3QpO1xuXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgc2Vjb25kIHJhbmdlIGxvY2FsX3BhdGhcbiAgICAgICAgJHJhbmdlMlRhcmdldEVsZW1lbnQgPSB0aGlzLmludGVycHJldExvY2FsUGF0aChDRklBU1QuY2ZpU3RyaW5nLnJhbmdlMiwgMCwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgICAkcmFuZ2UyVGFyZ2V0RWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0VGV4dFRlcm1pbnVzTm9kZShDRklBU1QuY2ZpU3RyaW5nLnJhbmdlMi50ZXJtU3RlcCwgJHJhbmdlMlRhcmdldEVsZW1lbnQsIGVuZEVsZW1lbnRUb0luamVjdCk7XG5cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBlbGVtZW50IHRoYXQgd2FzIGluamVjdGVkIGludG9cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0RWxlbWVudCA6ICRyYW5nZTFUYXJnZXRFbGVtZW50WzBdLFxuICAgICAgICAgICAgZW5kRWxlbWVudCA6ICRyYW5nZTJUYXJnZXRFbGVtZW50WzBdXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8vIERlc2NyaXB0aW9uOiBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiB0aGUgZWxlbWVudCBvciBub2RlIChzYXksIGEgdGV4dCBub2RlKSB0aGF0IGlzIHRoZSBmaW5hbCB0YXJnZXQgb2YgdGhlIFxuICAgIC8vICAgdGhlIENGSS5cbiAgICBnZXRUYXJnZXRFbGVtZW50IDogZnVuY3Rpb24gKENGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgZGVjb2RlZENGSSA9IGRlY29kZVVSSShDRkkpO1xuICAgICAgICB2YXIgQ0ZJQVNUID0gUGFyc2VyLnBhcnNlKGRlY29kZWRDRkkpO1xuICAgICAgICB2YXIgaW5kaXJlY3Rpb25Ob2RlO1xuICAgICAgICB2YXIgaW5kaXJlY3Rpb25TdGVwTnVtO1xuICAgICAgICB2YXIgJGN1cnJFbGVtZW50O1xuICAgICAgICBcbiAgICAgICAgLy8gUmF0aW9uYWxlOiBTaW5jZSB0aGUgY29ycmVjdCBjb250ZW50IGRvY3VtZW50IGZvciB0aGlzIENGSSBpcyBhbHJlYWR5IGJlaW5nIHBhc3NlZCwgd2UgY2FuIHNraXAgdG8gdGhlIGJlZ2lubmluZyBcbiAgICAgICAgLy8gICBvZiB0aGUgaW5kaXJlY3Rpb24gc3RlcCB0aGF0IHJlZmVyZW5jZWQgdGhlIGNvbnRlbnQgZG9jdW1lbnQuXG4gICAgICAgIC8vIE5vdGU6IFRoaXMgYXNzdW1lcyB0aGF0IGluZGlyZWN0aW9uIHN0ZXBzIGFuZCBpbmRleCBzdGVwcyBjb25mb3JtIHRvIGFuIGludGVyZmFjZTogYW4gb2JqZWN0IHdpdGggc3RlcExlbmd0aCwgaWRBc3NlcnRpb25cbiAgICAgICAgaW5kaXJlY3Rpb25TdGVwTnVtID0gdGhpcy5nZXRGaXJzdEluZGlyZWN0aW9uU3RlcE51bShDRklBU1QpO1xuICAgICAgICBpbmRpcmVjdGlvbk5vZGUgPSBDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aC5zdGVwc1tpbmRpcmVjdGlvblN0ZXBOdW1dO1xuICAgICAgICBpbmRpcmVjdGlvbk5vZGUudHlwZSA9IFwiaW5kZXhTdGVwXCI7XG5cbiAgICAgICAgLy8gSW50ZXJwcmV0IHRoZSByZXN0IG9mIHRoZSBzdGVwc1xuICAgICAgICAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldExvY2FsUGF0aChDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aCwgaW5kaXJlY3Rpb25TdGVwTnVtLCAkKFwiaHRtbFwiLCBjb250ZW50RG9jdW1lbnQpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBDRklcbiAgICAgICAgcmV0dXJuICRjdXJyRWxlbWVudDtcbiAgICB9LFxuXG4gICAgZ2V0UmFuZ2VUYXJnZXRFbGVtZW50cyA6IGZ1bmN0aW9uIChyYW5nZUNGSSwgY29udGVudERvY3VtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICB2YXIgZGVjb2RlZENGSSA9IGRlY29kZVVSSShyYW5nZUNGSSk7XG4gICAgICAgIHZhciBDRklBU1QgPSBQYXJzZXIucGFyc2UoZGVjb2RlZENGSSk7XG4gICAgICAgIHZhciBpbmRpcmVjdGlvbk5vZGU7XG4gICAgICAgIHZhciBpbmRpcmVjdGlvblN0ZXBOdW07XG4gICAgICAgIHZhciAkY3VyckVsZW1lbnQ7XG4gICAgICAgIHZhciAkcmFuZ2UxVGFyZ2V0RWxlbWVudDtcbiAgICAgICAgdmFyICRyYW5nZTJUYXJnZXRFbGVtZW50O1xuICAgICAgICBcbiAgICAgICAgLy8gUmF0aW9uYWxlOiBTaW5jZSB0aGUgY29ycmVjdCBjb250ZW50IGRvY3VtZW50IGZvciB0aGlzIENGSSBpcyBhbHJlYWR5IGJlaW5nIHBhc3NlZCwgd2UgY2FuIHNraXAgdG8gdGhlIGJlZ2lubmluZyBcbiAgICAgICAgLy8gICBvZiB0aGUgaW5kaXJlY3Rpb24gc3RlcCB0aGF0IHJlZmVyZW5jZWQgdGhlIGNvbnRlbnQgZG9jdW1lbnQuXG4gICAgICAgIC8vIE5vdGU6IFRoaXMgYXNzdW1lcyB0aGF0IGluZGlyZWN0aW9uIHN0ZXBzIGFuZCBpbmRleCBzdGVwcyBjb25mb3JtIHRvIGFuIGludGVyZmFjZTogYW4gb2JqZWN0IHdpdGggc3RlcExlbmd0aCwgaWRBc3NlcnRpb25cbiAgICAgICAgaW5kaXJlY3Rpb25TdGVwTnVtID0gdGhpcy5nZXRGaXJzdEluZGlyZWN0aW9uU3RlcE51bShDRklBU1QpO1xuICAgICAgICBpbmRpcmVjdGlvbk5vZGUgPSBDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aC5zdGVwc1tpbmRpcmVjdGlvblN0ZXBOdW1dO1xuICAgICAgICBpbmRpcmVjdGlvbk5vZGUudHlwZSA9IFwiaW5kZXhTdGVwXCI7XG5cbiAgICAgICAgLy8gSW50ZXJwcmV0IHRoZSByZXN0IG9mIHRoZSBzdGVwc1xuICAgICAgICAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldExvY2FsUGF0aChDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aCwgaW5kaXJlY3Rpb25TdGVwTnVtLCAkKFwiaHRtbFwiLCBjb250ZW50RG9jdW1lbnQpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIEludGVycHJldCBmaXJzdCByYW5nZSBsb2NhbF9wYXRoXG4gICAgICAgICRyYW5nZTFUYXJnZXRFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRMb2NhbFBhdGgoQ0ZJQVNULmNmaVN0cmluZy5yYW5nZTEsIDAsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBJbnRlcnByZXQgc2Vjb25kIHJhbmdlIGxvY2FsX3BhdGhcbiAgICAgICAgJHJhbmdlMlRhcmdldEVsZW1lbnQgPSB0aGlzLmludGVycHJldExvY2FsUGF0aChDRklBU1QuY2ZpU3RyaW5nLnJhbmdlMiwgMCwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBDRklcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0RWxlbWVudCA6ICRyYW5nZTFUYXJnZXRFbGVtZW50WzBdLFxuICAgICAgICAgICAgZW5kRWxlbWVudCA6ICRyYW5nZTJUYXJnZXRFbGVtZW50WzBdXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8vIERlc2NyaXB0aW9uOiBUaGlzIG1ldGhvZCBhbGxvd3MgYSBcInBhcnRpYWxcIiBDRkkgdG8gYmUgdXNlZCB0byByZWZlcmVuY2UgYSB0YXJnZXQgaW4gYSBjb250ZW50IGRvY3VtZW50LCB3aXRob3V0IGEgXG4gICAgLy8gICBwYWNrYWdlIGRvY3VtZW50IENGSSBjb21wb25lbnQuIFxuICAgIC8vIEFyZ3VtZW50czoge1xuICAgIC8vICAgICBjb250ZW50RG9jdW1lbnRDRkkgOiBUaGlzIGlzIGEgcGFydGlhbCBDRkkgdGhhdCByZXByZXNlbnRzIGEgcGF0aCBpbiBhIGNvbnRlbnQgZG9jdW1lbnQgb25seS4gVGhpcyBwYXJ0aWFsIG11c3QgYmUgXG4gICAgLy8gICAgICAgIHN5bnRhY3RpY2FsbHkgdmFsaWQsIGV2ZW4gdGhvdWdoIGl0IHJlZmVyZW5jZXMgYSBwYXRoIHN0YXJ0aW5nIGF0IHRoZSB0b3Agb2YgYSBjb250ZW50IGRvY3VtZW50ICh3aGljaCBpcyBhIENGSSB0aGF0XG4gICAgLy8gICAgICAgIHRoYXQgaGFzIG5vIGRlZmluZWQgbWVhbmluZyBpbiB0aGUgc3BlYy4pXG4gICAgLy8gICAgIGNvbnRlbnREb2N1bWVudCA6IEEgRE9NIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb250ZW50IGRvY3VtZW50IHRvIHdoaWNoIHRoZSBwYXJ0aWFsIENGSSByZWZlcnMuIFxuICAgIC8vIH1cbiAgICAvLyBSYXRpb25hbGU6IFRoaXMgbWV0aG9kIGV4aXN0cyB0byBtZWV0IHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIFJlYWRpdW0tU0RLIGFuZCBzaG91bGQgYmUgdXNlZCB3aXRoIGNhcmVcbiAgICBnZXRUYXJnZXRFbGVtZW50V2l0aFBhcnRpYWxDRkkgOiBmdW5jdGlvbiAoY29udGVudERvY3VtZW50Q0ZJLCBjb250ZW50RG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciBkZWNvZGVkQ0ZJID0gZGVjb2RlVVJJKGNvbnRlbnREb2N1bWVudENGSSk7XG4gICAgICAgIHZhciBDRklBU1QgPSBQYXJzZXIucGFyc2UoZGVjb2RlZENGSSk7XG4gICAgICAgIHZhciBpbmRpcmVjdGlvbk5vZGU7XG4gICAgICAgIFxuICAgICAgICAvLyBJbnRlcnByZXQgdGhlIHBhdGggbm9kZSBcbiAgICAgICAgdmFyICRjdXJyRWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0SW5kZXhTdGVwTm9kZShDRklBU1QuY2ZpU3RyaW5nLnBhdGgsICQoXCJodG1sXCIsIGNvbnRlbnREb2N1bWVudCksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG5cbiAgICAgICAgLy8gSW50ZXJwcmV0IHRoZSByZXN0IG9mIHRoZSBzdGVwc1xuICAgICAgICAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldExvY2FsUGF0aChDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aCwgMCwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBDRklcbiAgICAgICAgcmV0dXJuICRjdXJyRWxlbWVudDsgICAgICAgIFxuICAgIH0sXG5cbiAgICAvLyBEZXNjcmlwdGlvbjogVGhpcyBtZXRob2QgYWxsb3dzIGEgXCJwYXJ0aWFsXCIgQ0ZJIHRvIGJlIHVzZWQsIHdpdGggYSBjb250ZW50IGRvY3VtZW50LCB0byByZXR1cm4gdGhlIHRleHQgbm9kZSBhbmQgb2Zmc2V0IFxuICAgIC8vICAgIHJlZmVyZW5jZWQgYnkgdGhlIHBhcnRpYWwgQ0ZJLlxuICAgIC8vIEFyZ3VtZW50czoge1xuICAgIC8vICAgICBjb250ZW50RG9jdW1lbnRDRkkgOiBUaGlzIGlzIGEgcGFydGlhbCBDRkkgdGhhdCByZXByZXNlbnRzIGEgcGF0aCBpbiBhIGNvbnRlbnQgZG9jdW1lbnQgb25seS4gVGhpcyBwYXJ0aWFsIG11c3QgYmUgXG4gICAgLy8gICAgICAgIHN5bnRhY3RpY2FsbHkgdmFsaWQsIGV2ZW4gdGhvdWdoIGl0IHJlZmVyZW5jZXMgYSBwYXRoIHN0YXJ0aW5nIGF0IHRoZSB0b3Agb2YgYSBjb250ZW50IGRvY3VtZW50ICh3aGljaCBpcyBhIENGSSB0aGF0XG4gICAgLy8gICAgICAgIHRoYXQgaGFzIG5vIGRlZmluZWQgbWVhbmluZyBpbiB0aGUgc3BlYy4pXG4gICAgLy8gICAgIGNvbnRlbnREb2N1bWVudCA6IEEgRE9NIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb250ZW50IGRvY3VtZW50IHRvIHdoaWNoIHRoZSBwYXJ0aWFsIENGSSByZWZlcnMuIFxuICAgIC8vIH1cbiAgICAvLyBSYXRpb25hbGU6IFRoaXMgbWV0aG9kIGV4aXN0cyB0byBtZWV0IHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIFJlYWRpdW0tU0RLIGFuZCBzaG91bGQgYmUgdXNlZCB3aXRoIGNhcmVcbiAgICBnZXRUZXh0VGVybWludXNJbmZvV2l0aFBhcnRpYWxDRkkgOiBmdW5jdGlvbiAoY29udGVudERvY3VtZW50Q0ZJLCBjb250ZW50RG9jdW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciBkZWNvZGVkQ0ZJID0gZGVjb2RlVVJJKGNvbnRlbnREb2N1bWVudENGSSk7XG4gICAgICAgIHZhciBDRklBU1QgPSBQYXJzZXIucGFyc2UoZGVjb2RlZENGSSk7XG4gICAgICAgIHZhciBpbmRpcmVjdGlvbk5vZGU7XG4gICAgICAgIHZhciB0ZXh0T2Zmc2V0O1xuICAgICAgICBcbiAgICAgICAgLy8gSW50ZXJwcmV0IHRoZSBwYXRoIG5vZGUgXG4gICAgICAgIHZhciAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldEluZGV4U3RlcE5vZGUoQ0ZJQVNULmNmaVN0cmluZy5wYXRoLCAkKFwiaHRtbFwiLCBjb250ZW50RG9jdW1lbnQpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgcmVzdCBvZiB0aGUgc3RlcHNcbiAgICAgICAgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRMb2NhbFBhdGgoQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGgsIDAsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBSZXR1cm4gdGhlIGVsZW1lbnQgYXQgdGhlIGVuZCBvZiB0aGUgQ0ZJXG4gICAgICAgIHRleHRPZmZzZXQgPSBwYXJzZUludChDRklBU1QuY2ZpU3RyaW5nLmxvY2FsUGF0aC50ZXJtU3RlcC5vZmZzZXRWYWx1ZSk7XG4gICAgICAgIHJldHVybiB7IHRleHROb2RlIDogJGN1cnJFbGVtZW50LFxuICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0IDogdGV4dE9mZnNldFxuICAgICAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4gICAgLy8gIFwiUFJJVkFURVwiIEhFTFBFUlMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAgIGdldEZpcnN0SW5kaXJlY3Rpb25TdGVwTnVtIDogZnVuY3Rpb24gKENGSUFTVCkge1xuXG4gICAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IGluZGlyZWN0aW9uIHN0ZXAgaW4gdGhlIGxvY2FsIHBhdGg7IGZvbGxvdyBpdCBsaWtlIGEgcmVndWxhciBzdGVwLCBhcyB0aGUgc3RlcCBpbiB0aGUgY29udGVudCBkb2N1bWVudCBpdCBcbiAgICAgICAgLy8gICByZWZlcmVuY2VzIGlzIGFscmVhZHkgbG9hZGVkIGFuZCBoYXMgYmVlbiBwYXNzZWQgdG8gdGhpcyBtZXRob2RcbiAgICAgICAgdmFyIHN0ZXBOdW0gPSAwO1xuICAgICAgICBmb3IgKHN0ZXBOdW07IHN0ZXBOdW0gPD0gQ0ZJQVNULmNmaVN0cmluZy5sb2NhbFBhdGguc3RlcHMubGVuZ3RoIC0gMSA7IHN0ZXBOdW0rKykge1xuICAgICAgICBcbiAgICAgICAgICAgIG5leHRTdGVwTm9kZSA9IENGSUFTVC5jZmlTdHJpbmcubG9jYWxQYXRoLnN0ZXBzW3N0ZXBOdW1dO1xuICAgICAgICAgICAgaWYgKG5leHRTdGVwTm9kZS50eXBlID09PSBcImluZGlyZWN0aW9uU3RlcFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ZXBOdW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gUkVGQUNUT1JJTkcgQ0FORElEQVRFOiBjZmlTdHJpbmcgbm9kZSBhbmQgc3RhcnQgc3RlcCBudW0gY291bGQgYmUgbWVyZ2VkIGludG8gb25lIGFyZ3VtZW50LCBieSBzaW1wbHkgcGFzc2luZyB0aGUgXG4gICAgLy8gICBzdGFydGluZyBzdGVwLi4uIHByb2JhYmx5IGEgZ29vZCBpZGVhLCB0aGlzIHdvdWxkIG1ha2UgdGhlIG1lYW5pbmcgb2YgdGhpcyBtZXRob2QgY2xlYXJlci5cbiAgICBpbnRlcnByZXRMb2NhbFBhdGggOiBmdW5jdGlvbiAobG9jYWxQYXRoTm9kZSwgc3RhcnRTdGVwTnVtLCAkY3VyckVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIHZhciBzdGVwTnVtID0gc3RhcnRTdGVwTnVtO1xuICAgICAgICB2YXIgbmV4dFN0ZXBOb2RlO1xuICAgICAgICBmb3IgKHN0ZXBOdW07IHN0ZXBOdW0gPD0gbG9jYWxQYXRoTm9kZS5zdGVwcy5sZW5ndGggLSAxIDsgc3RlcE51bSsrKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgbmV4dFN0ZXBOb2RlID0gbG9jYWxQYXRoTm9kZS5zdGVwc1tzdGVwTnVtXTtcbiAgICAgICAgICAgIGlmIChuZXh0U3RlcE5vZGUudHlwZSA9PT0gXCJpbmRleFN0ZXBcIikge1xuXG4gICAgICAgICAgICAgICAgJGN1cnJFbGVtZW50ID0gdGhpcy5pbnRlcnByZXRJbmRleFN0ZXBOb2RlKG5leHRTdGVwTm9kZSwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV4dFN0ZXBOb2RlLnR5cGUgPT09IFwiaW5kaXJlY3Rpb25TdGVwXCIpIHtcblxuICAgICAgICAgICAgICAgICRjdXJyRWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0SW5kaXJlY3Rpb25TdGVwTm9kZShuZXh0U3RlcE5vZGUsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAkY3VyckVsZW1lbnQ7XG4gICAgfSxcblxuICAgIGludGVycHJldEluZGV4U3RlcE5vZGUgOiBmdW5jdGlvbiAoaW5kZXhTdGVwTm9kZSwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgICAgICAvLyBDaGVjayBub2RlIHR5cGU7IHRocm93IGVycm9yIGlmIHdyb25nIHR5cGVcbiAgICAgICAgaWYgKGluZGV4U3RlcE5vZGUgPT09IHVuZGVmaW5lZCB8fCBpbmRleFN0ZXBOb2RlLnR5cGUgIT09IFwiaW5kZXhTdGVwXCIpIHtcblxuICAgICAgICAgICAgdGhyb3cgTm9kZVR5cGVFcnJvcihpbmRleFN0ZXBOb2RlLCBcImV4cGVjdGVkIGluZGV4IHN0ZXAgbm9kZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluZGV4IHN0ZXBcbiAgICAgICAgdmFyICRzdGVwVGFyZ2V0ID0gSW5zdHJ1Y3Rpb25zLmdldE5leHROb2RlKGluZGV4U3RlcE5vZGUuc3RlcExlbmd0aCwgJGN1cnJFbGVtZW50LCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuXG4gICAgICAgIC8vIENoZWNrIHRoZSBpZCBhc3NlcnRpb24sIGlmIGl0IGV4aXN0c1xuICAgICAgICBpZiAoaW5kZXhTdGVwTm9kZS5pZEFzc2VydGlvbikge1xuXG4gICAgICAgICAgICBpZiAoIUluc3RydWN0aW9ucy50YXJnZXRJZE1hdGNoZXNJZEFzc2VydGlvbigkc3RlcFRhcmdldCwgaW5kZXhTdGVwTm9kZS5pZEFzc2VydGlvbikpIHtcblxuICAgICAgICAgICAgICAgIHRocm93IENGSUFzc2VydGlvbkVycm9yKGluZGV4U3RlcE5vZGUuaWRBc3NlcnRpb24sICRzdGVwVGFyZ2V0LmF0dHIoJ2lkJyksIFwiSWQgYXNzZXJ0aW9uIGZhaWxlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAkc3RlcFRhcmdldDtcbiAgICB9LFxuXG4gICAgaW50ZXJwcmV0SW5kaXJlY3Rpb25TdGVwTm9kZSA6IGZ1bmN0aW9uIChpbmRpcmVjdGlvblN0ZXBOb2RlLCAkY3VyckVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIC8vIENoZWNrIG5vZGUgdHlwZTsgdGhyb3cgZXJyb3IgaWYgd3JvbmcgdHlwZVxuICAgICAgICBpZiAoaW5kaXJlY3Rpb25TdGVwTm9kZSA9PT0gdW5kZWZpbmVkIHx8IGluZGlyZWN0aW9uU3RlcE5vZGUudHlwZSAhPT0gXCJpbmRpcmVjdGlvblN0ZXBcIikge1xuXG4gICAgICAgICAgICB0aHJvdyBOb2RlVHlwZUVycm9yKGluZGlyZWN0aW9uU3RlcE5vZGUsIFwiZXhwZWN0ZWQgaW5kaXJlY3Rpb24gc3RlcCBub2RlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5kaXJlY3Rpb24gc3RlcFxuICAgICAgICB2YXIgJHN0ZXBUYXJnZXQgPSBJbnN0cnVjdGlvbnMuZm9sbG93SW5kaXJlY3Rpb25TdGVwKFxuICAgICAgICAgICAgaW5kaXJlY3Rpb25TdGVwTm9kZS5zdGVwTGVuZ3RoLCBcbiAgICAgICAgICAgICRjdXJyRWxlbWVudCwgXG4gICAgICAgICAgICBjbGFzc0JsYWNrbGlzdCwgXG4gICAgICAgICAgICBlbGVtZW50QmxhY2tsaXN0KTtcblxuICAgICAgICAvLyBDaGVjayB0aGUgaWQgYXNzZXJ0aW9uLCBpZiBpdCBleGlzdHNcbiAgICAgICAgaWYgKGluZGlyZWN0aW9uU3RlcE5vZGUuaWRBc3NlcnRpb24pIHtcblxuICAgICAgICAgICAgaWYgKCFJbnN0cnVjdGlvbnMudGFyZ2V0SWRNYXRjaGVzSWRBc3NlcnRpb24oJHN0ZXBUYXJnZXQsIGluZGlyZWN0aW9uU3RlcE5vZGUuaWRBc3NlcnRpb24pKSB7XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBDRklBc3NlcnRpb25FcnJvcihpbmRpcmVjdGlvblN0ZXBOb2RlLmlkQXNzZXJ0aW9uLCAkc3RlcFRhcmdldC5hdHRyKCdpZCcpLCBcIklkIGFzc2VydGlvbiBmYWlsZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJHN0ZXBUYXJnZXQ7XG4gICAgfSxcblxuICAgIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogVGhlIGxvZ2ljIGhlcmUgYXNzdW1lcyB0aGF0IGEgdXNlciB3aWxsIGFsd2F5cyB3YW50IHRvIHVzZSB0aGlzIHRlcm1pbnVzXG4gICAgLy8gICB0byBpbmplY3QgY29udGVudCBpbnRvIHRoZSBmb3VuZCBub2RlLiBUaGlzIHdpbGwgbm90IGFsd2F5cyBiZSB0aGUgY2FzZSwgYW5kIGRpZmZlcmVudCB0eXBlcyBvZiBpbnRlcnByZXRhdGlvblxuICAgIC8vICAgYXJlIHByb2JhYmx5IGRlc2lyZWQuIFxuICAgIGludGVycHJldFRleHRUZXJtaW51c05vZGUgOiBmdW5jdGlvbiAodGVybWludXNOb2RlLCAkY3VyckVsZW1lbnQsIGVsZW1lbnRUb0luamVjdCkge1xuXG4gICAgICAgIGlmICh0ZXJtaW51c05vZGUgPT09IHVuZGVmaW5lZCB8fCB0ZXJtaW51c05vZGUudHlwZSAhPT0gXCJ0ZXh0VGVybWludXNcIikge1xuXG4gICAgICAgICAgICB0aHJvdyBOb2RlVHlwZUVycm9yKHRlcm1pbnVzTm9kZSwgXCJleHBlY3RlZCB0ZXh0IHRlcm1pbnVzIG5vZGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgJGluamVjdGVkRWxlbWVudCA9IEluc3RydWN0aW9ucy50ZXh0VGVybWluYXRpb24oXG4gICAgICAgICAgICAkY3VyckVsZW1lbnQsIFxuICAgICAgICAgICAgdGVybWludXNOb2RlLm9mZnNldFZhbHVlLCBcbiAgICAgICAgICAgIGVsZW1lbnRUb0luamVjdFxuICAgICAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gJGluamVjdGVkRWxlbWVudDtcbiAgICB9LFxuXG4gICAgc2VhcmNoTG9jYWxQYXRoRm9ySHJlZiA6IGZ1bmN0aW9uICgkY3VyckVsZW1lbnQsICRwYWNrYWdlRG9jdW1lbnQsIGxvY2FsUGF0aE5vZGUsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgICAgIC8vIEludGVycHJldCB0aGUgZmlyc3QgbG9jYWxfcGF0aCBub2RlLCB3aGljaCBpcyBhIHNldCBvZiBzdGVwcyBhbmQgYW5kIGEgdGVybWludXMgY29uZGl0aW9uXG4gICAgICAgIHZhciBzdGVwTnVtID0gMDtcbiAgICAgICAgdmFyIG5leHRTdGVwTm9kZTtcbiAgICAgICAgZm9yIChzdGVwTnVtID0gMCA7IHN0ZXBOdW0gPD0gbG9jYWxQYXRoTm9kZS5zdGVwcy5sZW5ndGggLSAxIDsgc3RlcE51bSsrKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgbmV4dFN0ZXBOb2RlID0gbG9jYWxQYXRoTm9kZS5zdGVwc1tzdGVwTnVtXTtcbiAgICAgICAgICAgIGlmIChuZXh0U3RlcE5vZGUudHlwZSA9PT0gXCJpbmRleFN0ZXBcIikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICRjdXJyRWxlbWVudCA9IHRoaXMuaW50ZXJwcmV0SW5kZXhTdGVwTm9kZShuZXh0U3RlcE5vZGUsICRjdXJyRWxlbWVudCwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5leHRTdGVwTm9kZS50eXBlID09PSBcImluZGlyZWN0aW9uU3RlcFwiKSB7XG5cbiAgICAgICAgICAgICAgICAkY3VyckVsZW1lbnQgPSB0aGlzLmludGVycHJldEluZGlyZWN0aW9uU3RlcE5vZGUobmV4dFN0ZXBOb2RlLCAkY3VyckVsZW1lbnQsIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvdW5kIHRoZSBjb250ZW50IGRvY3VtZW50IGhyZWYgcmVmZXJlbmNlZCBieSB0aGUgc3BpbmUgaXRlbSBcbiAgICAgICAgICAgIGlmICgkY3VyckVsZW1lbnQuaXMoXCJpdGVtcmVmXCIpKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gSW5zdHJ1Y3Rpb25zLnJldHJpZXZlSXRlbVJlZkhyZWYoJGN1cnJFbGVtZW50LCAkcGFja2FnZURvY3VtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcnByZXRlclxuIiwiLy8gVGhpbiB3cmFwcGVyIGFyb3VuZCB0aGUgcGFyc2VyJ3MgZ2VuZXJhdGVkIGZpbGVcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vcGFyc2VyL2VwdWItY2ZpLmpzJylcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2Mi4xLjNcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE0LTEyLTE4VDE1OjExWlxuICovXG5cbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXG4vLyBDYW4ndCBiZSBpbiBzdHJpY3QgbW9kZSwgc2V2ZXJhbCBsaWJzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcbi8vXG5cbnZhciBhcnIgPSBbXTtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG52YXJcblx0Ly8gVXNlIHRoZSBjb3JyZWN0IGRvY3VtZW50IGFjY29yZGluZ2x5IHdpdGggd2luZG93IGFyZ3VtZW50IChzYW5kYm94KVxuXHRkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcblxuXHR2ZXJzaW9uID0gXCIyLjEuM1wiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxuXHRzZWxlY3RvcjogXCJcIixcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cblxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdC8vIChZb3UgY2FuIHNlZWQgdGhlIGFyZ3VtZW50cyB3aXRoIGFuIGFycmF5IG9mIGFyZ3MsIGJ1dCB0aGlzIGlzXG5cdC8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5Lilcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0pKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzW2pdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKG51bGwpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoIChvcHRpb25zID0gYXJndW1lbnRzWyBpIF0pICE9IG51bGwgKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheShjb3B5KSkgKSApIHtcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAob2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKyAxKSA+PSAwO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XG5cdFx0Ly8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxuXHRcdC8vIC0gRE9NIG5vZGVzXG5cdFx0Ly8gLSB3aW5kb3dcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlIGZ1bmN0aW9uIGhhc24ndCByZXR1cm5lZCBhbHJlYWR5LCB3ZSdyZSBjb25maWRlbnQgdGhhdFxuXHRcdC8vIHxvYmp8IGlzIGEgcGxhaW4gb2JqZWN0LCBjcmVhdGVkIGJ5IHt9IG9yIGNvbnN0cnVjdGVkIHdpdGggbmV3IE9iamVjdFxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdHZhciBzY3JpcHQsXG5cdFx0XHRpbmRpcmVjdCA9IGV2YWw7XG5cblx0XHRjb2RlID0galF1ZXJ5LnRyaW0oIGNvZGUgKTtcblxuXHRcdGlmICggY29kZSApIHtcblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxuXHRcdFx0Ly8gc2NyaXB0IHRhZyBpbnRvIHRoZSBkb2N1bWVudC5cblx0XHRcdGlmICggY29kZS5pbmRleE9mKFwidXNlIHN0cmljdFwiKSA9PT0gMSApIHtcblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcblx0XHRcdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBPdGhlcndpc2UsIGF2b2lkIHRoZSBET00gbm9kZSBjcmVhdGlvbiwgaW5zZXJ0aW9uXG5cdFx0XHQvLyBhbmQgcmVtb3ZhbCBieSB1c2luZyBhbiBpbmRpcmVjdCBnbG9iYWwgZXZhbFxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdC8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcblxuXHRcdGlmICggYXJncyApIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRpc0FycmF5ID0gaXNBcnJheWxpa2UoIGVsZW1zICksXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5ICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSk7XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlsaWtlKCBvYmogKSB7XG5cdHZhciBsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGggKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMi4wLXByZVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOCwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE0LTEyLTE2XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBHZW5lcmFsLXB1cnBvc2UgY29uc3RhbnRzXG5cdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIFdoaXRlc3BhY2UgY2hhcmFjdGVycyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXN5bnRheC8jY2hhcmFjdGVyc1xuXHRjaGFyYWN0ZXJFbmNvZGluZyA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gTG9vc2VseSBtb2RlbGVkIG9uIENTUyBpZGVudGlmaWVyIGNoYXJhY3RlcnNcblx0Ly8gQW4gdW5xdW90ZWQgdmFsdWUgc2hvdWxkIGJlIGEgQ1NTIGlkZW50aWZpZXIgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0Ly8gUHJvcGVyIHN5bnRheDogaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3I1wiICksXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidypcIiApICsgXCIpXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtYXRjaCwgZWxlbSwgbSwgbm9kZVR5cGUsXG5cdFx0Ly8gUVNBIHZhcnNcblx0XHRpLCBncm91cHMsIG9sZCwgbmlkLCBuZXdDb250ZXh0LCBuZXdTZWxlY3RvcjtcblxuXHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cdG5vZGVUeXBlID0gY29udGV4dC5ub2RlVHlwZTtcblxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdGlmICggIXNlZWQgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIHdoZW4gcG9zc2libGUgKGUuZy4sIG5vdCB1bmRlciBEb2N1bWVudEZyYWdtZW50KVxuXHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiI0lEXCIpXG5cdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICk7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcblx0XHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50IChqUXVlcnkgIzY5NjMpXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSwgT3BlcmEsIGFuZCBXZWJraXQgcmV0dXJuIGl0ZW1zXG5cdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gQ29udGV4dCBpcyBub3QgYSBkb2N1bWVudFxuXHRcdFx0XHRcdGlmICggY29udGV4dC5vd25lckRvY3VtZW50ICYmIChlbGVtID0gY29udGV4dC5vd25lckRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiVEFHXCIpXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIi5DTEFTU1wiKVxuXHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBRU0EgcGF0aFxuXHRcdGlmICggc3VwcG9ydC5xc2EgJiYgKCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblx0XHRcdG5pZCA9IG9sZCA9IGV4cGFuZG87XG5cdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdG5ld1NlbGVjdG9yID0gbm9kZVR5cGUgIT09IDEgJiYgc2VsZWN0b3I7XG5cblx0XHRcdC8vIHFTQSB3b3JrcyBzdHJhbmdlbHkgb24gRWxlbWVudC1yb290ZWQgcXVlcmllc1xuXHRcdFx0Ly8gV2UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgYnkgc3BlY2lmeWluZyBhbiBleHRyYSBJRCBvbiB0aGUgcm9vdFxuXHRcdFx0Ly8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpXG5cdFx0XHQvLyBJRSA4IGRvZXNuJ3Qgd29yayBvbiBvYmplY3QgZWxlbWVudHNcblx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiYgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblxuXHRcdFx0XHRpZiAoIChvbGQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZShcImlkXCIpKSApIHtcblx0XHRcdFx0XHRuaWQgPSBvbGQucmVwbGFjZSggcmVzY2FwZSwgXCJcXFxcJCZcIiApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIG5pZCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG5pZCA9IFwiW2lkPSdcIiArIG5pZCArIFwiJ10gXCI7XG5cblx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZCArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0O1xuXHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKFwiLFwiKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaChxc2FFcnJvcikge1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggIW9sZCApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbihzdHJpbmcsIE9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRkaXYgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGF0dHJzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHQoIH5iLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApIC1cblx0XHRcdCggfmEuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICk7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHBhcmVudCxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gSWYgbm8gZG9jdW1lbnQgYW5kIGRvY3VtZW50RWxlbWVudCBpcyBhdmFpbGFibGUsIHJldHVyblxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFNldCBvdXIgZG9jdW1lbnRcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRwYXJlbnQgPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0Ly8gU3VwcG9ydDogSUU+OFxuXHQvLyBJZiBpZnJhbWUgZG9jdW1lbnQgaXMgYXNzaWduZWQgdG8gXCJkb2N1bWVudFwiIHZhcmlhYmxlIGFuZCBpZiBpZnJhbWUgaGFzIGJlZW4gcmVsb2FkZWQsXG5cdC8vIElFIHdpbGwgdGhyb3cgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gYWNjZXNzaW5nIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSwgc2VlIGpRdWVyeSAjMTM5MzZcblx0Ly8gSUU2LTggZG8gbm90IHN1cHBvcnQgdGhlIGRlZmF1bHRWaWV3IHByb3BlcnR5IHNvIHBhcmVudCB3aWxsIGJlIHVuZGVmaW5lZFxuXHRpZiAoIHBhcmVudCAmJiBwYXJlbnQgIT09IHBhcmVudC50b3AgKSB7XG5cdFx0Ly8gSUUxMSBkb2VzIG5vdCBoYXZlIGF0dGFjaEV2ZW50LCBzbyBhbGwgbXVzdCBzdWZmZXJcblx0XHRpZiAoIHBhcmVudC5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0cGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0cGFyZW50LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBTdXBwb3J0IHRlc3RzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvYyApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvYy5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmluZCBhbmQgZmlsdGVyXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuXHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXG5cdFx0XHRcdHJldHVybiBtICYmIG0ucGFyZW50Tm9kZSA/IFsgbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU2Lzdcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xuXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvYy5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcZl0nIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjIrLCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuNytcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2MuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IGRvZXMgbm90IGltcGxlbWVudCBpbmNsdXNpdmUgZGVzY2VuZGVudFxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2MgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2MgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvYyA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jO1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBkaWZmLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8IChwYXJlbnRbIGV4cGFuZG8gXSA9IHt9KTtcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXRlckNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzFdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMl07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdXNlQ2FjaGUgJiYgKGNhY2hlID0gKGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdKSAmJiBjYWNoZVswXSA9PT0gZGlycnVucyApIHtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IGNhY2hlWzFdO1xuXG5cdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApICYmICsrZGlmZiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdChub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRcImRpc2FibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGRpciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gb3V0ZXJDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCAhPT0gZG9jdW1lbnQgJiYgY29udGV4dDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIEtlZXAgYGlgIGEgc3RyaW5nIGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBzbyBgbWF0Y2hlZENvdW50YCB3aWxsIGJlIFwiMDBcIiBiZWxvd1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgbm8gc2VlZCBhbmQgb25seSBvbmUgZ3JvdXBcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBUYWtlIGEgc2hvcnRjdXQgYW5kIHNldCB0aGUgY29udGV4dCBpZiB0aGUgcm9vdCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0XHRcdEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBkaXYxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0ZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0ZGl2LmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZGl2LmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0cmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xualF1ZXJ5LmV4cHJbXCI6XCJdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5cblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxudmFyIHJzaW5nbGVUYWcgPSAoL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9KTtcblxuXHR9XG5cblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0pO1xuXG5cdH1cblxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdFx0fVxuXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+PSAwICkgIT09IG5vdDtcblx0fSk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRyZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXSA6XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHRcdH0pKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pICk7XG5cdFx0fVxuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHQvLyBOZWVkZWQgYmVjYXVzZSAkKCBzZWxlY3RvciwgY29udGV4dCApIGJlY29tZXMgJCggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yIClcblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XG5cdFx0cmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59KTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbMF0gPT09IFwiPFwiICYmIHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmIHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKG1hdGNoWzFdIHx8ICFjb250ZXh0KSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsxXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbMF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsxXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsxXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQmxhY2tiZXJyeSA0LjZcblx0XHRcdFx0XHQvLyBnRUJJRCByZXR1cm5zIG5vZGVzIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKCM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdFx0dGhpc1swXSA9IGVsZW07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290alF1ZXJ5ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gdGhpc1swXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIHJvb3RqUXVlcnkucmVhZHkgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0XHRyb290alF1ZXJ5LnJlYWR5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0ZGlyOiBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fSxcblxuXHRzaWJsaW5nOiBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdFx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1tpXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHRwb3MgPSBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApIHx8IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRmb3IgKCBjdXIgPSB0aGlzW2ldOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKHBvcyA/XG5cdFx0XHRcdFx0cG9zLmluZGV4KGN1cikgPiAtMSA6XG5cblx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihjdXIsIHNlbGVjdG9ycykpICkge1xuXG5cdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlKFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoc2VsZWN0b3IpXG5cdFx0KTtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoIChjdXIgPSBjdXJbZGlyXSkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goe1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59KTtcbnZhciBybm90d2hpdGUgPSAoL1xcUysvZyk7XG5cblxuXG4vLyBTdHJpbmcgdG8gT2JqZWN0IG9wdGlvbnMgZm9ybWF0IGNhY2hlXG52YXIgb3B0aW9uc0NhY2hlID0ge307XG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzIGFuZCBzdG9yZSBpbiBjYWNoZVxuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9KTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHQoIG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdIHx8IGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBMYXN0IGZpcmUgdmFsdWUgKGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHMpXG5cdFx0bWVtb3J5LFxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblx0XHQvLyBGaXJzdCBjYWxsYmFjayB0byBmaXJlICh1c2VkIGludGVybmFsbHkgYnkgYWRkIGFuZCBmaXJlV2l0aClcblx0XHRmaXJpbmdTdGFydCxcblx0XHQvLyBFbmQgb2YgdGhlIGxvb3Agd2hlbiBmaXJpbmdcblx0XHRmaXJpbmdMZW5ndGgsXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgcmVtb3ZlIGlmIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCxcblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblx0XHQvLyBTdGFjayBvZiBmaXJlIGNhbGxzIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0c3RhY2sgPSAhb3B0aW9ucy5vbmNlICYmIFtdLFxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdFx0bWVtb3J5ID0gb3B0aW9ucy5tZW1vcnkgJiYgZGF0YTtcblx0XHRcdGZpcmVkID0gdHJ1ZTtcblx0XHRcdGZpcmluZ0luZGV4ID0gZmlyaW5nU3RhcnQgfHwgMDtcblx0XHRcdGZpcmluZ1N0YXJ0ID0gMDtcblx0XHRcdGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0ZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgbGlzdCAmJiBmaXJpbmdJbmRleCA8IGZpcmluZ0xlbmd0aDsgZmlyaW5nSW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBkYXRhWyAwIF0sIGRhdGFbIDEgXSApID09PSBmYWxzZSAmJiBvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlOyAvLyBUbyBwcmV2ZW50IGZ1cnRoZXIgY2FsbHMgdXNpbmcgYWRkXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRpZiAoIHN0YWNrICkge1xuXHRcdFx0XHRcdGlmICggc3RhY2subGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0ZmlyZSggc3RhY2suc2hpZnQoKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdC8vIEZpcnN0LCB3ZSBzYXZlIHRoZSBjdXJyZW50IGxlbmd0aFxuXHRcdFx0XHRcdHZhciBzdGFydCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdChmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggYXJnICk7XG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSkoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdC8vIERvIHdlIG5lZWQgdG8gYWRkIHRoZSBjYWxsYmFja3MgdG8gdGhlXG5cdFx0XHRcdFx0Ly8gY3VycmVudCBmaXJpbmcgYmF0Y2g/XG5cdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHQvLyBXaXRoIG1lbW9yeSwgaWYgd2UncmUgbm90IGZpcmluZyB0aGVuXG5cdFx0XHRcdFx0Ly8gd2Ugc2hvdWxkIGNhbGwgcmlnaHQgYXdheVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRcdGZpcmluZ1N0YXJ0ID0gc3RhcnQ7XG5cdFx0XHRcdFx0XHRmaXJlKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0xlbmd0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0xlbmd0aC0tO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID8galF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6ICEhKCBsaXN0ICYmIGxpc3QubGVuZ3RoICk7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdGZpcmluZ0xlbmd0aCA9IDA7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIEhhdmUgdGhlIGxpc3QgZG8gbm90aGluZyBhbnltb3JlXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGlzdCA9IHN0YWNrID0gbWVtb3J5ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBJcyBpdCBkaXNhYmxlZD9cblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblx0XHRcdC8vIExvY2sgdGhlIGxpc3QgaW4gaXRzIGN1cnJlbnQgc3RhdGVcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzdGFjayA9IHVuZGVmaW5lZDtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICkge1xuXHRcdFx0XHRcdHNlbGYuZGlzYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIElzIGl0IGxvY2tlZD9cblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhc3RhY2s7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoIGxpc3QgJiYgKCAhZmlyZWQgfHwgc3RhY2sgKSApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0c3RhY2sucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmaXJlKCBhcmdzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGxpc3RlbmVyIGxpc3QsIGZpbmFsIHN0YXRlXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVqZWN0ZWRcIiBdLFxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsxXSBdKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBwcm9taXNlID8gbmV3RGVmZXIucHJvbWlzZSgpIDogdGhpcywgZm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0pLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRwcm9taXNlLnBpcGUgPSBwcm9taXNlLnRoZW47XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyAzIF07XG5cblx0XHRcdC8vIHByb21pc2VbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsxXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0Ly8gc3RhdGUgPSBbIHJlc29sdmVkIHwgcmVqZWN0ZWQgXVxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cblx0XHRcdFx0Ly8gWyByZWplY3RfbGlzdCB8IHJlc29sdmVfbGlzdCBdLmRpc2FibGU7IHByb2dyZXNzX2xpc3QubG9ja1xuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBwcm9taXNlIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0pO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc3Vib3JkaW5hdGUgLyogLCAuLi4sIHN1Ym9yZGluYXRlTiAqLyApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCxcblxuXHRcdFx0Ly8gdGhlIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8ICggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZC4gSWYgcmVzb2x2ZVZhbHVlcyBjb25zaXN0IG9mIG9ubHkgYSBzaW5nbGUgRGVmZXJyZWQsIGp1c3QgdXNlIHRoYXQuXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIFVwZGF0ZSBmdW5jdGlvbiBmb3IgYm90aCByZXNvbHZlIGFuZCBwcm9ncmVzcyB2YWx1ZXNcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRjb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoIHZhbHVlcyA9PT0gcHJvZ3Jlc3NWYWx1ZXMgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMsIHByb2dyZXNzQ29udGV4dHMsIHJlc29sdmVDb250ZXh0cztcblxuXHRcdC8vIEFkZCBsaXN0ZW5lcnMgdG8gRGVmZXJyZWQgc3Vib3JkaW5hdGVzOyB0cmVhdCBvdGhlcnMgYXMgcmVzb2x2ZWRcblx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XG5cdFx0XHRwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRwcm9ncmVzc0NvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0LmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApIClcblx0XHRcdFx0XHRcdC5mYWlsKCBkZWZlcnJlZC5yZWplY3QgKVxuXHRcdFx0XHRcdFx0LnByb2dyZXNzKCB1cGRhdGVGdW5jKCBpLCBwcm9ncmVzc0NvbnRleHRzLCBwcm9ncmVzc1ZhbHVlcyApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0LS1yZW1haW5pbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBvbiBhbnl0aGluZywgcmVzb2x2ZSB0aGUgbWFzdGVyXG5cdFx0aWYgKCAhcmVtYWluaW5nICkge1xuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG5cdH1cbn0pO1xuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdDtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXHQvLyBBZGQgdGhlIGNhbGxiYWNrXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoe1xuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cblx0XHQvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHNcblx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VySGFuZGxlciggXCJyZWFkeVwiICk7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkub2ZmKCBcInJlYWR5XCIgKTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKipcbiAqIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG4gKi9cbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG5qUXVlcnkucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cdGlmICggIXJlYWR5TGlzdCApIHtcblxuXHRcdHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5cdFx0Ly8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWQgYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG5cdFx0Ly8gV2Ugb25jZSB0cmllZCB0byB1c2UgcmVhZHlTdGF0ZSBcImludGVyYWN0aXZlXCIgaGVyZSwgYnV0IGl0IGNhdXNlZCBpc3N1ZXMgbGlrZSB0aGUgb25lXG5cdFx0Ly8gZGlzY292ZXJlZCBieSBDaHJpc1MgaGVyZTogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIyODIjY29tbWVudDoxNVxuXHRcdGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICkge1xuXHRcdFx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdFx0XHRzZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlYWR5TGlzdC5wcm9taXNlKCBvYmogKTtcbn07XG5cbi8vIEtpY2sgb2ZmIHRoZSBET00gcmVhZHkgY2hlY2sgZXZlbiBpZiB0aGUgdXNlciBkb2VzIG5vdFxualF1ZXJ5LnJlYWR5LnByb21pc2UoKTtcblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBqUXVlcnkuYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRqUXVlcnkuYWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVtpXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oIGVsZW1zW2ldLCBrZXksIHJhdyA/IHZhbHVlIDogdmFsdWUuY2FsbCggZWxlbXNbaV0sIGksIGZuKCBlbGVtc1tpXSwga2V5ICkgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuID8gZm4oIGVsZW1zWzBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGhhdmUgZGF0YVxuICovXG5qUXVlcnkuYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdC8qIGpzaGludCAtVzAxOCAqL1xuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NCxcblx0Ly8gT2xkIFdlYktpdCBkb2VzIG5vdCBoYXZlIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucy9mcmVlemUgbWV0aG9kLFxuXHQvLyByZXR1cm4gbmV3IGVtcHR5IG9iamVjdCBpbnN0ZWFkIHdpdGggbm8gW1tzZXRdXSBhY2Nlc3NvclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMuY2FjaGUgPSB7fSwgMCwge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcbkRhdGEuYWNjZXB0cyA9IGpRdWVyeS5hY2NlcHREYXRhO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblx0a2V5OiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHQvLyBBbHdheXMgcmV0dXJuIHRoZSBrZXkgZm9yIGEgZnJvemVuIG9iamVjdC5cblx0XHRpZiAoICFEYXRhLmFjY2VwdHMoIG93bmVyICkgKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgZGVzY3JpcHRvciA9IHt9LFxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlIGtleVxuXHRcdFx0dW5sb2NrID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdW5sb2NrICkge1xuXHRcdFx0dW5sb2NrID0gRGF0YS51aWQrKztcblxuXHRcdFx0Ly8gU2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUsIG5vbi13cml0YWJsZSBwcm9wZXJ0eVxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB7IHZhbHVlOiB1bmxvY2sgfTtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIG93bmVyLCBkZXNjcmlwdG9yICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NFxuXHRcdFx0Ly8gRmFsbGJhY2sgdG8gYSBsZXNzIHNlY3VyZSBkZWZpbml0aW9uXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0ZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB1bmxvY2s7XG5cdFx0XHRcdGpRdWVyeS5leHRlbmQoIG93bmVyLCBkZXNjcmlwdG9yICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRpZiAoICF0aGlzLmNhY2hlWyB1bmxvY2sgXSApIHtcblx0XHRcdHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVubG9jaztcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Ly8gVGhlcmUgbWF5IGJlIGFuIHVubG9jayBhc3NpZ25lZCB0byB0aGlzIG5vZGUsXG5cdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBlbnRyeSBmb3IgdGhpcyBcIm93bmVyXCIsIGNyZWF0ZSBvbmUgaW5saW5lXG5cdFx0XHQvLyBhbmQgc2V0IHRoZSB1bmxvY2sgYXMgdGhvdWdoIGFuIG93bmVyIGVudHJ5IGhhZCBhbHdheXMgZXhpc3RlZFxuXHRcdFx0dW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgZGF0YSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBGcmVzaCBhc3NpZ25tZW50cyBieSBvYmplY3QgYXJlIHNoYWxsb3cgY29waWVkXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLmNhY2hlWyB1bmxvY2sgXSwgZGF0YSApO1xuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGNhY2hlWyBwcm9wIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdC8vIEVpdGhlciBhIHZhbGlkIGNhY2hlIGlzIGZvdW5kLCBvciB3aWxsIGJlIGNyZWF0ZWQuXG5cdFx0Ly8gTmV3IGNhY2hlcyB3aWxsIGJlIGNyZWF0ZWQgYW5kIHRoZSB1bmxvY2sgcmV0dXJuZWQsXG5cdFx0Ly8gYWxsb3dpbmcgZGlyZWN0IGFjY2VzcyB0byB0aGUgbmV3bHkgY3JlYXRlZFxuXHRcdC8vIGVtcHR5IGRhdGEgb2JqZWN0LiBBIHZhbGlkIG93bmVyIG9iamVjdCBtdXN0IGJlIHByb3ZpZGVkLlxuXHRcdHZhciBjYWNoZSA9IHRoaXMuY2FjaGVbIHRoaXMua2V5KCBvd25lciApIF07XG5cblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0Y2FjaGUgOiBjYWNoZVsga2V5IF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBzdG9yZWQ7XG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KChrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgKSB7XG5cblx0XHRcdHN0b3JlZCA9IHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cblx0XHRcdHJldHVybiBzdG9yZWQgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHN0b3JlZCA6IHRoaXMuZ2V0KCBvd25lciwgalF1ZXJ5LmNhbWVsQ2FzZShrZXkpICk7XG5cdFx0fVxuXG5cdFx0Ly8gWypdV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLCBuYW1lLCBjYW1lbCxcblx0XHRcdHVubG9jayA9IHRoaXMua2V5KCBvd25lciApLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlWyB1bmxvY2sgXTtcblxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLmNhY2hlWyB1bmxvY2sgXSA9IHt9O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcblx0XHRcdFx0Ly8gSWYgXCJuYW1lXCIgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXaGVuIGRhdGEgaXMgaW5pdGlhbGx5IGNyZWF0ZWQsIHZpYSAoXCJrZXlcIiwgXCJ2YWxcIikgc2lnbmF0dXJlLFxuXHRcdFx0XHQvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS5cblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIHRlbGwgX2hvd18gYSBrZXkgd2FzIGFkZGVkLCByZW1vdmVcblx0XHRcdFx0Ly8gYm90aCBwbGFpbiBrZXkgYW5kIGNhbWVsQ2FzZSBrZXkuICMxMjc4NlxuXHRcdFx0XHQvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC5cblx0XHRcdFx0bmFtZSA9IGtleS5jb25jYXQoIGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FtZWwgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblx0XHRcdFx0Ly8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cblx0XHRcdFx0aWYgKCBrZXkgaW4gY2FjaGUgKSB7XG5cdFx0XHRcdFx0bmFtZSA9IFsga2V5LCBjYW1lbCBdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRcdG5hbWUgPSBjYW1lbDtcblx0XHRcdFx0XHRuYW1lID0gbmFtZSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0XHRbIG5hbWUgXSA6ICggbmFtZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBuYW1lWyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KFxuXHRcdFx0dGhpcy5jYWNoZVsgb3duZXJbIHRoaXMuZXhwYW5kbyBdIF0gfHwge31cblx0XHQpO1xuXHR9LFxuXHRkaXNjYXJkOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0aWYgKCBvd25lclsgdGhpcy5leHBhbmRvIF0gKSB7XG5cdFx0XHRkZWxldGUgdGhpcy5jYWNoZVsgb3duZXJbIHRoaXMuZXhwYW5kbyBdIF07XG5cdFx0fVxuXHR9XG59O1xudmFyIGRhdGFfcHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhX3VzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gLyhbQS1aXSkvZztcblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQxXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxuXHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxuXHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxuXHRcdFx0XHRcdGRhdGE7XG5cdFx0XHR9IGNhdGNoKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhX3VzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YV91c2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhX3ByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhX3VzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YV91c2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFfcHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMStcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoNSkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YSxcblx0XHRcdFx0Y2FtZWxLZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBhcy1pc1xuXHRcdFx0XHRkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgY2FtZWxpemVkXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtLCBjYW1lbEtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBjYW1lbEtleSwgdW5kZWZpbmVkICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBGaXJzdCwgYXR0ZW1wdCB0byBzdG9yZSBhIGNvcHkgb3IgcmVmZXJlbmNlIG9mIGFueVxuXHRcdFx0XHQvLyBkYXRhIHRoYXQgbWlnaHQndmUgYmVlbiBzdG9yZSB3aXRoIGEgY2FtZWxDYXNlZCBrZXkuXG5cdFx0XHRcdHZhciBkYXRhID0gZGF0YV91c2VyLmdldCggdGhpcywgY2FtZWxLZXkgKTtcblxuXHRcdFx0XHQvLyBGb3IgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZSBpbnRlcm9wLCB3ZSBoYXZlIHRvXG5cdFx0XHRcdC8vIHN0b3JlIHByb3BlcnR5IG5hbWVzIHdpdGggZGFzaGVzIGluIGEgY2FtZWxDYXNlIGZvcm0uXG5cdFx0XHRcdC8vIFRoaXMgbWlnaHQgbm90IGFwcGx5IHRvIGFsbCBwcm9wZXJ0aWVzLi4uKlxuXHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBjYW1lbEtleSwgdmFsdWUgKTtcblxuXHRcdFx0XHQvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfXG5cdFx0XHRcdC8vIGhhdmUgZGFzaGVzLCB3ZSBuZWVkIHRvIGFsc28gc3RvcmUgYSBjb3B5IG9mIHRoYXRcblx0XHRcdFx0Ly8gdW5jaGFuZ2VkIHByb3BlcnR5LlxuXHRcdFx0XHRpZiAoIGtleS5pbmRleE9mKFwiLVwiKSAhPT0gLTEgJiYgZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YV91c2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5leHRlbmQoe1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YV9wcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFfcHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbMF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVswXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0pO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YV9wcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSk7XG52YXIgcG51bSA9ICgvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLykuc291cmNlO1xuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblx0XHQvLyBpc0hpZGRlbiBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIiB8fCAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0fTtcblxudmFyIHJjaGVja2FibGVUeXBlID0gKC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pKTtcblxuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xXG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMSwgQW5kcm9pZDw0LjJcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59KSgpO1xudmFyIHN0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQ7XG5cblxuXG5zdXBwb3J0LmZvY3VzaW5CdWJibGVzID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnUpfGNsaWNrLyxcblx0cmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpJC87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IHN0cnVuZGVmaW5lZCAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0pICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8IHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YV9wcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbMl0gJiYgbmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fCBzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkZWxldGUgZWxlbURhdGEuaGFuZGxlO1xuXHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgXCJldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKFwiLlwiKSA+PSAwICkge1xuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoXCIuXCIpO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoXCI6XCIpIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZV9yZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoIChjdXIgPSBldmVudFBhdGhbaSsrXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFfcHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJiBkYXRhX3ByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICghc3BlY2lhbC5fZGVmYXVsdCB8fCBzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UpICYmXG5cdFx0XHRcdGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1swXSA9IGV2ZW50O1xuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0pICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50Lm5hbWVzcGFjZV9yZSB8fCBldmVudC5uYW1lc3BhY2VfcmUudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChldmVudC5yZXN1bHQgPSByZXQpID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIG1hdGNoZXMsIHNlbCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKVxuXHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGJ1YmJsaW5nIGluIEZpcmVmb3ggKCMzODYxKVxuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiYgKCFldmVudC5idXR0b24gfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiApIHtcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+PSAwIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XG5cdHByb3BzOiBcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiLnNwbGl0KFwiIFwiKSxcblxuXHRmaXhIb29rczoge30sXG5cblx0a2V5SG9va3M6IHtcblx0XHRwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoXCIgXCIpLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRtb3VzZUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIuc3BsaXQoXCIgXCIpLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblx0XHRcdHZhciBldmVudERvYywgZG9jLCBib2R5LFxuXHRcdFx0XHRidXR0b24gPSBvcmlnaW5hbC5idXR0b247XG5cblx0XHRcdC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGVcblx0XHRcdGlmICggZXZlbnQucGFnZVggPT0gbnVsbCAmJiBvcmlnaW5hbC5jbGllbnRYICE9IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG5cdFx0XHRcdGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdFx0Ym9keSA9IGV2ZW50RG9jLmJvZHk7XG5cblx0XHRcdFx0ZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICsgKCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApO1xuXHRcdFx0XHRldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgKyAoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRcdC8vIE5vdGU6IGJ1dHRvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28gZG9uJ3QgdXNlIGl0XG5cdFx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzXG5cdFx0dmFyIGksIHByb3AsIGNvcHksXG5cdFx0XHR0eXBlID0gZXZlbnQudHlwZSxcblx0XHRcdG9yaWdpbmFsRXZlbnQgPSBldmVudCxcblx0XHRcdGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XG5cblx0XHRpZiAoICFmaXhIb29rICkge1xuXHRcdFx0dGhpcy5maXhIb29rc1sgdHlwZSBdID0gZml4SG9vayA9XG5cdFx0XHRcdHJtb3VzZUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMubW91c2VIb29rcyA6XG5cdFx0XHRcdHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDpcblx0XHRcdFx0e307XG5cdFx0fVxuXHRcdGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XG5cblx0XHRldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblxuXHRcdGkgPSBjb3B5Lmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHByb3AgPSBjb3B5WyBpIF07XG5cdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IENvcmRvdmEgMi41IChXZWJLaXQpICgjMTMyNTUpXG5cdFx0Ly8gQWxsIGV2ZW50cyBzaG91bGQgaGF2ZSBhIHRhcmdldDsgQ29yZG92YSBkZXZpY2VyZWFkeSBkb2Vzbid0XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCssIENocm9tZTwyOFxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0aWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50O1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50LCBidWJibGUgKSB7XG5cdFx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lLlxuXHRcdC8vIEZha2Ugb3JpZ2luYWxFdmVudCB0byBhdm9pZCBkb25vcidzIHN0b3BQcm9wYWdhdGlvbiwgYnV0IGlmIHRoZVxuXHRcdC8vIHNpbXVsYXRlZCBldmVudCBwcmV2ZW50cyBkZWZhdWx0IHRoZW4gd2UgZG8gdGhlIHNhbWUgb24gdGhlIGRvbm9yLlxuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZSxcblx0XHRcdFx0b3JpZ2luYWxFdmVudDoge31cblx0XHRcdH1cblx0XHQpO1xuXHRcdGlmICggYnViYmxlICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmNhbGwoIGVsZW0sIGUgKTtcblx0XHR9XG5cdFx0aWYgKCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlLCBmYWxzZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISh0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50KSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnN0b3BQcm9wYWdhdGlvbiApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gU3VwcG9ydDogQ2hyb21lIDE1K1xualF1ZXJ5LmVhY2goe1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94LCBDaHJvbWUsIFNhZmFyaVxuLy8gQ3JlYXRlIFwiYnViYmxpbmdcIiBmb2N1cyBhbmQgYmx1ciBldmVudHNcbmlmICggIXN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgKSB7XG5cdGpRdWVyeS5lYWNoKHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICksIHRydWUgKTtcblx0XHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIC8qSU5URVJOQUwqLyBvbmUgKSB7XG5cdFx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHRcdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub24oIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRcdG9yaWdGbiA9IGZuO1xuXHRcdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fTtcblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdFx0fSk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/IGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6IGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0pO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWzBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSk7XG5cblxudmFyXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxcblx0cnRhZ05hbWUgPSAvPChbXFx3Ol0rKS8sXG5cdHJodG1sID0gLzx8JiM/XFx3KzsvLFxuXHRybm9Jbm5lcmh0bWwgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLFxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxcblxuXHQvLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxuXHR3cmFwTWFwID0ge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0XHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdFx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0XHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdFx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdFx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG5cdH07XG5cbi8vIFN1cHBvcnQ6IElFOVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IDEueCBjb21wYXRpYmlsaXR5XG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xuXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdIHx8XG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpICkgOlxuXHRcdGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9IChlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikgIT09IG51bGwpICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFfcHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLCBcImdsb2JhbEV2YWxcIiwgIXJlZkVsZW1lbnRzIHx8IGRhdGFfcHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFfcHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFfcHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YV9wcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YV91c2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YV91c2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFfdXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cdHZhciByZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lID8gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0Y29udGV4dC5xdWVyeVNlbGVjdG9yQWxsID8gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHRbXTtcblxuXHRyZXR1cm4gdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgP1xuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApIDpcblx0XHRyZXQ7XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0YnVpbGRGcmFnbWVudDogZnVuY3Rpb24oIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24gKSB7XG5cdFx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0XHRub2RlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXQsIFBoYW50b21KU1xuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcblxuXHRcdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgZWxlbS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0LCBQaGFudG9tSlNcblx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRcdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGVsZW0gPSBub2Rlc1sgaSsrIF0pICkge1xuXG5cdFx0XHQvLyAjNDA4NyAtIElmIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgYXJlIHRoZSBzYW1lLCBhbmQgdGhpcyBpc1xuXHRcdFx0Ly8gdGhhdCBlbGVtZW50LCBkbyBub3QgZG8gYW55dGhpbmdcblx0XHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSAhPT0gLTEgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gdG1wWyBqKysgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZyYWdtZW50O1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLCBrZXksXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1sgaSBdKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGtleSA9IGVsZW1bIGRhdGFfcHJpdi5leHBhbmRvIF07XG5cblx0XHRcdFx0aWYgKCBrZXkgJiYgKGRhdGEgPSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBkYXRhX3ByaXYuY2FjaGVbIGtleSBdICkge1xuXHRcdFx0XHRcdFx0Ly8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGBwcml2YXRlYCBkYXRhXG5cdFx0XHRcdFx0XHRkZWxldGUgZGF0YV9wcml2LmNhY2hlWyBrZXkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIERpc2NhcmQgYW55IHJlbWFpbmluZyBgdXNlcmAgZGF0YVxuXHRcdFx0ZGVsZXRlIGRhdGFfdXNlci5jYWNoZVsgZWxlbVsgZGF0YV91c2VyLmV4cGFuZG8gXSBdO1xuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3Rvciwga2VlcERhdGEgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRlbGVtcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHRoaXMgKSA6IHRoaXMsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtICkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9KTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYXJnID0gYXJndW1lbnRzWyAwIF07XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHR0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0YXJnID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXG5cdFx0XHRpZiAoIGFyZyApIHtcblx0XHRcdFx0YXJnLnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRm9yY2UgcmVtb3ZhbCBpZiB0aGVyZSB3YXMgbm8gbmV3IGNvbnRlbnQgKGUuZy4sIGZyb20gZW1wdHkgYXJndW1lbnRzKVxuXHRcdHJldHVybiBhcmcgJiYgKGFyZy5sZW5ndGggfHwgYXJnLm5vZGVUeXBlKSA/IHRoaXMgOiB0aGlzLnJlbW92ZSgpO1xuXHR9LFxuXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnJlbW92ZSggc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0XHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNldCA9IHRoaXMsXG5cdFx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0XHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0XHR2YXIgc2VsZiA9IHNldC5lcSggaW5kZXggKTtcblx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuZG9tTWFuaXAoIGFyZ3MsIGNhbGxiYWNrICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIGwgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIHRoaXMgKTtcblx0XHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBmaXJzdCApIHtcblx0XHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbSBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdFx0XHRcdFx0Ly8galF1ZXJ5Lm1lcmdlIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbCggdGhpc1sgaSBdLCBub2RlLCBpICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHRcdCFkYXRhX3ByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmIGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaCh7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0pO1xuXG5cbnZhciBpZnJhbWUsXG5cdGVsZW1kaXNwbGF5ID0ge307XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGFjdHVhbCBkaXNwbGF5IG9mIGEgZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0XG4gKi9cbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XG5cdHZhciBzdHlsZSxcblx0XHRlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXG5cblx0XHQvLyBnZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSBtaWdodCBiZSByZWxpYWJseSB1c2VkIG9ubHkgb24gYXR0YWNoZWQgZWxlbWVudFxuXHRcdGRpc3BsYXkgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgJiYgKCBzdHlsZSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSggZWxlbVsgMCBdICkgKSA/XG5cblx0XHRcdC8vIFVzZSBvZiB0aGlzIG1ldGhvZCBpcyBhIHRlbXBvcmFyeSBmaXggKG1vcmUgbGlrZSBvcHRpbWl6YXRpb24pIHVudGlsIHNvbWV0aGluZyBiZXR0ZXIgY29tZXMgYWxvbmcsXG5cdFx0XHQvLyBzaW5jZSBpdCB3YXMgcmVtb3ZlZCBmcm9tIHNwZWNpZmljYXRpb24gYW5kIHN1cHBvcnRlZCBvbmx5IGluIEZGXG5cdFx0XHRzdHlsZS5kaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xuXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxuXHRlbGVtLmRldGFjaCgpO1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG4vKipcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuXHR2YXIgZG9jID0gZG9jdW1lbnQsXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG5cdGlmICggIWRpc3BsYXkgKSB7XG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxuXHRcdFx0aWZyYW1lID0gKGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkpLmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XG5cblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxuXHRcdFx0ZG9jID0gaWZyYW1lWyAwIF0uY29udGVudERvY3VtZW50O1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0ZG9jLndyaXRlKCk7XG5cdFx0XHRkb2MuY2xvc2UoKTtcblxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cdH1cblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cbnZhciBybWFyZ2luID0gKC9ebWFyZ2luLyk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFPD0xMSssIEZpcmVmb3g8PTMwKyAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0aWYgKCBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcub3BlbmVyICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXHR9XG5cblx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDwgNlxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBpT1MgPCA2IChhdCBsZWFzdCkgcmV0dXJucyBwZXJjZW50YWdlIGZvciBhIGxhcmdlciBzZXQgb2YgdmFsdWVzLCBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzXG5cdFx0Ly8gdGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOiBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAodGhpcy5nZXQgPSBob29rRm4pLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsXG5cdFx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDttYXJnaW4tdG9wOjFweDtcIiArXG5cdFx0XCJwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCkge1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjElO3RvcDoxJTtcIiArXG5cdFx0XHRcImJvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NHB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IG5vZGUuanMganNkb21cblx0Ly8gRG9uJ3QgYXNzdW1lIHRoYXQgZ2V0Q29tcHV0ZWRTdHlsZSBpcyBhIHByb3BlcnR5IG9mIHRoZSBnbG9iYWwgb2JqZWN0XG5cdGlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gVGhpcyB0ZXN0IGlzIGV4ZWN1dGVkIG9ubHkgb25jZSBidXQgd2Ugc3RpbGwgZG8gbWVtb2l6aW5nXG5cdFx0XHRcdC8vIHNpbmNlIHdlIGNhbiB1c2UgdGhlIGJveFNpemluZ1JlbGlhYmxlIHByZS1jb21wdXRpbmcuXG5cdFx0XHRcdC8vIE5vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHRlc3Qgd2FzIGFscmVhZHkgcGVyZm9ybWVkLCB0aG91Z2guXG5cdFx0XHRcdGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKTtcblx0XHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0XHR9LFxuXHRcdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdFx0Y29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHRcdH0sXG5cdFx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0XHQvLyBDaGVjayBpZiBkaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5XG5cdFx0XHRcdC8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lci4gKCMzMzMzKVxuXHRcdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcblx0XHRcdFx0Ly8gVGhpcyBzdXBwb3J0IGZ1bmN0aW9uIGlzIG9ubHkgZXhlY3V0ZWQgb25jZSBzbyBubyBtZW1vaXppbmcgaXMgbmVlZGVkLlxuXHRcdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHRcdG1hcmdpbkRpdiA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gUmVzZXQgQ1NTOiBib3gtc2l6aW5nOyBkaXNwbGF5OyBtYXJnaW47IGJvcmRlcjsgcGFkZGluZ1xuXHRcdFx0XHRtYXJnaW5EaXYuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHRcdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFx0XCJib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCI7XG5cdFx0XHRcdG1hcmdpbkRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IG1hcmdpbkRpdi5zdHlsZS53aWR0aCA9IFwiMFwiO1xuXHRcdFx0XHRkaXYuc3R5bGUud2lkdGggPSBcIjFweFwiO1xuXHRcdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdFx0XHRyZXQgPSAhcGFyc2VGbG9hdCggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIG1hcmdpbkRpdiwgbnVsbCApLm1hcmdpblJpZ2h0ICk7XG5cblx0XHRcdFx0ZG9jRWxlbS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdFx0XHRcdGRpdi5yZW1vdmVDaGlsZCggbWFyZ2luRGl2ICk7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSkoKTtcblxuXG4vLyBBIG1ldGhvZCBmb3IgcXVpY2tseSBzd2FwcGluZyBpbi9vdXQgQ1NTIHByb3BlcnRpZXMgdG8gZ2V0IGNvcnJlY3QgY2FsY3VsYXRpb25zLlxualF1ZXJ5LnN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXJcblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZSBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cm51bXNwbGl0ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSguKikkXCIsIFwiaVwiICksXG5cdHJyZWxOdW0gPSBuZXcgUmVnRXhwKCBcIl4oWystXSk9KFwiICsgcG51bSArIFwiKVwiLCBcImlcIiApLFxuXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF07XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBzdHlsZSwgbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSxcblx0XHRvcmlnTmFtZSA9IG5hbWUsXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9yaWdOYW1lO1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXHR2YXIgbWF0Y2hlcyA9IHJudW1zcGxpdC5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMSBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMiBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgP1xuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRcdDQgOlxuXHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0XHRuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMCxcblxuXHRcdHZhbCA9IDA7XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcblx0XHR2YWwgPSBuYW1lID09PSBcIndpZHRoXCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIFNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxuXHQvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XG5cdGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KHZhbCkgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXHR9XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICk7XG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cdFx0XHQvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXG5cdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcblx0XHRcdC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgZGVmYXVsdERpc3BsYXkoZWxlbS5ub2RlTmFtZSkgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aGlkZGVuID0gaXNIaWRkZW4oIGVsZW0gKTtcblxuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiB8fCAhaGlkZGVuICkge1xuXHRcdFx0XHRkYXRhX3ByaXYuc2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgaGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxuXHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBvcmlnTmFtZSApICk7XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmIChyZXQgPSBycmVsTnVtLmV4ZWMoIHZhbHVlICkpICkge1xuXHRcdFx0XHR2YWx1ZSA9ICggcmV0WzFdICsgMSApICogcmV0WzJdICsgcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApICk7XG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIsIGFkZCAncHgnIHRvIHRoZSAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdICkge1xuXHRcdFx0XHR2YWx1ZSArPSBcInB4XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgKHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBlbGVtLnN0eWxlLCBvcmlnTmFtZSApICk7XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGpRdWVyeS5pc051bWVyaWMoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaChbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiYgZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XG5cdFx0XHRcdFx0alF1ZXJ5LnN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIGV4dHJhID9cblx0XHRcdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCkgOiAwXG5cdFx0XHQpO1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXG5cdFx0XHRcdGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goe1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoXCIgXCIpIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IFwic3dpbmdcIjtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdGlmICggdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiZcblx0XHRcdFx0KCF0d2Vlbi5lbGVtLnN0eWxlIHx8IHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsKSApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5zdHlsZSAmJiAoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fCBqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fVxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIHRpbWVySWQsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRyZnhudW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLyxcblx0YW5pbWF0aW9uUHJlZmlsdGVycyA9IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXHR0d2VlbmVycyA9IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApLFxuXHRcdFx0XHR0YXJnZXQgPSB0d2Vlbi5jdXIoKSxcblx0XHRcdFx0cGFydHMgPSByZnhudW0uZXhlYyggdmFsdWUgKSxcblx0XHRcdFx0dW5pdCA9IHBhcnRzICYmIHBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHRcdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRcdFx0c3RhcnQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK3RhcmdldCApICYmXG5cdFx0XHRcdFx0cmZ4bnVtLmV4ZWMoIGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHByb3AgKSApLFxuXHRcdFx0XHRzY2FsZSA9IDEsXG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAyMDtcblxuXHRcdFx0aWYgKCBzdGFydCAmJiBzdGFydFsgMyBdICE9PSB1bml0ICkge1xuXHRcdFx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0XHRcdHVuaXQgPSB1bml0IHx8IHN0YXJ0WyAzIF07XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdFx0XHRwYXJ0cyA9IHBhcnRzIHx8IFtdO1xuXG5cdFx0XHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0XHRcdHN0YXJ0ID0gK3RhcmdldCB8fCAxO1xuXG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0XHRcdHN0YXJ0ID0gc3RhcnQgLyBzY2FsZTtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHByb3AsIHN0YXJ0ICsgdW5pdCApO1xuXG5cdFx0XHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpLFxuXHRcdFx0XHQvLyBicmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoXG5cdFx0XHRcdH0gd2hpbGUgKCBzY2FsZSAhPT0gKHNjYWxlID0gdHdlZW4uY3VyKCkgLyB0YXJnZXQpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgdHdlZW4gcHJvcGVydGllc1xuXHRcdFx0aWYgKCBwYXJ0cyApIHtcblx0XHRcdFx0c3RhcnQgPSB0d2Vlbi5zdGFydCA9ICtzdGFydCB8fCArdGFyZ2V0IHx8IDA7XG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0XHQvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb25cblx0XHRcdFx0dHdlZW4uZW5kID0gcGFydHNbIDEgXSA/XG5cdFx0XHRcdFx0c3RhcnQgKyAoIHBhcnRzWyAxIF0gKyAxICkgKiBwYXJ0c1sgMiBdIDpcblx0XHRcdFx0XHQrcGFydHNbIDIgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9O1xuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggdHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggdHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAodHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHQvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBIYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIEhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzXG5cdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiaGVpZ2h0XCIgaW4gcHJvcHMgfHwgXCJ3aWR0aFwiIGluIHByb3BzICkgKSB7XG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRTktMTAgZG8gbm90XG5cdFx0Ly8gY2hhbmdlIHRoZSBvdmVyZmxvdyBhdHRyaWJ1dGUgd2hlbiBvdmVyZmxvd1ggYW5kXG5cdFx0Ly8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWVcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXG5cdFx0Ly8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXG5cdFx0Ly8gVGVzdCBkZWZhdWx0IGRpc3BsYXkgaWYgZGlzcGxheSBpcyBjdXJyZW50bHkgXCJub25lXCJcblx0XHRjaGVja0Rpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/XG5cdFx0XHRkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xuXG5cdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gc2hvdy9oaWRlIHBhc3Ncblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93IGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblxuXHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlzcGxheSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblxuXHRpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YVNob3cgPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcblx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0fVxuXHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeSggZWxlbSApLmhpZGUoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcHJvcDtcblxuXHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdHR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cblx0XHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRcdHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRcdHR3ZWVuLnN0YXJ0ID0gcHJvcCA9PT0gXCJ3aWR0aFwiIHx8IHByb3AgPT09IFwiaGVpZ2h0XCIgPyAxIDogMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHQvLyBJZiB0aGlzIGlzIGEgbm9vcCBsaWtlIC5oaWRlKCkuaGlkZSgpLCByZXN0b3JlIGFuIG92ZXJ3cml0dGVuIGRpc3BsYXkgdmFsdWVcblx0fSBlbHNlIGlmICggKGRpc3BsYXkgPT09IFwibm9uZVwiID8gZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXkpID09PSBcImlubGluZVwiICkge1xuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBhbmltYXRpb25QcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0pO1xuXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2Uoe1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwgeyBzcGVjaWFsRWFzaW5nOiB7fSB9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBhbmltYXRpb25QcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSlcblx0KTtcblxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMuc3BsaXQoXCIgXCIpO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdID0gdHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltYXRpb25QcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59KTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZngub2ZmID8gMCA6IHR5cGVvZiBvcHQuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgPyBvcHQuZHVyYXRpb24gOlxuXHRcdG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzID8galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhX3ByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3ByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSkgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFfcHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaChbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0pO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCh7XG5cdHNsaWRlRG93bjogZ2VuRngoXCJzaG93XCIpLFxuXHRzbGlkZVVwOiBnZW5GeChcImhpZGVcIiksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeChcInRvZ2dsZVwiKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59KTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0aWYgKCB0aW1lcigpICkge1xuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS50aW1lcnMucG9wKCk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xuXG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCAhdGltZXJJZCApIHtcblx0XHR0aW1lcklkID0gc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0Y2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXHR0aW1lcklkID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdGNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0pO1xufTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogaU9TPD01LjEsIEFuZHJvaWQ8PTQuMitcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPD0yLjNcblx0Ly8gT3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmUgaW5jb3JyZWN0bHkgbWFya2VkIGFzIGRpc2FibGVkXG5cdHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XG5cdHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSkoKTtcblxuXG52YXIgbm9kZUhvb2ssIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gZG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gc3RydW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBhdHRyaWJ1dGVzIGFyZSBsb3dlcmNhc2Vcblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/XG5cdFx0XHRcdHVuZGVmaW5lZCA6XG5cdFx0XHRcdHJldDtcblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKG5hbWUgPSBhdHRyTmFtZXNbaSsrXSkgKSB7XG5cdFx0XHRcdHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0XHQvLyBTZXQgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB0byBmYWxzZVxuXHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH0sXG5cblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLCBub3R4bWwsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRub3R4bWwgPSBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICk7XG5cblx0XHRpZiAoIG5vdHhtbCApIHtcblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cmV0IDpcblx0XHRcdFx0KCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgP1xuXHRcdFx0XHRyZXQgOlxuXHRcdFx0XHRlbGVtWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5oYXNBdHRyaWJ1dGUoIFwidGFiaW5kZXhcIiApIHx8IHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8IGVsZW0uaHJlZiA/XG5cdFx0XHRcdFx0ZWxlbS50YWJJbmRleCA6XG5cdFx0XHRcdFx0LTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaChbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSk7XG5cblxuXG5cbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRwcm9jZWVkID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCBwcm9jZWVkICkge1xuXHRcdFx0Ly8gVGhlIGRpc2p1bmN0aW9uIGhlcmUgaXMgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSByZW1vdmVDbGFzcylcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcblx0XHRcdFx0XHRcIiBcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdHByb2NlZWQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGg7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAoIHByb2NlZWQgKSB7XG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XG5cdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID49IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gdmFsdWUgPyBqUXVlcnkudHJpbSggY3VyICkgOiBcIlwiO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSxcblx0XHRcdFx0XHRpID0gMCxcblx0XHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoIChjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSkgKSB7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IHN0cnVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0aWYgKCB0aGlzLmNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHQvLyBzdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIHRoaXMuY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID8gXCJcIiA6IGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIjtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRpZiAoIHRoaXNbaV0ubm9kZVR5cGUgPT09IDEgJiYgKFwiIFwiICsgdGhpc1tpXS5jbGFzc05hbWUgKyBcIiBcIikucmVwbGFjZShyY2xhc3MsIFwiIFwiKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+PSAwICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0pO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbMF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0XHRyZXQucmVwbGFjZShycmV0dXJuLCBcIlwiKSA6XG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTEwLTExK1xuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCxcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cblx0XHRcdFx0XHRcdG1heCA6XG5cdFx0XHRcdFx0XHRvbmUgPyBpbmRleCA6IDA7XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBJRTYtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQoIHN1cHBvcnQub3B0RGlzYWJsZWQgPyAhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggKG9wdGlvbi5zZWxlY3RlZCA9IGpRdWVyeS5pbkFycmF5KCBvcHRpb24udmFsdWUsIHZhbHVlcyApID49IDApICkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KGVsZW0pLnZhbCgpLCB2YWx1ZSApID49IDAgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbmpRdWVyeS5lYWNoKCAoXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIikuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9LFxuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gdGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6IHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59KTtcblxuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoL1xcPy8pO1xuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbi8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xufTtcblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgdG1wO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdHRyeSB7XG5cdFx0dG1wID0gbmV3IERPTVBhcnNlcigpO1xuXHRcdHhtbCA9IHRtcC5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblx0cnVybCA9IC9eKFtcXHcuKy1dKzopKD86XFwvXFwvKD86W15cXC8/I10qQHwpKFteXFwvPyM6XSopKD86OihcXGQrKXwpfCkvLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gRG9jdW1lbnQgbG9jYXRpb25cblx0YWpheExvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLmhyZWYsXG5cblx0Ly8gU2VnbWVudCBsb2NhdGlvbiBpbnRvIHBhcnRzXG5cdGFqYXhMb2NQYXJ0cyA9IHJ1cmwuZXhlYyggYWpheExvY2F0aW9uLnRvTG93ZXJDYXNlKCkgKSB8fCBbXTtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pICkge1xuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWzBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmICFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKGRlZXAgPSB7fSkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1swXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHNbIFwidGhyb3dzXCIgXSApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7IHN0YXRlOiBcInBhcnNlcmVycm9yXCIsIGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudCB9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogYWpheExvY2F0aW9uLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggYWpheExvY1BhcnRzWyAxIF0gKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC94bWwvLFxuXHRcdFx0aHRtbDogL2h0bWwvLFxuXHRcdFx0anNvbjogL2pzb24vXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblx0XHRcdC8vIENyb3NzLWRvbWFpbiBkZXRlY3Rpb24gdmFyc1xuXHRcdFx0cGFydHMsXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmICggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblx0XHRcdC8vIFRoZSBqcVhIUiBzdGF0ZVxuXHRcdFx0c3RhdGUgPSAwLFxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xuXHRcdGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcblxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGFqYXhMb2NhdGlvbiApICsgXCJcIiApLnJlcGxhY2UoIHJoYXNoLCBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0galF1ZXJ5LnRyaW0oIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB3ZSBoYXZlIGEgcHJvdG9jb2w6aG9zdDpwb3J0IG1pc21hdGNoXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHRwYXJ0cyA9IHJ1cmwuZXhlYyggcy51cmwudG9Mb3dlckNhc2UoKSApO1xuXHRcdFx0cy5jcm9zc0RvbWFpbiA9ICEhKCBwYXJ0cyAmJlxuXHRcdFx0XHQoIHBhcnRzWyAxIF0gIT09IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT09IGFqYXhMb2NQYXJ0c1sgMiBdIHx8XG5cdFx0XHRcdFx0KCBwYXJ0c1sgMyBdIHx8ICggcGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgIT09XG5cdFx0XHRcdFx0XHQoIGFqYXhMb2NQYXJ0c1sgMyBdIHx8ICggYWpheExvY1BhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApIClcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIik7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybDtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cblxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlXG5cdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XG5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXG5cdFx0XHRcdFx0Y2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdICsgKCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiYgKCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkge1xuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHtcblx0XHRcdGpxWEhSWyBpIF0oIHNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydChcInRpbWVvdXRcIik7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRzdGF0ZSA9IDE7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcblx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIENhbGxlZCBvbmNlXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXRlIGlzIFwiZG9uZVwiIG5vd1xuXHRcdFx0c3RhdGUgPSAyO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0pO1xuXHR9O1xufSk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KHtcblx0XHR1cmw6IHVybCxcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKHRoaXMsIGkpIDogaHRtbCApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdFx0fVxuXHRcdH0pLmVuZCgpO1xuXHR9XG59KTtcblxuXG5qUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxuXHQvLyBPcGVyYSByZXBvcnRzIG9mZnNldFdpZHRocyBhbmQgb2Zmc2V0SGVpZ2h0cyBsZXNzIHRoYW4gemVybyBvbiBzb21lIGVsZW1lbnRzXG5cdHJldHVybiBlbGVtLm9mZnNldFdpZHRoIDw9IDAgJiYgZWxlbS5vZmZzZXRIZWlnaHQgPD0gMDtcbn07XG5qUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiggZWxlbSApO1xufTtcblxuXG5cblxudmFyIHIyMCA9IC8lMjAvZyxcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiID8gaSA6IFwiXCIgKSArIFwiXVwiLCB2LCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG5cdFx0XHR2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHR0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MgJiYgalF1ZXJ5LmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9KTtcblxuXHR9IGVsc2Uge1xuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSlcblx0XHQubWFwKGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xuXHRcdFx0XHRudWxsIDpcblx0XHRcdFx0alF1ZXJ5LmlzQXJyYXkoIHZhbCApID9cblx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSkuZ2V0KCk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoKCBlICkge31cbn07XG5cbnZhciB4aHJJZCA9IDAsXG5cdHhockNhbGxiYWNrcyA9IHt9LFxuXHR4aHJTdWNjZXNzU3RhdHVzID0ge1xuXHRcdC8vIGZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIE9wZW4gcmVxdWVzdHMgbXVzdCBiZSBtYW51YWxseSBhYm9ydGVkIG9uIHVubG9hZCAoIzUyODApXG4vLyBTZWUgaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20va2IvMjg1Njc0NiBmb3IgbW9yZSBpbmZvXG5pZiAoIHdpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0d2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xuXHRcdGZvciAoIHZhciBrZXkgaW4geGhyQ2FsbGJhY2tzICkge1xuXHRcdFx0eGhyQ2FsbGJhY2tzWyBrZXkgXSgpO1xuXHRcdH1cblx0fSk7XG59XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydChmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCksXG5cdFx0XHRcdFx0aWQgPSArK3hocklkO1xuXG5cdFx0XHRcdHhoci5vcGVuKCBvcHRpb25zLnR5cGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkICk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB4aHJDYWxsYmFja3NbIGlkIF07XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0geGhyLm9ubG9hZCA9IHhoci5vbmVycm9yID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBBY2Nlc3NpbmcgYmluYXJ5LWRhdGEgcmVzcG9uc2VUZXh0IHRocm93cyBhbiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHRcdC8vICgjMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gXCJzdHJpbmdcIiA/IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGV4dDogeGhyLnJlc3BvbnNlVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0fSA6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdHhoci5vbmVycm9yID0gY2FsbGJhY2soXCJlcnJvclwiKTtcblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0geGhyQ2FsbGJhY2tzWyBpZCBdID0gY2FsbGJhY2soXCJhYm9ydFwiKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCh7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogLyg/OmphdmF8ZWNtYSlzY3JpcHQvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59KTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeShcIjxzY3JpcHQ+XCIpLnByb3Aoe1xuXHRcdFx0XHRcdGFzeW5jOiB0cnVlLFxuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0pLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59KTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiAhKCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmIHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBmb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblx0XHRcdFx0Ly8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBkYXRhOiBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LCBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbMV0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XG5cdFx0cmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fVxuXG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoXCIgXCIpO1xuXG5cdGlmICggb2ZmID49IDAgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBpZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSkuZG9uZShmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeShcIjxkaXY+XCIpLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdH0pLmNvbXBsZXRlKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggY2FsbGJhY2ssIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbIFwiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCIgXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSk7XG5cblxuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSkubGVuZ3RoO1xufTtcblxuXG5cblxudmFyIGRvY0VsZW0gPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4vKipcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0Vmlldztcbn1cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKFwiYXV0b1wiKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvY0VsZW0sIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxuXHRcdFx0ZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRpZiAoICFkb2MgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHQvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcblx0XHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcblx0XHRcdHJldHVybiBib3g7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQmxhY2tCZXJyeSA1LCBpT1MgMyAob3JpZ2luYWwgaVBob25lKVxuXHRcdC8vIElmIHdlIGRvbid0IGhhdmUgZ0JDUiwganVzdCB1c2UgMCwwIHJhdGhlciB0aGFuIGVycm9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09IHN0cnVuZGVmaW5lZCApIHtcblx0XHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0fVxuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LCBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudCwgXCJodG1sXCIgKSAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcblx0XHR9KTtcblx0fVxufSk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW5kb3cucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTtcblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmk8NyssIENocm9tZTwzNytcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTI4MFxuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0pO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcblx0XHR9O1xuXHR9KTtcbn0pO1xuXG5cbi8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5qUXVlcnkuZm4uc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5sZW5ndGg7XG59O1xuXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0pO1xufVxuXG5cblxuXG52YXJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IHN0cnVuZGVmaW5lZCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xuXG59KSk7XG4iLCIvKipcclxuICogUmFuZ3ksIGEgY3Jvc3MtYnJvd3NlciBKYXZhU2NyaXB0IHJhbmdlIGFuZCBzZWxlY3Rpb24gbGlicmFyeVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdGltZG93bi9yYW5neVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgMjAxNSwgVGltIERvd25cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG4gKiBWZXJzaW9uOiAxLjMuMC1iZXRhLjFcclxuICogQnVpbGQgZGF0ZTogMTIgRmVicnVhcnkgMjAxNVxyXG4gKi9cclxuXHJcbihmdW5jdGlvbihmYWN0b3J5LCByb290KSB7XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgLy8gTm9kZS9Db21tb25KUyBzdHlsZVxyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBObyBBTUQgb3IgQ29tbW9uSlMgc3VwcG9ydCBzbyB3ZSBwbGFjZSBSYW5neSBpbiAocHJvYmFibHkpIHRoZSBnbG9iYWwgdmFyaWFibGVcclxuICAgICAgICByb290LnJhbmd5ID0gZmFjdG9yeSgpO1xyXG4gICAgfVxyXG59KShmdW5jdGlvbigpIHtcclxuXHJcbiAgICB2YXIgT0JKRUNUID0gXCJvYmplY3RcIiwgRlVOQ1RJT04gPSBcImZ1bmN0aW9uXCIsIFVOREVGSU5FRCA9IFwidW5kZWZpbmVkXCI7XHJcblxyXG4gICAgLy8gTWluaW1hbCBzZXQgb2YgcHJvcGVydGllcyByZXF1aXJlZCBmb3IgRE9NIExldmVsIDIgUmFuZ2UgY29tcGxpYW5jZS4gQ29tcGFyaXNvbiBjb25zdGFudHMgc3VjaCBhcyBTVEFSVF9UT19TVEFSVFxyXG4gICAgLy8gYXJlIG9taXR0ZWQgYmVjYXVzZSByYW5nZXMgaW4gS0hUTUwgZG8gbm90IGhhdmUgdGhlbSBidXQgb3RoZXJ3aXNlIHdvcmsgcGVyZmVjdGx5IHdlbGwuIFNlZSBpc3N1ZSAxMTMuXHJcbiAgICB2YXIgZG9tUmFuZ2VQcm9wZXJ0aWVzID0gW1wic3RhcnRDb250YWluZXJcIiwgXCJzdGFydE9mZnNldFwiLCBcImVuZENvbnRhaW5lclwiLCBcImVuZE9mZnNldFwiLCBcImNvbGxhcHNlZFwiLFxyXG4gICAgICAgIFwiY29tbW9uQW5jZXN0b3JDb250YWluZXJcIl07XHJcblxyXG4gICAgLy8gTWluaW1hbCBzZXQgb2YgbWV0aG9kcyByZXF1aXJlZCBmb3IgRE9NIExldmVsIDIgUmFuZ2UgY29tcGxpYW5jZVxyXG4gICAgdmFyIGRvbVJhbmdlTWV0aG9kcyA9IFtcInNldFN0YXJ0XCIsIFwic2V0U3RhcnRCZWZvcmVcIiwgXCJzZXRTdGFydEFmdGVyXCIsIFwic2V0RW5kXCIsIFwic2V0RW5kQmVmb3JlXCIsXHJcbiAgICAgICAgXCJzZXRFbmRBZnRlclwiLCBcImNvbGxhcHNlXCIsIFwic2VsZWN0Tm9kZVwiLCBcInNlbGVjdE5vZGVDb250ZW50c1wiLCBcImNvbXBhcmVCb3VuZGFyeVBvaW50c1wiLCBcImRlbGV0ZUNvbnRlbnRzXCIsXHJcbiAgICAgICAgXCJleHRyYWN0Q29udGVudHNcIiwgXCJjbG9uZUNvbnRlbnRzXCIsIFwiaW5zZXJ0Tm9kZVwiLCBcInN1cnJvdW5kQ29udGVudHNcIiwgXCJjbG9uZVJhbmdlXCIsIFwidG9TdHJpbmdcIiwgXCJkZXRhY2hcIl07XHJcblxyXG4gICAgdmFyIHRleHRSYW5nZVByb3BlcnRpZXMgPSBbXCJib3VuZGluZ0hlaWdodFwiLCBcImJvdW5kaW5nTGVmdFwiLCBcImJvdW5kaW5nVG9wXCIsIFwiYm91bmRpbmdXaWR0aFwiLCBcImh0bWxUZXh0XCIsIFwidGV4dFwiXTtcclxuXHJcbiAgICAvLyBTdWJzZXQgb2YgVGV4dFJhbmdlJ3MgZnVsbCBzZXQgb2YgbWV0aG9kcyB0aGF0IHdlJ3JlIGludGVyZXN0ZWQgaW5cclxuICAgIHZhciB0ZXh0UmFuZ2VNZXRob2RzID0gW1wiY29sbGFwc2VcIiwgXCJjb21wYXJlRW5kUG9pbnRzXCIsIFwiZHVwbGljYXRlXCIsIFwibW92ZVRvRWxlbWVudFRleHRcIiwgXCJwYXJlbnRFbGVtZW50XCIsIFwic2VsZWN0XCIsXHJcbiAgICAgICAgXCJzZXRFbmRQb2ludFwiLCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiXTtcclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuICAgIC8vIFRyaW8gb2YgZnVuY3Rpb25zIHRha2VuIGZyb20gUGV0ZXIgTWljaGF1eCdzIGFydGljbGU6XHJcbiAgICAvLyBodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9mZWF0dXJlLWRldGVjdGlvbi1zdGF0ZS1vZi10aGUtYXJ0LWJyb3dzZXItc2NyaXB0aW5nXHJcbiAgICBmdW5jdGlvbiBpc0hvc3RNZXRob2QobywgcCkge1xyXG4gICAgICAgIHZhciB0ID0gdHlwZW9mIG9bcF07XHJcbiAgICAgICAgcmV0dXJuIHQgPT0gRlVOQ1RJT04gfHwgKCEhKHQgPT0gT0JKRUNUICYmIG9bcF0pKSB8fCB0ID09IFwidW5rbm93blwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzSG9zdE9iamVjdChvLCBwKSB7XHJcbiAgICAgICAgcmV0dXJuICEhKHR5cGVvZiBvW3BdID09IE9CSkVDVCAmJiBvW3BdKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpc0hvc3RQcm9wZXJ0eShvLCBwKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvW3BdICE9IFVOREVGSU5FRDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhdGVzIGEgY29udmVuaWVuY2UgZnVuY3Rpb24gdG8gc2F2ZSB2ZXJib3NlIHJlcGVhdGVkIGNhbGxzIHRvIHRlc3RzIGZ1bmN0aW9uc1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlTXVsdGlwbGVQcm9wZXJ0eVRlc3QodGVzdEZ1bmMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obywgcHJvcHMpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSBwcm9wcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGVzdEZ1bmMobywgcHJvcHNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTmV4dCB0cmlvIG9mIGZ1bmN0aW9ucyBhcmUgYSBjb252ZW5pZW5jZSB0byBzYXZlIHZlcmJvc2UgcmVwZWF0ZWQgY2FsbHMgdG8gcHJldmlvdXMgdHdvIGZ1bmN0aW9uc1xyXG4gICAgdmFyIGFyZUhvc3RNZXRob2RzID0gY3JlYXRlTXVsdGlwbGVQcm9wZXJ0eVRlc3QoaXNIb3N0TWV0aG9kKTtcclxuICAgIHZhciBhcmVIb3N0T2JqZWN0cyA9IGNyZWF0ZU11bHRpcGxlUHJvcGVydHlUZXN0KGlzSG9zdE9iamVjdCk7XHJcbiAgICB2YXIgYXJlSG9zdFByb3BlcnRpZXMgPSBjcmVhdGVNdWx0aXBsZVByb3BlcnR5VGVzdChpc0hvc3RQcm9wZXJ0eSk7XHJcblxyXG4gICAgZnVuY3Rpb24gaXNUZXh0UmFuZ2UocmFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gcmFuZ2UgJiYgYXJlSG9zdE1ldGhvZHMocmFuZ2UsIHRleHRSYW5nZU1ldGhvZHMpICYmIGFyZUhvc3RQcm9wZXJ0aWVzKHJhbmdlLCB0ZXh0UmFuZ2VQcm9wZXJ0aWVzKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRCb2R5KGRvYykge1xyXG4gICAgICAgIHJldHVybiBpc0hvc3RPYmplY3QoZG9jLCBcImJvZHlcIikgPyBkb2MuYm9keSA6IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGZvckVhY2ggPSBbXS5mb3JFYWNoID9cclxuICAgICAgICBmdW5jdGlvbihhcnIsIGZ1bmMpIHtcclxuICAgICAgICAgICAgYXJyLmZvckVhY2goZnVuYyk7XHJcbiAgICAgICAgfSA6XHJcbiAgICAgICAgZnVuY3Rpb24oYXJyLCBmdW5jKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmMoYXJyW2ldLCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgdmFyIG1vZHVsZXMgPSB7fTtcclxuXHJcbiAgICB2YXIgaXNCcm93c2VyID0gKHR5cGVvZiB3aW5kb3cgIT0gVU5ERUZJTkVEICYmIHR5cGVvZiBkb2N1bWVudCAhPSBVTkRFRklORUQpO1xyXG5cclxuICAgIHZhciB1dGlsID0ge1xyXG4gICAgICAgIGlzSG9zdE1ldGhvZDogaXNIb3N0TWV0aG9kLFxyXG4gICAgICAgIGlzSG9zdE9iamVjdDogaXNIb3N0T2JqZWN0LFxyXG4gICAgICAgIGlzSG9zdFByb3BlcnR5OiBpc0hvc3RQcm9wZXJ0eSxcclxuICAgICAgICBhcmVIb3N0TWV0aG9kczogYXJlSG9zdE1ldGhvZHMsXHJcbiAgICAgICAgYXJlSG9zdE9iamVjdHM6IGFyZUhvc3RPYmplY3RzLFxyXG4gICAgICAgIGFyZUhvc3RQcm9wZXJ0aWVzOiBhcmVIb3N0UHJvcGVydGllcyxcclxuICAgICAgICBpc1RleHRSYW5nZTogaXNUZXh0UmFuZ2UsXHJcbiAgICAgICAgZ2V0Qm9keTogZ2V0Qm9keSxcclxuICAgICAgICBmb3JFYWNoOiBmb3JFYWNoXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBhcGkgPSB7XHJcbiAgICAgICAgdmVyc2lvbjogXCIxLjMuMC1iZXRhLjFcIixcclxuICAgICAgICBpbml0aWFsaXplZDogZmFsc2UsXHJcbiAgICAgICAgaXNCcm93c2VyOiBpc0Jyb3dzZXIsXHJcbiAgICAgICAgc3VwcG9ydGVkOiB0cnVlLFxyXG4gICAgICAgIHV0aWw6IHV0aWwsXHJcbiAgICAgICAgZmVhdHVyZXM6IHt9LFxyXG4gICAgICAgIG1vZHVsZXM6IG1vZHVsZXMsXHJcbiAgICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgICAgIGFsZXJ0T25GYWlsOiB0cnVlLFxyXG4gICAgICAgICAgICBhbGVydE9uV2FybjogZmFsc2UsXHJcbiAgICAgICAgICAgIHByZWZlclRleHRSYW5nZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGF1dG9Jbml0aWFsaXplOiAodHlwZW9mIHJhbmd5QXV0b0luaXRpYWxpemUgPT0gVU5ERUZJTkVEKSA/IHRydWUgOiByYW5neUF1dG9Jbml0aWFsaXplXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb25zb2xlTG9nKG1zZykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPSBVTkRFRklORUQgJiYgaXNIb3N0TWV0aG9kKGNvbnNvbGUsIFwibG9nXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFsZXJ0T3JMb2cobXNnLCBzaG91bGRBbGVydCkge1xyXG4gICAgICAgIGlmIChpc0Jyb3dzZXIgJiYgc2hvdWxkQWxlcnQpIHtcclxuICAgICAgICAgICAgYWxlcnQobXNnKTtcclxuICAgICAgICB9IGVsc2UgIHtcclxuICAgICAgICAgICAgY29uc29sZUxvZyhtc2cpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmYWlsKHJlYXNvbikge1xyXG4gICAgICAgIGFwaS5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgYXBpLnN1cHBvcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIGFsZXJ0T3JMb2coXCJSYW5neSBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQuIFJlYXNvbjogXCIgKyByZWFzb24sIGFwaS5jb25maWcuYWxlcnRPbkZhaWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGFwaS5mYWlsID0gZmFpbDtcclxuXHJcbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xyXG4gICAgICAgIGFsZXJ0T3JMb2coXCJSYW5neSB3YXJuaW5nOiBcIiArIG1zZywgYXBpLmNvbmZpZy5hbGVydE9uV2Fybik7XHJcbiAgICB9XHJcblxyXG4gICAgYXBpLndhcm4gPSB3YXJuO1xyXG5cclxuICAgIC8vIEFkZCB1dGlsaXR5IGV4dGVuZCgpIG1ldGhvZFxyXG4gICAgdmFyIGV4dGVuZDtcclxuICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eSkge1xyXG4gICAgICAgIHV0aWwuZXh0ZW5kID0gZXh0ZW5kID0gZnVuY3Rpb24ob2JqLCBwcm9wcywgZGVlcCkge1xyXG4gICAgICAgICAgICB2YXIgbywgcDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IG9ialtpXTtcclxuICAgICAgICAgICAgICAgICAgICBwID0gcHJvcHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZXAgJiYgbyAhPT0gbnVsbCAmJiB0eXBlb2YgbyA9PSBcIm9iamVjdFwiICYmIHAgIT09IG51bGwgJiYgdHlwZW9mIHAgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmQobywgcCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG9ialtpXSA9IHA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciB0b1N0cmluZywgd2hpY2ggZG9lcyBub3Qgc2hvdyB1cCBpbiBmb3IuLi5pbiBsb29wcyBpbiBJRSA8PSA4XHJcbiAgICAgICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShcInRvU3RyaW5nXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBvYmoudG9TdHJpbmcgPSBwcm9wcy50b1N0cmluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHV0aWwuY3JlYXRlT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnNQYXJhbSwgZGVmYXVsdHMpIHtcclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgZXh0ZW5kKG9wdGlvbnMsIGRlZmF1bHRzKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnNQYXJhbSkge1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKG9wdGlvbnMsIG9wdGlvbnNQYXJhbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmFpbChcImhhc093blByb3BlcnR5IG5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGVzdCB3aGV0aGVyIHdlJ3JlIGluIGEgYnJvd3NlciBhbmQgYmFpbCBvdXQgaWYgbm90XHJcbiAgICBpZiAoIWlzQnJvd3Nlcikge1xyXG4gICAgICAgIGZhaWwoXCJSYW5neSBjYW4gb25seSBydW4gaW4gYSBicm93c2VyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRlc3Qgd2hldGhlciBBcnJheS5wcm90b3R5cGUuc2xpY2UgY2FuIGJlIHJlbGllZCBvbiBmb3IgTm9kZUxpc3RzIGFuZCB1c2UgYW4gYWx0ZXJuYXRpdmUgdG9BcnJheSgpIGlmIG5vdFxyXG4gICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0b0FycmF5O1xyXG5cclxuICAgICAgICBpZiAoaXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpKTtcclxuICAgICAgICAgICAgdmFyIHNsaWNlID0gW10uc2xpY2U7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2xpY2UuY2FsbChlbC5jaGlsZE5vZGVzLCAwKVswXS5ub2RlVHlwZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9BcnJheSA9IGZ1bmN0aW9uKGFycmF5TGlrZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheUxpa2UsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRvQXJyYXkpIHtcclxuICAgICAgICAgICAgdG9BcnJheSA9IGZ1bmN0aW9uKGFycmF5TGlrZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5TGlrZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycltpXSA9IGFycmF5TGlrZVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1dGlsLnRvQXJyYXkgPSB0b0FycmF5O1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICAvLyBWZXJ5IHNpbXBsZSBldmVudCBoYW5kbGVyIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCBkb2Vzbid0IGF0dGVtcHQgdG8gc29sdmUgaXNzdWVzIHN1Y2ggYXMgXCJ0aGlzXCIgaGFuZGxpbmcgb3JcclxuICAgIC8vIG5vcm1hbGl6YXRpb24gb2YgZXZlbnQgcHJvcGVydGllc1xyXG4gICAgdmFyIGFkZExpc3RlbmVyO1xyXG4gICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsIFwiYWRkRXZlbnRMaXN0ZW5lclwiKSkge1xyXG4gICAgICAgICAgICBhZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKG9iaiwgZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNIb3N0TWV0aG9kKGRvY3VtZW50LCBcImF0dGFjaEV2ZW50XCIpKSB7XHJcbiAgICAgICAgICAgIGFkZExpc3RlbmVyID0gZnVuY3Rpb24ob2JqLCBldmVudFR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgICAgICBvYmouYXR0YWNoRXZlbnQoXCJvblwiICsgZXZlbnRUeXBlLCBsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmFpbChcIkRvY3VtZW50IGRvZXMgbm90IGhhdmUgcmVxdWlyZWQgYWRkRXZlbnRMaXN0ZW5lciBvciBhdHRhY2hFdmVudCBtZXRob2RcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1dGlsLmFkZExpc3RlbmVyID0gYWRkTGlzdGVuZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRMaXN0ZW5lcnMgPSBbXTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRFcnJvckRlc2MoZXgpIHtcclxuICAgICAgICByZXR1cm4gZXgubWVzc2FnZSB8fCBleC5kZXNjcmlwdGlvbiB8fCBTdHJpbmcoZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEluaXRpYWxpemF0aW9uXHJcbiAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgIGlmICghaXNCcm93c2VyIHx8IGFwaS5pbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0ZXN0UmFuZ2U7XHJcbiAgICAgICAgdmFyIGltcGxlbWVudHNEb21SYW5nZSA9IGZhbHNlLCBpbXBsZW1lbnRzVGV4dFJhbmdlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIEZpcnN0LCBwZXJmb3JtIGJhc2ljIGZlYXR1cmUgdGVzdHNcclxuXHJcbiAgICAgICAgaWYgKGlzSG9zdE1ldGhvZChkb2N1bWVudCwgXCJjcmVhdGVSYW5nZVwiKSkge1xyXG4gICAgICAgICAgICB0ZXN0UmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgICAgICAgICBpZiAoYXJlSG9zdE1ldGhvZHModGVzdFJhbmdlLCBkb21SYW5nZU1ldGhvZHMpICYmIGFyZUhvc3RQcm9wZXJ0aWVzKHRlc3RSYW5nZSwgZG9tUmFuZ2VQcm9wZXJ0aWVzKSkge1xyXG4gICAgICAgICAgICAgICAgaW1wbGVtZW50c0RvbVJhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTtcclxuICAgICAgICBpZiAoIWJvZHkgfHwgYm9keS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9IFwiYm9keVwiKSB7XHJcbiAgICAgICAgICAgIGZhaWwoXCJObyBib2R5IGVsZW1lbnQgZm91bmRcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChib2R5ICYmIGlzSG9zdE1ldGhvZChib2R5LCBcImNyZWF0ZVRleHRSYW5nZVwiKSkge1xyXG4gICAgICAgICAgICB0ZXN0UmFuZ2UgPSBib2R5LmNyZWF0ZVRleHRSYW5nZSgpO1xyXG4gICAgICAgICAgICBpZiAoaXNUZXh0UmFuZ2UodGVzdFJhbmdlKSkge1xyXG4gICAgICAgICAgICAgICAgaW1wbGVtZW50c1RleHRSYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghaW1wbGVtZW50c0RvbVJhbmdlICYmICFpbXBsZW1lbnRzVGV4dFJhbmdlKSB7XHJcbiAgICAgICAgICAgIGZhaWwoXCJOZWl0aGVyIFJhbmdlIG5vciBUZXh0UmFuZ2UgYXJlIGF2YWlsYWJsZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXBpLmluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICBhcGkuZmVhdHVyZXMgPSB7XHJcbiAgICAgICAgICAgIGltcGxlbWVudHNEb21SYW5nZTogaW1wbGVtZW50c0RvbVJhbmdlLFxyXG4gICAgICAgICAgICBpbXBsZW1lbnRzVGV4dFJhbmdlOiBpbXBsZW1lbnRzVGV4dFJhbmdlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBtb2R1bGVzXHJcbiAgICAgICAgdmFyIG1vZHVsZSwgZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgIGZvciAodmFyIG1vZHVsZU5hbWUgaW4gbW9kdWxlcykge1xyXG4gICAgICAgICAgICBpZiAoIChtb2R1bGUgPSBtb2R1bGVzW21vZHVsZU5hbWVdKSBpbnN0YW5jZW9mIE1vZHVsZSApIHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZS5pbml0KG1vZHVsZSwgYXBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2FsbCBpbml0IGxpc3RlbmVyc1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbml0TGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpbml0TGlzdGVuZXJzW2ldKGFwaSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlJhbmd5IGluaXQgbGlzdGVuZXIgdGhyZXcgYW4gZXhjZXB0aW9uLiBDb250aW51aW5nLiBEZXRhaWw6IFwiICsgZ2V0RXJyb3JEZXNjKGV4KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBBbGxvdyBleHRlcm5hbCBzY3JpcHRzIHRvIGluaXRpYWxpemUgdGhpcyBsaWJyYXJ5IGluIGNhc2UgaXQncyBsb2FkZWQgYWZ0ZXIgdGhlIGRvY3VtZW50IGhhcyBsb2FkZWRcclxuICAgIGFwaS5pbml0ID0gaW5pdDtcclxuXHJcbiAgICAvLyBFeGVjdXRlIGxpc3RlbmVyIGltbWVkaWF0ZWx5IGlmIGFscmVhZHkgaW5pdGlhbGl6ZWRcclxuICAgIGFwaS5hZGRJbml0TGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xyXG4gICAgICAgIGlmIChhcGkuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgbGlzdGVuZXIoYXBpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbml0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIHNoaW1MaXN0ZW5lcnMgPSBbXTtcclxuXHJcbiAgICBhcGkuYWRkU2hpbUxpc3RlbmVyID0gZnVuY3Rpb24obGlzdGVuZXIpIHtcclxuICAgICAgICBzaGltTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBzaGltKHdpbikge1xyXG4gICAgICAgIHdpbiA9IHdpbiB8fCB3aW5kb3c7XHJcbiAgICAgICAgaW5pdCgpO1xyXG5cclxuICAgICAgICAvLyBOb3RpZnkgbGlzdGVuZXJzXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNoaW1MaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgICAgICAgc2hpbUxpc3RlbmVyc1tpXSh3aW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNCcm93c2VyKSB7XHJcbiAgICAgICAgYXBpLnNoaW0gPSBhcGkuY3JlYXRlTWlzc2luZ05hdGl2ZUFwaSA9IHNoaW07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gTW9kdWxlKG5hbWUsIGRlcGVuZGVuY2llcywgaW5pdGlhbGl6ZXIpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN1cHBvcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZXIgPSBpbml0aWFsaXplcjtcclxuICAgIH1cclxuXHJcbiAgICBNb2R1bGUucHJvdG90eXBlID0ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVxdWlyZWRNb2R1bGVOYW1lcyA9IHRoaXMuZGVwZW5kZW5jaWVzIHx8IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmVxdWlyZWRNb2R1bGVOYW1lcy5sZW5ndGgsIHJlcXVpcmVkTW9kdWxlLCBtb2R1bGVOYW1lOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWUgPSByZXF1aXJlZE1vZHVsZU5hbWVzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkTW9kdWxlID0gbW9kdWxlc1ttb2R1bGVOYW1lXTtcclxuICAgICAgICAgICAgICAgIGlmICghcmVxdWlyZWRNb2R1bGUgfHwgIShyZXF1aXJlZE1vZHVsZSBpbnN0YW5jZW9mIE1vZHVsZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXF1aXJlZCBtb2R1bGUgJ1wiICsgbW9kdWxlTmFtZSArIFwiJyBub3QgZm91bmRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWRNb2R1bGUuaW5pdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghcmVxdWlyZWRNb2R1bGUuc3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWlyZWQgbW9kdWxlICdcIiArIG1vZHVsZU5hbWUgKyBcIicgbm90IHN1cHBvcnRlZFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gTm93IHJ1biBpbml0aWFsaXplclxyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVyKHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZhaWw6IGZ1bmN0aW9uKHJlYXNvbikge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5zdXBwb3J0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9kdWxlICdcIiArIHRoaXMubmFtZSArIFwiJyBmYWlsZWQgdG8gbG9hZDogXCIgKyByZWFzb24pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHdhcm46IGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICBhcGkud2FybihcIk1vZHVsZSBcIiArIHRoaXMubmFtZSArIFwiOiBcIiArIG1zZyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVwcmVjYXRpb25Ob3RpY2U6IGZ1bmN0aW9uKGRlcHJlY2F0ZWQsIHJlcGxhY2VtZW50KSB7XHJcbiAgICAgICAgICAgIGFwaS53YXJuKFwiREVQUkVDQVRFRDogXCIgKyBkZXByZWNhdGVkICsgXCIgaW4gbW9kdWxlIFwiICsgdGhpcy5uYW1lICsgXCJpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiICtcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50ICsgXCIgaW5zdGVhZFwiKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjcmVhdGVFcnJvcjogZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJFcnJvciBpbiBSYW5neSBcIiArIHRoaXMubmFtZSArIFwiIG1vZHVsZTogXCIgKyBtc2cpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlTW9kdWxlKG5hbWUsIGRlcGVuZGVuY2llcywgaW5pdEZ1bmMpIHtcclxuICAgICAgICB2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZShuYW1lLCBkZXBlbmRlbmNpZXMsIGZ1bmN0aW9uKG1vZHVsZSkge1xyXG4gICAgICAgICAgICBpZiAoIW1vZHVsZS5pbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgbW9kdWxlLmluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdEZ1bmMoYXBpLCBtb2R1bGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZS5zdXBwb3J0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJNb2R1bGUgJ1wiICsgbmFtZSArIFwiJyBmYWlsZWQgdG8gbG9hZDogXCIgKyBnZXRFcnJvckRlc2MoZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXguc3RhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZUxvZyhleC5zdGFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbW9kdWxlc1tuYW1lXSA9IG5ld01vZHVsZTtcclxuICAgICAgICByZXR1cm4gbmV3TW9kdWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGFwaS5jcmVhdGVNb2R1bGUgPSBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgLy8gQWxsb3cgMiBvciAzIGFyZ3VtZW50cyAoc2Vjb25kIGFyZ3VtZW50IGlzIGFuIG9wdGlvbmFsIGFycmF5IG9mIGRlcGVuZGVuY2llcylcclxuICAgICAgICB2YXIgaW5pdEZ1bmMsIGRlcGVuZGVuY2llcztcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgIGluaXRGdW5jID0gYXJndW1lbnRzWzFdO1xyXG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBbXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbml0RnVuYyA9IGFyZ3VtZW50c1syXTtcclxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gYXJndW1lbnRzWzFdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG1vZHVsZSA9IGNyZWF0ZU1vZHVsZShuYW1lLCBkZXBlbmRlbmNpZXMsIGluaXRGdW5jKTtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgbW9kdWxlIGltbWVkaWF0ZWx5IGlmIHRoZSBjb3JlIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWRcclxuICAgICAgICBpZiAoYXBpLmluaXRpYWxpemVkICYmIGFwaS5zdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgbW9kdWxlLmluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFwaS5jcmVhdGVDb3JlTW9kdWxlID0gZnVuY3Rpb24obmFtZSwgZGVwZW5kZW5jaWVzLCBpbml0RnVuYykge1xyXG4gICAgICAgIGNyZWF0ZU1vZHVsZShuYW1lLCBkZXBlbmRlbmNpZXMsIGluaXRGdW5jKTtcclxuICAgIH07XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBFbnN1cmUgcmFuZ3kucmFuZ2VQcm90b3R5cGUgYW5kIHJhbmd5LnNlbGVjdGlvblByb3RvdHlwZSBhcmUgYXZhaWxhYmxlIGltbWVkaWF0ZWx5XHJcblxyXG4gICAgZnVuY3Rpb24gUmFuZ2VQcm90b3R5cGUoKSB7fVxyXG4gICAgYXBpLlJhbmdlUHJvdG90eXBlID0gUmFuZ2VQcm90b3R5cGU7XHJcbiAgICBhcGkucmFuZ2VQcm90b3R5cGUgPSBuZXcgUmFuZ2VQcm90b3R5cGUoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBTZWxlY3Rpb25Qcm90b3R5cGUoKSB7fVxyXG4gICAgYXBpLnNlbGVjdGlvblByb3RvdHlwZSA9IG5ldyBTZWxlY3Rpb25Qcm90b3R5cGUoKTtcclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuICAgIC8vIERPTSB1dGlsaXR5IG1ldGhvZHMgdXNlZCBieSBSYW5neVxuICAgIGFwaS5jcmVhdGVDb3JlTW9kdWxlKFwiRG9tVXRpbFwiLCBbXSwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHtcbiAgICAgICAgdmFyIFVOREVGID0gXCJ1bmRlZmluZWRcIjtcbiAgICAgICAgdmFyIHV0aWwgPSBhcGkudXRpbDtcblxuICAgICAgICAvLyBQZXJmb3JtIGZlYXR1cmUgdGVzdHNcbiAgICAgICAgaWYgKCF1dGlsLmFyZUhvc3RNZXRob2RzKGRvY3VtZW50LCBbXCJjcmVhdGVEb2N1bWVudEZyYWdtZW50XCIsIFwiY3JlYXRlRWxlbWVudFwiLCBcImNyZWF0ZVRleHROb2RlXCJdKSkge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJkb2N1bWVudCBtaXNzaW5nIGEgTm9kZSBjcmVhdGlvbiBtZXRob2RcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXV0aWwuaXNIb3N0TWV0aG9kKGRvY3VtZW50LCBcImdldEVsZW1lbnRzQnlUYWdOYW1lXCIpKSB7XG4gICAgICAgICAgICBtb2R1bGUuZmFpbChcImRvY3VtZW50IG1pc3NpbmcgZ2V0RWxlbWVudHNCeVRhZ05hbWUgbWV0aG9kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaWYgKCF1dGlsLmFyZUhvc3RNZXRob2RzKGVsLCBbXCJpbnNlcnRCZWZvcmVcIiwgXCJhcHBlbmRDaGlsZFwiLCBcImNsb25lTm9kZVwiXSB8fFxuICAgICAgICAgICAgICAgICF1dGlsLmFyZUhvc3RPYmplY3RzKGVsLCBbXCJwcmV2aW91c1NpYmxpbmdcIiwgXCJuZXh0U2libGluZ1wiLCBcImNoaWxkTm9kZXNcIiwgXCJwYXJlbnROb2RlXCJdKSkpIHtcbiAgICAgICAgICAgIG1vZHVsZS5mYWlsKFwiSW5jb21wbGV0ZSBFbGVtZW50IGltcGxlbWVudGF0aW9uXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW5uZXJIVE1MIGlzIHJlcXVpcmVkIGZvciBSYW5nZSdzIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBtZXRob2RcbiAgICAgICAgaWYgKCF1dGlsLmlzSG9zdFByb3BlcnR5KGVsLCBcImlubmVySFRNTFwiKSkge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJFbGVtZW50IGlzIG1pc3NpbmcgaW5uZXJIVE1MIHByb3BlcnR5XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJ0ZXN0XCIpO1xuICAgICAgICBpZiAoIXV0aWwuYXJlSG9zdE1ldGhvZHModGV4dE5vZGUsIFtcInNwbGl0VGV4dFwiLCBcImRlbGV0ZURhdGFcIiwgXCJpbnNlcnREYXRhXCIsIFwiYXBwZW5kRGF0YVwiLCBcImNsb25lTm9kZVwiXSB8fFxuICAgICAgICAgICAgICAgICF1dGlsLmFyZUhvc3RPYmplY3RzKGVsLCBbXCJwcmV2aW91c1NpYmxpbmdcIiwgXCJuZXh0U2libGluZ1wiLCBcImNoaWxkTm9kZXNcIiwgXCJwYXJlbnROb2RlXCJdKSB8fFxuICAgICAgICAgICAgICAgICF1dGlsLmFyZUhvc3RQcm9wZXJ0aWVzKHRleHROb2RlLCBbXCJkYXRhXCJdKSkpIHtcbiAgICAgICAgICAgIG1vZHVsZS5mYWlsKFwiSW5jb21wbGV0ZSBUZXh0IE5vZGUgaW1wbGVtZW50YXRpb25cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgIC8vIFJlbW92ZWQgdXNlIG9mIGluZGV4T2YgYmVjYXVzZSBvZiBhIGJpemFycmUgYnVnIGluIE9wZXJhIHRoYXQgaXMgdGhyb3duIGluIG9uZSBvZiB0aGUgQWNpZDMgdGVzdHMuIEkgaGF2ZW4ndCBiZWVuXG4gICAgICAgIC8vIGFibGUgdG8gcmVwbGljYXRlIGl0IG91dHNpZGUgb2YgdGhlIHRlc3QuIFRoZSBidWcgaXMgdGhhdCBpbmRleE9mIHJldHVybnMgLTEgd2hlbiBjYWxsZWQgb24gYW4gQXJyYXkgdGhhdFxuICAgICAgICAvLyBjb250YWlucyBqdXN0IHRoZSBkb2N1bWVudCBhcyBhIHNpbmdsZSBlbGVtZW50IGFuZCB0aGUgdmFsdWUgc2VhcmNoZWQgZm9yIGlzIHRoZSBkb2N1bWVudC5cbiAgICAgICAgdmFyIGFycmF5Q29udGFpbnMgPSAvKkFycmF5LnByb3RvdHlwZS5pbmRleE9mID9cbiAgICAgICAgICAgIGZ1bmN0aW9uKGFyciwgdmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyci5pbmRleE9mKHZhbCkgPiAtMTtcbiAgICAgICAgICAgIH06Ki9cblxuICAgICAgICAgICAgZnVuY3Rpb24oYXJyLCB2YWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldID09PSB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy8gT3BlcmEgMTEgcHV0cyBIVE1MIGVsZW1lbnRzIGluIHRoZSBudWxsIG5hbWVzcGFjZSwgaXQgc2VlbXMsIGFuZCBJRSA3IGhhcyB1bmRlZmluZWQgbmFtZXNwYWNlVVJJXG4gICAgICAgIGZ1bmN0aW9uIGlzSHRtbE5hbWVzcGFjZShub2RlKSB7XG4gICAgICAgICAgICB2YXIgbnM7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIG5vZGUubmFtZXNwYWNlVVJJID09IFVOREVGIHx8ICgobnMgPSBub2RlLm5hbWVzcGFjZVVSSSkgPT09IG51bGwgfHwgbnMgPT0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGFyZW50RWxlbWVudChub2RlKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgcmV0dXJuIChwYXJlbnQubm9kZVR5cGUgPT0gMSkgPyBwYXJlbnQgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Tm9kZUluZGV4KG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHdoaWxlKCAobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSApIHtcbiAgICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5vZGVMZW5ndGgobm9kZSkge1xuICAgICAgICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldENvbW1vbkFuY2VzdG9yKG5vZGUxLCBub2RlMikge1xuICAgICAgICAgICAgdmFyIGFuY2VzdG9ycyA9IFtdLCBuO1xuICAgICAgICAgICAgZm9yIChuID0gbm9kZTE7IG47IG4gPSBuLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBhbmNlc3RvcnMucHVzaChuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChuID0gbm9kZTI7IG47IG4gPSBuLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlDb250YWlucyhhbmNlc3RvcnMsIG4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0FuY2VzdG9yT2YoYW5jZXN0b3IsIGRlc2NlbmRhbnQsIHNlbGZJc0FuY2VzdG9yKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHNlbGZJc0FuY2VzdG9yID8gZGVzY2VuZGFudCA6IGRlc2NlbmRhbnQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIHdoaWxlIChuKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4gPT09IGFuY2VzdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG4gPSBuLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNPcklzQW5jZXN0b3JPZihhbmNlc3RvciwgZGVzY2VuZGFudCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQW5jZXN0b3JPZihhbmNlc3RvciwgZGVzY2VuZGFudCwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRDbG9zZXN0QW5jZXN0b3JJbihub2RlLCBhbmNlc3Rvciwgc2VsZklzQW5jZXN0b3IpIHtcbiAgICAgICAgICAgIHZhciBwLCBuID0gc2VsZklzQW5jZXN0b3IgPyBub2RlIDogbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgd2hpbGUgKG4pIHtcbiAgICAgICAgICAgICAgICBwID0gbi5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGlmIChwID09PSBhbmNlc3Rvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbiA9IHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzQ2hhcmFjdGVyRGF0YU5vZGUobm9kZSkge1xuICAgICAgICAgICAgdmFyIHQgPSBub2RlLm5vZGVUeXBlO1xuICAgICAgICAgICAgcmV0dXJuIHQgPT0gMyB8fCB0ID09IDQgfHwgdCA9PSA4IDsgLy8gVGV4dCwgQ0RhdGFTZWN0aW9uIG9yIENvbW1lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzVGV4dE9yQ29tbWVudE5vZGUobm9kZSkge1xuICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHQgPSBub2RlLm5vZGVUeXBlO1xuICAgICAgICAgICAgcmV0dXJuIHQgPT0gMyB8fCB0ID09IDggOyAvLyBUZXh0IG9yIENvbW1lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluc2VydEFmdGVyKG5vZGUsIHByZWNlZGluZ05vZGUpIHtcbiAgICAgICAgICAgIHZhciBuZXh0Tm9kZSA9IHByZWNlZGluZ05vZGUubmV4dFNpYmxpbmcsIHBhcmVudCA9IHByZWNlZGluZ05vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGlmIChuZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dE5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBjYW5ub3QgdXNlIHNwbGl0VGV4dCgpIGJlY2F1c2UgaXQgaXMgYnVncmlkZGVuIGluIElFIDkuXG4gICAgICAgIGZ1bmN0aW9uIHNwbGl0RGF0YU5vZGUobm9kZSwgaW5kZXgsIHBvc2l0aW9uc1RvUHJlc2VydmUpIHtcbiAgICAgICAgICAgIHZhciBuZXdOb2RlID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgICAgbmV3Tm9kZS5kZWxldGVEYXRhKDAsIGluZGV4KTtcbiAgICAgICAgICAgIG5vZGUuZGVsZXRlRGF0YShpbmRleCwgbm9kZS5sZW5ndGggLSBpbmRleCk7XG4gICAgICAgICAgICBpbnNlcnRBZnRlcihuZXdOb2RlLCBub2RlKTtcblxuICAgICAgICAgICAgLy8gUHJlc2VydmUgcG9zaXRpb25zXG4gICAgICAgICAgICBpZiAocG9zaXRpb25zVG9QcmVzZXJ2ZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBwb3NpdGlvbjsgcG9zaXRpb24gPSBwb3NpdGlvbnNUb1ByZXNlcnZlW2krK107ICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgY2FzZSB3aGVyZSBwb3NpdGlvbiB3YXMgaW5zaWRlIHRoZSBwb3J0aW9uIG9mIG5vZGUgYWZ0ZXIgdGhlIHNwbGl0IHBvaW50XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbi5ub2RlID09IG5vZGUgJiYgcG9zaXRpb24ub2Zmc2V0ID4gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLm5vZGUgPSBuZXdOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ub2Zmc2V0IC09IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgcG9zaXRpb24gaXMgYSBub2RlIG9mZnNldCB3aXRoaW4gbm9kZSdzIHBhcmVudFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwb3NpdGlvbi5ub2RlID09IG5vZGUucGFyZW50Tm9kZSAmJiBwb3NpdGlvbi5vZmZzZXQgPiBnZXROb2RlSW5kZXgobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrcG9zaXRpb24ub2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXREb2N1bWVudChub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSA5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlLm93bmVyRG9jdW1lbnQgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZS5kb2N1bWVudCAhPSBVTkRFRikge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLmRvY3VtZW50O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RG9jdW1lbnQobm9kZS5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKFwiZ2V0RG9jdW1lbnQ6IG5vIGRvY3VtZW50IGZvdW5kIGZvciBub2RlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudChub2RlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jLmRlZmF1bHRWaWV3ICE9IFVOREVGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvYy5wYXJlbnRXaW5kb3cgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9jLnBhcmVudFdpbmRvdztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKFwiQ2Fubm90IGdldCBhIHdpbmRvdyBvYmplY3QgZm9yIG5vZGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRJZnJhbWVEb2N1bWVudChpZnJhbWVFbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpZnJhbWVFbC5jb250ZW50RG9jdW1lbnQgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWZyYW1lRWwuY29udGVudERvY3VtZW50O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWZyYW1lRWwuY29udGVudFdpbmRvdyAhPSBVTkRFRikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZnJhbWVFbC5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJnZXRJZnJhbWVEb2N1bWVudDogTm8gRG9jdW1lbnQgb2JqZWN0IGZvdW5kIGZvciBpZnJhbWUgZWxlbWVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldElmcmFtZVdpbmRvdyhpZnJhbWVFbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpZnJhbWVFbC5jb250ZW50V2luZG93ICE9IFVOREVGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmcmFtZUVsLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpZnJhbWVFbC5jb250ZW50RG9jdW1lbnQgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWZyYW1lRWwuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJnZXRJZnJhbWVXaW5kb3c6IE5vIFdpbmRvdyBvYmplY3QgZm91bmQgZm9yIGlmcmFtZSBlbGVtZW50XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBsb29rcyBiYWQuIElzIGl0IHdvcnRoIGl0P1xuICAgICAgICBmdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgdXRpbC5pc0hvc3RNZXRob2Qob2JqLCBcInNldFRpbWVvdXRcIikgJiYgdXRpbC5pc0hvc3RPYmplY3Qob2JqLCBcImRvY3VtZW50XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29udGVudERvY3VtZW50KG9iaiwgbW9kdWxlLCBtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICB2YXIgZG9jO1xuXG4gICAgICAgICAgICBpZiAoIW9iaikge1xuICAgICAgICAgICAgICAgIGRvYyA9IGRvY3VtZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUZXN0IGlmIGEgRE9NIG5vZGUgaGFzIGJlZW4gcGFzc2VkIGFuZCBvYnRhaW4gYSBkb2N1bWVudCBvYmplY3QgZm9yIGl0IGlmIHNvXG4gICAgICAgICAgICBlbHNlIGlmICh1dGlsLmlzSG9zdFByb3BlcnR5KG9iaiwgXCJub2RlVHlwZVwiKSkge1xuICAgICAgICAgICAgICAgIGRvYyA9IChvYmoubm9kZVR5cGUgPT0gMSAmJiBvYmoudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09IFwiaWZyYW1lXCIpID9cbiAgICAgICAgICAgICAgICAgICAgZ2V0SWZyYW1lRG9jdW1lbnQob2JqKSA6IGdldERvY3VtZW50KG9iaik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRlc3QgaWYgdGhlIGRvYyBwYXJhbWV0ZXIgYXBwZWFycyB0byBiZSBhIFdpbmRvdyBvYmplY3RcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzV2luZG93KG9iaikpIHtcbiAgICAgICAgICAgICAgICBkb2MgPSBvYmouZG9jdW1lbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZG9jKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKG1ldGhvZE5hbWUgKyBcIigpOiBQYXJhbWV0ZXIgbXVzdCBiZSBhIFdpbmRvdyBvYmplY3Qgb3IgRE9NIG5vZGVcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkb2M7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRSb290Q29udGFpbmVyKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnQ7XG4gICAgICAgICAgICB3aGlsZSAoIChwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUpICkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVQb2ludHMobm9kZUEsIG9mZnNldEEsIG5vZGVCLCBvZmZzZXRCKSB7XG4gICAgICAgICAgICAvLyBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItVHJhdmVyc2FsLVJhbmdlL3Jhbmdlcy5odG1sI0xldmVsLTItUmFuZ2UtQ29tcGFyaW5nXG4gICAgICAgICAgICB2YXIgbm9kZUMsIHJvb3QsIGNoaWxkQSwgY2hpbGRCLCBuO1xuICAgICAgICAgICAgaWYgKG5vZGVBID09IG5vZGVCKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FzZSAxOiBub2RlcyBhcmUgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0QSA9PT0gb2Zmc2V0QiA/IDAgOiAob2Zmc2V0QSA8IG9mZnNldEIpID8gLTEgOiAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggKG5vZGVDID0gZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUIsIG5vZGVBLCB0cnVlKSkgKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FzZSAyOiBub2RlIEMgKGNvbnRhaW5lciBCIG9yIGFuIGFuY2VzdG9yKSBpcyBhIGNoaWxkIG5vZGUgb2YgQVxuICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXRBIDw9IGdldE5vZGVJbmRleChub2RlQykgPyAtMSA6IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCAobm9kZUMgPSBnZXRDbG9zZXN0QW5jZXN0b3JJbihub2RlQSwgbm9kZUIsIHRydWUpKSApIHtcbiAgICAgICAgICAgICAgICAvLyBDYXNlIDM6IG5vZGUgQyAoY29udGFpbmVyIEEgb3IgYW4gYW5jZXN0b3IpIGlzIGEgY2hpbGQgbm9kZSBvZiBCXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE5vZGVJbmRleChub2RlQykgPCBvZmZzZXRCICA/IC0xIDogMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcm9vdCA9IGdldENvbW1vbkFuY2VzdG9yKG5vZGVBLCBub2RlQik7XG4gICAgICAgICAgICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbXBhcmVQb2ludHMgZXJyb3I6IG5vZGVzIGhhdmUgbm8gY29tbW9uIGFuY2VzdG9yXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENhc2UgNDogY29udGFpbmVycyBhcmUgc2libGluZ3Mgb3IgZGVzY2VuZGFudHMgb2Ygc2libGluZ3NcbiAgICAgICAgICAgICAgICBjaGlsZEEgPSAobm9kZUEgPT09IHJvb3QpID8gcm9vdCA6IGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGVBLCByb290LCB0cnVlKTtcbiAgICAgICAgICAgICAgICBjaGlsZEIgPSAobm9kZUIgPT09IHJvb3QpID8gcm9vdCA6IGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGVCLCByb290LCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIGlmIChjaGlsZEEgPT09IGNoaWxkQikge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBwb3NzaWJsZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJjb21wYXJlUG9pbnRzIGdvdCB0byBjYXNlIDQgYW5kIGNoaWxkQSBhbmQgY2hpbGRCIGFyZSB0aGUgc2FtZSFcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbiA9IHJvb3QuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID09PSBjaGlsZEEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4gPT09IGNoaWxkQikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG4ubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgIC8vIFRlc3QgZm9yIElFJ3MgY3Jhc2ggKElFIDYvNykgb3IgZXhjZXB0aW9uIChJRSA+PSA4KSB3aGVuIGEgcmVmZXJlbmNlIHRvIGdhcmJhZ2UtY29sbGVjdGVkIHRleHQgbm9kZSBpcyBxdWVyaWVkXG4gICAgICAgIHZhciBjcmFzaHlUZXh0Tm9kZXMgPSBmYWxzZTtcblxuICAgICAgICBmdW5jdGlvbiBpc0Jyb2tlbk5vZGUobm9kZSkge1xuICAgICAgICAgICAgdmFyIG47XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG4gPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJcIik7XG4gICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBcIjFcIjtcbiAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBcIjxiciAvPlwiO1xuICAgICAgICAgICAgY3Jhc2h5VGV4dE5vZGVzID0gaXNCcm9rZW5Ob2RlKHRleHROb2RlKTtcblxuICAgICAgICAgICAgYXBpLmZlYXR1cmVzLmNyYXNoeVRleHROb2RlcyA9IGNyYXNoeVRleHROb2RlcztcbiAgICAgICAgfSkoKTtcblxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgIGZ1bmN0aW9uIGluc3BlY3ROb2RlKG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltObyBub2RlXVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNyYXNoeVRleHROb2RlcyAmJiBpc0Jyb2tlbk5vZGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbQnJva2VuIG5vZGVdXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShub2RlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnXCInICsgbm9kZS5kYXRhICsgJ1wiJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWRBdHRyID0gbm9kZS5pZCA/ICcgaWQ9XCInICsgbm9kZS5pZCArICdcIicgOiBcIlwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBcIjxcIiArIG5vZGUubm9kZU5hbWUgKyBpZEF0dHIgKyBcIj5baW5kZXg6XCIgKyBnZXROb2RlSW5kZXgobm9kZSkgKyBcIixsZW5ndGg6XCIgKyBub2RlLmNoaWxkTm9kZXMubGVuZ3RoICsgXCJdW1wiICsgKG5vZGUuaW5uZXJIVE1MIHx8IFwiW2lubmVySFRNTCBub3Qgc3VwcG9ydGVkXVwiKS5zbGljZSgwLCAyNSkgKyBcIl1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2RlLm5vZGVOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZnJhZ21lbnRGcm9tTm9kZUNoaWxkcmVuKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IGdldERvY3VtZW50KG5vZGUpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgY2hpbGQ7XG4gICAgICAgICAgICB3aGlsZSAoIChjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCkgKSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSAhPSBVTkRFRikge1xuICAgICAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5ID0gZnVuY3Rpb24oZWwsIHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFdpbmRvdyhlbCkuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbClbcHJvcE5hbWVdO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSAhPSBVTkRFRikge1xuICAgICAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5ID0gZnVuY3Rpb24oZWwsIHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLmN1cnJlbnRTdHlsZVtwcm9wTmFtZV07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJObyBtZWFucyBvZiBvYnRhaW5pbmcgY29tcHV0ZWQgc3R5bGUgcHJvcGVydGllcyBmb3VuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIE5vZGVJdGVyYXRvcihyb290KSB7XG4gICAgICAgICAgICB0aGlzLnJvb3QgPSByb290O1xuICAgICAgICAgICAgdGhpcy5fbmV4dCA9IHJvb3Q7XG4gICAgICAgIH1cblxuICAgICAgICBOb2RlSXRlcmF0b3IucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgX2N1cnJlbnQ6IG51bGwsXG5cbiAgICAgICAgICAgIGhhc05leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuX25leHQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9uZXh0O1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCwgbmV4dDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IG4uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0ID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgobiAhPT0gdGhpcy5yb290KSAmJiAhKG5leHQgPSBuLm5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBuLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0ID0gbmV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IHRoaXMuX25leHQgPSB0aGlzLnJvb3QgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUl0ZXJhdG9yKHJvb3QpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZUl0ZXJhdG9yKHJvb3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gRG9tUG9zaXRpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBEb21Qb3NpdGlvbi5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uKHBvcykge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXBvcyAmJiB0aGlzLm5vZGUgPT09IHBvcy5ub2RlICYmIHRoaXMub2Zmc2V0ID09IHBvcy5vZmZzZXQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbnNwZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbRG9tUG9zaXRpb24oXCIgKyBpbnNwZWN0Tm9kZSh0aGlzLm5vZGUpICsgXCI6XCIgKyB0aGlzLm9mZnNldCArIFwiKV1cIjtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnNwZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gRE9NRXhjZXB0aW9uKGNvZGVOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmNvZGUgPSB0aGlzW2NvZGVOYW1lXTtcbiAgICAgICAgICAgIHRoaXMuY29kZU5hbWUgPSBjb2RlTmFtZTtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IFwiRE9NRXhjZXB0aW9uOiBcIiArIHRoaXMuY29kZU5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBET01FeGNlcHRpb24ucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgSU5ERVhfU0laRV9FUlI6IDEsXG4gICAgICAgICAgICBISUVSQVJDSFlfUkVRVUVTVF9FUlI6IDMsXG4gICAgICAgICAgICBXUk9OR19ET0NVTUVOVF9FUlI6IDQsXG4gICAgICAgICAgICBOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlI6IDcsXG4gICAgICAgICAgICBOT1RfRk9VTkRfRVJSOiA4LFxuICAgICAgICAgICAgTk9UX1NVUFBPUlRFRF9FUlI6IDksXG4gICAgICAgICAgICBJTlZBTElEX1NUQVRFX0VSUjogMTEsXG4gICAgICAgICAgICBJTlZBTElEX05PREVfVFlQRV9FUlI6IDI0XG4gICAgICAgIH07XG5cbiAgICAgICAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgICAgICAgfTtcblxuICAgICAgICBhcGkuZG9tID0ge1xuICAgICAgICAgICAgYXJyYXlDb250YWluczogYXJyYXlDb250YWlucyxcbiAgICAgICAgICAgIGlzSHRtbE5hbWVzcGFjZTogaXNIdG1sTmFtZXNwYWNlLFxuICAgICAgICAgICAgcGFyZW50RWxlbWVudDogcGFyZW50RWxlbWVudCxcbiAgICAgICAgICAgIGdldE5vZGVJbmRleDogZ2V0Tm9kZUluZGV4LFxuICAgICAgICAgICAgZ2V0Tm9kZUxlbmd0aDogZ2V0Tm9kZUxlbmd0aCxcbiAgICAgICAgICAgIGdldENvbW1vbkFuY2VzdG9yOiBnZXRDb21tb25BbmNlc3RvcixcbiAgICAgICAgICAgIGlzQW5jZXN0b3JPZjogaXNBbmNlc3Rvck9mLFxuICAgICAgICAgICAgaXNPcklzQW5jZXN0b3JPZjogaXNPcklzQW5jZXN0b3JPZixcbiAgICAgICAgICAgIGdldENsb3Nlc3RBbmNlc3RvckluOiBnZXRDbG9zZXN0QW5jZXN0b3JJbixcbiAgICAgICAgICAgIGlzQ2hhcmFjdGVyRGF0YU5vZGU6IGlzQ2hhcmFjdGVyRGF0YU5vZGUsXG4gICAgICAgICAgICBpc1RleHRPckNvbW1lbnROb2RlOiBpc1RleHRPckNvbW1lbnROb2RlLFxuICAgICAgICAgICAgaW5zZXJ0QWZ0ZXI6IGluc2VydEFmdGVyLFxuICAgICAgICAgICAgc3BsaXREYXRhTm9kZTogc3BsaXREYXRhTm9kZSxcbiAgICAgICAgICAgIGdldERvY3VtZW50OiBnZXREb2N1bWVudCxcbiAgICAgICAgICAgIGdldFdpbmRvdzogZ2V0V2luZG93LFxuICAgICAgICAgICAgZ2V0SWZyYW1lV2luZG93OiBnZXRJZnJhbWVXaW5kb3csXG4gICAgICAgICAgICBnZXRJZnJhbWVEb2N1bWVudDogZ2V0SWZyYW1lRG9jdW1lbnQsXG4gICAgICAgICAgICBnZXRCb2R5OiB1dGlsLmdldEJvZHksXG4gICAgICAgICAgICBpc1dpbmRvdzogaXNXaW5kb3csXG4gICAgICAgICAgICBnZXRDb250ZW50RG9jdW1lbnQ6IGdldENvbnRlbnREb2N1bWVudCxcbiAgICAgICAgICAgIGdldFJvb3RDb250YWluZXI6IGdldFJvb3RDb250YWluZXIsXG4gICAgICAgICAgICBjb21wYXJlUG9pbnRzOiBjb21wYXJlUG9pbnRzLFxuICAgICAgICAgICAgaXNCcm9rZW5Ob2RlOiBpc0Jyb2tlbk5vZGUsXG4gICAgICAgICAgICBpbnNwZWN0Tm9kZTogaW5zcGVjdE5vZGUsXG4gICAgICAgICAgICBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHk6IGdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eSxcbiAgICAgICAgICAgIGZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbjogZnJhZ21lbnRGcm9tTm9kZUNoaWxkcmVuLFxuICAgICAgICAgICAgY3JlYXRlSXRlcmF0b3I6IGNyZWF0ZUl0ZXJhdG9yLFxuICAgICAgICAgICAgRG9tUG9zaXRpb246IERvbVBvc2l0aW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpLkRPTUV4Y2VwdGlvbiA9IERPTUV4Y2VwdGlvbjtcbiAgICB9KTtcclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuICAgIC8vIFB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiBET00gUmFuZ2VcbiAgICBhcGkuY3JlYXRlQ29yZU1vZHVsZShcIkRvbVJhbmdlXCIsIFtcIkRvbVV0aWxcIl0sIGZ1bmN0aW9uKGFwaSwgbW9kdWxlKSB7XG4gICAgICAgIHZhciBkb20gPSBhcGkuZG9tO1xuICAgICAgICB2YXIgdXRpbCA9IGFwaS51dGlsO1xuICAgICAgICB2YXIgRG9tUG9zaXRpb24gPSBkb20uRG9tUG9zaXRpb247XG4gICAgICAgIHZhciBET01FeGNlcHRpb24gPSBhcGkuRE9NRXhjZXB0aW9uO1xuXG4gICAgICAgIHZhciBpc0NoYXJhY3RlckRhdGFOb2RlID0gZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGU7XG4gICAgICAgIHZhciBnZXROb2RlSW5kZXggPSBkb20uZ2V0Tm9kZUluZGV4O1xuICAgICAgICB2YXIgaXNPcklzQW5jZXN0b3JPZiA9IGRvbS5pc09ySXNBbmNlc3Rvck9mO1xuICAgICAgICB2YXIgZ2V0RG9jdW1lbnQgPSBkb20uZ2V0RG9jdW1lbnQ7XG4gICAgICAgIHZhciBjb21wYXJlUG9pbnRzID0gZG9tLmNvbXBhcmVQb2ludHM7XG4gICAgICAgIHZhciBzcGxpdERhdGFOb2RlID0gZG9tLnNwbGl0RGF0YU5vZGU7XG4gICAgICAgIHZhciBnZXRDbG9zZXN0QW5jZXN0b3JJbiA9IGRvbS5nZXRDbG9zZXN0QW5jZXN0b3JJbjtcbiAgICAgICAgdmFyIGdldE5vZGVMZW5ndGggPSBkb20uZ2V0Tm9kZUxlbmd0aDtcbiAgICAgICAgdmFyIGFycmF5Q29udGFpbnMgPSBkb20uYXJyYXlDb250YWlucztcbiAgICAgICAgdmFyIGdldFJvb3RDb250YWluZXIgPSBkb20uZ2V0Um9vdENvbnRhaW5lcjtcbiAgICAgICAgdmFyIGNyYXNoeVRleHROb2RlcyA9IGFwaS5mZWF0dXJlcy5jcmFzaHlUZXh0Tm9kZXM7XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAvLyBVdGlsaXR5IGZ1bmN0aW9uc1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKG5vZGUsIHJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gKG5vZGUubm9kZVR5cGUgIT0gMykgJiZcbiAgICAgICAgICAgICAgICAgICAoaXNPcklzQW5jZXN0b3JPZihub2RlLCByYW5nZS5zdGFydENvbnRhaW5lcikgfHwgaXNPcklzQW5jZXN0b3JPZihub2RlLCByYW5nZS5lbmRDb250YWluZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFJhbmdlRG9jdW1lbnQocmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiByYW5nZS5kb2N1bWVudCB8fCBnZXREb2N1bWVudChyYW5nZS5zdGFydENvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRCb3VuZGFyeUJlZm9yZU5vZGUobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb21Qb3NpdGlvbihub2RlLnBhcmVudE5vZGUsIGdldE5vZGVJbmRleChub2RlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRCb3VuZGFyeUFmdGVyTm9kZShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERvbVBvc2l0aW9uKG5vZGUucGFyZW50Tm9kZSwgZ2V0Tm9kZUluZGV4KG5vZGUpICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbnNlcnROb2RlQXRQb3NpdGlvbihub2RlLCBuLCBvKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3ROb2RlSW5zZXJ0ZWQgPSBub2RlLm5vZGVUeXBlID09IDExID8gbm9kZS5maXJzdENoaWxkIDogbm9kZTtcbiAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKG4pKSB7XG4gICAgICAgICAgICAgICAgaWYgKG8gPT0gbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tLmluc2VydEFmdGVyKG5vZGUsIG4pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbyA9PSAwID8gbiA6IHNwbGl0RGF0YU5vZGUobiwgbykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobyA+PSBuLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbi5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbi5pbnNlcnRCZWZvcmUobm9kZSwgbi5jaGlsZE5vZGVzW29dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmaXJzdE5vZGVJbnNlcnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJhbmdlc0ludGVyc2VjdChyYW5nZUEsIHJhbmdlQiwgdG91Y2hpbmdJc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZChyYW5nZUEpO1xuICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZChyYW5nZUIpO1xuXG4gICAgICAgICAgICBpZiAoZ2V0UmFuZ2VEb2N1bWVudChyYW5nZUIpICE9IGdldFJhbmdlRG9jdW1lbnQocmFuZ2VBKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJXUk9OR19ET0NVTUVOVF9FUlJcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdGFydENvbXBhcmlzb24gPSBjb21wYXJlUG9pbnRzKHJhbmdlQS5zdGFydENvbnRhaW5lciwgcmFuZ2VBLnN0YXJ0T2Zmc2V0LCByYW5nZUIuZW5kQ29udGFpbmVyLCByYW5nZUIuZW5kT2Zmc2V0KSxcbiAgICAgICAgICAgICAgICBlbmRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyhyYW5nZUEuZW5kQ29udGFpbmVyLCByYW5nZUEuZW5kT2Zmc2V0LCByYW5nZUIuc3RhcnRDb250YWluZXIsIHJhbmdlQi5zdGFydE9mZnNldCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nID8gc3RhcnRDb21wYXJpc29uIDw9IDAgJiYgZW5kQ29tcGFyaXNvbiA+PSAwIDogc3RhcnRDb21wYXJpc29uIDwgMCAmJiBlbmRDb21wYXJpc29uID4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNsb25lU3VidHJlZShpdGVyYXRvcikge1xuICAgICAgICAgICAgdmFyIHBhcnRpYWxseVNlbGVjdGVkO1xuICAgICAgICAgICAgZm9yICh2YXIgbm9kZSwgZnJhZyA9IGdldFJhbmdlRG9jdW1lbnQoaXRlcmF0b3IucmFuZ2UpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgc3ViSXRlcmF0b3I7IG5vZGUgPSBpdGVyYXRvci5uZXh0KCk7ICkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxseVNlbGVjdGVkID0gaXRlcmF0b3IuaXNQYXJ0aWFsbHlTZWxlY3RlZFN1YnRyZWUoKTtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5jbG9uZU5vZGUoIXBhcnRpYWxseVNlbGVjdGVkKTtcbiAgICAgICAgICAgICAgICBpZiAocGFydGlhbGx5U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IgPSBpdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChjbG9uZVN1YnRyZWUoc3ViSXRlcmF0b3IpKTtcbiAgICAgICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMTApIHsgLy8gRG9jdW1lbnRUeXBlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJISUVSQVJDSFlfUkVRVUVTVF9FUlJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnJhZztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVTdWJ0cmVlKHJhbmdlSXRlcmF0b3IsIGZ1bmMsIGl0ZXJhdG9yU3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBpdCwgbjtcbiAgICAgICAgICAgIGl0ZXJhdG9yU3RhdGUgPSBpdGVyYXRvclN0YXRlIHx8IHsgc3RvcDogZmFsc2UgfTtcbiAgICAgICAgICAgIGZvciAodmFyIG5vZGUsIHN1YlJhbmdlSXRlcmF0b3I7IG5vZGUgPSByYW5nZUl0ZXJhdG9yLm5leHQoKTsgKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlSXRlcmF0b3IuaXNQYXJ0aWFsbHlTZWxlY3RlZFN1YnRyZWUoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnVuYyhub2RlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yU3RhdGUuc3RvcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbm9kZSBpcyBwYXJ0aWFsbHkgc2VsZWN0ZWQgYnkgdGhlIFJhbmdlLCBzbyB3ZSBjYW4gdXNlIGEgbmV3IFJhbmdlSXRlcmF0b3Igb24gdGhlIHBvcnRpb24gb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBub2RlIHNlbGVjdGVkIGJ5IHRoZSBSYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YlJhbmdlSXRlcmF0b3IgPSByYW5nZUl0ZXJhdG9yLmdldFN1YnRyZWVJdGVyYXRvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZVN1YnRyZWUoc3ViUmFuZ2VJdGVyYXRvciwgZnVuYywgaXRlcmF0b3JTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZUl0ZXJhdG9yLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZXJhdG9yU3RhdGUuc3RvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSB3aG9sZSBub2RlIGlzIHNlbGVjdGVkLCBzbyB3ZSBjYW4gdXNlIGVmZmljaWVudCBET00gaXRlcmF0aW9uIHRvIGl0ZXJhdGUgb3ZlciB0aGUgbm9kZSBhbmQgaXRzXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlc2NlbmRhbnRzXG4gICAgICAgICAgICAgICAgICAgIGl0ID0gZG9tLmNyZWF0ZUl0ZXJhdG9yKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIChuID0gaXQubmV4dCgpKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmdW5jKG4pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yU3RhdGUuc3RvcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlU3VidHJlZShpdGVyYXRvcikge1xuICAgICAgICAgICAgdmFyIHN1Ykl0ZXJhdG9yO1xuICAgICAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYXRvci5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yID0gaXRlcmF0b3IuZ2V0U3VidHJlZUl0ZXJhdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVN1YnRyZWUoc3ViSXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICBzdWJJdGVyYXRvci5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVyYXRvci5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBleHRyYWN0U3VidHJlZShpdGVyYXRvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgbm9kZSwgZnJhZyA9IGdldFJhbmdlRG9jdW1lbnQoaXRlcmF0b3IucmFuZ2UpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgc3ViSXRlcmF0b3I7IG5vZGUgPSBpdGVyYXRvci5uZXh0KCk7ICkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IgPSBpdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChleHRyYWN0U3VidHJlZShzdWJJdGVyYXRvcikpO1xuICAgICAgICAgICAgICAgICAgICBzdWJJdGVyYXRvci5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVyYXRvci5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMTApIHsgLy8gRG9jdW1lbnRUeXBlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJISUVSQVJDSFlfUkVRVUVTVF9FUlJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnJhZztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5vZGVzSW5SYW5nZShyYW5nZSwgbm9kZVR5cGVzLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJOb2RlVHlwZXMgPSAhIShub2RlVHlwZXMgJiYgbm9kZVR5cGVzLmxlbmd0aCksIHJlZ2V4O1xuICAgICAgICAgICAgdmFyIGZpbHRlckV4aXN0cyA9ICEhZmlsdGVyO1xuICAgICAgICAgICAgaWYgKGZpbHRlck5vZGVUeXBlcykge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIl4oXCIgKyBub2RlVHlwZXMuam9pbihcInxcIikgKyBcIikkXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICAgICAgICAgIGl0ZXJhdGVTdWJ0cmVlKG5ldyBSYW5nZUl0ZXJhdG9yKHJhbmdlLCBmYWxzZSksIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyTm9kZVR5cGVzICYmICFyZWdleC50ZXN0KG5vZGUubm9kZVR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlckV4aXN0cyAmJiAhZmlsdGVyKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgaW5jbHVkZSBhIGJvdW5kYXJ5IGNvbnRhaW5lciBpZiBpdCBpcyBhIGNoYXJhY3RlciBkYXRhIG5vZGUgYW5kIHRoZSByYW5nZSBkb2VzIG5vdCBjb250YWluIGFueVxuICAgICAgICAgICAgICAgIC8vIG9mIGl0cyBjaGFyYWN0ZXIgZGF0YS4gU2VlIGlzc3VlIDE5MC5cbiAgICAgICAgICAgICAgICB2YXIgc2MgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PSBzYyAmJiBpc0NoYXJhY3RlckRhdGFOb2RlKHNjKSAmJiByYW5nZS5zdGFydE9mZnNldCA9PSBzYy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBlYyA9IHJhbmdlLmVuZENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PSBlYyAmJiBpc0NoYXJhY3RlckRhdGFOb2RlKGVjKSAmJiByYW5nZS5lbmRPZmZzZXQgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5zcGVjdChyYW5nZSkge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSAodHlwZW9mIHJhbmdlLmdldE5hbWUgPT0gXCJ1bmRlZmluZWRcIikgPyBcIlJhbmdlXCIgOiByYW5nZS5nZXROYW1lKCk7XG4gICAgICAgICAgICByZXR1cm4gXCJbXCIgKyBuYW1lICsgXCIoXCIgKyBkb20uaW5zcGVjdE5vZGUocmFuZ2Uuc3RhcnRDb250YWluZXIpICsgXCI6XCIgKyByYW5nZS5zdGFydE9mZnNldCArIFwiLCBcIiArXG4gICAgICAgICAgICAgICAgICAgIGRvbS5pbnNwZWN0Tm9kZShyYW5nZS5lbmRDb250YWluZXIpICsgXCI6XCIgKyByYW5nZS5lbmRPZmZzZXQgKyBcIildXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgIC8vIFJhbmdlSXRlcmF0b3IgY29kZSBwYXJ0aWFsbHkgYm9ycm93cyBmcm9tIElFUmFuZ2UgYnkgVGltIFJ5YW4gKGh0dHA6Ly9naXRodWIuY29tL3RpbWNhbWVyb25yeWFuL0lFUmFuZ2UpXG5cbiAgICAgICAgZnVuY3Rpb24gUmFuZ2VJdGVyYXRvcihyYW5nZSwgY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2Rlcykge1xuICAgICAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICAgICAgdGhpcy5jbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzID0gY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2RlcztcblxuXG4gICAgICAgICAgICBpZiAoIXJhbmdlLmNvbGxhcHNlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2MgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICB0aGlzLnNvID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lYyA9IHJhbmdlLmVuZENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICB0aGlzLmVvID0gcmFuZ2UuZW5kT2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciByb290ID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zYyA9PT0gdGhpcy5lYyAmJiBpc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMuc2MpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gdGhpcy5fbGFzdCA9IHRoaXMuX25leHQgPSB0aGlzLnNjO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gdGhpcy5fbmV4dCA9ICh0aGlzLnNjID09PSByb290ICYmICFpc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMuc2MpKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjLmNoaWxkTm9kZXNbdGhpcy5zb10gOiBnZXRDbG9zZXN0QW5jZXN0b3JJbih0aGlzLnNjLCByb290LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdCA9ICh0aGlzLmVjID09PSByb290ICYmICFpc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMuZWMpKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVjLmNoaWxkTm9kZXNbdGhpcy5lbyAtIDFdIDogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4odGhpcy5lYywgcm9vdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgUmFuZ2VJdGVyYXRvci5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBfY3VycmVudDogbnVsbCxcbiAgICAgICAgICAgIF9uZXh0OiBudWxsLFxuICAgICAgICAgICAgX2ZpcnN0OiBudWxsLFxuICAgICAgICAgICAgX2xhc3Q6IG51bGwsXG4gICAgICAgICAgICBpc1NpbmdsZUNoYXJhY3RlckRhdGFOb2RlOiBmYWxzZSxcblxuICAgICAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSB0aGlzLl9maXJzdDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhc05leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuX25leHQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBNb3ZlIHRvIG5leHQgbm9kZVxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudCA9IHRoaXMuX25leHQ7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmV4dCA9IChjdXJyZW50ICE9PSB0aGlzLl9sYXN0KSA/IGN1cnJlbnQubmV4dFNpYmxpbmcgOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBwYXJ0aWFsbHkgc2VsZWN0ZWQgdGV4dCBub2Rlc1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShjdXJyZW50KSAmJiB0aGlzLmNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ID09PSB0aGlzLmVjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LmNsb25lTm9kZSh0cnVlKSkuZGVsZXRlRGF0YSh0aGlzLmVvLCBjdXJyZW50Lmxlbmd0aCAtIHRoaXMuZW8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnQgPT09IHRoaXMuc2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQuY2xvbmVOb2RlKHRydWUpKS5kZWxldGVEYXRhKDAsIHRoaXMuc28pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudCwgc3RhcnQsIGVuZDtcblxuICAgICAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGN1cnJlbnQpICYmIChjdXJyZW50ID09PSB0aGlzLnNjIHx8IGN1cnJlbnQgPT09IHRoaXMuZWMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gKGN1cnJlbnQgPT09IHRoaXMuc2MpID8gdGhpcy5zbyA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IChjdXJyZW50ID09PSB0aGlzLmVjKSA/IHRoaXMuZW8gOiBjdXJyZW50Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0ICE9IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5kZWxldGVEYXRhKHN0YXJ0LCBlbmQgLSBzdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBDaGVja3MgaWYgdGhlIGN1cnJlbnQgbm9kZSBpcyBwYXJ0aWFsbHkgc2VsZWN0ZWRcbiAgICAgICAgICAgIGlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGN1cnJlbnQsIHRoaXMucmFuZ2UpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0U3VidHJlZUl0ZXJhdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViUmFuZ2U7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZSA9IHRoaXMucmFuZ2UuY2xvbmVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZS5jb2xsYXBzZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViUmFuZ2UgPSBuZXcgUmFuZ2UoZ2V0UmFuZ2VEb2N1bWVudCh0aGlzLnJhbmdlKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29udGFpbmVyID0gY3VycmVudCwgc3RhcnRPZmZzZXQgPSAwLCBlbmRDb250YWluZXIgPSBjdXJyZW50LCBlbmRPZmZzZXQgPSBnZXROb2RlTGVuZ3RoKGN1cnJlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09ySXNBbmNlc3Rvck9mKGN1cnJlbnQsIHRoaXMuc2MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lciA9IHRoaXMuc2M7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mZnNldCA9IHRoaXMuc287XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3JJc0FuY2VzdG9yT2YoY3VycmVudCwgdGhpcy5lYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZENvbnRhaW5lciA9IHRoaXMuZWM7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRPZmZzZXQgPSB0aGlzLmVvO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQm91bmRhcmllcyhzdWJSYW5nZSwgc3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0LCBlbmRDb250YWluZXIsIGVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2VJdGVyYXRvcihzdWJSYW5nZSwgdGhpcy5jbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZSA9IHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9uZXh0ID0gdGhpcy5fZmlyc3QgPSB0aGlzLl9sYXN0ID0gdGhpcy5zYyA9IHRoaXMuc28gPSB0aGlzLmVjID0gdGhpcy5lbyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICB2YXIgYmVmb3JlQWZ0ZXJOb2RlVHlwZXMgPSBbMSwgMywgNCwgNSwgNywgOCwgMTBdO1xuICAgICAgICB2YXIgcm9vdENvbnRhaW5lck5vZGVUeXBlcyA9IFsyLCA5LCAxMV07XG4gICAgICAgIHZhciByZWFkb25seU5vZGVUeXBlcyA9IFs1LCA2LCAxMCwgMTJdO1xuICAgICAgICB2YXIgaW5zZXJ0YWJsZU5vZGVUeXBlcyA9IFsxLCAzLCA0LCA1LCA3LCA4LCAxMCwgMTFdO1xuICAgICAgICB2YXIgc3Vycm91bmROb2RlVHlwZXMgPSBbMSwgMywgNCwgNSwgNywgOF07XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQW5jZXN0b3JGaW5kZXIobm9kZVR5cGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSwgc2VsZklzQW5jZXN0b3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCwgbiA9IHNlbGZJc0FuY2VzdG9yID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobikge1xuICAgICAgICAgICAgICAgICAgICB0ID0gbi5ub2RlVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFycmF5Q29udGFpbnMobm9kZVR5cGVzLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGdldERvY3VtZW50T3JGcmFnbWVudENvbnRhaW5lciA9IGNyZWF0ZUFuY2VzdG9yRmluZGVyKCBbOSwgMTFdICk7XG4gICAgICAgIHZhciBnZXRSZWFkb25seUFuY2VzdG9yID0gY3JlYXRlQW5jZXN0b3JGaW5kZXIocmVhZG9ubHlOb2RlVHlwZXMpO1xuICAgICAgICB2YXIgZ2V0RG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3IgPSBjcmVhdGVBbmNlc3RvckZpbmRlciggWzYsIDEwLCAxMl0gKTtcblxuICAgICAgICBmdW5jdGlvbiBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIGFsbG93U2VsZikge1xuICAgICAgICAgICAgaWYgKGdldERvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIGFsbG93U2VsZikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiSU5WQUxJRF9OT0RFX1RZUEVfRVJSXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBpbnZhbGlkVHlwZXMpIHtcbiAgICAgICAgICAgIGlmICghYXJyYXlDb250YWlucyhpbnZhbGlkVHlwZXMsIG5vZGUubm9kZVR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIklOVkFMSURfTk9ERV9UWVBFX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gKGlzQ2hhcmFjdGVyRGF0YU5vZGUobm9kZSkgPyBub2RlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIklOREVYX1NJWkVfRVJSXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlMSwgbm9kZTIpIHtcbiAgICAgICAgICAgIGlmIChnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIobm9kZTEsIHRydWUpICE9PSBnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIobm9kZTIsIHRydWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIldST05HX0RPQ1VNRU5UX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydE5vZGVOb3RSZWFkT25seShub2RlKSB7XG4gICAgICAgICAgICBpZiAoZ2V0UmVhZG9ubHlBbmNlc3Rvcihub2RlLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhc3NlcnROb2RlKG5vZGUsIGNvZGVOYW1lKSB7XG4gICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKGNvZGVOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzT3JwaGFuKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiAoY3Jhc2h5VGV4dE5vZGVzICYmIGRvbS5pc0Jyb2tlbk5vZGUobm9kZSkpIHx8XG4gICAgICAgICAgICAgICAgIWFycmF5Q29udGFpbnMocm9vdENvbnRhaW5lck5vZGVUeXBlcywgbm9kZS5ub2RlVHlwZSkgJiYgIWdldERvY3VtZW50T3JGcmFnbWVudENvbnRhaW5lcihub2RlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzVmFsaWRPZmZzZXQobm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0IDw9IChpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpID8gbm9kZS5sZW5ndGggOiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzUmFuZ2VWYWxpZChyYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuICghIXJhbmdlLnN0YXJ0Q29udGFpbmVyICYmICEhcmFuZ2UuZW5kQ29udGFpbmVyICYmXG4gICAgICAgICAgICAgICAgICAgICFpc09ycGhhbihyYW5nZS5zdGFydENvbnRhaW5lcikgJiZcbiAgICAgICAgICAgICAgICAgICAgIWlzT3JwaGFuKHJhbmdlLmVuZENvbnRhaW5lcikgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZE9mZnNldChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpICYmXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWRPZmZzZXQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydFJhbmdlVmFsaWQocmFuZ2UpIHtcbiAgICAgICAgICAgIGlmICghaXNSYW5nZVZhbGlkKHJhbmdlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhbmdlIGVycm9yOiBSYW5nZSBpcyBubyBsb25nZXIgdmFsaWQgYWZ0ZXIgRE9NIG11dGF0aW9uIChcIiArIHJhbmdlLmluc3BlY3QoKSArIFwiKVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgLy8gVGVzdCB0aGUgYnJvd3NlcidzIGlubmVySFRNTCBzdXBwb3J0IHRvIGRlY2lkZSBob3cgdG8gaW1wbGVtZW50IGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudFxuICAgICAgICB2YXIgc3R5bGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgdmFyIGh0bWxQYXJzaW5nQ29uZm9ybXMgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN0eWxlRWwuaW5uZXJIVE1MID0gXCI8Yj54PC9iPlwiO1xuICAgICAgICAgICAgaHRtbFBhcnNpbmdDb25mb3JtcyA9IChzdHlsZUVsLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT0gMyk7IC8vIE9wZXJhIGluY29ycmVjdGx5IGNyZWF0ZXMgYW4gZWxlbWVudCBub2RlXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIElFIDYgYW5kIDcgdGhyb3dcbiAgICAgICAgfVxuXG4gICAgICAgIGFwaS5mZWF0dXJlcy5odG1sUGFyc2luZ0NvbmZvcm1zID0gaHRtbFBhcnNpbmdDb25mb3JtcztcblxuICAgICAgICB2YXIgY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50ID0gaHRtbFBhcnNpbmdDb25mb3JtcyA/XG5cbiAgICAgICAgICAgIC8vIEltcGxlbWVudGF0aW9uIGFzIHBlciBIVE1MIHBhcnNpbmcgc3BlYywgdHJ1c3RpbmcgaW4gdGhlIGJyb3dzZXIncyBpbXBsZW1lbnRhdGlvbiBvZiBpbm5lckhUTUwuIFNlZVxuICAgICAgICAgICAgLy8gZGlzY3Vzc2lvbiBhbmQgYmFzZSBjb2RlIGZvciB0aGlzIGltcGxlbWVudGF0aW9uIGF0IGlzc3VlIDY3LlxuICAgICAgICAgICAgLy8gU3BlYzogaHR0cDovL2h0bWw1Lm9yZy9zcGVjcy9kb20tcGFyc2luZy5odG1sI2V4dGVuc2lvbnMtdG8tdGhlLXJhbmdlLWludGVyZmFjZVxuICAgICAgICAgICAgLy8gVGhhbmtzIHRvIEFsZWtzIFdpbGxpYW1zLlxuICAgICAgICAgICAgZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHtcbiAgICAgICAgICAgICAgICAvLyBcIkxldCBub2RlIHRoZSBjb250ZXh0IG9iamVjdCdzIHN0YXJ0J3Mgbm9kZS5cIlxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQobm9kZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBcIklmIHRoZSBjb250ZXh0IG9iamVjdCdzIHN0YXJ0J3Mgbm9kZSBpcyBudWxsLCByYWlzZSBhbiBJTlZBTElEX1NUQVRFX0VSUlxuICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBhbmQgYWJvcnQgdGhlc2Ugc3RlcHMuXCJcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIklOVkFMSURfU1RBVEVfRVJSXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFwiTGV0IGVsZW1lbnQgYmUgYXMgZm9sbG93cywgZGVwZW5kaW5nIG9uIG5vZGUncyBpbnRlcmZhY2U6XCJcbiAgICAgICAgICAgICAgICAvLyBEb2N1bWVudCwgRG9jdW1lbnQgRnJhZ21lbnQ6IG51bGxcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gXCJFbGVtZW50OiBub2RlXCJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsID0gbm9kZTtcblxuICAgICAgICAgICAgICAgIC8vIFwiVGV4dCwgQ29tbWVudDogbm9kZSdzIHBhcmVudEVsZW1lbnRcIlxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICBlbCA9IGRvbS5wYXJlbnRFbGVtZW50KG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFwiSWYgZWl0aGVyIGVsZW1lbnQgaXMgbnVsbCBvciBlbGVtZW50J3Mgb3duZXJEb2N1bWVudCBpcyBhbiBIVE1MIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgLy8gYW5kIGVsZW1lbnQncyBsb2NhbCBuYW1lIGlzIFwiaHRtbFwiIGFuZCBlbGVtZW50J3MgbmFtZXNwYWNlIGlzIHRoZSBIVE1MXG4gICAgICAgICAgICAgICAgLy8gbmFtZXNwYWNlXCJcbiAgICAgICAgICAgICAgICBpZiAoZWwgPT09IG51bGwgfHwgKFxuICAgICAgICAgICAgICAgICAgICBlbC5ub2RlTmFtZSA9PSBcIkhUTUxcIiAmJlxuICAgICAgICAgICAgICAgICAgICBkb20uaXNIdG1sTmFtZXNwYWNlKGdldERvY3VtZW50KGVsKS5kb2N1bWVudEVsZW1lbnQpICYmXG4gICAgICAgICAgICAgICAgICAgIGRvbS5pc0h0bWxOYW1lc3BhY2UoZWwpXG4gICAgICAgICAgICAgICAgKSkge1xuXG4gICAgICAgICAgICAgICAgLy8gXCJsZXQgZWxlbWVudCBiZSBhIG5ldyBFbGVtZW50IHdpdGggXCJib2R5XCIgYXMgaXRzIGxvY2FsIG5hbWUgYW5kIHRoZSBIVE1MXG4gICAgICAgICAgICAgICAgLy8gbmFtZXNwYWNlIGFzIGl0cyBuYW1lc3BhY2UuXCJcIlxuICAgICAgICAgICAgICAgICAgICBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiYm9keVwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbCA9IGVsLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gXCJJZiB0aGUgbm9kZSdzIGRvY3VtZW50IGlzIGFuIEhUTUwgZG9jdW1lbnQ6IEludm9rZSB0aGUgSFRNTCBmcmFnbWVudCBwYXJzaW5nIGFsZ29yaXRobS5cIlxuICAgICAgICAgICAgICAgIC8vIFwiSWYgdGhlIG5vZGUncyBkb2N1bWVudCBpcyBhbiBYTUwgZG9jdW1lbnQ6IEludm9rZSB0aGUgWE1MIGZyYWdtZW50IHBhcnNpbmcgYWxnb3JpdGhtLlwiXG4gICAgICAgICAgICAgICAgLy8gXCJJbiBlaXRoZXIgY2FzZSwgdGhlIGFsZ29yaXRobSBtdXN0IGJlIGludm9rZWQgd2l0aCBmcmFnbWVudCBhcyB0aGUgaW5wdXRcbiAgICAgICAgICAgICAgICAvLyBhbmQgZWxlbWVudCBhcyB0aGUgY29udGV4dCBlbGVtZW50LlwiXG4gICAgICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gZnJhZ21lbnRTdHI7XG5cbiAgICAgICAgICAgICAgICAvLyBcIklmIHRoaXMgcmFpc2VzIGFuIGV4Y2VwdGlvbiwgdGhlbiBhYm9ydCB0aGVzZSBzdGVwcy4gT3RoZXJ3aXNlLCBsZXQgbmV3XG4gICAgICAgICAgICAgICAgLy8gY2hpbGRyZW4gYmUgdGhlIG5vZGVzIHJldHVybmVkLlwiXG5cbiAgICAgICAgICAgICAgICAvLyBcIkxldCBmcmFnbWVudCBiZSBhIG5ldyBEb2N1bWVudEZyYWdtZW50LlwiXG4gICAgICAgICAgICAgICAgLy8gXCJBcHBlbmQgYWxsIG5ldyBjaGlsZHJlbiB0byBmcmFnbWVudC5cIlxuICAgICAgICAgICAgICAgIC8vIFwiUmV0dXJuIGZyYWdtZW50LlwiXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbS5mcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4oZWwpO1xuICAgICAgICAgICAgfSA6XG5cbiAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSwgaW5uZXJIVE1MIGNhbm5vdCBiZSB0cnVzdGVkLCBzbyBmYWxsIGJhY2sgdG8gYSBzaW1wbGVyLCBub24tY29uZm9ybWFudCBpbXBsZW1lbnRhdGlvbiB0aGF0XG4gICAgICAgICAgICAvLyBwcmV2aW91cyB2ZXJzaW9ucyBvZiBSYW5neSB1c2VkICh3aXRoIHRoZSBleGNlcHRpb24gb2YgdXNpbmcgYSBib2R5IGVsZW1lbnQgcmF0aGVyIHRoYW4gYSBkaXYpXG4gICAgICAgICAgICBmdW5jdGlvbihmcmFnbWVudFN0cikge1xuICAgICAgICAgICAgICAgIHZhciBkb2MgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiYm9keVwiKTtcbiAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBmcmFnbWVudFN0cjtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkb20uZnJhZ21lbnRGcm9tTm9kZUNoaWxkcmVuKGVsKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gc3BsaXRSYW5nZUJvdW5kYXJpZXMocmFuZ2UsIHBvc2l0aW9uc1RvUHJlc2VydmUpIHtcbiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQocmFuZ2UpO1xuXG4gICAgICAgICAgICB2YXIgc2MgPSByYW5nZS5zdGFydENvbnRhaW5lciwgc28gPSByYW5nZS5zdGFydE9mZnNldCwgZWMgPSByYW5nZS5lbmRDb250YWluZXIsIGVvID0gcmFuZ2UuZW5kT2Zmc2V0O1xuICAgICAgICAgICAgdmFyIHN0YXJ0RW5kU2FtZSA9IChzYyA9PT0gZWMpO1xuXG4gICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShlYykgJiYgZW8gPiAwICYmIGVvIDwgZWMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3BsaXREYXRhTm9kZShlYywgZW8sIHBvc2l0aW9uc1RvUHJlc2VydmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShzYykgJiYgc28gPiAwICYmIHNvIDwgc2MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2MgPSBzcGxpdERhdGFOb2RlKHNjLCBzbywgcG9zaXRpb25zVG9QcmVzZXJ2ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0RW5kU2FtZSkge1xuICAgICAgICAgICAgICAgICAgICBlbyAtPSBzbztcbiAgICAgICAgICAgICAgICAgICAgZWMgPSBzYztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVjID09IHNjLnBhcmVudE5vZGUgJiYgZW8gPj0gZ2V0Tm9kZUluZGV4KHNjKSkge1xuICAgICAgICAgICAgICAgICAgICBlbysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzbyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydEFuZEVuZChzYywgc28sIGVjLCBlbyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHJhbmdlVG9IdG1sKHJhbmdlKSB7XG4gICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHJhbmdlKTtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5wYXJlbnROb2RlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoIHJhbmdlLmNsb25lQ29udGVudHMoKSApO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUw7XG4gICAgICAgIH1cblxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgIHZhciByYW5nZVByb3BlcnRpZXMgPSBbXCJzdGFydENvbnRhaW5lclwiLCBcInN0YXJ0T2Zmc2V0XCIsIFwiZW5kQ29udGFpbmVyXCIsIFwiZW5kT2Zmc2V0XCIsIFwiY29sbGFwc2VkXCIsXG4gICAgICAgICAgICBcImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyXCJdO1xuXG4gICAgICAgIHZhciBzMnMgPSAwLCBzMmUgPSAxLCBlMmUgPSAyLCBlMnMgPSAzO1xuICAgICAgICB2YXIgbl9iID0gMCwgbl9hID0gMSwgbl9iX2EgPSAyLCBuX2kgPSAzO1xuXG4gICAgICAgIHV0aWwuZXh0ZW5kKGFwaS5yYW5nZVByb3RvdHlwZSwge1xuICAgICAgICAgICAgY29tcGFyZUJvdW5kYXJ5UG9pbnRzOiBmdW5jdGlvbihob3csIHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBhc3NlcnRTYW1lRG9jdW1lbnRPckZyYWdtZW50KHRoaXMuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0Q29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlQSwgb2Zmc2V0QSwgbm9kZUIsIG9mZnNldEI7XG4gICAgICAgICAgICAgICAgdmFyIHByZWZpeEEgPSAoaG93ID09IGUycyB8fCBob3cgPT0gczJzKSA/IFwic3RhcnRcIiA6IFwiZW5kXCI7XG4gICAgICAgICAgICAgICAgdmFyIHByZWZpeEIgPSAoaG93ID09IHMyZSB8fCBob3cgPT0gczJzKSA/IFwic3RhcnRcIiA6IFwiZW5kXCI7XG4gICAgICAgICAgICAgICAgbm9kZUEgPSB0aGlzW3ByZWZpeEEgKyBcIkNvbnRhaW5lclwiXTtcbiAgICAgICAgICAgICAgICBvZmZzZXRBID0gdGhpc1twcmVmaXhBICsgXCJPZmZzZXRcIl07XG4gICAgICAgICAgICAgICAgbm9kZUIgPSByYW5nZVtwcmVmaXhCICsgXCJDb250YWluZXJcIl07XG4gICAgICAgICAgICAgICAgb2Zmc2V0QiA9IHJhbmdlW3ByZWZpeEIgKyBcIk9mZnNldFwiXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGFyZVBvaW50cyhub2RlQSwgb2Zmc2V0QSwgbm9kZUIsIG9mZnNldEIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5zZXJ0Tm9kZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBpbnNlcnRhYmxlTm9kZVR5cGVzKTtcbiAgICAgICAgICAgICAgICBhc3NlcnROb2RlTm90UmVhZE9ubHkodGhpcy5zdGFydENvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNPcklzQW5jZXN0b3JPZihub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE5vIGNoZWNrIGZvciB3aGV0aGVyIHRoZSBjb250YWluZXIgb2YgdGhlIHN0YXJ0IG9mIHRoZSBSYW5nZSBpcyBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhbGxvd1xuICAgICAgICAgICAgICAgIC8vIGNoaWxkcmVuIG9mIHRoZSB0eXBlIG9mIG5vZGU6IHRoZSBicm93c2VyJ3MgRE9NIGltcGxlbWVudGF0aW9uIHNob3VsZCBkbyB0aGlzIGZvciB1cyB3aGVuIHdlIGF0dGVtcHRcbiAgICAgICAgICAgICAgICAvLyB0byBhZGQgdGhlIG5vZGVcblxuICAgICAgICAgICAgICAgIHZhciBmaXJzdE5vZGVJbnNlcnRlZCA9IGluc2VydE5vZGVBdFBvc2l0aW9uKG5vZGUsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRCZWZvcmUoZmlyc3ROb2RlSW5zZXJ0ZWQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2xvbmVDb250ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcblxuICAgICAgICAgICAgICAgIHZhciBjbG9uZSwgZnJhZztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFJhbmdlRG9jdW1lbnQodGhpcykuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0Q29udGFpbmVyID09PSB0aGlzLmVuZENvbnRhaW5lciAmJiBpc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMuc3RhcnRDb250YWluZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IHRoaXMuc3RhcnRDb250YWluZXIuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUuZGF0YSA9IGNsb25lLmRhdGEuc2xpY2UodGhpcy5zdGFydE9mZnNldCwgdGhpcy5lbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZyA9IGdldFJhbmdlRG9jdW1lbnQodGhpcykuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJhZztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBSYW5nZUl0ZXJhdG9yKHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBjbG9uZVN1YnRyZWUoaXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNhblN1cnJvdW5kQ29udGVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuc3RhcnRDb250YWluZXIpO1xuICAgICAgICAgICAgICAgIGFzc2VydE5vZGVOb3RSZWFkT25seSh0aGlzLmVuZENvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29udGVudHMgY2FuIGJlIHN1cnJvdW5kZWQuIFNwZWNpZmljYWxseSwgdGhpcyBtZWFucyB3aGV0aGVyIHRoZSByYW5nZSBwYXJ0aWFsbHkgc2VsZWN0c1xuICAgICAgICAgICAgICAgIC8vIG5vIG5vbi10ZXh0IG5vZGVzLlxuICAgICAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBSYW5nZUl0ZXJhdG9yKHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgIHZhciBib3VuZGFyaWVzSW52YWxpZCA9IChpdGVyYXRvci5fZmlyc3QgJiYgKGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGl0ZXJhdG9yLl9maXJzdCwgdGhpcykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaXRlcmF0b3IuX2xhc3QgJiYgaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2xhc3QsIHRoaXMpKSk7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFib3VuZGFyaWVzSW52YWxpZDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHN1cnJvdW5kQ29udGVudHM6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE5vZGVUeXBlKG5vZGUsIHN1cnJvdW5kTm9kZVR5cGVzKTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYW5TdXJyb3VuZENvbnRlbnRzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIklOVkFMSURfU1RBVEVfRVJSXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgdGhlIGNvbnRlbnRzXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmV4dHJhY3RDb250ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGNoaWxkcmVuIG9mIHRoZSBub2RlXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChub2RlLmxhc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJbnNlcnQgdGhlIG5ldyBub2RlIGFuZCBhZGQgdGhlIGV4dHJhY3RlZCBjb250ZW50c1xuICAgICAgICAgICAgICAgIGluc2VydE5vZGVBdFBvc2l0aW9uKG5vZGUsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdE5vZGUobm9kZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbG9uZVJhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IG5ldyBSYW5nZShnZXRSYW5nZURvY3VtZW50KHRoaXMpKTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHJhbmdlUHJvcGVydGllcy5sZW5ndGgsIHByb3A7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wID0gcmFuZ2VQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICByYW5nZVtwcm9wXSA9IHRoaXNbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBzYyA9IHRoaXMuc3RhcnRDb250YWluZXI7XG4gICAgICAgICAgICAgICAgaWYgKHNjID09PSB0aGlzLmVuZENvbnRhaW5lciAmJiBpc0NoYXJhY3RlckRhdGFOb2RlKHNjKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHNjLm5vZGVUeXBlID09IDMgfHwgc2Mubm9kZVR5cGUgPT0gNCkgPyBzYy5kYXRhLnNsaWNlKHRoaXMuc3RhcnRPZmZzZXQsIHRoaXMuZW5kT2Zmc2V0KSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRQYXJ0cyA9IFtdLCBpdGVyYXRvciA9IG5ldyBSYW5nZUl0ZXJhdG9yKHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBpdGVyYXRlU3VidHJlZShpdGVyYXRvciwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWNjZXB0IG9ubHkgdGV4dCBvciBDREFUQSBub2Rlcywgbm90IGNvbW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzIHx8IG5vZGUubm9kZVR5cGUgPT0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRQYXJ0cy5wdXNoKG5vZGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpdGVyYXRvci5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHRQYXJ0cy5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIFRoZSBtZXRob2RzIGJlbG93IGFyZSBhbGwgbm9uLXN0YW5kYXJkLiBUaGUgZm9sbG93aW5nIGJhdGNoIHdlcmUgaW50cm9kdWNlZCBieSBNb3ppbGxhIGJ1dCBoYXZlIHNpbmNlXG4gICAgICAgICAgICAvLyBiZWVuIHJlbW92ZWQgZnJvbSBNb3ppbGxhLlxuXG4gICAgICAgICAgICBjb21wYXJlTm9kZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIHZhciBub2RlSW5kZXggPSBnZXROb2RlSW5kZXgobm9kZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiTk9UX0ZPVU5EX0VSUlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDb21wYXJpc29uID0gdGhpcy5jb21wYXJlUG9pbnQocGFyZW50LCBub2RlSW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICBlbmRDb21wYXJpc29uID0gdGhpcy5jb21wYXJlUG9pbnQocGFyZW50LCBub2RlSW5kZXggKyAxKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGFydENvbXBhcmlzb24gPCAwKSB7IC8vIE5vZGUgc3RhcnRzIGJlZm9yZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGVuZENvbXBhcmlzb24gPiAwKSA/IG5fYl9hIDogbl9iO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZW5kQ29tcGFyaXNvbiA+IDApID8gbl9hIDogbl9pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvbXBhcmVQb2ludDogZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBhc3NlcnROb2RlKG5vZGUsIFwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSXCIpO1xuICAgICAgICAgICAgICAgIGFzc2VydFNhbWVEb2N1bWVudE9yRnJhZ21lbnQobm9kZSwgdGhpcy5zdGFydENvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21wYXJlUG9pbnRzKG5vZGUsIG9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50OiBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQsXG5cbiAgICAgICAgICAgIHRvSHRtbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlVG9IdG1sKHRoaXMpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8gdG91Y2hpbmdJc0ludGVyc2VjdGluZyBkZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyBtZXRob2QgY29uc2lkZXJzIGEgbm9kZSB0aGF0IGJvcmRlcnMgYSByYW5nZSBpbnRlcnNlY3RzXG4gICAgICAgICAgICAvLyB3aXRoIGl0IChhcyBpbiBXZWJLaXQpIG9yIG5vdCAoYXMgaW4gR2Vja28gcHJlLTEuOSwgYW5kIHRoZSBkZWZhdWx0KVxuICAgICAgICAgICAgaW50ZXJzZWN0c05vZGU6IGZ1bmN0aW9uKG5vZGUsIHRvdWNoaW5nSXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGFzc2VydE5vZGUobm9kZSwgXCJOT1RfRk9VTkRfRVJSXCIpO1xuICAgICAgICAgICAgICAgIGlmIChnZXREb2N1bWVudChub2RlKSAhPT0gZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZSwgb2Zmc2V0ID0gZ2V0Tm9kZUluZGV4KG5vZGUpO1xuICAgICAgICAgICAgICAgIGFzc2VydE5vZGUocGFyZW50LCBcIk5PVF9GT1VORF9FUlJcIik7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyhwYXJlbnQsIG9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHMocGFyZW50LCBvZmZzZXQgKyAxLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nID8gc3RhcnRDb21wYXJpc29uIDw9IDAgJiYgZW5kQ29tcGFyaXNvbiA+PSAwIDogc3RhcnRDb21wYXJpc29uIDwgMCAmJiBlbmRDb21wYXJpc29uID4gMDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzUG9pbnRJblJhbmdlOiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGFzc2VydE5vZGUobm9kZSwgXCJISUVSQVJDSFlfUkVRVUVTVF9FUlJcIik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpID49IDApICYmXG4gICAgICAgICAgICAgICAgICAgICAgIChjb21wYXJlUG9pbnRzKG5vZGUsIG9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSA8PSAwKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIFRoZSBtZXRob2RzIGJlbG93IGFyZSBub24tc3RhbmRhcmQgYW5kIGludmVudGVkIGJ5IG1lLlxuXG4gICAgICAgICAgICAvLyBTaGFyaW5nIGEgYm91bmRhcnkgc3RhcnQtdG8tZW5kIG9yIGVuZC10by1zdGFydCBkb2VzIG5vdCBjb3VudCBhcyBpbnRlcnNlY3Rpb24uXG4gICAgICAgICAgICBpbnRlcnNlY3RzUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlc0ludGVyc2VjdCh0aGlzLCByYW5nZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8gU2hhcmluZyBhIGJvdW5kYXJ5IHN0YXJ0LXRvLWVuZCBvciBlbmQtdG8tc3RhcnQgZG9lcyBjb3VudCBhcyBpbnRlcnNlY3Rpb24uXG4gICAgICAgICAgICBpbnRlcnNlY3RzT3JUb3VjaGVzUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlc0ludGVyc2VjdCh0aGlzLCByYW5nZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbnRlcnNlY3Rpb246IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0c1JhbmdlKHJhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyh0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0LCByYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHModGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0LCByYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyc2VjdGlvblJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydENvbXBhcmlzb24gPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZENvbXBhcmlzb24gPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uUmFuZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdW5pb246IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0c09yVG91Y2hlc1JhbmdlKHJhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdW5pb25SYW5nZSA9IHRoaXMuY2xvbmVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGFyZVBvaW50cyhyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlvblJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVQb2ludHMocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5pb25SYW5nZS5zZXRFbmQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmlvblJhbmdlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJSYW5nZXMgZG8gbm90IGludGVyc2VjdFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb250YWluc05vZGU6IGZ1bmN0aW9uKG5vZGUsIGFsbG93UGFydGlhbCkge1xuICAgICAgICAgICAgICAgIGlmIChhbGxvd1BhcnRpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0c05vZGUobm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVOb2RlKG5vZGUpID09IG5faTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb250YWluc05vZGVDb250ZW50czogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVQb2ludChub2RlLCAwKSA+PSAwICYmIHRoaXMuY29tcGFyZVBvaW50KG5vZGUsIGdldE5vZGVMZW5ndGgobm9kZSkpIDw9IDA7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb250YWluc1JhbmdlOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSB0aGlzLmludGVyc2VjdGlvbihyYW5nZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbiAhPT0gbnVsbCAmJiByYW5nZS5lcXVhbHMoaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvbnRhaW5zTm9kZVRleHQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZVJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgbm9kZVJhbmdlLnNlbGVjdE5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgdmFyIHRleHROb2RlcyA9IG5vZGVSYW5nZS5nZXROb2RlcyhbM10pO1xuICAgICAgICAgICAgICAgIGlmICh0ZXh0Tm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlUmFuZ2Uuc2V0U3RhcnQodGV4dE5vZGVzWzBdLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RUZXh0Tm9kZSA9IHRleHROb2Rlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZVJhbmdlLnNldEVuZChsYXN0VGV4dE5vZGUsIGxhc3RUZXh0Tm9kZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluc1JhbmdlKG5vZGVSYW5nZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbnNOb2RlQ29udGVudHMobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0Tm9kZXM6IGZ1bmN0aW9uKG5vZGVUeXBlcywgZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Tm9kZXNJblJhbmdlKHRoaXMsIG5vZGVUeXBlcywgZmlsdGVyKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldERvY3VtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvbGxhcHNlQmVmb3JlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFbmRCZWZvcmUobm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzZShmYWxzZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb2xsYXBzZUFmdGVyOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydEFmdGVyKG5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBnZXRCb29rbWFyazogZnVuY3Rpb24oY29udGFpbmVyTm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBkb2MgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBwcmVTZWxlY3Rpb25SYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lck5vZGUgPSBjb250YWluZXJOb2RlIHx8IGRvbS5nZXRCb2R5KGRvYyk7XG4gICAgICAgICAgICAgICAgcHJlU2VsZWN0aW9uUmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGNvbnRhaW5lck5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuaW50ZXJzZWN0aW9uKHByZVNlbGVjdGlvblJhbmdlKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSAwLCBlbmQgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBwcmVTZWxlY3Rpb25SYW5nZS5zZXRFbmQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBwcmVTZWxlY3Rpb25SYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gc3RhcnQgKyByYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZW5kLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJOb2RlOiBjb250YWluZXJOb2RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG1vdmVUb0Jvb2ttYXJrOiBmdW5jdGlvbihib29rbWFyaykge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJOb2RlID0gYm9va21hcmsuY29udGFpbmVyTm9kZTtcbiAgICAgICAgICAgICAgICB2YXIgY2hhckluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0KGNvbnRhaW5lck5vZGUsIDApO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVTdGFjayA9IFtjb250YWluZXJOb2RlXSwgbm9kZSwgZm91bmRTdGFydCA9IGZhbHNlLCBzdG9wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRDaGFySW5kZXgsIGksIGNoaWxkTm9kZXM7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoIXN0b3AgJiYgKG5vZGUgPSBub2RlU3RhY2sucG9wKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRDaGFySW5kZXggPSBjaGFySW5kZXggKyBub2RlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZm91bmRTdGFydCAmJiBib29rbWFyay5zdGFydCA+PSBjaGFySW5kZXggJiYgYm9va21hcmsuc3RhcnQgPD0gbmV4dENoYXJJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnQobm9kZSwgYm9va21hcmsuc3RhcnQgLSBjaGFySW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kU3RhcnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kU3RhcnQgJiYgYm9va21hcmsuZW5kID49IGNoYXJJbmRleCAmJiBib29rbWFyay5lbmQgPD0gbmV4dENoYXJJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kKG5vZGUsIGJvb2ttYXJrLmVuZCAtIGNoYXJJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFySW5kZXggPSBuZXh0Q2hhckluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlcyA9IG5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBjaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlU3RhY2sucHVzaChjaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldE5hbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIkRvbVJhbmdlXCI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJhbmdlLnJhbmdlc0VxdWFsKHRoaXMsIHJhbmdlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1JhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpbnNwZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zcGVjdCh0aGlzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gRE9NNCwgZGV0YWNoKCkgaXMgbm93IGEgbm8tb3AuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzVG9PYmplY3Qob2JqKSB7XG4gICAgICAgICAgICBvYmouU1RBUlRfVE9fU1RBUlQgPSBzMnM7XG4gICAgICAgICAgICBvYmouU1RBUlRfVE9fRU5EID0gczJlO1xuICAgICAgICAgICAgb2JqLkVORF9UT19FTkQgPSBlMmU7XG4gICAgICAgICAgICBvYmouRU5EX1RPX1NUQVJUID0gZTJzO1xuXG4gICAgICAgICAgICBvYmouTk9ERV9CRUZPUkUgPSBuX2I7XG4gICAgICAgICAgICBvYmouTk9ERV9BRlRFUiA9IG5fYTtcbiAgICAgICAgICAgIG9iai5OT0RFX0JFRk9SRV9BTkRfQUZURVIgPSBuX2JfYTtcbiAgICAgICAgICAgIG9iai5OT0RFX0lOU0lERSA9IG5faTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzKGNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjb3B5Q29tcGFyaXNvbkNvbnN0YW50c1RvT2JqZWN0KGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzVG9PYmplY3QoY29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIocmVtb3ZlciwgYm91bmRhcnlVcGRhdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcblxuICAgICAgICAgICAgICAgIHZhciBzYyA9IHRoaXMuc3RhcnRDb250YWluZXIsIHNvID0gdGhpcy5zdGFydE9mZnNldCwgcm9vdCA9IHRoaXMuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmsgb3V0IHdoZXJlIHRvIHBvc2l0aW9uIHRoZSByYW5nZSBhZnRlciBjb250ZW50IHJlbW92YWxcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSwgYm91bmRhcnk7XG4gICAgICAgICAgICAgICAgaWYgKHNjICE9PSByb290KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBnZXRDbG9zZXN0QW5jZXN0b3JJbihzYywgcm9vdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5ID0gZ2V0Qm91bmRhcnlBZnRlck5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHNjID0gYm91bmRhcnkubm9kZTtcbiAgICAgICAgICAgICAgICAgICAgc28gPSBib3VuZGFyeS5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgbm9uZSBvZiB0aGUgcmFuZ2UgaXMgcmVhZC1vbmx5XG4gICAgICAgICAgICAgICAgaXRlcmF0ZVN1YnRyZWUoaXRlcmF0b3IsIGFzc2VydE5vZGVOb3RSZWFkT25seSk7XG5cbiAgICAgICAgICAgICAgICBpdGVyYXRvci5yZXNldCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjb250ZW50XG4gICAgICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0gcmVtb3ZlcihpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBuZXcgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBzYywgc28pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVByb3RvdHlwZVJhbmdlKGNvbnN0cnVjdG9yLCBib3VuZGFyeVVwZGF0ZXIpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihpc0JlZm9yZSwgaXNTdGFydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkTm9kZVR5cGUobm9kZSwgYmVmb3JlQWZ0ZXJOb2RlVHlwZXMpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE5vZGVUeXBlKGdldFJvb3RDb250YWluZXIobm9kZSksIHJvb3RDb250YWluZXJOb2RlVHlwZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeSA9IChpc0JlZm9yZSA/IGdldEJvdW5kYXJ5QmVmb3JlTm9kZSA6IGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgKGlzU3RhcnQgPyBzZXRSYW5nZVN0YXJ0IDogc2V0UmFuZ2VFbmQpKHRoaXMsIGJvdW5kYXJ5Lm5vZGUsIGJvdW5kYXJ5Lm9mZnNldCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0UmFuZ2VTdGFydChyYW5nZSwgbm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVjID0gcmFuZ2UuZW5kQ29udGFpbmVyLCBlbyA9IHJhbmdlLmVuZE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSAhPT0gcmFuZ2Uuc3RhcnRDb250YWluZXIgfHwgb2Zmc2V0ICE9PSByYW5nZS5zdGFydE9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgcm9vdCBjb250YWluZXJzIG9mIHRoZSByYW5nZSBhbmQgdGhlIG5ldyBib3VuZGFyeSwgYW5kIGFsc28gY2hlY2sgd2hldGhlciB0aGUgbmV3IGJvdW5kYXJ5XG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIGFmdGVyIHRoZSBjdXJyZW50IGVuZC4gSW4gZWl0aGVyIGNhc2UsIGNvbGxhcHNlIHRoZSByYW5nZSB0byB0aGUgbmV3IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRSb290Q29udGFpbmVyKG5vZGUpICE9IGdldFJvb3RDb250YWluZXIoZWMpIHx8IGNvbXBhcmVQb2ludHMobm9kZSwgb2Zmc2V0LCBlYywgZW8pID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVvID0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcihyYW5nZSwgbm9kZSwgb2Zmc2V0LCBlYywgZW8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0UmFuZ2VFbmQocmFuZ2UsIG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgIHZhciBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChub2RlICE9PSByYW5nZS5lbmRDb250YWluZXIgfHwgb2Zmc2V0ICE9PSByYW5nZS5lbmRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHJvb3QgY29udGFpbmVycyBvZiB0aGUgcmFuZ2UgYW5kIHRoZSBuZXcgYm91bmRhcnksIGFuZCBhbHNvIGNoZWNrIHdoZXRoZXIgdGhlIG5ldyBib3VuZGFyeVxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBhZnRlciB0aGUgY3VycmVudCBlbmQuIEluIGVpdGhlciBjYXNlLCBjb2xsYXBzZSB0aGUgcmFuZ2UgdG8gdGhlIG5ldyBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0Um9vdENvbnRhaW5lcihub2RlKSAhPSBnZXRSb290Q29udGFpbmVyKHNjKSB8fCBjb21wYXJlUG9pbnRzKG5vZGUsIG9mZnNldCwgc2MsIHNvKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2MgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc28gPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHJhbmdlLCBzYywgc28sIG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdXAgaW5oZXJpdGFuY2VcbiAgICAgICAgICAgIHZhciBGID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgICAgIEYucHJvdG90eXBlID0gYXBpLnJhbmdlUHJvdG90eXBlO1xuICAgICAgICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IEYoKTtcblxuICAgICAgICAgICAgdXRpbC5leHRlbmQoY29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgICAgICAgICAgc2V0U3RhcnQ6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE9mZnNldChub2RlLCBvZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFJhbmdlU3RhcnQodGhpcywgbm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2V0RW5kOiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWRPZmZzZXQobm9kZSwgb2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRSYW5nZUVuZCh0aGlzLCBub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdG8gc2V0IGEgcmFuZ2UncyBzdGFydCBhbmQgZW5kIGJvdW5kYXJpZXMuIE92ZXJsb2FkZWQgYXMgZm9sbG93czpcbiAgICAgICAgICAgICAgICAgKiAtIFR3byBwYXJhbWV0ZXJzIChub2RlLCBvZmZzZXQpIGNyZWF0ZXMgYSBjb2xsYXBzZWQgcmFuZ2UgYXQgdGhhdCBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAqIC0gVGhyZWUgcGFyYW1ldGVycyAobm9kZSwgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCkgY3JlYXRlcyBhIHJhbmdlIGNvbnRhaW5lZCB3aXRoIG5vZGUgc3RhcnRpbmcgYXRcbiAgICAgICAgICAgICAgICAgKiAgIHN0YXJ0T2Zmc2V0IGFuZCBlbmRpbmcgYXQgZW5kT2Zmc2V0XG4gICAgICAgICAgICAgICAgICogLSBGb3VyIHBhcmFtZXRlcnMgKHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQsIGVuZE5vZGUsIGVuZE9mZnNldCkgY3JlYXRlcyBhIHJhbmdlIHN0YXJ0aW5nIGF0IHN0YXJ0T2Zmc2V0IGluXG4gICAgICAgICAgICAgICAgICogICBzdGFydE5vZGUgYW5kIGVuZGluZyBhdCBlbmRPZmZzZXQgaW4gZW5kTm9kZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHNldFN0YXJ0QW5kRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzYyA9IGFyZ3NbMF0sIHNvID0gYXJnc1sxXSwgZWMgPSBzYywgZW8gPSBzbztcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW8gPSBhcmdzWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gYXJnc1syXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbyA9IGFyZ3NbM107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBlYywgZW8pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc2V0Qm91bmRhcnk6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCwgaXNTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW1wic2V0XCIgKyAoaXNTdGFydCA/IFwiU3RhcnRcIiA6IFwiRW5kXCIpXShub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZXRTdGFydEJlZm9yZTogY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKHRydWUsIHRydWUpLFxuICAgICAgICAgICAgICAgIHNldFN0YXJ0QWZ0ZXI6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihmYWxzZSwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgc2V0RW5kQmVmb3JlOiBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIodHJ1ZSwgZmFsc2UpLFxuICAgICAgICAgICAgICAgIHNldEVuZEFmdGVyOiBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoZmFsc2UsIGZhbHNlKSxcblxuICAgICAgICAgICAgICAgIGNvbGxhcHNlOiBmdW5jdGlvbihpc1N0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0LCB0aGlzLmVuZENvbnRhaW5lciwgdGhpcy5lbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNlbGVjdE5vZGVDb250ZW50czogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCBub2RlLCAwLCBub2RlLCBnZXROb2RlTGVuZ3RoKG5vZGUpKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2VsZWN0Tm9kZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBiZWZvcmVBZnRlck5vZGVUeXBlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gZ2V0Qm91bmRhcnlCZWZvcmVOb2RlKG5vZGUpLCBlbmQgPSBnZXRCb3VuZGFyeUFmdGVyTm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHN0YXJ0Lm5vZGUsIHN0YXJ0Lm9mZnNldCwgZW5kLm5vZGUsIGVuZC5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBleHRyYWN0Q29udGVudHM6IGNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIoZXh0cmFjdFN1YnRyZWUsIGJvdW5kYXJ5VXBkYXRlciksXG5cbiAgICAgICAgICAgICAgICBkZWxldGVDb250ZW50czogY3JlYXRlUmFuZ2VDb250ZW50UmVtb3ZlcihkZWxldGVTdWJ0cmVlLCBib3VuZGFyeVVwZGF0ZXIpLFxuXG4gICAgICAgICAgICAgICAgY2FuU3Vycm91bmRDb250ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydE5vZGVOb3RSZWFkT25seSh0aGlzLnN0YXJ0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuZW5kQ29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29udGVudHMgY2FuIGJlIHN1cnJvdW5kZWQuIFNwZWNpZmljYWxseSwgdGhpcyBtZWFucyB3aGV0aGVyIHRoZSByYW5nZSBwYXJ0aWFsbHkgc2VsZWN0c1xuICAgICAgICAgICAgICAgICAgICAvLyBubyBub24tdGV4dCBub2Rlcy5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbmV3IFJhbmdlSXRlcmF0b3IodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3VuZGFyaWVzSW52YWxpZCA9IChpdGVyYXRvci5fZmlyc3QgJiYgaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2ZpcnN0LCB0aGlzKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpdGVyYXRvci5fbGFzdCAmJiBpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChpdGVyYXRvci5fbGFzdCwgdGhpcykpKTtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhYm91bmRhcmllc0ludmFsaWQ7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNwbGl0Qm91bmRhcmllczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0UmFuZ2VCb3VuZGFyaWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzcGxpdEJvdW5kYXJpZXNQcmVzZXJ2aW5nUG9zaXRpb25zOiBmdW5jdGlvbihwb3NpdGlvbnNUb1ByZXNlcnZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0UmFuZ2VCb3VuZGFyaWVzKHRoaXMsIHBvc2l0aW9uc1RvUHJlc2VydmUpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBub3JtYWxpemVCb3VuZGFyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2MgPSB0aGlzLnN0YXJ0Q29udGFpbmVyLCBzbyA9IHRoaXMuc3RhcnRPZmZzZXQsIGVjID0gdGhpcy5lbmRDb250YWluZXIsIGVvID0gdGhpcy5lbmRPZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lcmdlRm9yd2FyZCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nICYmIHNpYmxpbmcubm9kZVR5cGUgPT0gbm9kZS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbyA9IG5vZGUubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kRGF0YShzaWJsaW5nLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpYmxpbmcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVyZ2VCYWNrd2FyZCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYyA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVMZW5ndGggPSBub2RlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbyA9IHNpYmxpbmcubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuaW5zZXJ0RGF0YSgwLCBzaWJsaW5nLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpYmxpbmcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2MgPT0gZWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW8gKz0gc287XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gc2M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlYyA9PSBub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVJbmRleCA9IGdldE5vZGVJbmRleChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVvID09IG5vZGVJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW8gPSBub2RlTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVvID4gbm9kZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlby0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVTdGFydCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUoZWMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWMubGVuZ3RoID09IGVvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VGb3J3YXJkKGVjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kTm9kZSA9IGVjLmNoaWxkTm9kZXNbZW8gLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kTm9kZSAmJiBpc0NoYXJhY3RlckRhdGFOb2RlKGVuZE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlRm9yd2FyZChlbmROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVTdGFydCA9ICF0aGlzLmNvbGxhcHNlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUoc2MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VCYWNrd2FyZChzYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc28gPCBzYy5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnROb2RlID0gc2MuY2hpbGROb2Rlc1tzb107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydE5vZGUgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShzdGFydE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUJhY2t3YXJkKHN0YXJ0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYyA9IGVjO1xuICAgICAgICAgICAgICAgICAgICAgICAgc28gPSBlbztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCBzYywgc28sIGVjLCBlbyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGNvbGxhcHNlVG9Qb2ludDogZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRBbmRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHMoY29uc3RydWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAvLyBVcGRhdGVzIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIGFuZCBjb2xsYXBzZWQgYWZ0ZXIgYm91bmRhcnkgY2hhbmdlXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbGxhcHNlZEFuZENvbW1vbkFuY2VzdG9yKHJhbmdlKSB7XG4gICAgICAgICAgICByYW5nZS5jb2xsYXBzZWQgPSAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lciAmJiByYW5nZS5zdGFydE9mZnNldCA9PT0gcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgIHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29sbGFwc2VkID9cbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2UuZW5kQ29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUJvdW5kYXJpZXMocmFuZ2UsIHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpIHtcbiAgICAgICAgICAgIHJhbmdlLnN0YXJ0Q29udGFpbmVyID0gc3RhcnRDb250YWluZXI7XG4gICAgICAgICAgICByYW5nZS5zdGFydE9mZnNldCA9IHN0YXJ0T2Zmc2V0O1xuICAgICAgICAgICAgcmFuZ2UuZW5kQ29udGFpbmVyID0gZW5kQ29udGFpbmVyO1xuICAgICAgICAgICAgcmFuZ2UuZW5kT2Zmc2V0ID0gZW5kT2Zmc2V0O1xuICAgICAgICAgICAgcmFuZ2UuZG9jdW1lbnQgPSBkb20uZ2V0RG9jdW1lbnQoc3RhcnRDb250YWluZXIpO1xuXG4gICAgICAgICAgICB1cGRhdGVDb2xsYXBzZWRBbmRDb21tb25BbmNlc3RvcihyYW5nZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBSYW5nZShkb2MpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRDb250YWluZXIgPSBkb2M7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0T2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHRoaXMuZW5kQ29udGFpbmVyID0gZG9jO1xuICAgICAgICAgICAgdGhpcy5lbmRPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IGRvYztcbiAgICAgICAgICAgIHVwZGF0ZUNvbGxhcHNlZEFuZENvbW1vbkFuY2VzdG9yKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3JlYXRlUHJvdG90eXBlUmFuZ2UoUmFuZ2UsIHVwZGF0ZUJvdW5kYXJpZXMpO1xuXG4gICAgICAgIHV0aWwuZXh0ZW5kKFJhbmdlLCB7XG4gICAgICAgICAgICByYW5nZVByb3BlcnRpZXM6IHJhbmdlUHJvcGVydGllcyxcbiAgICAgICAgICAgIFJhbmdlSXRlcmF0b3I6IFJhbmdlSXRlcmF0b3IsXG4gICAgICAgICAgICBjb3B5Q29tcGFyaXNvbkNvbnN0YW50czogY29weUNvbXBhcmlzb25Db25zdGFudHMsXG4gICAgICAgICAgICBjcmVhdGVQcm90b3R5cGVSYW5nZTogY3JlYXRlUHJvdG90eXBlUmFuZ2UsXG4gICAgICAgICAgICBpbnNwZWN0OiBpbnNwZWN0LFxuICAgICAgICAgICAgdG9IdG1sOiByYW5nZVRvSHRtbCxcbiAgICAgICAgICAgIGdldFJhbmdlRG9jdW1lbnQ6IGdldFJhbmdlRG9jdW1lbnQsXG4gICAgICAgICAgICByYW5nZXNFcXVhbDogZnVuY3Rpb24ocjEsIHIyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIxLnN0YXJ0Q29udGFpbmVyID09PSByMi5zdGFydENvbnRhaW5lciAmJlxuICAgICAgICAgICAgICAgICAgICByMS5zdGFydE9mZnNldCA9PT0gcjIuc3RhcnRPZmZzZXQgJiZcbiAgICAgICAgICAgICAgICAgICAgcjEuZW5kQ29udGFpbmVyID09PSByMi5lbmRDb250YWluZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgcjEuZW5kT2Zmc2V0ID09PSByMi5lbmRPZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwaS5Eb21SYW5nZSA9IFJhbmdlO1xuICAgIH0pO1xyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG4gICAgLy8gV3JhcHBlcnMgZm9yIHRoZSBicm93c2VyJ3MgbmF0aXZlIERPTSBSYW5nZSBhbmQvb3IgVGV4dFJhbmdlIGltcGxlbWVudGF0aW9uIFxuICAgIGFwaS5jcmVhdGVDb3JlTW9kdWxlKFwiV3JhcHBlZFJhbmdlXCIsIFtcIkRvbVJhbmdlXCJdLCBmdW5jdGlvbihhcGksIG1vZHVsZSkge1xuICAgICAgICB2YXIgV3JhcHBlZFJhbmdlLCBXcmFwcGVkVGV4dFJhbmdlO1xuICAgICAgICB2YXIgZG9tID0gYXBpLmRvbTtcbiAgICAgICAgdmFyIHV0aWwgPSBhcGkudXRpbDtcbiAgICAgICAgdmFyIERvbVBvc2l0aW9uID0gZG9tLkRvbVBvc2l0aW9uO1xuICAgICAgICB2YXIgRG9tUmFuZ2UgPSBhcGkuRG9tUmFuZ2U7XG4gICAgICAgIHZhciBnZXRCb2R5ID0gZG9tLmdldEJvZHk7XG4gICAgICAgIHZhciBnZXRDb250ZW50RG9jdW1lbnQgPSBkb20uZ2V0Q29udGVudERvY3VtZW50O1xuICAgICAgICB2YXIgaXNDaGFyYWN0ZXJEYXRhTm9kZSA9IGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlO1xuXG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICBpZiAoYXBpLmZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHdyYXBwZXIgYXJvdW5kIHRoZSBicm93c2VyJ3MgbmF0aXZlIERPTSBSYW5nZS4gSXQgaGFzIHR3byBhaW1zOlxuICAgICAgICAgICAgLy8gLSBQcm92aWRlIHdvcmthcm91bmRzIGZvciBzcGVjaWZpYyBicm93c2VyIGJ1Z3NcbiAgICAgICAgICAgIC8vIC0gcHJvdmlkZSBjb252ZW5pZW50IGV4dGVuc2lvbnMsIHdoaWNoIGFyZSBpbmhlcml0ZWQgZnJvbSBSYW5neSdzIERvbVJhbmdlXG5cbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2VQcm90bztcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2VQcm9wZXJ0aWVzID0gRG9tUmFuZ2UucmFuZ2VQcm9wZXJ0aWVzO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gcmFuZ2VQcm9wZXJ0aWVzLmxlbmd0aCwgcHJvcDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcCA9IHJhbmdlUHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlW3Byb3BdID0gcmFuZ2UubmF0aXZlUmFuZ2VbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gRml4IGZvciBicm9rZW4gY29sbGFwc2VkIHByb3BlcnR5IGluIElFIDkuXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlZCA9IChyYW5nZS5zdGFydENvbnRhaW5lciA9PT0gcmFuZ2UuZW5kQ29udGFpbmVyICYmIHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSByYW5nZS5lbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU5hdGl2ZVJhbmdlKHJhbmdlLCBzdGFydENvbnRhaW5lciwgc3RhcnRPZmZzZXQsIGVuZENvbnRhaW5lciwgZW5kT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydE1vdmVkID0gKHJhbmdlLnN0YXJ0Q29udGFpbmVyICE9PSBzdGFydENvbnRhaW5lciB8fCByYW5nZS5zdGFydE9mZnNldCAhPSBzdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRNb3ZlZCA9IChyYW5nZS5lbmRDb250YWluZXIgIT09IGVuZENvbnRhaW5lciB8fCByYW5nZS5lbmRPZmZzZXQgIT0gZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hdGl2ZVJhbmdlRGlmZmVyZW50ID0gIXJhbmdlLmVxdWFscyhyYW5nZS5uYXRpdmVSYW5nZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWx3YXlzIHNldCBib3RoIGJvdW5kYXJpZXMgZm9yIHRoZSBiZW5lZml0IG9mIElFOSAoc2VlIGlzc3VlIDM1KVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRNb3ZlZCB8fCBlbmRNb3ZlZCB8fCBuYXRpdmVSYW5nZURpZmZlcmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGVuZENvbnRhaW5lciwgZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyO1xuXG4gICAgICAgICAgICAgICAgV3JhcHBlZFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKFwiV3JhcHBlZFJhbmdlOiBSYW5nZSBtdXN0IGJlIHNwZWNpZmllZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlID0gcmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgRG9tUmFuZ2UuY3JlYXRlUHJvdG90eXBlUmFuZ2UoV3JhcHBlZFJhbmdlLCB1cGRhdGVOYXRpdmVSYW5nZSk7XG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvID0gV3JhcHBlZFJhbmdlLnByb3RvdHlwZTtcblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2VsZWN0Tm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZWxlY3ROb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY2xvbmVDb250ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYXRpdmVSYW5nZS5jbG9uZUNvbnRlbnRzKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIER1ZSB0byBhIGxvbmctc3RhbmRpbmcgRmlyZWZveCBidWcgdGhhdCBJIGhhdmUgbm90IGJlZW4gYWJsZSB0byBmaW5kIGEgcmVsaWFibGUgd2F5IHRvIGRldGVjdCxcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnROb2RlKCkgaXMgbmV2ZXIgZGVsZWdhdGVkIHRvIHRoZSBuYXRpdmUgcmFuZ2UuXG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnN1cnJvdW5kQ29udGVudHMgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc3Vycm91bmRDb250ZW50cyhub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLmNvbGxhcHNlID0gZnVuY3Rpb24oaXNTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLmNvbGxhcHNlKGlzU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY2xvbmVSYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFdyYXBwZWRSYW5nZSh0aGlzLm5hdGl2ZVJhbmdlLmNsb25lUmFuZ2UoKSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRlc3QgcmFuZ2UgYW5kIG5vZGUgZm9yIGZlYXR1cmUgZGV0ZWN0aW9uXG5cbiAgICAgICAgICAgICAgICB2YXIgdGVzdFRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJ0ZXN0XCIpO1xuICAgICAgICAgICAgICAgIGdldEJvZHkoZG9jdW1lbnQpLmFwcGVuZENoaWxkKHRlc3RUZXh0Tm9kZSk7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcblxuICAgICAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgICAgICAgICAgLy8gVGVzdCBmb3IgRmlyZWZveCAyIGJ1ZyB0aGF0IHByZXZlbnRzIG1vdmluZyB0aGUgc3RhcnQgb2YgYSBSYW5nZSB0byBhIHBvaW50IGFmdGVyIGl0cyBjdXJyZW50IGVuZCBhbmRcbiAgICAgICAgICAgICAgICAvLyBjb3JyZWN0IGZvciBpdFxuXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodGVzdFRleHROb2RlLCAwKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQodGVzdFRleHROb2RlLCAwKTtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHRlc3RUZXh0Tm9kZSwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRTdGFydCA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtuYW1lXShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgfSBjYXRjaChleCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0U3RhcnQgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldEVuZCA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIgPSBmdW5jdGlvbihuYW1lLCBvcHBvc2l0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtuYW1lXShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlW29wcG9zaXRlTmFtZV0obm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2VbbmFtZV0obm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRTdGFydEJlZm9yZSA9IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihcInNldFN0YXJ0QmVmb3JlXCIsIFwic2V0RW5kQmVmb3JlXCIpO1xuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0U3RhcnRBZnRlciA9IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihcInNldFN0YXJ0QWZ0ZXJcIiwgXCJzZXRFbmRBZnRlclwiKTtcbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldEVuZEJlZm9yZSA9IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihcInNldEVuZEJlZm9yZVwiLCBcInNldFN0YXJ0QmVmb3JlXCIpO1xuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kQWZ0ZXIgPSBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoXCJzZXRFbmRBZnRlclwiLCBcInNldFN0YXJ0QWZ0ZXJcIik7XG5cbiAgICAgICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAgICAgICAgIC8vIEFsd2F5cyB1c2UgRE9NNC1jb21wbGlhbnQgc2VsZWN0Tm9kZUNvbnRlbnRzIGltcGxlbWVudGF0aW9uOiBpdCdzIHNpbXBsZXIgYW5kIGxlc3MgY29kZSB0aGFuIHRlc3RpbmdcbiAgICAgICAgICAgICAgICAvLyB3aGV0aGVyIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24gY2FuIGJlIHRydXN0ZWRcbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNlbGVjdE5vZGVDb250ZW50cyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydEFuZEVuZChub2RlLCAwLCBkb20uZ2V0Tm9kZUxlbmd0aChub2RlKSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgICAgICAgICAgLy8gVGVzdCBmb3IgYW5kIGNvcnJlY3QgV2ViS2l0IGJ1ZyB0aGF0IGhhcyB0aGUgYmVoYXZpb3VyIG9mIGNvbXBhcmVCb3VuZGFyeVBvaW50cyByb3VuZCB0aGUgd3Jvbmcgd2F5IGZvclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0YW50cyBTVEFSVF9UT19FTkQgYW5kIEVORF9UT19TVEFSVDogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwNzM4XG5cbiAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHModGVzdFRleHROb2RlKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQodGVzdFRleHROb2RlLCAzKTtcblxuICAgICAgICAgICAgICAgIHZhciByYW5nZTIgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgIHJhbmdlMi5zZWxlY3ROb2RlQ29udGVudHModGVzdFRleHROb2RlKTtcbiAgICAgICAgICAgICAgICByYW5nZTIuc2V0RW5kKHRlc3RUZXh0Tm9kZSwgNCk7XG4gICAgICAgICAgICAgICAgcmFuZ2UyLnNldFN0YXJ0KHRlc3RUZXh0Tm9kZSwgMik7XG5cbiAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHJhbmdlLlNUQVJUX1RPX0VORCwgcmFuZ2UyKSA9PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHJhbmdlLkVORF9UT19TVEFSVCwgcmFuZ2UyKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHdyb25nIHdheSByb3VuZCwgc28gY29ycmVjdCBmb3IgaXRcblxuICAgICAgICAgICAgICAgICAgICByYW5nZVByb3RvLmNvbXBhcmVCb3VuZGFyeVBvaW50cyA9IGZ1bmN0aW9uKHR5cGUsIHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHJhbmdlLm5hdGl2ZVJhbmdlIHx8IHJhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gcmFuZ2UuU1RBUlRfVE9fRU5EKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHJhbmdlLkVORF9UT19TVEFSVDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSByYW5nZS5FTkRfVE9fU1RBUlQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gcmFuZ2UuU1RBUlRfVE9fRU5EO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHR5cGUsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZVByb3RvLmNvbXBhcmVCb3VuZGFyeVBvaW50cyA9IGZ1bmN0aW9uKHR5cGUsIHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYXRpdmVSYW5nZS5jb21wYXJlQm91bmRhcnlQb2ludHModHlwZSwgcmFuZ2UubmF0aXZlUmFuZ2UgfHwgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgICAgICAgICAgLy8gVGVzdCBmb3IgSUUgZGVsZXRlQ29udGVudHMoKSBhbmQgZXh0cmFjdENvbnRlbnRzKCkgYnVnIGFuZCBjb3JyZWN0IGl0LiBTZWUgaXNzdWUgMTA3LlxuXG4gICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBcIjEyM1wiO1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTtcbiAgICAgICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKGVsKTtcblxuICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHRleHROb2RlLCAxKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQodGV4dE5vZGUsIDIpO1xuICAgICAgICAgICAgICAgIHJhbmdlLmRlbGV0ZUNvbnRlbnRzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGV4dE5vZGUuZGF0YSA9PSBcIjEzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQmVoYXZpb3VyIGlzIGNvcnJlY3QgcGVyIERPTTQgUmFuZ2Ugc28gd3JhcCB0aGUgYnJvd3NlcidzIGltcGxlbWVudGF0aW9uIG9mIGRlbGV0ZUNvbnRlbnRzKCkgYW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4dHJhY3RDb250ZW50cygpXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uZGVsZXRlQ29udGVudHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2UuZGVsZXRlQ29udGVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByYW5nZVByb3RvLmV4dHJhY3RDb250ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyYWcgPSB0aGlzLm5hdGl2ZVJhbmdlLmV4dHJhY3RDb250ZW50cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyYWc7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgICAgICAgICBib2R5ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgICAgICAgICAgLy8gVGVzdCBmb3IgZXhpc3RlbmNlIG9mIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBhbmQgZGVsZWdhdGUgdG8gaXQgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNIb3N0TWV0aG9kKHJhbmdlLCBcImNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudFwiKSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZVByb3RvLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCA9IGZ1bmN0aW9uKGZyYWdtZW50U3RyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYXRpdmVSYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoZnJhZ21lbnRTdHIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgICAgICAgICBnZXRCb2R5KGRvY3VtZW50KS5yZW1vdmVDaGlsZCh0ZXN0VGV4dE5vZGUpO1xuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5nZXROYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIldyYXBwZWRSYW5nZVwiO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBhcGkuV3JhcHBlZFJhbmdlID0gV3JhcHBlZFJhbmdlO1xuXG4gICAgICAgICAgICAgICAgYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgXCJjcmVhdGVOYXRpdmVSYW5nZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYy5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoYXBpLmZlYXR1cmVzLmltcGxlbWVudHNUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBUaGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgYSBidWcgd2hlcmUgSUUgcmV0dXJucyB0aGUgd3JvbmcgY29udGFpbmVyIGVsZW1lbnQgZnJvbSB0aGUgVGV4dFJhbmdlJ3MgcGFyZW50RWxlbWVudCgpXG4gICAgICAgICAgICBtZXRob2QuIEZvciBleGFtcGxlLCBpbiB0aGUgZm9sbG93aW5nICh3aGVyZSBwaXBlcyBkZW5vdGUgdGhlIHNlbGVjdGlvbiBib3VuZGFyaWVzKTpcblxuICAgICAgICAgICAgPHVsIGlkPVwidWxcIj48bGkgaWQ9XCJhXCI+fCBhIDwvbGk+PGxpIGlkPVwiYlwiPiBiIHw8L2xpPjwvdWw+XG5cbiAgICAgICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgYWxlcnQocmFuZ2UucGFyZW50RWxlbWVudCgpLmlkKTsgLy8gU2hvdWxkIGFsZXJ0IFwidWxcIiBidXQgYWxlcnRzIFwiYlwiXG5cbiAgICAgICAgICAgIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGNvbW1vbiBhbmNlc3RvciBub2RlIG9mIHRoZSBmb2xsb3dpbmc6XG4gICAgICAgICAgICAtIHRoZSBwYXJlbnRFbGVtZW50KCkgb2YgdGhlIHRleHRSYW5nZVxuICAgICAgICAgICAgLSB0aGUgcGFyZW50RWxlbWVudCgpIG9mIHRoZSB0ZXh0UmFuZ2UgYWZ0ZXIgY2FsbGluZyBjb2xsYXBzZSh0cnVlKVxuICAgICAgICAgICAgLSB0aGUgcGFyZW50RWxlbWVudCgpIG9mIHRoZSB0ZXh0UmFuZ2UgYWZ0ZXIgY2FsbGluZyBjb2xsYXBzZShmYWxzZSlcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgZ2V0VGV4dFJhbmdlQ29udGFpbmVyRWxlbWVudCA9IGZ1bmN0aW9uKHRleHRSYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRFbCA9IHRleHRSYW5nZS5wYXJlbnRFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gdGV4dFJhbmdlLmR1cGxpY2F0ZSgpO1xuICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydEVsID0gcmFuZ2UucGFyZW50RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIHJhbmdlID0gdGV4dFJhbmdlLmR1cGxpY2F0ZSgpO1xuICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kRWwgPSByYW5nZS5wYXJlbnRFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0RW5kQ29udGFpbmVyID0gKHN0YXJ0RWwgPT0gZW5kRWwpID8gc3RhcnRFbCA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihzdGFydEVsLCBlbmRFbCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRFbmRDb250YWluZXIgPT0gcGFyZW50RWwgPyBzdGFydEVuZENvbnRhaW5lciA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihwYXJlbnRFbCwgc3RhcnRFbmRDb250YWluZXIpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHRleHRSYW5nZUlzQ29sbGFwc2VkID0gZnVuY3Rpb24odGV4dFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHRSYW5nZS5jb21wYXJlRW5kUG9pbnRzKFwiU3RhcnRUb0VuZFwiLCB0ZXh0UmFuZ2UpID09IDA7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBHZXRzIHRoZSBib3VuZGFyeSBvZiBhIFRleHRSYW5nZSBleHByZXNzZWQgYXMgYSBub2RlIGFuZCBhbiBvZmZzZXQgd2l0aGluIHRoYXQgbm9kZS4gVGhpcyBmdW5jdGlvbiBzdGFydGVkXG4gICAgICAgICAgICAvLyBvdXQgYXMgYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBjb2RlIGZvdW5kIGluIFRpbSBDYW1lcm9uIFJ5YW4ncyBJRVJhbmdlIChodHRwOi8vY29kZS5nb29nbGUuY29tL3AvaWVyYW5nZS8pXG4gICAgICAgICAgICAvLyBidXQgaGFzIGdyb3duLCBmaXhpbmcgcHJvYmxlbXMgd2l0aCBsaW5lIGJyZWFrcyBpbiBwcmVmb3JtYXR0ZWQgdGV4dCwgYWRkaW5nIHdvcmthcm91bmQgZm9yIElFIFRleHRSYW5nZVxuICAgICAgICAgICAgLy8gYnVncywgaGFuZGxpbmcgZm9yIGlucHV0cyBhbmQgaW1hZ2VzLCBwbHVzIG9wdGltaXphdGlvbnMuXG4gICAgICAgICAgICB2YXIgZ2V0VGV4dFJhbmdlQm91bmRhcnlQb3NpdGlvbiA9IGZ1bmN0aW9uKHRleHRSYW5nZSwgd2hvbGVSYW5nZUNvbnRhaW5lckVsZW1lbnQsIGlzU3RhcnQsIGlzQ29sbGFwc2VkLCBzdGFydEluZm8pIHtcbiAgICAgICAgICAgICAgICB2YXIgd29ya2luZ1JhbmdlID0gdGV4dFJhbmdlLmR1cGxpY2F0ZSgpO1xuICAgICAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5jb2xsYXBzZShpc1N0YXJ0KTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyRWxlbWVudCA9IHdvcmtpbmdSYW5nZS5wYXJlbnRFbGVtZW50KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTb21ldGltZXMgY29sbGFwc2luZyBhIFRleHRSYW5nZSB0aGF0J3MgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dCBub2RlIGNhbiBtb3ZlIGl0IGludG8gdGhlIHByZXZpb3VzIG5vZGUsIHNvXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHRoYXRcbiAgICAgICAgICAgICAgICBpZiAoIWRvbS5pc09ySXNBbmNlc3Rvck9mKHdob2xlUmFuZ2VDb250YWluZXJFbGVtZW50LCBjb250YWluZXJFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50ID0gd2hvbGVSYW5nZUNvbnRhaW5lckVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAvLyBEZWFsIHdpdGggbm9kZXMgdGhhdCBjYW5ub3QgXCJjb250YWluIHJpY2ggSFRNTCBtYXJrdXBcIi4gSW4gcHJhY3RpY2UsIHRoaXMgbWVhbnMgZm9ybSBpbnB1dHMsIGltYWdlcyBhbmRcbiAgICAgICAgICAgICAgICAvLyBzaW1pbGFyLiBTZWUgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2FhNzAzOTUwJTI4VlMuODUlMjkuYXNweFxuICAgICAgICAgICAgICAgIGlmICghY29udGFpbmVyRWxlbWVudC5jYW5IYXZlSFRNTCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gbmV3IERvbVBvc2l0aW9uKGNvbnRhaW5lckVsZW1lbnQucGFyZW50Tm9kZSwgZG9tLmdldE5vZGVJbmRleChjb250YWluZXJFbGVtZW50KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlSW5mbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJbmRleDogcG9zLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50OiBwb3Mubm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB3b3JraW5nTm9kZSA9IGRvbS5nZXREb2N1bWVudChjb250YWluZXJFbGVtZW50KS5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIEhUTUw1IFNoaXYncyBpbnNhbmUgdmlvbGF0aW9uIG9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoKS4gU2VlIFJhbmd5IGlzc3VlIDEwNCBhbmQgSFRNTDVcbiAgICAgICAgICAgICAgICAvLyBTaGl2IGlzc3VlIDY0OiBodHRwczovL2dpdGh1Yi5jb20vYUZhcmthcy9odG1sNXNoaXYvaXNzdWVzLzY0XG4gICAgICAgICAgICAgICAgaWYgKHdvcmtpbmdOb2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgd29ya2luZ05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3b3JraW5nTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhcmlzb24sIHdvcmtpbmdDb21wYXJpc29uVHlwZSA9IGlzU3RhcnQgPyBcIlN0YXJ0VG9TdGFydFwiIDogXCJTdGFydFRvRW5kXCI7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzTm9kZSwgbmV4dE5vZGUsIGJvdW5kYXJ5UG9zaXRpb24sIGJvdW5kYXJ5Tm9kZTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSAoc3RhcnRJbmZvICYmIHN0YXJ0SW5mby5jb250YWluZXJFbGVtZW50ID09IGNvbnRhaW5lckVsZW1lbnQpID8gc3RhcnRJbmZvLm5vZGVJbmRleCA6IDA7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkTm9kZUNvdW50ID0gY29udGFpbmVyRWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gY2hpbGROb2RlQ291bnQ7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBlbmQgZmlyc3QuIENvZGUgd2l0aGluIHRoZSBsb29wIGFzc3VtZXMgdGhhdCB0aGUgZW5kdGggY2hpbGQgbm9kZSBvZiB0aGUgY29udGFpbmVyIGlzIGRlZmluaXRlbHlcbiAgICAgICAgICAgICAgICAvLyBhZnRlciB0aGUgcmFuZ2UgYm91bmRhcnkuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVJbmRleCA9IGVuZDtcblxuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlSW5kZXggPT0gY2hpbGROb2RlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQod29ya2luZ05vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5pbnNlcnRCZWZvcmUod29ya2luZ05vZGUsIGNvbnRhaW5lckVsZW1lbnQuY2hpbGROb2Rlc1tub2RlSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3b3JraW5nUmFuZ2UubW92ZVRvRWxlbWVudFRleHQod29ya2luZ05vZGUpO1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gd29ya2luZ1JhbmdlLmNvbXBhcmVFbmRQb2ludHMod29ya2luZ0NvbXBhcmlzb25UeXBlLCB0ZXh0UmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGFyaXNvbiA9PSAwIHx8IHN0YXJ0ID09IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcGFyaXNvbiA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCA9PSBzdGFydCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBrbm93IHRoZSBlbmR0aCBjaGlsZCBub2RlIGlzIGFmdGVyIHRoZSByYW5nZSBib3VuZGFyeSwgc28gd2UgbXVzdCBiZSBkb25lLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG5vZGVJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IChlbmQgPT0gc3RhcnQgKyAxKSA/IHN0YXJ0IDogbm9kZUluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5vZGVJbmRleCA9IE1hdGguZmxvb3IoKHN0YXJ0ICsgZW5kKSAvIDIpO1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50LnJlbW92ZUNoaWxkKHdvcmtpbmdOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIG5vdyByZWFjaGVkIG9yIGdvbmUgcGFzdCB0aGUgYm91bmRhcnkgb2YgdGhlIHRleHQgcmFuZ2Ugd2UncmUgaW50ZXJlc3RlZCBpblxuICAgICAgICAgICAgICAgIC8vIHNvIGhhdmUgaWRlbnRpZmllZCB0aGUgbm9kZSB3ZSB3YW50XG4gICAgICAgICAgICAgICAgYm91bmRhcnlOb2RlID0gd29ya2luZ05vZGUubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29tcGFyaXNvbiA9PSAtMSAmJiBib3VuZGFyeU5vZGUgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShib3VuZGFyeU5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBjaGFyYWN0ZXIgZGF0YSBub2RlICh0ZXh0LCBjb21tZW50LCBjZGF0YSkuIFRoZSB3b3JraW5nIHJhbmdlIGlzIGNvbGxhcHNlZCBhdCB0aGUgc3RhcnQgb2ZcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG5vZGUgY29udGFpbmluZyB0aGUgdGV4dCByYW5nZSdzIGJvdW5kYXJ5LCBzbyB3ZSBtb3ZlIHRoZSBlbmQgb2YgdGhlIHdvcmtpbmcgcmFuZ2UgdG8gdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGJvdW5kYXJ5IHBvaW50IGFuZCBtZWFzdXJlIHRoZSBsZW5ndGggb2YgaXRzIHRleHQgdG8gZ2V0IHRoZSBib3VuZGFyeSdzIG9mZnNldCB3aXRoaW4gdGhlIG5vZGUuXG4gICAgICAgICAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5zZXRFbmRQb2ludChpc1N0YXJ0ID8gXCJFbmRUb1N0YXJ0XCIgOiBcIkVuZFRvRW5kXCIsIHRleHRSYW5nZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoL1tcXHJcXG5dLy50ZXN0KGJvdW5kYXJ5Tm9kZS5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgIEZvciB0aGUgcGFydGljdWxhciBjYXNlIG9mIGEgYm91bmRhcnkgd2l0aGluIGEgdGV4dCBub2RlIGNvbnRhaW5pbmcgcmVuZGVyZWQgbGluZSBicmVha3MgKHdpdGhpbiBhXG4gICAgICAgICAgICAgICAgICAgICAgICA8cHJlPiBlbGVtZW50LCBmb3IgZXhhbXBsZSksIHdlIG5lZWQgYSBzbGlnaHRseSBjb21wbGljYXRlZCBhcHByb2FjaCB0byBnZXQgdGhlIGJvdW5kYXJ5J3Mgb2Zmc2V0IGluXG4gICAgICAgICAgICAgICAgICAgICAgICBJRS4gVGhlIGZhY3RzOlxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAtIEVhY2ggbGluZSBicmVhayBpcyByZXByZXNlbnRlZCBhcyBcXHIgaW4gdGhlIHRleHQgbm9kZSdzIGRhdGEvbm9kZVZhbHVlIHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC0gRWFjaCBsaW5lIGJyZWFrIGlzIHJlcHJlc2VudGVkIGFzIFxcclxcbiBpbiB0aGUgVGV4dFJhbmdlJ3MgJ3RleHQnIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgICAtIFRoZSAndGV4dCcgcHJvcGVydHkgb2YgdGhlIFRleHRSYW5nZSBkb2VzIG5vdCBjb250YWluIHRyYWlsaW5nIGxpbmUgYnJlYWtzXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIFRvIGdldCByb3VuZCB0aGUgcHJvYmxlbSBwcmVzZW50ZWQgYnkgdGhlIGZpbmFsIGZhY3QgYWJvdmUsIHdlIGNhbiB1c2UgdGhlIGZhY3QgdGhhdCBUZXh0UmFuZ2Unc1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVN0YXJ0KCkgYW5kIG1vdmVFbmQoKSBtZXRob2RzIHJldHVybiB0aGUgYWN0dWFsIG51bWJlciBvZiBjaGFyYWN0ZXJzIG1vdmVkLCB3aGljaCBpcyBub3RcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyaWx5IHRoZSBzYW1lIGFzIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBpdCB3YXMgaW5zdHJ1Y3RlZCB0byBtb3ZlLiBUaGUgc2ltcGxlc3QgYXBwcm9hY2ggaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHVzZSB0aGlzIHRvIHN0b3JlIHRoZSBjaGFyYWN0ZXJzIG1vdmVkIHdoZW4gbW92aW5nIGJvdGggdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHJhbmdlIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgb2YgdGhlIGRvY3VtZW50IGJvZHkgYW5kIHN1YnRyYWN0aW5nIHRoZSBzdGFydCBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mZnNldCAodGhlXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm1vdmUtbmVnYXRpdmUtZ2F6aWxsaW9uXCIgbWV0aG9kKS4gSG93ZXZlciwgdGhpcyBpcyBleHRyZW1lbHkgc2xvdyB3aGVuIHRoZSBkb2N1bWVudCBpcyBsYXJnZSBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSByYW5nZSBpcyBuZWFyIHRoZSBlbmQgb2YgaXQuIENsZWFybHkgZG9pbmcgdGhlIG1pcnJvciBpbWFnZSAoaS5lLiBtb3ZpbmcgdGhlIHJhbmdlIGJvdW5kYXJpZXMgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50KSBoYXMgdGhlIHNhbWUgcHJvYmxlbS5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgQW5vdGhlciBhcHByb2FjaCB0aGF0IHdvcmtzIGlzIHRvIHVzZSBtb3ZlU3RhcnQoKSB0byBtb3ZlIHRoZSBzdGFydCBib3VuZGFyeSBvZiB0aGUgcmFuZ2UgdXAgdG8gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgYm91bmRhcnkgb25lIGNoYXJhY3RlciBhdCBhIHRpbWUgYW5kIGluY3JlbWVudGluZyBhIGNvdW50ZXIgd2l0aCB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlU3RhcnQoKSBjYWxsLiBIb3dldmVyLCB0aGUgY2hlY2sgZm9yIHdoZXRoZXIgdGhlIHN0YXJ0IGJvdW5kYXJ5IGhhcyByZWFjaGVkIHRoZSBlbmQgYm91bmRhcnkgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVuc2l2ZSwgc28gdGhpcyBtZXRob2QgaXMgc2xvdyAoYWx0aG91Z2ggdW5saWtlIFwibW92ZS1uZWdhdGl2ZS1nYXppbGxpb25cIiBpcyBsYXJnZWx5IHVuYWZmZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBsb2NhdGlvbiBvZiB0aGUgcmFuZ2Ugd2l0aGluIHRoZSBkb2N1bWVudCkuXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBhcHByb2FjaCB1c2VkIGJlbG93IGlzIGEgaHlicmlkIG9mIHRoZSB0d28gbWV0aG9kcyBhYm92ZS4gSXQgdXNlcyB0aGUgZmFjdCB0aGF0IGEgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluaW5nIHRoZSBUZXh0UmFuZ2UncyAndGV4dCcgcHJvcGVydHkgd2l0aCBlYWNoIFxcclxcbiBjb252ZXJ0ZWQgdG8gYSBzaW5nbGUgXFxyIGNoYXJhY3RlciBjYW5ub3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGxvbmdlciB0aGFuIHRoZSB0ZXh0IG9mIHRoZSBUZXh0UmFuZ2UsIHNvIHRoZSBzdGFydCBvZiB0aGUgcmFuZ2UgaXMgbW92ZWQgdGhhdCBsZW5ndGggaW5pdGlhbGx5XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlbiBhIGNoYXJhY3RlciBhdCBhIHRpbWUgdG8gbWFrZSB1cCBmb3IgYW55IHRyYWlsaW5nIGxpbmUgYnJlYWtzIG5vdCBjb250YWluZWQgaW4gdGhlICd0ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuIFRoaXMgaGFzIGdvb2QgcGVyZm9ybWFuY2UgaW4gbW9zdCBzaXR1YXRpb25zIGNvbXBhcmVkIHRvIHRoZSBwcmV2aW91cyB0d28gbWV0aG9kcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcFJhbmdlID0gd29ya2luZ1JhbmdlLmR1cGxpY2F0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlTGVuZ3RoID0gdGVtcFJhbmdlLnRleHQucmVwbGFjZSgvXFxyXFxuL2csIFwiXFxyXCIpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGVtcFJhbmdlLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCByYW5nZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIChjb21wYXJpc29uID0gdGVtcFJhbmdlLmNvbXBhcmVFbmRQb2ludHMoXCJTdGFydFRvRW5kXCIsIHRlbXBSYW5nZSkpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFJhbmdlLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHdvcmtpbmdSYW5nZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uID0gbmV3IERvbVBvc2l0aW9uKGJvdW5kYXJ5Tm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBib3VuZGFyeSBpbW1lZGlhdGVseSBmb2xsb3dzIGEgY2hhcmFjdGVyIGRhdGEgbm9kZSBhbmQgdGhpcyBpcyB0aGUgZW5kIGJvdW5kYXJ5LCB3ZSBzaG91bGQgZmF2b3VyXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgcG9zaXRpb24gd2l0aGluIHRoYXQsIGFuZCBsaWtld2lzZSBmb3IgYSBzdGFydCBib3VuZGFyeSBwcmVjZWRpbmcgYSBjaGFyYWN0ZXIgZGF0YSBub2RlXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IChpc0NvbGxhcHNlZCB8fCAhaXNTdGFydCkgJiYgd29ya2luZ05vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IChpc0NvbGxhcHNlZCB8fCBpc1N0YXJ0KSAmJiB3b3JraW5nTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHROb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUobmV4dE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uID0gbmV3IERvbVBvc2l0aW9uKG5leHROb2RlLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmV2aW91c05vZGUgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShwcmV2aW91c05vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uID0gbmV3IERvbVBvc2l0aW9uKHByZXZpb3VzTm9kZSwgcHJldmlvdXNOb2RlLmRhdGEubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UG9zaXRpb24gPSBuZXcgRG9tUG9zaXRpb24oY29udGFpbmVyRWxlbWVudCwgZG9tLmdldE5vZGVJbmRleCh3b3JraW5nTm9kZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgICAgICAgICB3b3JraW5nTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHdvcmtpbmdOb2RlKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UG9zaXRpb246IGJvdW5kYXJ5UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIG5vZGVJbmZvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlSW5kZXg6IG5vZGVJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IGNvbnRhaW5lckVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBSZXR1cm5zIGEgVGV4dFJhbmdlIHJlcHJlc2VudGluZyB0aGUgYm91bmRhcnkgb2YgYSBUZXh0UmFuZ2UgZXhwcmVzc2VkIGFzIGEgbm9kZSBhbmQgYW4gb2Zmc2V0IHdpdGhpbiB0aGF0XG4gICAgICAgICAgICAvLyBub2RlLiBUaGlzIGZ1bmN0aW9uIHN0YXJ0ZWQgb3V0IGFzIGFuIG9wdGltaXplZCB2ZXJzaW9uIG9mIGNvZGUgZm91bmQgaW4gVGltIENhbWVyb24gUnlhbidzIElFUmFuZ2VcbiAgICAgICAgICAgIC8vIChodHRwOi8vY29kZS5nb29nbGUuY29tL3AvaWVyYW5nZS8pXG4gICAgICAgICAgICB2YXIgY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UgPSBmdW5jdGlvbihib3VuZGFyeVBvc2l0aW9uLCBpc1N0YXJ0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kYXJ5Tm9kZSwgYm91bmRhcnlQYXJlbnQsIGJvdW5kYXJ5T2Zmc2V0ID0gYm91bmRhcnlQb3NpdGlvbi5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IGRvbS5nZXREb2N1bWVudChib3VuZGFyeVBvc2l0aW9uLm5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciB3b3JraW5nTm9kZSwgY2hpbGROb2Rlcywgd29ya2luZ1JhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgIHZhciBub2RlSXNEYXRhTm9kZSA9IGlzQ2hhcmFjdGVyRGF0YU5vZGUoYm91bmRhcnlQb3NpdGlvbi5ub2RlKTtcblxuICAgICAgICAgICAgICAgIGlmIChub2RlSXNEYXRhTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeU5vZGUgPSBib3VuZGFyeVBvc2l0aW9uLm5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UGFyZW50ID0gYm91bmRhcnlOb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlcyA9IGJvdW5kYXJ5UG9zaXRpb24ubm9kZS5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeU5vZGUgPSAoYm91bmRhcnlPZmZzZXQgPCBjaGlsZE5vZGVzLmxlbmd0aCkgPyBjaGlsZE5vZGVzW2JvdW5kYXJ5T2Zmc2V0XSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UGFyZW50ID0gYm91bmRhcnlQb3NpdGlvbi5ub2RlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFBvc2l0aW9uIHRoZSByYW5nZSBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIG5vZGUgY29udGFpbmluZyB0aGUgYm91bmRhcnlcbiAgICAgICAgICAgICAgICB3b3JraW5nTm9kZSA9IGRvYy5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblxuICAgICAgICAgICAgICAgIC8vIE1ha2luZyB0aGUgd29ya2luZyBlbGVtZW50IG5vbi1lbXB0eSBlbGVtZW50IHBlcnN1YWRlcyBJRSB0byBjb25zaWRlciB0aGUgVGV4dFJhbmdlIGJvdW5kYXJ5IHRvIGJlIHdpdGhpblxuICAgICAgICAgICAgICAgIC8vIHRoZSBlbGVtZW50IHJhdGhlciB0aGFuIGltbWVkaWF0ZWx5IGJlZm9yZSBvciBhZnRlciBpdFxuICAgICAgICAgICAgICAgIHdvcmtpbmdOb2RlLmlubmVySFRNTCA9IFwiJiNmZWZmO1wiO1xuXG4gICAgICAgICAgICAgICAgLy8gaW5zZXJ0QmVmb3JlIGlzIHN1cHBvc2VkIHRvIHdvcmsgbGlrZSBhcHBlbmRDaGlsZCBpZiB0aGUgc2Vjb25kIHBhcmFtZXRlciBpcyBudWxsLiBIb3dldmVyLCBhIGJ1ZyByZXBvcnRcbiAgICAgICAgICAgICAgICAvLyBmb3IgSUVSYW5nZSBzdWdnZXN0cyB0aGF0IGl0IGNhbiBjcmFzaCB0aGUgYnJvd3NlcjogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2llcmFuZ2UvaXNzdWVzL2RldGFpbD9pZD0xMlxuICAgICAgICAgICAgICAgIGlmIChib3VuZGFyeU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQuaW5zZXJ0QmVmb3JlKHdvcmtpbmdOb2RlLCBib3VuZGFyeU5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UGFyZW50LmFwcGVuZENoaWxkKHdvcmtpbmdOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3b3JraW5nUmFuZ2UubW92ZVRvRWxlbWVudFRleHQod29ya2luZ05vZGUpO1xuICAgICAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5jb2xsYXBzZSghaXNTdGFydCk7XG5cbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5UGFyZW50LnJlbW92ZUNoaWxkKHdvcmtpbmdOb2RlKTtcblxuICAgICAgICAgICAgICAgIC8vIE1vdmUgdGhlIHdvcmtpbmcgcmFuZ2UgdG8gdGhlIHRleHQgb2Zmc2V0LCBpZiByZXF1aXJlZFxuICAgICAgICAgICAgICAgIGlmIChub2RlSXNEYXRhTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB3b3JraW5nUmFuZ2VbaXNTdGFydCA/IFwibW92ZVN0YXJ0XCIgOiBcIm1vdmVFbmRcIl0oXCJjaGFyYWN0ZXJcIiwgYm91bmRhcnlPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB3b3JraW5nUmFuZ2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSB3cmFwcGVyIGFyb3VuZCBhIFRleHRSYW5nZSwgcHJvdmlkaW5nIGZ1bGwgRE9NIFJhbmdlIGZ1bmN0aW9uYWxpdHkgdXNpbmcgcmFuZ3kncyBEb21SYW5nZSBhcyBhXG4gICAgICAgICAgICAvLyBwcm90b3R5cGVcblxuICAgICAgICAgICAgV3JhcHBlZFRleHRSYW5nZSA9IGZ1bmN0aW9uKHRleHRSYW5nZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dFJhbmdlID0gdGV4dFJhbmdlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgV3JhcHBlZFRleHRSYW5nZS5wcm90b3R5cGUgPSBuZXcgRG9tUmFuZ2UoZG9jdW1lbnQpO1xuXG4gICAgICAgICAgICBXcmFwcGVkVGV4dFJhbmdlLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0LCBlbmQsIHN0YXJ0Qm91bmRhcnk7XG5cbiAgICAgICAgICAgICAgICAvLyBUZXh0UmFuZ2UncyBwYXJlbnRFbGVtZW50KCkgbWV0aG9kIGNhbm5vdCBiZSB0cnVzdGVkLiBnZXRUZXh0UmFuZ2VDb250YWluZXJFbGVtZW50KCkgd29ya3MgYXJvdW5kIHRoYXQuXG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlQ29udGFpbmVyRWxlbWVudCA9IGdldFRleHRSYW5nZUNvbnRhaW5lckVsZW1lbnQodGhpcy50ZXh0UmFuZ2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRleHRSYW5nZUlzQ29sbGFwc2VkKHRoaXMudGV4dFJhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBzdGFydCA9IGdldFRleHRSYW5nZUJvdW5kYXJ5UG9zaXRpb24odGhpcy50ZXh0UmFuZ2UsIHJhbmdlQ29udGFpbmVyRWxlbWVudCwgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRydWUpLmJvdW5kYXJ5UG9zaXRpb247XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRCb3VuZGFyeSA9IGdldFRleHRSYW5nZUJvdW5kYXJ5UG9zaXRpb24odGhpcy50ZXh0UmFuZ2UsIHJhbmdlQ29udGFpbmVyRWxlbWVudCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0Qm91bmRhcnkuYm91bmRhcnlQb3NpdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBbiBvcHRpbWl6YXRpb24gdXNlZCBoZXJlIGlzIHRoYXQgaWYgdGhlIHN0YXJ0IGFuZCBlbmQgYm91bmRhcmllcyBoYXZlIHRoZSBzYW1lIHBhcmVudCBlbGVtZW50LCB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VhcmNoIHNjb3BlIGZvciB0aGUgZW5kIGJvdW5kYXJ5IGNhbiBiZSBsaW1pdGVkIHRvIGV4Y2x1ZGUgdGhlIHBvcnRpb24gb2YgdGhlIGVsZW1lbnQgdGhhdCBwcmVjZWRlc1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc3RhcnQgYm91bmRhcnlcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gZ2V0VGV4dFJhbmdlQm91bmRhcnlQb3NpdGlvbih0aGlzLnRleHRSYW5nZSwgcmFuZ2VDb250YWluZXJFbGVtZW50LCBmYWxzZSwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEJvdW5kYXJ5Lm5vZGVJbmZvKS5ib3VuZGFyeVBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnQoc3RhcnQubm9kZSwgc3RhcnQub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVuZChlbmQubm9kZSwgZW5kLm9mZnNldCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBXcmFwcGVkVGV4dFJhbmdlLnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiV3JhcHBlZFRleHRSYW5nZVwiO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgRG9tUmFuZ2UuY29weUNvbXBhcmlzb25Db25zdGFudHMoV3JhcHBlZFRleHRSYW5nZSk7XG5cbiAgICAgICAgICAgIHZhciByYW5nZVRvVGV4dFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCb3VuZGFyeVRleHRSYW5nZShuZXcgRG9tUG9zaXRpb24ocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0UmFuZ2UgPSBjcmVhdGVCb3VuZGFyeVRleHRSYW5nZShuZXcgRG9tUG9zaXRpb24ocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRSYW5nZSA9IGNyZWF0ZUJvdW5kYXJ5VGV4dFJhbmdlKG5ldyBEb21Qb3NpdGlvbihyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRSYW5nZSA9IGdldEJvZHkoIERvbVJhbmdlLmdldFJhbmdlRG9jdW1lbnQocmFuZ2UpICkuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRleHRSYW5nZS5zZXRFbmRQb2ludChcIlN0YXJ0VG9TdGFydFwiLCBzdGFydFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dFJhbmdlLnNldEVuZFBvaW50KFwiRW5kVG9FbmRcIiwgZW5kUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dFJhbmdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFdyYXBwZWRUZXh0UmFuZ2UucmFuZ2VUb1RleHRSYW5nZSA9IHJhbmdlVG9UZXh0UmFuZ2U7XG5cbiAgICAgICAgICAgIFdyYXBwZWRUZXh0UmFuZ2UucHJvdG90eXBlLnRvVGV4dFJhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlVG9UZXh0UmFuZ2UodGhpcyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBhcGkuV3JhcHBlZFRleHRSYW5nZSA9IFdyYXBwZWRUZXh0UmFuZ2U7XG5cbiAgICAgICAgICAgIC8vIElFIDkgYW5kIGFib3ZlIGhhdmUgYm90aCBpbXBsZW1lbnRhdGlvbnMgYW5kIFJhbmd5IG1ha2VzIGJvdGggYXZhaWxhYmxlLiBUaGUgbmV4dCBmZXcgbGluZXMgc2V0cyB3aGljaFxuICAgICAgICAgICAgLy8gaW1wbGVtZW50YXRpb24gdG8gdXNlIGJ5IGRlZmF1bHQuXG4gICAgICAgICAgICBpZiAoIWFwaS5mZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UgfHwgYXBpLmNvbmZpZy5wcmVmZXJUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgV3JhcHBlZFRleHRSYW5nZSBhcyB0aGUgUmFuZ2UgcHJvcGVydHkgb2YgdGhlIGdsb2JhbCBvYmplY3QgdG8gYWxsb3cgZXhwcmVzc2lvbiBsaWtlIFJhbmdlLkVORF9UT19FTkQgdG8gd29ya1xuICAgICAgICAgICAgICAgIHZhciBnbG9iYWxPYmogPSAoZnVuY3Rpb24oZikgeyByZXR1cm4gZihcInJldHVybiB0aGlzO1wiKSgpOyB9KShGdW5jdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWxPYmouUmFuZ2UgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxPYmouUmFuZ2UgPSBXcmFwcGVkVGV4dFJhbmdlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFwaS5jcmVhdGVOYXRpdmVSYW5nZSA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgICAgICAgICAgICBkb2MgPSBnZXRDb250ZW50RG9jdW1lbnQoZG9jLCBtb2R1bGUsIFwiY3JlYXRlTmF0aXZlUmFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRCb2R5KGRvYykuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGFwaS5XcmFwcGVkUmFuZ2UgPSBXcmFwcGVkVGV4dFJhbmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXBpLmNyZWF0ZVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgICBkb2MgPSBnZXRDb250ZW50RG9jdW1lbnQoZG9jLCBtb2R1bGUsIFwiY3JlYXRlUmFuZ2VcIik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGFwaS5XcmFwcGVkUmFuZ2UoYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlKGRvYykpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFwaS5jcmVhdGVSYW5neVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgICBkb2MgPSBnZXRDb250ZW50RG9jdW1lbnQoZG9jLCBtb2R1bGUsIFwiY3JlYXRlUmFuZ3lSYW5nZVwiKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRG9tUmFuZ2UoZG9jKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhcGkuY3JlYXRlSWZyYW1lUmFuZ2UgPSBmdW5jdGlvbihpZnJhbWVFbCkge1xuICAgICAgICAgICAgbW9kdWxlLmRlcHJlY2F0aW9uTm90aWNlKFwiY3JlYXRlSWZyYW1lUmFuZ2UoKVwiLCBcImNyZWF0ZVJhbmdlKGlmcmFtZUVsKVwiKTtcbiAgICAgICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ2UoaWZyYW1lRWwpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFwaS5jcmVhdGVJZnJhbWVSYW5neVJhbmdlID0gZnVuY3Rpb24oaWZyYW1lRWwpIHtcbiAgICAgICAgICAgIG1vZHVsZS5kZXByZWNhdGlvbk5vdGljZShcImNyZWF0ZUlmcmFtZVJhbmd5UmFuZ2UoKVwiLCBcImNyZWF0ZVJhbmd5UmFuZ2UoaWZyYW1lRWwpXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGFwaS5jcmVhdGVSYW5neVJhbmdlKGlmcmFtZUVsKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhcGkuYWRkU2hpbUxpc3RlbmVyKGZ1bmN0aW9uKHdpbikge1xuICAgICAgICAgICAgdmFyIGRvYyA9IHdpbi5kb2N1bWVudDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jLmNyZWF0ZVJhbmdlID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBkb2MuY3JlYXRlUmFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5jcmVhdGVSYW5nZShkb2MpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb2MgPSB3aW4gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9KTtcclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuICAgIC8vIFRoaXMgbW9kdWxlIGNyZWF0ZXMgYSBzZWxlY3Rpb24gb2JqZWN0IHdyYXBwZXIgdGhhdCBjb25mb3JtcyBhcyBjbG9zZWx5IGFzIHBvc3NpYmxlIHRvIHRoZSBTZWxlY3Rpb24gc3BlY2lmaWNhdGlvblxuICAgIC8vIGluIHRoZSBIVE1MIEVkaXRpbmcgc3BlYyAoaHR0cDovL2R2Y3MudzMub3JnL2hnL2VkaXRpbmcvcmF3LWZpbGUvdGlwL2VkaXRpbmcuaHRtbCNzZWxlY3Rpb25zKVxuICAgIGFwaS5jcmVhdGVDb3JlTW9kdWxlKFwiV3JhcHBlZFNlbGVjdGlvblwiLCBbXCJEb21SYW5nZVwiLCBcIldyYXBwZWRSYW5nZVwiXSwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHtcbiAgICAgICAgYXBpLmNvbmZpZy5jaGVja1NlbGVjdGlvblJhbmdlcyA9IHRydWU7XG5cbiAgICAgICAgdmFyIEJPT0xFQU4gPSBcImJvb2xlYW5cIjtcbiAgICAgICAgdmFyIE5VTUJFUiA9IFwibnVtYmVyXCI7XG4gICAgICAgIHZhciBkb20gPSBhcGkuZG9tO1xuICAgICAgICB2YXIgdXRpbCA9IGFwaS51dGlsO1xuICAgICAgICB2YXIgaXNIb3N0TWV0aG9kID0gdXRpbC5pc0hvc3RNZXRob2Q7XG4gICAgICAgIHZhciBEb21SYW5nZSA9IGFwaS5Eb21SYW5nZTtcbiAgICAgICAgdmFyIFdyYXBwZWRSYW5nZSA9IGFwaS5XcmFwcGVkUmFuZ2U7XG4gICAgICAgIHZhciBET01FeGNlcHRpb24gPSBhcGkuRE9NRXhjZXB0aW9uO1xuICAgICAgICB2YXIgRG9tUG9zaXRpb24gPSBkb20uRG9tUG9zaXRpb247XG4gICAgICAgIHZhciBnZXROYXRpdmVTZWxlY3Rpb247XG4gICAgICAgIHZhciBzZWxlY3Rpb25Jc0NvbGxhcHNlZDtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gYXBpLmZlYXR1cmVzO1xuICAgICAgICB2YXIgQ09OVFJPTCA9IFwiQ29udHJvbFwiO1xuICAgICAgICB2YXIgZ2V0RG9jdW1lbnQgPSBkb20uZ2V0RG9jdW1lbnQ7XG4gICAgICAgIHZhciBnZXRCb2R5ID0gZG9tLmdldEJvZHk7XG4gICAgICAgIHZhciByYW5nZXNFcXVhbCA9IERvbVJhbmdlLnJhbmdlc0VxdWFsO1xuXG5cbiAgICAgICAgLy8gVXRpbGl0eSBmdW5jdGlvbiB0byBzdXBwb3J0IGRpcmVjdGlvbiBwYXJhbWV0ZXJzIGluIHRoZSBBUEkgdGhhdCBtYXkgYmUgYSBzdHJpbmcgKFwiYmFja3dhcmRcIiBvciBcImZvcndhcmRcIikgb3IgYVxuICAgICAgICAvLyBCb29sZWFuICh0cnVlIGZvciBiYWNrd2FyZHMpLlxuICAgICAgICBmdW5jdGlvbiBpc0RpcmVjdGlvbkJhY2t3YXJkKGRpcikge1xuICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgZGlyID09IFwic3RyaW5nXCIpID8gL15iYWNrd2FyZChzKT8kL2kudGVzdChkaXIpIDogISFkaXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRXaW5kb3cod2luLCBtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXdpbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvbS5pc1dpbmRvdyh3aW4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luIGluc3RhbmNlb2YgV3JhcHBlZFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW4ud2luO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZG9tLmdldENvbnRlbnREb2N1bWVudCh3aW4sIG1vZHVsZSwgbWV0aG9kTmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbS5nZXRXaW5kb3coZG9jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFdpblNlbGVjdGlvbih3aW5QYXJhbSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFdpbmRvdyh3aW5QYXJhbSwgXCJnZXRXaW5TZWxlY3Rpb25cIikuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXREb2NTZWxlY3Rpb24od2luUGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRXaW5kb3cod2luUGFyYW0sIFwiZ2V0RG9jU2VsZWN0aW9uXCIpLmRvY3VtZW50LnNlbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gd2luU2VsZWN0aW9uSXNCYWNrd2FyZChzZWwpIHtcbiAgICAgICAgICAgIHZhciBiYWNrd2FyZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNlbC5hbmNob3JOb2RlKSB7XG4gICAgICAgICAgICAgICAgYmFja3dhcmQgPSAoZG9tLmNvbXBhcmVQb2ludHMoc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQsIHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCkgPT0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmFja3dhcmQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUZXN0IGZvciB0aGUgUmFuZ2UvVGV4dFJhbmdlIGFuZCBTZWxlY3Rpb24gZmVhdHVyZXMgcmVxdWlyZWRcbiAgICAgICAgLy8gVGVzdCBmb3IgYWJpbGl0eSB0byByZXRyaWV2ZSBzZWxlY3Rpb25cbiAgICAgICAgdmFyIGltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24gPSBpc0hvc3RNZXRob2Qod2luZG93LCBcImdldFNlbGVjdGlvblwiKSxcbiAgICAgICAgICAgIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gPSB1dGlsLmlzSG9zdE9iamVjdChkb2N1bWVudCwgXCJzZWxlY3Rpb25cIik7XG5cbiAgICAgICAgZmVhdHVyZXMuaW1wbGVtZW50c1dpbkdldFNlbGVjdGlvbiA9IGltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb247XG4gICAgICAgIGZlYXR1cmVzLmltcGxlbWVudHNEb2NTZWxlY3Rpb24gPSBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uO1xuXG4gICAgICAgIHZhciB1c2VEb2N1bWVudFNlbGVjdGlvbiA9IGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgKCFpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uIHx8IGFwaS5jb25maWcucHJlZmVyVGV4dFJhbmdlKTtcblxuICAgICAgICBpZiAodXNlRG9jdW1lbnRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldERvY1NlbGVjdGlvbjtcbiAgICAgICAgICAgIGFwaS5pc1NlbGVjdGlvblZhbGlkID0gZnVuY3Rpb24od2luUGFyYW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0V2luZG93KHdpblBhcmFtLCBcImlzU2VsZWN0aW9uVmFsaWRcIikuZG9jdW1lbnQsIG5hdGl2ZVNlbCA9IGRvYy5zZWxlY3Rpb247XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gVGV4dFJhbmdlIGlzIGFjdHVhbGx5IGNvbnRhaW5lZCB3aXRoaW4gdGhlIGNvcnJlY3QgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICByZXR1cm4gKG5hdGl2ZVNlbC50eXBlICE9IFwiTm9uZVwiIHx8IGdldERvY3VtZW50KG5hdGl2ZVNlbC5jcmVhdGVSYW5nZSgpLnBhcmVudEVsZW1lbnQoKSkgPT0gZG9jKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaW1wbGVtZW50c1dpbkdldFNlbGVjdGlvbikge1xuICAgICAgICAgICAgZ2V0TmF0aXZlU2VsZWN0aW9uID0gZ2V0V2luU2VsZWN0aW9uO1xuICAgICAgICAgICAgYXBpLmlzU2VsZWN0aW9uVmFsaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZmFpbChcIk5laXRoZXIgZG9jdW1lbnQuc2VsZWN0aW9uIG9yIHdpbmRvdy5nZXRTZWxlY3Rpb24oKSBkZXRlY3RlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBhcGkuZ2V0TmF0aXZlU2VsZWN0aW9uID0gZ2V0TmF0aXZlU2VsZWN0aW9uO1xuXG4gICAgICAgIHZhciB0ZXN0U2VsZWN0aW9uID0gZ2V0TmF0aXZlU2VsZWN0aW9uKCk7XG4gICAgICAgIHZhciB0ZXN0UmFuZ2UgPSBhcGkuY3JlYXRlTmF0aXZlUmFuZ2UoZG9jdW1lbnQpO1xuICAgICAgICB2YXIgYm9keSA9IGdldEJvZHkoZG9jdW1lbnQpO1xuXG4gICAgICAgIC8vIE9idGFpbmluZyBhIHJhbmdlIGZyb20gYSBzZWxlY3Rpb25cbiAgICAgICAgdmFyIHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzID0gdXRpbC5hcmVIb3N0UHJvcGVydGllcyh0ZXN0U2VsZWN0aW9uLFxuICAgICAgICAgICAgW1wiYW5jaG9yTm9kZVwiLCBcImZvY3VzTm9kZVwiLCBcImFuY2hvck9mZnNldFwiLCBcImZvY3VzT2Zmc2V0XCJdKTtcblxuICAgICAgICBmZWF0dXJlcy5zZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cyA9IHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzO1xuXG4gICAgICAgIC8vIFRlc3QgZm9yIGV4aXN0ZW5jZSBvZiBuYXRpdmUgc2VsZWN0aW9uIGV4dGVuZCgpIG1ldGhvZFxuICAgICAgICB2YXIgc2VsZWN0aW9uSGFzRXh0ZW5kID0gaXNIb3N0TWV0aG9kKHRlc3RTZWxlY3Rpb24sIFwiZXh0ZW5kXCIpO1xuICAgICAgICBmZWF0dXJlcy5zZWxlY3Rpb25IYXNFeHRlbmQgPSBzZWxlY3Rpb25IYXNFeHRlbmQ7XG4gICAgICAgIFxuICAgICAgICAvLyBUZXN0IGlmIHJhbmdlQ291bnQgZXhpc3RzXG4gICAgICAgIHZhciBzZWxlY3Rpb25IYXNSYW5nZUNvdW50ID0gKHR5cGVvZiB0ZXN0U2VsZWN0aW9uLnJhbmdlQ291bnQgPT0gTlVNQkVSKTtcbiAgICAgICAgZmVhdHVyZXMuc2VsZWN0aW9uSGFzUmFuZ2VDb3VudCA9IHNlbGVjdGlvbkhhc1JhbmdlQ291bnQ7XG5cbiAgICAgICAgdmFyIHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZCA9IHRydWU7XG5cbiAgICAgICAgdmFyIGFkZFJhbmdlQmFja3dhcmRUb05hdGl2ZSA9IHNlbGVjdGlvbkhhc0V4dGVuZCA/XG4gICAgICAgICAgICBmdW5jdGlvbihuYXRpdmVTZWxlY3Rpb24sIHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IERvbVJhbmdlLmdldFJhbmdlRG9jdW1lbnQocmFuZ2UpO1xuICAgICAgICAgICAgICAgIHZhciBlbmRSYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpO1xuICAgICAgICAgICAgICAgIGVuZFJhbmdlLmNvbGxhcHNlVG9Qb2ludChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgbmF0aXZlU2VsZWN0aW9uLmFkZFJhbmdlKGdldE5hdGl2ZVJhbmdlKGVuZFJhbmdlKSk7XG4gICAgICAgICAgICAgICAgbmF0aXZlU2VsZWN0aW9uLmV4dGVuZChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgfSA6IG51bGw7XG5cbiAgICAgICAgaWYgKHV0aWwuYXJlSG9zdE1ldGhvZHModGVzdFNlbGVjdGlvbiwgW1wiYWRkUmFuZ2VcIiwgXCJnZXRSYW5nZUF0XCIsIFwicmVtb3ZlQWxsUmFuZ2VzXCJdKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0ZXN0U2VsZWN0aW9uLnJhbmdlQ291bnQgPT0gTlVNQkVSICYmIGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkge1xuXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJldmlvdXNseSBhbiBpZnJhbWUgd2FzIHVzZWQgYnV0IHRoaXMgY2F1c2VkIHByb2JsZW1zIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyBpbiBJRSwgc28gdGVzdHMgYXJlXG4gICAgICAgICAgICAgICAgLy8gcGVyZm9ybWVkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50J3Mgc2VsZWN0aW9uLiBTZWUgaXNzdWUgMTA5LlxuXG4gICAgICAgICAgICAgICAgLy8gTm90ZSBhbHNvIHRoYXQgaWYgYSBzZWxlY3Rpb24gcHJldmlvdXNseSBleGlzdGVkLCBpdCBpcyB3aXBlZCBieSB0aGVzZSB0ZXN0cy4gVGhpcyBzaG91bGQgdXN1YWxseSBiZSBmaW5lXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSBpbml0aWFsaXphdGlvbiB1c3VhbGx5IGhhcHBlbnMgd2hlbiB0aGUgZG9jdW1lbnQgbG9hZHMsIGJ1dCBjb3VsZCBiZSBhIHByb2JsZW0gZm9yIGEgc2NyaXB0IHRoYXRcbiAgICAgICAgICAgICAgICAvLyBsb2FkcyBhbmQgaW5pdGlhbGl6ZXMgUmFuZ3kgbGF0ZXIuIElmIGFueW9uZSBjb21wbGFpbnMsIGNvZGUgY291bGQgYmUgYWRkZWQgdG8gc2F2ZSBhbmQgcmVzdG9yZSB0aGVcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3Rpb24uXG4gICAgICAgICAgICAgICAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxTZWxlY3Rpb25SYW5nZUNvdW50ID0gc2VsLnJhbmdlQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb25IYXNNdWx0aXBsZVJhbmdlcyA9IChvcmlnaW5hbFNlbGVjdGlvblJhbmdlQ291bnQgPiAxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbFNlbGVjdGlvbkJhY2t3YXJkID0gd2luU2VsZWN0aW9uSXNCYWNrd2FyZChzZWwpOyBcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmlnaW5hbFNlbGVjdGlvblJhbmdlQ291bnQ7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxTZWxlY3Rpb25SYW5nZXNbaV0gPSBzZWwuZ2V0UmFuZ2VBdChpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHNvbWUgdGVzdCBlbGVtZW50c1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGdldEJvZHkoZG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdEVsID0gYm9keS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xuICAgICAgICAgICAgICAgICAgICB0ZXN0RWwuY29udGVudEVkaXRhYmxlID0gXCJmYWxzZVwiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dE5vZGUgPSB0ZXN0RWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXFx1MDBhMFxcdTAwYTBcXHUwMGEwXCIpICk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGVzdCB3aGV0aGVyIHRoZSBuYXRpdmUgc2VsZWN0aW9uIHdpbGwgYWxsb3cgYSBjb2xsYXBzZWQgc2VsZWN0aW9uIHdpdGhpbiBhIG5vbi1lZGl0YWJsZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIHZhciByMSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcjEuc2V0U3RhcnQodGV4dE5vZGUsIDEpO1xuICAgICAgICAgICAgICAgICAgICByMS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKHIxKTtcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VkTm9uRWRpdGFibGVTZWxlY3Rpb25zU3VwcG9ydGVkID0gKHNlbC5yYW5nZUNvdW50ID09IDEpO1xuICAgICAgICAgICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGVzdCB3aGV0aGVyIHRoZSBuYXRpdmUgc2VsZWN0aW9uIGlzIGNhcGFibGUgb2Ygc3VwcG9ydGluZyBtdWx0aXBsZSByYW5nZXMuXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0aW9uSGFzTXVsdGlwbGVSYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvaW5nIHRoZSBvcmlnaW5hbCBmZWF0dXJlIHRlc3QgaGVyZSBpbiBDaHJvbWUgMzYgKGFuZCBwcmVzdW1hYmx5IGxhdGVyIHZlcnNpb25zKSBwcmludHMgYVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZSBlcnJvciBvZiBcIkRpc2NvbnRpZ3VvdXMgc2VsZWN0aW9uIGlzIG5vdCBzdXBwb3J0ZWQuXCIgdGhhdCBjYW5ub3QgYmUgc3VwcHJlc3NlZC4gVGhlcmUnc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90aGluZyB3ZSBjYW4gZG8gYWJvdXQgdGhpcyB3aGlsZSByZXRhaW5pbmcgdGhlIGZlYXR1cmUgdGVzdCBzbyB3ZSBoYXZlIHRvIHJlc29ydCB0byBhIGJyb3dzZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNuaWZmLiBJJ20gbm90IGhhcHB5IGFib3V0IGl0LiBTZWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zOTk3OTFcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaHJvbWVNYXRjaCA9IHdpbmRvdy5uYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvQ2hyb21lXFwvKC4qPykgLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hyb21lTWF0Y2ggJiYgcGFyc2VJbnQoY2hyb21lTWF0Y2hbMV0pID49IDM2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uU3VwcG9ydHNNdWx0aXBsZVJhbmdlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcjIgPSByMS5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcjEuc2V0U3RhcnQodGV4dE5vZGUsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIyLnNldEVuZCh0ZXh0Tm9kZSwgMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcjIuc2V0U3RhcnQodGV4dE5vZGUsIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKHIyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzID0gKHNlbC5yYW5nZUNvdW50ID09IDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgICAgICAgICAgICAgYm9keS5yZW1vdmVDaGlsZCh0ZXN0RWwpO1xuICAgICAgICAgICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VDb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSAwICYmIG9yaWdpbmFsU2VsZWN0aW9uQmFja3dhcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkUmFuZ2VCYWNrd2FyZFRvTmF0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlQmFja3dhcmRUb05hdGl2ZShzZWwsIG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkud2FybihcIlJhbmd5IGluaXRpYWxpemF0aW9uOiBvcmlnaW5hbCBzZWxlY3Rpb24gd2FzIGJhY2t3YXJkcyBidXQgc2VsZWN0aW9uIGhhcyBiZWVuIHJlc3RvcmVkIGZvcndhcmRzIGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBTZWxlY3Rpb24uZXh0ZW5kXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2Uob3JpZ2luYWxTZWxlY3Rpb25SYW5nZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmZWF0dXJlcy5zZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzID0gc2VsZWN0aW9uU3VwcG9ydHNNdWx0aXBsZVJhbmdlcztcbiAgICAgICAgZmVhdHVyZXMuY29sbGFwc2VkTm9uRWRpdGFibGVTZWxlY3Rpb25zU3VwcG9ydGVkID0gY29sbGFwc2VkTm9uRWRpdGFibGVTZWxlY3Rpb25zU3VwcG9ydGVkO1xuXG4gICAgICAgIC8vIENvbnRyb2xSYW5nZXNcbiAgICAgICAgdmFyIGltcGxlbWVudHNDb250cm9sUmFuZ2UgPSBmYWxzZSwgdGVzdENvbnRyb2xSYW5nZTtcblxuICAgICAgICBpZiAoYm9keSAmJiBpc0hvc3RNZXRob2QoYm9keSwgXCJjcmVhdGVDb250cm9sUmFuZ2VcIikpIHtcbiAgICAgICAgICAgIHRlc3RDb250cm9sUmFuZ2UgPSBib2R5LmNyZWF0ZUNvbnRyb2xSYW5nZSgpO1xuICAgICAgICAgICAgaWYgKHV0aWwuYXJlSG9zdFByb3BlcnRpZXModGVzdENvbnRyb2xSYW5nZSwgW1wiaXRlbVwiLCBcImFkZFwiXSkpIHtcbiAgICAgICAgICAgICAgICBpbXBsZW1lbnRzQ29udHJvbFJhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmZWF0dXJlcy5pbXBsZW1lbnRzQ29udHJvbFJhbmdlID0gaW1wbGVtZW50c0NvbnRyb2xSYW5nZTtcblxuICAgICAgICAvLyBTZWxlY3Rpb24gY29sbGFwc2VkbmVzc1xuICAgICAgICBpZiAoc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbklzQ29sbGFwc2VkID0gZnVuY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbC5hbmNob3JOb2RlID09PSBzZWwuZm9jdXNOb2RlICYmIHNlbC5hbmNob3JPZmZzZXQgPT09IHNlbC5mb2N1c09mZnNldDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHNlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWwucmFuZ2VDb3VudCA/IHNlbC5nZXRSYW5nZUF0KHNlbC5yYW5nZUNvdW50IC0gMSkuY29sbGFwc2VkIDogZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCByYW5nZSwgYmFja3dhcmQpIHtcbiAgICAgICAgICAgIHZhciBhbmNob3JQcmVmaXggPSBiYWNrd2FyZCA/IFwiZW5kXCIgOiBcInN0YXJ0XCIsIGZvY3VzUHJlZml4ID0gYmFja3dhcmQgPyBcInN0YXJ0XCIgOiBcImVuZFwiO1xuICAgICAgICAgICAgc2VsLmFuY2hvck5vZGUgPSByYW5nZVthbmNob3JQcmVmaXggKyBcIkNvbnRhaW5lclwiXTtcbiAgICAgICAgICAgIHNlbC5hbmNob3JPZmZzZXQgPSByYW5nZVthbmNob3JQcmVmaXggKyBcIk9mZnNldFwiXTtcbiAgICAgICAgICAgIHNlbC5mb2N1c05vZGUgPSByYW5nZVtmb2N1c1ByZWZpeCArIFwiQ29udGFpbmVyXCJdO1xuICAgICAgICAgICAgc2VsLmZvY3VzT2Zmc2V0ID0gcmFuZ2VbZm9jdXNQcmVmaXggKyBcIk9mZnNldFwiXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbU5hdGl2ZVNlbGVjdGlvbihzZWwpIHtcbiAgICAgICAgICAgIHZhciBuYXRpdmVTZWwgPSBzZWwubmF0aXZlU2VsZWN0aW9uO1xuICAgICAgICAgICAgc2VsLmFuY2hvck5vZGUgPSBuYXRpdmVTZWwuYW5jaG9yTm9kZTtcbiAgICAgICAgICAgIHNlbC5hbmNob3JPZmZzZXQgPSBuYXRpdmVTZWwuYW5jaG9yT2Zmc2V0O1xuICAgICAgICAgICAgc2VsLmZvY3VzTm9kZSA9IG5hdGl2ZVNlbC5mb2N1c05vZGU7XG4gICAgICAgICAgICBzZWwuZm9jdXNPZmZzZXQgPSBuYXRpdmVTZWwuZm9jdXNPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpIHtcbiAgICAgICAgICAgIHNlbC5hbmNob3JOb2RlID0gc2VsLmZvY3VzTm9kZSA9IG51bGw7XG4gICAgICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gc2VsLmZvY3VzT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHNlbC5yYW5nZUNvdW50ID0gMDtcbiAgICAgICAgICAgIHNlbC5pc0NvbGxhcHNlZCA9IHRydWU7XG4gICAgICAgICAgICBzZWwuX3Jhbmdlcy5sZW5ndGggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmF0aXZlUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBuYXRpdmVSYW5nZTtcbiAgICAgICAgICAgIGlmIChyYW5nZSBpbnN0YW5jZW9mIERvbVJhbmdlKSB7XG4gICAgICAgICAgICAgICAgbmF0aXZlUmFuZ2UgPSBhcGkuY3JlYXRlTmF0aXZlUmFuZ2UocmFuZ2UuZ2V0RG9jdW1lbnQoKSk7XG4gICAgICAgICAgICAgICAgbmF0aXZlUmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZS5zZXRTdGFydChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyYW5nZSBpbnN0YW5jZW9mIFdyYXBwZWRSYW5nZSkge1xuICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlID0gcmFuZ2UubmF0aXZlUmFuZ2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSAmJiAocmFuZ2UgaW5zdGFuY2VvZiBkb20uZ2V0V2luZG93KHJhbmdlLnN0YXJ0Q29udGFpbmVyKS5SYW5nZSkpIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZSA9IHJhbmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5hdGl2ZVJhbmdlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmFuZ2VDb250YWluc1NpbmdsZUVsZW1lbnQocmFuZ2VOb2Rlcykge1xuICAgICAgICAgICAgaWYgKCFyYW5nZU5vZGVzLmxlbmd0aCB8fCByYW5nZU5vZGVzWzBdLm5vZGVUeXBlICE9IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMSwgbGVuID0gcmFuZ2VOb2Rlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICghZG9tLmlzQW5jZXN0b3JPZihyYW5nZU5vZGVzWzBdLCByYW5nZU5vZGVzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlKHJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgbm9kZXMgPSByYW5nZS5nZXROb2RlcygpO1xuICAgICAgICAgICAgaWYgKCFyYW5nZUNvbnRhaW5zU2luZ2xlRWxlbWVudChub2RlcykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlOiByYW5nZSBcIiArIHJhbmdlLmluc3BlY3QoKSArIFwiIGRpZCBub3QgY29uc2lzdCBvZiBhIHNpbmdsZSBlbGVtZW50XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2ltcGxlLCBxdWljayB0ZXN0IHdoaWNoIG9ubHkgbmVlZHMgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBhIFRleHRSYW5nZSBhbmQgYSBDb250cm9sUmFuZ2VcbiAgICAgICAgZnVuY3Rpb24gaXNUZXh0UmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiAhIXJhbmdlICYmIHR5cGVvZiByYW5nZS50ZXh0ICE9IFwidW5kZWZpbmVkXCI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVGcm9tVGV4dFJhbmdlKHNlbCwgcmFuZ2UpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIFJhbmdlIGZyb20gdGhlIHNlbGVjdGVkIFRleHRSYW5nZVxuICAgICAgICAgICAgdmFyIHdyYXBwZWRSYW5nZSA9IG5ldyBXcmFwcGVkUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgICAgc2VsLl9yYW5nZXMgPSBbd3JhcHBlZFJhbmdlXTtcblxuICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCB3cmFwcGVkUmFuZ2UsIGZhbHNlKTtcbiAgICAgICAgICAgIHNlbC5yYW5nZUNvdW50ID0gMTtcbiAgICAgICAgICAgIHNlbC5pc0NvbGxhcHNlZCA9IHdyYXBwZWRSYW5nZS5jb2xsYXBzZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB3cmFwcGVkIHNlbGVjdGlvbiBiYXNlZCBvbiB3aGF0J3Mgbm93IGluIHRoZSBuYXRpdmUgc2VsZWN0aW9uXG4gICAgICAgICAgICBzZWwuX3Jhbmdlcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgaWYgKHNlbC5kb2NTZWxlY3Rpb24udHlwZSA9PSBcIk5vbmVcIikge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSBzZWwuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzVGV4dFJhbmdlKGNvbnRyb2xSYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjYXNlICh3aGVyZSB0aGUgc2VsZWN0aW9uIHR5cGUgaXMgXCJDb250cm9sXCIgYW5kIGNhbGxpbmcgY3JlYXRlUmFuZ2UoKSBvbiB0aGUgc2VsZWN0aW9uIHJldHVybnNcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBUZXh0UmFuZ2UpIGNhbiBoYXBwZW4gaW4gSUUgOS4gSXQgaGFwcGVucywgZm9yIGV4YW1wbGUsIHdoZW4gYWxsIGVsZW1lbnRzIGluIHRoZSBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICAvLyBDb250cm9sUmFuZ2UgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgQ29udHJvbFJhbmdlIGFuZCByZW1vdmVkIGZyb20gdGhlIGRvY3VtZW50LlxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVGcm9tVGV4dFJhbmdlKHNlbCwgY29udHJvbFJhbmdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSwgZG9jID0gZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbC5yYW5nZUNvdW50OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlKGNvbnRyb2xSYW5nZS5pdGVtKGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5fcmFuZ2VzLnB1c2gocmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbC5pc0NvbGxhcHNlZCA9IHNlbC5yYW5nZUNvdW50ID09IDEgJiYgc2VsLl9yYW5nZXNbMF0uY29sbGFwc2VkO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21SYW5nZShzZWwsIHNlbC5fcmFuZ2VzW3NlbC5yYW5nZUNvdW50IC0gMV0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRSYW5nZVRvQ29udHJvbFNlbGVjdGlvbihzZWwsIHJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gc2VsLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgdmFyIHJhbmdlRWxlbWVudCA9IGdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2UocmFuZ2UpO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQ29udHJvbFJhbmdlIGNvbnRhaW5pbmcgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgc2VsZWN0ZWQgQ29udHJvbFJhbmdlIHBsdXMgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIGNvbnRhaW5lZCBieSB0aGUgc3VwcGxpZWQgcmFuZ2VcbiAgICAgICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudChjb250cm9sUmFuZ2UuaXRlbSgwKSk7XG4gICAgICAgICAgICB2YXIgbmV3Q29udHJvbFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZUNvbnRyb2xSYW5nZSgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIG5ld0NvbnRyb2xSYW5nZS5hZGQoY29udHJvbFJhbmdlLml0ZW0oaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBuZXdDb250cm9sUmFuZ2UuYWRkKHJhbmdlRWxlbWVudCk7XG4gICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcImFkZFJhbmdlKCk6IEVsZW1lbnQgd2l0aGluIHRoZSBzcGVjaWZpZWQgUmFuZ2UgY291bGQgbm90IGJlIGFkZGVkIHRvIGNvbnRyb2wgc2VsZWN0aW9uIChkb2VzIGl0IGhhdmUgbGF5b3V0PylcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdDb250cm9sUmFuZ2Uuc2VsZWN0KCk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvblxuICAgICAgICAgICAgdXBkYXRlQ29udHJvbFNlbGVjdGlvbihzZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGdldFNlbGVjdGlvblJhbmdlQXQ7XG5cbiAgICAgICAgaWYgKGlzSG9zdE1ldGhvZCh0ZXN0U2VsZWN0aW9uLCBcImdldFJhbmdlQXRcIikpIHtcbiAgICAgICAgICAgIC8vIHRyeS9jYXRjaCBpcyBwcmVzZW50IGJlY2F1c2UgZ2V0UmFuZ2VBdCgpIG11c3QgaGF2ZSB0aHJvd24gYW4gZXJyb3IgaW4gc29tZSBicm93c2VyIGFuZCBzb21lIHNpdHVhdGlvbi5cbiAgICAgICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIEkgZGlkbid0IHdyaXRlIGEgY29tbWVudCBhYm91dCB0aGUgc3BlY2lmaWNzIGFuZCBhbSBub3cgc2NhcmVkIHRvIHRha2UgaXQgb3V0LiBMZXQgdGhhdCBiZSBhXG4gICAgICAgICAgICAvLyBsZXNzb24gdG8gdXMgYWxsLCBlc3BlY2lhbGx5IG1lLlxuICAgICAgICAgICAgZ2V0U2VsZWN0aW9uUmFuZ2VBdCA9IGZ1bmN0aW9uKHNlbCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsLmdldFJhbmdlQXQoaW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMpIHtcbiAgICAgICAgICAgIGdldFNlbGVjdGlvblJhbmdlQXQgPSBmdW5jdGlvbihzZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoc2VsLmFuY2hvck5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpO1xuICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0LCBzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZW4gdGhlIHNlbGVjdGlvbiB3YXMgc2VsZWN0ZWQgYmFja3dhcmRzIChmcm9tIHRoZSBlbmQgdG8gdGhlIHN0YXJ0IGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50KVxuICAgICAgICAgICAgICAgIGlmIChyYW5nZS5jb2xsYXBzZWQgIT09IHRoaXMuaXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBbmRFbmQoc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0LCBzZWwuYW5jaG9yTm9kZSwgc2VsLmFuY2hvck9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIFdyYXBwZWRTZWxlY3Rpb24oc2VsZWN0aW9uLCBkb2NTZWxlY3Rpb24sIHdpbikge1xuICAgICAgICAgICAgdGhpcy5uYXRpdmVTZWxlY3Rpb24gPSBzZWxlY3Rpb247XG4gICAgICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbiA9IGRvY1NlbGVjdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX3JhbmdlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy53aW4gPSB3aW47XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFdyYXBwZWRTZWxlY3Rpb24ucHJvdG90eXBlID0gYXBpLnNlbGVjdGlvblByb3RvdHlwZTtcblxuICAgICAgICBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0aWVzKHNlbCkge1xuICAgICAgICAgICAgc2VsLndpbiA9IHNlbC5hbmNob3JOb2RlID0gc2VsLmZvY3VzTm9kZSA9IHNlbC5fcmFuZ2VzID0gbnVsbDtcbiAgICAgICAgICAgIHNlbC5yYW5nZUNvdW50ID0gc2VsLmFuY2hvck9mZnNldCA9IHNlbC5mb2N1c09mZnNldCA9IDA7XG4gICAgICAgICAgICBzZWwuZGV0YWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNhY2hlZFJhbmd5U2VsZWN0aW9ucyA9IFtdO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFjdE9uQ2FjaGVkU2VsZWN0aW9uKHdpbiwgYWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGNhY2hlZFJhbmd5U2VsZWN0aW9ucy5sZW5ndGgsIGNhY2hlZCwgc2VsO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgIGNhY2hlZCA9IGNhY2hlZFJhbmd5U2VsZWN0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICBzZWwgPSBjYWNoZWQuc2VsZWN0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT0gXCJkZWxldGVBbGxcIikge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVQcm9wZXJ0aWVzKHNlbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjYWNoZWQud2luID09IHdpbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09IFwiZGVsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlZFJhbmd5U2VsZWN0aW9ucy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWN0aW9uID09IFwiZGVsZXRlQWxsXCIpIHtcbiAgICAgICAgICAgICAgICBjYWNoZWRSYW5neVNlbGVjdGlvbnMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGdldFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHdpbikge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHBhcmFtZXRlciBpcyBhIFJhbmd5IFNlbGVjdGlvbiBvYmplY3RcbiAgICAgICAgICAgIGlmICh3aW4gJiYgd2luIGluc3RhbmNlb2YgV3JhcHBlZFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHdpbi5yZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2luID0gZ2V0V2luZG93KHdpbiwgXCJnZXROYXRpdmVTZWxlY3Rpb25cIik7XG5cbiAgICAgICAgICAgIHZhciBzZWwgPSBhY3RPbkNhY2hlZFNlbGVjdGlvbih3aW4pO1xuICAgICAgICAgICAgdmFyIG5hdGl2ZVNlbCA9IGdldE5hdGl2ZVNlbGVjdGlvbih3aW4pLCBkb2NTZWwgPSBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uID8gZ2V0RG9jU2VsZWN0aW9uKHdpbikgOiBudWxsO1xuICAgICAgICAgICAgaWYgKHNlbCkge1xuICAgICAgICAgICAgICAgIHNlbC5uYXRpdmVTZWxlY3Rpb24gPSBuYXRpdmVTZWw7XG4gICAgICAgICAgICAgICAgc2VsLmRvY1NlbGVjdGlvbiA9IGRvY1NlbDtcbiAgICAgICAgICAgICAgICBzZWwucmVmcmVzaCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWwgPSBuZXcgV3JhcHBlZFNlbGVjdGlvbihuYXRpdmVTZWwsIGRvY1NlbCwgd2luKTtcbiAgICAgICAgICAgICAgICBjYWNoZWRSYW5neVNlbGVjdGlvbnMucHVzaCggeyB3aW46IHdpbiwgc2VsZWN0aW9uOiBzZWwgfSApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlbDtcbiAgICAgICAgfTtcblxuICAgICAgICBhcGkuZ2V0U2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uO1xuXG4gICAgICAgIGFwaS5nZXRJZnJhbWVTZWxlY3Rpb24gPSBmdW5jdGlvbihpZnJhbWVFbCkge1xuICAgICAgICAgICAgbW9kdWxlLmRlcHJlY2F0aW9uTm90aWNlKFwiZ2V0SWZyYW1lU2VsZWN0aW9uKClcIiwgXCJnZXRTZWxlY3Rpb24oaWZyYW1lRWwpXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGFwaS5nZXRTZWxlY3Rpb24oZG9tLmdldElmcmFtZVdpbmRvdyhpZnJhbWVFbCkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBzZWxQcm90byA9IFdyYXBwZWRTZWxlY3Rpb24ucHJvdG90eXBlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsLCByYW5nZXMpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBzZWxlY3Rpb24gYmVjb21lcyBvZiB0eXBlIFwiQ29udHJvbFwiXG4gICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQocmFuZ2VzWzBdLnN0YXJ0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSBnZXRCb2R5KGRvYykuY3JlYXRlQ29udHJvbFJhbmdlKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgZWwsIGxlbiA9IHJhbmdlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGVsID0gZ2V0U2luZ2xlRWxlbWVudEZyb21SYW5nZShyYW5nZXNbaV0pO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xSYW5nZS5hZGQoZWwpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcInNldFJhbmdlcygpOiBFbGVtZW50IHdpdGhpbiBvbmUgb2YgdGhlIHNwZWNpZmllZCBSYW5nZXMgY291bGQgbm90IGJlIGFkZGVkIHRvIGNvbnRyb2wgc2VsZWN0aW9uIChkb2VzIGl0IGhhdmUgbGF5b3V0PylcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbFJhbmdlLnNlbGVjdCgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZWQgc2VsZWN0aW9uIGJhc2VkIG9uIHdoYXQncyBub3cgaW4gdGhlIG5hdGl2ZSBzZWxlY3Rpb25cbiAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlbGVjdGluZyBhIHJhbmdlXG4gICAgICAgIGlmICghdXNlRG9jdW1lbnRTZWxlY3Rpb24gJiYgc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgJiYgdXRpbC5hcmVIb3N0TWV0aG9kcyh0ZXN0U2VsZWN0aW9uLCBbXCJyZW1vdmVBbGxSYW5nZXNcIiwgXCJhZGRSYW5nZVwiXSkpIHtcbiAgICAgICAgICAgIHNlbFByb3RvLnJlbW92ZUFsbFJhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHRoaXMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGFkZFJhbmdlQmFja3dhcmQgPSBmdW5jdGlvbihzZWwsIHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgYWRkUmFuZ2VCYWNrd2FyZFRvTmF0aXZlKHNlbC5uYXRpdmVTZWxlY3Rpb24sIHJhbmdlKTtcbiAgICAgICAgICAgICAgICBzZWwucmVmcmVzaCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkhhc1JhbmdlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBzZWxQcm90by5hZGRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltcGxlbWVudHNDb250cm9sUmFuZ2UgJiYgaW1wbGVtZW50c0RvY1NlbGVjdGlvbiAmJiB0aGlzLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlVG9Db250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0RpcmVjdGlvbkJhY2t3YXJkKGRpcmVjdGlvbikgJiYgc2VsZWN0aW9uSGFzRXh0ZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmFuZ2VCYWNrd2FyZCh0aGlzLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c1JhbmdlQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNSYW5nZUNvdW50ID0gdGhpcy5yYW5nZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmFuZ2VDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsb25lIHRoZSBuYXRpdmUgcmFuZ2Ugc28gdGhhdCBjaGFuZ2luZyB0aGUgc2VsZWN0ZWQgcmFuZ2UgZG9lcyBub3QgYWZmZWN0IHRoZSBzZWxlY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBjb250cmFyeSB0byB0aGUgc3BlYyBidXQgaXMgdGhlIG9ubHkgd2F5IHRvIGFjaGlldmUgY29uc2lzdGVuY3kgYmV0d2VlbiBicm93c2Vycy4gU2VlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXNzdWUgODAuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsb25lZE5hdGl2ZVJhbmdlID0gZ2V0TmF0aXZlUmFuZ2UocmFuZ2UpLmNsb25lUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShjbG9uZWROYXRpdmVSYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIGFkZGluZyB0aGUgcmFuZ2Ugd2FzIHN1Y2Nlc3NmdWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJhbmdlQ291bnQgPSB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5yYW5nZUNvdW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCA9PSBwcmV2aW91c1JhbmdlQ291bnQgKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByYW5nZSB3YXMgYWRkZWQgc3VjY2Vzc2Z1bGx5XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgcmFuZ2UgdGhhdCB3ZSBhZGRlZCB0byB0aGUgc2VsZWN0aW9uIGlzIHJlZmxlY3RlZCBpbiB0aGUgbGFzdCByYW5nZSBleHRyYWN0ZWQgZnJvbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcGkuY29uZmlnLmNoZWNrU2VsZWN0aW9uUmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmF0aXZlUmFuZ2UgPSBnZXRTZWxlY3Rpb25SYW5nZUF0KHRoaXMubmF0aXZlU2VsZWN0aW9uLCB0aGlzLnJhbmdlQ291bnQgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXRpdmVSYW5nZSAmJiAhcmFuZ2VzRXF1YWwobmF0aXZlUmFuZ2UsIHJhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhcHBlbnMgaW4gV2ViS2l0IHdpdGgsIGZvciBleGFtcGxlLCBhIHNlbGVjdGlvbiBwbGFjZWQgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dCBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBuZXcgV3JhcHBlZFJhbmdlKG5hdGl2ZVJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZXNbdGhpcy5yYW5nZUNvdW50IC0gMV0gPSByYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2UodGhpcywgcmFuZ2UsIHNlbGVjdGlvbklzQmFja3dhcmQodGhpcy5uYXRpdmVTZWxlY3Rpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9IHNlbGVjdGlvbklzQ29sbGFwc2VkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByYW5nZSB3YXMgbm90IGFkZGVkIHN1Y2Nlc3NmdWxseS4gVGhlIHNpbXBsZXN0IHRoaW5nIGlzIHRvIHJlZnJlc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsUHJvdG8uYWRkUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RpcmVjdGlvbkJhY2t3YXJkKGRpcmVjdGlvbikgJiYgc2VsZWN0aW9uSGFzRXh0ZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRSYW5nZUJhY2t3YXJkKHRoaXMsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uLmFkZFJhbmdlKGdldE5hdGl2ZVJhbmdlKHJhbmdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbFByb3RvLnNldFJhbmdlcyA9IGZ1bmN0aW9uKHJhbmdlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgcmFuZ2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNIb3N0TWV0aG9kKHRlc3RTZWxlY3Rpb24sIFwiZW1wdHlcIikgJiYgaXNIb3N0TWV0aG9kKHRlc3RSYW5nZSwgXCJzZWxlY3RcIikgJiZcbiAgICAgICAgICAgICAgICAgICBpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIHVzZURvY3VtZW50U2VsZWN0aW9uKSB7XG5cbiAgICAgICAgICAgIHNlbFByb3RvLnJlbW92ZUFsbFJhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIEFkZGVkIHRyeS9jYXRjaCBhcyBmaXggZm9yIGlzc3VlICMyMVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jU2VsZWN0aW9uLmVtcHR5KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGVtcHR5KCkgbm90IHdvcmtpbmcgKGlzc3VlICMyNClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgIT0gXCJOb25lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdvcmsgYXJvdW5kIGZhaWx1cmUgdG8gZW1wdHkgYSBjb250cm9sIHNlbGVjdGlvbiBieSBpbnN0ZWFkIHNlbGVjdGluZyBhIFRleHRSYW5nZSBhbmQgdGhlblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGluZyBlbXB0eSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYW5jaG9yTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IGdldERvY3VtZW50KHRoaXMuYW5jaG9yTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSB0aGlzLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sUmFuZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IGdldERvY3VtZW50KCBjb250cm9sUmFuZ2UuaXRlbSgwKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRSYW5nZS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbi5lbXB0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaChleCkge31cbiAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbih0aGlzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNlbFByb3RvLmFkZFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlVG9Db250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcGkuV3JhcHBlZFRleHRSYW5nZS5yYW5nZVRvVGV4dFJhbmdlKHJhbmdlKS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzWzBdID0gcmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VDb3VudCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB0aGlzLl9yYW5nZXNbMF0uY29sbGFwc2VkO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21SYW5nZSh0aGlzLCByYW5nZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNlbFByb3RvLnNldFJhbmdlcyA9IGZ1bmN0aW9uKHJhbmdlcykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlQ291bnQgPSByYW5nZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZUNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVDb250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2VzWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJObyBtZWFucyBvZiBzZWxlY3RpbmcgYSBSYW5nZSBvciBUZXh0UmFuZ2Ugd2FzIGZvdW5kXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsUHJvdG8uZ2V0UmFuZ2VBdCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMucmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJJTkRFWF9TSVpFX0VSUlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xvbmUgdGhlIHJhbmdlIHRvIHByZXNlcnZlIHNlbGVjdGlvbi1yYW5nZSBpbmRlcGVuZGVuY2UuIFNlZSBpc3N1ZSA4MC5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZ2VzW2luZGV4XS5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlZnJlc2hTZWxlY3Rpb247XG5cbiAgICAgICAgaWYgKHVzZURvY3VtZW50U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICByZWZyZXNoU2VsZWN0aW9uID0gZnVuY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlO1xuICAgICAgICAgICAgICAgIGlmIChhcGkuaXNTZWxlY3Rpb25WYWxpZChzZWwud2luKSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHNlbC5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGdldEJvZHkoc2VsLndpbi5kb2N1bWVudCkuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzZWwuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RleHRSYW5nZShyYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNIb3N0TWV0aG9kKHRlc3RTZWxlY3Rpb24sIFwiZ2V0UmFuZ2VBdFwiKSAmJiB0eXBlb2YgdGVzdFNlbGVjdGlvbi5yYW5nZUNvdW50ID09IE5VTUJFUikge1xuICAgICAgICAgICAgcmVmcmVzaFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHNlbCkge1xuICAgICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgc2VsLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29udHJvbFNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbC5fcmFuZ2VzLmxlbmd0aCA9IHNlbC5yYW5nZUNvdW50ID0gc2VsLm5hdGl2ZVNlbGVjdGlvbi5yYW5nZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsLnJhbmdlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWwucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLl9yYW5nZXNbaV0gPSBuZXcgYXBpLldyYXBwZWRSYW5nZShzZWwubmF0aXZlU2VsZWN0aW9uLmdldFJhbmdlQXQoaSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCBzZWwuX3Jhbmdlc1tzZWwucmFuZ2VDb3VudCAtIDFdLCBzZWxlY3Rpb25Jc0JhY2t3YXJkKHNlbC5uYXRpdmVTZWxlY3Rpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5pc0NvbGxhcHNlZCA9IHNlbGVjdGlvbklzQ29sbGFwc2VkKHNlbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cyAmJiB0eXBlb2YgdGVzdFNlbGVjdGlvbi5pc0NvbGxhcHNlZCA9PSBCT09MRUFOICYmIHR5cGVvZiB0ZXN0UmFuZ2UuY29sbGFwc2VkID09IEJPT0xFQU4gJiYgZmVhdHVyZXMuaW1wbGVtZW50c0RvbVJhbmdlKSB7XG4gICAgICAgICAgICByZWZyZXNoU2VsZWN0aW9uID0gZnVuY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlLCBuYXRpdmVTZWwgPSBzZWwubmF0aXZlU2VsZWN0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChuYXRpdmVTZWwuYW5jaG9yTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGdldFNlbGVjdGlvblJhbmdlQXQobmF0aXZlU2VsLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLl9yYW5nZXMgPSBbcmFuZ2VdO1xuICAgICAgICAgICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbU5hdGl2ZVNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWxlY3Rpb25Jc0NvbGxhcHNlZChzZWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5mYWlsKFwiTm8gbWVhbnMgb2Ygb2J0YWluaW5nIGEgUmFuZ2Ugb3IgVGV4dFJhbmdlIGZyb20gdGhlIHVzZXIncyBzZWxlY3Rpb24gd2FzIGZvdW5kXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsUHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uKGNoZWNrRm9yQ2hhbmdlcykge1xuICAgICAgICAgICAgdmFyIG9sZFJhbmdlcyA9IGNoZWNrRm9yQ2hhbmdlcyA/IHRoaXMuX3Jhbmdlcy5zbGljZSgwKSA6IG51bGw7XG4gICAgICAgICAgICB2YXIgb2xkQW5jaG9yTm9kZSA9IHRoaXMuYW5jaG9yTm9kZSwgb2xkQW5jaG9yT2Zmc2V0ID0gdGhpcy5hbmNob3JPZmZzZXQ7XG5cbiAgICAgICAgICAgIHJlZnJlc2hTZWxlY3Rpb24odGhpcyk7XG4gICAgICAgICAgICBpZiAoY2hlY2tGb3JDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHJhbmdlIGNvdW50IGZpcnN0XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBvbGRSYW5nZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChpICE9IHRoaXMuX3Jhbmdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTm93IGNoZWNrIHRoZSBkaXJlY3Rpb24uIENoZWNraW5nIHRoZSBhbmNob3IgcG9zaXRpb24gaXMgdGhlIHNhbWUgaXMgZW5vdWdoIHNpbmNlIHdlJ3JlIGNoZWNraW5nIGFsbCB0aGVcbiAgICAgICAgICAgICAgICAvLyByYW5nZXMgYWZ0ZXIgdGhpc1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuY2hvck5vZGUgIT0gb2xkQW5jaG9yTm9kZSB8fCB0aGlzLmFuY2hvck9mZnNldCAhPSBvbGRBbmNob3JPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRmluYWxseSwgY29tcGFyZSBlYWNoIHJhbmdlIGluIHR1cm5cbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmFuZ2VzRXF1YWwob2xkUmFuZ2VzW2ldLCB0aGlzLl9yYW5nZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUmVtb3ZhbCBvZiBhIHNpbmdsZSByYW5nZVxuICAgICAgICB2YXIgcmVtb3ZlUmFuZ2VNYW51YWxseSA9IGZ1bmN0aW9uKHNlbCwgcmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciByYW5nZXMgPSBzZWwuZ2V0QWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmFuZ2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyYW5nZXNFcXVhbChyYW5nZSwgcmFuZ2VzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNlbC5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSAmJiBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBzZWxQcm90by5yZW1vdmVSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gdGhpcy5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlRWxlbWVudCA9IGdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2UocmFuZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBDb250cm9sUmFuZ2UgY29udGFpbmluZyBhbGwgdGhlIGVsZW1lbnRzIGluIHRoZSBzZWxlY3RlZCBDb250cm9sUmFuZ2UgbWludXMgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgY29udGFpbmVkIGJ5IHRoZSBzdXBwbGllZCByYW5nZVxuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q29udHJvbFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZUNvbnRyb2xSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWwsIHJlbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSBjb250cm9sUmFuZ2UuaXRlbShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbCAhPT0gcmFuZ2VFbGVtZW50IHx8IHJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDb250cm9sUmFuZ2UuYWRkKGNvbnRyb2xSYW5nZS5pdGVtKGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLnNlbGVjdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVJhbmdlTWFudWFsbHkodGhpcywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxQcm90by5yZW1vdmVSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlUmFuZ2VNYW51YWxseSh0aGlzLCByYW5nZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZWN0aW5nIGlmIGEgc2VsZWN0aW9uIGlzIGJhY2t3YXJkXG4gICAgICAgIHZhciBzZWxlY3Rpb25Jc0JhY2t3YXJkO1xuICAgICAgICBpZiAoIXVzZURvY3VtZW50U2VsZWN0aW9uICYmIHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzICYmIGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkge1xuICAgICAgICAgICAgc2VsZWN0aW9uSXNCYWNrd2FyZCA9IHdpblNlbGVjdGlvbklzQmFja3dhcmQ7XG5cbiAgICAgICAgICAgIHNlbFByb3RvLmlzQmFja3dhcmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uSXNCYWNrd2FyZCh0aGlzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25Jc0JhY2t3YXJkID0gc2VsUHJvdG8uaXNCYWNrd2FyZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYW4gYWxpYXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBGcm9tIDEuMywgZXZlcnl0aGluZyBpcyBcImJhY2t3YXJkXCIgcmF0aGVyIHRoYW4gXCJiYWNrd2FyZHNcIlxuICAgICAgICBzZWxQcm90by5pc0JhY2t3YXJkcyA9IHNlbFByb3RvLmlzQmFja3dhcmQ7XG5cbiAgICAgICAgLy8gU2VsZWN0aW9uIHN0cmluZ2lmaWVyXG4gICAgICAgIC8vIFRoaXMgaXMgY29uZm9ybWFudCB0byB0aGUgb2xkIEhUTUw1IHNlbGVjdGlvbnMgZHJhZnQgc3BlYyBidXQgZGlmZmVycyBmcm9tIFdlYktpdCBhbmQgTW96aWxsYSdzIGltcGxlbWVudGF0aW9uLlxuICAgICAgICAvLyBUaGUgY3VycmVudCBzcGVjIGRvZXMgbm90IHlldCBkZWZpbmUgdGhpcyBtZXRob2QuXG4gICAgICAgIHNlbFByb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VUZXh0cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VUZXh0c1tpXSA9IFwiXCIgKyB0aGlzLl9yYW5nZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VUZXh0cy5qb2luKFwiXCIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydE5vZGVJblNhbWVEb2N1bWVudChzZWwsIG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChzZWwud2luLmRvY3VtZW50ICE9IGdldERvY3VtZW50KG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIldST05HX0RPQ1VNRU5UX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vIGN1cnJlbnQgYnJvd3NlciBjb25mb3JtcyBmdWxseSB0byB0aGUgc3BlYyBmb3IgdGhpcyBtZXRob2QsIHNvIFJhbmd5J3Mgb3duIG1ldGhvZCBpcyBhbHdheXMgdXNlZFxuICAgICAgICBzZWxQcm90by5jb2xsYXBzZSA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgYXNzZXJ0Tm9kZUluU2FtZURvY3VtZW50KHRoaXMsIG5vZGUpO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKG5vZGUpO1xuICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2VUb1BvaW50KG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICB0aGlzLnNldFNpbmdsZVJhbmdlKHJhbmdlKTtcbiAgICAgICAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmNvbGxhcHNlVG9TdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuX3Jhbmdlc1swXTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJJTlZBTElEX1NUQVRFX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5jb2xsYXBzZVRvRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5fcmFuZ2VzW3RoaXMucmFuZ2VDb3VudCAtIDFdO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiSU5WQUxJRF9TVEFURV9FUlJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGhlIHNwZWMgaXMgdmVyeSBzcGVjaWZpYyBvbiBob3cgc2VsZWN0QWxsQ2hpbGRyZW4gc2hvdWxkIGJlIGltcGxlbWVudGVkIHNvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXNcbiAgICAgICAgLy8gbmV2ZXIgdXNlZCBieSBSYW5neS5cbiAgICAgICAgc2VsUHJvdG8uc2VsZWN0QWxsQ2hpbGRyZW4gPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICBhc3NlcnROb2RlSW5TYW1lRG9jdW1lbnQodGhpcywgbm9kZSk7XG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2Uobm9kZSk7XG4gICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XG4gICAgICAgICAgICB0aGlzLnNldFNpbmdsZVJhbmdlKHJhbmdlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5kZWxldGVGcm9tRG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIFNlcGNpYWwgYmVoYXZpb3VyIHJlcXVpcmVkIGZvciBJRSdzIGNvbnRyb2wgc2VsZWN0aW9uc1xuICAgICAgICAgICAgaWYgKGltcGxlbWVudHNDb250cm9sUmFuZ2UgJiYgaW1wbGVtZW50c0RvY1NlbGVjdGlvbiAmJiB0aGlzLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gdGhpcy5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY29udHJvbFJhbmdlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gY29udHJvbFJhbmdlLml0ZW0oMCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xSYW5nZS5yZW1vdmUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZXMgPSB0aGlzLmdldEFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlc1tpXS5kZWxldGVDb250ZW50cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzcGVjIHNheXMgbm90aGluZyBhYm91dCB3aGF0IHRoZSBzZWxlY3Rpb24gc2hvdWxkIGNvbnRhaW4gYWZ0ZXIgY2FsbGluZyBkZWxldGVDb250ZW50cyBvbiBlYWNoXG4gICAgICAgICAgICAgICAgICAgIC8vIHJhbmdlLiBGaXJlZm94IG1vdmVzIHRoZSBzZWxlY3Rpb24gdG8gd2hlcmUgdGhlIGZpbmFsIHNlbGVjdGVkIHJhbmdlIHdhcywgc28gd2UgZW11bGF0ZSB0aGF0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2VzW2xlbiAtIDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmUgbm9uLXN0YW5kYXJkIGV4dGVuc2lvbnNcbiAgICAgICAgc2VsUHJvdG8uZWFjaFJhbmdlID0gZnVuY3Rpb24oZnVuYywgcmV0dXJuVmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9yYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAoIGZ1bmMoIHRoaXMuZ2V0UmFuZ2VBdChpKSApICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmdldEFsbFJhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJhbmdlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5lYWNoUmFuZ2UoZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICByYW5nZXMucHVzaChyYW5nZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByYW5nZXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uc2V0U2luZ2xlUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZSwgZGlyZWN0aW9uKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5jYWxsTWV0aG9kT25FYWNoUmFuZ2UgPSBmdW5jdGlvbihtZXRob2ROYW1lLCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgICAgICB0aGlzLmVhY2hSYW5nZSggZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goIHJhbmdlW21ldGhvZE5hbWVdLmFwcGx5KHJhbmdlLCBwYXJhbXMpICk7XG4gICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVN0YXJ0T3JFbmRTZXR0ZXIoaXNTdGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICByYW5nZVtcInNldFwiICsgKGlzU3RhcnQgPyBcIlN0YXJ0XCIgOiBcIkVuZFwiKV0obm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZSh0aGlzLndpbi5kb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2luZ2xlUmFuZ2UocmFuZ2UsIHRoaXMuaXNCYWNrd2FyZCgpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBzZWxQcm90by5zZXRTdGFydCA9IGNyZWF0ZVN0YXJ0T3JFbmRTZXR0ZXIodHJ1ZSk7XG4gICAgICAgIHNlbFByb3RvLnNldEVuZCA9IGNyZWF0ZVN0YXJ0T3JFbmRTZXR0ZXIoZmFsc2UpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIHNlbGVjdCgpIG1ldGhvZCB0byBSYW5nZSBwcm90b3R5cGUuIEFueSBleGlzdGluZyBzZWxlY3Rpb24gd2lsbCBiZSByZW1vdmVkLlxuICAgICAgICBhcGkucmFuZ2VQcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBnZXRTZWxlY3Rpb24oIHRoaXMuZ2V0RG9jdW1lbnQoKSApLnNldFNpbmdsZVJhbmdlKHRoaXMsIGRpcmVjdGlvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uY2hhbmdlRWFjaFJhbmdlID0gZnVuY3Rpb24oZnVuYykge1xuICAgICAgICAgICAgdmFyIHJhbmdlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGJhY2t3YXJkID0gdGhpcy5pc0JhY2t3YXJkKCk7XG5cbiAgICAgICAgICAgIHRoaXMuZWFjaFJhbmdlKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZnVuYyhyYW5nZSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICBpZiAoYmFja3dhcmQgJiYgcmFuZ2VzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZXNbMF0sIFwiYmFja3dhcmRcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2VzKHJhbmdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uY29udGFpbnNOb2RlID0gZnVuY3Rpb24obm9kZSwgYWxsb3dQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoUmFuZ2UoIGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlLmNvbnRhaW5zTm9kZShub2RlLCBhbGxvd1BhcnRpYWwpO1xuICAgICAgICAgICAgfSwgdHJ1ZSApIHx8IGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmdldEJvb2ttYXJrID0gZnVuY3Rpb24oY29udGFpbmVyTm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBiYWNrd2FyZDogdGhpcy5pc0JhY2t3YXJkKCksXG4gICAgICAgICAgICAgICAgcmFuZ2VCb29rbWFya3M6IHRoaXMuY2FsbE1ldGhvZE9uRWFjaFJhbmdlKFwiZ2V0Qm9va21hcmtcIiwgW2NvbnRhaW5lck5vZGVdKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5tb3ZlVG9Cb29rbWFyayA9IGZ1bmN0aW9uKGJvb2ttYXJrKSB7XG4gICAgICAgICAgICB2YXIgc2VsUmFuZ2VzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcmFuZ2VCb29rbWFyaywgcmFuZ2U7IHJhbmdlQm9va21hcmsgPSBib29rbWFyay5yYW5nZUJvb2ttYXJrc1tpKytdOyApIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZSh0aGlzLndpbik7XG4gICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsocmFuZ2VCb29rbWFyayk7XG4gICAgICAgICAgICAgICAgc2VsUmFuZ2VzLnB1c2gocmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJvb2ttYXJrLmJhY2t3YXJkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTaW5nbGVSYW5nZShzZWxSYW5nZXNbMF0sIFwiYmFja3dhcmRcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2VzKHNlbFJhbmdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8udG9IdG1sID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VIdG1scyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5lYWNoUmFuZ2UoZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICByYW5nZUh0bWxzLnB1c2goIERvbVJhbmdlLnRvSHRtbChyYW5nZSkgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJhbmdlSHRtbHMuam9pbihcIlwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZmVhdHVyZXMuaW1wbGVtZW50c1RleHRSYW5nZSkge1xuICAgICAgICAgICAgc2VsUHJvdG8uZ2V0TmF0aXZlVGV4dFJhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbCwgdGV4dFJhbmdlO1xuICAgICAgICAgICAgICAgIGlmICggKHNlbCA9IHRoaXMuZG9jU2VsZWN0aW9uKSApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gc2VsLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RleHRSYW5nZShyYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcImdldE5hdGl2ZVRleHRSYW5nZTogc2VsZWN0aW9uIGlzIGEgY29udHJvbCBzZWxlY3Rpb25cIik7IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJhbmdlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGkuV3JhcHBlZFRleHRSYW5nZS5yYW5nZVRvVGV4dFJhbmdlKCB0aGlzLmdldFJhbmdlQXQoMCkgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJnZXROYXRpdmVUZXh0UmFuZ2U6IHNlbGVjdGlvbiBjb250YWlucyBubyByYW5nZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5zcGVjdChzZWwpIHtcbiAgICAgICAgICAgIHZhciByYW5nZUluc3BlY3RzID0gW107XG4gICAgICAgICAgICB2YXIgYW5jaG9yID0gbmV3IERvbVBvc2l0aW9uKHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0KTtcbiAgICAgICAgICAgIHZhciBmb2N1cyA9IG5ldyBEb21Qb3NpdGlvbihzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQpO1xuICAgICAgICAgICAgdmFyIG5hbWUgPSAodHlwZW9mIHNlbC5nZXROYW1lID09IFwiZnVuY3Rpb25cIikgPyBzZWwuZ2V0TmFtZSgpIDogXCJTZWxlY3Rpb25cIjtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWwucmFuZ2VDb3VudCAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlbC5yYW5nZUNvdW50OyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VJbnNwZWN0c1tpXSA9IERvbVJhbmdlLmluc3BlY3Qoc2VsLmdldFJhbmdlQXQoaSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIltcIiArIG5hbWUgKyBcIihSYW5nZXM6IFwiICsgcmFuZ2VJbnNwZWN0cy5qb2luKFwiLCBcIikgK1xuICAgICAgICAgICAgICAgICAgICBcIikoYW5jaG9yOiBcIiArIGFuY2hvci5pbnNwZWN0KCkgKyBcIiwgZm9jdXM6IFwiICsgZm9jdXMuaW5zcGVjdCgpICsgXCJdXCI7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxQcm90by5nZXROYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJXcmFwcGVkU2VsZWN0aW9uXCI7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uaW5zcGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3QodGhpcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uZGV0YWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhY3RPbkNhY2hlZFNlbGVjdGlvbih0aGlzLndpbiwgXCJkZWxldGVcIik7XG4gICAgICAgICAgICBkZWxldGVQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFdyYXBwZWRTZWxlY3Rpb24uZGV0YWNoQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhY3RPbkNhY2hlZFNlbGVjdGlvbihudWxsLCBcImRlbGV0ZUFsbFwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBXcmFwcGVkU2VsZWN0aW9uLmluc3BlY3QgPSBpbnNwZWN0O1xuICAgICAgICBXcmFwcGVkU2VsZWN0aW9uLmlzRGlyZWN0aW9uQmFja3dhcmQgPSBpc0RpcmVjdGlvbkJhY2t3YXJkO1xuXG4gICAgICAgIGFwaS5TZWxlY3Rpb24gPSBXcmFwcGVkU2VsZWN0aW9uO1xuXG4gICAgICAgIGFwaS5zZWxlY3Rpb25Qcm90b3R5cGUgPSBzZWxQcm90bztcblxuICAgICAgICBhcGkuYWRkU2hpbUxpc3RlbmVyKGZ1bmN0aW9uKHdpbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW4uZ2V0U2VsZWN0aW9uID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICB3aW4uZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRTZWxlY3Rpb24od2luKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgXHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBXYWl0IGZvciBkb2N1bWVudCB0byBsb2FkIGJlZm9yZSBpbml0aWFsaXppbmdcclxuICAgIHZhciBkb2NSZWFkeSA9IGZhbHNlO1xyXG5cclxuICAgIHZhciBsb2FkSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoIWRvY1JlYWR5KSB7XHJcbiAgICAgICAgICAgIGRvY1JlYWR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCFhcGkuaW5pdGlhbGl6ZWQgJiYgYXBpLmNvbmZpZy5hdXRvSW5pdGlhbGl6ZSkge1xyXG4gICAgICAgICAgICAgICAgaW5pdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoaXNCcm93c2VyKSB7XHJcbiAgICAgICAgLy8gVGVzdCB3aGV0aGVyIHRoZSBkb2N1bWVudCBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZCBhbmQgaW5pdGlhbGl6ZSBpbW1lZGlhdGVseSBpZiBzb1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09IFwiY29tcGxldGVcIikge1xyXG4gICAgICAgICAgICBsb2FkSGFuZGxlcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsIFwiYWRkRXZlbnRMaXN0ZW5lclwiKSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgbG9hZEhhbmRsZXIsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGEgZmFsbGJhY2sgaW4gY2FzZSB0aGUgRE9NQ29udGVudExvYWRlZCBldmVudCBpc24ndCBzdXBwb3J0ZWRcclxuICAgICAgICAgICAgYWRkTGlzdGVuZXIod2luZG93LCBcImxvYWRcIiwgbG9hZEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXBpO1xyXG59LCB0aGlzKTsiLCIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjguMlxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXJcbiAgICBwdXNoICAgICAgICAgICAgID0gQXJyYXlQcm90by5wdXNoLFxuICAgIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4gIC8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuICB2YXJcbiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LFxuICAgIG5hdGl2ZUtleXMgICAgICAgICA9IE9iamVjdC5rZXlzLFxuICAgIG5hdGl2ZUJpbmQgICAgICAgICA9IEZ1bmNQcm90by5iaW5kLFxuICAgIG5hdGl2ZUNyZWF0ZSAgICAgICA9IE9iamVjdC5jcmVhdGU7XG5cbiAgLy8gTmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLlxuICB2YXIgQ3RvciA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy5cbiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopO1xuICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7XG4gIH07XG5cbiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGhcbiAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZm9yIHRoZSBvbGQgYHJlcXVpcmUoKWAgQVBJLiBJZiB3ZSdyZSBpblxuICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuOC4yJztcblxuICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4gIC8vIGZ1bmN0aW9ucy5cbiAgdmFyIG9wdGltaXplQ2IgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBBIG1vc3RseS1pbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZFxuICAvLyB0byBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXJcbiAgLy8gaWRlbnRpdHksIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuICB2YXIgY2IgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSByZXR1cm4gXy5tYXRjaGVyKHZhbHVlKTtcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XG4gIH07XG4gIF8uaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBjYih2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVBc3NpZ25lciA9IGZ1bmN0aW9uKGtleXNGdW5jLCB1bmRlZmluZWRPbmx5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMiB8fCBvYmogPT0gbnVsbCkgcmV0dXJuIG9iajtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF0sXG4gICAgICAgICAgICBrZXlzID0ga2V5c0Z1bmMoc291cmNlKSxcbiAgICAgICAgICAgIGwgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoIXVuZGVmaW5lZE9ubHkgfHwgb2JqW2tleV0gPT09IHZvaWQgMCkgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuXG4gIHZhciBiYXNlQ3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiB7fTtcbiAgICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yO1xuICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEhlbHBlciBmb3IgY29sbGVjdGlvbiBtZXRob2RzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgY29sbGVjdGlvblxuICAvLyBzaG91bGQgYmUgaXRlcmF0ZWQgYXMgYW4gYXJyYXkgb3IgYXMgYW4gb2JqZWN0XG4gIC8vIFJlbGF0ZWQ6IGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvbGVuZ3RoXG4gIHZhciBNQVhfQVJSQVlfSU5ERVggPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuICB2YXIgaXNBcnJheUxpa2UgPSBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24gJiYgY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgcmV0dXJuIHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgJiYgbGVuZ3RoID49IDAgJiYgbGVuZ3RoIDw9IE1BWF9BUlJBWV9JTkRFWDtcbiAgfTtcblxuICAvLyBDb2xsZWN0aW9uIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLlxuICAvLyBIYW5kbGVzIHJhdyBvYmplY3RzIGluIGFkZGl0aW9uIHRvIGFycmF5LWxpa2VzLiBUcmVhdHMgYWxsXG4gIC8vIHNwYXJzZSBhcnJheS1saWtlcyBhcyBpZiB0aGV5IHdlcmUgZGVuc2UuXG4gIF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBpLCBsZW5ndGg7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtrZXlzW2ldXSwga2V5c1tpXSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudC5cbiAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdHMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICByZXN1bHRzW2luZGV4XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgcmVkdWNpbmcgZnVuY3Rpb24gaXRlcmF0aW5nIGxlZnQgb3IgcmlnaHQuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJlZHVjZShkaXIpIHtcbiAgICAvLyBPcHRpbWl6ZWQgaXRlcmF0b3IgZnVuY3Rpb24gYXMgdXNpbmcgYXJndW1lbnRzLmxlbmd0aFxuICAgIC8vIGluIHRoZSBtYWluIGZ1bmN0aW9uIHdpbGwgZGVvcHRpbWl6ZSB0aGUsIHNlZSAjMTk5MS5cbiAgICBmdW5jdGlvbiBpdGVyYXRvcihvYmosIGl0ZXJhdGVlLCBtZW1vLCBrZXlzLCBpbmRleCwgbGVuZ3RoKSB7XG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRlZShtZW1vLCBvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkge1xuICAgICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCA0KTtcbiAgICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICAvLyBEZXRlcm1pbmUgdGhlIGluaXRpYWwgdmFsdWUgaWYgbm9uZSBpcyBwcm92aWRlZC5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgICAgICBtZW1vID0gb2JqW2tleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4XTtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdG9yKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGtleXMsIGluZGV4LCBsZW5ndGgpO1xuICAgIH07XG4gIH1cblxuICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4gIC8vIG9yIGBmb2xkbGAuXG4gIF8ucmVkdWNlID0gXy5mb2xkbCA9IF8uaW5qZWN0ID0gY3JlYXRlUmVkdWNlKDEpO1xuXG4gIC8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuICBfLnJlZHVjZVJpZ2h0ID0gXy5mb2xkciA9IGNyZWF0ZVJlZHVjZSgtMSk7XG5cbiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLlxuICBfLmZpbmQgPSBfLmRldGVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIGtleTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAga2V5ID0gXy5maW5kSW5kZXgob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXkgPSBfLmZpbmRLZXkob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoa2V5ICE9PSB2b2lkIDAgJiYga2V5ICE9PSAtMSkgcmV0dXJuIG9ialtrZXldO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuXG4gIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0cy5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBmb3Igd2hpY2ggYSB0cnV0aCB0ZXN0IGZhaWxzLlxuICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5uZWdhdGUoY2IocHJlZGljYXRlKSksIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIERldGVybWluZSB3aGV0aGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgbWF0Y2ggYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmICghcHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIG9iamVjdCBtYXRjaGVzIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYW55YC5cbiAgXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gdmFsdWUgKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZXNgIGFuZCBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGVzID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCB0YXJnZXQsIGZyb21JbmRleCkge1xuICAgIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gXy52YWx1ZXMob2JqKTtcbiAgICByZXR1cm4gXy5pbmRleE9mKG9iaiwgdGFyZ2V0LCB0eXBlb2YgZnJvbUluZGV4ID09ICdudW1iZXInICYmIGZyb21JbmRleCkgPj0gMDtcbiAgfTtcblxuICAvLyBJbnZva2UgYSBtZXRob2QgKHdpdGggYXJndW1lbnRzKSBvbiBldmVyeSBpdGVtIGluIGEgY29sbGVjdGlvbi5cbiAgXy5pbnZva2UgPSBmdW5jdGlvbihvYmosIG1ldGhvZCkge1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHZhciBpc0Z1bmMgPSBfLmlzRnVuY3Rpb24obWV0aG9kKTtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0Z1bmMgPyBtZXRob2QgOiB2YWx1ZVttZXRob2RdO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IGZ1bmMgOiBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LlxuICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBfLnByb3BlcnR5KGtleSkpO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaW5kYDogZ2V0dGluZyB0aGUgZmlyc3Qgb2JqZWN0XG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLmZpbmQob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSAtSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IC1JbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSA+IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkID4gbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSAtSW5maW5pdHkgJiYgcmVzdWx0ID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtaW5pbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IEluZmluaXR5LFxuICAgICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgJiYgb2JqICE9IG51bGwpIHtcbiAgICAgIG9iaiA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcbiAgICAgICAgaWYgKHZhbHVlIDwgcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGxpc3QpO1xuICAgICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IEluZmluaXR5ICYmIHJlc3VsdCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gU2h1ZmZsZSBhIGNvbGxlY3Rpb24sIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGVcbiAgLy8gW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlcuKAk1lhdGVzX3NodWZmbGUpLlxuICBfLnNodWZmbGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgc2V0ID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IHNldC5sZW5ndGg7XG4gICAgdmFyIHNodWZmbGVkID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDAsIHJhbmQ7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByYW5kID0gXy5yYW5kb20oMCwgaW5kZXgpO1xuICAgICAgaWYgKHJhbmQgIT09IGluZGV4KSBzaHVmZmxlZFtpbmRleF0gPSBzaHVmZmxlZFtyYW5kXTtcbiAgICAgIHNodWZmbGVkW3JhbmRdID0gc2V0W2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHNodWZmbGVkO1xuICB9O1xuXG4gIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uLlxuICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxuICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLlxuICBfLnNhbXBsZSA9IGZ1bmN0aW9uKG9iaiwgbiwgZ3VhcmQpIHtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XG4gICAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgICByZXR1cm4gb2JqW18ucmFuZG9tKG9iai5sZW5ndGggLSAxKV07XG4gICAgfVxuICAgIHJldHVybiBfLnNodWZmbGUob2JqKS5zbGljZSgwLCBNYXRoLm1heCgwLCBuKSk7XG4gIH07XG5cbiAgLy8gU29ydCB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uIHByb2R1Y2VkIGJ5IGFuIGl0ZXJhdGVlLlxuICBfLnNvcnRCeSA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gXy5wbHVjayhfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGNyaXRlcmlhOiBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGxpc3QpXG4gICAgICB9O1xuICAgIH0pLnNvcnQoZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICAgIHZhciBhID0gbGVmdC5jcml0ZXJpYTtcbiAgICAgIHZhciBiID0gcmlnaHQuY3JpdGVyaWE7XG4gICAgICBpZiAoYSAhPT0gYikge1xuICAgICAgICBpZiAoYSA+IGIgfHwgYSA9PT0gdm9pZCAwKSByZXR1cm4gMTtcbiAgICAgICAgaWYgKGEgPCBiIHx8IGIgPT09IHZvaWQgMCkgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlZnQuaW5kZXggLSByaWdodC5pbmRleDtcbiAgICB9KSwgJ3ZhbHVlJyk7XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdXNlZCBmb3IgYWdncmVnYXRlIFwiZ3JvdXAgYnlcIiBvcGVyYXRpb25zLlxuICB2YXIgZ3JvdXAgPSBmdW5jdGlvbihiZWhhdmlvcikge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIga2V5ID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBvYmopO1xuICAgICAgICBiZWhhdmlvcihyZXN1bHQsIHZhbHVlLCBrZXkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gR3JvdXBzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24uIFBhc3MgZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZVxuICAvLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi5cbiAgXy5ncm91cEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgaWYgKF8uaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7IGVsc2UgcmVzdWx0W2tleV0gPSBbdmFsdWVdO1xuICB9KTtcblxuICAvLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYGdyb3VwQnlgLCBidXQgZm9yXG4gIC8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS5cbiAgXy5pbmRleEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfSk7XG5cbiAgLy8gQ291bnRzIGluc3RhbmNlcyBvZiBhbiBvYmplY3QgdGhhdCBncm91cCBieSBhIGNlcnRhaW4gY3JpdGVyaW9uLiBQYXNzXG4gIC8vIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUgdG8gY291bnQgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAvLyBjcml0ZXJpb24uXG4gIF8uY291bnRCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldKys7IGVsc2UgcmVzdWx0W2tleV0gPSAxO1xuICB9KTtcblxuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkgcmV0dXJuIF8ubWFwKG9iaiwgXy5pZGVudGl0eSk7XG4gICAgcmV0dXJuIF8udmFsdWVzKG9iaik7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LlxuICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAwO1xuICAgIHJldHVybiBpc0FycmF5TGlrZShvYmopID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDtcbiAgfTtcblxuICAvLyBTcGxpdCBhIGNvbGxlY3Rpb24gaW50byB0d28gYXJyYXlzOiBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIHNhdGlzZnkgdGhlIGdpdmVuXG4gIC8vIHByZWRpY2F0ZSwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cbiAgXy5wYXJ0aXRpb24gPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIHBhc3MgPSBbXSwgZmFpbCA9IFtdO1xuICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iaikge1xuICAgICAgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBvYmopID8gcGFzcyA6IGZhaWwpLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBbcGFzcywgZmFpbF07XG4gIH07XG5cbiAgLy8gQXJyYXkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBBbGlhc2VkIGFzIGBoZWFkYCBhbmQgYHRha2VgLiBUaGUgKipndWFyZCoqIGNoZWNrXG4gIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVswXTtcbiAgICByZXR1cm4gXy5pbml0aWFsKGFycmF5LCBhcnJheS5sZW5ndGggLSBuKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb25cbiAgLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW5cbiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi5cbiAgXy5pbml0aWFsID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIDAsIE1hdGgubWF4KDAsIGFycmF5Lmxlbmd0aCAtIChuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbikpKTtcbiAgfTtcblxuICAvLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgbGFzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuXG4gIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gXy5yZXN0KGFycmF5LCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSBuKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuXG4gIF8ucmVzdCA9IF8udGFpbCA9IF8uZHJvcCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgXy5pZGVudGl0eSk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBzdHJpY3QsIHN0YXJ0SW5kZXgpIHtcbiAgICB2YXIgb3V0cHV0ID0gW10sIGlkeCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXggfHwgMCwgbGVuZ3RoID0gaW5wdXQgJiYgaW5wdXQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAoXy5pc0FycmF5KHZhbHVlKSB8fCBfLmlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgLy9mbGF0dGVuIGN1cnJlbnQgbGV2ZWwgb2YgYXJyYXkgb3IgYXJndW1lbnRzIG9iamVjdFxuICAgICAgICBpZiAoIXNoYWxsb3cpIHZhbHVlID0gZmxhdHRlbih2YWx1ZSwgc2hhbGxvdywgc3RyaWN0KTtcbiAgICAgICAgdmFyIGogPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIG91dHB1dC5sZW5ndGggKz0gbGVuO1xuICAgICAgICB3aGlsZSAoaiA8IGxlbikge1xuICAgICAgICAgIG91dHB1dFtpZHgrK10gPSB2YWx1ZVtqKytdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QpIHtcbiAgICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIC8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciBqdXN0IG9uZSBsZXZlbC5cbiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHtcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgZmFsc2UpO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaV0sXG4gICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlLCBpLCBhcnJheSkgOiB2YWx1ZTtcbiAgICAgIGlmIChpc1NvcnRlZCkge1xuICAgICAgICBpZiAoIWkgfHwgc2VlbiAhPT0gY29tcHV0ZWQpIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgfSBlbHNlIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoc2VlbiwgY29tcHV0ZWQpKSB7XG4gICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIV8uY29udGFpbnMocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuaXEoZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUpKTtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgZXZlcnkgaXRlbSBzaGFyZWQgYmV0d2VlbiBhbGwgdGhlXG4gIC8vIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8uaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xuICAgICAgaWYgKF8uY29udGFpbnMocmVzdWx0LCBpdGVtKSkgY29udGludWU7XG4gICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGFyZ3NMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUsIDEpO1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpe1xuICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlXG4gIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuICBfLnppcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuemlwKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQ29tcGxlbWVudCBvZiBfLnppcC4gVW56aXAgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgYW5kIGdyb3Vwc1xuICAvLyBlYWNoIGFycmF5J3MgZWxlbWVudHMgb24gc2hhcmVkIGluZGljZXNcbiAgXy51bnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ICYmIF8ubWF4KGFycmF5LCAnbGVuZ3RoJykubGVuZ3RoIHx8IDA7XG4gICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gXy5wbHVjayhhcnJheSwgaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIENvbnZlcnRzIGxpc3RzIGludG8gb2JqZWN0cy4gUGFzcyBlaXRoZXIgYSBzaW5nbGUgYXJyYXkgb2YgYFtrZXksIHZhbHVlXWBcbiAgLy8gcGFpcnMsIG9yIHR3byBwYXJhbGxlbCBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoIC0tIG9uZSBvZiBrZXlzLCBhbmQgb25lIG9mXG4gIC8vIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgXy5vYmplY3QgPSBmdW5jdGlvbihsaXN0LCB2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGxpc3QgJiYgbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4gaXRlbSBpbiBhbiBhcnJheSxcbiAgLy8gb3IgLTEgaWYgdGhlIGl0ZW0gaXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheS5cbiAgLy8gSWYgdGhlIGFycmF5IGlzIGxhcmdlIGFuZCBhbHJlYWR5IGluIHNvcnQgb3JkZXIsIHBhc3MgYHRydWVgXG4gIC8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guXG4gIF8uaW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBpc1NvcnRlZCkge1xuICAgIHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkgJiYgYXJyYXkubGVuZ3RoO1xuICAgIGlmICh0eXBlb2YgaXNTb3J0ZWQgPT0gJ251bWJlcicpIHtcbiAgICAgIGkgPSBpc1NvcnRlZCA8IDAgPyBNYXRoLm1heCgwLCBsZW5ndGggKyBpc1NvcnRlZCkgOiBpc1NvcnRlZDtcbiAgICB9IGVsc2UgaWYgKGlzU29ydGVkICYmIGxlbmd0aCkge1xuICAgICAgaSA9IF8uc29ydGVkSW5kZXgoYXJyYXksIGl0ZW0pO1xuICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBpdGVtID8gaSA6IC0xO1xuICAgIH1cbiAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgcmV0dXJuIF8uZmluZEluZGV4KHNsaWNlLmNhbGwoYXJyYXksIGkpLCBfLmlzTmFOKTtcbiAgICB9XG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTtcbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgXy5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBmcm9tKSB7XG4gICAgdmFyIGlkeCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICBpZiAodHlwZW9mIGZyb20gPT0gJ251bWJlcicpIHtcbiAgICAgIGlkeCA9IGZyb20gPCAwID8gaWR4ICsgZnJvbSArIDEgOiBNYXRoLm1pbihpZHgsIGZyb20gKyAxKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0gIT09IGl0ZW0pIHtcbiAgICAgIHJldHVybiBfLmZpbmRMYXN0SW5kZXgoc2xpY2UuY2FsbChhcnJheSwgMCwgaWR4KSwgXy5pc05hTik7XG4gICAgfVxuICAgIHdoaWxlICgtLWlkeCA+PSAwKSBpZiAoYXJyYXlbaWR4XSA9PT0gaXRlbSkgcmV0dXJuIGlkeDtcbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgLy8gR2VuZXJhdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgZmluZEluZGV4IGFuZCBmaW5kTGFzdEluZGV4IGZ1bmN0aW9uc1xuICBmdW5jdGlvbiBjcmVhdGVJbmRleEZpbmRlcihkaXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSAhPSBudWxsICYmIGFycmF5Lmxlbmd0aDtcbiAgICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaW5kZXggb24gYW4gYXJyYXktbGlrZSB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0XG4gIF8uZmluZEluZGV4ID0gY3JlYXRlSW5kZXhGaW5kZXIoMSk7XG5cbiAgXy5maW5kTGFzdEluZGV4ID0gY3JlYXRlSW5kZXhGaW5kZXIoLTEpO1xuXG4gIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2hcbiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLlxuICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRlZShvYmopO1xuICAgIHZhciBsb3cgPSAwLCBoaWdoID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICB2YXIgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVttaWRdKSA8IHZhbHVlKSBsb3cgPSBtaWQgKyAxOyBlbHNlIGhpZ2ggPSBtaWQ7XG4gICAgfVxuICAgIHJldHVybiBsb3c7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYW4gaW50ZWdlciBBcnJheSBjb250YWluaW5nIGFuIGFyaXRobWV0aWMgcHJvZ3Jlc3Npb24uIEEgcG9ydCBvZlxuICAvLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZVxuICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLlxuICBfLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAxKSB7XG4gICAgICBzdG9wID0gc3RhcnQgfHwgMDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgc3RlcCA9IHN0ZXAgfHwgMTtcblxuICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIHJhbmdlID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyssIHN0YXJ0ICs9IHN0ZXApIHtcbiAgICAgIHJhbmdlW2lkeF0gPSBzdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZXhlY3V0ZSBhIGZ1bmN0aW9uIGFzIGEgY29uc3RydWN0b3JcbiAgLy8gb3IgYSBub3JtYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJvdmlkZWQgYXJndW1lbnRzXG4gIHZhciBleGVjdXRlQm91bmQgPSBmdW5jdGlvbihzb3VyY2VGdW5jLCBib3VuZEZ1bmMsIGNvbnRleHQsIGNhbGxpbmdDb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKCEoY2FsbGluZ0NvbnRleHQgaW5zdGFuY2VvZiBib3VuZEZ1bmMpKSByZXR1cm4gc291cmNlRnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB2YXIgc2VsZiA9IGJhc2VDcmVhdGUoc291cmNlRnVuYy5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBzb3VyY2VGdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIGlmIChfLmlzT2JqZWN0KHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4gIC8vIG9wdGlvbmFsbHkpLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWZcbiAgLy8gYXZhaWxhYmxlLlxuICBfLmJpbmQgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0KSB7XG4gICAgaWYgKG5hdGl2ZUJpbmQgJiYgZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kKSByZXR1cm4gbmF0aXZlQmluZC5hcHBseShmdW5jLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIGlmICghXy5pc0Z1bmN0aW9uKGZ1bmMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdCaW5kIG11c3QgYmUgY2FsbGVkIG9uIGEgZnVuY3Rpb24nKTtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgYm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleGVjdXRlQm91bmQoZnVuYywgYm91bmQsIGNvbnRleHQsIHRoaXMsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgIH07XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9O1xuXG4gIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHNcbiAgLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuIF8gYWN0c1xuICAvLyBhcyBhIHBsYWNlaG9sZGVyLCBhbGxvd2luZyBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzIHRvIGJlIHByZS1maWxsZWQuXG4gIF8ucGFydGlhbCA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICB2YXIgYm91bmRBcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gMCwgbGVuZ3RoID0gYm91bmRBcmdzLmxlbmd0aDtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJnc1tpXSA9IGJvdW5kQXJnc1tpXSA9PT0gXyA/IGFyZ3VtZW50c1twb3NpdGlvbisrXSA6IGJvdW5kQXJnc1tpXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IGFyZ3VtZW50cy5sZW5ndGgpIGFyZ3MucHVzaChhcmd1bWVudHNbcG9zaXRpb24rK10pO1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgdGhpcywgdGhpcywgYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH07XG5cbiAgLy8gQmluZCBhIG51bWJlciBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBSZW1haW5pbmcgYXJndW1lbnRzXG4gIC8vIGFyZSB0aGUgbWV0aG9kIG5hbWVzIHRvIGJlIGJvdW5kLiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXQgYWxsIGNhbGxiYWNrc1xuICAvLyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBpLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBrZXk7XG4gICAgaWYgKGxlbmd0aCA8PSAxKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMnKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIG9ialtrZXldID0gXy5iaW5kKG9ialtrZXldLCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXG4gIF8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGZ1bmMsIGhhc2hlcikge1xuICAgIHZhciBtZW1vaXplID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgY2FjaGUgPSBtZW1vaXplLmNhY2hlO1xuICAgICAgdmFyIGFkZHJlc3MgPSAnJyArIChoYXNoZXIgPyBoYXNoZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGtleSk7XG4gICAgICBpZiAoIV8uaGFzKGNhY2hlLCBhZGRyZXNzKSkgY2FjaGVbYWRkcmVzc10gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gY2FjaGVbYWRkcmVzc107XG4gICAgfTtcbiAgICBtZW1vaXplLmNhY2hlID0ge307XG4gICAgcmV0dXJuIG1lbW9pemU7XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0sIHdhaXQpO1xuICB9O1xuXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xuICAvLyBjbGVhcmVkLlxuICBfLmRlZmVyID0gXy5wYXJ0aWFsKF8uZGVsYXksIF8sIDEpO1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZVxuICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4gTm9ybWFsbHksIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW5cbiAgLy8gYXMgbXVjaCBhcyBpdCBjYW4sIHdpdGhvdXQgZXZlciBnb2luZyBtb3JlIHRoYW4gb25jZSBwZXIgYHdhaXRgIGR1cmF0aW9uO1xuICAvLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzc1xuICAvLyBge2xlYWRpbmc6IGZhbHNlfWAuIFRvIGRpc2FibGUgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlLCBkaXR0by5cbiAgXy50aHJvdHRsZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCwgYXJncywgcmVzdWx0O1xuICAgIHZhciB0aW1lb3V0ID0gbnVsbDtcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IF8ubm93KCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBub3cgPSBfLm5vdygpO1xuICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IG5vdztcbiAgICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdyAtIHByZXZpb3VzKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuICAvLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXG4gIC8vIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICAvLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuICBfLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgdmFyIHRpbWVvdXQsIGFyZ3MsIGNvbnRleHQsIHRpbWVzdGFtcCwgcmVzdWx0O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGFzdCA9IF8ubm93KCkgLSB0aW1lc3RhbXA7XG5cbiAgICAgIGlmIChsYXN0IDwgd2FpdCAmJiBsYXN0ID49IDApIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdGltZXN0YW1wID0gXy5ub3coKTtcbiAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgICAgaWYgKCF0aW1lb3V0KSB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICBpZiAoY2FsbE5vdykge1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBmdW5jdGlvbiBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHNlY29uZCxcbiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxuICAvLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICBfLndyYXAgPSBmdW5jdGlvbihmdW5jLCB3cmFwcGVyKSB7XG4gICAgcmV0dXJuIF8ucGFydGlhbCh3cmFwcGVyLCBmdW5jKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBwYXNzZWQtaW4gcHJlZGljYXRlLlxuICBfLm5lZ2F0ZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3RhcnQgPSBhcmdzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGkgPSBzdGFydDtcbiAgICAgIHZhciByZXN1bHQgPSBhcmdzW3N0YXJ0XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgd2hpbGUgKGktLSkgcmVzdWx0ID0gYXJnc1tpXS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIG9uIGFuZCBhZnRlciB0aGUgTnRoIGNhbGwuXG4gIF8uYWZ0ZXIgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRpbWVzIDwgMSkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIHVwIHRvIChidXQgbm90IGluY2x1ZGluZykgdGhlIE50aCBjYWxsLlxuICBfLmJlZm9yZSA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgdmFyIG1lbW87XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPiAwKSB7XG4gICAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBpZiAodGltZXMgPD0gMSkgZnVuYyA9IG51bGw7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvd1xuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuICBfLm9uY2UgPSBfLnBhcnRpYWwoXy5iZWZvcmUsIDIpO1xuXG4gIC8vIE9iamVjdCBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEtleXMgaW4gSUUgPCA5IHRoYXQgd29uJ3QgYmUgaXRlcmF0ZWQgYnkgYGZvciBrZXkgaW4gLi4uYCBhbmQgdGh1cyBtaXNzZWQuXG4gIHZhciBoYXNFbnVtQnVnID0gIXt0b1N0cmluZzogbnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyk7XG4gIHZhciBub25FbnVtZXJhYmxlUHJvcHMgPSBbJ3ZhbHVlT2YnLCAnaXNQcm90b3R5cGVPZicsICd0b1N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2hhc093blByb3BlcnR5JywgJ3RvTG9jYWxlU3RyaW5nJ107XG5cbiAgZnVuY3Rpb24gY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpIHtcbiAgICB2YXIgbm9uRW51bUlkeCA9IG5vbkVudW1lcmFibGVQcm9wcy5sZW5ndGg7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gb2JqLmNvbnN0cnVjdG9yO1xuICAgIHZhciBwcm90byA9IChfLmlzRnVuY3Rpb24oY29uc3RydWN0b3IpICYmIGNvbnN0cnVjdG9yLnByb3RvdHlwZSkgfHwgT2JqUHJvdG87XG5cbiAgICAvLyBDb25zdHJ1Y3RvciBpcyBhIHNwZWNpYWwgY2FzZS5cbiAgICB2YXIgcHJvcCA9ICdjb25zdHJ1Y3Rvcic7XG4gICAgaWYgKF8uaGFzKG9iaiwgcHJvcCkgJiYgIV8uY29udGFpbnMoa2V5cywgcHJvcCkpIGtleXMucHVzaChwcm9wKTtcblxuICAgIHdoaWxlIChub25FbnVtSWR4LS0pIHtcbiAgICAgIHByb3AgPSBub25FbnVtZXJhYmxlUHJvcHNbbm9uRW51bUlkeF07XG4gICAgICBpZiAocHJvcCBpbiBvYmogJiYgb2JqW3Byb3BdICE9PSBwcm90b1twcm9wXSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkge1xuICAgICAgICBrZXlzLnB1c2gocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0cmlldmUgdGhlIG5hbWVzIG9mIGFuIG9iamVjdCdzIG93biBwcm9wZXJ0aWVzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgT2JqZWN0LmtleXNgXG4gIF8ua2V5cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gW107XG4gICAgaWYgKG5hdGl2ZUtleXMpIHJldHVybiBuYXRpdmVLZXlzKG9iaik7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgICAvLyBBaGVtLCBJRSA8IDkuXG4gICAgaWYgKGhhc0VudW1CdWcpIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICAvLyBSZXRyaWV2ZSBhbGwgdGhlIHByb3BlcnR5IG5hbWVzIG9mIGFuIG9iamVjdC5cbiAgXy5hbGxLZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgXy52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgdmFsdWVzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0gPSBvYmpba2V5c1tpXV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50IG9mIHRoZSBvYmplY3RcbiAgLy8gSW4gY29udHJhc3QgdG8gXy5tYXAgaXQgcmV0dXJucyBhbiBvYmplY3RcbiAgXy5tYXBPYmplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAgXy5rZXlzKG9iaiksXG4gICAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0cyA9IHt9LFxuICAgICAgICAgIGN1cnJlbnRLZXk7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGN1cnJlbnRLZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0c1tjdXJyZW50S2V5XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENvbnZlcnQgYW4gb2JqZWN0IGludG8gYSBsaXN0IG9mIGBba2V5LCB2YWx1ZV1gIHBhaXJzLlxuICBfLnBhaXJzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHBhaXJzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBwYWlyc1tpXSA9IFtrZXlzW2ldLCBvYmpba2V5c1tpXV1dO1xuICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbb2JqW2tleXNbaV1dXSA9IGtleXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYFxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzKTtcblxuICAvLyBBc3NpZ25zIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBvd24gcHJvcGVydGllcyBpbiB0aGUgcGFzc2VkLWluIG9iamVjdChzKVxuICAvLyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2Fzc2lnbilcbiAgXy5leHRlbmRPd24gPSBfLmFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKF8ua2V5cyk7XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3Qga2V5IG9uIGFuIG9iamVjdCB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0XG4gIF8uZmluZEtleSA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopLCBrZXk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtrZXldLCBrZXksIG9iaikpIHJldHVybiBrZXk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIHdoaXRlbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ucGljayA9IGZ1bmN0aW9uKG9iamVjdCwgb2l0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9LCBvYmogPSBvYmplY3QsIGl0ZXJhdGVlLCBrZXlzO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKG9pdGVyYXRlZSkpIHtcbiAgICAgIGtleXMgPSBfLmFsbEtleXMob2JqKTtcbiAgICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihvaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gZmxhdHRlbihhcmd1bWVudHMsIGZhbHNlLCBmYWxzZSwgMSk7XG4gICAgICBpdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iaikgeyByZXR1cm4ga2V5IGluIG9iajsgfTtcbiAgICAgIG9iaiA9IE9iamVjdChvYmopO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgIGlmIChpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmopKSByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgYmxhY2tsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5vbWl0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpdGVyYXRlZSA9IF8ubmVnYXRlKGl0ZXJhdGVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBfLm1hcChmbGF0dGVuKGFyZ3VtZW50cywgZmFsc2UsIGZhbHNlLCAxKSwgU3RyaW5nKTtcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXR1cm4gIV8uY29udGFpbnMoa2V5cywga2V5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBfLnBpY2sob2JqLCBpdGVyYXRlZSwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gRmlsbCBpbiBhIGdpdmVuIG9iamVjdCB3aXRoIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgXy5kZWZhdWx0cyA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cywgdHJ1ZSk7XG5cbiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LlxuICBfLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTtcbiAgfTtcblxuICAvLyBJbnZva2VzIGludGVyY2VwdG9yIHdpdGggdGhlIG9iaiwgYW5kIHRoZW4gcmV0dXJucyBvYmouXG4gIC8vIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluLCBpblxuICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi5cbiAgXy50YXAgPSBmdW5jdGlvbihvYmosIGludGVyY2VwdG9yKSB7XG4gICAgaW50ZXJjZXB0b3Iob2JqKTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybnMgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmlzTWF0Y2ggPSBmdW5jdGlvbihvYmplY3QsIGF0dHJzKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMoYXR0cnMpLCBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAhbGVuZ3RoO1xuICAgIHZhciBvYmogPSBPYmplY3Qob2JqZWN0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChhdHRyc1trZXldICE9PSBvYmpba2V5XSB8fCAhKGtleSBpbiBvYmopKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjtcbiAgICAvLyBBIHN0cmljdCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGBudWxsID09IHVuZGVmaW5lZGAuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBhID09PSBiO1xuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICAgIGlmIChjbGFzc05hbWUgIT09IHRvU3RyaW5nLmNhbGwoYikpIHJldHVybiBmYWxzZTtcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgcmV0dXJuICcnICsgYSA9PT0gJycgKyBiO1xuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU5cbiAgICAgICAgaWYgKCthICE9PSArYSkgcmV0dXJuICtiICE9PSArYjtcbiAgICAgICAgLy8gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvciBvdGhlciBudW1lcmljIHZhbHVlcy5cbiAgICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9uc1xuICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXG4gICAgICAgIHJldHVybiArYSA9PT0gK2I7XG4gICAgfVxuXG4gICAgdmFyIGFyZUFycmF5cyA9IGNsYXNzTmFtZSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICBpZiAoIWFyZUFycmF5cykge1xuICAgICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3RgcyBvciBgQXJyYXlgc1xuICAgICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS5cbiAgICAgIHZhciBhQ3RvciA9IGEuY29uc3RydWN0b3IsIGJDdG9yID0gYi5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiYgIShfLmlzRnVuY3Rpb24oYUN0b3IpICYmIGFDdG9yIGluc3RhbmNlb2YgYUN0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmlzRnVuY3Rpb24oYkN0b3IpICYmIGJDdG9yIGluc3RhbmNlb2YgYkN0b3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICYmICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cbiAgICBcbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxuICAgIGFTdGFjayA9IGFTdGFjayB8fCBbXTtcbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy5cbiAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09PSBiO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucHVzaChhKTtcbiAgICBiU3RhY2sucHVzaChiKTtcblxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgIC8vIENvbXBhcmUgYXJyYXkgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5LlxuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBhU3RhY2ssIGJTdGFjaykpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhhKSwga2V5O1xuICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcyBiZWZvcmUgY29tcGFyaW5nIGRlZXAgZXF1YWxpdHkuXG4gICAgICBpZiAoXy5rZXlzKGIpLmxlbmd0aCAhPT0gbGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICAgIGtleSA9IGtleXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKCEoXy5oYXMoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucG9wKCk7XG4gICAgYlN0YWNrLnBvcCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLlxuICBfLmlzRXF1YWwgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGVxKGEsIGIpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5P1xuICAvLyBBbiBcImVtcHR5XCIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLlxuICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIGlmIChpc0FycmF5TGlrZShvYmopICYmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikgfHwgXy5pc0FyZ3VtZW50cyhvYmopKSkgcmV0dXJuIG9iai5sZW5ndGggPT09IDA7XG4gICAgcmV0dXJuIF8ua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/XG4gIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/XG4gIC8vIERlbGVnYXRlcyB0byBFQ01BNSdzIG5hdGl2ZSBBcnJheS5pc0FycmF5XG4gIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD9cbiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbiAgfTtcblxuICAvLyBBZGQgc29tZSBpc1R5cGUgbWV0aG9kczogaXNBcmd1bWVudHMsIGlzRnVuY3Rpb24sIGlzU3RyaW5nLCBpc051bWJlciwgaXNEYXRlLCBpc1JlZ0V4cCwgaXNFcnJvci5cbiAgXy5lYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnLCAnRXJyb3InXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCAnICsgbmFtZSArICddJztcbiAgICB9O1xuICB9KTtcblxuICAvLyBEZWZpbmUgYSBmYWxsYmFjayB2ZXJzaW9uIG9mIHRoZSBtZXRob2QgaW4gYnJvd3NlcnMgKGFoZW0sIElFIDwgOSksIHdoZXJlXG4gIC8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcIkFyZ3VtZW50c1wiIHR5cGUuXG4gIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7XG4gICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIF8uaGFzKG9iaiwgJ2NhbGxlZScpO1xuICAgIH07XG4gIH1cblxuICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuIFdvcmsgYXJvdW5kIHNvbWUgdHlwZW9mIGJ1Z3MgaW4gb2xkIHY4LFxuICAvLyBJRSAxMSAoIzE2MjEpLCBhbmQgaW4gU2FmYXJpIDggKCMxOTI5KS5cbiAgaWYgKHR5cGVvZiAvLi8gIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSW50OEFycmF5ICE9ICdvYmplY3QnKSB7XG4gICAgXy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTtcbiAgfTtcblxuICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IChOYU4gaXMgdGhlIG9ubHkgbnVtYmVyIHdoaWNoIGRvZXMgbm90IGVxdWFsIGl0c2VsZikuXG4gIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIG9iaiAhPT0gK29iajtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj9cbiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IG51bGw7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG4gIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG4gIH07XG5cbiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseVxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxuICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xuICB9O1xuXG4gIC8vIFV0aWxpdHkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0c1xuICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0ZWVzLlxuICBfLmlkZW50aXR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgLy8gUHJlZGljYXRlLWdlbmVyYXRpbmcgZnVuY3Rpb25zLiBPZnRlbiB1c2VmdWwgb3V0c2lkZSBvZiBVbmRlcnNjb3JlLlxuICBfLmNvbnN0YW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgfTtcblxuICBfLm5vb3AgPSBmdW5jdGlvbigpe307XG5cbiAgXy5wcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgLy8gR2VuZXJhdGVzIGEgZnVuY3Rpb24gZm9yIGEgZ2l2ZW4gb2JqZWN0IHRoYXQgcmV0dXJucyBhIGdpdmVuIHByb3BlcnR5LlxuICBfLnByb3BlcnR5T2YgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09IG51bGwgPyBmdW5jdGlvbigpe30gOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBwcmVkaWNhdGUgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBcbiAgLy8gYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ubWF0Y2hlciA9IF8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgYXR0cnMgPSBfLmV4dGVuZE93bih7fSwgYXR0cnMpO1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmlzTWF0Y2gob2JqLCBhdHRycyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSdW4gYSBmdW5jdGlvbiAqKm4qKiB0aW1lcy5cbiAgXy50aW1lcyA9IGZ1bmN0aW9uKG4sIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGFjY3VtID0gQXJyYXkoTWF0aC5tYXgoMCwgbikpO1xuICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGFjY3VtW2ldID0gaXRlcmF0ZWUoaSk7XG4gICAgcmV0dXJuIGFjY3VtO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIGFuZCBtYXggKGluY2x1c2l2ZSkuXG4gIF8ucmFuZG9tID0gZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICBpZiAobWF4ID09IG51bGwpIHtcbiAgICAgIG1heCA9IG1pbjtcbiAgICAgIG1pbiA9IDA7XG4gICAgfVxuICAgIHJldHVybiBtaW4gKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpO1xuICB9O1xuXG4gIC8vIEEgKHBvc3NpYmx5IGZhc3Rlcikgd2F5IHRvIGdldCB0aGUgY3VycmVudCB0aW1lc3RhbXAgYXMgYW4gaW50ZWdlci5cbiAgXy5ub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH07XG5cbiAgIC8vIExpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgZXNjYXBpbmcuXG4gIHZhciBlc2NhcGVNYXAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgICAnYCc6ICcmI3g2MDsnXG4gIH07XG4gIHZhciB1bmVzY2FwZU1hcCA9IF8uaW52ZXJ0KGVzY2FwZU1hcCk7XG5cbiAgLy8gRnVuY3Rpb25zIGZvciBlc2NhcGluZyBhbmQgdW5lc2NhcGluZyBzdHJpbmdzIHRvL2Zyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuICB2YXIgY3JlYXRlRXNjYXBlciA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHZhciBlc2NhcGVyID0gZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHJldHVybiBtYXBbbWF0Y2hdO1xuICAgIH07XG4gICAgLy8gUmVnZXhlcyBmb3IgaWRlbnRpZnlpbmcgYSBrZXkgdGhhdCBuZWVkcyB0byBiZSBlc2NhcGVkXG4gICAgdmFyIHNvdXJjZSA9ICcoPzonICsgXy5rZXlzKG1hcCkuam9pbignfCcpICsgJyknO1xuICAgIHZhciB0ZXN0UmVnZXhwID0gUmVnRXhwKHNvdXJjZSk7XG4gICAgdmFyIHJlcGxhY2VSZWdleHAgPSBSZWdFeHAoc291cmNlLCAnZycpO1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZyA9PSBudWxsID8gJycgOiAnJyArIHN0cmluZztcbiAgICAgIHJldHVybiB0ZXN0UmVnZXhwLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlcGxhY2VSZWdleHAsIGVzY2FwZXIpIDogc3RyaW5nO1xuICAgIH07XG4gIH07XG4gIF8uZXNjYXBlID0gY3JlYXRlRXNjYXBlcihlc2NhcGVNYXApO1xuICBfLnVuZXNjYXBlID0gY3JlYXRlRXNjYXBlcih1bmVzY2FwZU1hcCk7XG5cbiAgLy8gSWYgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBgcHJvcGVydHlgIGlzIGEgZnVuY3Rpb24gdGhlbiBpbnZva2UgaXQgd2l0aCB0aGVcbiAgLy8gYG9iamVjdGAgYXMgY29udGV4dDsgb3RoZXJ3aXNlLCByZXR1cm4gaXQuXG4gIF8ucmVzdWx0ID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgZmFsbGJhY2spIHtcbiAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHZvaWQgMCA6IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIHZhbHVlID0gZmFsbGJhY2s7XG4gICAgfVxuICAgIHJldHVybiBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZSAgICA6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xcc1xcU10rPyklPi9nXG4gIH07XG5cbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzXG4gIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcblxuICAvLyBDZXJ0YWluIGNoYXJhY3RlcnMgbmVlZCB0byBiZSBlc2NhcGVkIHNvIHRoYXQgdGhleSBjYW4gYmUgcHV0IGludG8gYVxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cbiAgdmFyIGVzY2FwZXMgPSB7XG4gICAgXCInXCI6ICAgICAgXCInXCIsXG4gICAgJ1xcXFwnOiAgICAgJ1xcXFwnLFxuICAgICdcXHInOiAgICAgJ3InLFxuICAgICdcXG4nOiAgICAgJ24nLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICB2YXIgZXNjYXBlciA9IC9cXFxcfCd8XFxyfFxcbnxcXHUyMDI4fFxcdTIwMjkvZztcblxuICB2YXIgZXNjYXBlQ2hhciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIGVzY2FwZXNbbWF0Y2hdO1xuICB9O1xuXG4gIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uXG4gIC8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSxcbiAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4gIC8vIE5COiBgb2xkU2V0dGluZ3NgIG9ubHkgZXhpc3RzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIHNldHRpbmdzLCBvbGRTZXR0aW5ncykge1xuICAgIGlmICghc2V0dGluZ3MgJiYgb2xkU2V0dGluZ3MpIHNldHRpbmdzID0gb2xkU2V0dGluZ3M7XG4gICAgc2V0dGluZ3MgPSBfLmRlZmF1bHRzKHt9LCBzZXR0aW5ncywgXy50ZW1wbGF0ZVNldHRpbmdzKTtcblxuICAgIC8vIENvbWJpbmUgZGVsaW1pdGVycyBpbnRvIG9uZSByZWd1bGFyIGV4cHJlc3Npb24gdmlhIGFsdGVybmF0aW9uLlxuICAgIHZhciBtYXRjaGVyID0gUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKGVzY2FwZXIsIGVzY2FwZUNoYXIpO1xuICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBlc2NhcGUgKyBcIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xcbidcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGV2YWx1YXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZSArIFwiXFxuX19wKz0nXCI7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZmVzdC5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS5cbiAgICBpZiAoIXNldHRpbmdzLnZhcmlhYmxlKSBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXG4nICsgc291cmNlICsgJ31cXG4nO1xuXG4gICAgc291cmNlID0gXCJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sXCIgK1xuICAgICAgXCJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xcblwiICtcbiAgICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xcbic7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIHJlbmRlciA9IG5ldyBGdW5jdGlvbihzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJywgJ18nLCBzb3VyY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB2YXIgYXJndW1lbnQgPSBzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJztcbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIGFyZ3VtZW50ICsgJyl7XFxuJyArIHNvdXJjZSArICd9JztcblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfTtcblxuICAvLyBBZGQgYSBcImNoYWluXCIgZnVuY3Rpb24uIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBpbnN0YW5jZSA9IF8ob2JqKTtcbiAgICBpbnN0YW5jZS5fY2hhaW4gPSB0cnVlO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcblxuICAvLyBPT1BcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0XG4gIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLlxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24oaW5zdGFuY2UsIG9iaikge1xuICAgIHJldHVybiBpbnN0YW5jZS5fY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajtcbiAgfTtcblxuICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubWl4aW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICBfLmVhY2goXy5mdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdO1xuICAgICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbdGhpcy5fd3JhcHBlZF07XG4gICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICBfLm1peGluKF8pO1xuXG4gIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLl93cmFwcGVkO1xuICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICAgIGlmICgobmFtZSA9PT0gJ3NoaWZ0JyB8fCBuYW1lID09PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG9ialswXTtcbiAgICAgIHJldHVybiByZXN1bHQodGhpcywgb2JqKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgXy5lYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVzdWx0KHRoaXMsIG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBFeHRyYWN0cyB0aGUgcmVzdWx0IGZyb20gYSB3cmFwcGVkIGFuZCBjaGFpbmVkIG9iamVjdC5cbiAgXy5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDtcbiAgfTtcblxuICAvLyBQcm92aWRlIHVud3JhcHBpbmcgcHJveHkgZm9yIHNvbWUgbWV0aG9kcyB1c2VkIGluIGVuZ2luZSBvcGVyYXRpb25zXG4gIC8vIHN1Y2ggYXMgYXJpdGhtZXRpYyBhbmQgSlNPTiBzdHJpbmdpZmljYXRpb24uXG4gIF8ucHJvdG90eXBlLnZhbHVlT2YgPSBfLnByb3RvdHlwZS50b0pTT04gPSBfLnByb3RvdHlwZS52YWx1ZTtcbiAgXG4gIF8ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5fd3JhcHBlZDtcbiAgfTtcblxuICAvLyBBTUQgcmVnaXN0cmF0aW9uIGhhcHBlbnMgYXQgdGhlIGVuZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIEFNRCBsb2FkZXJzXG4gIC8vIHRoYXQgbWF5IG5vdCBlbmZvcmNlIG5leHQtdHVybiBzZW1hbnRpY3Mgb24gbW9kdWxlcy4gRXZlbiB0aG91Z2ggZ2VuZXJhbFxuICAvLyBwcmFjdGljZSBmb3IgQU1EIHJlZ2lzdHJhdGlvbiBpcyB0byBiZSBhbm9ueW1vdXMsIHVuZGVyc2NvcmUgcmVnaXN0ZXJzXG4gIC8vIGFzIGEgbmFtZWQgbW9kdWxlIGJlY2F1c2UsIGxpa2UgalF1ZXJ5LCBpdCBpcyBhIGJhc2UgbGlicmFyeSB0aGF0IGlzXG4gIC8vIHBvcHVsYXIgZW5vdWdoIHRvIGJlIGJ1bmRsZWQgaW4gYSB0aGlyZCBwYXJ0eSBsaWIsIGJ1dCBub3QgYmUgcGFydCBvZlxuICAvLyBhbiBBTUQgbG9hZCByZXF1ZXN0LiBUaG9zZSBjYXNlcyBjb3VsZCBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGFuXG4gIC8vIGFub255bW91cyBkZWZpbmUoKSBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGxvYWRlciByZXF1ZXN0LlxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKCd1bmRlcnNjb3JlJywgW10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRRdWV1ZTtcbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgdmFyIGkgPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgICAgICAgICAgY3VycmVudFF1ZXVlW2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xufVxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICBxdWV1ZS5wdXNoKGZ1bik7XG4gICAgaWYgKCFkcmFpbmluZykge1xuICAgICAgICBzZXRUaW1lb3V0KGRyYWluUXVldWUsIDApO1xuICAgIH1cbn07XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwibW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9e1xuICBcIm5hbWVcIjogXCJyZWFkaXVtXCIsXG4gIFwidmVyc2lvblwiOiBcIjAuMC4xXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJyZWFkaXVtXCIsXG4gIFwibWFpblwiOiBcInNyYy9pbmRleC5qc1wiLFxuICBcInJlYWRtZVwiOiBcIlJFQURNRS5tZFwiLFxuICBcImtleXdvcmRzXCI6IFtcInJlYWRpdW1cIiwgXCJobWhcIl0sXG4gIFwicmVwb3NpdG9yeVwiOiBcIlRPRE9cIixcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYmFja2JvbmVcIjogXCJeMS4xLjJcIixcbiAgICBcImVwdWItY2ZpXCI6IFwiXjAuMC4xXCIsXG4gICAgXCJqcXVlcnlcIjogXCJeMi4xLjNcIixcbiAgICBcInJhbmd5XCI6IFwiXjEuMy4wLWFscGhhLjIwMTQwOTIxXCIsXG4gICAgXCJ1bmRlcnNjb3JlXCI6IFwiXjEuNy4wXCIsXG4gICAgXCJVUklqc1wiOiBcIl4xLjE0LjFcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJicm93c2VyaWZ5XCI6IFwiXjguMS4xXCIsXG4gICAgXCJlbnZpZnlcIjogXCJeMy4yLjBcIixcbiAgICBcImxpdmVyZWxvYWRpZnlcIjogXCJeMi4wLjBcIixcbiAgICBcIm5vZGUtc3RhdGljXCI6IFwiXjAuNy42XCIsXG4gICAgXCJ1Z2xpZnktanNcIjogXCJ+Mi40LjE2XCIsXG4gICAgXCJ3YXRjaGlmeVwiOiBcIl4yLjIuMVwiXG4gIH0sXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJidWlsZFwiOiAgICAgIFwiTk9ERV9FTlY9cHJvZHVjdGlvbiBicm93c2VyaWZ5IHNyYy9hcHAuanMgPiAuL2Rpc3QvcmVhZGl1bS5qcyAmJiB1Z2xpZnlqcyAuL2Rpc3QvcmVhZGl1bS5qcyAtY20gPiAuL2Rpc3QvcmVhZGl1bS5taW4uanNcIixcbiAgICBcImxpdmVyZWxvYWRcIjogXCJsaXZlcmVsb2FkaWZ5IC4vcHVibGljXCIsXG4gICAgXCJzdGFydFwiOiBcIm5wbSBydW4gd2F0Y2ggJiBucG0gcnVuIGxpdmVyZWxvYWQgJiBucG0gcnVuIHN0YXRpY1wiLFxuICAgIFwic3RhdGljXCI6IFwic3RhdGljIC4vcHVibGljIC0tcG9ydCAzMDAwXCIsXG4gICAgXCJ0ZXN0XCI6IFwiamVzdFwiLFxuICAgIFwid2F0Y2hcIjogXCJ3YXRjaGlmeSAtbyAuL3B1YmxpYy9yZWFkaXVtLmpzIC12IC1kIHNyYy9hcHAuanNcIlxuICB9LFxuICBcImF1dGhvclwiOiBcIkRhcsOtbyBKYXZpZXIgQ3JhdmVybyA8ZGFyaW8uY3JhdmVyb0BobWhjby5jb20+XCIsXG4gIFwibGljZW5zZVwiOiBcIlRCRFwiLFxuICBcImJyb3dzZXJpZnlcIjoge1xuICAgIFwidHJhbnNmb3JtXCI6IFtcbiAgICAgIFwiZW52aWZ5XCJcbiAgICBdXG4gIH1cbn1cbiIsInZhciBSZWFkaXVtID0gcmVxdWlyZSgnLi9pbmRleCcpXG5cbnZhciByZWFkZXIgPSBuZXcgUmVhZGl1bS5SZWFkZXIoe1xuICB1c2VTaW1wbGVMb2FkZXI6IHRydWVcbn0sIHtcbiAgZWw6ICcjcmVhZGl1bS1jb250YWluZXInXG59KVxuXG4vLyAgaHR0cHM6Ly9naXRodWIuY29tL3JlYWRpdW0vcmVhZGl1bS1qcy12aWV3ZXIvYmxvYi9tYXN0ZXIvbGliL0VwdWJSZWFkZXIuanMjTDY0My1MNzkyXG4vLyAgUmVhZGl1bS5SZWFkZXIucmVhZGl1bU9wdGlvbnMge1xuLy8gICAgdXNlU2ltcGxlTG9hZGVyOiB0cnVlLCAvKiB0cnVlIHRvIGxvYWQgZnJvbSBhbiBleHBhbmRlZCBlUHViOyBmYWxzZSB0byB1bnBhY2sgaXQgb24gdGhlIGZseSAqL1xuLy8gICAganNMaWJSb290OiAnL3BhdGgvdG8vdGhpcmQvcGFydHknLFxuLy8gICAgb3BlbkJvb2tPcHRpb25zOiB7fSAvKiBUT0RPIERlZmluZSAqL1xuLy8gIH1cbi8vXG4vLyAgUmVhZGl1bS5SZWFkZXIucmVhZGVyT3B0aW9ucyB7XG4vLyAgICBhbm5vdGF0aW9uc0NTU1VybDogJy9wYXRoL3RvL2ZpbGUuY3NzJyxcbi8vICAgIGVsOiAnI2lkJywgLyogRE9NIHNlbGVjdG9yICovXG4vLyAgfVxuXG52YXIgVVJJID0gcmVxdWlyZSgnVVJJanMnKTtcblxudmFyIHBhcnNlciA9IG5ldyAocmVxdWlyZSgnLi4vbGliL2VwdWJqcy9wYXJzZXInKSk7XG5cbnJlYWRlci5vcGVuUGFja2FnZURvY3VtZW50KCdkZW1vLWJvb2snLCBmdW5jdGlvbiBvbk9wZW5QYWNrYWdlRG9jdW1lbnQocGFja2FnZURvY3VtZW50LCBvcHRpb25zKSB7XG4gIHBhY2thZ2VEb2N1bWVudC5nZXRUb2NEb20oZnVuY3Rpb24oaHRtbCkge1xuICAgIHZhciB0b2MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9jJyk7XG5cbiAgICAvLyBHZXQgYSBwcm9wZXIgVE9DIG9iamVjdCB0aHJvdWdoIEVQVUJKUycgcGFyc2VyLlxuICAgIGNvbnNvbGUubG9nKCd0b2MnLCBwYXJzZXIubmF2KGh0bWwsIHt9LCB7fSkpO1xuXG4gICAgdG9jLmlubmVySFRNTCA9IGh0bWwuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5pbm5lckhUTUw7XG5cbiAgICB0b2MuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIHVyaSA9IFVSSShldmVudC50YXJnZXQuaHJlZikucGF0aCgpLnJlcGxhY2UoL15cXC8vLCAnJyk7XG4gICAgICAgICAgcmVhZGVyLnJlYWRlci5vcGVuQ29udGVudFVybCh1cmkpO1xuICAgICAgfVxuICAgIH0sIHRydWUpO1xuICB9KTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGVmdC1wYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgIHJlYWRlci5yZWFkZXIub3BlblBhZ2VMZWZ0KCk7XG4gIH0sIGZhbHNlKTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JpZ2h0LXBhZ2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmVhZGVyLnJlYWRlci5vcGVuUGFnZVJpZ2h0KCk7XG4gIH0sIGZhbHNlKTtcblxuICBpZiAocHJvY2Vzcy5lbnYubm9kZV9lbnYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdpbmRvdy5yZWFkaXVtUGFja2FnZURvY3VtZW50ID0gcGFja2FnZURvY3VtZW50O1xuICAgIHdpbmRvdy5yZWFkaXVtT3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYubm9kZV9lbnYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3aW5kb3cucmVhZGl1bVJlYWRlciA9IHJlYWRlcjtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG52YXIgQm9va21hcmtWaWV3ID0gcmVxdWlyZSgnLi9ib29rbWFyay12aWV3JylcbnZhciBIaWdobGlnaHRHcm91cCA9IHJlcXVpcmUoJy4vaGlnaGxpZ2h0LWdyb3VwJylcbnZhciBJbWFnZUFubm90YXRpb24gPSByZXF1aXJlKCcuL2ltYWdlLWFubm90YXRpb24nKVxudmFyIFVuZGVybGluZUdyb3VwID0gcmVxdWlyZSgnLi91bmRlcmxpbmUtZ3JvdXAnKVxuXG52YXIgQW5ub3RhdGlvbnMgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuXG4gIGRlZmF1bHRzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJib29rbWFya1ZpZXdzXCI6IFtdLFxuICAgICAgXCJoaWdobGlnaHRzXCI6IFtdLFxuICAgICAgXCJtYXJrZXJzXCI6IHt9LFxuICAgICAgXCJ1bmRlcmxpbmVzXCI6IFtdLFxuICAgICAgXCJpbWFnZUFubm90YXRpb25zXCI6IFtdLFxuICAgICAgXCJhbm5vdGF0aW9uSGFzaFwiOiB7fSxcbiAgICAgIFwib2Zmc2V0VG9wQWRkaXRpb25cIjogMCxcbiAgICAgIFwib2Zmc2V0TGVmdEFkZGl0aW9uXCI6IDAsXG4gICAgICBcInJlYWRlckJvdW5kRWxlbWVudFwiOiB1bmRlZmluZWRcbiAgICB9O1xuICB9LFxuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHt9LFxuXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgXy5lYWNoKHRoaXMuZ2V0KFwiaGlnaGxpZ2h0c1wiKSwgZnVuY3Rpb24oaGlnaGxpZ2h0R3JvdXApIHtcbiAgICAgIGhpZ2hsaWdodEdyb3VwLnJlbW92ZSgpO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlZHJhd0Fubm90YXRpb25zOiBmdW5jdGlvbihvZmZzZXRUb3AsIG9mZnNldExlZnQpIHtcblxuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAvLyBIaWdobGlnaHRzXG4gICAgXy5lYWNoKHRoaXMuZ2V0KFwiaGlnaGxpZ2h0c1wiKSwgZnVuY3Rpb24oaGlnaGxpZ2h0R3JvdXApIHtcbiAgICAgIGhpZ2hsaWdodEdyb3VwLnJlc2V0SGlnaGxpZ2h0cyh0aGF0LmdldChcInJlYWRlckJvdW5kRWxlbWVudFwiKSwgb2Zmc2V0VG9wLCBvZmZzZXRMZWZ0KTtcbiAgICB9KTtcblxuICAgIC8vIEJvb2ttYXJrc1xuICAgIF8uZWFjaCh0aGlzLmdldChcImJvb2ttYXJrVmlld3NcIiksIGZ1bmN0aW9uKGJvb2ttYXJrVmlldykge1xuICAgICAgYm9va21hcmtWaWV3LnJlc2V0Qm9va21hcmsob2Zmc2V0VG9wLCBvZmZzZXRMZWZ0KTtcbiAgICB9KTtcblxuICAgIC8vIFVuZGVybGluZXNcbiAgICBfLmVhY2godGhpcy5nZXQoXCJ1bmRlcmxpbmVzXCIpLCBmdW5jdGlvbih1bmRlcmxpbmVHcm91cCkge1xuICAgICAgdW5kZXJsaW5lR3JvdXAucmVzZXRVbmRlcmxpbmVzKHRoYXQuZ2V0KFwicmVhZGVyQm91bmRFbGVtZW50XCIpLCBvZmZzZXRUb3AsIG9mZnNldExlZnQpO1xuICAgIH0pO1xuICB9LFxuXG4gIGdldEJvb2ttYXJrOiBmdW5jdGlvbihpZCkge1xuXG4gICAgdmFyIGJvb2ttYXJrVmlldyA9IHRoaXMuZ2V0KFwiYW5ub3RhdGlvbkhhc2hcIilbaWRdO1xuICAgIGlmIChib29rbWFya1ZpZXcpIHtcbiAgICAgIHJldHVybiBib29rbWFya1ZpZXcuYm9va21hcmsudG9JbmZvKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuXG4gIGdldEhpZ2hsaWdodDogZnVuY3Rpb24oaWQpIHtcblxuICAgIHZhciBoaWdobGlnaHQgPSB0aGlzLmdldChcImFubm90YXRpb25IYXNoXCIpW2lkXTtcbiAgICBpZiAoaGlnaGxpZ2h0KSB7XG4gICAgICByZXR1cm4gaGlnaGxpZ2h0LnRvSW5mbygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcblxuICBnZXRVbmRlcmxpbmU6IGZ1bmN0aW9uKGlkKSB7XG5cbiAgICB2YXIgdW5kZXJsaW5lID0gdGhpcy5nZXQoXCJhbm5vdGF0aW9uSGFzaFwiKVtpZF07XG4gICAgaWYgKHVuZGVybGluZSkge1xuICAgICAgcmV0dXJuIHVuZGVybGluZS50b0luZm8oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0Qm9va21hcmtzOiBmdW5jdGlvbigpIHtcblxuICAgIHZhciBib29rbWFya3MgPSBbXTtcbiAgICBfLmVhY2godGhpcy5nZXQoXCJib29rbWFya1ZpZXdzXCIpLCBmdW5jdGlvbihib29rbWFya1ZpZXcpIHtcblxuICAgICAgYm9va21hcmtzLnB1c2goYm9va21hcmtWaWV3LmJvb2ttYXJrLnRvSW5mbygpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYm9va21hcmtzO1xuICB9LFxuXG4gIGdldEhpZ2hsaWdodHM6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGhpZ2hsaWdodHMgPSBbXTtcbiAgICBfLmVhY2godGhpcy5nZXQoXCJoaWdobGlnaHRzXCIpLCBmdW5jdGlvbihoaWdobGlnaHQpIHtcblxuICAgICAgaGlnaGxpZ2h0cy5wdXNoKGhpZ2hsaWdodC50b0luZm8oKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGhpZ2hsaWdodHM7XG4gIH0sXG5cbiAgZ2V0VW5kZXJsaW5lczogZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgdW5kZXJsaW5lcyA9IFtdO1xuICAgIF8uZWFjaCh0aGlzLmdldChcInVuZGVybGluZXNcIiksIGZ1bmN0aW9uKHVuZGVybGluZSkge1xuXG4gICAgICB1bmRlcmxpbmVzLnB1c2godW5kZXJsaW5lLnRvSW5mbygpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdW5kZXJsaW5lcztcbiAgfSxcblxuICBnZXRJbWFnZUFubm90YXRpb25zOiBmdW5jdGlvbigpIHtcblxuICAgIHZhciBpbWFnZUFubm90YXRpb25zID0gW107XG4gICAgXy5lYWNoKHRoaXMuZ2V0KFwiaW1hZ2VBbm5vdGF0aW9uc1wiKSwgZnVuY3Rpb24oaW1hZ2VBbm5vdGF0aW9uKSB7XG5cbiAgICAgIGltYWdlQW5ub3RhdGlvbnMucHVzaChpbWFnZUFubm90YXRpb24udG9JbmZvKCkpO1xuICAgIH0pO1xuICAgIHJldHVybiBpbWFnZUFubm90YXRpb25zO1xuICB9LFxuXG4gIGFkZEJvb2ttYXJrOiBmdW5jdGlvbihDRkksIHRhcmdldEVsZW1lbnQsIGFubm90YXRpb25JZCwgb2Zmc2V0VG9wLCBvZmZzZXRMZWZ0LCB0eXBlKSB7XG5cbiAgICBpZiAoIW9mZnNldFRvcCkge1xuICAgICAgb2Zmc2V0VG9wID0gdGhpcy5nZXQoXCJvZmZzZXRUb3BBZGRpdGlvblwiKTtcbiAgICB9XG4gICAgaWYgKCFvZmZzZXRMZWZ0KSB7XG4gICAgICBvZmZzZXRMZWZ0ID0gdGhpcy5nZXQoXCJvZmZzZXRMZWZ0QWRkaXRpb25cIik7XG4gICAgfVxuXG4gICAgYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbklkLnRvU3RyaW5nKCk7XG4gICAgdGhpcy52YWxpZGF0ZUFubm90YXRpb25JZChhbm5vdGF0aW9uSWQpO1xuXG4gICAgdmFyIGJvb2ttYXJrVmlldyA9IG5ldyBCb29rbWFya1ZpZXcoe1xuICAgICAgQ0ZJOiBDRkksXG4gICAgICB0YXJnZXRFbGVtZW50OiB0YXJnZXRFbGVtZW50LFxuICAgICAgb2Zmc2V0VG9wQWRkaXRpb246IG9mZnNldFRvcCxcbiAgICAgIG9mZnNldExlZnRBZGRpdGlvbjogb2Zmc2V0TGVmdCxcbiAgICAgIGlkOiBhbm5vdGF0aW9uSWQudG9TdHJpbmcoKSxcbiAgICAgIGJiUGFnZVNldFZpZXc6IHRoaXMuZ2V0KFwiYmJQYWdlU2V0Vmlld1wiKSxcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9KTtcbiAgICB0aGlzLmdldChcImFubm90YXRpb25IYXNoXCIpW2Fubm90YXRpb25JZF0gPSBib29rbWFya1ZpZXc7XG4gICAgdGhpcy5nZXQoXCJib29rbWFya1ZpZXdzXCIpLnB1c2goYm9va21hcmtWaWV3KTtcbiAgICAkKHRoaXMuZ2V0KFwicmVhZGVyQm91bmRFbGVtZW50XCIpKS5hcHBlbmQoYm9va21hcmtWaWV3LnJlbmRlcigpKTtcbiAgfSxcblxuICByZW1vdmVIaWdobGlnaHQ6IGZ1bmN0aW9uKGFubm90YXRpb25JZCkge1xuICAgIHZhciBhbm5vdGF0aW9uSGFzaCA9IHRoaXMuZ2V0KFwiYW5ub3RhdGlvbkhhc2hcIik7XG4gICAgdmFyIGhpZ2hsaWdodHMgPSB0aGlzLmdldChcImhpZ2hsaWdodHNcIik7XG4gICAgdmFyIG1hcmtlcnMgPSB0aGlzLmdldChcIm1hcmtlcnNcIik7XG5cbiAgICBpZiAoIW1hcmtlcnNbYW5ub3RhdGlvbklkXSlcbiAgICAgIHJldHVybjtcblxuICAgIHZhciBzdGFydE1hcmtlciA9IG1hcmtlcnNbYW5ub3RhdGlvbklkXS5zdGFydE1hcmtlcjtcbiAgICB2YXIgZW5kTWFya2VyID0gbWFya2Vyc1thbm5vdGF0aW9uSWRdLmVuZE1hcmtlcjtcblxuICAgIHN0YXJ0TWFya2VyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3RhcnRNYXJrZXIpO1xuICAgIGVuZE1hcmtlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVuZE1hcmtlcik7XG5cbiAgICBkZWxldGUgbWFya2Vyc1thbm5vdGF0aW9uSWRdO1xuXG4gICAgZGVsZXRlIGFubm90YXRpb25IYXNoW2Fubm90YXRpb25JZF07XG5cbiAgICBoaWdobGlnaHRzID0gXy5yZWplY3QoaGlnaGxpZ2h0cyxcbiAgICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICBpZiAob2JqLmlkID09IGFubm90YXRpb25JZCkge1xuICAgICAgICAgIG9iai5kZXN0cm95Q3VycmVudEhpZ2hsaWdodHMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG5cbiAgICB0aGlzLnNldChcImhpZ2hsaWdodHNcIiwgaGlnaGxpZ2h0cyk7XG4gIH0sXG5cbiAgYWRkSGlnaGxpZ2h0OiBmdW5jdGlvbihDRkksIGhpZ2hsaWdodGVkVGV4dE5vZGVzLCBhbm5vdGF0aW9uSWQsIG9mZnNldFRvcCwgb2Zmc2V0TGVmdCwgc3RhcnRNYXJrZXIsIGVuZE1hcmtlciwgc3R5bGVzKSB7XG4gICAgaWYgKCFvZmZzZXRUb3ApIHtcbiAgICAgIG9mZnNldFRvcCA9IHRoaXMuZ2V0KFwib2Zmc2V0VG9wQWRkaXRpb25cIik7XG4gICAgfVxuICAgIGlmICghb2Zmc2V0TGVmdCkge1xuICAgICAgb2Zmc2V0TGVmdCA9IHRoaXMuZ2V0KFwib2Zmc2V0TGVmdEFkZGl0aW9uXCIpO1xuICAgIH1cblxuICAgIGFubm90YXRpb25JZCA9IGFubm90YXRpb25JZC50b1N0cmluZygpO1xuICAgIHRoaXMudmFsaWRhdGVBbm5vdGF0aW9uSWQoYW5ub3RhdGlvbklkKTtcblxuICAgIHZhciBoaWdobGlnaHRHcm91cCA9IG5ldyBIaWdobGlnaHRHcm91cCh7XG4gICAgICBDRkk6IENGSSxcbiAgICAgIHNlbGVjdGVkTm9kZXM6IGhpZ2hsaWdodGVkVGV4dE5vZGVzLFxuICAgICAgb2Zmc2V0VG9wQWRkaXRpb246IG9mZnNldFRvcCxcbiAgICAgIG9mZnNldExlZnRBZGRpdGlvbjogb2Zmc2V0TGVmdCxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgaWQ6IGFubm90YXRpb25JZCxcbiAgICAgIGJiUGFnZVNldFZpZXc6IHRoaXMuZ2V0KFwiYmJQYWdlU2V0Vmlld1wiKSxcbiAgICAgIHNjYWxlOiB0aGlzLmdldChcInNjYWxlXCIpXG4gICAgfSk7XG4gICAgdGhpcy5nZXQoXCJhbm5vdGF0aW9uSGFzaFwiKVthbm5vdGF0aW9uSWRdID0gaGlnaGxpZ2h0R3JvdXA7XG4gICAgdGhpcy5nZXQoXCJoaWdobGlnaHRzXCIpLnB1c2goaGlnaGxpZ2h0R3JvdXApO1xuICAgIHRoaXMuZ2V0KFwibWFya2Vyc1wiKVthbm5vdGF0aW9uSWRdID0ge1xuICAgICAgXCJzdGFydE1hcmtlclwiOiBzdGFydE1hcmtlcixcbiAgICAgIFwiZW5kTWFya2VyXCI6IGVuZE1hcmtlclxuICAgIH07XG4gICAgaGlnaGxpZ2h0R3JvdXAucmVuZGVySGlnaGxpZ2h0cyh0aGlzLmdldChcInJlYWRlckJvdW5kRWxlbWVudFwiKSk7XG4gIH0sXG5cbiAgYWRkVW5kZXJsaW5lOiBmdW5jdGlvbihDRkksIHVuZGVybGluZWRUZXh0Tm9kZXMsIGFubm90YXRpb25JZCwgb2Zmc2V0VG9wLCBvZmZzZXRMZWZ0LCBzdHlsZXMpIHtcblxuICAgIGlmICghb2Zmc2V0VG9wKSB7XG4gICAgICBvZmZzZXRUb3AgPSB0aGlzLmdldChcIm9mZnNldFRvcEFkZGl0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAoIW9mZnNldExlZnQpIHtcbiAgICAgIG9mZnNldExlZnQgPSB0aGlzLmdldChcIm9mZnNldExlZnRBZGRpdGlvblwiKTtcbiAgICB9XG5cbiAgICBhbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uSWQudG9TdHJpbmcoKTtcbiAgICB0aGlzLnZhbGlkYXRlQW5ub3RhdGlvbklkKGFubm90YXRpb25JZCk7XG5cbiAgICB2YXIgdW5kZXJsaW5lR3JvdXAgPSBuZXcgVW5kZXJsaW5lR3JvdXAoe1xuICAgICAgQ0ZJOiBDRkksXG4gICAgICBzZWxlY3RlZE5vZGVzOiB1bmRlcmxpbmVkVGV4dE5vZGVzLFxuICAgICAgb2Zmc2V0VG9wQWRkaXRpb246IG9mZnNldFRvcCxcbiAgICAgIG9mZnNldExlZnRBZGRpdGlvbjogb2Zmc2V0TGVmdCxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgaWQ6IGFubm90YXRpb25JZCxcbiAgICAgIGJiUGFnZVNldFZpZXc6IHRoaXMuZ2V0KFwiYmJQYWdlU2V0Vmlld1wiKVxuICAgIH0pO1xuICAgIHRoaXMuZ2V0KFwiYW5ub3RhdGlvbkhhc2hcIilbYW5ub3RhdGlvbklkXSA9IHVuZGVybGluZUdyb3VwO1xuICAgIHRoaXMuZ2V0KFwidW5kZXJsaW5lc1wiKS5wdXNoKHVuZGVybGluZUdyb3VwKTtcbiAgICB1bmRlcmxpbmVHcm91cC5yZW5kZXJVbmRlcmxpbmVzKHRoaXMuZ2V0KFwicmVhZGVyQm91bmRFbGVtZW50XCIpKTtcbiAgfSxcblxuICBhZGRJbWFnZUFubm90YXRpb246IGZ1bmN0aW9uKENGSSwgaW1hZ2VOb2RlLCBhbm5vdGF0aW9uSWQpIHtcblxuICAgIGFubm90YXRpb25JZCA9IGFubm90YXRpb25JZC50b1N0cmluZygpO1xuICAgIHRoaXMudmFsaWRhdGVBbm5vdGF0aW9uSWQoYW5ub3RhdGlvbklkKTtcblxuICAgIHZhciBpbWFnZUFubm90YXRpb24gPSBuZXcgSW1hZ2VBbm5vdGF0aW9uKHtcbiAgICAgIENGSTogQ0ZJLFxuICAgICAgaW1hZ2VOb2RlOiBpbWFnZU5vZGUsXG4gICAgICBpZDogYW5ub3RhdGlvbklkLFxuICAgICAgYmJQYWdlU2V0VmlldzogdGhpcy5nZXQoXCJiYlBhZ2VTZXRWaWV3XCIpXG4gICAgfSk7XG4gICAgdGhpcy5nZXQoXCJhbm5vdGF0aW9uSGFzaFwiKVthbm5vdGF0aW9uSWRdID0gaW1hZ2VBbm5vdGF0aW9uO1xuICAgIHRoaXMuZ2V0KFwiaW1hZ2VBbm5vdGF0aW9uc1wiKS5wdXNoKGltYWdlQW5ub3RhdGlvbik7XG4gICAgaW1hZ2VBbm5vdGF0aW9uLnJlbmRlcigpO1xuICB9LFxuXG4gIHVwZGF0ZUFubm90YXRpb25WaWV3OiBmdW5jdGlvbihpZCwgc3R5bGVzKSB7XG4gICAgdmFyIGFubm90YXRpb25WaWV3cyA9IHRoaXMuZ2V0KFwiYW5ub3RhdGlvbkhhc2hcIilbaWRdO1xuXG4gICAgYW5ub3RhdGlvblZpZXdzLnNldFN0eWxlcyhzdHlsZXMpO1xuXG4gICAgcmV0dXJuIGFubm90YXRpb25WaWV3cztcbiAgfSxcblxuICAvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IFNvbWUga2luZCBvZiBoYXNoIGxvb2t1cCB3b3VsZCBiZSBtb3JlIGVmZmljaWVudCBoZXJlLCBtaWdodCB3YW50IHRvIFxuICAvLyAgIGNoYW5nZSB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIGFubm90YXRpb25zIGFzIGFuIGFycmF5XG4gIHZhbGlkYXRlQW5ub3RhdGlvbklkOiBmdW5jdGlvbihpZCkge1xuXG4gICAgaWYgKHRoaXMuZ2V0KFwiYW5ub3RhdGlvbkhhc2hcIilbaWRdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGF0IGFubm90YXRpb24gaWQgYWxyZWFkeSBleGlzdHM7IGFubm90YXRpb24gbm90IGFkZGVkXCIpO1xuICAgIH1cbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQW5ub3RhdGlvbnMiLCJ2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG52YXIgQm9va21hcmsgPSByZXF1aXJlKCcuL2Jvb2ttYXJrJylcblxudmFyIEJvb2ttYXJrVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcblxuICBlbDogXCI8ZGl2PjwvZGl2PlwiLFxuXG4gIGV2ZW50czoge1xuICAgIFwibW91c2VlbnRlclwiOiBcInNldEhvdmVyQm9va21hcmtcIixcbiAgICBcIm1vdXNlbGVhdmVcIjogXCJzZXRCYXNlQm9va21hcmtcIixcbiAgICBcImNsaWNrXCI6IFwiY2xpY2tIYW5kbGVyXCJcbiAgfSxcblxuICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cbiAgICB0aGlzLmJvb2ttYXJrID0gbmV3IEJvb2ttYXJrKHtcbiAgICAgIENGSTogb3B0aW9ucy5DRkksXG4gICAgICB0YXJnZXRFbGVtZW50OiBvcHRpb25zLnRhcmdldEVsZW1lbnQsXG4gICAgICBvZmZzZXRUb3BBZGRpdGlvbjogb3B0aW9ucy5vZmZzZXRUb3BBZGRpdGlvbixcbiAgICAgIG9mZnNldExlZnRBZGRpdGlvbjogb3B0aW9ucy5vZmZzZXRMZWZ0QWRkaXRpb24sXG4gICAgICBpZDogb3B0aW9ucy5pZCxcbiAgICAgIGJiUGFnZVNldFZpZXc6IG9wdGlvbnMuYmJQYWdlU2V0VmlldyxcbiAgICAgIHR5cGU6IG9wdGlvbnMudHlwZVxuICAgIH0pO1xuICB9LFxuXG4gIHJlc2V0Qm9va21hcms6IGZ1bmN0aW9uKG9mZnNldFRvcCwgb2Zmc2V0TGVmdCkge1xuXG4gICAgaWYgKG9mZnNldFRvcCkge1xuICAgICAgdGhpcy5ib29rbWFyay5zZXQoe1xuICAgICAgICBvZmZzZXRUb3BBZGRpdGlvbjogb2Zmc2V0VG9wXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0TGVmdCkge1xuICAgICAgdGhpcy5ib29rbWFyay5zZXQoe1xuICAgICAgICBvZmZzZXRMZWZ0QWRkaXRpb246IG9mZnNldExlZnRcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnNldENTUygpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cbiAgICB0aGlzLnNldENTUygpO1xuICAgIHJldHVybiB0aGlzLmVsO1xuICB9LFxuXG4gIHNldENTUzogZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgYWJzb2x1dGVUb3A7XG4gICAgdmFyIGFic29sdXRlTGVmdDtcblxuICAgIGlmICh0aGlzLmJvb2ttYXJrLmdldChcInR5cGVcIikgPT09IFwiY29tbWVudFwiKSB7XG4gICAgICBhYnNvbHV0ZVRvcCA9IHRoaXMuYm9va21hcmsuZ2V0QWJzb2x1dGVUb3AoKTtcbiAgICAgIGFic29sdXRlTGVmdCA9IHRoaXMuYm9va21hcmsuZ2V0QWJzb2x1dGVMZWZ0KCk7XG4gICAgICB0aGlzLiRlbC5jc3Moe1xuICAgICAgICBcInRvcFwiOiBhYnNvbHV0ZVRvcCArIFwicHhcIixcbiAgICAgICAgXCJsZWZ0XCI6IGFic29sdXRlTGVmdCArIFwicHhcIixcbiAgICAgICAgXCJ3aWR0aFwiOiBcIjUwcHhcIixcbiAgICAgICAgXCJoZWlnaHRcIjogXCI1MHB4XCIsXG4gICAgICAgIFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiXG4gICAgICB9KTtcbiAgICAgIHRoaXMuJGVsLmFkZENsYXNzKFwiY29tbWVudFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJib29rbWFya1wiKTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0SG92ZXJCb29rbWFyazogZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmICh0aGlzLiRlbC5oYXNDbGFzcyhcImNvbW1lbnRcIikpIHtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNsYXNzKFwiY29tbWVudFwiKTtcbiAgICAgIHRoaXMuJGVsLmFkZENsYXNzKFwiaG92ZXItY29tbWVudFwiKTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0QmFzZUJvb2ttYXJrOiBmdW5jdGlvbihldmVudCkge1xuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKHRoaXMuJGVsLmhhc0NsYXNzKFwiaG92ZXItY29tbWVudFwiKSkge1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2xhc3MoXCJob3Zlci1jb21tZW50XCIpO1xuICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJjb21tZW50XCIpO1xuICAgIH1cbiAgfSxcblxuICBjbGlja0hhbmRsZXI6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgdHlwZTtcbiAgICBpZiAodGhpcy5ib29rbWFyay5nZXQoXCJ0eXBlXCIpID09PSBcImNvbW1lbnRcIikge1xuICAgICAgdHlwZSA9IFwiY29tbWVudFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gXCJib29rbWFya1wiO1xuICAgIH1cblxuICAgIHRoaXMuYm9va21hcmsuZ2V0KFwiYmJQYWdlU2V0Vmlld1wiKS50cmlnZ2VyKFwiYW5ub3RhdGlvbkNsaWNrZWRcIixcbiAgICAgIHR5cGUsXG4gICAgICB0aGlzLmJvb2ttYXJrLmdldChcIkNGSVwiKSxcbiAgICAgIHRoaXMuYm9va21hcmsuZ2V0KFwiaWRcIiksXG4gICAgICB0aGlzLiRlbC5jc3MoXCJ0b3BcIiksXG4gICAgICB0aGlzLiRlbC5jc3MoXCJsZWZ0XCIpLFxuICAgICAgZXZlbnRcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb29rbWFya1ZpZXciLCJ2YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG5cbnZhciBCb29rbWFyayA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gIGRlZmF1bHRzOiB7XG4gICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXG4gICAgXCJib29rbWFya0NlbnRlcmluZ0FkanVzdG1lbnRcIjogMTUsXG4gICAgXCJib29rbWFya1RvcEFkanVzdG1lbnRcIjogNDVcbiAgfSxcblxuICBpbml0aWFsaXplOiBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7XG5cbiAgICAvLyBGaWd1cmUgb3V0IHRoZSB0b3AgYW5kIGxlZnQgb2YgdGhlIGJvb2ttYXJrXG4gICAgLy8gVGhpcyBzaG91bGQgaW5jbHVkZSB0aGUgYWRkaXRpb25hbCBvZmZzZXQgcHJvdmlkZWQgYnkgdGhlIGFubm90YXRpb25zIG9iamVjdFxuICB9LFxuXG4gIGdldEFic29sdXRlVG9wOiBmdW5jdGlvbigpIHtcblxuICAgIHZhciB0YXJnZXRFbGVtZW50VG9wID0gJCh0aGlzLmdldChcInRhcmdldEVsZW1lbnRcIikpLm9mZnNldCgpLnRvcDtcbiAgICB2YXIgYm9va21hcmtBYnNvbHV0ZVRvcCA9IHRoaXMuZ2V0KFwib2Zmc2V0VG9wQWRkaXRpb25cIikgKyB0YXJnZXRFbGVtZW50VG9wIC0gdGhpcy5nZXQoXCJib29rbWFya1RvcEFkanVzdG1lbnRcIik7XG4gICAgcmV0dXJuIGJvb2ttYXJrQWJzb2x1dGVUb3A7XG4gIH0sXG5cbiAgZ2V0QWJzb2x1dGVMZWZ0OiBmdW5jdGlvbigpIHtcblxuICAgIHZhciB0YXJnZXRFbGVtZW50TGVmdCA9ICQodGhpcy5nZXQoXCJ0YXJnZXRFbGVtZW50XCIpKS5vZmZzZXQoKS5sZWZ0O1xuICAgIHZhciBib29rbWFya0Fic29sdXRlTGVmdCA9IHRoaXMuZ2V0KFwib2Zmc2V0TGVmdEFkZGl0aW9uXCIpICsgdGFyZ2V0RWxlbWVudExlZnQgLSB0aGlzLmdldChcImJvb2ttYXJrQ2VudGVyaW5nQWRqdXN0bWVudFwiKTtcbiAgICByZXR1cm4gYm9va21hcmtBYnNvbHV0ZUxlZnQ7XG4gIH0sXG5cbiAgdG9JbmZvOiBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiB7XG5cbiAgICAgIGlkOiB0aGlzLmdldChcImlkXCIpLFxuICAgICAgdHlwZTogXCJib29rbWFya1wiLFxuICAgICAgQ0ZJOiB0aGlzLmdldChcIkNGSVwiKVxuICAgIH07XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJvb2ttYXJrIiwidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBIaWdobGlnaHRWaWV3ID0gcmVxdWlyZSgnLi9oaWdobGlnaHQtdmlldycpXG52YXIgVGV4dExpbmVJbmZlcnJlciA9IHJlcXVpcmUoJy4vdGV4dC1saW5lLWluZmVycmVyJylcblxudmFyIEhpZ2hsaWdodEdyb3VwID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcblxuICBkZWZhdWx0czogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwic2VsZWN0ZWROb2Rlc1wiOiBbXSxcbiAgICAgIFwiaGlnaGxpZ2h0Vmlld3NcIjogW11cbiAgICB9O1xuICB9LFxuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnNldChcInNjYWxlXCIsIGF0dHJpYnV0ZXMuc2NhbGUpO1xuICAgIHRoaXMuY29uc3RydWN0SGlnaGxpZ2h0Vmlld3MoKTtcbiAgfSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0gUFJJVkFURSBIRUxQRVJTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGhpZ2hsaWdodEdyb3VwQ2FsbGJhY2s6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAvLyBUcmlnZ2VyIHRoaXMgZXZlbnQgb24gZWFjaCBvZiB0aGUgaGlnaGxpZ2h0IHZpZXdzIChleGNlcHQgdHJpZ2dlcmluZyBldmVudClcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiKSB7XG4gICAgICB0aGF0LmdldChcImJiUGFnZVNldFZpZXdcIikudHJpZ2dlcihcImFubm90YXRpb25DbGlja2VkXCIsIFwiaGlnaGxpZ2h0XCIsIHRoYXQuZ2V0KFwiQ0ZJXCIpLCB0aGF0LmdldChcImlkXCIpLCBldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICAvLyBUcmlnZ2VyIHRoaXMgZXZlbnQgb24gZWFjaCBvZiB0aGUgaGlnaGxpZ2h0IHZpZXdzIChleGNlcHQgdHJpZ2dlcmluZyBldmVudClcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJjb250ZXh0bWVudVwiKSB7XG4gICAgICB0aGF0LmdldChcImJiUGFnZVNldFZpZXdcIikudHJpZ2dlcihcImFubm90YXRpb25SaWdodENsaWNrZWRcIiwgXCJoaWdobGlnaHRcIiwgdGhhdC5nZXQoXCJDRklcIiksIHRoYXQuZ2V0KFwiaWRcIiksIGV2ZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIEV2ZW50cyB0aGF0IGFyZSBjYWxsZWQgb24gZWFjaCBtZW1iZXIgb2YgdGhlIGdyb3VwXG4gICAgXy5lYWNoKHRoaXMuZ2V0KFwiaGlnaGxpZ2h0Vmlld3NcIiksIGZ1bmN0aW9uKGhpZ2hsaWdodFZpZXcpIHtcblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwibW91c2VlbnRlclwiKSB7XG4gICAgICAgIGhpZ2hsaWdodFZpZXcuc2V0SG92ZXJIaWdobGlnaHQoKTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gXCJtb3VzZWxlYXZlXCIpIHtcbiAgICAgICAgaGlnaGxpZ2h0Vmlldy5zZXRCYXNlSGlnaGxpZ2h0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgY29uc3RydWN0SGlnaGxpZ2h0Vmlld3M6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciByZWN0TGlzdCA9IFtdO1xuICAgIHZhciBpbmZlcnJlcjtcbiAgICB2YXIgaW5mZXJyZWRMaW5lcztcblxuICAgIF8uZWFjaCh0aGlzLmdldChcInNlbGVjdGVkTm9kZXNcIiksIGZ1bmN0aW9uKG5vZGUsIGluZGV4KSB7XG5cbiAgICAgIHZhciByZWN0cztcbiAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XG4gICAgICByZWN0cyA9IHJhbmdlLmdldENsaWVudFJlY3RzKCk7XG5cbiAgICAgIC8vIFJFRkFDVE9SSU5HIENBTkRJREFURTogTWF5YmUgYSBiZXR0ZXIgd2F5IHRvIGFwcGVuZCBhbiBhcnJheSBoZXJlXG4gICAgICBfLmVhY2gocmVjdHMsIGZ1bmN0aW9uKHJlY3QpIHtcbiAgICAgICAgcmVjdExpc3QucHVzaChyZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaW5mZXJyZXIgPSBuZXcgVGV4dExpbmVJbmZlcnJlcigpO1xuICAgIGluZmVycmVkTGluZXMgPSBpbmZlcnJlci5pbmZlckxpbmVzKHJlY3RMaXN0KTtcblxuICAgIHZhciBzY2FsZSA9IHRoaXMuZ2V0KFwic2NhbGVcIik7XG5cbiAgICBfLmVhY2goaW5mZXJyZWRMaW5lcywgZnVuY3Rpb24obGluZSwgaW5kZXgpIHtcblxuICAgICAgdmFyIGhpZ2hsaWdodFRvcCA9IGxpbmUuc3RhcnRUb3AgLyBzY2FsZTs7XG4gICAgICB2YXIgaGlnaGxpZ2h0TGVmdCA9IGxpbmUubGVmdCAvIHNjYWxlOztcbiAgICAgIHZhciBoaWdobGlnaHRIZWlnaHQgPSBsaW5lLmF2Z0hlaWdodCAvIHNjYWxlO1xuICAgICAgdmFyIGhpZ2hsaWdodFdpZHRoID0gbGluZS53aWR0aCAvIHNjYWxlOztcblxuICAgICAgdmFyIGhpZ2hsaWdodFZpZXcgPSBuZXcgSGlnaGxpZ2h0Vmlldyh7XG4gICAgICAgIENGSTogdGhhdC5nZXQoXCJDRklcIiksXG4gICAgICAgIHRvcDogaGlnaGxpZ2h0VG9wICsgdGhhdC5nZXQoXCJvZmZzZXRUb3BBZGRpdGlvblwiKSxcbiAgICAgICAgbGVmdDogaGlnaGxpZ2h0TGVmdCArIHRoYXQuZ2V0KFwib2Zmc2V0TGVmdEFkZGl0aW9uXCIpLFxuICAgICAgICBoZWlnaHQ6IGhpZ2hsaWdodEhlaWdodCxcbiAgICAgICAgd2lkdGg6IGhpZ2hsaWdodFdpZHRoLFxuICAgICAgICBzdHlsZXM6IHRoYXQuZ2V0KCdzdHlsZXMnKSxcbiAgICAgICAgaGlnaGxpZ2h0R3JvdXBDYWxsYmFjazogdGhhdC5oaWdobGlnaHRHcm91cENhbGxiYWNrLFxuICAgICAgICBjYWxsYmFja0NvbnRleHQ6IHRoYXRcbiAgICAgIH0pO1xuXG4gICAgICB0aGF0LmdldChcImhpZ2hsaWdodFZpZXdzXCIpLnB1c2goaGlnaGxpZ2h0Vmlldyk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVzZXRIaWdobGlnaHRzOiBmdW5jdGlvbih2aWV3cG9ydEVsZW1lbnQsIG9mZnNldFRvcCwgb2Zmc2V0TGVmdCkge1xuXG4gICAgaWYgKG9mZnNldFRvcCkge1xuICAgICAgdGhpcy5zZXQoe1xuICAgICAgICBvZmZzZXRUb3BBZGRpdGlvbjogb2Zmc2V0VG9wXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG9mZnNldExlZnQpIHtcbiAgICAgIHRoaXMuc2V0KHtcbiAgICAgICAgb2Zmc2V0TGVmdEFkZGl0aW9uOiBvZmZzZXRMZWZ0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmRlc3Ryb3lDdXJyZW50SGlnaGxpZ2h0cygpO1xuICAgIHRoaXMuY29uc3RydWN0SGlnaGxpZ2h0Vmlld3MoKTtcbiAgICB0aGlzLnJlbmRlckhpZ2hsaWdodHModmlld3BvcnRFbGVtZW50KTtcbiAgfSxcblxuICAvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IEVuc3VyZSB0aGF0IGV2ZW50IGxpc3RlbmVycyBhcmUgYmVpbmcgcHJvcGVybHkgY2xlYW5lZCB1cC4gXG4gIGRlc3Ryb3lDdXJyZW50SGlnaGxpZ2h0czogZnVuY3Rpb24oKSB7XG5cbiAgICBfLmVhY2godGhpcy5nZXQoXCJoaWdobGlnaHRWaWV3c1wiKSwgZnVuY3Rpb24oaGlnaGxpZ2h0Vmlldykge1xuICAgICAgaGlnaGxpZ2h0Vmlldy5yZW1vdmUoKTtcbiAgICAgIGhpZ2hsaWdodFZpZXcub2ZmKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmdldChcImhpZ2hsaWdodFZpZXdzXCIpLmxlbmd0aCA9IDA7XG4gIH0sXG5cbiAgcmVuZGVySGlnaGxpZ2h0czogZnVuY3Rpb24odmlld3BvcnRFbGVtZW50KSB7XG5cbiAgICBfLmVhY2godGhpcy5nZXQoXCJoaWdobGlnaHRWaWV3c1wiKSwgZnVuY3Rpb24odmlldywgaW5kZXgpIHtcbiAgICAgICQodmlld3BvcnRFbGVtZW50KS5hcHBlbmQodmlldy5yZW5kZXIoKSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgdG9JbmZvOiBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiB7XG5cbiAgICAgIGlkOiB0aGlzLmdldChcImlkXCIpLFxuICAgICAgdHlwZTogXCJoaWdobGlnaHRcIixcbiAgICAgIENGSTogdGhpcy5nZXQoXCJDRklcIilcbiAgICB9O1xuICB9LFxuXG4gIHNldFN0eWxlczogZnVuY3Rpb24oc3R5bGVzKSB7XG4gICAgdmFyIGhpZ2hsaWdodFZpZXdzID0gdGhpcy5nZXQoJ2hpZ2hsaWdodFZpZXdzJyk7XG5cbiAgICB0aGlzLnNldCh7XG4gICAgICBzdHlsZXM6IHN0eWxlc1xuICAgIH0pO1xuXG4gICAgXy5lYWNoKGhpZ2hsaWdodFZpZXdzLCBmdW5jdGlvbih2aWV3LCBpbmRleCkge1xuICAgICAgdmlldy5zZXRTdHlsZXMoc3R5bGVzKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSGlnaGxpZ2h0R3JvdXAiLCJ2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdCYWNrYm9uZScpXG52YXIgSGlnaGxpZ2h0ID0gcmVxdWlyZSgnLi9oaWdobGlnaHQnKVxuXG52YXIgSGlnaGxpZ2h0VmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcblxuICBlbDogXCI8ZGl2IGNsYXNzPSdoaWdobGlnaHQnPjwvZGl2PlwiLFxuXG4gIGV2ZW50czoge1xuICAgIFwibW91c2VlbnRlclwiOiBcImhpZ2hsaWdodEV2ZW50XCIsXG4gICAgXCJtb3VzZWxlYXZlXCI6IFwiaGlnaGxpZ2h0RXZlbnRcIixcbiAgICBcImNsaWNrXCI6IFwiaGlnaGxpZ2h0RXZlbnRcIixcbiAgICBcImNvbnRleHRtZW51XCI6IFwiaGlnaGxpZ2h0RXZlbnRcIlxuICB9LFxuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAgIHRoaXMuaGlnaGxpZ2h0ID0gbmV3IEhpZ2hsaWdodCh7XG4gICAgICBDRkk6IG9wdGlvbnMuQ0ZJLFxuICAgICAgdG9wOiBvcHRpb25zLnRvcCxcbiAgICAgIGxlZnQ6IG9wdGlvbnMubGVmdCxcbiAgICAgIGhlaWdodDogb3B0aW9ucy5oZWlnaHQsXG4gICAgICB3aWR0aDogb3B0aW9ucy53aWR0aCxcbiAgICAgIHN0eWxlczogb3B0aW9ucy5zdHlsZXMsXG4gICAgICBoaWdobGlnaHRHcm91cENhbGxiYWNrOiBvcHRpb25zLmhpZ2hsaWdodEdyb3VwQ2FsbGJhY2ssXG4gICAgICBjYWxsYmFja0NvbnRleHQ6IG9wdGlvbnMuY2FsbGJhY2tDb250ZXh0XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcblxuICAgIHRoaXMuc2V0Q1NTKCk7XG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH0sXG5cbiAgcmVzZXRQb3NpdGlvbjogZnVuY3Rpb24odG9wLCBsZWZ0LCBoZWlnaHQsIHdpZHRoKSB7XG5cbiAgICB0aGlzLmhpZ2hsaWdodC5zZXQoe1xuICAgICAgdG9wOiB0b3AsXG4gICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICB3aWR0aDogd2lkdGhcbiAgICB9KTtcbiAgICB0aGlzLnNldENTUygpO1xuICB9LFxuXG4gIHNldFN0eWxlczogZnVuY3Rpb24oc3R5bGVzKSB7XG5cbiAgICB0aGlzLmhpZ2hsaWdodC5zZXQoe1xuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgfSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfSxcblxuICBzZXRDU1M6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuaGlnaGxpZ2h0LmdldChcInN0eWxlc1wiKSB8fCB7fTtcblxuICAgIHRoaXMuJGVsLmNzcyh7XG4gICAgICBcInRvcFwiOiB0aGlzLmhpZ2hsaWdodC5nZXQoXCJ0b3BcIikgKyBcInB4XCIsXG4gICAgICBcImxlZnRcIjogdGhpcy5oaWdobGlnaHQuZ2V0KFwibGVmdFwiKSArIFwicHhcIixcbiAgICAgIFwiaGVpZ2h0XCI6IHRoaXMuaGlnaGxpZ2h0LmdldChcImhlaWdodFwiKSArIFwicHhcIixcbiAgICAgIFwid2lkdGhcIjogdGhpcy5oaWdobGlnaHQuZ2V0KFwid2lkdGhcIikgKyBcInB4XCIsXG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogc3R5bGVzLmZpbGxfY29sb3IgfHwgXCJub3JtYWxcIixcbiAgICB9KTtcbiAgfSxcblxuICBzZXRCYXNlSGlnaGxpZ2h0OiBmdW5jdGlvbigpIHtcblxuICAgIHRoaXMuJGVsLmFkZENsYXNzKFwiaGlnaGxpZ2h0XCIpO1xuICAgIHRoaXMuJGVsLnJlbW92ZUNsYXNzKFwiaG92ZXItaGlnaGxpZ2h0XCIpO1xuICB9LFxuXG4gIHNldEhvdmVySGlnaGxpZ2h0OiBmdW5jdGlvbigpIHtcblxuICAgIHRoaXMuJGVsLmFkZENsYXNzKFwiaG92ZXItaGlnaGxpZ2h0XCIpO1xuICAgIHRoaXMuJGVsLnJlbW92ZUNsYXNzKFwiaGlnaGxpZ2h0XCIpO1xuICB9LFxuXG4gIGhpZ2hsaWdodEV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdmFyIGhpZ2hsaWdodEdyb3VwQ2FsbGJhY2sgPSB0aGlzLmhpZ2hsaWdodC5nZXQoXCJoaWdobGlnaHRHcm91cENhbGxiYWNrXCIpO1xuICAgIHZhciBoaWdobGlnaHRHcm91cENvbnRleHQgPSB0aGlzLmhpZ2hsaWdodC5nZXQoXCJjYWxsYmFja0NvbnRleHRcIik7XG4gICAgaGlnaGxpZ2h0R3JvdXBDb250ZXh0LmhpZ2hsaWdodEdyb3VwQ2FsbGJhY2soZXZlbnQpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBIaWdobGlnaHRWaWV3IiwidmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxuXG52YXIgSGlnaGxpZ2h0ID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgZGVmYXVsdHM6IHtcbiAgICBcImlzVmlzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBpbml0aWFsaXplOiBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSGlnaGxpZ2h0IiwidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcblxuXG4vLyBSYXRpb25hbGU6IEFuIGltYWdlIGFubm90YXRpb24gZG9lcyBOT1QgaGF2ZSBhIHZpZXcsIGFzIHdlIGRvbid0IGtub3cgdGhlIHN0YXRlIG9mIGFuIGltYWdlIGVsZW1lbnQgd2l0aGluIGFuIEVQVUI7IGl0J3MgZW50aXJlbHlcbi8vICAgcG9zc2libGUgdGhhdCBhbiBFUFVCIGltYWdlIGVsZW1lbnQgY291bGQgaGF2ZSBhIGJhY2tib25lIHZpZXcgYXNzb2NpYXRlZCB3aXRoIGl0IGFscmVhZHksIHdoaWNoIHdvdWxkIGNhdXNlIHByb2JsZW1zIGlmIHdlIFxuLy8gICB0cmllZCB0byBhc3NvY2lhdGUgYW5vdGhlciBiYWNrYm9uZSB2aWV3LiBBcyBzdWNoLCB0aGlzIG1vZGVsIG1vZGlmaWVzIENTUyBwcm9wZXJ0aWVzIGZvciBhbiBhbm5vdGF0ZWQgaW1hZ2UgZWxlbWVudC5cbi8vICAgXG4vLyAgIEFuIGltYWdlIGFubm90YXRpb24gdmlldyB0aGF0IG1hbmFnZXMgYW4gYWJzb2x1dGVseSBwb3NpdGlvbiBlbGVtZW50IChzaW1pbGFyIHRvIGJvb2ttYXJrcywgdW5kZXJsaW5lcyBhbmQgaGlnaGxpZ2h0cykgY2FuIGJlXG4vLyAgIGFkZGVkIGlmIG1vcmUgZnVuY3Rpb25hbGl0eSBpcyByZXF1aXJlZC4gXG5cbnZhciBJbWFnZUFubm90YXRpb24gPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHtcblxuICAgIC8vIFNldCBoYW5kbGVycyBoZXJlLiBDYW4gdXNlIGpxdWVyeSBoYW5kbGVyc1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB2YXIgJGltYWdlRWxlbWVudCA9ICQodGhpcy5nZXQoXCJpbWFnZU5vZGVcIikpO1xuICAgICRpbWFnZUVsZW1lbnQub24oXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhhdC5zZXRNb3VzZWVudGVyQm9yZGVyKCk7XG4gICAgfSk7XG4gICAgJGltYWdlRWxlbWVudC5vbihcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICB0aGF0LnNldE1vdXNlbGVhdmVCb3JkZXIoKTtcbiAgICB9KTtcbiAgICAkaW1hZ2VFbGVtZW50Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICB0aGF0LmdldChcImJiUGFnZVNldFZpZXdcIikudHJpZ2dlcihcImFubm90YXRpb25DbGlja2VkXCIsIFwiaW1hZ2VcIiwgdGhhdC5nZXQoXCJDRklcIiksIHRoYXQuZ2V0KFwiaWRcIiksIGV2ZW50KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgdGhpcy5zZXRDU1MoKTtcbiAgfSxcblxuICBzZXRDU1M6IGZ1bmN0aW9uKCkge1xuXG4gICAgJCh0aGlzLmdldChcImltYWdlTm9kZVwiKSkuY3NzKHtcbiAgICAgIFwiYm9yZGVyXCI6IFwiNXB4IHNvbGlkIHJnYigyNTUsIDAsIDApXCIsXG4gICAgICBcImJvcmRlclwiOiBcIjVweCBzb2xpZCByZ2JhKDI1NSwgMCwgMCwgMC4yKVwiLFxuICAgICAgXCItd2Via2l0LWJhY2tncm91bmQtY2xpcFwiOiBcInBhZGRpbmctYm94XCIsXG4gICAgICBcImJhY2tncm91bmQtY2xpcFwiOiBcInBhZGRpbmctYm94XCJcbiAgICB9KTtcbiAgfSxcblxuICBzZXRNb3VzZWVudGVyQm9yZGVyOiBmdW5jdGlvbigpIHtcblxuICAgICQodGhpcy5nZXQoXCJpbWFnZU5vZGVcIikpLmNzcyh7XG4gICAgICBcImJvcmRlclwiOiBcIjVweCBzb2xpZCByZ2JhKDI1NSwgMCwgMCwgMC40KVwiXG4gICAgfSk7XG4gIH0sXG5cbiAgc2V0TW91c2VsZWF2ZUJvcmRlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAkKHRoaXMuZ2V0KFwiaW1hZ2VOb2RlXCIpKS5jc3Moe1xuICAgICAgXCJib3JkZXJcIjogXCI1cHggc29saWQgcmdiYSgyNTUsIDAsIDAsIDAuMilcIlxuICAgIH0pO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbWFnZUFubm90YXRpb24iLCIvLyBUaGlzIHdhcyByZWFkaXVtLWpzLXNoYXJlZC9saWIvYW5ub3RhdGlvbnNfbW9kdWxlLmpzXG4vLyBJdCB3YXMgcmVuYW1lZCBzbGlnaHRseSAobm8gTW9kdWxlIGJpdCApIGFuZCBzcGxpdCBpbnRvIG11bHRpcGxlIGZpbGVzIGZvciBzaW1wbGljaXR5XG4vLyBFcHViQW5ub3RhdGlvbnNNb2R1bGUgaXMgbm93IEVwdWJBbm5vdGF0aW9ucy4gRXB1YkFubm90YXRpb25zIG5hbWVzcGFjZSB3YXMgZHJvcHBlZCBpbiBmYXZvdXJcbi8vIG9mIGV4cGxpY2l0IHJlcXVpcmVzIHdoZXJlIHVzZWQuXG5cbnZhciBSZWZsb3dhYmxlQW5ub3RhdGlvbnMgPSByZXF1aXJlKCcuL3JlZmxvd2FibGUtYW5ub3RhdGlvbnMnKVxuXG52YXIgRXB1YkFubm90YXRpb25zID0gZnVuY3Rpb24oY29udGVudERvY3VtZW50RE9NLCBiYlBhZ2VTZXRWaWV3LCBhbm5vdGF0aW9uQ1NTVXJsKSB7XG4gIHZhciByZWZsb3dhYmxlQW5ub3RhdGlvbnMgPSBuZXcgUmVmbG93YWJsZUFubm90YXRpb25zKHtcbiAgICBjb250ZW50RG9jdW1lbnRET006IGNvbnRlbnREb2N1bWVudERPTSxcbiAgICBiYlBhZ2VTZXRWaWV3OiBiYlBhZ2VTZXRWaWV3LFxuICAgIGFubm90YXRpb25DU1NVcmw6IGFubm90YXRpb25DU1NVcmwsXG4gIH0pO1xuXG4gIC8vIERlc2NyaXB0aW9uOiBUaGUgcHVibGljIGludGVyZmFjZVxuICByZXR1cm4ge1xuICAgIGFkZFNlbGVjdGlvbkhpZ2hsaWdodDogZnVuY3Rpb24oaWQsIHR5cGUsIHN0eWxlcykge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5hZGRTZWxlY3Rpb25IaWdobGlnaHQoaWQsIHR5cGUsIHN0eWxlcyk7XG4gICAgfSxcbiAgICBhZGRTZWxlY3Rpb25Cb29rbWFyazogZnVuY3Rpb24oaWQsIHR5cGUpIHtcbiAgICAgIHJldHVybiByZWZsb3dhYmxlQW5ub3RhdGlvbnMuYWRkU2VsZWN0aW9uQm9va21hcmsoaWQsIHR5cGUpO1xuICAgIH0sXG4gICAgYWRkU2VsZWN0aW9uSW1hZ2VBbm5vdGF0aW9uOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5hZGRTZWxlY3Rpb25JbWFnZUFubm90YXRpb24oaWQpO1xuICAgIH0sXG4gICAgYWRkSGlnaGxpZ2h0OiBmdW5jdGlvbihDRkksIGlkLCB0eXBlLCBzdHlsZXMpIHtcbiAgICAgIHJldHVybiByZWZsb3dhYmxlQW5ub3RhdGlvbnMuYWRkSGlnaGxpZ2h0KENGSSwgaWQsIHR5cGUsIHN0eWxlcyk7XG4gICAgfSxcbiAgICBhZGRCb29rbWFyazogZnVuY3Rpb24oQ0ZJLCBpZCwgdHlwZSkge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5hZGRCb29rbWFyayhDRkksIGlkLCB0eXBlKTtcbiAgICB9LFxuICAgIGFkZEltYWdlQW5ub3RhdGlvbjogZnVuY3Rpb24oQ0ZJLCBpZCkge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5hZGRJbWFnZUFubm90YXRpb24oQ0ZJLCBpZCk7XG4gICAgfSxcbiAgICB1cGRhdGVBbm5vdGF0aW9uVmlldzogZnVuY3Rpb24oaWQsIHN0eWxlcykge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy51cGRhdGVBbm5vdGF0aW9uVmlldyhpZCwgc3R5bGVzKTtcbiAgICB9LFxuICAgIHJlZHJhdzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLnJlZHJhdygpO1xuICAgIH0sXG4gICAgZ2V0Qm9va21hcms6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmFubm90YXRpb25zLmdldEJvb2ttYXJrKGlkKTtcbiAgICB9LFxuICAgIGdldEJvb2ttYXJrczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmFubm90YXRpb25zLmdldEJvb2ttYXJrcygpO1xuICAgIH0sXG4gICAgZ2V0SGlnaGxpZ2h0OiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5hbm5vdGF0aW9ucy5nZXRIaWdobGlnaHQoaWQpO1xuICAgIH0sXG4gICAgZ2V0SGlnaGxpZ2h0czogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmFubm90YXRpb25zLmdldEhpZ2hsaWdodHMoKTtcbiAgICB9LFxuICAgIGdldFVuZGVybGluZTogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByZWZsb3dhYmxlQW5ub3RhdGlvbnMuYW5ub3RhdGlvbnMuZ2V0VW5kZXJsaW5lKGlkKTtcbiAgICB9LFxuICAgIGdldFVuZGVybGluZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5hbm5vdGF0aW9ucy5nZXRVbmRlcmxpbmVzKCk7XG4gICAgfSxcbiAgICBnZXRJbWFnZUFubm90YXRpb246IGZ1bmN0aW9uKCkge1xuXG4gICAgfSxcbiAgICBnZXRJbWFnZUFubm90YXRpb25zOiBmdW5jdGlvbigpIHtcblxuICAgIH0sXG4gICAgcmVtb3ZlQW5ub3RhdGlvbjogZnVuY3Rpb24oYW5ub3RhdGlvbklkKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLnJlbW92ZShhbm5vdGF0aW9uSWQpO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudFNlbGVjdGlvbkNGSTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVmbG93YWJsZUFubm90YXRpb25zLmdldEN1cnJlbnRTZWxlY3Rpb25DRkkoKTtcbiAgICB9LFxuICAgIGdldEN1cnJlbnRTZWxlY3Rpb25PZmZzZXRDRkk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5nZXRDdXJyZW50U2VsZWN0aW9uT2Zmc2V0Q0ZJKCk7XG4gICAgfSxcbiAgICByZW1vdmVIaWdobGlnaHQ6IGZ1bmN0aW9uKGFubm90YXRpb25JZCkge1xuICAgICAgcmV0dXJuIHJlZmxvd2FibGVBbm5vdGF0aW9ucy5yZW1vdmVIaWdobGlnaHQoYW5ub3RhdGlvbklkKTtcbiAgICB9XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVwdWJBbm5vdGF0aW9ucyIsInZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgQW5ub3RhdGlvbnMgPSByZXF1aXJlKCcuL2Fubm90YXRpb25zJylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBFUFVCY2ZpID0gcmVxdWlyZSgnZXB1Yi1jZmknKVxuXG52YXIgUmVmbG93YWJsZUFubm90YXRpb25zID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcblxuICBpbml0aWFsaXplOiBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7XG5cbiAgICB0aGlzLmVwdWJDRkkgPSBFUFVCY2ZpO1xuICAgIHRoaXMuYW5ub3RhdGlvbnMgPSBuZXcgQW5ub3RhdGlvbnMoe1xuICAgICAgb2Zmc2V0VG9wQWRkaXRpb246IDAsXG4gICAgICBvZmZzZXRMZWZ0QWRkaXRpb246IDAsXG4gICAgICByZWFkZXJCb3VuZEVsZW1lbnQ6ICQoXCJodG1sXCIsIHRoaXMuZ2V0KFwiY29udGVudERvY3VtZW50RE9NXCIpKVswXSxcbiAgICAgIHNjYWxlOiAwLFxuICAgICAgYmJQYWdlU2V0VmlldzogdGhpcy5nZXQoXCJiYlBhZ2VTZXRWaWV3XCIpXG4gICAgfSk7XG4gICAgLy8gaW5qZWN0IGFubm90YXRpb24gQ1NTIGludG8gaWZyYW1lIFxuXG5cbiAgICB2YXIgYW5ub3RhdGlvbkNTU1VybCA9IHRoaXMuZ2V0KFwiYW5ub3RhdGlvbkNTU1VybFwiKTtcbiAgICBpZiAoYW5ub3RhdGlvbkNTU1VybCkge1xuICAgICAgdGhpcy5pbmplY3RBbm5vdGF0aW9uQ1NTKGFubm90YXRpb25DU1NVcmwpO1xuICAgIH1cblxuICAgIC8vIGVtaXQgYW4gZXZlbnQgd2hlbiB1c2VyIHNlbGVjdHMgc29tZSB0ZXh0LlxuICAgIHZhciBlcHViV2luZG93ID0gJCh0aGlzLmdldChcImNvbnRlbnREb2N1bWVudERPTVwiKSk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGVwdWJXaW5kb3cub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgcmFuZ2UgPSBzZWxmLmdldEN1cnJlbnRTZWxlY3Rpb25SYW5nZSgpO1xuICAgICAgaWYgKHJhbmdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHJhbmdlLnN0YXJ0T2Zmc2V0IC0gcmFuZ2UuZW5kT2Zmc2V0KSB7XG4gICAgICAgIHNlbGYuYW5ub3RhdGlvbnMuZ2V0KFwiYmJQYWdlU2V0Vmlld1wiKS50cmlnZ2VyKFwidGV4dFNlbGVjdGlvbkV2ZW50XCIsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuXG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4gIC8vICBcIlBVQkxJQ1wiIE1FVEhPRFMgKFRIRSBBUEkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIHJlZHJhdzogZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgbGVmdEFkZGl0aW9uID0gLXRoaXMuZ2V0UGFnaW5hdGlvbkxlZnRPZmZzZXQoKTtcbiAgICB0aGlzLmFubm90YXRpb25zLnJlZHJhd0Fubm90YXRpb25zKDAsIGxlZnRBZGRpdGlvbik7XG4gIH0sXG5cbiAgcmVtb3ZlSGlnaGxpZ2h0OiBmdW5jdGlvbihhbm5vdGF0aW9uSWQpIHtcbiAgICByZXR1cm4gdGhpcy5hbm5vdGF0aW9ucy5yZW1vdmVIaWdobGlnaHQoYW5ub3RhdGlvbklkKVxuICB9LFxuXG5cblxuICBhZGRIaWdobGlnaHQ6IGZ1bmN0aW9uKENGSSwgaWQsIHR5cGUsIHN0eWxlcykge1xuXG4gICAgdmFyIENGSVJhbmdlSW5mbztcbiAgICB2YXIgcmFuZ2U7XG4gICAgdmFyIHJhbmdlU3RhcnROb2RlO1xuICAgIHZhciByYW5nZUVuZE5vZGU7XG4gICAgdmFyIHNlbGVjdGVkRWxlbWVudHM7XG4gICAgdmFyIGxlZnRBZGRpdGlvbjtcbiAgICB2YXIgc3RhcnRNYXJrZXJIdG1sID0gdGhpcy5nZXRSYW5nZVN0YXJ0TWFya2VyKENGSSwgaWQpO1xuICAgIHZhciBlbmRNYXJrZXJIdG1sID0gdGhpcy5nZXRSYW5nZUVuZE1hcmtlcihDRkksIGlkKTtcblxuICAgIC8vIFRPRE8gd2Via2l0IHNwZWNpZmljP1xuICAgIC8vIEZJWE1FIENoZWNrIHRoaXMgcG9seWZpbGwgaHR0cHM6Ly9naXRodWIuY29tL2pmc2lpaS9YQ1NTTWF0cml4XG4gICAgdmFyICRodG1sID0gJCh0aGlzLmdldChcImNvbnRlbnREb2N1bWVudERPTVwiKSk7XG4gICAgdmFyIG1hdHJpeCA9ICQoJ2h0bWwnLCAkaHRtbCkuY3NzKCctd2Via2l0LXRyYW5zZm9ybScpO1xuICAgIHZhciBzY2FsZSA9IG5ldyBXZWJLaXRDU1NNYXRyaXgobWF0cml4KS5hO1xuICAgIHRoaXMuc2V0KFwic2NhbGVcIiwgc2NhbGUpO1xuXG4gICAgdHJ5IHtcbiAgICAgIENGSVJhbmdlSW5mbyA9IHRoaXMuZXB1YkNGSS5pbmplY3RSYW5nZUVsZW1lbnRzKFxuICAgICAgICBDRkksXG4gICAgICAgIHRoaXMuZ2V0KFwiY29udGVudERvY3VtZW50RE9NXCIpLFxuICAgICAgICBzdGFydE1hcmtlckh0bWwsXG4gICAgICAgIGVuZE1hcmtlckh0bWwsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdXG4gICAgICApO1xuXG4gICAgICAvLyBHZXQgc3RhcnQgYW5kIGVuZCBtYXJrZXIgZm9yIHRoZSBpZCwgdXNpbmcgaW5qZWN0ZWQgaW50byBlbGVtZW50c1xuICAgICAgLy8gUkVGQUNUT1JJTkcgQ0FORElEQVRFOiBBYnN0cmFjdCByYW5nZSBjcmVhdGlvbiB0byBhY2NvdW50IGZvciBubyBwcmV2aW91cy9uZXh0IHNpYmxpbmcsIGZvciBkaWZmZXJlbnQgdHlwZXMgb2ZcbiAgICAgIC8vICAgc2liaWxpbmcsIGV0Yy4gXG4gICAgICByYW5nZVN0YXJ0Tm9kZSA9IENGSVJhbmdlSW5mby5zdGFydEVsZW1lbnQubmV4dFNpYmxpbmcgPyBDRklSYW5nZUluZm8uc3RhcnRFbGVtZW50Lm5leHRTaWJsaW5nIDogQ0ZJUmFuZ2VJbmZvLnN0YXJ0RWxlbWVudDtcbiAgICAgIHJhbmdlRW5kTm9kZSA9IENGSVJhbmdlSW5mby5lbmRFbGVtZW50LnByZXZpb3VzU2libGluZyA/IENGSVJhbmdlSW5mby5lbmRFbGVtZW50LnByZXZpb3VzU2libGluZyA6IENGSVJhbmdlSW5mby5lbmRFbGVtZW50O1xuICAgICAgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgcmFuZ2Uuc2V0U3RhcnQocmFuZ2VTdGFydE5vZGUsIDApO1xuICAgICAgcmFuZ2Uuc2V0RW5kKHJhbmdlRW5kTm9kZSwgcmFuZ2VFbmROb2RlLmxlbmd0aCk7XG5cbiAgICAgIHNlbGVjdGlvbkluZm8gPSB0aGlzLmdldFNlbGVjdGlvbkluZm8ocmFuZ2UpO1xuICAgICAgbGVmdEFkZGl0aW9uID0gLXRoaXMuZ2V0UGFnaW5hdGlvbkxlZnRPZmZzZXQoKTtcblxuICAgICAgaWYgKHR5cGUgPT09IFwiaGlnaGxpZ2h0XCIpIHtcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9ucy5zZXQoJ3NjYWxlJywgdGhpcy5nZXQoJ3NjYWxlJykpO1xuICAgICAgICB0aGlzLmFubm90YXRpb25zLmFkZEhpZ2hsaWdodChDRkksIHNlbGVjdGlvbkluZm8uc2VsZWN0ZWRFbGVtZW50cywgaWQsIDAsIGxlZnRBZGRpdGlvbiwgQ0ZJUmFuZ2VJbmZvLnN0YXJ0RWxlbWVudCwgQ0ZJUmFuZ2VJbmZvLmVuZEVsZW1lbnQsIHN0eWxlcyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwidW5kZXJsaW5lXCIpIHtcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9ucy5hZGRVbmRlcmxpbmUoQ0ZJLCBzZWxlY3Rpb25JbmZvLnNlbGVjdGVkRWxlbWVudHMsIGlkLCAwLCBsZWZ0QWRkaXRpb24sIHN0eWxlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIENGSTogQ0ZJLFxuICAgICAgICBzZWxlY3RlZEVsZW1lbnRzOiBzZWxlY3Rpb25JbmZvLnNlbGVjdGVkRWxlbWVudHNcbiAgICAgIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9LFxuXG4gIGFkZEJvb2ttYXJrOiBmdW5jdGlvbihDRkksIGlkLCB0eXBlKSB7XG5cbiAgICB2YXIgc2VsZWN0ZWRFbGVtZW50cztcbiAgICB2YXIgYm9va21hcmtNYXJrZXJIdG1sID0gdGhpcy5nZXRCb29rbWFya01hcmtlcihDRkksIGlkKTtcbiAgICB2YXIgJGluamVjdGVkRWxlbWVudDtcbiAgICB2YXIgbGVmdEFkZGl0aW9uO1xuXG4gICAgdHJ5IHtcbiAgICAgICRpbmplY3RlZEVsZW1lbnQgPSB0aGlzLmVwdWJDRkkuaW5qZWN0RWxlbWVudChcbiAgICAgICAgQ0ZJLFxuICAgICAgICB0aGlzLmdldChcImNvbnRlbnREb2N1bWVudERPTVwiKSxcbiAgICAgICAgYm9va21hcmtNYXJrZXJIdG1sLCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXVxuICAgICAgKTtcblxuICAgICAgLy8gQWRkIGJvb2ttYXJrIGFubm90YXRpb24gaGVyZVxuICAgICAgbGVmdEFkZGl0aW9uID0gLXRoaXMuZ2V0UGFnaW5hdGlvbkxlZnRPZmZzZXQoKTtcbiAgICAgIHRoaXMuYW5ub3RhdGlvbnMuYWRkQm9va21hcmsoQ0ZJLCAkaW5qZWN0ZWRFbGVtZW50WzBdLCBpZCwgMCwgbGVmdEFkZGl0aW9uLCB0eXBlKTtcblxuICAgICAgcmV0dXJuIHtcblxuICAgICAgICBDRkk6IENGSSxcbiAgICAgICAgc2VsZWN0ZWRFbGVtZW50czogJGluamVjdGVkRWxlbWVudFswXVxuICAgICAgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH0sXG5cbiAgYWRkSW1hZ2VBbm5vdGF0aW9uOiBmdW5jdGlvbihDRkksIGlkKSB7XG5cbiAgICB2YXIgc2VsZWN0ZWRFbGVtZW50cztcbiAgICB2YXIgYm9va21hcmtNYXJrZXJIdG1sID0gdGhpcy5nZXRCb29rbWFya01hcmtlcihDRkksIGlkKTtcbiAgICB2YXIgJHRhcmdldEltYWdlO1xuXG4gICAgdHJ5IHtcbiAgICAgICR0YXJnZXRJbWFnZSA9IHRoaXMuZXB1YkNGSS5nZXRUYXJnZXRFbGVtZW50KFxuICAgICAgICBDRkksXG4gICAgICAgIHRoaXMuZ2V0KFwiY29udGVudERvY3VtZW50RE9NXCIpLCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXVxuICAgICAgKTtcbiAgICAgIHRoaXMuYW5ub3RhdGlvbnMuYWRkSW1hZ2VBbm5vdGF0aW9uKENGSSwgJHRhcmdldEltYWdlWzBdLCBpZCk7XG5cbiAgICAgIHJldHVybiB7XG5cbiAgICAgICAgQ0ZJOiBDRkksXG4gICAgICAgIHNlbGVjdGVkRWxlbWVudHM6ICR0YXJnZXRJbWFnZVswXVxuICAgICAgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gdGhpcyByZXR1cm5zIGEgcGFydGlhbCBDRkkgb25seSEhXG4gIGdldEN1cnJlbnRTZWxlY3Rpb25DRkk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJyZW50U2VsZWN0aW9uID0gdGhpcy5nZXRDdXJyZW50U2VsZWN0aW9uUmFuZ2UoKTtcbiAgICB2YXIgQ0ZJO1xuICAgIGlmIChjdXJyZW50U2VsZWN0aW9uKSB7XG4gICAgICBzZWxlY3Rpb25JbmZvID0gdGhpcy5nZXRTZWxlY3Rpb25JbmZvKGN1cnJlbnRTZWxlY3Rpb24pO1xuICAgICAgQ0ZJID0gc2VsZWN0aW9uSW5mby5DRkk7XG4gICAgfVxuXG4gICAgcmV0dXJuIENGSTtcbiAgfSxcblxuICAvLyB0aGlzIHJldHVybnMgYSBwYXJ0aWFsIENGSSBvbmx5ISFcbiAgZ2V0Q3VycmVudFNlbGVjdGlvbk9mZnNldENGSTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSB0aGlzLmdldEN1cnJlbnRTZWxlY3Rpb25SYW5nZSgpO1xuXG4gICAgdmFyIENGSTtcbiAgICBpZiAoY3VycmVudFNlbGVjdGlvbikge1xuICAgICAgQ0ZJID0gdGhpcy5nZW5lcmF0ZUNoYXJPZmZzZXRDRkkoY3VycmVudFNlbGVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBDRkk7XG4gIH0sXG5cblxuICAvLy8gVE9ET0RNIHJlZmFjdG9yIHRoaGlzIHVzaW5nIGdldEN1cnJlbnRTZWxlY3Rpb25DRkkgKGFib3ZlKVxuXG5cbiAgYWRkU2VsZWN0aW9uSGlnaGxpZ2h0OiBmdW5jdGlvbihpZCwgdHlwZSwgc3R5bGVzKSB7XG5cbiAgICB2YXIgYXJiaXRyYXJ5UGFja2FnZURvY0NGSSA9IFwiLzk5IVwiXG4gICAgdmFyIGdlbmVyYXRlZENvbnRlbnREb2NDRkk7XG4gICAgdmFyIENGSTtcbiAgICB2YXIgc2VsZWN0aW9uSW5mbztcbiAgICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IHRoaXMuZ2V0Q3VycmVudFNlbGVjdGlvblJhbmdlKCk7XG4gICAgdmFyIGFubm90YXRpb25JbmZvO1xuXG4gICAgaWYgKGN1cnJlbnRTZWxlY3Rpb24pIHtcblxuICAgICAgc2VsZWN0aW9uSW5mbyA9IHRoaXMuZ2V0U2VsZWN0aW9uSW5mbyhjdXJyZW50U2VsZWN0aW9uKTtcbiAgICAgIGdlbmVyYXRlZENvbnRlbnREb2NDRkkgPSBzZWxlY3Rpb25JbmZvLkNGSTtcbiAgICAgIENGSSA9IFwiZXB1YmNmaShcIiArIGFyYml0cmFyeVBhY2thZ2VEb2NDRkkgKyBnZW5lcmF0ZWRDb250ZW50RG9jQ0ZJICsgXCIpXCI7XG4gICAgICBpZiAodHlwZSA9PT0gXCJoaWdobGlnaHRcIikge1xuICAgICAgICBhbm5vdGF0aW9uSW5mbyA9IHRoaXMuYWRkSGlnaGxpZ2h0KENGSSwgaWQsIHR5cGUsIHN0eWxlcyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwidW5kZXJsaW5lXCIpIHtcbiAgICAgICAgYW5ub3RhdGlvbkluZm8gPSB0aGlzLmFkZEhpZ2hsaWdodChDRkksIGlkLCB0eXBlLCBzdHlsZXMpO1xuICAgICAgfVxuXG4gICAgICAvLyBSYXRpb25hbGU6IFRoZSBhbm5vdGF0aW9uSW5mbyBvYmplY3QgcmV0dXJuZWQgZnJvbSAuYWRkQm9va21hcmsoLi4uKSBjb250YWlucyB0aGUgc2FtZSB2YWx1ZSBvZiBcbiAgICAgIC8vICAgdGhlIENGSSB2YXJpYWJsZSBpbiB0aGUgY3VycmVudCBzY29wZS4gU2luY2UgdGhpcyBDRkkgdmFyaWFibGUgY29udGFpbnMgYSBcImhhY2tlZFwiIENGSSB2YWx1ZSAtXG4gICAgICAvLyAgIG9ubHkgdGhlIGNvbnRlbnQgZG9jdW1lbnQgcG9ydGlvbiBpcyB2YWxpZCAtIHdlIHdhbnQgdG8gcmVwbGFjZSB0aGUgYW5ub3RhdGlvbkluZm8uQ0ZJIHByb3BlcnR5IHdpdGhcbiAgICAgIC8vICAgdGhlIHBhcnRpYWwgY29udGVudCBkb2N1bWVudCBDRkkgcG9ydGlvbiB3ZSBvcmlnaW5hbGx5IGdlbmVyYXRlZC5cbiAgICAgIGFubm90YXRpb25JbmZvLkNGSSA9IGdlbmVyYXRlZENvbnRlbnREb2NDRkk7XG4gICAgICByZXR1cm4gYW5ub3RhdGlvbkluZm87XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdGhpbmcgc2VsZWN0ZWRcIik7XG4gICAgfVxuICB9LFxuXG4gIGFkZFNlbGVjdGlvbkJvb2ttYXJrOiBmdW5jdGlvbihpZCwgdHlwZSkge1xuXG4gICAgdmFyIGFyYml0cmFyeVBhY2thZ2VEb2NDRkkgPSBcIi85OSFcIlxuICAgIHZhciBnZW5lcmF0ZWRDb250ZW50RG9jQ0ZJO1xuICAgIHZhciBDRkk7XG4gICAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSB0aGlzLmdldEN1cnJlbnRTZWxlY3Rpb25SYW5nZSgpO1xuICAgIHZhciBhbm5vdGF0aW9uSW5mbztcblxuICAgIGlmIChjdXJyZW50U2VsZWN0aW9uKSB7XG5cbiAgICAgIGdlbmVyYXRlZENvbnRlbnREb2NDRkkgPSB0aGlzLmdlbmVyYXRlQ2hhck9mZnNldENGSShjdXJyZW50U2VsZWN0aW9uKTtcbiAgICAgIENGSSA9IFwiZXB1YmNmaShcIiArIGFyYml0cmFyeVBhY2thZ2VEb2NDRkkgKyBnZW5lcmF0ZWRDb250ZW50RG9jQ0ZJICsgXCIpXCI7XG4gICAgICBhbm5vdGF0aW9uSW5mbyA9IHRoaXMuYWRkQm9va21hcmsoQ0ZJLCBpZCwgdHlwZSk7XG5cbiAgICAgIC8vIFJhdGlvbmFsZTogVGhlIGFubm90YXRpb25JbmZvIG9iamVjdCByZXR1cm5lZCBmcm9tIC5hZGRCb29rbWFyayguLi4pIGNvbnRhaW5zIHRoZSBzYW1lIHZhbHVlIG9mIFxuICAgICAgLy8gICB0aGUgQ0ZJIHZhcmlhYmxlIGluIHRoZSBjdXJyZW50IHNjb3BlLiBTaW5jZSB0aGlzIENGSSB2YXJpYWJsZSBjb250YWlucyBhIFwiaGFja2VkXCIgQ0ZJIHZhbHVlIC1cbiAgICAgIC8vICAgb25seSB0aGUgY29udGVudCBkb2N1bWVudCBwb3J0aW9uIGlzIHZhbGlkIC0gd2Ugd2FudCB0byByZXBsYWNlIHRoZSBhbm5vdGF0aW9uSW5mby5DRkkgcHJvcGVydHkgd2l0aFxuICAgICAgLy8gICB0aGUgcGFydGlhbCBjb250ZW50IGRvY3VtZW50IENGSSBwb3J0aW9uIHdlIG9yaWdpbmFsbHkgZ2VuZXJhdGVkLlxuICAgICAgYW5ub3RhdGlvbkluZm8uQ0ZJID0gZ2VuZXJhdGVkQ29udGVudERvY0NGSTtcbiAgICAgIHJldHVybiBhbm5vdGF0aW9uSW5mbztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90aGluZyBzZWxlY3RlZFwiKTtcbiAgICB9XG4gIH0sXG5cbiAgYWRkU2VsZWN0aW9uSW1hZ2VBbm5vdGF0aW9uOiBmdW5jdGlvbihpZCkge1xuXG4gICAgdmFyIGFyYml0cmFyeVBhY2thZ2VEb2NDRkkgPSBcIi85OSFcIlxuICAgIHZhciBnZW5lcmF0ZWRDb250ZW50RG9jQ0ZJO1xuICAgIHZhciBDRkk7XG4gICAgdmFyIHNlbGVjdGlvbkluZm87XG4gICAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSB0aGlzLmdldEN1cnJlbnRTZWxlY3Rpb25SYW5nZSgpO1xuICAgIHZhciBhbm5vdGF0aW9uSW5mbztcbiAgICB2YXIgZmlyc3RTZWxlY3RlZEltYWdlO1xuXG4gICAgaWYgKGN1cnJlbnRTZWxlY3Rpb24pIHtcblxuICAgICAgc2VsZWN0aW9uSW5mbyA9IHRoaXMuZ2V0U2VsZWN0aW9uSW5mbyhjdXJyZW50U2VsZWN0aW9uLCBbXCJpbWdcIl0pO1xuICAgICAgZmlyc3RTZWxlY3RlZEltYWdlID0gc2VsZWN0aW9uSW5mby5zZWxlY3RlZEVsZW1lbnRzWzBdO1xuICAgICAgZ2VuZXJhdGVkQ29udGVudERvY0NGSSA9IHRoaXMuZXB1YkNGSS5nZW5lcmF0ZUVsZW1lbnRDRklDb21wb25lbnQoXG4gICAgICAgIGZpcnN0U2VsZWN0ZWRJbWFnZSwgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl1cbiAgICAgICk7XG4gICAgICBDRkkgPSBcImVwdWJjZmkoXCIgKyBhcmJpdHJhcnlQYWNrYWdlRG9jQ0ZJICsgZ2VuZXJhdGVkQ29udGVudERvY0NGSSArIFwiKVwiO1xuICAgICAgYW5ub3RhdGlvbkluZm8gPSB0aGlzLmFkZEltYWdlQW5ub3RhdGlvbihDRkksIGlkKTtcblxuICAgICAgLy8gUmF0aW9uYWxlOiBUaGUgYW5ub3RhdGlvbkluZm8gb2JqZWN0IHJldHVybmVkIGZyb20gLmFkZEJvb2ttYXJrKC4uLikgY29udGFpbnMgdGhlIHNhbWUgdmFsdWUgb2YgXG4gICAgICAvLyAgIHRoZSBDRkkgdmFyaWFibGUgaW4gdGhlIGN1cnJlbnQgc2NvcGUuIFNpbmNlIHRoaXMgQ0ZJIHZhcmlhYmxlIGNvbnRhaW5zIGEgXCJoYWNrZWRcIiBDRkkgdmFsdWUgLVxuICAgICAgLy8gICBvbmx5IHRoZSBjb250ZW50IGRvY3VtZW50IHBvcnRpb24gaXMgdmFsaWQgLSB3ZSB3YW50IHRvIHJlcGxhY2UgdGhlIGFubm90YXRpb25JbmZvLkNGSSBwcm9wZXJ0eSB3aXRoXG4gICAgICAvLyAgIHRoZSBwYXJ0aWFsIGNvbnRlbnQgZG9jdW1lbnQgQ0ZJIHBvcnRpb24gd2Ugb3JpZ2luYWxseSBnZW5lcmF0ZWQuXG4gICAgICBhbm5vdGF0aW9uSW5mby5DRkkgPSBnZW5lcmF0ZWRDb250ZW50RG9jQ0ZJO1xuICAgICAgcmV0dXJuIGFubm90YXRpb25JbmZvO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3RoaW5nIHNlbGVjdGVkXCIpO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGVBbm5vdGF0aW9uVmlldzogZnVuY3Rpb24oaWQsIHN0eWxlcykge1xuXG4gICAgdmFyIGFubm90YXRpb25WaWV3cyA9IHRoaXMuYW5ub3RhdGlvbnMudXBkYXRlQW5ub3RhdGlvblZpZXcoaWQsIHN0eWxlcyk7XG5cbiAgICByZXR1cm4gYW5ub3RhdGlvblZpZXdzO1xuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuICAvLyAgXCJQUklWQVRFXCIgSEVMUEVSUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICBnZXRTZWxlY3Rpb25JbmZvOiBmdW5jdGlvbihzZWxlY3RlZFJhbmdlLCBlbGVtZW50VHlwZSkge1xuXG4gICAgLy8gR2VuZXJhdGUgQ0ZJIGZvciBzZWxlY3RlZCB0ZXh0XG4gICAgdmFyIENGSSA9IHRoaXMuZ2VuZXJhdGVSYW5nZUNGSShzZWxlY3RlZFJhbmdlKTtcbiAgICB2YXIgaW50ZXJ2YWxTdGF0ZSA9IHtcbiAgICAgIHN0YXJ0RWxlbWVudEZvdW5kOiBmYWxzZSxcbiAgICAgIGVuZEVsZW1lbnRGb3VuZDogZmFsc2VcbiAgICB9O1xuICAgIHZhciBzZWxlY3RlZEVsZW1lbnRzID0gW107XG5cbiAgICBpZiAoIWVsZW1lbnRUeXBlKSB7XG4gICAgICB2YXIgZWxlbWVudFR5cGUgPSBbXCJ0ZXh0XCJdO1xuICAgIH1cblxuICAgIHRoaXMuZmluZFNlbGVjdGVkRWxlbWVudHMoXG4gICAgICBzZWxlY3RlZFJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLFxuICAgICAgc2VsZWN0ZWRSYW5nZS5zdGFydENvbnRhaW5lcixcbiAgICAgIHNlbGVjdGVkUmFuZ2UuZW5kQ29udGFpbmVyLFxuICAgICAgaW50ZXJ2YWxTdGF0ZSxcbiAgICAgIHNlbGVjdGVkRWxlbWVudHMsXG4gICAgICBlbGVtZW50VHlwZVxuICAgICk7XG5cbiAgICAvLyBSZXR1cm4gYSBsaXN0IG9mIHNlbGVjdGVkIHRleHQgbm9kZXMgYW5kIHRoZSBDRklcbiAgICByZXR1cm4ge1xuICAgICAgQ0ZJOiBDRkksXG4gICAgICBzZWxlY3RlZEVsZW1lbnRzOiBzZWxlY3RlZEVsZW1lbnRzXG4gICAgfTtcbiAgfSxcblxuICBnZW5lcmF0ZVJhbmdlQ0ZJOiBmdW5jdGlvbihzZWxlY3RlZFJhbmdlKSB7XG5cbiAgICB2YXIgc3RhcnROb2RlID0gc2VsZWN0ZWRSYW5nZS5zdGFydENvbnRhaW5lcjtcbiAgICB2YXIgZW5kTm9kZSA9IHNlbGVjdGVkUmFuZ2UuZW5kQ29udGFpbmVyO1xuICAgIHZhciBzdGFydE9mZnNldDtcbiAgICB2YXIgZW5kT2Zmc2V0O1xuICAgIHZhciByYW5nZUNGSUNvbXBvbmVudDtcblxuICAgIGlmIChzdGFydE5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFICYmIGVuZE5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG5cbiAgICAgIHN0YXJ0T2Zmc2V0ID0gc2VsZWN0ZWRSYW5nZS5zdGFydE9mZnNldDtcbiAgICAgIGVuZE9mZnNldCA9IHNlbGVjdGVkUmFuZ2UuZW5kT2Zmc2V0O1xuXG4gICAgICByYW5nZUNGSUNvbXBvbmVudCA9IHRoaXMuZXB1YkNGSS5nZW5lcmF0ZUNoYXJPZmZzZXRSYW5nZUNvbXBvbmVudChcbiAgICAgICAgc3RhcnROb2RlLFxuICAgICAgICBzdGFydE9mZnNldCxcbiAgICAgICAgZW5kTm9kZSxcbiAgICAgICAgZW5kT2Zmc2V0LCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXVxuICAgICAgKTtcbiAgICAgIHJldHVybiByYW5nZUNGSUNvbXBvbmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2VsZWN0aW9uIHN0YXJ0IGFuZCBlbmQgbXVzdCBiZSB0ZXh0IG5vZGVzXCIpO1xuICAgIH1cbiAgfSxcblxuICBnZW5lcmF0ZUNoYXJPZmZzZXRDRkk6IGZ1bmN0aW9uKHNlbGVjdGVkUmFuZ2UpIHtcblxuICAgIC8vIENoYXJhY3RlciBvZmZzZXRcbiAgICB2YXIgc3RhcnROb2RlID0gc2VsZWN0ZWRSYW5nZS5zdGFydENvbnRhaW5lcjtcbiAgICB2YXIgc3RhcnRPZmZzZXQgPSBzZWxlY3RlZFJhbmdlLnN0YXJ0T2Zmc2V0O1xuICAgIHZhciBjaGFyT2Zmc2V0Q0ZJO1xuXG4gICAgaWYgKHN0YXJ0Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgIGNoYXJPZmZzZXRDRkkgPSB0aGlzLmVwdWJDRkkuZ2VuZXJhdGVDaGFyYWN0ZXJPZmZzZXRDRklDb21wb25lbnQoXG4gICAgICAgIHN0YXJ0Tm9kZSxcbiAgICAgICAgc3RhcnRPZmZzZXQsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY2hhck9mZnNldENGSTtcbiAgfSxcblxuICAvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IENvbnZlcnQgdGhpcyB0byBqcXVlcnlcbiAgZmluZFNlbGVjdGVkRWxlbWVudHM6IGZ1bmN0aW9uKGN1cnJFbGVtZW50LCBzdGFydEVsZW1lbnQsIGVuZEVsZW1lbnQsIGludGVydmFsU3RhdGUsIHNlbGVjdGVkRWxlbWVudHMsIGVsZW1lbnRUeXBlcykge1xuXG4gICAgaWYgKGN1cnJFbGVtZW50ID09PSBzdGFydEVsZW1lbnQpIHtcbiAgICAgIGludGVydmFsU3RhdGUuc3RhcnRFbGVtZW50Rm91bmQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpbnRlcnZhbFN0YXRlLnN0YXJ0RWxlbWVudEZvdW5kID09PSB0cnVlKSB7XG4gICAgICB0aGlzLmFkZEVsZW1lbnQoY3VyckVsZW1lbnQsIHNlbGVjdGVkRWxlbWVudHMsIGVsZW1lbnRUeXBlcyk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJFbGVtZW50ID09PSBlbmRFbGVtZW50KSB7XG4gICAgICBpbnRlcnZhbFN0YXRlLmVuZEVsZW1lbnRGb3VuZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGN1cnJFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHRoaXMuZmluZFNlbGVjdGVkRWxlbWVudHMoY3VyckVsZW1lbnQuZmlyc3RDaGlsZCwgc3RhcnRFbGVtZW50LCBlbmRFbGVtZW50LCBpbnRlcnZhbFN0YXRlLCBzZWxlY3RlZEVsZW1lbnRzLCBlbGVtZW50VHlwZXMpO1xuICAgICAgaWYgKGludGVydmFsU3RhdGUuZW5kRWxlbWVudEZvdW5kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VyckVsZW1lbnQubmV4dFNpYmxpbmcpIHtcbiAgICAgIHRoaXMuZmluZFNlbGVjdGVkRWxlbWVudHMoY3VyckVsZW1lbnQubmV4dFNpYmxpbmcsIHN0YXJ0RWxlbWVudCwgZW5kRWxlbWVudCwgaW50ZXJ2YWxTdGF0ZSwgc2VsZWN0ZWRFbGVtZW50cywgZWxlbWVudFR5cGVzKTtcbiAgICAgIGlmIChpbnRlcnZhbFN0YXRlLmVuZEVsZW1lbnRGb3VuZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFkZEVsZW1lbnQ6IGZ1bmN0aW9uKGN1cnJFbGVtZW50LCBzZWxlY3RlZEVsZW1lbnRzLCBlbGVtZW50VHlwZXMpIHtcblxuICAgIC8vIENoZWNrIGlmIHRoZSBub2RlIGlzIG9uZSBvZiB0aGUgdHlwZXNcbiAgICBfLmVhY2goZWxlbWVudFR5cGVzLCBmdW5jdGlvbihlbGVtZW50VHlwZSkge1xuXG4gICAgICBpZiAoZWxlbWVudFR5cGUgPT09IFwidGV4dFwiKSB7XG4gICAgICAgIGlmIChjdXJyRWxlbWVudC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLnB1c2goY3VyckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJChjdXJyRWxlbWVudCkuaXMoZWxlbWVudFR5cGUpKSB7XG4gICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5wdXNoKGN1cnJFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8vIFJhdGlvbmFsZTogVGhpcyBpcyBhIGNyb3NzLWJyb3dzZXIgbWV0aG9kIHRvIGdldCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHRleHRcbiAgZ2V0Q3VycmVudFNlbGVjdGlvblJhbmdlOiBmdW5jdGlvbigpIHtcblxuICAgIHZhciBjdXJyZW50U2VsZWN0aW9uO1xuICAgIHZhciBpZnJhbWVEb2N1bWVudCA9IHRoaXMuZ2V0KFwiY29udGVudERvY3VtZW50RE9NXCIpO1xuICAgIGlmIChpZnJhbWVEb2N1bWVudC5nZXRTZWxlY3Rpb24pIHtcbiAgICAgIGN1cnJlbnRTZWxlY3Rpb24gPSBpZnJhbWVEb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcblxuICAgICAgaWYgKGN1cnJlbnRTZWxlY3Rpb24gJiYgY3VycmVudFNlbGVjdGlvbi5yYW5nZUNvdW50ICYmIChjdXJyZW50U2VsZWN0aW9uLmFuY2hvck9mZnNldCAhPT0gY3VycmVudFNlbGVjdGlvbi5mb2N1c09mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpZnJhbWVEb2N1bWVudC5zZWxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBpZnJhbWVEb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0UGFnaW5hdGlvbkxlZnRPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyICRodG1sRWxlbWVudCA9ICQoXCJodG1sXCIsIHRoaXMuZ2V0KFwiY29udGVudERvY3VtZW50RE9NXCIpKTtcbiAgICB2YXIgb2Zmc2V0TGVmdFBpeGVscyA9ICRodG1sRWxlbWVudC5jc3MoXCJsZWZ0XCIpO1xuICAgIHZhciBvZmZzZXRMZWZ0ID0gcGFyc2VJbnQob2Zmc2V0TGVmdFBpeGVscy5yZXBsYWNlKFwicHhcIiwgXCJcIikpO1xuICAgIHJldHVybiBvZmZzZXRMZWZ0O1xuICB9LFxuXG4gIGdldEJvb2ttYXJrTWFya2VyOiBmdW5jdGlvbihDRkksIGlkKSB7XG5cbiAgICByZXR1cm4gXCI8c3BhbiBjbGFzcz0nYm9va21hcmstbWFya2VyIGNmaS1tYXJrZXInIGlkPSdcIiArIGlkICsgXCInIGRhdGEtY2ZpPSdcIiArIENGSSArIFwiJz48L3NwYW4+XCI7XG4gIH0sXG5cbiAgZ2V0UmFuZ2VTdGFydE1hcmtlcjogZnVuY3Rpb24oQ0ZJLCBpZCkge1xuXG4gICAgcmV0dXJuIFwiPHNwYW4gY2xhc3M9J3JhbmdlLXN0YXJ0LW1hcmtlciBjZmktbWFya2VyJyBpZD0nc3RhcnQtXCIgKyBpZCArIFwiJyBkYXRhLWNmaT0nXCIgKyBDRkkgKyBcIic+PC9zcGFuPlwiO1xuICB9LFxuXG4gIGdldFJhbmdlRW5kTWFya2VyOiBmdW5jdGlvbihDRkksIGlkKSB7XG5cbiAgICByZXR1cm4gXCI8c3BhbiBjbGFzcz0ncmFuZ2UtZW5kLW1hcmtlciBjZmktbWFya2VyJyBpZD0nZW5kLVwiICsgaWQgKyBcIicgZGF0YS1jZmk9J1wiICsgQ0ZJICsgXCInPjwvc3Bhbj5cIjtcbiAgfSxcblxuICBpbmplY3RBbm5vdGF0aW9uQ1NTOiBmdW5jdGlvbihhbm5vdGF0aW9uQ1NTVXJsKSB7XG5cbiAgICB2YXIgJGNvbnRlbnREb2NIZWFkID0gJChcImhlYWRcIiwgdGhpcy5nZXQoXCJjb250ZW50RG9jdW1lbnRET01cIikpO1xuICAgICRjb250ZW50RG9jSGVhZC5hcHBlbmQoXG4gICAgICAkKFwiPGxpbmsvPlwiLCB7XG4gICAgICAgIHJlbDogXCJzdHlsZXNoZWV0XCIsXG4gICAgICAgIGhyZWY6IGFubm90YXRpb25DU1NVcmwsXG4gICAgICAgIHR5cGU6IFwidGV4dC9jc3NcIlxuICAgICAgfSlcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWZsb3dhYmxlQW5ub3RhdGlvbnMiLCJ2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG5cbi8vIFJhdGlvbmFsZTogVGhlIG9yZGVyIG9mIHRoZXNlIG1hdHRlcnNcbnZhciBUZXh0TGluZUluZmVycmVyID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcblxuICBpbml0aWFsaXplOiBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7fSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBQVUJMSUMgSU5URVJGQUNFIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgaW5mZXJMaW5lczogZnVuY3Rpb24ocmVjdExpc3QpIHtcblxuICAgIHZhciBpbmZlcnJlZExpbmVzID0gW107XG4gICAgdmFyIG51bVJlY3RzID0gcmVjdExpc3QubGVuZ3RoO1xuICAgIHZhciBudW1MaW5lcyA9IDA7XG4gICAgdmFyIGN1cnJMaW5lO1xuICAgIHZhciBjdXJyUmVjdDtcbiAgICB2YXIgcmVjdEFwcGVuZGVkO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcmVjdFxuICAgIGZvciAodmFyIGN1cnJSZWN0TnVtID0gMDsgY3VyclJlY3ROdW0gPD0gbnVtUmVjdHMgLSAxOyBjdXJyUmVjdE51bSsrKSB7XG4gICAgICBjdXJyUmVjdCA9IHJlY3RMaXN0W2N1cnJSZWN0TnVtXTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHJlY3QgY2FuIGJlIGFkZGVkIHRvIGFueSBvZiB0aGUgY3VycmVudCBsaW5lc1xuICAgICAgcmVjdEFwcGVuZGVkID0gZmFsc2U7XG4gICAgICBmb3IgKHZhciBjdXJyTGluZU51bSA9IDA7IGN1cnJMaW5lTnVtIDw9IG51bUxpbmVzIC0gMTsgY3VyckxpbmVOdW0rKykge1xuICAgICAgICBjdXJyTGluZSA9IGluZmVycmVkTGluZXNbY3VyckxpbmVOdW1dO1xuXG4gICAgICAgIGlmICh0aGlzLmluY2x1ZGVSZWN0SW5MaW5lKGN1cnJMaW5lLCBjdXJyUmVjdC50b3AsIGN1cnJSZWN0LmxlZnQsIGN1cnJSZWN0LndpZHRoLCBjdXJyUmVjdC5oZWlnaHQpKSB7XG4gICAgICAgICAgdGhpcy5leHBhbmRMaW5lKGN1cnJMaW5lLCBjdXJyUmVjdC5sZWZ0LCBjdXJyUmVjdC50b3AsIGN1cnJSZWN0LndpZHRoLCBjdXJyUmVjdC5oZWlnaHQpO1xuICAgICAgICAgIHJlY3RBcHBlbmRlZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHJlY3RBcHBlbmRlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHRoZSByZWN0IGNhbid0IGJlIGFkZGVkIHRvIGFueSBleGlzdGluZyBsaW5lcywgY3JlYXRlIGEgbmV3IGxpbmVcbiAgICAgIGVsc2Uge1xuICAgICAgICBpbmZlcnJlZExpbmVzLnB1c2godGhpcy5jcmVhdGVOZXdMaW5lKGN1cnJSZWN0LmxlZnQsIGN1cnJSZWN0LnRvcCwgY3VyclJlY3Qud2lkdGgsIGN1cnJSZWN0LmhlaWdodCkpO1xuICAgICAgICBudW1MaW5lcyA9IG51bUxpbmVzICsgMTsgLy8gVXBkYXRlIHRoZSBudW1iZXIgb2YgbGluZXMsIHNvIHdlJ3JlIG5vdCB1c2luZyAubGVuZ3RoIG9uIGV2ZXJ5IGl0ZXJhdGlvblxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpbmZlcnJlZExpbmVzO1xuICB9LFxuXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gUFJJVkFURSBIRUxQRVJTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGluY2x1ZGVSZWN0SW5MaW5lOiBmdW5jdGlvbihjdXJyTGluZSwgcmVjdFRvcCwgcmVjdExlZnQsIHJlY3RXaWR0aCwgcmVjdEhlaWdodCkge1xuXG4gICAgLy8gaXMgb24gYW4gZXhpc3RpbmcgbGluZSA6IGJhc2VkIG9uIHZlcnRpY2FsIHBvc2l0aW9uXG4gICAgaWYgKHRoaXMucmVjdElzV2l0aGluTGluZVZlcnRpY2FsbHkocmVjdFRvcCwgcmVjdEhlaWdodCwgY3VyckxpbmUubWF4VG9wLCBjdXJyTGluZS5tYXhCb3R0b20pKSB7XG4gICAgICBpZiAodGhpcy5yZWN0SXNXaXRoaW5MaW5lSG9yaXpvbnRhbGx5KHJlY3RMZWZ0LCByZWN0V2lkdGgsIGN1cnJMaW5lLmxlZnQsIGN1cnJMaW5lLndpZHRoLCBjdXJyTGluZS5hdmdIZWlnaHQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICByZWN0SXNXaXRoaW5MaW5lVmVydGljYWxseTogZnVuY3Rpb24ocmVjdFRvcCwgcmVjdEhlaWdodCwgY3VyckxpbmVNYXhUb3AsIGN1cnJMaW5lTWF4Qm90dG9tKSB7XG5cbiAgICB2YXIgcmVjdEJvdHRvbSA9IHJlY3RUb3AgKyByZWN0SGVpZ2h0O1xuICAgIHZhciBsaW5lSGVpZ2h0ID0gY3VyckxpbmVNYXhCb3R0b20gLSBjdXJyTGluZU1heFRvcDtcbiAgICB2YXIgbGluZUhlaWdodEFkanVzdG1lbnQgPSAobGluZUhlaWdodCAqIDAuNzUpIC8gMjtcbiAgICB2YXIgcmVjdEhlaWdodEFkanVzdG1lbnQgPSAocmVjdEhlaWdodCAqIDAuNzUpIC8gMjtcblxuICAgIHJlY3RUb3AgPSByZWN0VG9wICsgcmVjdEhlaWdodEFkanVzdG1lbnQ7XG4gICAgcmVjdEJvdHRvbSA9IHJlY3RCb3R0b20gLSByZWN0SGVpZ2h0QWRqdXN0bWVudDtcbiAgICBjdXJyTGluZU1heFRvcCA9IGN1cnJMaW5lTWF4VG9wICsgbGluZUhlaWdodEFkanVzdG1lbnQ7XG4gICAgY3VyckxpbmVNYXhCb3R0b20gPSBjdXJyTGluZU1heEJvdHRvbSAtIGxpbmVIZWlnaHRBZGp1c3RtZW50O1xuXG4gICAgaWYgKHJlY3RUb3AgPT09IGN1cnJMaW5lTWF4VG9wICYmIHJlY3RCb3R0b20gPT09IGN1cnJMaW5lTWF4Qm90dG9tKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHJlY3RUb3AgPCBjdXJyTGluZU1heFRvcCAmJiByZWN0Qm90dG9tIDwgY3VyckxpbmVNYXhCb3R0b20gJiYgcmVjdEJvdHRvbSA+IGN1cnJMaW5lTWF4VG9wKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHJlY3RUb3AgPiBjdXJyTGluZU1heFRvcCAmJiByZWN0Qm90dG9tID4gY3VyckxpbmVNYXhCb3R0b20gJiYgcmVjdFRvcCA8IGN1cnJMaW5lTWF4Qm90dG9tKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHJlY3RUb3AgPiBjdXJyTGluZU1heFRvcCAmJiByZWN0Qm90dG9tIDwgY3VyckxpbmVNYXhCb3R0b20pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAocmVjdFRvcCA8IGN1cnJMaW5lTWF4VG9wICYmIHJlY3RCb3R0b20gPiBjdXJyTGluZU1heEJvdHRvbSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgcmVjdElzV2l0aGluTGluZUhvcml6b250YWxseTogZnVuY3Rpb24ocmVjdExlZnQsIHJlY3RXaWR0aCwgY3VyckxpbmVMZWZ0LCBjdXJyTGluZVdpZHRoLCBjdXJyTGluZUF2Z0hlaWdodCkge1xuXG4gICAgdmFyIGxpbmVHYXBIZXVyaXN0aWMgPSAyICogY3VyckxpbmVBdmdIZWlnaHQ7XG4gICAgdmFyIHJlY3RSaWdodCA9IHJlY3RMZWZ0ICsgcmVjdFdpZHRoO1xuICAgIHZhciBjdXJyTGluZVJpZ2h0ID0gcmVjdExlZnQgKyBjdXJyTGluZVdpZHRoO1xuXG4gICAgaWYgKChjdXJyTGluZUxlZnQgLSByZWN0UmlnaHQpID4gbGluZUdhcEhldXJpc3RpYykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoKHJlY3RMZWZ0IC0gY3VyckxpbmVSaWdodCkgPiBsaW5lR2FwSGV1cmlzdGljKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcblxuICBjcmVhdGVOZXdMaW5lOiBmdW5jdGlvbihyZWN0TGVmdCwgcmVjdFRvcCwgcmVjdFdpZHRoLCByZWN0SGVpZ2h0KSB7XG5cbiAgICB2YXIgbWF4Qm90dG9tID0gcmVjdFRvcCArIHJlY3RIZWlnaHQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogcmVjdExlZnQsXG4gICAgICBzdGFydFRvcDogcmVjdFRvcCxcbiAgICAgIHdpZHRoOiByZWN0V2lkdGgsXG4gICAgICBhdmdIZWlnaHQ6IHJlY3RIZWlnaHQsXG4gICAgICBtYXhUb3A6IHJlY3RUb3AsXG4gICAgICBtYXhCb3R0b206IG1heEJvdHRvbSxcbiAgICAgIG51bVJlY3RzOiAxXG4gICAgfTtcbiAgfSxcblxuICBleHBhbmRMaW5lOiBmdW5jdGlvbihjdXJyTGluZSwgcmVjdExlZnQsIHJlY3RUb3AsIHJlY3RXaWR0aCwgcmVjdEhlaWdodCkge1xuXG4gICAgdmFyIGxpbmVPbGRSaWdodCA9IGN1cnJMaW5lLmxlZnQgKyBjdXJyTGluZS53aWR0aDtcblxuICAgIC8vIFVwZGF0ZSBhbGwgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGN1cnJlbnQgbGluZSB3aXRoIHJlY3QgZGltZW5zaW9uc1xuICAgIHZhciByZWN0UmlnaHQgPSByZWN0TGVmdCArIHJlY3RXaWR0aDtcbiAgICB2YXIgcmVjdEJvdHRvbSA9IHJlY3RUb3AgKyByZWN0SGVpZ2h0O1xuICAgIHZhciBudW1SZWN0c1BsdXNPbmUgPSBjdXJyTGluZS5udW1SZWN0cyArIDE7XG5cbiAgICAvLyBBdmVyYWdlIGhlaWdodCBjYWxjdWxhdGlvblxuICAgIHZhciBjdXJyU3VtSGVpZ2h0cyA9IGN1cnJMaW5lLmF2Z0hlaWdodCAqIGN1cnJMaW5lLm51bVJlY3RzO1xuICAgIHZhciBhdmdIZWlnaHQgPSAoKGN1cnJTdW1IZWlnaHRzICsgcmVjdEhlaWdodCkgLyBudW1SZWN0c1BsdXNPbmUpO1xuICAgIGN1cnJMaW5lLmF2Z0hlaWdodCA9IGF2Z0hlaWdodDtcbiAgICBjdXJyTGluZS5udW1SZWN0cyA9IG51bVJlY3RzUGx1c09uZTtcblxuICAgIC8vIEV4cGFuZCB0aGUgbGluZSB2ZXJ0aWNhbGx5XG4gICAgY3VyckxpbmUgPSB0aGlzLmV4cGFuZExpbmVWZXJ0aWNhbGx5KGN1cnJMaW5lLCByZWN0VG9wLCByZWN0Qm90dG9tKTtcbiAgICBjdXJyTGluZSA9IHRoaXMuZXhwYW5kTGluZUhvcml6b250YWxseShjdXJyTGluZSwgcmVjdExlZnQsIHJlY3RSaWdodCk7XG5cbiAgICByZXR1cm4gY3VyckxpbmU7XG4gIH0sXG5cbiAgZXhwYW5kTGluZVZlcnRpY2FsbHk6IGZ1bmN0aW9uKGN1cnJMaW5lLCByZWN0VG9wLCByZWN0Qm90dG9tKSB7XG5cbiAgICBpZiAocmVjdFRvcCA8IGN1cnJMaW5lLm1heFRvcCkge1xuICAgICAgY3VyckxpbmUubWF4VG9wID0gcmVjdFRvcDtcbiAgICB9XG4gICAgaWYgKHJlY3RCb3R0b20gPiBjdXJyTGluZS5tYXhCb3R0b20pIHtcbiAgICAgIGN1cnJMaW5lLm1heEJvdHRvbSA9IHJlY3RCb3R0b207XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJMaW5lO1xuICB9LFxuXG4gIGV4cGFuZExpbmVIb3Jpem9udGFsbHk6IGZ1bmN0aW9uKGN1cnJMaW5lLCByZWN0TGVmdCwgcmVjdFJpZ2h0KSB7XG5cbiAgICB2YXIgbmV3TGluZUxlZnQgPSBjdXJyTGluZS5sZWZ0IDw9IHJlY3RMZWZ0ID8gY3VyckxpbmUubGVmdCA6IHJlY3RMZWZ0O1xuICAgIHZhciBsaW5lUmlnaHQgPSBjdXJyTGluZS5sZWZ0ICsgY3VyckxpbmUud2lkdGg7XG4gICAgdmFyIG5ld0xpbmVSaWdodCA9IGxpbmVSaWdodCA+PSByZWN0UmlnaHQgPyBsaW5lUmlnaHQgOiByZWN0UmlnaHQ7XG4gICAgdmFyIG5ld0xpbmVXaWR0aCA9IG5ld0xpbmVSaWdodCAtIG5ld0xpbmVMZWZ0O1xuICAgIGN1cnJMaW5lLmxlZnQgPSBuZXdMaW5lTGVmdDtcbiAgICBjdXJyTGluZS53aWR0aCA9IG5ld0xpbmVXaWR0aDtcblxuICAgIHJldHVybiBjdXJyTGluZTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dExpbmVJbmZlcnJlciIsInZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG52YXIgVGV4dExpbmVJbmZlcnJlciA9IHJlcXVpcmUoJy4vdGV4dC1saW5lLWluZmVycmVyJylcbnZhciBVbmRlcmxpbmVWaWV3ID0gcmVxdWlyZSgnLi91bmRlcmxpbmUtdmlldycpXG5cbnZhciBVbmRlcmxpbmVHcm91cCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gIGRlZmF1bHRzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJzZWxlY3RlZE5vZGVzXCI6IFtdLFxuICAgICAgXCJ1bmRlcmxpbmVWaWV3c1wiOiBbXVxuICAgIH07XG4gIH0sXG5cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge1xuXG4gICAgdGhpcy5jb25zdHJ1Y3RVbmRlcmxpbmVWaWV3cygpO1xuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLSBQUklWQVRFIEhFTFBFUlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgdW5kZXJsaW5lR3JvdXBDYWxsYmFjazogZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIC8vIFRyaWdnZXIgdGhpcyBldmVudCBvbiBlYWNoIG9mIHRoZSB1bmRlcmxpbmUgdmlld3MgKGV4Y2VwdCB0cmlnZ2VyaW5nIGV2ZW50KVxuICAgIGlmIChldmVudC50eXBlID09PSBcImNsaWNrXCIpIHtcbiAgICAgIHRoYXQuZ2V0KFwiYmJQYWdlU2V0Vmlld1wiKS50cmlnZ2VyKFwiYW5ub3RhdGlvbkNsaWNrZWRcIiwgXCJ1bmRlcmxpbmVcIiwgdGhhdC5nZXQoXCJDRklcIiksIHRoYXQuZ2V0KFwiaWRcIiksIGV2ZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBFdmVudHMgdGhhdCBhcmUgY2FsbGVkIG9uIGVhY2ggbWVtYmVyIG9mIHRoZSBncm91cFxuICAgIF8uZWFjaCh0aGlzLmdldChcInVuZGVybGluZVZpZXdzXCIpLCBmdW5jdGlvbih1bmRlcmxpbmVWaWV3KSB7XG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSBcIm1vdXNlZW50ZXJcIikge1xuICAgICAgICB1bmRlcmxpbmVWaWV3LnNldEhvdmVyVW5kZXJsaW5lKCk7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09IFwibW91c2VsZWF2ZVwiKSB7XG4gICAgICAgIHVuZGVybGluZVZpZXcuc2V0QmFzZVVuZGVybGluZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIGNvbnN0cnVjdFVuZGVybGluZVZpZXdzOiBmdW5jdGlvbigpIHtcblxuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB2YXIgcmVjdExpc3QgPSBbXTtcbiAgICB2YXIgaW5mZXJyZXI7XG4gICAgdmFyIGluZmVycmVkTGluZXM7XG5cbiAgICBfLmVhY2godGhpcy5nZXQoXCJzZWxlY3RlZE5vZGVzXCIpLCBmdW5jdGlvbihub2RlLCBpbmRleCkge1xuXG4gICAgICB2YXIgcmVjdHM7XG4gICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuICAgICAgcmVjdHMgPSByYW5nZS5nZXRDbGllbnRSZWN0cygpO1xuXG4gICAgICAvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IE1heWJlIGEgYmV0dGVyIHdheSB0byBhcHBlbmQgYW4gYXJyYXkgaGVyZVxuICAgICAgXy5lYWNoKHJlY3RzLCBmdW5jdGlvbihyZWN0KSB7XG4gICAgICAgIHJlY3RMaXN0LnB1c2gocmVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGluZmVycmVyID0gbmV3IFRleHRMaW5lSW5mZXJyZXIoKTtcbiAgICBpbmZlcnJlZExpbmVzID0gaW5mZXJyZXIuaW5mZXJMaW5lcyhyZWN0TGlzdCk7XG5cbiAgICBfLmVhY2goaW5mZXJyZWRMaW5lcywgZnVuY3Rpb24obGluZSwgaW5kZXgpIHtcblxuICAgICAgdmFyIHVuZGVybGluZVRvcCA9IGxpbmUuc3RhcnRUb3A7XG4gICAgICB2YXIgdW5kZXJsaW5lTGVmdCA9IGxpbmUubGVmdDtcbiAgICAgIHZhciB1bmRlcmxpbmVIZWlnaHQgPSBsaW5lLmF2Z0hlaWdodDtcbiAgICAgIHZhciB1bmRlcmxpbmVXaWR0aCA9IGxpbmUud2lkdGg7XG5cbiAgICAgIHZhciB1bmRlcmxpbmVWaWV3ID0gbmV3IFVuZGVybGluZVZpZXcoe1xuICAgICAgICBDRkk6IHRoYXQuZ2V0KFwiQ0ZJXCIpLFxuICAgICAgICB0b3A6IHVuZGVybGluZVRvcCArIHRoYXQuZ2V0KFwib2Zmc2V0VG9wQWRkaXRpb25cIiksXG4gICAgICAgIGxlZnQ6IHVuZGVybGluZUxlZnQgKyB0aGF0LmdldChcIm9mZnNldExlZnRBZGRpdGlvblwiKSxcbiAgICAgICAgaGVpZ2h0OiB1bmRlcmxpbmVIZWlnaHQsXG4gICAgICAgIHdpZHRoOiB1bmRlcmxpbmVXaWR0aCxcbiAgICAgICAgc3R5bGVzOiB0aGF0LmdldChcInN0eWxlc1wiKSxcbiAgICAgICAgdW5kZXJsaW5lR3JvdXBDYWxsYmFjazogdGhhdC51bmRlcmxpbmVHcm91cENhbGxiYWNrLFxuICAgICAgICBjYWxsYmFja0NvbnRleHQ6IHRoYXRcbiAgICAgIH0pO1xuXG4gICAgICB0aGF0LmdldChcInVuZGVybGluZVZpZXdzXCIpLnB1c2godW5kZXJsaW5lVmlldyk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVzZXRVbmRlcmxpbmVzOiBmdW5jdGlvbih2aWV3cG9ydEVsZW1lbnQsIG9mZnNldFRvcCwgb2Zmc2V0TGVmdCkge1xuXG4gICAgaWYgKG9mZnNldFRvcCkge1xuICAgICAgdGhpcy5zZXQoe1xuICAgICAgICBvZmZzZXRUb3BBZGRpdGlvbjogb2Zmc2V0VG9wXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG9mZnNldExlZnQpIHtcbiAgICAgIHRoaXMuc2V0KHtcbiAgICAgICAgb2Zmc2V0TGVmdEFkZGl0aW9uOiBvZmZzZXRMZWZ0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmRlc3Ryb3lDdXJyZW50VW5kZXJsaW5lcygpO1xuICAgIHRoaXMuY29uc3RydWN0VW5kZXJsaW5lVmlld3MoKTtcbiAgICB0aGlzLnJlbmRlclVuZGVybGluZXModmlld3BvcnRFbGVtZW50KTtcbiAgfSxcblxuICAvLyBSRUZBQ1RPUklORyBDQU5ESURBVEU6IEVuc3VyZSB0aGF0IGV2ZW50IGxpc3RlbmVycyBhcmUgYmVpbmcgcHJvcGVybHkgY2xlYW5lZCB1cC4gXG4gIGRlc3Ryb3lDdXJyZW50VW5kZXJsaW5lczogZnVuY3Rpb24oKSB7XG5cbiAgICBfLmVhY2godGhpcy5nZXQoXCJ1bmRlcmxpbmVWaWV3c1wiKSwgZnVuY3Rpb24odW5kZXJsaW5lVmlldykge1xuICAgICAgdW5kZXJsaW5lVmlldy5yZW1vdmUoKTtcbiAgICAgIHVuZGVybGluZVZpZXcub2ZmKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmdldChcInVuZGVybGluZVZpZXdzXCIpLmxlbmd0aCA9IDA7XG4gIH0sXG5cbiAgcmVuZGVyVW5kZXJsaW5lczogZnVuY3Rpb24odmlld3BvcnRFbGVtZW50KSB7XG5cbiAgICBfLmVhY2godGhpcy5nZXQoXCJ1bmRlcmxpbmVWaWV3c1wiKSwgZnVuY3Rpb24odmlldywgaW5kZXgpIHtcbiAgICAgICQodmlld3BvcnRFbGVtZW50KS5hcHBlbmQodmlldy5yZW5kZXIoKSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgdG9JbmZvOiBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiB7XG5cbiAgICAgIGlkOiB0aGlzLmdldChcImlkXCIpLFxuICAgICAgdHlwZTogXCJ1bmRlcmxpbmVcIixcbiAgICAgIENGSTogdGhpcy5nZXQoXCJDRklcIilcbiAgICB9O1xuICB9LFxuXG4gIHNldFN0eWxlczogZnVuY3Rpb24oc3R5bGVzKSB7XG5cbiAgICB2YXIgdW5kZXJsaW5lVmlld3MgPSB0aGlzLmdldCgndW5kZXJsaW5lVmlld3MnKTtcblxuICAgIHRoaXMuc2V0KHtcbiAgICAgIHN0eWxlczogc3R5bGVzXG4gICAgfSk7XG5cbiAgICBfLmVhY2godW5kZXJsaW5lVmlld3MsIGZ1bmN0aW9uKHZpZXcsIGluZGV4KSB7XG4gICAgICB2aWV3LnNldFN0eWxlcyhzdHlsZXMpO1xuICAgIH0pO1xuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVW5kZXJsaW5lR3JvdXAiLCJ2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG52YXIgVW5kZXJsaW5lID0gcmVxdWlyZSgnLi91bmRlcmxpbmUnKVxuXG52YXIgVW5kZXJsaW5lVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcblxuICBlbDogXCI8ZGl2IGNsYXNzPSd1bmRlcmxpbmUtcmFuZ2UnPiBcXFxuICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3RyYW5zcGFyZW50LXBhcnQnPjwvZGl2PiBcXFxuICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3VuZGVybGluZS1wYXJ0Jz48L2Rpdj4gXFxcbiAgICAgICAgICA8L2Rpdj5cIixcblxuICBldmVudHM6IHtcbiAgICBcIm1vdXNlZW50ZXJcIjogXCJ1bmRlcmxpbmVFdmVudFwiLFxuICAgIFwibW91c2VsZWF2ZVwiOiBcInVuZGVybGluZUV2ZW50XCIsXG4gICAgXCJjbGlja1wiOiBcInVuZGVybGluZUV2ZW50XCJcbiAgfSxcblxuICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cbiAgICB0aGlzLnVuZGVybGluZSA9IG5ldyBVbmRlcmxpbmUoe1xuICAgICAgQ0ZJOiBvcHRpb25zLkNGSSxcbiAgICAgIHRvcDogb3B0aW9ucy50b3AsXG4gICAgICBsZWZ0OiBvcHRpb25zLmxlZnQsXG4gICAgICBoZWlnaHQ6IG9wdGlvbnMuaGVpZ2h0LFxuICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGgsXG4gICAgICBzdHlsZXM6IG9wdGlvbnMuc3R5bGVzLFxuICAgICAgdW5kZXJsaW5lR3JvdXBDYWxsYmFjazogb3B0aW9ucy51bmRlcmxpbmVHcm91cENhbGxiYWNrLFxuICAgICAgY2FsbGJhY2tDb250ZXh0OiBvcHRpb25zLmNhbGxiYWNrQ29udGV4dFxuICAgIH0pO1xuXG4gICAgdGhpcy4kdHJhbnNwYXJlbnRFbGVtZW50ID0gJChcIi50cmFuc3BhcmVudC1wYXJ0XCIsIHRoaXMuJGVsKTtcbiAgICB0aGlzLiR1bmRlcmxpbmVFbGVtZW50ID0gJChcIi51bmRlcmxpbmUtcGFydFwiLCB0aGlzLiRlbCk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcblxuICAgIHRoaXMuc2V0Q1NTKCk7XG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH0sXG5cbiAgcmVzZXRQb3NpdGlvbjogZnVuY3Rpb24odG9wLCBsZWZ0LCBoZWlnaHQsIHdpZHRoKSB7XG5cbiAgICB0aGlzLnVuZGVybGluZS5zZXQoe1xuICAgICAgdG9wOiB0b3AsXG4gICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICB3aWR0aDogd2lkdGhcbiAgICB9KTtcbiAgICB0aGlzLnNldENTUygpO1xuICB9LFxuXG4gIHNldFN0eWxlczogZnVuY3Rpb24oc3R5bGVzKSB7XG5cbiAgICB0aGlzLnVuZGVybGluZS5zZXQoe1xuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgfSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfSxcblxuICBzZXRDU1M6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLnVuZGVybGluZS5nZXQoXCJzdHlsZXNcIikgfHwge307XG5cbiAgICB0aGlzLiRlbC5jc3Moe1xuICAgICAgXCJ0b3BcIjogdGhpcy51bmRlcmxpbmUuZ2V0KFwidG9wXCIpICsgXCJweFwiLFxuICAgICAgXCJsZWZ0XCI6IHRoaXMudW5kZXJsaW5lLmdldChcImxlZnRcIikgKyBcInB4XCIsXG4gICAgICBcImhlaWdodFwiOiB0aGlzLnVuZGVybGluZS5nZXQoXCJoZWlnaHRcIikgKyBcInB4XCIsXG4gICAgICBcIndpZHRoXCI6IHRoaXMudW5kZXJsaW5lLmdldChcIndpZHRoXCIpICsgXCJweFwiLFxuICAgIH0pO1xuXG4gICAgLy8gVW5kZXJsaW5lIHBhcnRcbiAgICB0aGlzLiR1bmRlcmxpbmVFbGVtZW50LmNzcyh7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogc3R5bGVzLmZpbGxfY29sb3IgfHwgXCJub3JtYWxcIixcbiAgICB9KTtcblxuXG4gICAgdGhpcy4kdW5kZXJsaW5lRWxlbWVudC5hZGRDbGFzcyhcInVuZGVybGluZVwiKTtcbiAgfSxcblxuICB1bmRlcmxpbmVFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHZhciB1bmRlcmxpbmVHcm91cENhbGxiYWNrID0gdGhpcy51bmRlcmxpbmUuZ2V0KFwidW5kZXJsaW5lR3JvdXBDYWxsYmFja1wiKTtcbiAgICB2YXIgdW5kZXJsaW5lR3JvdXBDb250ZXh0ID0gdGhpcy51bmRlcmxpbmUuZ2V0KFwiY2FsbGJhY2tDb250ZXh0XCIpO1xuICAgIHVuZGVybGluZUdyb3VwQ29udGV4dC51bmRlcmxpbmVHcm91cENhbGxiYWNrKGV2ZW50KTtcbiAgfSxcblxuICBzZXRCYXNlVW5kZXJsaW5lOiBmdW5jdGlvbigpIHtcblxuICAgIHRoaXMuJHVuZGVybGluZUVsZW1lbnQuYWRkQ2xhc3MoXCJ1bmRlcmxpbmVcIik7XG4gICAgdGhpcy4kdW5kZXJsaW5lRWxlbWVudC5yZW1vdmVDbGFzcyhcImhvdmVyLXVuZGVybGluZVwiKTtcbiAgfSxcblxuICBzZXRIb3ZlclVuZGVybGluZTogZnVuY3Rpb24oKSB7XG5cbiAgICB0aGlzLiR1bmRlcmxpbmVFbGVtZW50LmFkZENsYXNzKFwiaG92ZXItdW5kZXJsaW5lXCIpO1xuICAgIHRoaXMuJHVuZGVybGluZUVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJ1bmRlcmxpbmVcIik7XG4gIH0sXG59KTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFVuZGVybGluZVZpZXciLCJ2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG5cbnZhciBVbmRlcmxpbmUgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICBkZWZhdWx0czoge1xuICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlXG4gIH0sXG5cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge31cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVuZGVybGluZSIsIi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG52YXIgVVJJID0gcmVxdWlyZSgnVVJJanMnKTtcbnZhciBDb250ZW50VHlwZURpc2NvdmVyeSA9IHJlcXVpcmUoJy4vZGlzY292ZXItY29udGVudC10eXBlJyk7XG5cbmZ1bmN0aW9uIENvbnRlbnREb2N1bWVudEZldGNoZXIocHVibGljYXRpb25GZXRjaGVyLCBzcGluZUl0ZW0sIGxvYWRlZERvY3VtZW50VXJpLCBwdWJsaWNhdGlvblJlc291cmNlc0NhY2hlKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBfY29udGVudERvY3VtZW50UGF0aFJlbGF0aXZlVG9QYWNrYWdlID0gc3BpbmVJdGVtLmhyZWY7XG4gIHZhciBfcHVibGljYXRpb25GZXRjaGVyID0gcHVibGljYXRpb25GZXRjaGVyO1xuICB2YXIgX2NvbnRlbnREb2N1bWVudFRleHQ7XG4gIHZhciBfc3JjTWVkaWFUeXBlID0gc3BpbmVJdGVtLm1lZGlhX3R5cGU7XG4gIHZhciBfY29udGVudERvY3VtZW50RG9tO1xuICB2YXIgX3B1YmxpY2F0aW9uUmVzb3VyY2VzQ2FjaGUgPSBwdWJsaWNhdGlvblJlc291cmNlc0NhY2hlO1xuXG4gIC8vIFBVQkxJQyBBUElcblxuICB0aGlzLmZldGNoQ29udGVudERvY3VtZW50QW5kUmVzb2x2ZURvbSA9IGZ1bmN0aW9uKGNvbnRlbnREb2N1bWVudFJlc29sdmVkQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICBfcHVibGljYXRpb25GZXRjaGVyLnJlbGF0aXZlVG9QYWNrYWdlRmV0Y2hGaWxlQ29udGVudHMoX2NvbnRlbnREb2N1bWVudFBhdGhSZWxhdGl2ZVRvUGFja2FnZSwgJ3RleHQnLFxuICAgICAgZnVuY3Rpb24oY29udGVudERvY3VtZW50VGV4dCkge1xuICAgICAgICBfY29udGVudERvY3VtZW50VGV4dCA9IGNvbnRlbnREb2N1bWVudFRleHQ7XG4gICAgICAgIHNlbGYucmVzb2x2ZUludGVybmFsUGFja2FnZVJlc291cmNlcyhjb250ZW50RG9jdW1lbnRSZXNvbHZlZENhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgIH0sIGVycm9yQ2FsbGJhY2tcbiAgICApO1xuICB9O1xuXG4gIHRoaXMucmVzb2x2ZUludGVybmFsUGFja2FnZVJlc291cmNlcyA9IGZ1bmN0aW9uKHJlc29sdmVkRG9jdW1lbnRDYWxsYmFjaywgb25lcnJvcikge1xuXG4gICAgX2NvbnRlbnREb2N1bWVudERvbSA9IF9wdWJsaWNhdGlvbkZldGNoZXIubWFya3VwUGFyc2VyLnBhcnNlTWFya3VwKF9jb250ZW50RG9jdW1lbnRUZXh0LCBfc3JjTWVkaWFUeXBlKTtcbiAgICBzZXRCYXNlVXJpKF9jb250ZW50RG9jdW1lbnREb20sIGxvYWRlZERvY3VtZW50VXJpKTtcblxuICAgIHZhciByZXNvbHV0aW9uRGVmZXJyZWRzID0gW107XG5cbiAgICBpZiAoX3B1YmxpY2F0aW9uRmV0Y2hlci5zaG91bGRGZXRjaE1lZGlhQXNzZXRzUHJvZ3JhbW1hdGljYWxseSgpKSB7XG4gICAgICByZXNvbHZlRG9jdW1lbnRJbWFnZXMocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gICAgICByZXNvbHZlRG9jdW1lbnRBdWRpb3MocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gICAgICByZXNvbHZlRG9jdW1lbnRWaWRlb3MocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gICAgfVxuICAgIC8vIFRPRE86IHJlY3Vyc2l2ZSBmZXRjaGluZywgcGFyc2luZyBhbmQgRE9NIGNvbnN0cnVjdGlvbiBvZiBkb2N1bWVudHMgaW4gSUZSQU1FcyxcbiAgICAvLyB3aXRoIENTUyBwcmVwcm9jZXNzaW5nIGFuZCBvYmZ1c2NhdGVkIGZvbnQgaGFuZGxpbmdcbiAgICByZXNvbHZlRG9jdW1lbnRJZnJhbWVzKHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpO1xuICAgIC8vIFRPRE86IHJlc29sdXRpb24gKGUuZy4gdXNpbmcgRE9NIG11dGF0aW9uIGV2ZW50cykgb2Ygc2NyaXB0cyBsb2FkZWQgZHluYW1pY2FsbHkgYnkgc2NyaXB0c1xuICAgIHJlc29sdmVEb2N1bWVudFNjcmlwdHMocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gICAgcmVzb2x2ZURvY3VtZW50TGlua1N0eWxlc2hlZXRzKHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpO1xuICAgIHJlc29sdmVEb2N1bWVudEVtYmVkZGVkU3R5bGVzaGVldHMocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG5cbiAgICAkLndoZW4uYXBwbHkoJCwgcmVzb2x1dGlvbkRlZmVycmVkcykuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgIHJlc29sdmVkRG9jdW1lbnRDYWxsYmFjayhfY29udGVudERvY3VtZW50RG9tKTtcbiAgICB9KTtcblxuICB9O1xuXG4gIC8vIElOVEVSTkFMIEZVTkNUSU9OU1xuXG4gIGZ1bmN0aW9uIHNldEJhc2VVcmkoZG9jdW1lbnREb20sIGJhc2VVUkkpIHtcbiAgICB2YXIgYmFzZUVsZW0gPSBkb2N1bWVudERvbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYmFzZScpWzBdO1xuICAgIGlmICghYmFzZUVsZW0pIHtcbiAgICAgIGJhc2VFbGVtID0gZG9jdW1lbnREb20uY3JlYXRlRWxlbWVudCgnYmFzZScpO1xuXG4gICAgICB2YXIgYW5jaG9yID0gZG9jdW1lbnREb20uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgIGFuY2hvci5pbnNlcnRCZWZvcmUoYmFzZUVsZW0sIGFuY2hvci5jaGlsZE5vZGVzWzBdKTtcbiAgICB9XG4gICAgYmFzZUVsZW0uc2V0QXR0cmlidXRlKCdocmVmJywgYmFzZVVSSSk7XG4gIH1cblxuICBmdW5jdGlvbiBfaGFuZGxlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgaWYgKGVyci5tZXNzYWdlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgaWYgKGVyci5zdGFjaykge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZldGNoUmVzb3VyY2VGb3JFbGVtZW50KHJlc29sdmVkRWxlbSwgcmVmQXR0ck9yaWdWYWwsIHJlZkF0dHIsIGZldGNoTW9kZSwgcmVzb2x1dGlvbkRlZmVycmVkcyxcbiAgICBvbmVycm9yLCByZXNvdXJjZURhdGFQcmVwcm9jZXNzaW5nKSB7XG4gICAgdmFyIHJlc291cmNlVXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCA9IChuZXcgVVJJKHJlZkF0dHJPcmlnVmFsKSkuYWJzb2x1dGVUbyhfY29udGVudERvY3VtZW50UGF0aFJlbGF0aXZlVG9QYWNrYWdlKS50b1N0cmluZygpO1xuXG4gICAgdmFyIGNhY2hlZFJlc291cmNlVXJsID0gX3B1YmxpY2F0aW9uUmVzb3VyY2VzQ2FjaGUuZ2V0UmVzb3VyY2VVUkwocmVzb3VyY2VVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50KTtcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VSZWZBdHRySW5FbGVtKG5ld1Jlc291cmNlVXJsKSB7XG4gICAgICAvLyBTdG9yZSBvcmlnaW5hbCByZWZBdHRyVmFsIGluIGEgc3BlY2lhbCBhdHRyaWJ1dGUgdG8gcHJvdmlkZSBhY2Nlc3MgdG8gdGhlIG9yaWdpbmFsIGhyZWY6XG4gICAgICAkKHJlc29sdmVkRWxlbSkuZGF0YSgnZXB1YlppcE9yaWdIcmVmJywgcmVmQXR0ck9yaWdWYWwpO1xuICAgICAgJChyZXNvbHZlZEVsZW0pLmF0dHIocmVmQXR0ciwgbmV3UmVzb3VyY2VVcmwpO1xuICAgIH1cblxuICAgIGlmIChjYWNoZWRSZXNvdXJjZVVybCkge1xuICAgICAgcmVwbGFjZVJlZkF0dHJJbkVsZW0oY2FjaGVkUmVzb3VyY2VVcmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVzb2x1dGlvbkRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgICAgcmVzb2x1dGlvbkRlZmVycmVkcy5wdXNoKHJlc29sdXRpb25EZWZlcnJlZCk7XG5cbiAgICAgIF9wdWJsaWNhdGlvbkZldGNoZXIucmVsYXRpdmVUb1BhY2thZ2VGZXRjaEZpbGVDb250ZW50cyhyZXNvdXJjZVVyaVJlbGF0aXZlVG9QYWNrYWdlRG9jdW1lbnQsXG4gICAgICAgIGZldGNoTW9kZSxcbiAgICAgICAgZnVuY3Rpb24ocmVzb3VyY2VEYXRhKSB7XG5cbiAgICAgICAgICAvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIHRvIHJlcGxhY2UgZWxlbWVudCdzIHJlc291cmNlIFVSTCB3aXRoIFVSTCBvZiBmZXRjaGVkIGRhdGEuXG4gICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIHdpbGwgZWl0aGVyIGJlIGNhbGxlZCBkaXJlY3RseSwgaW1tZWRpYXRlbHkgKGlmIG5vIHByZXByb2Nlc3Npbmcgb2YgcmVzb3VyY2VEYXRhIGlzIGluIGVmZmVjdClcbiAgICAgICAgICAvLyBvciBpbmRpcmVjdGx5LCBsYXRlciBhZnRlciByZXNvdXJjZURhdGEgcHJlcHJvY2Vzc2luZyBmaW5pc2hlczpcbiAgICAgICAgICB2YXIgcmVwbGFjZVJlc291cmNlVVJMID0gZnVuY3Rpb24oZmluYWxSZXNvdXJjZURhdGEpIHtcbiAgICAgICAgICAgIC8vIENyZWF0aW5nIGFuIG9iamVjdCBVUkwgcmVxdWlyZXMgYSBCbG9iIG9iamVjdCwgc28gcmVzb3VyY2UgZGF0YSBmZXRjaGVkIGluIHRleHQgbW9kZSBuZWVkcyB0byBiZSB3cmFwcGVkIGluIGEgQmxvYjpcbiAgICAgICAgICAgIGlmIChmZXRjaE1vZGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICB2YXIgdGV4dFJlc291cmNlQ29udGVudFR5cGUgPSBDb250ZW50VHlwZURpc2NvdmVyeS5pZGVudGlmeUNvbnRlbnRUeXBlRnJvbUZpbGVOYW1lKHJlc291cmNlVXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCk7XG4gICAgICAgICAgICAgIHZhciBkZWNsYXJlZFR5cGUgPSAkKHJlc29sdmVkRWxlbSkuYXR0cigndHlwZScpO1xuICAgICAgICAgICAgICBpZiAoZGVjbGFyZWRUeXBlKSB7XG4gICAgICAgICAgICAgICAgdGV4dFJlc291cmNlQ29udGVudFR5cGUgPSBkZWNsYXJlZFR5cGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmluYWxSZXNvdXJjZURhdGEgPSBuZXcgQmxvYihbZmluYWxSZXNvdXJjZURhdGFdLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogdGV4dFJlc291cmNlQ29udGVudFR5cGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL25vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZSxKU1VucmVzb2x2ZWRGdW5jdGlvblxuICAgICAgICAgICAgdmFyIHJlc291cmNlT2JqZWN0VVJMID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoZmluYWxSZXNvdXJjZURhdGEpO1xuICAgICAgICAgICAgX3B1YmxpY2F0aW9uUmVzb3VyY2VzQ2FjaGUucHV0UmVzb3VyY2VVUkwocmVzb3VyY2VVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50LFxuICAgICAgICAgICAgICByZXNvdXJjZU9iamVjdFVSTCk7XG4gICAgICAgICAgICAvLyBUT0RPOiB0YWtlIGNhcmUgb2YgcmVsZWFzaW5nIG9iamVjdCBVUkxzIHdoZW4gbm8gbG9uZ2VyIG5lZWRlZFxuICAgICAgICAgICAgcmVwbGFjZVJlZkF0dHJJbkVsZW0ocmVzb3VyY2VPYmplY3RVUkwpO1xuICAgICAgICAgICAgcmVzb2x1dGlvbkRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHJlc291cmNlRGF0YVByZXByb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgIHJlc291cmNlRGF0YVByZXByb2Nlc3NpbmcocmVzb3VyY2VEYXRhLCByZXNvdXJjZVVyaVJlbGF0aXZlVG9QYWNrYWdlRG9jdW1lbnQsXG4gICAgICAgICAgICAgIHJlcGxhY2VSZXNvdXJjZVVSTCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcGxhY2VSZXNvdXJjZVVSTChyZXNvdXJjZURhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgb25lcnJvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmV0Y2hSZXNvdXJjZUZvckNzc1VybE1hdGNoKGNzc1VybE1hdGNoLCBjc3NSZXNvdXJjZURvd25sb2FkRGVmZXJyZWRzLFxuICAgIHN0eWxlU2hlZXRVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50LCBzdHlsZXNoZWV0Q3NzUmVzb3VyY2VVcmxzTWFwLFxuICAgIGlzU3R5bGVTaGVldFJlc291cmNlKSB7XG4gICAgdmFyIG9yaWdNYXRjaGVkVXJsU3RyaW5nID0gY3NzVXJsTWF0Y2hbMF07XG5cbiAgICB2YXIgZXh0cmFjdGVkVXJsQ2FuZGlkYXRlcyA9IGNzc1VybE1hdGNoLnNsaWNlKDIpO1xuICAgIHZhciBleHRyYWN0ZWRVcmwgPSBfLmZpbmQoZXh0cmFjdGVkVXJsQ2FuZGlkYXRlcywgZnVuY3Rpb24obWF0Y2hHcm91cCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBtYXRjaEdyb3VwICE9PSAndW5kZWZpbmVkJ1xuICAgIH0pO1xuXG4gICAgdmFyIGV4dHJhY3RlZFVyaSA9IG5ldyBVUkkoZXh0cmFjdGVkVXJsKTtcbiAgICB2YXIgaXNDc3NVcmxSZWxhdGl2ZSA9IGV4dHJhY3RlZFVyaS5zY2hlbWUoKSA9PT0gJyc7XG4gICAgaWYgKCFpc0Nzc1VybFJlbGF0aXZlKSB7XG4gICAgICAvLyBBYnNvbHV0ZSBVUkxzIGRvbid0IG5lZWQgcHJvZ3JhbW1hdGljIGZldGNoaW5nXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZXNvdXJjZVVyaVJlbGF0aXZlVG9QYWNrYWdlRG9jdW1lbnQgPSAobmV3IFVSSShleHRyYWN0ZWRVcmwpKS5hYnNvbHV0ZVRvKHN0eWxlU2hlZXRVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50KS50b1N0cmluZygpO1xuXG4gICAgdmFyIGNhY2hlZFJlc291cmNlVVJMID0gX3B1YmxpY2F0aW9uUmVzb3VyY2VzQ2FjaGUuZ2V0UmVzb3VyY2VVUkwocmVzb3VyY2VVcmlSZWxhdGl2ZVRvUGFja2FnZURvY3VtZW50KTtcblxuXG4gICAgaWYgKGNhY2hlZFJlc291cmNlVVJMKSB7XG4gICAgICBzdHlsZXNoZWV0Q3NzUmVzb3VyY2VVcmxzTWFwW29yaWdNYXRjaGVkVXJsU3RyaW5nXSA9IHtcbiAgICAgICAgaXNTdHlsZVNoZWV0UmVzb3VyY2U6IGlzU3R5bGVTaGVldFJlc291cmNlLFxuICAgICAgICByZXNvdXJjZU9iamVjdFVSTDogY2FjaGVkUmVzb3VyY2VVUkxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjc3NVcmxGZXRjaERlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgICAgY3NzUmVzb3VyY2VEb3dubG9hZERlZmVycmVkcy5wdXNoKGNzc1VybEZldGNoRGVmZXJyZWQpO1xuXG4gICAgICB2YXIgcHJvY2Vzc2VkQmxvYkNhbGxiYWNrID0gZnVuY3Rpb24ocmVzb3VyY2VEYXRhQmxvYikge1xuICAgICAgICAvL25vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZSxKU1VucmVzb2x2ZWRGdW5jdGlvblxuICAgICAgICB2YXIgcmVzb3VyY2VPYmplY3RVUkwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChyZXNvdXJjZURhdGFCbG9iKTtcbiAgICAgICAgc3R5bGVzaGVldENzc1Jlc291cmNlVXJsc01hcFtvcmlnTWF0Y2hlZFVybFN0cmluZ10gPSB7XG4gICAgICAgICAgaXNTdHlsZVNoZWV0UmVzb3VyY2U6IGlzU3R5bGVTaGVldFJlc291cmNlLFxuICAgICAgICAgIHJlc291cmNlT2JqZWN0VVJMOiByZXNvdXJjZU9iamVjdFVSTFxuICAgICAgICB9O1xuICAgICAgICBfcHVibGljYXRpb25SZXNvdXJjZXNDYWNoZS5wdXRSZXNvdXJjZVVSTChyZXNvdXJjZVVyaVJlbGF0aXZlVG9QYWNrYWdlRG9jdW1lbnQsIHJlc291cmNlT2JqZWN0VVJMKTtcbiAgICAgICAgY3NzVXJsRmV0Y2hEZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdmFyIGZldGNoRXJyb3JDYWxsYmFjayA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIF9oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIGNzc1VybEZldGNoRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGZldGNoTW9kZTtcbiAgICAgIHZhciBmZXRjaENhbGxiYWNrO1xuICAgICAgaWYgKGlzU3R5bGVTaGVldFJlc291cmNlKSB7XG4gICAgICAgIC8vIFRPRE86IHRlc3Qgd2hldGhlciByZWN1cnNpb24gd29ya3MgZm9yIG5lc3RlZCBAaW1wb3J0IHJ1bGVzIHdpdGggYXJiaXRyYXJ5IGluZGlyZWN0aW9uIGRlcHRoLlxuICAgICAgICBmZXRjaE1vZGUgPSAndGV4dCc7XG4gICAgICAgIGZldGNoQ2FsbGJhY2sgPSBmdW5jdGlvbihzdHlsZVNoZWV0UmVzb3VyY2VEYXRhKSB7XG4gICAgICAgICAgcHJlcHJvY2Vzc0Nzc1N0eWxlU2hlZXREYXRhKHN0eWxlU2hlZXRSZXNvdXJjZURhdGEsIHJlc291cmNlVXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHByZXByb2Nlc3NlZFN0eWxlU2hlZXREYXRhKSB7XG4gICAgICAgICAgICAgIHZhciByZXNvdXJjZURhdGFCbG9iID0gbmV3IEJsb2IoW3ByZXByb2Nlc3NlZFN0eWxlU2hlZXREYXRhXSwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2NzcydcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHByb2Nlc3NlZEJsb2JDYWxsYmFjayhyZXNvdXJjZURhdGFCbG9iKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoTW9kZSA9ICdibG9iJztcbiAgICAgICAgZmV0Y2hDYWxsYmFjayA9IHByb2Nlc3NlZEJsb2JDYWxsYmFjaztcbiAgICAgIH1cblxuICAgICAgX3B1YmxpY2F0aW9uRmV0Y2hlci5yZWxhdGl2ZVRvUGFja2FnZUZldGNoRmlsZUNvbnRlbnRzKHJlc291cmNlVXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCxcbiAgICAgICAgZmV0Y2hNb2RlLFxuICAgICAgICBmZXRjaENhbGxiYWNrLCBmZXRjaEVycm9yQ2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXByb2Nlc3NDc3NTdHlsZVNoZWV0RGF0YShzdHlsZVNoZWV0UmVzb3VyY2VEYXRhLCBzdHlsZVNoZWV0VXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCxcbiAgICBjYWxsYmFjaykge1xuICAgIHZhciBjc3NVcmxSZWdleHAgPSAvW1V1XVtScl1bTGxdXFwoXFxzKihbJ10oW14nXSspWyddfFtcIl0oW15cIl0rKVtcIl18KFteKV0rKSlcXHMqXFwpL2c7XG4gICAgdmFyIG5vblVybENzc0ltcG9ydFJlZ2V4cCA9IC9AW0lpXVtNbV1bUHBdW09vXVtScl1bVHRdXFxzKignKFteJ10rKSd8XCIoW15cIl0rKVwiKS9nO1xuICAgIHZhciBzdHlsZXNoZWV0Q3NzUmVzb3VyY2VVcmxzTWFwID0ge307XG4gICAgdmFyIGNzc1Jlc291cmNlRG93bmxvYWREZWZlcnJlZHMgPSBbXTtcbiAgICAvLyBHbyB0aHJvdWdoIHRoZSBzdHlsZXNoZWV0IHRleHQgdXNpbmcgYWxsIHJlZ2V4cHMgYW5kIHByb2Nlc3MgYWNjb3JkaW5nIHRvIHRob3NlIHJlZ2V4cCBtYXRjaGVzLCBpZiBhbnk6XG4gICAgW25vblVybENzc0ltcG9ydFJlZ2V4cCwgY3NzVXJsUmVnZXhwXS5mb3JFYWNoKGZ1bmN0aW9uKHByb2Nlc3NpbmdSZWdleHApIHtcbiAgICAgIC8vIGV4dHJhY3QgYWxsIFVSTCByZWZlcmVuY2VzIGluIHRoZSBDU1Mgc2hlZXQsXG4gICAgICB2YXIgY3NzVXJsTWF0Y2ggPSBwcm9jZXNzaW5nUmVnZXhwLmV4ZWMoc3R5bGVTaGVldFJlc291cmNlRGF0YSk7XG4gICAgICB3aGlsZSAoY3NzVXJsTWF0Y2ggIT0gbnVsbCkge1xuICAgICAgICAvLyB0aGVuIGZldGNoIGFuZCByZXBsYWNlIHRoZW0gd2l0aCBjb3JyZXNwb25kaW5nIG9iamVjdCBVUkxzOlxuICAgICAgICB2YXIgaXNTdHlsZVNoZWV0UmVzb3VyY2UgPSBmYWxzZTtcbiAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBvZiBAaW1wb3J0LWVkIHN0eWxlc2hlZXQgZmlsZXMgLSByZWN1cnNpdmUgcHJlcHJvY2Vzc2luZzpcbiAgICAgICAgLy8gVE9ETzogd2lsbCBub3QgcHJvcGVybHkgaGFuZGxlIEBpbXBvcnQgdXJsKC4uLik6XG4gICAgICAgIGlmIChwcm9jZXNzaW5nUmVnZXhwID09IG5vblVybENzc0ltcG9ydFJlZ2V4cCkge1xuICAgICAgICAgIC8vIFRoaXMgcmVzb3VyY2UgVVJMIHBvaW50cyB0byBhbiBAaW1wb3J0LWVkIENTUyBzdHlsZXNoZWV0IGZpbGUuIE5lZWQgdG8gcHJlcHJvY2VzcyBpdHMgdGV4dFxuICAgICAgICAgIC8vIGFmdGVyIGZldGNoaW5nIGJ1dCBiZWZvcmUgbWFraW5nIGFuIG9iamVjdCBVUkwgb2YgaXQ6XG4gICAgICAgICAgaXNTdHlsZVNoZWV0UmVzb3VyY2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZldGNoUmVzb3VyY2VGb3JDc3NVcmxNYXRjaChjc3NVcmxNYXRjaCwgY3NzUmVzb3VyY2VEb3dubG9hZERlZmVycmVkcyxcbiAgICAgICAgICBzdHlsZVNoZWV0VXJpUmVsYXRpdmVUb1BhY2thZ2VEb2N1bWVudCwgc3R5bGVzaGVldENzc1Jlc291cmNlVXJsc01hcCwgaXNTdHlsZVNoZWV0UmVzb3VyY2UpO1xuICAgICAgICBjc3NVcmxNYXRjaCA9IHByb2Nlc3NpbmdSZWdleHAuZXhlYyhzdHlsZVNoZWV0UmVzb3VyY2VEYXRhKTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgaWYgKGNzc1Jlc291cmNlRG93bmxvYWREZWZlcnJlZHMubGVuZ3RoID4gMCkge1xuICAgICAgJC53aGVuLmFwcGx5KCQsIGNzc1Jlc291cmNlRG93bmxvYWREZWZlcnJlZHMpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIG9yaWdNYXRjaGVkVXJsU3RyaW5nIGluIHN0eWxlc2hlZXRDc3NSZXNvdXJjZVVybHNNYXApIHtcbiAgICAgICAgICB2YXIgcHJvY2Vzc2VkUmVzb3VyY2VEZXNjcmlwdG9yID0gc3R5bGVzaGVldENzc1Jlc291cmNlVXJsc01hcFtvcmlnTWF0Y2hlZFVybFN0cmluZ107XG5cblxuICAgICAgICAgIHZhciBwcm9jZXNzZWRVcmxTdHJpbmc7XG4gICAgICAgICAgaWYgKHByb2Nlc3NlZFJlc291cmNlRGVzY3JpcHRvci5pc1N0eWxlU2hlZXRSZXNvdXJjZSkge1xuICAgICAgICAgICAgcHJvY2Vzc2VkVXJsU3RyaW5nID0gJ0BpbXBvcnQgXCInICsgcHJvY2Vzc2VkUmVzb3VyY2VEZXNjcmlwdG9yLnJlc291cmNlT2JqZWN0VVJMICsgJ1wiJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc2VkVXJsU3RyaW5nID0gXCJ1cmwoJ1wiICsgcHJvY2Vzc2VkUmVzb3VyY2VEZXNjcmlwdG9yLnJlc291cmNlT2JqZWN0VVJMICsgXCInKVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JpZ01hdGNoZWRVcmxTdHJpbmdFc2NhcGVkID0gb3JpZ01hdGNoZWRVcmxTdHJpbmcucmVwbGFjZSgvW1xcLVxcW1xcXVxcL1xce1xcfVxcKFxcKVxcKlxcK1xcP1xcLlxcXFxcXF5cXCRcXHxdL2csXG4gICAgICAgICAgICBcIlxcXFwkJlwiKTtcbiAgICAgICAgICB2YXIgb3JpZ01hdGNoZWRVcmxTdHJpbmdSZWdFeHAgPSBuZXcgUmVnRXhwKG9yaWdNYXRjaGVkVXJsU3RyaW5nRXNjYXBlZCwgJ2cnKTtcbiAgICAgICAgICAvL25vaW5zcGVjdGlvbiBKU0NoZWNrRnVuY3Rpb25TaWduYXR1cmVzXG4gICAgICAgICAgc3R5bGVTaGVldFJlc291cmNlRGF0YSA9XG4gICAgICAgICAgICBzdHlsZVNoZWV0UmVzb3VyY2VEYXRhLnJlcGxhY2Uob3JpZ01hdGNoZWRVcmxTdHJpbmdSZWdFeHAsIHByb2Nlc3NlZFVybFN0cmluZywgJ2cnKTtcblxuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKHN0eWxlU2hlZXRSZXNvdXJjZURhdGEpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHN0eWxlU2hlZXRSZXNvdXJjZURhdGEpO1xuICAgIH1cbiAgfVxuXG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVJlc291cmNlRWxlbWVudHMoZWxlbU5hbWUsIHJlZkF0dHIsIGZldGNoTW9kZSwgcmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcixcbiAgICByZXNvdXJjZURhdGFQcmVwcm9jZXNzaW5nKSB7XG5cbiAgICB2YXIgcmVzb2x2ZWRFbGVtcyA9ICQoZWxlbU5hbWUgKyAnWycgKyByZWZBdHRyICsgJ10nLCBfY29udGVudERvY3VtZW50RG9tKTtcblxuICAgIHJlc29sdmVkRWxlbXMuZWFjaChmdW5jdGlvbihpbmRleCwgcmVzb2x2ZWRFbGVtKSB7XG4gICAgICB2YXIgcmVmQXR0ck9yaWdWYWwgPSAkKHJlc29sdmVkRWxlbSkuYXR0cihyZWZBdHRyKTtcbiAgICAgIHZhciByZWZBdHRyVXJpID0gbmV3IFVSSShyZWZBdHRyT3JpZ1ZhbCk7XG5cbiAgICAgIGlmIChyZWZBdHRyVXJpLnNjaGVtZSgpID09PSAnJykge1xuICAgICAgICAvLyBSZWxhdGl2ZSBVUkksIGZldGNoIGZyb20gcGFja2VkIEVQVUIgYXJjaGl2ZTpcblxuICAgICAgICBmZXRjaFJlc291cmNlRm9yRWxlbWVudChyZXNvbHZlZEVsZW0sIHJlZkF0dHJPcmlnVmFsLCByZWZBdHRyLCBmZXRjaE1vZGUsIHJlc29sdXRpb25EZWZlcnJlZHMsXG4gICAgICAgICAgb25lcnJvciwgcmVzb3VyY2VEYXRhUHJlcHJvY2Vzc2luZyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlRG9jdW1lbnRJbWFnZXMocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcikge1xuICAgIHJlc29sdmVSZXNvdXJjZUVsZW1lbnRzKCdpbWcnLCAnc3JjJywgJ2Jsb2InLCByZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVEb2N1bWVudEF1ZGlvcyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKSB7XG4gICAgcmVzb2x2ZVJlc291cmNlRWxlbWVudHMoJ2F1ZGlvJywgJ3NyYycsICdibG9iJywgcmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlRG9jdW1lbnRWaWRlb3MocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcikge1xuICAgIHJlc29sdmVSZXNvdXJjZUVsZW1lbnRzKCd2aWRlbycsICdzcmMnLCAnYmxvYicsIHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpO1xuICAgIHJlc29sdmVSZXNvdXJjZUVsZW1lbnRzKCd2aWRlbycsICdwb3N0ZXInLCAnYmxvYicsIHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZURvY3VtZW50U2NyaXB0cyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKSB7XG4gICAgcmVzb2x2ZVJlc291cmNlRWxlbWVudHMoJ3NjcmlwdCcsICdzcmMnLCAnYmxvYicsIHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZURvY3VtZW50SWZyYW1lcyhyZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yKSB7XG4gICAgcmVzb2x2ZVJlc291cmNlRWxlbWVudHMoJ2lmcmFtZScsICdzcmMnLCAnYmxvYicsIHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZURvY3VtZW50TGlua1N0eWxlc2hlZXRzKHJlc29sdXRpb25EZWZlcnJlZHMsIG9uZXJyb3IpIHtcbiAgICByZXNvbHZlUmVzb3VyY2VFbGVtZW50cygnbGluaycsICdocmVmJywgJ3RleHQnLCByZXNvbHV0aW9uRGVmZXJyZWRzLCBvbmVycm9yLFxuICAgICAgcHJlcHJvY2Vzc0Nzc1N0eWxlU2hlZXREYXRhKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVEb2N1bWVudEVtYmVkZGVkU3R5bGVzaGVldHMocmVzb2x1dGlvbkRlZmVycmVkcywgb25lcnJvcikge1xuICAgIHZhciByZXNvbHZlZEVsZW1zID0gJCgnc3R5bGUnLCBfY29udGVudERvY3VtZW50RG9tKTtcbiAgICByZXNvbHZlZEVsZW1zLmVhY2goZnVuY3Rpb24oaW5kZXgsIHJlc29sdmVkRWxlbSkge1xuICAgICAgdmFyIHJlc29sdXRpb25EZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgIHJlc29sdXRpb25EZWZlcnJlZHMucHVzaChyZXNvbHV0aW9uRGVmZXJyZWQpO1xuICAgICAgdmFyIHN0eWxlU2hlZXREYXRhID0gJChyZXNvbHZlZEVsZW0pLnRleHQoKTtcbiAgICAgIHByZXByb2Nlc3NDc3NTdHlsZVNoZWV0RGF0YShzdHlsZVNoZWV0RGF0YSwgX2NvbnRlbnREb2N1bWVudFBhdGhSZWxhdGl2ZVRvUGFja2FnZSxcbiAgICAgICAgZnVuY3Rpb24ocmVzb2x2ZWRTdHlsZXNoZWV0RGF0YSkge1xuICAgICAgICAgICQocmVzb2x2ZWRFbGVtKS50ZXh0KHJlc29sdmVkU3R5bGVzaGVldERhdGEpO1xuICAgICAgICAgIHJlc29sdXRpb25EZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGVudERvY3VtZW50RmV0Y2hlcjsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKTtcbnZhciBVUkkgPSByZXF1aXJlKCdVUklqcycpO1xuXG52YXIgX2luc3RhbmNlID0gdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBDb250ZW50VHlwZURpc2NvdmVyeSgpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgQ29udGVudFR5cGVEaXNjb3Zlcnkuc3VmZml4Q29udGVudFR5cGVNYXAgPSB7XG4gICAgY3NzOiAndGV4dC9jc3MnLFxuICAgIGVwdWI6ICdhcHBsaWNhdGlvbi9lcHViK3ppcCcsXG4gICAgZ2lmOiAnaW1hZ2UvZ2lmJyxcbiAgICBodG1sOiAndGV4dC9odG1sJyxcbiAgICBqcGc6ICdpbWFnZS9qcGVnJyxcbiAgICBqcGVnOiAnaW1hZ2UvanBlZycsXG4gICAgbmN4OiAnYXBwbGljYXRpb24veC1kdGJuY3greG1sJyxcbiAgICBvcGY6ICdhcHBsaWNhdGlvbi9vZWJwcy1wYWNrYWdlK3htbCcsXG4gICAgcG5nOiAnaW1hZ2UvcG5nJyxcbiAgICBzdmc6ICdpbWFnZS9zdmcreG1sJyxcbiAgICB4aHRtbDogJ2FwcGxpY2F0aW9uL3hodG1sK3htbCdcbiAgfTtcblxuICB0aGlzLmlkZW50aWZ5Q29udGVudFR5cGVGcm9tRmlsZU5hbWUgPSBmdW5jdGlvbihjb250ZW50VXJsKSB7XG4gICAgdmFyIGNvbnRlbnRVcmxTdWZmaXggPSBVUkkoY29udGVudFVybCkuc3VmZml4KCk7XG4gICAgdmFyIGNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG4gICAgaWYgKHR5cGVvZiBDb250ZW50VHlwZURpc2NvdmVyeS5zdWZmaXhDb250ZW50VHlwZU1hcFtjb250ZW50VXJsU3VmZml4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnRlbnRUeXBlID0gQ29udGVudFR5cGVEaXNjb3Zlcnkuc3VmZml4Q29udGVudFR5cGVNYXBbY29udGVudFVybFN1ZmZpeF07XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50VHlwZTtcbiAgfTtcblxuICB0aGlzLmlkZW50aWZ5Q29udGVudFR5cGUgPSBmdW5jdGlvbihjb250ZW50VXJsKSB7XG4gICAgLy8gVE9ETzogTWFrZSB0aGUgY2FsbCBhc3luY2hyb25vdXMgKHdoaWNoIHdvdWxkIHJlcXVpcmUgYSBjYWxsYmFjayBhbmQgd291bGQgcHJvYmFibHkgbWFrZSBzZW5zZVxuICAgIC8vIHdoZW4gY2FsbGluZyBmdW5jdGlvbnMgYXJlIGFsc28gcmVtb2RlbGxlZCBmb3IgYXN5bmMpLlxuXG4gICAgdmFyIGNvbnRlbnRUeXBlID0gJC5hamF4KHtcbiAgICAgIHR5cGU6IFwiSEVBRFwiLFxuICAgICAgdXJsOiBjb250ZW50VXJsLFxuICAgICAgYXN5bmM6IGZhbHNlXG4gICAgfSkuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmIChjb250ZW50VHlwZSA9PT0gbnVsbCkge1xuICAgICAgY29udGVudFR5cGUgPSBzZWxmLmlkZW50aWZ5Q29udGVudFR5cGVGcm9tRmlsZU5hbWUoY29udGVudFVybCk7XG4gICAgICBjb25zb2xlLmxvZygnZ3Vlc3NlZCBjb250ZW50VHlwZSBbJyArIGNvbnRlbnRUeXBlICsgJ10gZnJvbSBVUkkgWycgKyBjb250ZW50VXJsICtcbiAgICAgICAgJ10uIENvbmZpZ3VyaW5nIHRoZSB3ZWIgc2VydmVyIHRvIHByb3ZpZGUgdGhlIGNvbnRlbnQgdHlwZSBpcyByZWNvbW1lbmRlZC4nKTtcblxuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50VHlwZTtcbiAgfVxuXG59O1xuXG5pZiAoIV9pbnN0YW5jZSkge1xuICBfaW5zdGFuY2UgPSBuZXcgQ29udGVudFR5cGVEaXNjb3ZlcnkoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5zdGFuY2U7IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbmZ1bmN0aW9uIEVuY3J5cHRpb25IYW5kbGVyKGVuY3J5cHRpb25EYXRhKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgRU5DUllQVElPTl9NRVRIT0RTID0ge1xuICAgICdodHRwOi8vd3d3LmlkcGYub3JnLzIwMDgvZW1iZWRkaW5nJzogZW1iZWRkZWRGb250RGVvYmZ1c2NhdGVJZHBmLFxuICAgICdodHRwOi8vbnMuYWRvYmUuY29tL3BkZi9lbmMjUkMnOiBlbWJlZGRlZEZvbnREZW9iZnVzY2F0ZUFkb2JlXG4gIH07XG5cbiAgLy8gSU5URVJOQUwgRlVOQ1RJT05TXG5cbiAgZnVuY3Rpb24gYmxvYjJCaW5BcnJheShibG9iLCBjYWxsYmFjaykge1xuICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFycmF5QnVmZmVyID0gdGhpcy5yZXN1bHQ7XG4gICAgICBjYWxsYmFjayhuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgIH07XG4gICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHhvck9iZnVzY2F0ZWRCbG9iKG9iZnVzY2F0ZWRSZXNvdXJjZUJsb2IsIHByZWZpeExlbmd0aCwgeG9yS2V5LCBjYWxsYmFjaykge1xuICAgIHZhciBvYmZ1c2NhdGVkUHJlZml4QmxvYiA9IG9iZnVzY2F0ZWRSZXNvdXJjZUJsb2Iuc2xpY2UoMCwgcHJlZml4TGVuZ3RoKTtcbiAgICBibG9iMkJpbkFycmF5KG9iZnVzY2F0ZWRQcmVmaXhCbG9iLCBmdW5jdGlvbihieXRlcykge1xuICAgICAgdmFyIG1hc2tsZW4gPSB4b3JLZXkubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhMZW5ndGg7IGkrKykge1xuICAgICAgICBieXRlc1tpXSA9IGJ5dGVzW2ldIF4gKHhvcktleVtpICUgbWFza2xlbl0pO1xuICAgICAgfVxuICAgICAgdmFyIGRlb2JmdXNjYXRlZFByZWZpeEJsb2IgPSBuZXcgQmxvYihbYnl0ZXNdLCB7XG4gICAgICAgIHR5cGU6IG9iZnVzY2F0ZWRSZXNvdXJjZUJsb2IudHlwZVxuICAgICAgfSk7XG4gICAgICB2YXIgcmVtYWluZGVyQmxvYiA9IG9iZnVzY2F0ZWRSZXNvdXJjZUJsb2Iuc2xpY2UocHJlZml4TGVuZ3RoKTtcbiAgICAgIHZhciBkZW9iZnVzY2F0ZWRCbG9iID0gbmV3IEJsb2IoW2Rlb2JmdXNjYXRlZFByZWZpeEJsb2IsIHJlbWFpbmRlckJsb2JdLCB7XG4gICAgICAgIHR5cGU6IG9iZnVzY2F0ZWRSZXNvdXJjZUJsb2IudHlwZVxuICAgICAgfSk7XG5cbiAgICAgIGNhbGxiYWNrKGRlb2JmdXNjYXRlZEJsb2IpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZW1iZWRkZWRGb250RGVvYmZ1c2NhdGVJZHBmKG9iZnVzY2F0ZWRSZXNvdXJjZUJsb2IsIGNhbGxiYWNrKSB7XG5cbiAgICB2YXIgcHJlZml4TGVuZ3RoID0gMTA0MDtcbiAgICAvLyBTaGFtZWxlc3NseSBjb3BpZWQgZnJvbVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFkaXVtL3JlYWRpdW0tY2hyb21lLWV4dGVuc2lvbi9ibG9iLzI2ZDRiMGNhZmQyNTRjZmE5M2JmN2Y2MjI1ODg3YjgzMDUyNjQyZTAvc2NyaXB0cy9tb2RlbHMvcGF0aF9yZXNvbHZlci5qcyNMMTAyIDpcbiAgICB4b3JPYmZ1c2NhdGVkQmxvYihvYmZ1c2NhdGVkUmVzb3VyY2VCbG9iLCBwcmVmaXhMZW5ndGgsIGVuY3J5cHRpb25EYXRhLnVpZEhhc2gsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVyblV1aWRUb0J5dGVBcnJheShpZCkge1xuICAgIHZhciB1dWlkUmVnZXhwID0gLyh1cm46dXVpZDopPyhbMC05YS1mXXs4fSktKFswLTlhLWZdezR9KS0oWzAtOWEtZl17NH0pLShbMC05YS1mXXs0fSktKFswLTlhLWZdezEyfSkvaTtcbiAgICB2YXIgbWF0Y2hSZXN1bHRzID0gdXVpZFJlZ2V4cC5leGVjKGlkKTtcbiAgICB2YXIgcmF3VXVpZCA9IG1hdGNoUmVzdWx0c1syXSArIG1hdGNoUmVzdWx0c1szXSArIG1hdGNoUmVzdWx0c1s0XSArIG1hdGNoUmVzdWx0c1s1XSArIG1hdGNoUmVzdWx0c1s2XTtcbiAgICBpZiAoIXJhd1V1aWQgfHwgcmF3VXVpZC5sZW5ndGggIT0gMzIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0JhZCBVVUlEIGZvcm1hdCBmb3IgSUQgOicgKyBpZCk7XG4gICAgfVxuICAgIHZhciBieXRlQXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHZhciBieXRlSGV4ID0gcmF3VXVpZC5zdWJzdHIoaSAqIDIsIDIpO1xuICAgICAgdmFyIGJ5dGVOdW1iZXIgPSBwYXJzZUludChieXRlSGV4LCAxNik7XG4gICAgICBieXRlQXJyYXkucHVzaChieXRlTnVtYmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVBcnJheTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtYmVkZGVkRm9udERlb2JmdXNjYXRlQWRvYmUob2JmdXNjYXRlZFJlc291cmNlQmxvYiwgY2FsbGJhY2spIHtcblxuICAgIC8vIGV4dHJhY3QgdGhlIFVVSUQgYW5kIGNvbnZlcnQgdG8gYmlnLWVuZGlhbiBiaW5hcnkgZm9ybSAoMTYgYnl0ZXMpOlxuICAgIHZhciB1aWRXb3JkQXJyYXkgPSB1cm5VdWlkVG9CeXRlQXJyYXkoZW5jcnlwdGlvbkRhdGEudWlkKTtcbiAgICB2YXIgcHJlZml4TGVuZ3RoID0gMTAyNDtcbiAgICB4b3JPYmZ1c2NhdGVkQmxvYihvYmZ1c2NhdGVkUmVzb3VyY2VCbG9iLCBwcmVmaXhMZW5ndGgsIHVpZFdvcmRBcnJheSwgY2FsbGJhY2spXG4gIH1cblxuXG4gIC8vIFBVQkxJQyBBUElcblxuICB0aGlzLmlzRW5jcnlwdGlvblNwZWNpZmllZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBlbmNyeXB0aW9uRGF0YSAmJiBlbmNyeXB0aW9uRGF0YS5lbmNyeXB0aW9ucztcbiAgfTtcblxuXG4gIHRoaXMuZ2V0RW5jcnlwdGlvbk1ldGhvZEZvclJlbGF0aXZlUGF0aCA9IGZ1bmN0aW9uKHBhdGhSZWxhdGl2ZVRvUm9vdCkge1xuICAgIGlmIChzZWxmLmlzRW5jcnlwdGlvblNwZWNpZmllZCgpKSB7XG4gICAgICByZXR1cm4gZW5jcnlwdGlvbkRhdGEuZW5jcnlwdGlvbnNbcGF0aFJlbGF0aXZlVG9Sb290XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5nZXREZWNyeXB0aW9uRnVuY3Rpb25Gb3JSZWxhdGl2ZVBhdGggPSBmdW5jdGlvbihwYXRoUmVsYXRpdmVUb1Jvb3QpIHtcbiAgICB2YXIgZW5jcnlwdGlvbk1ldGhvZCA9IHNlbGYuZ2V0RW5jcnlwdGlvbk1ldGhvZEZvclJlbGF0aXZlUGF0aChwYXRoUmVsYXRpdmVUb1Jvb3QpO1xuICAgIGlmIChlbmNyeXB0aW9uTWV0aG9kICYmIEVOQ1JZUFRJT05fTUVUSE9EU1tlbmNyeXB0aW9uTWV0aG9kXSkge1xuICAgICAgcmV0dXJuIEVOQ1JZUFRJT05fTUVUSE9EU1tlbmNyeXB0aW9uTWV0aG9kXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbn07XG5cbkVuY3J5cHRpb25IYW5kbGVyLkNyZWF0ZUVuY3J5cHRpb25EYXRhID0gZnVuY3Rpb24oaWQsIGVuY3J5cHRpb25Eb20pIHtcblxuICB2YXIgZW5jcnlwdGlvbkRhdGEgPSB7XG4gICAgdWlkOiBpZCxcbiAgICB1aWRIYXNoOiB3aW5kb3cuQ3J5cHRvLlNIQTEodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGlkLnRyaW0oKSkpLCB7XG4gICAgICBhc0J5dGVzOiB0cnVlXG4gICAgfSksXG4gICAgZW5jcnlwdGlvbnM6IHVuZGVmaW5lZFxuICB9O1xuXG4gIHZhciBlbmNyeXB0ZWREYXRhID0gJCgnRW5jcnlwdGVkRGF0YScsIGVuY3J5cHRpb25Eb20pO1xuICBlbmNyeXB0ZWREYXRhLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVuY3J5cHRlZERhdGEpIHtcbiAgICB2YXIgZW5jcnlwdGlvbkFsZ29yaXRobSA9ICQoJ0VuY3J5cHRpb25NZXRob2QnLCBlbmNyeXB0ZWREYXRhKS5maXJzdCgpLmF0dHIoJ0FsZ29yaXRobScpO1xuXG4gICAgLy8gRm9yIHNvbWUgcmVhc29uLCBqUXVlcnkgc2VsZWN0b3IgXCJcIiBhZ2FpbnN0IFhNTCBET00gc29tZXRpbWVzIGRvZXNuJ3QgbWF0Y2ggcHJvcGVybHlcbiAgICB2YXIgY2lwaGVyUmVmZXJlbmNlID0gJCgnQ2lwaGVyUmVmZXJlbmNlJywgZW5jcnlwdGVkRGF0YSk7XG4gICAgY2lwaGVyUmVmZXJlbmNlLmVhY2goZnVuY3Rpb24oaW5kZXgsIENpcGhlclJlZmVyZW5jZSkge1xuICAgICAgdmFyIGNpcGhlclJlZmVyZW5jZVVSSSA9ICQoQ2lwaGVyUmVmZXJlbmNlKS5hdHRyKCdVUkknKTtcbiAgICAgIGNvbnNvbGUubG9nKCdFbmNyeXB0aW9uL29iZnVzY2F0aW9uIGFsZ29yaXRobSAnICsgZW5jcnlwdGlvbkFsZ29yaXRobSArICcgc3BlY2lmaWVkIGZvciAnICtcbiAgICAgICAgY2lwaGVyUmVmZXJlbmNlVVJJKTtcblxuICAgICAgaWYgKCFlbmNyeXB0aW9uRGF0YS5lbmNyeXB0aW9ucykge1xuICAgICAgICBlbmNyeXB0aW9uRGF0YS5lbmNyeXB0aW9ucyA9IHt9O1xuICAgICAgfVxuXG4gICAgICBlbmNyeXB0aW9uRGF0YS5lbmNyeXB0aW9uc1tjaXBoZXJSZWZlcmVuY2VVUkldID0gZW5jcnlwdGlvbkFsZ29yaXRobTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVuY3J5cHRpb25EYXRhO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbmNyeXB0aW9uSGFuZGxlcjsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuZnVuY3Rpb24gTWFya3VwUGFyc2VyKCkge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLnBhcnNlWG1sID0gZnVuY3Rpb24oeG1sU3RyaW5nKSB7XG4gICAgcmV0dXJuIHNlbGYucGFyc2VNYXJrdXAoeG1sU3RyaW5nLCAndGV4dC94bWwnKTtcbiAgfTtcblxuICB0aGlzLnBhcnNlTWFya3VwID0gZnVuY3Rpb24obWFya3VwU3RyaW5nLCBjb250ZW50VHlwZSkge1xuICAgIHZhciBwYXJzZXIgPSBuZXcgd2luZG93LkRPTVBhcnNlcjtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhtYXJrdXBTdHJpbmcsIGNvbnRlbnRUeXBlKTtcbiAgfTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXJrdXBQYXJzZXI7IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbnZhciBVUkkgPSByZXF1aXJlKCdVUklqcycpO1xudmFyIENvbnRlbnRUeXBlRGlzY292ZXJ5ID0gcmVxdWlyZSgnLi9kaXNjb3Zlci1jb250ZW50LXR5cGUnKTtcblxuZnVuY3Rpb24gUGxhaW5SZXNvdXJjZUZldGNoZXIocGFyZW50RmV0Y2hlciwgYmFzZVVybCkge1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIF9wYWNrYWdlRG9jdW1lbnRBYnNvbHV0ZVVybDtcbiAgdmFyIF9wYWNrYWdlRG9jdW1lbnRSZWxhdGl2ZVBhdGg7XG5cbiAgLy8gSU5URVJOQUwgRlVOQ1RJT05TXG5cbiAgZnVuY3Rpb24gZmV0Y2hGaWxlQ29udGVudHMocGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgcmVhZENhbGxiYWNrLCBvbmVycm9yKSB7XG4gICAgdmFyIGZpbGVVcmwgPSBzZWxmLnJlc29sdmVVUkkocGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCk7XG5cbiAgICBpZiAodHlwZW9mIHBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyAnRmV0Y2hlZCBmaWxlIHJlbGF0aXZlIHBhdGggaXMgdW5kZWZpbmVkISc7XG4gICAgfVxuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKCdHRVQnLCBmaWxlVXJsLCB0cnVlKTtcbiAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICB4aHIub25lcnJvciA9IG9uZXJyb3I7XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24obG9hZEV2ZW50KSB7XG4gICAgICByZWFkQ2FsbGJhY2soeGhyLnJlc3BvbnNlKTtcbiAgICB9O1xuXG4gICAgeGhyLnNlbmQoKTtcbiAgfVxuXG5cbiAgLy8gUFVCTElDIEFQSVxuXG4gIHRoaXMuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgICBwYXJlbnRGZXRjaGVyLmdldFhtbEZpbGVEb20oJ01FVEEtSU5GL2NvbnRhaW5lci54bWwnLCBmdW5jdGlvbihjb250YWluZXJYbWxEb20pIHtcbiAgICAgIF9wYWNrYWdlRG9jdW1lbnRSZWxhdGl2ZVBhdGggPSBwYXJlbnRGZXRjaGVyLmdldFJvb3RGaWxlKGNvbnRhaW5lclhtbERvbSk7XG4gICAgICBfcGFja2FnZURvY3VtZW50QWJzb2x1dGVVcmwgPSBzZWxmLnJlc29sdmVVUkkoX3BhY2thZ2VEb2N1bWVudFJlbGF0aXZlUGF0aCk7XG5cbiAgICAgIGNhbGxiYWNrKCk7XG5cbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcInVuYWJsZSB0byBmaW5kIHBhY2thZ2UgZG9jdW1lbnQ6IFwiICsgZXJyb3IpO1xuICAgICAgX3BhY2thZ2VEb2N1bWVudEFic29sdXRlVXJsID0gYmFzZVVybDtcblxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnJlc29sdmVVUkkgPSBmdW5jdGlvbihwYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290KSB7XG4gICAgcmV0dXJuIGJhc2VVcmwgKyBcIi9cIiArIHBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3Q7XG4gIH07XG5cblxuICB0aGlzLmdldFBhY2thZ2VVcmwgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BhY2thZ2VEb2N1bWVudEFic29sdXRlVXJsO1xuICB9O1xuXG4gIHRoaXMuZmV0Y2hGaWxlQ29udGVudHNUZXh0ID0gZnVuY3Rpb24ocGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgZmV0Y2hDYWxsYmFjaywgb25lcnJvcikge1xuICAgIHZhciBmaWxlVXJsID0gc2VsZi5yZXNvbHZlVVJJKHBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QpO1xuXG4gICAgaWYgKHR5cGVvZiBmaWxlVXJsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgJ0ZldGNoZWQgZmlsZSBVUkwgaXMgdW5kZWZpbmVkISc7XG4gICAgfVxuICAgICQuYWpheCh7XG4gICAgICAvLyBlbmNvZGluZzogXCJVVEYtOFwiLFxuICAgICAgLy8gbWltZVR5cGU6IFwidGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOFwiLFxuICAgICAgLy8gYmVmb3JlU2VuZDogZnVuY3Rpb24oIHhociApIHtcbiAgICAgIC8vICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9VVRGLThcIik7XG4gICAgICAvLyB9LFxuICAgICAgaXNMb2NhbDogZmlsZVVybC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgIHVybDogZmlsZVVybCxcbiAgICAgIGRhdGFUeXBlOiAndGV4dCcsIC8vaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkuYWpheC9cbiAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGZldGNoQ2FsbGJhY2socmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHdoZW4gQUpBWCBmZXRjaGluZyAnICsgZmlsZVVybCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3Ioc3RhdHVzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvclRocm93bik7XG5cbiAgICAgICAgLy8gLy8gaXNMb2NhbCA9IGZhbHNlIHdpdGggY3VzdG9tIFVSSSBzY2hlbWUgLyBwcm90b2NvbCByZXN1bHRzIGluIGZhbHNlIGZhaWwgb24gRmlyZWZveCAoQ2hyb21lIG9rYXkpXG4gICAgICAgIC8vIGlmIChzdGF0dXMgPT09IFwiZXJyb3JcIiAmJiAoIWVycm9yVGhyb3duIHx8ICFlcnJvclRocm93bi5sZW5ndGgpICYmIHhoci5yZXNwb25zZVRleHQgJiYgeGhyLnJlc3BvbnNlVGV4dC5sZW5ndGgpXG4gICAgICAgIC8vIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoeGhyKTtcbiAgICAgICAgLy8gICAgIGlmICh0eXBlb2YgeGhyLmdldFJlc3BvbnNlSGVhZGVyICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLmVycm9yKHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKSk7XG4gICAgICAgIC8vICAgICBpZiAodHlwZW9mIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUuZXJyb3IoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKTtcbiAgICAgICAgLy8gICAgIGlmICh0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS5lcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgLy8gICAgIFxuICAgICAgICAvLyAgICAgLy8gc3VjY2Vzc1xuICAgICAgICAvLyAgICAgZmV0Y2hDYWxsYmFjayh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgLy8gICAgIHJldHVybjtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIG9uZXJyb3IoZXJyb3JUaHJvd24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZmV0Y2hGaWxlQ29udGVudHNCbG9iID0gZnVuY3Rpb24ocGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgZmV0Y2hDYWxsYmFjaywgb25lcnJvcikge1xuXG4gICAgdmFyIGRlY3J5cHRpb25GdW5jdGlvbiA9IHBhcmVudEZldGNoZXIuZ2V0RGVjcnlwdGlvbkZ1bmN0aW9uRm9yUmVsYXRpdmVQYXRoKHBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QpO1xuICAgIGlmIChkZWNyeXB0aW9uRnVuY3Rpb24pIHtcbiAgICAgIHZhciBvcmlnRmV0Y2hDYWxsYmFjayA9IGZldGNoQ2FsbGJhY2s7XG4gICAgICBmZXRjaENhbGxiYWNrID0gZnVuY3Rpb24odW5lbmNyeXB0ZWRCbG9iKSB7XG4gICAgICAgIGRlY3J5cHRpb25GdW5jdGlvbih1bmVuY3J5cHRlZEJsb2IsIGZ1bmN0aW9uKGRlY3J5cHRlZEJsb2IpIHtcbiAgICAgICAgICBvcmlnRmV0Y2hDYWxsYmFjayhkZWNyeXB0ZWRCbG9iKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBmZXRjaEZpbGVDb250ZW50cyhwYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBmdW5jdGlvbihjb250ZW50c0FycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtjb250ZW50c0FycmF5QnVmZmVyXSwge1xuICAgICAgICB0eXBlOiBDb250ZW50VHlwZURpc2NvdmVyeS5pZGVudGlmeUNvbnRlbnRUeXBlRnJvbUZpbGVOYW1lKHBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QpXG4gICAgICB9KTtcbiAgICAgIGZldGNoQ2FsbGJhY2soYmxvYik7XG4gICAgfSwgb25lcnJvcik7XG4gIH07XG5cbiAgdGhpcy5nZXRQYWNrYWdlRG9tID0gZnVuY3Rpb24oY2FsbGJhY2ssIG9uZXJyb3IpIHtcbiAgICBzZWxmLmZldGNoRmlsZUNvbnRlbnRzVGV4dChfcGFja2FnZURvY3VtZW50UmVsYXRpdmVQYXRoLCBmdW5jdGlvbihwYWNrYWdlWG1sKSB7XG4gICAgICB2YXIgcGFja2FnZURvbSA9IHBhcmVudEZldGNoZXIubWFya3VwUGFyc2VyLnBhcnNlWG1sKHBhY2thZ2VYbWwpO1xuICAgICAgY2FsbGJhY2socGFja2FnZURvbSk7XG4gICAgfSwgb25lcnJvcik7XG4gIH07XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGxhaW5SZXNvdXJjZUZldGNoZXI7IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG52YXIgQ29udGVudERvY3VtZW50RmV0Y2hlciA9IHJlcXVpcmUoJy4vY29udGVudC1kb2N1bWVudC1mZXRjaGVyJyk7XG52YXIgRW5jcnlwdGlvbkhhbmRsZXIgPSByZXF1aXJlKCcuL2VuY3J5cHRpb24taGFuZGxlcicpO1xudmFyIE1hcmt1cFBhcnNlciA9IHJlcXVpcmUoJy4vbWFya3VwLXBhcnNlcicpO1xudmFyIFBsYWluUmVzb3VyY2VGZXRjaGVyID0gcmVxdWlyZSgnLi9wbGFpbi1yZXNvdXJjZS1mZXRjaGVyJyk7XG52YXIgUmVzb3VyY2VDYWNoZSA9IHJlcXVpcmUoJy4vcmVzb3VyY2UtY2FjaGUnKTtcbnZhciBVUkkgPSByZXF1aXJlKCdVUklqcycpO1xudmFyIFppcFJlc291cmNlRmV0Y2hlciA9IHJlcXVpcmUoJy4vemlwLXJlc291cmNlLWZldGNoZXInKTtcblxuZnVuY3Rpb24gUHVibGljYXRpb25GZXRjaGVyKGJvb2tSb290LCBqc0xpYlJvb3QpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgc2VsZi5jb250ZW50VHlwZVBhY2thZ2VSZWFkU3RyYXRlZ3lNYXAgPSB7XG4gICAgJ2FwcGxpY2F0aW9uL29lYnBzLXBhY2thZ2UreG1sJzogJ2V4cGxvZGVkJyxcbiAgICAnYXBwbGljYXRpb24vZXB1Yit6aXAnOiAnemlwcGVkJyxcbiAgICAnYXBwbGljYXRpb24vemlwJzogJ3ppcHBlZCdcbiAgfTtcblxuICB2YXIgX3Nob3VsZENvbnN0cnVjdERvbVByb2dyYW1tYXRpY2FsbHk7XG4gIHZhciBfcmVzb3VyY2VGZXRjaGVyO1xuICB2YXIgX2VuY3J5cHRpb25IYW5kbGVyO1xuICB2YXIgX3BhY2thZ2VGdWxsUGF0aDtcbiAgdmFyIF9wYWNrYWdlRG9tO1xuICB2YXIgX3BhY2thZ2VEb21Jbml0aWFsaXphdGlvbkRlZmVycmVkO1xuICB2YXIgX3B1YmxpY2F0aW9uUmVzb3VyY2VzQ2FjaGUgPSBuZXcgUmVzb3VyY2VDYWNoZTtcblxuXG4gIHRoaXMubWFya3VwUGFyc2VyID0gbmV3IE1hcmt1cFBhcnNlcigpO1xuXG4gIHRoaXMuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgICB2YXIgaXNFcHViRXhwbG9kZWQgPSBpc0V4cGxvZGVkKCk7XG5cbiAgICAvLyBOb24gZXhwbG9kZWQgRVBVQnMgKGkuZS4gemlwcGVkIC5lcHViIGRvY3VtZW50cykgc2hvdWxkIGJlIGZldGNoZWQgaW4gYSBwcm9ncmFtbWF0aWNhbCBtYW5uZXI6XG4gICAgX3Nob3VsZENvbnN0cnVjdERvbVByb2dyYW1tYXRpY2FsbHkgPSAhaXNFcHViRXhwbG9kZWQ7XG4gICAgY3JlYXRlUmVzb3VyY2VGZXRjaGVyKGlzRXB1YkV4cGxvZGVkLCBjYWxsYmFjayk7XG4gIH07XG5cblxuXG4gIC8vIElOVEVSTkFMIEZVTkNUSU9OU1xuXG4gIGZ1bmN0aW9uIF9oYW5kbGVFcnJvcihlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm1lc3NhZ2UpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNFeHBsb2RlZCgpIHtcblxuICAgIHZhciBleHQgPSBcIi5lcHViXCI7XG4gICAgcmV0dXJuIGJvb2tSb290LmluZGV4T2YoZXh0LCBib29rUm9vdC5sZW5ndGggLSBleHQubGVuZ3RoKSA9PT0gLTE7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSZXNvdXJjZUZldGNoZXIoaXNFeHBsb2RlZCwgY2FsbGJhY2spIHtcbiAgICBpZiAoaXNFeHBsb2RlZCkge1xuICAgICAgY29uc29sZS5sb2coJ3VzaW5nIG5ldyBQbGFpblJlc291cmNlRmV0Y2hlcicpO1xuICAgICAgX3Jlc291cmNlRmV0Y2hlciA9IG5ldyBQbGFpblJlc291cmNlRmV0Y2hlcihzZWxmLCBib29rUm9vdCk7XG4gICAgICBfcmVzb3VyY2VGZXRjaGVyLmluaXRpYWxpemUoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKF9yZXNvdXJjZUZldGNoZXIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCd1c2luZyBuZXcgWmlwUmVzb3VyY2VGZXRjaGVyJyk7XG4gICAgICBfcmVzb3VyY2VGZXRjaGVyID0gbmV3IFppcFJlc291cmNlRmV0Y2hlcihzZWxmLCBib29rUm9vdCwganNMaWJSb290KTtcbiAgICAgIGNhbGxiYWNrKF9yZXNvdXJjZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBVQkxJQyBBUElcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGRvY3VtZW50cyBmZXRjaGVkIHVzaW5nIHRoaXMgZmV0Y2hlciByZXF1aXJlIHNwZWNpYWwgcHJvZ3JhbW1hdGljIGhhbmRsaW5nLlxuICAgKiAocmVzb2x2aW5nIG9mIGludGVybmFsIHJlc291cmNlIHJlZmVyZW5jZXMpLlxuICAgKiBAcmV0dXJucyB7Kn0gdHJ1ZSBpZiBkb2N1bWVudHMgZmV0Y2hlZCB1c2luZyB0aGlzIGZldGNoZXIgcmVxdWlyZSBzcGVjaWFsIHByb2dyYW1tYXRpYyBoYW5kbGluZ1xuICAgKiAocmVzb2x2aW5nIG9mIGludGVybmFsIHJlc291cmNlIHJlZmVyZW5jZXMpLiBUeXBpY2FsbHkgbmVlZGVkIGZvciB6aXBwZWQgRVBVQnMgb3IgZXhwbG9kZWQgRVBVQnMgdGhhdCBjb250YWluXG4gICAqIGVuY3J5cHRlZCByZXNvdXJjZXMgc3BlY2lmaWVkIGluIE1FVEEtSU5GL2VuY3J5cHRpb24ueG1sLlxuICAgKlxuICAgKiBmYWxzZSBpZiBkb2N1bWVudHMgY2FuIGJlIGZlZCBkaXJlY3RseSBpbnRvIGEgd2luZG93IG9yIGlmcmFtZSBieSBzcmMgVVJMIHdpdGhvdXQgdXNpbmcgc3BlY2lhbCBmZXRjaGluZyBsb2dpYy5cbiAgICovXG4gIHRoaXMuc2hvdWxkQ29uc3RydWN0RG9tUHJvZ3JhbW1hdGljYWxseSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfc2hvdWxkQ29uc3RydWN0RG9tUHJvZ3JhbW1hdGljYWxseTtcbiAgfTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG1lZGlhIGFzc2V0cyAoYXVkaW8sIHZpZGVvLCBpbWFnZXMpIHdpdGhpbiBjb250ZW50IGRvY3VtZW50cyByZXF1aXJlIHNwZWNpYWxcbiAgICogcHJvZ3JhbW1hdGljIGhhbmRsaW5nLlxuICAgKiBAcmV0dXJucyB7Kn0gdHJ1ZSBpZiBjb250ZW50IGRvY3VtZW50cyBmZXRjaGVkIHVzaW5nIHRoaXMgZmV0Y2hlciByZXF1aXJlIHByb2dyYW1tYXRpYyBmZXRjaGluZ1xuICAgKiBvZiBtZWRpYSBhc3NldHMuIFR5cGljYWxseSBuZWVkZWQgZm9yIHppcHBlZCBFUFVCcy5cbiAgICpcbiAgICogZmFsc2UgaWYgcGF0aHMgdG8gbWVkaWEgYXNzZXRzIGFyZSBhY2Nlc3NpYmxlIGRpcmVjdGx5IGZvciB0aGUgYnJvd3NlciB0aHJvdWdoIHRoZWlyIHBhdGhzIHJlbGF0aXZlIHRvXG4gICAqIHRoZSBiYXNlIFVSSSBvZiB0aGVpciBjb250ZW50IGRvY3VtZW50LlxuICAgKi9cbiAgdGhpcy5zaG91bGRGZXRjaE1lZGlhQXNzZXRzUHJvZ3JhbW1hdGljYWxseSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfc2hvdWxkQ29uc3RydWN0RG9tUHJvZ3JhbW1hdGljYWxseSAmJiAhaXNFeHBsb2RlZCgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0Qm9va1Jvb3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYm9va1Jvb3Q7XG4gIH07XG5cbiAgdGhpcy5nZXRKc0xpYlJvb3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ganNMaWJSb290O1xuICB9XG5cbiAgdGhpcy5nZXRQYWNrYWdlVXJsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9yZXNvdXJjZUZldGNoZXIuZ2V0UGFja2FnZVVybCgpO1xuICB9O1xuXG4gIHRoaXMuZmV0Y2hDb250ZW50RG9jdW1lbnQgPSBmdW5jdGlvbihhdHRhY2hlZERhdGEsIGxvYWRlZERvY3VtZW50VXJpLCBjb250ZW50RG9jdW1lbnRSZXNvbHZlZENhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG5cbiAgICB2YXIgY29udGVudERvY3VtZW50RmV0Y2hlciA9IG5ldyBDb250ZW50RG9jdW1lbnRGZXRjaGVyKHNlbGYsIGF0dGFjaGVkRGF0YS5zcGluZUl0ZW0sIGxvYWRlZERvY3VtZW50VXJpLCBfcHVibGljYXRpb25SZXNvdXJjZXNDYWNoZSk7XG4gICAgY29udGVudERvY3VtZW50RmV0Y2hlci5mZXRjaENvbnRlbnREb2N1bWVudEFuZFJlc29sdmVEb20oY29udGVudERvY3VtZW50UmVzb2x2ZWRDYWxsYmFjaywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBfaGFuZGxlRXJyb3IoZXJyKTtcbiAgICAgIGVycm9yQ2FsbGJhY2soZXJyKTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmdldEZpbGVDb250ZW50c0Zyb21QYWNrYWdlID0gZnVuY3Rpb24oZmlsZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QsIGNhbGxiYWNrLCBvbmVycm9yKSB7XG5cbiAgICBfcmVzb3VyY2VGZXRjaGVyLmZldGNoRmlsZUNvbnRlbnRzVGV4dChmaWxlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgZnVuY3Rpb24oZmlsZUNvbnRlbnRzKSB7XG4gICAgICBjYWxsYmFjayhmaWxlQ29udGVudHMpO1xuICAgIH0sIG9uZXJyb3IpO1xuICB9O1xuXG5cblxuICB0aGlzLmdldFhtbEZpbGVEb20gPSBmdW5jdGlvbih4bWxGaWxlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgY2FsbGJhY2ssIG9uZXJyb3IpIHtcbiAgICBzZWxmLmdldEZpbGVDb250ZW50c0Zyb21QYWNrYWdlKHhtbEZpbGVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBmdW5jdGlvbih4bWxGaWxlQ29udGVudHMpIHtcbiAgICAgIHZhciBmaWxlRG9tID0gc2VsZi5tYXJrdXBQYXJzZXIucGFyc2VYbWwoeG1sRmlsZUNvbnRlbnRzKTtcbiAgICAgIGNhbGxiYWNrKGZpbGVEb20pO1xuICAgIH0sIG9uZXJyb3IpO1xuICB9O1xuXG4gIHRoaXMuZ2V0UGFja2FnZUZ1bGxQYXRoID0gZnVuY3Rpb24oY2FsbGJhY2ssIG9uZXJyb3IpIHtcbiAgICBzZWxmLmdldFhtbEZpbGVEb20oJ01FVEEtSU5GL2NvbnRhaW5lci54bWwnLCBmdW5jdGlvbihjb250YWluZXJYbWxEb20pIHtcbiAgICAgIHZhciBwYWNrYWdlRnVsbFBhdGggPSBzZWxmLmdldFJvb3RGaWxlKGNvbnRhaW5lclhtbERvbSk7XG4gICAgICBjYWxsYmFjayhwYWNrYWdlRnVsbFBhdGgpO1xuICAgIH0sIG9uZXJyb3IpO1xuICB9O1xuXG4gIHRoaXMuZ2V0Um9vdEZpbGUgPSBmdW5jdGlvbihjb250YWluZXJYbWxEb20pIHtcbiAgICB2YXIgcm9vdEZpbGUgPSAkKCdyb290ZmlsZScsIGNvbnRhaW5lclhtbERvbSk7XG4gICAgdmFyIHBhY2thZ2VGdWxsUGF0aCA9IHJvb3RGaWxlLmF0dHIoJ2Z1bGwtcGF0aCcpO1xuICAgIHJldHVybiBwYWNrYWdlRnVsbFBhdGg7XG4gIH07XG5cbiAgdGhpcy5nZXRQYWNrYWdlRG9tID0gZnVuY3Rpb24oY2FsbGJhY2ssIG9uZXJyb3IpIHtcbiAgICBpZiAoX3BhY2thZ2VEb20pIHtcbiAgICAgIGNhbGxiYWNrKF9wYWNrYWdlRG9tKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVE9ETzogdXNlIGpRdWVyeSdzIERlZmVycmVkXG4gICAgICAvLyBSZWdpc3RlciBhbGwgY2FsbGJhY2tzIGludGVyZXN0ZWQgaW4gaW5pdGlhbGl6ZWQgcGFja2FnZURvbSwgbGF1bmNoIGl0cyBpbnN0YW50aWF0aW9uIG9ubHkgb25jZVxuICAgICAgLy8gYW5kIGJyb2FkY2FzdCB0byBhbGwgY2FsbGJhY2tzIHJlZ2lzdGVyZWQgZHVyaW5nIHRoZSBpbml0aWFsaXphdGlvbiBvbmNlIGl0J3MgZG9uZTpcbiAgICAgIGlmIChfcGFja2FnZURvbUluaXRpYWxpemF0aW9uRGVmZXJyZWQpIHtcbiAgICAgICAgX3BhY2thZ2VEb21Jbml0aWFsaXphdGlvbkRlZmVycmVkLmRvbmUoY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3BhY2thZ2VEb21Jbml0aWFsaXphdGlvbkRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICBfcGFja2FnZURvbUluaXRpYWxpemF0aW9uRGVmZXJyZWQuZG9uZShjYWxsYmFjayk7XG4gICAgICAgIHNlbGYuZ2V0UGFja2FnZUZ1bGxQYXRoKGZ1bmN0aW9uKHBhY2thZ2VGdWxsUGF0aCkge1xuICAgICAgICAgIF9wYWNrYWdlRnVsbFBhdGggPSBwYWNrYWdlRnVsbFBhdGg7XG4gICAgICAgICAgc2VsZi5nZXRYbWxGaWxlRG9tKHBhY2thZ2VGdWxsUGF0aCwgZnVuY3Rpb24ocGFja2FnZURvbSkge1xuICAgICAgICAgICAgX3BhY2thZ2VEb20gPSBwYWNrYWdlRG9tO1xuICAgICAgICAgICAgX3BhY2thZ2VEb21Jbml0aWFsaXphdGlvbkRlZmVycmVkLnJlc29sdmUocGFja2FnZURvbSk7XG4gICAgICAgICAgICBfcGFja2FnZURvbUluaXRpYWxpemF0aW9uRGVmZXJyZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSlcbiAgICAgICAgfSwgb25lcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY29udmVydFBhdGhSZWxhdGl2ZVRvUGFja2FnZVRvUmVsYXRpdmVUb0Jhc2UgPSBmdW5jdGlvbihyZWxhdGl2ZVRvUGFja2FnZVBhdGgpIHtcbiAgICByZXR1cm4gbmV3IFVSSShyZWxhdGl2ZVRvUGFja2FnZVBhdGgpLmFic29sdXRlVG8oX3BhY2thZ2VGdWxsUGF0aCkudG9TdHJpbmcoKTtcbiAgfTtcblxuICB0aGlzLnJlbGF0aXZlVG9QYWNrYWdlRmV0Y2hGaWxlQ29udGVudHMgPSBmdW5jdGlvbihyZWxhdGl2ZVRvUGFja2FnZVBhdGgsIGZldGNoTW9kZSwgZmV0Y2hDYWxsYmFjaywgb25lcnJvcikge1xuXG4gICAgaWYgKCFvbmVycm9yKSB7XG4gICAgICBvbmVycm9yID0gX2hhbmRsZUVycm9yO1xuICAgIH1cblxuICAgIHZhciBwYXRoUmVsYXRpdmVUb0VwdWJSb290ID0gZGVjb2RlVVJJQ29tcG9uZW50KHNlbGYuY29udmVydFBhdGhSZWxhdGl2ZVRvUGFja2FnZVRvUmVsYXRpdmVUb0Jhc2UocmVsYXRpdmVUb1BhY2thZ2VQYXRoKSk7XG4gICAgLy8gSW4gY2FzZSB3ZSByZWNlaXZlZCBhbiBhYnNvbHV0ZSBwYXRoLCBjb252ZXJ0IGl0IHRvIHJlbGF0aXZlIGZvcm0gb3IgdGhlIGZldGNoIHdpbGwgZmFpbDpcbiAgICBpZiAocGF0aFJlbGF0aXZlVG9FcHViUm9vdC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgcGF0aFJlbGF0aXZlVG9FcHViUm9vdCA9IHBhdGhSZWxhdGl2ZVRvRXB1YlJvb3Quc3Vic3RyKDEpO1xuICAgIH1cbiAgICB2YXIgZmV0Y2hGdW5jdGlvbiA9IF9yZXNvdXJjZUZldGNoZXIuZmV0Y2hGaWxlQ29udGVudHNUZXh0O1xuICAgIGlmIChmZXRjaE1vZGUgPT09ICdibG9iJykge1xuICAgICAgZmV0Y2hGdW5jdGlvbiA9IF9yZXNvdXJjZUZldGNoZXIuZmV0Y2hGaWxlQ29udGVudHNCbG9iO1xuICAgIH0gZWxzZSBpZiAoZmV0Y2hNb2RlID09PSAnZGF0YTY0dXJpJykge1xuICAgICAgZmV0Y2hGdW5jdGlvbiA9IF9yZXNvdXJjZUZldGNoZXIuZmV0Y2hGaWxlQ29udGVudHNEYXRhNjRVcmk7XG4gICAgfVxuICAgIGZldGNoRnVuY3Rpb24uY2FsbChfcmVzb3VyY2VGZXRjaGVyLCBwYXRoUmVsYXRpdmVUb0VwdWJSb290LCBmZXRjaENhbGxiYWNrLCBvbmVycm9yKTtcbiAgfTtcblxuXG5cbiAgdGhpcy5nZXRSZWxhdGl2ZVhtbEZpbGVEb20gPSBmdW5jdGlvbihmaWxlUGF0aCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICBzZWxmLmdldFhtbEZpbGVEb20oc2VsZi5jb252ZXJ0UGF0aFJlbGF0aXZlVG9QYWNrYWdlVG9SZWxhdGl2ZVRvQmFzZShmaWxlUGF0aCksIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWFkRW5jcmlwdGlvbkRhdGEoY2FsbGJhY2spIHtcbiAgICBzZWxmLmdldFhtbEZpbGVEb20oJ01FVEEtSU5GL2VuY3J5cHRpb24ueG1sJywgZnVuY3Rpb24oZW5jcnlwdGlvbkRvbSwgZXJyb3IpIHtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJEb2N1bWVudCBkb2Vzbid0IG1ha2UgdXNlIG9mIGVuY3J5cHRpb24uXCIpO1xuICAgICAgICBfZW5jcnlwdGlvbkhhbmRsZXIgPSBuZXcgRW5jcnlwdGlvbkhhbmRsZXIodW5kZWZpbmVkKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgdmFyIGVuY3J5cHRpb25zID0gW107XG5cblxuICAgICAgICB2YXIgZW5jcnlwdGVkRGF0YSA9ICQoJ0VuY3J5cHRlZERhdGEnLCBlbmNyeXB0aW9uRG9tKTtcbiAgICAgICAgZW5jcnlwdGVkRGF0YS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbmNyeXB0ZWREYXRhKSB7XG4gICAgICAgICAgdmFyIGVuY3J5cHRpb25BbGdvcml0aG0gPSAkKCdFbmNyeXB0aW9uTWV0aG9kJywgZW5jcnlwdGVkRGF0YSkuZmlyc3QoKS5hdHRyKCdBbGdvcml0aG0nKTtcblxuICAgICAgICAgIGVuY3J5cHRpb25zLnB1c2goe1xuICAgICAgICAgICAgYWxnb3JpdGhtOiBlbmNyeXB0aW9uQWxnb3JpdGhtXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBGb3Igc29tZSByZWFzb24sIGpRdWVyeSBzZWxlY3RvciBcIlwiIGFnYWluc3QgWE1MIERPTSBzb21ldGltZXMgZG9lc24ndCBtYXRjaCBwcm9wZXJseVxuICAgICAgICAgIHZhciBjaXBoZXJSZWZlcmVuY2UgPSAkKCdDaXBoZXJSZWZlcmVuY2UnLCBlbmNyeXB0ZWREYXRhKTtcbiAgICAgICAgICBjaXBoZXJSZWZlcmVuY2UuZWFjaChmdW5jdGlvbihpbmRleCwgQ2lwaGVyUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICB2YXIgY2lwaGVyUmVmZXJlbmNlVVJJID0gJChDaXBoZXJSZWZlcmVuY2UpLmF0dHIoJ1VSSScpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0VuY3J5cHRpb24vb2JmdXNjYXRpb24gYWxnb3JpdGhtICcgKyBlbmNyeXB0aW9uQWxnb3JpdGhtICsgJyBzcGVjaWZpZWQgZm9yICcgK1xuICAgICAgICAgICAgICBjaXBoZXJSZWZlcmVuY2VVUkkpO1xuICAgICAgICAgICAgZW5jcnlwdGlvbnNbY2lwaGVyUmVmZXJlbmNlVVJJXSA9IGVuY3J5cHRpb25BbGdvcml0aG07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICAvLyBDdXJyZW50bHkgbmVlZGVkIGZvciBkZW9iZnVzY2F0aW5nIGZvbnRzXG4gIHRoaXMuc2V0UGFja2FnZU1ldGFkYXRhID0gZnVuY3Rpb24ocGFja2FnZU1ldGFkYXRhLCBzZXR0aW5nRmluaXNoZWRDYWxsYmFjaykge1xuXG4gICAgc2VsZi5nZXRYbWxGaWxlRG9tKCdNRVRBLUlORi9lbmNyeXB0aW9uLnhtbCcsIGZ1bmN0aW9uKGVuY3J5cHRpb25Eb20pIHtcblxuICAgICAgdmFyIGVuY3J5cHRpb25EYXRhID0gRW5jcnlwdGlvbkhhbmRsZXIuQ3JlYXRlRW5jcnlwdGlvbkRhdGEocGFja2FnZU1ldGFkYXRhLmlkLCBlbmNyeXB0aW9uRG9tKTtcblxuICAgICAgX2VuY3J5cHRpb25IYW5kbGVyID0gbmV3IEVuY3J5cHRpb25IYW5kbGVyKGVuY3J5cHRpb25EYXRhKTtcblxuICAgICAgaWYgKF9lbmNyeXB0aW9uSGFuZGxlci5pc0VuY3J5cHRpb25TcGVjaWZpZWQoKSkge1xuICAgICAgICAvLyBFUFVCcyB0aGF0IHVzZSBlbmNyeXB0aW9uIGZvciBhbnkgcmVzb3VyY2VzIHNob3VsZCBiZSBmZXRjaGVkIGluIGEgcHJvZ3JhbW1hdGljYWwgbWFubmVyOlxuICAgICAgICBfc2hvdWxkQ29uc3RydWN0RG9tUHJvZ3JhbW1hdGljYWxseSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHNldHRpbmdGaW5pc2hlZENhbGxiYWNrKCk7XG5cblxuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiRG9jdW1lbnQgZG9lc24ndCBtYWtlIHVzZSBvZiBlbmNyeXB0aW9uLlwiKTtcbiAgICAgIF9lbmNyeXB0aW9uSGFuZGxlciA9IG5ldyBFbmNyeXB0aW9uSGFuZGxlcih1bmRlZmluZWQpO1xuXG4gICAgICBzZXR0aW5nRmluaXNoZWRDYWxsYmFjaygpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGVjcnlwdGlvbkZ1bmN0aW9uRm9yUmVsYXRpdmVQYXRoID0gZnVuY3Rpb24ocGF0aFJlbGF0aXZlVG9Sb290KSB7XG4gICAgcmV0dXJuIF9lbmNyeXB0aW9uSGFuZGxlci5nZXREZWNyeXB0aW9uRnVuY3Rpb25Gb3JSZWxhdGl2ZVBhdGgocGF0aFJlbGF0aXZlVG9Sb290KTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQdWJsaWNhdGlvbkZldGNoZXI7IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbmZ1bmN0aW9uIFJlc291cmNlQ2FjaGUoKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgX3Jlc291cmNlc0hhc2ggPSB7fTtcblxuICB0aGlzLmdldFJlc291cmNlVVJMID0gZnVuY3Rpb24ocmVzb3VyY2VBYnNvbHV0ZUhyZWYpIHtcbiAgICB2YXIgcmVzb3VyY2VPYmplY3RVcmwgPSBfcmVzb3VyY2VzSGFzaFtyZXNvdXJjZUFic29sdXRlSHJlZl07XG4gICAgcmV0dXJuIHJlc291cmNlT2JqZWN0VXJsO1xuICB9O1xuXG4gIHRoaXMucHV0UmVzb3VyY2VVUkwgPSBmdW5jdGlvbihyZXNvdXJjZUFic29sdXRlSHJlZiwgcmVzb3VyY2VPYmplY3RVcmwpIHtcbiAgICBfcmVzb3VyY2VzSGFzaFtyZXNvdXJjZUFic29sdXRlSHJlZl0gPSByZXNvdXJjZU9iamVjdFVybDtcbiAgfTtcbiAgLy8gVE9ETzogbWV0aG9kcyB0byBldmljdCByZXNvdXJjZSwgZGVzdHJveSBjYWNoZSBhbmQgcmVsZWFzZSBvYmplY3QgVVJMcyB1c2luZyB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCgpLCBhdXRvbWF0aWNcbiAgLy8gY2FjaGUgc2l6ZSBhY2NvdW50aW5nIGFuZCBtYW5hZ2VtZW50IGFsZ29yaXRobXMgbGlrZSBMUlUuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc291cmNlQ2FjaGU7IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbnZhciBVUkkgPSByZXF1aXJlKCdVUklqcycpO1xudmFyIENvbnRlbnRUeXBlRGlzY292ZXJ5ID0gcmVxdWlyZSgnLi9kaXNjb3Zlci1jb250ZW50LXR5cGUnKTtcblxuZnVuY3Rpb24gWmlwUmVzb3VyY2VGZXRjaGVyKHBhcmVudEZldGNoZXIsIGJhc2VVcmwsIGxpYkRpcikge1xuXG4gIHZhciBfY2hlY2tDcmMzMiA9IGZhbHNlO1xuICB2YXIgX3ppcEZzO1xuXG4gIC8vIElOVEVSTkFMIEZVTkNUSU9OU1xuXG4gIC8vIERlc2NyaXB0aW9uOiBwZXJmb3JtIGEgZnVuY3Rpb24gd2l0aCBhbiBpbml0aWFsaXplZCB6aXAgZmlsZXN5c3RlbSwgbWFraW5nIHN1cmUgdGhhdCBzdWNoIGZpbGVzeXN0ZW0gaXMgaW5pdGlhbGl6ZWQuXG4gIC8vIE5vdGUgdGhhdCBkdWUgdG8gYSByYWNlIGNvbmRpdGlvbiwgbW9yZSB0aGFuIG9uZSB6aXAgZmlsZXN5c3RlbSBtYXkgYmUgaW5zdGFudGlhdGVkLlxuICAvLyBIb3dldmVyLCB0aGUgbGFzdCBvbmUgdG8gYmUgc2V0IG9uIHRoZSBtb2RlbCBvYmplY3Qgd2lsbCBwcmV2YWlsIGFuZCBvdGhlcnMgd291bGQgYmUgZ2FyYmFnZSBjb2xsZWN0ZWQgbGF0ZXIuXG4gIGZ1bmN0aW9uIHdpdGhaaXBGc1BlcmZvcm0oY2FsbGJhY2ssIG9uZXJyb3IpIHtcblxuICAgIGlmIChfemlwRnMpIHtcblxuICAgICAgY2FsbGJhY2soX3ppcEZzLCBvbmVycm9yKTtcblxuICAgIH0gZWxzZSB7XG5cbiAgICAgIHppcC53b3JrZXJTY3JpcHRzUGF0aCA9IGxpYkRpcjtcbiAgICAgIF96aXBGcyA9IG5ldyB6aXAuZnMuRlMoKTtcbiAgICAgIF96aXBGcy5pbXBvcnRIdHRwQ29udGVudChiYXNlVXJsLCB0cnVlLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBjYWxsYmFjayhfemlwRnMsIG9uZXJyb3IpO1xuXG4gICAgICB9LCBvbmVycm9yKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZldGNoRmlsZUNvbnRlbnRzKHJlbGF0aXZlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgcmVhZENhbGxiYWNrLCBvbmVycm9yKSB7XG5cbiAgICBpZiAodHlwZW9mIHJlbGF0aXZlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93ICdGZXRjaGVkIGZpbGUgcmVsYXRpdmUgcGF0aCBpcyB1bmRlZmluZWQhJztcbiAgICB9XG5cbiAgICB3aXRoWmlwRnNQZXJmb3JtKGZ1bmN0aW9uKHppcEZzLCBvbmVycm9yKSB7XG4gICAgICB2YXIgZW50cnkgPSB6aXBGcy5maW5kKHJlbGF0aXZlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCk7XG4gICAgICBpZiAodHlwZW9mIGVudHJ5ID09PSAndW5kZWZpbmVkJyB8fCBlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICBvbmVycm9yKG5ldyBFcnJvcignRW50cnkgJyArIHJlbGF0aXZlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCArICcgbm90IGZvdW5kIGluIHppcCAnICsgYmFzZVVybCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVudHJ5LmRpcmVjdG9yeSkge1xuICAgICAgICAgIG9uZXJyb3IobmV3IEVycm9yKCdFbnRyeSAnICsgcmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290ICsgJyBpcyBhIGRpcmVjdG9yeSB3aGlsZSBhIGZpbGUgaGFzIGJlZW4gZXhwZWN0ZWQnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVhZENhbGxiYWNrKGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIG9uZXJyb3IpO1xuICB9XG5cblxuICAvLyBQVUJMSUMgQVBJXG5cbiAgdGhpcy5nZXRQYWNrYWdlVXJsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhc2VVcmw7XG4gIH07XG5cbiAgdGhpcy5mZXRjaEZpbGVDb250ZW50c1RleHQgPSBmdW5jdGlvbihyZWxhdGl2ZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QsIGZldGNoQ2FsbGJhY2ssIG9uZXJyb3IpIHtcblxuICAgIGZldGNoRmlsZUNvbnRlbnRzKHJlbGF0aXZlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgIGVudHJ5LmdldFRleHQoZmV0Y2hDYWxsYmFjaywgdW5kZWZpbmVkLCBfY2hlY2tDcmMzMik7XG4gICAgfSwgb25lcnJvcilcbiAgfTtcblxuICB0aGlzLmZldGNoRmlsZUNvbnRlbnRzRGF0YTY0VXJpID0gZnVuY3Rpb24ocmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBmZXRjaENhbGxiYWNrLCBvbmVycm9yKSB7XG4gICAgZmV0Y2hGaWxlQ29udGVudHMocmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290LCBmdW5jdGlvbihlbnRyeSkge1xuICAgICAgZW50cnkuZ2V0RGF0YTY0VVJJKENvbnRlbnRUeXBlRGlzY292ZXJ5LmlkZW50aWZ5Q29udGVudFR5cGVGcm9tRmlsZU5hbWUocmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290KSxcbiAgICAgICAgZmV0Y2hDYWxsYmFjaywgdW5kZWZpbmVkLCBfY2hlY2tDcmMzMik7XG4gICAgfSwgb25lcnJvcilcbiAgfTtcblxuICB0aGlzLmZldGNoRmlsZUNvbnRlbnRzQmxvYiA9IGZ1bmN0aW9uKHJlbGF0aXZlUGF0aFJlbGF0aXZlVG9QYWNrYWdlUm9vdCwgZmV0Y2hDYWxsYmFjaywgb25lcnJvcikge1xuICAgIHZhciBkZWNyeXB0aW9uRnVuY3Rpb24gPSBwYXJlbnRGZXRjaGVyLmdldERlY3J5cHRpb25GdW5jdGlvbkZvclJlbGF0aXZlUGF0aChyZWxhdGl2ZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QpO1xuICAgIGlmIChkZWNyeXB0aW9uRnVuY3Rpb24pIHtcbiAgICAgIHZhciBvcmlnRmV0Y2hDYWxsYmFjayA9IGZldGNoQ2FsbGJhY2s7XG4gICAgICBmZXRjaENhbGxiYWNrID0gZnVuY3Rpb24odW5lbmNyeXB0ZWRCbG9iKSB7XG4gICAgICAgIGRlY3J5cHRpb25GdW5jdGlvbih1bmVuY3J5cHRlZEJsb2IsIGZ1bmN0aW9uKGRlY3J5cHRlZEJsb2IpIHtcbiAgICAgICAgICBvcmlnRmV0Y2hDYWxsYmFjayhkZWNyeXB0ZWRCbG9iKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBmZXRjaEZpbGVDb250ZW50cyhyZWxhdGl2ZVBhdGhSZWxhdGl2ZVRvUGFja2FnZVJvb3QsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICBlbnRyeS5nZXRCbG9iKENvbnRlbnRUeXBlRGlzY292ZXJ5LmlkZW50aWZ5Q29udGVudFR5cGVGcm9tRmlsZU5hbWUocmVsYXRpdmVQYXRoUmVsYXRpdmVUb1BhY2thZ2VSb290KSwgZmV0Y2hDYWxsYmFjayxcbiAgICAgICAgdW5kZWZpbmVkLCBfY2hlY2tDcmMzMik7XG4gICAgfSwgb25lcnJvcilcbiAgfTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBaaXBSZXNvdXJjZUZldGNoZXI7IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG5cbmZ1bmN0aW9uIE1hbmlmZXN0KG1hbmlmZXN0SnNvbikge1xuXG4gIHZhciBfbWFuaWZlc3RJbmRleEJ5SWQgPSB7fTtcbiAgdmFyIF9uYXZJdGVtO1xuXG4gIHRoaXMubWFuaWZlc3RMZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbWFuaWZlc3RKc29uLmxlbmd0aDtcbiAgfTtcblxuICB0aGlzLmdldE1hbmlmZXN0SXRlbUJ5SWRyZWYgPSBmdW5jdGlvbihpZHJlZikge1xuICAgIHJldHVybiBfbWFuaWZlc3RJbmRleEJ5SWRbaWRyZWZdO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgbWFuaWZlc3QgaXRlbXMgYW5kIGFwcGx5IGNhbGxiYWNrIChzeW5jaHJvbm91c2x5KSBvbiBlYWNoIG9uZSBvZiB0aGVtLlxuICAgKiBAcGFyYW0gaXRlcmF0b3JDYWxsYmFjayB0aGUgaXRlcmF0b3IgY2FsbGJhY2sgZnVuY3Rpb24sIHdpbGwgYmUgY2FsbGVkIG9uY2UgZm9yIGVhY2ggbWFuaWZlc3QgaXRlbSxcbiAgICogYW5kIHRoZSBpdGVtIHdpbGwgYmUgcGFzc2VkIGFzIHRoZSAob25lIGFuZCBvbmx5KSBhcmd1bWVudC5cbiAgICogQHJldHVybnMgdGhlIE1hbmlmZXN0IG9iamVjdCBmb3IgY2hhaW5pbmcuXG4gICAqL1xuICB0aGlzLmVhY2ggPSBmdW5jdGlvbihpdGVyYXRvckNhbGxiYWNrKSB7XG4gICAgXy5lYWNoKG1hbmlmZXN0SnNvbiwgaXRlcmF0b3JDYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdGhpcy5nZXROYXZJdGVtID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9uYXZJdGVtO1xuICB9O1xuXG4gIC8vIEluaXRpYWxpemUgaW5kZXhlc1xuICB0aGlzLmVhY2goZnVuY3Rpb24obWFuaWZlc3RJdGVtKSB7XG4gICAgX21hbmlmZXN0SW5kZXhCeUlkW21hbmlmZXN0SXRlbS5pZF0gPSBtYW5pZmVzdEl0ZW07XG5cbiAgICBpZiAobWFuaWZlc3RJdGVtLnByb3BlcnRpZXMgJiYgbWFuaWZlc3RJdGVtLnByb3BlcnRpZXMuaW5kZXhPZihcIm5hdlwiKSAhPT0gLTEpIHtcbiAgICAgIF9uYXZJdGVtID0gbWFuaWZlc3RJdGVtO1xuICAgIH1cbiAgfSk7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWFuaWZlc3Q7IiwiLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG5cbmZ1bmN0aW9uIE1ldGFkYXRhKCkge1xuXG4gIHZhciB0aGF0ID0gdGhpcztcblxuICB2YXIgX21lZGlhSXRlbUluZGV4QnlSZWZpbmVzSWQgPSB7fTtcblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIG1lZGlhIGl0ZW1zIGFuZCBhcHBseSBjYWxsYmFjayAoc3luY2hyb25vdXNseSkgb24gZWFjaCBvbmUgb2YgdGhlbS5cbiAgICogQHBhcmFtIGl0ZXJhdG9yQ2FsbGJhY2sgdGhlIGl0ZXJhdG9yIGNhbGxiYWNrIGZ1bmN0aW9uLCB3aWxsIGJlIGNhbGxlZCBvbmNlIGZvciBlYWNoIG1lZGlhIGl0ZW0sXG4gICAqIGFuZCB0aGUgaXRlbSB3aWxsIGJlIHBhc3NlZCBhcyB0aGUgKG9uZSBhbmQgb25seSkgYXJndW1lbnQuXG4gICAqIEByZXR1cm5zIHRoZSBNZXRhZGF0YSBvYmplY3QgZm9yIGNoYWluaW5nLlxuICAgKi9cbiAgdGhpcy5lYWNoTWVkaWFJdGVtID0gZnVuY3Rpb24oaXRlcmF0b3JDYWxsYmFjaykge1xuICAgIGlmICh0aGF0Lm1lZGlhSXRlbXMpIHtcbiAgICAgIF8uZWFjaCh0aGF0Lm1lZGlhSXRlbXMsIGl0ZXJhdG9yQ2FsbGJhY2spO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB0aGlzLmdldE1lZGlhSXRlbUJ5UmVmaW5lc0lkID0gZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gX21lZGlhSXRlbUluZGV4QnlSZWZpbmVzSWRbaWRdO1xuICB9O1xuXG4gIHRoaXMuc2V0TW9NYXAgPSBmdW5jdGlvbihtZWRpYU92ZXJsYXlzTWFwKSB7XG4gICAgdGhhdC5tZWRpYV9vdmVybGF5LnNtaWxfbW9kZWxzID0gbWVkaWFPdmVybGF5c01hcDtcbiAgfTtcblxuICAvLyBJbml0aWFsaXplIGluZGV4ZXNcbiAgdGhpcy5lYWNoTWVkaWFJdGVtKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB2YXIgaWQgPSBpdGVtLnJlZmluZXM7XG4gICAgdmFyIGhhc2ggPSBpZC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2ggPj0gMCkge1xuICAgICAgdmFyIHN0YXJ0ID0gaGFzaCArIDE7XG4gICAgICB2YXIgZW5kID0gaWQubGVuZ3RoIC0gMTtcbiAgICAgIGlkID0gaWQuc3Vic3RyKHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgICBpZCA9IGlkLnRyaW0oKTtcblxuICAgIF9tZWRpYUl0ZW1JbmRleEJ5UmVmaW5lc0lkW2lkXSA9IGl0ZW07XG4gIH0pO1xuXG5cbn07XG5tb2R1bGUuZXhwb3J0cyA9IE1ldGFkYXRhOyIsIi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxudmFyIE1hbmlmZXN0ID0gcmVxdWlyZSgnLi9tYW5pZmVzdCcpXG52YXIgTWFya3VwUGFyc2VyID0gcmVxdWlyZSgnLi4vZXB1Yi1mZXRjaC9tYXJrdXAtcGFyc2VyJylcbnZhciBNZXRhZGF0YSA9IHJlcXVpcmUoJy4vbWV0YWRhdGEnKVxudmFyIFVSSSA9IHJlcXVpcmUoJ1VSSWpzJylcbnZhciBQYWNrYWdlRG9jdW1lbnQgPSByZXF1aXJlKCcuL3BhY2thZ2UtZG9jdW1lbnQnKVxudmFyIFNtaWxEb2N1bWVudFBhcnNlciA9IHJlcXVpcmUoJy4vc21pbC1kb2N1bWVudC1wYXJzZXInKVxuXG4vLyBgUGFja2FnZURvY3VtZW50UGFyc2VyYCBpcyB1c2VkIHRvIHBhcnNlIHRoZSB4bWwgb2YgYW4gZXB1YiBwYWNrYWdlXG4vLyBkb2N1bWVudCBhbmQgYnVpbGQgYSBqYXZhc2NyaXB0IG9iamVjdC4gVGhlIGNvbnN0cnVjdG9yIGFjY2VwdHMgYW5cbi8vIGluc3RhbmNlIG9mIGBVUklgIHRoYXQgaXMgdXNlZCB0byByZXNvbHZlIHBhdGhzIGR1cmluZyB0aGUgcHJvY2Vzc1xuZnVuY3Rpb24gUGFja2FnZURvY3VtZW50UGFyc2VyKGJvb2tSb290LCBwdWJsaWNhdGlvbkZldGNoZXIpIHtcblxuICB2YXIgX3BhY2thZ2VGZXRjaGVyID0gcHVibGljYXRpb25GZXRjaGVyO1xuICB2YXIgX2RlZmVycmVkWG1sRG9tID0gJC5EZWZlcnJlZCgpO1xuICB2YXIgX3htbERvbTtcblxuICBmdW5jdGlvbiBvbkVycm9yKGVycm9yKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IubWVzc2FnZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgaWYgKGVycm9yLnN0YWNrKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpY2F0aW9uRmV0Y2hlci5nZXRQYWNrYWdlRG9tKGZ1bmN0aW9uKHBhY2thZ2VEb20pIHtcbiAgICBfeG1sRG9tID0gcGFja2FnZURvbTtcbiAgICBfZGVmZXJyZWRYbWxEb20ucmVzb2x2ZShwYWNrYWdlRG9tKTtcbiAgfSwgb25FcnJvcik7XG5cbiAgZnVuY3Rpb24gZmlsbFNtaWxEYXRhKHBhY2thZ2VEb2N1bWVudCwgY2FsbGJhY2spIHtcblxuICAgIHZhciBzbWlsUGFyc2VyID0gbmV3IFNtaWxEb2N1bWVudFBhcnNlcihwYWNrYWdlRG9jdW1lbnQsIHB1YmxpY2F0aW9uRmV0Y2hlcik7XG5cbiAgICBzbWlsUGFyc2VyLmZpbGxTbWlsRGF0YShmdW5jdGlvbigpIHtcblxuICAgICAgLy8gcmV0dXJuIHRoZSBwYXJzZSByZXN1bHRcbiAgICAgIGNhbGxiYWNrKHBhY2thZ2VEb2N1bWVudCk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8vIFBhcnNlIGFuIFhNTCBwYWNrYWdlIGRvY3VtZW50IGludG8gYSBqYXZhc2NyaXB0IG9iamVjdFxuICB0aGlzLnBhcnNlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICAgIF9kZWZlcnJlZFhtbERvbS5kb25lKGZ1bmN0aW9uKHhtbERvbSkge1xuICAgICAgdmFyIG1ldGFkYXRhID0gZ2V0TWV0YWRhdGEoeG1sRG9tKTtcblxuICAgICAgdmFyIHNwaW5lRWxlbSA9IHhtbERvbS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TKFwiKlwiLCBcInNwaW5lXCIpWzBdO1xuICAgICAgdmFyIHBhZ2VfcHJvZ19kaXIgPSBnZXRFbGVtQXR0cih4bWxEb20sICdzcGluZScsIFwicGFnZS1wcm9ncmVzc2lvbi1kaXJlY3Rpb25cIik7XG5cbiAgICAgIC8vIFRPRE86IEJpbmRpbmdzIGFyZSB1bnVzZWRcbiAgICAgIHZhciBiaW5kaW5ncyA9IGdldEpzb25CaW5kaW5ncyh4bWxEb20pO1xuXG4gICAgICB2YXIgbWFuaWZlc3QgPSBuZXcgTWFuaWZlc3QoZ2V0SnNvbk1hbmlmZXN0KHhtbERvbSkpO1xuICAgICAgdmFyIHNwaW5lID0gZ2V0SnNvblNwaW5lKHhtbERvbSwgbWFuaWZlc3QsIG1ldGFkYXRhKTtcblxuICAgICAgLy8gdHJ5IHRvIGZpbmQgYSBjb3ZlciBpbWFnZVxuICAgICAgdmFyIGNvdmVyID0gZ2V0Q292ZXJIcmVmKHhtbERvbSk7XG4gICAgICBpZiAoY292ZXIpIHtcbiAgICAgICAgbWV0YWRhdGEuY292ZXJfaHJlZiA9IGNvdmVyO1xuICAgICAgfVxuXG4gICAgICAkLndoZW4odXBkYXRlTWV0YWRhdGFXaXRoSUJvb2tQcm9wZXJ0aWVzKG1ldGFkYXRhKSkudGhlbihmdW5jdGlvbigpIHtcblxuICAgICAgICBfcGFja2FnZUZldGNoZXIuc2V0UGFja2FnZU1ldGFkYXRhKG1ldGFkYXRhLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcGFja2FnZURvY3VtZW50ID0gbmV3IFBhY2thZ2VEb2N1bWVudChwdWJsaWNhdGlvbkZldGNoZXIuZ2V0UGFja2FnZVVybCgpLFxuICAgICAgICAgICAgcHVibGljYXRpb25GZXRjaGVyLCBtZXRhZGF0YSwgc3BpbmUsIG1hbmlmZXN0KTtcblxuICAgICAgICAgIHBhY2thZ2VEb2N1bWVudC5zZXRQYWdlUHJvZ3Jlc3Npb25EaXJlY3Rpb24ocGFnZV9wcm9nX2Rpcik7XG4gICAgICAgICAgZmlsbFNtaWxEYXRhKHBhY2thZ2VEb2N1bWVudCwgY2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdXBkYXRlTWV0YWRhdGFXaXRoSUJvb2tQcm9wZXJ0aWVzKG1ldGFkYXRhKSB7XG5cbiAgICB2YXIgZGZmID0gJC5EZWZlcnJlZCgpO1xuXG4gICAgLy9pZiBsYXlvdXQgbm90IHNldFxuICAgIGlmICghbWV0YWRhdGEucmVuZGl0aW9uX2xheW91dCkge1xuICAgICAgdmFyIHBhdGhUb0lCb29rc1NwZWNpZmljWG1sID0gXCIvTUVUQS1JTkYvY29tLmFwcGxlLmlib29rcy5kaXNwbGF5LW9wdGlvbnMueG1sXCI7XG5cbiAgICAgIHB1YmxpY2F0aW9uRmV0Y2hlci5yZWxhdGl2ZVRvUGFja2FnZUZldGNoRmlsZUNvbnRlbnRzKHBhdGhUb0lCb29rc1NwZWNpZmljWG1sLCAndGV4dCcsIGZ1bmN0aW9uKGlib29rUHJvcFRleHQpIHtcbiAgICAgICAgaWYgKGlib29rUHJvcFRleHQpIHtcbiAgICAgICAgICB2YXIgcGFyc2VyID0gbmV3IE1hcmt1cFBhcnNlcigpO1xuICAgICAgICAgIHZhciBwcm9wTW9kZWwgPSBwYXJzZXIucGFyc2VYbWwoaWJvb2tQcm9wVGV4dCk7XG4gICAgICAgICAgdmFyIGZpeExheW91dFByb3AgPSAkKFwib3B0aW9uW25hbWU9Zml4ZWQtbGF5b3V0XVwiLCBwcm9wTW9kZWwpWzBdO1xuICAgICAgICAgIGlmIChmaXhMYXlvdXRQcm9wKSB7XG4gICAgICAgICAgICB2YXIgZml4TGF5b3V0VmFsID0gJChmaXhMYXlvdXRQcm9wKS50ZXh0KCk7XG4gICAgICAgICAgICBpZiAoZml4TGF5b3V0VmFsID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgICBtZXRhZGF0YS5yZW5kaXRpb25fbGF5b3V0ID0gXCJwcmUtcGFnaW5hdGVkXCI7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXNpbmcgY29tLmFwcGxlLmlib29rcy5kaXNwbGF5LW9wdGlvbnMueG1sIGZpeGVkLWxheW91dCBwcm9wZXJ0eVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkZmYucmVzb2x2ZSgpO1xuXG4gICAgICB9LCBmdW5jdGlvbihlcnIpIHtcblxuICAgICAgICBjb25zb2xlLmxvZyhcImNvbS5hcHBsZS5pYm9va3MuZGlzcGxheS1vcHRpb25zLnhtbCBub3QgZm91bmRcIik7XG4gICAgICAgIGRmZi5yZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGZmLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGZmLnByb21pc2UoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZ2V0SnNvblNwaW5lKHhtbERvbSwgbWFuaWZlc3QsIG1ldGFkYXRhKSB7XG5cbiAgICB2YXIgJHNwaW5lRWxlbWVudHM7XG4gICAgdmFyIGpzb25TcGluZSA9IFtdO1xuXG4gICAgJHNwaW5lRWxlbWVudHMgPSAkKGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyh4bWxEb20sIFwic3BpbmVcIikpLmNoaWxkcmVuKCk7XG4gICAgJC5lYWNoKCRzcGluZUVsZW1lbnRzLCBmdW5jdGlvbihzcGluZUVsZW1lbnRJbmRleCwgY3VyclNwaW5lRWxlbWVudCkge1xuXG4gICAgICB2YXIgJGN1cnJTcGluZUVsZW1lbnQgPSAkKGN1cnJTcGluZUVsZW1lbnQpO1xuICAgICAgdmFyIGlkcmVmID0gJGN1cnJTcGluZUVsZW1lbnQuYXR0cihcImlkcmVmXCIpID8gJGN1cnJTcGluZUVsZW1lbnQuYXR0cihcImlkcmVmXCIpIDogXCJcIjtcbiAgICAgIHZhciBtYW5pZmVzdEl0ZW0gPSBtYW5pZmVzdC5nZXRNYW5pZmVzdEl0ZW1CeUlkcmVmKGlkcmVmKTtcblxuICAgICAgdmFyIGlkID0gJGN1cnJTcGluZUVsZW1lbnQuYXR0cihcImlkXCIpO1xuICAgICAgdmFyIHZpZXdwb3J0ID0gdW5kZWZpbmVkO1xuICAgICAgXy5lYWNoKG1ldGFkYXRhLnJlbmRpdGlvbl92aWV3cG9ydHMsIGZ1bmN0aW9uKHZwKSB7XG4gICAgICAgIGlmICh2cC5yZWZpbmVzID09IGlkKSB7XG4gICAgICAgICAgdmlld3BvcnQgPSB2cC52aWV3cG9ydDtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBzcGluZUl0ZW0gPSB7XG4gICAgICAgIHJlbmRpdGlvbl92aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICAgIGlkcmVmOiBpZHJlZixcbiAgICAgICAgaHJlZjogbWFuaWZlc3RJdGVtLmhyZWYsXG4gICAgICAgIG1hbmlmZXN0X2lkOiBtYW5pZmVzdEl0ZW0uaWQsXG4gICAgICAgIG1lZGlhX3R5cGU6IG1hbmlmZXN0SXRlbS5tZWRpYV90eXBlLFxuICAgICAgICBtZWRpYV9vdmVybGF5X2lkOiBtYW5pZmVzdEl0ZW0ubWVkaWFfb3ZlcmxheV9pZCxcbiAgICAgICAgbGluZWFyOiAkY3VyclNwaW5lRWxlbWVudC5hdHRyKFwibGluZWFyXCIpID8gJGN1cnJTcGluZUVsZW1lbnQuYXR0cihcImxpbmVhclwiKSA6IFwiXCIsXG4gICAgICAgIHByb3BlcnRpZXM6ICRjdXJyU3BpbmVFbGVtZW50LmF0dHIoXCJwcm9wZXJ0aWVzXCIpID8gJGN1cnJTcGluZUVsZW1lbnQuYXR0cihcInByb3BlcnRpZXNcIikgOiBcIlwiXG4gICAgICB9O1xuXG4gICAgICB2YXIgcGFyc2VkUHJvcGVydGllcyA9IHBhcnNlUHJvcGVydGllc1N0cmluZyhzcGluZUl0ZW0ucHJvcGVydGllcyk7XG4gICAgICBfLmV4dGVuZChzcGluZUl0ZW0sIHBhcnNlZFByb3BlcnRpZXMpO1xuXG4gICAgICBqc29uU3BpbmUucHVzaChzcGluZUl0ZW0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGpzb25TcGluZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyhyb290RWxlbWVudCwgbG9jYWxOYW1lLCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgZWxlbWVudHMgPSByb290RWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZU5TKFwiKlwiLCBsb2NhbE5hbWUpO1xuICAgIGlmIChwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBfLmZpbmQoZWxlbWVudHMsIHByZWRpY2F0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbGVtZW50c1swXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaWx0ZXJYbWxFbGVtc0J5TG9jYWxOYW1lQW55TlMocm9vdEVsZW1lbnQsIGxvY2FsTmFtZSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gcm9vdEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyhcIipcIiwgbG9jYWxOYW1lKTtcbiAgICByZXR1cm4gXy5maWx0ZXIoZWxlbWVudHMsIHByZWRpY2F0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRFbGVtVGV4dChyb290RWxlbWVudCwgbG9jYWxOYW1lLCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgZm91bmRFbGVtZW50ID0gZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKHJvb3RFbGVtZW50LCBsb2NhbE5hbWUsIHByZWRpY2F0ZSk7XG4gICAgaWYgKGZvdW5kRWxlbWVudCkge1xuICAgICAgcmV0dXJuIGZvdW5kRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEVsZW1BdHRyKHJvb3RFbGVtZW50LCBsb2NhbE5hbWUsIGF0dHJOYW1lLCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgZm91bmRFbGVtZW50ID0gZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKHJvb3RFbGVtZW50LCBsb2NhbE5hbWUsIHByZWRpY2F0ZSk7XG4gICAgaWYgKGZvdW5kRWxlbWVudCkge1xuICAgICAgcmV0dXJuIGZvdW5kRWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWV0YUVsZW1Qcm9wZXJ0eVRleHQocm9vdEVsZW1lbnQsIGF0dHJQcm9wZXJ0eVZhbHVlKSB7XG5cbiAgICB2YXIgZm91bmRFbGVtZW50ID0gZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKHJvb3RFbGVtZW50LCBcIm1ldGFcIiwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgPT09IGF0dHJQcm9wZXJ0eVZhbHVlO1xuICAgIH0pO1xuXG4gICAgaWYgKGZvdW5kRWxlbWVudCkge1xuICAgICAgcmV0dXJuIGZvdW5kRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG5cbiAgZnVuY3Rpb24gZ2V0TWV0YWRhdGEoeG1sRG9tKSB7XG5cbiAgICB2YXIgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEoKTtcbiAgICB2YXIgbWV0YWRhdGFFbGVtID0gZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKHhtbERvbSwgXCJtZXRhZGF0YVwiKTtcbiAgICB2YXIgcGFja2FnZUVsZW0gPSBmaW5kWG1sRWxlbUJ5TG9jYWxOYW1lQW55TlMoeG1sRG9tLCBcInBhY2thZ2VcIik7XG4gICAgdmFyIHNwaW5lRWxlbSA9IGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyh4bWxEb20sIFwic3BpbmVcIik7XG5cblxuICAgIG1ldGFkYXRhLmF1dGhvciA9IGdldEVsZW1UZXh0KG1ldGFkYXRhRWxlbSwgXCJjcmVhdG9yXCIpO1xuICAgIG1ldGFkYXRhLmRlc2NyaXB0aW9uID0gZ2V0RWxlbVRleHQobWV0YWRhdGFFbGVtLCBcImRlc2NyaXB0aW9uXCIpO1xuICAgIG1ldGFkYXRhLmVwdWJfdmVyc2lvbiA9XG4gICAgICBwYWNrYWdlRWxlbS5nZXRBdHRyaWJ1dGUoXCJ2ZXJzaW9uXCIpID8gcGFja2FnZUVsZW0uZ2V0QXR0cmlidXRlKFwidmVyc2lvblwiKSA6IFwiXCI7XG4gICAgbWV0YWRhdGEuaWQgPSBnZXRFbGVtVGV4dChtZXRhZGF0YUVsZW0sIFwiaWRlbnRpZmllclwiKTtcbiAgICBtZXRhZGF0YS5sYW5ndWFnZSA9IGdldEVsZW1UZXh0KG1ldGFkYXRhRWxlbSwgXCJsYW5ndWFnZVwiKTtcbiAgICBtZXRhZGF0YS5tb2RpZmllZF9kYXRlID0gZ2V0TWV0YUVsZW1Qcm9wZXJ0eVRleHQobWV0YWRhdGFFbGVtLCBcImRjdGVybXM6bW9kaWZpZWRcIik7XG4gICAgbWV0YWRhdGEubmN4ID0gc3BpbmVFbGVtLmdldEF0dHJpYnV0ZShcInRvY1wiKSA/IHNwaW5lRWxlbS5nZXRBdHRyaWJ1dGUoXCJ0b2NcIikgOiBcIlwiO1xuICAgIG1ldGFkYXRhLnB1YmRhdGUgPSBnZXRFbGVtVGV4dChtZXRhZGF0YUVsZW0sIFwiZGF0ZVwiKTtcbiAgICBtZXRhZGF0YS5wdWJsaXNoZXIgPSBnZXRFbGVtVGV4dChtZXRhZGF0YUVsZW0sIFwicHVibGlzaGVyXCIpO1xuICAgIG1ldGFkYXRhLnJpZ2h0cyA9IGdldEVsZW1UZXh0KG1ldGFkYXRhRWxlbSwgXCJyaWdodHNcIik7XG4gICAgbWV0YWRhdGEudGl0bGUgPSBnZXRFbGVtVGV4dChtZXRhZGF0YUVsZW0sIFwidGl0bGVcIik7XG5cbiAgICBtZXRhZGF0YS5yZW5kaXRpb25fb3JpZW50YXRpb24gPSBnZXRNZXRhRWxlbVByb3BlcnR5VGV4dChtZXRhZGF0YUVsZW0sIFwicmVuZGl0aW9uOm9yaWVudGF0aW9uXCIpO1xuICAgIG1ldGFkYXRhLnJlbmRpdGlvbl9sYXlvdXQgPSBnZXRNZXRhRWxlbVByb3BlcnR5VGV4dChtZXRhZGF0YUVsZW0sIFwicmVuZGl0aW9uOmxheW91dFwiKTtcbiAgICBtZXRhZGF0YS5yZW5kaXRpb25fc3ByZWFkID0gZ2V0TWV0YUVsZW1Qcm9wZXJ0eVRleHQobWV0YWRhdGFFbGVtLCBcInJlbmRpdGlvbjpzcHJlYWRcIik7XG4gICAgbWV0YWRhdGEucmVuZGl0aW9uX2Zsb3cgPSBnZXRNZXRhRWxlbVByb3BlcnR5VGV4dChtZXRhZGF0YUVsZW0sIFwicmVuZGl0aW9uOmZsb3dcIik7XG5cblxuXG5cblxuXG4gICAgLy9odHRwOi8vd3d3LmlkcGYub3JnL2VwdWIvMzAxL3NwZWMvZXB1Yi1wdWJsaWNhdGlvbnMuaHRtbCNmeGwtcHJvcGVydHktdmlld3BvcnRcblxuICAgIC8vbWV0YWRhdGEucmVuZGl0aW9uX3ZpZXdwb3J0ID0gZ2V0TWV0YUVsZW1Qcm9wZXJ0eVRleHQobWV0YWRhdGFFbGVtLCBcInJlbmRpdGlvbjp2aWV3cG9ydFwiKTtcbiAgICBtZXRhZGF0YS5yZW5kaXRpb25fdmlld3BvcnQgPSBnZXRFbGVtVGV4dChtZXRhZGF0YUVsZW0sIFwibWV0YVwiLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJwcm9wZXJ0eVwiKSA9PT0gXCJyZW5kaXRpb246dmlld3BvcnRcIiAmJiAhZWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJyZWZpbmVzXCIpXG4gICAgfSk7XG5cbiAgICB2YXIgdmlld3BvcnRzID0gW107XG4gICAgdmFyIHZpZXdwb3J0TWV0YUVsZW1zID0gZmlsdGVyWG1sRWxlbXNCeUxvY2FsTmFtZUFueU5TKG1ldGFkYXRhRWxlbSwgXCJtZXRhXCIsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInByb3BlcnR5XCIpID09PSBcInJlbmRpdGlvbjp2aWV3cG9ydFwiICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKFwicmVmaW5lc1wiKTtcbiAgICB9KTtcbiAgICBfLmVhY2godmlld3BvcnRNZXRhRWxlbXMsIGZ1bmN0aW9uKGN1cnJJdGVtKSB7XG4gICAgICB2YXIgaWQgPSBjdXJySXRlbS5nZXRBdHRyaWJ1dGUoXCJyZWZpbmVzXCIpO1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIHZhciBoYXNoID0gaWQuaW5kZXhPZignIycpO1xuICAgICAgICBpZiAoaGFzaCA+PSAwKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0ID0gaGFzaCArIDE7XG4gICAgICAgICAgdmFyIGVuZCA9IGlkLmxlbmd0aCAtIDE7XG4gICAgICAgICAgaWQgPSBpZC5zdWJzdHIoc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWQgPSBpZC50cmltKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2cCA9IHtcbiAgICAgICAgcmVmaW5lczogaWQsXG4gICAgICAgIHZpZXdwb3J0OiBjdXJySXRlbS50ZXh0Q29udGVudFxuICAgICAgfTtcbiAgICAgIHZpZXdwb3J0cy5wdXNoKHZwKTtcbiAgICB9KTtcblxuICAgIG1ldGFkYXRhLnJlbmRpdGlvbl92aWV3cG9ydHMgPSB2aWV3cG9ydHM7XG5cblxuXG5cblxuXG4gICAgLy8gTWVkaWEgcGFydFxuICAgIG1ldGFkYXRhLm1lZGlhSXRlbXMgPSBbXTtcblxuICAgIHZhciBvdmVybGF5RWxlbXMgPSBmaWx0ZXJYbWxFbGVtc0J5TG9jYWxOYW1lQW55TlMobWV0YWRhdGFFbGVtLCBcIm1ldGFcIiwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgPT09IFwibWVkaWE6ZHVyYXRpb25cIiAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShcInJlZmluZXNcIik7XG4gICAgfSk7XG5cbiAgICBfLmVhY2gob3ZlcmxheUVsZW1zLCBmdW5jdGlvbihjdXJySXRlbSkge1xuICAgICAgbWV0YWRhdGEubWVkaWFJdGVtcy5wdXNoKHtcbiAgICAgICAgcmVmaW5lczogY3Vyckl0ZW0uZ2V0QXR0cmlidXRlKFwicmVmaW5lc1wiKSxcbiAgICAgICAgZHVyYXRpb246IFNtaWxEb2N1bWVudFBhcnNlci5yZXNvbHZlQ2xvY2tWYWx1ZShjdXJySXRlbS50ZXh0Q29udGVudClcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgbWV0YWRhdGEubWVkaWFfb3ZlcmxheSA9IHtcbiAgICAgIGR1cmF0aW9uOiBTbWlsRG9jdW1lbnRQYXJzZXIucmVzb2x2ZUNsb2NrVmFsdWUoXG4gICAgICAgIGdldEVsZW1UZXh0KG1ldGFkYXRhRWxlbSwgXCJtZXRhXCIsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJwcm9wZXJ0eVwiKSA9PT0gXCJtZWRpYTpkdXJhdGlvblwiICYmICFlbGVtZW50Lmhhc0F0dHJpYnV0ZShcInJlZmluZXNcIilcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICBuYXJyYXRvcjogZ2V0TWV0YUVsZW1Qcm9wZXJ0eVRleHQobWV0YWRhdGFFbGVtLCBcIm1lZGlhOm5hcnJhdG9yXCIpLFxuICAgICAgYWN0aXZlQ2xhc3M6IGdldE1ldGFFbGVtUHJvcGVydHlUZXh0KG1ldGFkYXRhRWxlbSwgXCJtZWRpYTphY3RpdmUtY2xhc3NcIiksXG4gICAgICBwbGF5YmFja0FjdGl2ZUNsYXNzOiBnZXRNZXRhRWxlbVByb3BlcnR5VGV4dChtZXRhZGF0YUVsZW0sIFwibWVkaWE6cGxheWJhY2stYWN0aXZlLWNsYXNzXCIpLFxuICAgICAgc21pbF9tb2RlbHM6IFtdLFxuICAgICAgc2tpcHBhYmxlczogW1wic2lkZWJhclwiLCBcInByYWN0aWNlXCIsIFwibWFyZ2luYWxpYVwiLCBcImFubm90YXRpb25cIiwgXCJoZWxwXCIsIFwibm90ZVwiLCBcImZvb3Rub3RlXCIsIFwicmVhcm5vdGVcIixcbiAgICAgICAgXCJ0YWJsZVwiLCBcInRhYmxlLXJvd1wiLCBcInRhYmxlLWNlbGxcIiwgXCJsaXN0XCIsIFwibGlzdC1pdGVtXCIsIFwicGFnZWJyZWFrXCJcbiAgICAgIF0sXG4gICAgICBlc2NhcGFibGVzOiBbXCJzaWRlYmFyXCIsIFwiYmlibGlvZ3JhcGh5XCIsIFwidG9jXCIsIFwibG9pXCIsIFwiYXBwZW5kaXhcIiwgXCJsYW5kbWFya3NcIiwgXCJsb3RcIiwgXCJpbmRleFwiLFxuICAgICAgICBcImNvbG9waG9uXCIsIFwiZXBpZ3JhcGhcIiwgXCJjb25jbHVzaW9uXCIsIFwiYWZ0ZXJ3b3JkXCIsIFwid2FybmluZ1wiLCBcImVwaWxvZ3VlXCIsIFwiZm9yZXdvcmRcIixcbiAgICAgICAgXCJpbnRyb2R1Y3Rpb25cIiwgXCJwcm9sb2d1ZVwiLCBcInByZWZhY2VcIiwgXCJwcmVhbWJsZVwiLCBcIm5vdGljZVwiLCBcImVycmF0YVwiLCBcImNvcHlyaWdodC1wYWdlXCIsXG4gICAgICAgIFwiYWNrbm93bGVkZ21lbnRzXCIsIFwib3RoZXItY3JlZGl0c1wiLCBcInRpdGxlcGFnZVwiLCBcImltcHJpbWF0dXJcIiwgXCJjb250cmlidXRvcnNcIiwgXCJoYWxmdGl0bGVwYWdlXCIsXG4gICAgICAgIFwiZGVkaWNhdGlvblwiLCBcImhlbHBcIiwgXCJhbm5vdGF0aW9uXCIsIFwibWFyZ2luYWxpYVwiLCBcInByYWN0aWNlXCIsIFwibm90ZVwiLCBcImZvb3Rub3RlXCIsIFwicmVhcm5vdGVcIixcbiAgICAgICAgXCJmb290bm90ZXNcIiwgXCJyZWFybm90ZXNcIiwgXCJicmlkZ2VoZWFkXCIsIFwicGFnZS1saXN0XCIsIFwidGFibGVcIiwgXCJ0YWJsZS1yb3dcIiwgXCJ0YWJsZS1jZWxsXCIsIFwibGlzdFwiLFxuICAgICAgICBcImxpc3QtaXRlbVwiLCBcImdsb3NzYXJ5XCJcbiAgICAgIF1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SnNvbk1hbmlmZXN0KHhtbERvbSkge1xuXG4gICAgdmFyICRtYW5pZmVzdEl0ZW1zID0gJChmaW5kWG1sRWxlbUJ5TG9jYWxOYW1lQW55TlMoeG1sRG9tLCBcIm1hbmlmZXN0XCIpKS5jaGlsZHJlbigpO1xuICAgIHZhciBqc29uTWFuaWZlc3QgPSBbXTtcblxuICAgICQuZWFjaCgkbWFuaWZlc3RJdGVtcywgZnVuY3Rpb24obWFuaWZlc3RFbGVtZW50SW5kZXgsIGN1cnJNYW5pZmVzdEVsZW1lbnQpIHtcblxuICAgICAgdmFyICRjdXJyTWFuaWZlc3RFbGVtZW50ID0gJChjdXJyTWFuaWZlc3RFbGVtZW50KTtcbiAgICAgIHZhciBjdXJyTWFuaWZlc3RFbGVtZW50SHJlZiA9ICRjdXJyTWFuaWZlc3RFbGVtZW50LmF0dHIoXCJocmVmXCIpID8gJGN1cnJNYW5pZmVzdEVsZW1lbnQuYXR0cihcImhyZWZcIikgOlxuICAgICAgICBcIlwiO1xuICAgICAgdmFyIG1hbmlmZXN0SXRlbSA9IHtcblxuICAgICAgICBocmVmOiBjdXJyTWFuaWZlc3RFbGVtZW50SHJlZixcbiAgICAgICAgaWQ6ICRjdXJyTWFuaWZlc3RFbGVtZW50LmF0dHIoXCJpZFwiKSA/ICRjdXJyTWFuaWZlc3RFbGVtZW50LmF0dHIoXCJpZFwiKSA6IFwiXCIsXG4gICAgICAgIG1lZGlhX292ZXJsYXlfaWQ6ICRjdXJyTWFuaWZlc3RFbGVtZW50LmF0dHIoXCJtZWRpYS1vdmVybGF5XCIpID9cbiAgICAgICAgICAkY3Vyck1hbmlmZXN0RWxlbWVudC5hdHRyKFwibWVkaWEtb3ZlcmxheVwiKSA6IFwiXCIsXG4gICAgICAgIG1lZGlhX3R5cGU6ICRjdXJyTWFuaWZlc3RFbGVtZW50LmF0dHIoXCJtZWRpYS10eXBlXCIpID8gJGN1cnJNYW5pZmVzdEVsZW1lbnQuYXR0cihcIm1lZGlhLXR5cGVcIikgOiBcIlwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiAkY3Vyck1hbmlmZXN0RWxlbWVudC5hdHRyKFwicHJvcGVydGllc1wiKSA/ICRjdXJyTWFuaWZlc3RFbGVtZW50LmF0dHIoXCJwcm9wZXJ0aWVzXCIpIDogXCJcIlxuICAgICAgfTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdwdXNoaW5nIG1hbmlmZXN0IGl0ZW0gdG8gSlNPTiBtYW5pZmVzdC4gY3Vyck1hbmlmZXN0RWxlbWVudEhyZWY6IFsnICsgY3Vyck1hbmlmZXN0RWxlbWVudEhyZWYgKyBcbiAgICAgIC8vICAgICAnXSwgbWFuaWZlc3RJdGVtLmhyZWY6IFsnICsgbWFuaWZlc3RJdGVtLmhyZWYgK1xuICAgICAgLy8gICAgICddLCBtYW5pZmVzdEl0ZW06Jyk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhtYW5pZmVzdEl0ZW0pO1xuICAgICAganNvbk1hbmlmZXN0LnB1c2gobWFuaWZlc3RJdGVtKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBqc29uTWFuaWZlc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRKc29uQmluZGluZ3MoeG1sRG9tKSB7XG5cbiAgICB2YXIgJGJpbmRpbmdzID0gJChmaW5kWG1sRWxlbUJ5TG9jYWxOYW1lQW55TlMoeG1sRG9tLCBcImJpbmRpbmdzXCIpKS5jaGlsZHJlbigpO1xuICAgIHZhciBqc29uQmluZGluZ3MgPSBbXTtcblxuICAgICQuZWFjaCgkYmluZGluZ3MsIGZ1bmN0aW9uKGJpbmRpbmdFbGVtZW50SW5kZXgsIGN1cnJCaW5kaW5nRWxlbWVudCkge1xuXG4gICAgICB2YXIgJGN1cnJCaW5kaW5nRWxlbWVudCA9ICQoY3VyckJpbmRpbmdFbGVtZW50KTtcbiAgICAgIHZhciBiaW5kaW5nID0ge1xuXG4gICAgICAgIGhhbmRsZXI6ICRjdXJyQmluZGluZ0VsZW1lbnQuYXR0cihcImhhbmRsZXJcIikgPyAkY3VyckJpbmRpbmdFbGVtZW50LmF0dHIoXCJoYW5kbGVyXCIpIDogXCJcIixcbiAgICAgICAgbWVkaWFfdHlwZTogJGN1cnJCaW5kaW5nRWxlbWVudC5hdHRyKFwibWVkaWEtdHlwZVwiKSA/ICRjdXJyQmluZGluZ0VsZW1lbnQuYXR0cihcIm1lZGlhLXR5cGVcIikgOiBcIlwiXG4gICAgICB9O1xuXG4gICAgICBqc29uQmluZGluZ3MucHVzaChiaW5kaW5nKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBqc29uQmluZGluZ3M7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDb3ZlckhyZWYoeG1sRG9tKSB7XG5cbiAgICB2YXIgbWFuaWZlc3Q7XG4gICAgdmFyICRpbWFnZU5vZGU7XG4gICAgbWFuaWZlc3QgPSBmaW5kWG1sRWxlbUJ5TG9jYWxOYW1lQW55TlMoeG1sRG9tLCBcIm1hbmlmZXN0XCIpO1xuXG4gICAgLy8gZXB1YjMgc3BlYyBmb3IgYSBjb3ZlciBpbWFnZSBpcyBsaWtlIHRoaXM6XG4gICAgLyo8aXRlbSBwcm9wZXJ0aWVzPVwiY292ZXItaW1hZ2VcIiBpZD1cImNpXCIgaHJlZj1cImNvdmVyLnN2Z1wiIG1lZGlhLXR5cGU9XCJpbWFnZS9zdmcreG1sXCIgLz4qL1xuICAgICRpbWFnZU5vZGUgPSAkKGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyhtYW5pZmVzdCwgXCJpdGVtXCIsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHZhciBhdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJwcm9wZXJ0aWVzXCIpO1xuICAgICAgcmV0dXJuIGF0dHIgJiYgXy5jb250YWlucyhhdHRyLnNwbGl0KFwiIFwiKSwgXCJjb3Zlci1pbWFnZVwiKTtcbiAgICB9KSk7XG4gICAgaWYgKCRpbWFnZU5vZGUubGVuZ3RoID09PSAxICYmICRpbWFnZU5vZGUuYXR0cihcImhyZWZcIikpIHtcbiAgICAgIHJldHVybiAkaW1hZ2VOb2RlLmF0dHIoXCJocmVmXCIpO1xuICAgIH1cblxuICAgIC8vIHNvbWUgZXB1YjIncyBjb3ZlciBpbWFnZSBpcyBsaWtlIHRoaXM6XG4gICAgLyo8bWV0YSBuYW1lPVwiY292ZXJcIiBjb250ZW50PVwiY292ZXItaW1hZ2UtaXRlbS1pZFwiIC8+Ki9cbiAgICB2YXIgbWV0YU5vZGUgPSAkKGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyh4bWxEb20sIFwibWV0YVwiLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID09PSBcImNvdmVyXCI7XG4gICAgfSkpO1xuICAgIHZhciBjb250ZW50QXR0ciA9IG1ldGFOb2RlLmF0dHIoXCJjb250ZW50XCIpO1xuICAgIGlmIChtZXRhTm9kZS5sZW5ndGggPT09IDEgJiYgY29udGVudEF0dHIpIHtcbiAgICAgICRpbWFnZU5vZGUgPSAkKGZpbmRYbWxFbGVtQnlMb2NhbE5hbWVBbnlOUyhtYW5pZmVzdCwgXCJpdGVtXCIsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGNvbnRlbnRBdHRyO1xuICAgICAgfSkpO1xuICAgICAgaWYgKCRpbWFnZU5vZGUubGVuZ3RoID09PSAxICYmICRpbWFnZU5vZGUuYXR0cihcImhyZWZcIikpIHtcbiAgICAgICAgcmV0dXJuICRpbWFnZU5vZGUuYXR0cihcImhyZWZcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdGhhdCBkaWRuJ3Qgc2VlbSB0byB3b3JrIHNvLCBpdCB0aGluayBlcHViMiBqdXN0IHVzZXMgaXRlbSB3aXRoIGlkPWNvdmVyXG4gICAgJGltYWdlTm9kZSA9ICQoZmluZFhtbEVsZW1CeUxvY2FsTmFtZUFueU5TKG1hbmlmZXN0LCBcIml0ZW1cIiwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IFwiY292ZXJcIjtcbiAgICB9KSk7XG4gICAgaWYgKCRpbWFnZU5vZGUubGVuZ3RoID09PSAxICYmICRpbWFnZU5vZGUuYXR0cihcImhyZWZcIikpIHtcbiAgICAgIHJldHVybiAkaW1hZ2VOb2RlLmF0dHIoXCJocmVmXCIpO1xuICAgIH1cblxuICAgIC8vIHNlZW1zIGxpa2UgdGhlcmUgaXNuJ3Qgb25lLCB0aGF0cyBvay4uLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQcm9wZXJ0aWVzU3RyaW5nKHN0cikge1xuICAgIHZhciBwcm9wZXJ0aWVzID0ge307XG4gICAgdmFyIGFsbFByb3BTdHJzID0gc3RyLnNwbGl0KFwiIFwiKTsgLy8gc3BsaXQgaXQgb24gd2hpdGUgc3BhY2VcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFByb3BTdHJzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlJFTkRJVElPTl9PUklFTlRBVElPTl9MQU5EU0NBUEVcbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJyZW5kaXRpb246b3JpZW50YXRpb24tbGFuZHNjYXBlXCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX29yaWVudGF0aW9uID0gXCJsYW5kc2NhcGVcIjtcblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX09SSUVOVEFUSU9OX1BPUlRSQUlUXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOm9yaWVudGF0aW9uLXBvcnRyYWl0XCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX29yaWVudGF0aW9uID0gXCJwb3J0cmFpdFwiO1xuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5SRU5ESVRJT05fT1JJRU5UQVRJT05fQVVUT1xuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInJlbmRpdGlvbjpvcmllbnRhdGlvbi1hdXRvXCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX29yaWVudGF0aW9uID0gXCJhdXRvXCI7XG5cblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX1NQUkVBRF9OT05FXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOnNwcmVhZC1ub25lXCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX3NwcmVhZCA9IFwibm9uZVwiO1xuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5SRU5ESVRJT05fU1BSRUFEX0xBTkRTQ0FQRVxuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInJlbmRpdGlvbjpzcHJlYWQtbGFuZHNjYXBlXCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX3NwcmVhZCA9IFwibGFuZHNjYXBlXCI7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlJFTkRJVElPTl9TUFJFQURfUE9SVFJBSVRcbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJyZW5kaXRpb246c3ByZWFkLXBvcnRyYWl0XCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX3NwcmVhZCA9IFwicG9ydHJhaXRcIjtcblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX1NQUkVBRF9CT1RIXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOnNwcmVhZC1ib3RoXCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX3NwcmVhZCA9IFwiYm90aFwiO1xuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5SRU5ESVRJT05fU1BSRUFEX0FVVE9cbiAgICAgIGlmIChhbGxQcm9wU3Ryc1tpXSA9PT0gXCJyZW5kaXRpb246c3ByZWFkLWF1dG9cIikgcHJvcGVydGllcy5yZW5kaXRpb25fc3ByZWFkID0gXCJhdXRvXCI7XG5cblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX0ZMT1dfUEFHSU5BVEVEXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOmZsb3ctcGFnaW5hdGVkXCIpIHByb3BlcnRpZXMucmVuZGl0aW9uX2Zsb3cgPSBcInBhZ2luYXRlZFwiO1xuXG4gICAgICAvL1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lSXRlbS5SRU5ESVRJT05fRkxPV19TQ1JPTExFRF9DT05USU5VT1VTXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOmZsb3ctc2Nyb2xsZWQtY29udGludW91c1wiKSBwcm9wZXJ0aWVzLnJlbmRpdGlvbl9mbG93ID0gXCJzY3JvbGxlZC1jb250aW51b3VzXCI7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlJFTkRJVElPTl9GTE9XX1NDUk9MTEVEX0RPQ1xuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInJlbmRpdGlvbjpmbG93LXNjcm9sbGVkLWRvY1wiKSBwcm9wZXJ0aWVzLnJlbmRpdGlvbl9mbG93ID0gXCJzY3JvbGxlZC1kb2NcIjtcblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uUkVORElUSU9OX0ZMT1dfQVVUT1xuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInJlbmRpdGlvbjpmbG93LWF1dG9cIikgcHJvcGVydGllcy5yZW5kaXRpb25fZmxvdyA9IFwiYXV0b1wiO1xuXG5cblxuICAgICAgLy9SZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW0uU1BSRUFEX0NFTlRFUlxuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInJlbmRpdGlvbjpwYWdlLXNwcmVhZC1jZW50ZXJcIikgcHJvcGVydGllcy5wYWdlX3NwcmVhZCA9IFwicGFnZS1zcHJlYWQtY2VudGVyXCI7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlNQUkVBRF9MRUZUXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicGFnZS1zcHJlYWQtbGVmdFwiKSBwcm9wZXJ0aWVzLnBhZ2Vfc3ByZWFkID0gXCJwYWdlLXNwcmVhZC1sZWZ0XCI7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlNQUkVBRF9SSUdIVFxuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInBhZ2Utc3ByZWFkLXJpZ2h0XCIpIHByb3BlcnRpZXMucGFnZV9zcHJlYWQgPSBcInBhZ2Utc3ByZWFkLXJpZ2h0XCI7XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlJFTkRJVElPTl9MQVlPVVRfUkVGTE9XQUJMRVxuICAgICAgaWYgKGFsbFByb3BTdHJzW2ldID09PSBcInJlbmRpdGlvbjpsYXlvdXQtcmVmbG93YWJsZVwiKSB7XG4gICAgICAgIHByb3BlcnRpZXMuZml4ZWRfZmxvdyA9IGZhbHNlOyAvLyBUT0RPOiBvbmx5IHVzZWQgaW4gc3BlYyB0ZXN0cyFcbiAgICAgICAgcHJvcGVydGllcy5yZW5kaXRpb25fbGF5b3V0ID0gXCJyZWZsb3dhYmxlXCI7XG4gICAgICB9XG5cbiAgICAgIC8vUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVJdGVtLlJFTkRJVElPTl9MQVlPVVRfUFJFUEFHSU5BVEVEXG4gICAgICBpZiAoYWxsUHJvcFN0cnNbaV0gPT09IFwicmVuZGl0aW9uOmxheW91dC1wcmUtcGFnaW5hdGVkXCIpIHtcbiAgICAgICAgcHJvcGVydGllcy5maXhlZF9mbG93ID0gdHJ1ZTsgLy8gVE9ETzogb25seSB1c2VkIGluIHNwZWMgdGVzdHMhXG4gICAgICAgIHByb3BlcnRpZXMucmVuZGl0aW9uX2xheW91dCA9IFwicHJlLXBhZ2luYXRlZFwiO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcGVydGllcztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhY2thZ2VEb2N1bWVudFBhcnNlcjsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxudmFyIFVSSSA9IHJlcXVpcmUoJ1VSSWpzJylcblxuLy8gRGVzY3JpcHRpb246IFRoaXMgbW9kZWwgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBuYXZpZ2F0aW5nIGFuIEVQVUIncyBwYWNrYWdlIGRvY3VtZW50XG5mdW5jdGlvbiBQYWNrYWdlRG9jdW1lbnQocGFja2FnZURvY3VtZW50VVJMLCByZXNvdXJjZUZldGNoZXIsIG1ldGFkYXRhLCBzcGluZSwgbWFuaWZlc3QpIHtcblxuICB2YXIgX3BhZ2VfcHJvZ19kaXI7XG5cbiAgdGhpcy5tYW5pZmVzdCA9IG1hbmlmZXN0O1xuXG4gIHRoaXMuZ2V0U2hhcmVkSnNQYWNrYWdlRGF0YSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHBhY2thZ2VEb2NSb290ID0gcGFja2FnZURvY3VtZW50VVJMLnN1YnN0cigwLCBwYWNrYWdlRG9jdW1lbnRVUkwubGFzdEluZGV4T2YoXCIvXCIpKTtcbiAgICByZXR1cm4ge1xuICAgICAgcm9vdFVybDogcGFja2FnZURvY1Jvb3QsXG4gICAgICByZW5kaXRpb25fdmlld3BvcnQ6IG1ldGFkYXRhLnJlbmRpdGlvbl92aWV3cG9ydCxcbiAgICAgIHJlbmRpdGlvbl9sYXlvdXQ6IG1ldGFkYXRhLnJlbmRpdGlvbl9sYXlvdXQsXG4gICAgICByZW5kaXRpb25fb3JpZW50YXRpb246IG1ldGFkYXRhLnJlbmRpdGlvbl9vcmllbnRhdGlvbixcbiAgICAgIHJlbmRpdGlvbl9mbG93OiBtZXRhZGF0YS5yZW5kaXRpb25fZmxvdyxcbiAgICAgIHJlbmRpdGlvbl9zcHJlYWQ6IG1ldGFkYXRhLnJlbmRpdGlvbl9zcHJlYWQsXG4gICAgICBtZWRpYV9vdmVybGF5OiBtZXRhZGF0YS5tZWRpYV9vdmVybGF5LFxuICAgICAgc3BpbmU6IHtcbiAgICAgICAgZGlyZWN0aW9uOiB0aGlzLmdldFBhZ2VQcm9ncmVzc2lvbkRpcmVjdGlvbigpLFxuICAgICAgICBpdGVtczogc3BpbmVcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgc3BpbmUgaXRlbSBkYXRhIGluIHJlYWRpdW0tc2hhcmVkLWpzIGFjY2VwdGVkIGZvcm1hdC5cbiAgICogQHBhcmFtIHNwaW5lSW5kZXggdGhlIGluZGV4IG9mIHRoZSBpdGVtIHdpdGhpbiB0aGUgc3BpbmVcbiAgICogQHJldHVybnMgU3BpbmUgaXRlbSBkYXRhIGluIHJlYWRpdW0tc2hhcmVkLWpzIGFjY2VwdGVkIGZvcm1hdC5cbiAgICovXG4gIHRoaXMuZ2V0U3BpbmVJdGVtID0gZnVuY3Rpb24oc3BpbmVJbmRleCkge1xuICAgIHZhciBzcGluZUl0ZW0gPSBzcGluZVtzcGluZUluZGV4XTtcbiAgICByZXR1cm4gc3BpbmVJdGVtO1xuICB9O1xuXG4gIHRoaXMuc2V0UGFnZVByb2dyZXNzaW9uRGlyZWN0aW9uID0gZnVuY3Rpb24ocGFnZV9wcm9nX2Rpcikge1xuICAgIF9wYWdlX3Byb2dfZGlyID0gcGFnZV9wcm9nX2RpcjtcbiAgfTtcblxuXG4gIHRoaXMuZ2V0UGFnZVByb2dyZXNzaW9uRGlyZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKF9wYWdlX3Byb2dfZGlyID09PSBcInJ0bFwiKSB7XG4gICAgICByZXR1cm4gXCJydGxcIjtcbiAgICB9IGVsc2UgaWYgKF9wYWdlX3Byb2dfZGlyID09PSBcImRlZmF1bHRcIikge1xuICAgICAgcmV0dXJuIFwiZGVmYXVsdFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJsdHJcIjtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5zcGluZUxlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzcGluZS5sZW5ndGg7XG4gIH07XG5cbiAgdGhpcy5nZXRNZXRhZGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcblxuICB0aGlzLmdldFRvYyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtID0gZ2V0VG9jSXRlbSgpO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5ocmVmO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLmdldFRvY1RleHQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciB0b2MgPSB0aGlzLmdldFRvYygpO1xuXG4gICAgcmVzb3VyY2VGZXRjaGVyLnJlbGF0aXZlVG9QYWNrYWdlRmV0Y2hGaWxlQ29udGVudHModG9jLCAndGV4dCcsIGZ1bmN0aW9uKHRvY0RvY3VtZW50VGV4dCkge1xuICAgICAgY2FsbGJhY2sodG9jRG9jdW1lbnRUZXh0KVxuICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcignRVJST1IgZmV0Y2hpbmcgVE9DIGZyb20gWycgKyB0b2MgKyAnXTonKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5nZXRUb2NEb20gPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gICAgdGhpcy5nZXRUb2NUZXh0KGZ1bmN0aW9uKHRvY1RleHQpIHtcbiAgICAgIGlmICh0eXBlb2YgdG9jVGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHRvY0RvbSA9IChuZXcgRE9NUGFyc2VyKCkpLnBhcnNlRnJvbVN0cmluZyh0b2NUZXh0LCBcInRleHQveG1sXCIpO1xuICAgICAgICBjYWxsYmFjayh0b2NEb20pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvLyBVbnVzZWQ/XG4gIHRoaXMuZ2VuZXJhdGVUb2NMaXN0RE9NID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdGhpcy5nZXRUb2NEb20oZnVuY3Rpb24odG9jRG9tKSB7XG4gICAgICBpZiAodG9jRG9tKSB7XG4gICAgICAgIGlmICh0b2NJc05jeCgpKSB7XG4gICAgICAgICAgdmFyICRuY3hPcmRlcmVkTGlzdDtcbiAgICAgICAgICAkbmN4T3JkZXJlZExpc3QgPSBnZXROY3hPcmRlcmVkTGlzdCgkKFwibmF2TWFwXCIsIHRvY0RvbSkpO1xuICAgICAgICAgIGNhbGxiYWNrKCRuY3hPcmRlcmVkTGlzdFswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHBhY2thZ2VEb2N1bWVudEFic29sdXRlVVJMID0gbmV3IFVSSShwYWNrYWdlRG9jdW1lbnRVUkwpLmFic29sdXRlVG8oZG9jdW1lbnQuVVJMKTtcbiAgICAgICAgICB2YXIgdG9jRG9jdW1lbnRBYnNvbHV0ZVVSTCA9IG5ldyBVUkkodGhhdC5nZXRUb2MoKSkuYWJzb2x1dGVUbyhwYWNrYWdlRG9jdW1lbnRBYnNvbHV0ZVVSTCk7XG4gICAgICAgICAgLy8gYWRkIGEgQkFTRSB0YWcgdG8gY2hhbmdlIHRoZSBUT0MgZG9jdW1lbnQncyBiYXNlVVJJLlxuICAgICAgICAgIHZhciBvbGRCYXNlVGFnID0gJCh0b2NEb20pLnJlbW92ZSgnYmFzZScpO1xuICAgICAgICAgIHZhciBuZXdCYXNlVGFnID0gJCgnPGJhc2U+PC9iYXNlPicpO1xuICAgICAgICAgICQobmV3QmFzZVRhZykuYXR0cignaHJlZicsIHRvY0RvY3VtZW50QWJzb2x1dGVVUkwpO1xuICAgICAgICAgICQodG9jRG9tKS5maW5kKCdoZWFkJykuYXBwZW5kKG5ld0Jhc2VUYWcpO1xuICAgICAgICAgIC8vIFRPRE86IGZpeCBUT0MgaHJlZnMgYm90aCBmb3IgZXhwbG9kZWQgaW4gemlwcGVkIEVQVUJzXG4gICAgICAgICAgY2FsbGJhY2sodG9jRG9tKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiB0b2NJc05jeCgpIHtcblxuICAgIHZhciB0b2NJdGVtID0gZ2V0VG9jSXRlbSgpO1xuICAgIHZhciBjb250ZW50RG9jVVJJID0gdG9jSXRlbS5ocmVmO1xuICAgIHZhciBmaWxlRXh0ZW5zaW9uID0gY29udGVudERvY1VSSS5zdWJzdHIoY29udGVudERvY1VSSS5sYXN0SW5kZXhPZignLicpICsgMSk7XG5cbiAgICByZXR1cm4gZmlsZUV4dGVuc2lvbi50cmltKCkudG9Mb3dlckNhc2UoKSA9PT0gXCJuY3hcIjtcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBSSVZBVEUgSEVMUEVSUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIGZ1bmN0aW9uIGdldE5jeE9yZGVyZWRMaXN0KCRuYXZNYXBET00pIHtcblxuICAgIHZhciAkb2wgPSAkKFwiPG9sPjwvb2w+XCIpO1xuICAgICQuZWFjaCgkbmF2TWFwRE9NLmNoaWxkcmVuKFwibmF2UG9pbnRcIiksIGZ1bmN0aW9uKGluZGV4LCBuYXZQb2ludCkge1xuICAgICAgYWRkTmF2UG9pbnRFbGVtZW50cygkKG5hdlBvaW50KSwgJG9sKTtcbiAgICB9KTtcbiAgICByZXR1cm4gJG9sO1xuICB9XG5cbiAgLy8gRGVzY3JpcHRpb246IENvbnN0cnVjdHMgYW4gaHRtbCByZXByZXNlbnRhdGlvbiBvZiBOQ1ggbmF2UG9pbnRzLCBiYXNlZCBvbiBhbiBvYmplY3Qgb2YgbmF2UG9pbnQgaW5mb3JtYXRpb25cbiAgLy8gUmF0aW9uYWxlOiBUaGlzIGlzIGEgcmVjdXJzaXZlIG1ldGhvZCwgYXMgTkNYIG5hdlBvaW50IGVsZW1lbnRzIGNhbiBuZXN0IDAgb3IgbW9yZSBvZiB0aGVtc2VsdmVzIGFzIGNoaWxkcmVuXG4gIGZ1bmN0aW9uIGFkZE5hdlBvaW50RWxlbWVudHMoJG5hdlBvaW50RE9NLCAkb2wpIHtcblxuICAgIC8vIEFkZCB0aGUgY3VycmVudCBuYXZQb2ludCBlbGVtZW50IHRvIHRoZSBUT0MgaHRtbFxuICAgIHZhciBuYXZUZXh0ID0gJG5hdlBvaW50RE9NLmNoaWxkcmVuKFwibmF2TGFiZWxcIikudGV4dCgpLnRyaW0oKTtcbiAgICB2YXIgbmF2SHJlZiA9ICRuYXZQb2ludERPTS5jaGlsZHJlbihcImNvbnRlbnRcIikuYXR0cihcInNyY1wiKTtcbiAgICB2YXIgJG5hdlBvaW50TGkgPSAkKCc8bGkgY2xhc3M9XCJuYXYtZWxlbVwiPjwvbGk+JykuYXBwZW5kKFxuICAgICAgJCgnPGE+PC9hPicsIHtcbiAgICAgICAgaHJlZjogbmF2SHJlZixcbiAgICAgICAgdGV4dDogbmF2VGV4dFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgLy8gQXBwZW5kIG5hdiBwb2ludCBpbmZvXG4gICAgJG9sLmFwcGVuZCgkbmF2UG9pbnRMaSk7XG5cbiAgICAvLyBBcHBlbmQgb3JkZXJlZCBsaXN0IG9mIG5hdiBwb2ludHNcbiAgICBpZiAoJG5hdlBvaW50RE9NLmNoaWxkcmVuKFwibmF2UG9pbnRcIikubGVuZ3RoID4gMCkge1xuXG4gICAgICB2YXIgJG5ld0xpID0gJChcIjxsaT48L2xpPlwiKTtcbiAgICAgIHZhciAkbmV3T2wgPSAkKFwiPG9sPjwvb2w+XCIpO1xuICAgICAgJC5lYWNoKCRuYXZQb2ludERPTS5jaGlsZHJlbihcIm5hdlBvaW50XCIpLCBmdW5jdGlvbihuYXZJbmRleCwgbmF2UG9pbnQpIHtcbiAgICAgICAgJG5ld09sLmFwcGVuZChhZGROYXZQb2ludEVsZW1lbnRzKCQobmF2UG9pbnQpLCAkbmV3T2wpKTtcbiAgICAgIH0pO1xuXG4gICAgICAkbmV3TGkuYXBwZW5kKCRuZXdPbCk7XG4gICAgICAkb2wuYXBwZW5kKCRuZXdMaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VG9jSXRlbSgpIHtcblxuICAgIHZhciBpdGVtID0gbWFuaWZlc3QuZ2V0TmF2SXRlbSgpO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG5cbiAgICB2YXIgc3BpbmVfaWQgPSBtZXRhZGF0YS5uY3g7XG4gICAgaWYgKHNwaW5lX2lkICYmIHNwaW5lX2lkLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBtYW5pZmVzdC5nZXRNYW5pZmVzdEl0ZW1CeUlkcmVmKHNwaW5lX2lkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhY2thZ2VEb2N1bWVudDsiLCIvLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcblxuLy8gYFNtaWxEb2N1bWVudFBhcnNlcmAgaXMgdXNlZCB0byBwYXJzZSB0aGUgeG1sIG9mIGFuIGVwdWIgcGFja2FnZVxuLy8gZG9jdW1lbnQgYW5kIGJ1aWxkIGEgamF2YXNjcmlwdCBvYmplY3QuIFRoZSBjb25zdHJ1Y3RvciBhY2NlcHRzIGFuXG4vLyBpbnN0YW5jZSBvZiBgVVJJYCB0aGF0IGlzIHVzZWQgdG8gcmVzb2x2ZSBwYXRocyBkdXJpbmcgdGhlIHByb2Nlc3NcbmZ1bmN0aW9uIFNtaWxEb2N1bWVudFBhcnNlcihwYWNrYWdlRG9jdW1lbnQsIHB1YmxpY2F0aW9uRmV0Y2hlcikge1xuXG4gIC8vIFBhcnNlIGEgbWVkaWEgb3ZlcmxheSBtYW5pZmVzdCBpdGVtIFhNTFxuICB0aGlzLnBhcnNlID0gZnVuY3Rpb24oc3BpbmVJdGVtLCBtYW5pZmVzdEl0ZW1TTUlMLCBzbWlsSnNvbiwgZGVmZXJyZWQsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHB1YmxpY2F0aW9uRmV0Y2hlci5nZXRSZWxhdGl2ZVhtbEZpbGVEb20obWFuaWZlc3RJdGVtU01JTC5ocmVmLCBmdW5jdGlvbih4bWxEb20pIHtcblxuICAgICAgdmFyIHNtaWwgPSAkKFwic21pbFwiLCB4bWxEb20pWzBdO1xuICAgICAgc21pbEpzb24uc21pbFZlcnNpb24gPSBzbWlsLmdldEF0dHJpYnV0ZSgndmVyc2lvbicpO1xuXG4gICAgICAvL3ZhciBib2R5ID0gJChcImJvZHlcIiwgeG1sRG9tKVswXTtcbiAgICAgIHNtaWxKc29uLmNoaWxkcmVuID0gdGhhdC5nZXRDaGlsZHJlbihzbWlsKTtcbiAgICAgIHNtaWxKc29uLmhyZWYgPSBtYW5pZmVzdEl0ZW1TTUlMLmhyZWY7XG4gICAgICBzbWlsSnNvbi5pZCA9IG1hbmlmZXN0SXRlbVNNSUwuaWQ7XG4gICAgICBzbWlsSnNvbi5zcGluZUl0ZW1JZCA9IHNwaW5lSXRlbS5pZHJlZjtcblxuICAgICAgdmFyIG1lZGlhSXRlbSA9IHBhY2thZ2VEb2N1bWVudC5nZXRNZXRhZGF0YSgpLmdldE1lZGlhSXRlbUJ5UmVmaW5lc0lkKG1hbmlmZXN0SXRlbVNNSUwuaWQpO1xuICAgICAgaWYgKG1lZGlhSXRlbSkge1xuICAgICAgICBzbWlsSnNvbi5kdXJhdGlvbiA9IG1lZGlhSXRlbS5kdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2soZGVmZXJyZWQsIHNtaWxKc29uKTtcbiAgICB9LCBmdW5jdGlvbihmZXRjaEVycm9yKSB7XG4gICAgICBlcnJvckNhbGxiYWNrKGRlZmVycmVkLCBmZXRjaEVycm9yKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgc2FmZUNvcHlQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByb3BlcnR5LCBmcm9tTm9kZSwgdG9JdGVtLCBpc1JlcXVpcmVkLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgcHJvcFBhcnNlID0gcHJvcGVydHkuc3BsaXQoJzonKTtcbiAgICB2YXIgZGVzdFByb3BlcnR5ID0gcHJvcFBhcnNlW3Byb3BQYXJzZS5sZW5ndGggLSAxXTtcblxuICAgIGlmIChkZXN0UHJvcGVydHkgPT09IFwidHlwZVwiKSB7XG4gICAgICBkZXN0UHJvcGVydHkgPSBcImVwdWJ0eXBlXCI7XG4gICAgfVxuXG4gICAgaWYgKGZyb21Ob2RlLmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgIT0gdW5kZWZpbmVkKSB7XG4gICAgICB0b0l0ZW1bZGVzdFByb3BlcnR5XSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgfSBlbHNlIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdG9JdGVtW2Rlc3RQcm9wZXJ0eV0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJlcXVpcmVkIHByb3BlcnR5IFwiICsgcHJvcGVydHkgKyBcIiBub3QgZm91bmQgaW4gc21pbCBub2RlIFwiICsgZnJvbU5vZGUubm9kZU5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldENoaWxkcmVuID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcblxuICAgICQuZWFjaChlbGVtZW50LmNoaWxkTm9kZXMsIGZ1bmN0aW9uKGVsZW1lbnRJbmRleCwgY3VyckVsZW1lbnQpIHtcblxuICAgICAgaWYgKGN1cnJFbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7IC8vIEVMRU1FTlRcbiAgICAgICAgdmFyIGl0ZW0gPSB0aGF0LmNyZWF0ZUl0ZW1Gcm9tRWxlbWVudChjdXJyRWxlbWVudCk7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgdGhpcy5jcmVhdGVJdGVtRnJvbUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgdmFyIGl0ZW0gPSB7fTtcbiAgICBpdGVtLm5vZGVUeXBlID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICAgIHZhciBpc0JvZHkgPSBmYWxzZTtcbiAgICBpZiAoaXRlbS5ub2RlVHlwZSA9PT0gXCJib2R5XCIpIHtcbiAgICAgIGlzQm9keSA9IHRydWU7XG4gICAgICBpdGVtLm5vZGVUeXBlID0gXCJzZXFcIjtcbiAgICB9XG5cbiAgICBpZiAoaXRlbS5ub2RlVHlwZSA9PT0gXCJzZXFcIikge1xuXG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwiZXB1Yjp0ZXh0cmVmXCIsIGVsZW1lbnQsIGl0ZW0sICFpc0JvZHkpO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImlkXCIsIGVsZW1lbnQsIGl0ZW0pO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImVwdWI6dHlwZVwiLCBlbGVtZW50LCBpdGVtKTtcblxuICAgICAgaXRlbS5jaGlsZHJlbiA9IHRoYXQuZ2V0Q2hpbGRyZW4oZWxlbWVudCk7XG5cbiAgICB9IGVsc2UgaWYgKGl0ZW0ubm9kZVR5cGUgPT09IFwicGFyXCIpIHtcblxuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImlkXCIsIGVsZW1lbnQsIGl0ZW0pO1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImVwdWI6dHlwZVwiLCBlbGVtZW50LCBpdGVtKTtcblxuICAgICAgaXRlbS5jaGlsZHJlbiA9IHRoYXQuZ2V0Q2hpbGRyZW4oZWxlbWVudCk7XG5cbiAgICB9IGVsc2UgaWYgKGl0ZW0ubm9kZVR5cGUgPT09IFwidGV4dFwiKSB7XG5cbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJzcmNcIiwgZWxlbWVudCwgaXRlbSwgdHJ1ZSk7XG4gICAgICB2YXIgc3JjUGFydHMgPSBpdGVtLnNyYy5zcGxpdCgnIycpO1xuICAgICAgaXRlbS5zcmNGaWxlID0gc3JjUGFydHNbMF07XG4gICAgICBpdGVtLnNyY0ZyYWdtZW50SWQgPSAoc3JjUGFydHMubGVuZ3RoID09PSAyKSA/IHNyY1BhcnRzWzFdIDogXCJcIjtcbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJpZFwiLCBlbGVtZW50LCBpdGVtKTtcbiAgICAgIC8vIHNhZmVDb3B5UHJvcGVydHkoXCJlcHViOnRleHRyZWZcIiwgZWxlbWVudCwgaXRlbSk7XG5cbiAgICB9IGVsc2UgaWYgKGl0ZW0ubm9kZVR5cGUgPT09IFwiYXVkaW9cIikge1xuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcInNyY1wiLCBlbGVtZW50LCBpdGVtLCB0cnVlKTtcbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJpZFwiLCBlbGVtZW50LCBpdGVtKTtcbiAgICAgIGl0ZW0uY2xpcEJlZ2luID0gU21pbERvY3VtZW50UGFyc2VyLnJlc29sdmVDbG9ja1ZhbHVlKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY2xpcEJlZ2luXCIpKTtcbiAgICAgIGl0ZW0uY2xpcEVuZCA9IFNtaWxEb2N1bWVudFBhcnNlci5yZXNvbHZlQ2xvY2tWYWx1ZShlbGVtZW50LmdldEF0dHJpYnV0ZShcImNsaXBFbmRcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUZha2VTbWlsSnNvbihzcGluZUl0ZW0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IFwiXCIsXG4gICAgICBocmVmOiBcIlwiLFxuICAgICAgc3BpbmVJdGVtSWQ6IHNwaW5lSXRlbS5pZHJlZixcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICBub2RlVHlwZTogJ3NlcScsXG4gICAgICAgIHRleHRyZWY6IHNwaW5lSXRlbS5ocmVmLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICBub2RlVHlwZTogJ3BhcicsXG4gICAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgICBub2RlVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgc3JjOiBzcGluZUl0ZW0uaHJlZixcbiAgICAgICAgICAgIHNyY0ZpbGU6IHNwaW5lSXRlbS5ocmVmLFxuICAgICAgICAgICAgc3JjRnJhZ21lbnRJZDogXCJcIlxuICAgICAgICAgIH1dXG4gICAgICAgIH1dXG4gICAgICB9XVxuICAgIH07XG4gIH1cblxuICB0aGlzLmZpbGxTbWlsRGF0YSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgaWYgKHBhY2thZ2VEb2N1bWVudC5zcGluZUxlbmd0aCgpIDw9IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGFsbEZha2VTbWlsID0gdHJ1ZTtcbiAgICB2YXIgbW9fbWFwID0gW107XG4gICAgdmFyIHBhcnNpbmdEZWZlcnJlZHMgPSBbXTtcblxuICAgIGZvciAodmFyIHNwaW5lSWR4ID0gMDsgc3BpbmVJZHggPCBwYWNrYWdlRG9jdW1lbnQuc3BpbmVMZW5ndGgoKTsgc3BpbmVJZHgrKykge1xuICAgICAgdmFyIHNwaW5lSXRlbSA9IHBhY2thZ2VEb2N1bWVudC5nZXRTcGluZUl0ZW0oc3BpbmVJZHgpO1xuXG4gICAgICBpZiAoc3BpbmVJdGVtLm1lZGlhX292ZXJsYXlfaWQpIHtcbiAgICAgICAgdmFyIG1hbmlmZXN0SXRlbVNNSUwgPSBwYWNrYWdlRG9jdW1lbnQubWFuaWZlc3QuZ2V0TWFuaWZlc3RJdGVtQnlJZHJlZihzcGluZUl0ZW0ubWVkaWFfb3ZlcmxheV9pZCk7XG5cbiAgICAgICAgaWYgKCFtYW5pZmVzdEl0ZW1TTUlMKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkNhbm5vdCBmaW5kIFNNSUwgbWFuaWZlc3QgaXRlbSBmb3Igc3BpbmUvbWFuaWZlc3QgaXRlbT8hIFwiICsgc3BpbmVJdGVtLm1lZGlhX292ZXJsYXlfaWQpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vQVNTRVJUIG1hbmlmZXN0SXRlbVNNSUwubWVkaWFfdHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9zbWlsK3htbFwiXG5cbiAgICAgICAgdmFyIHBhcnNpbmdEZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgcGFyc2luZ0RlZmVycmVkLm1lZGlhX292ZXJsYXlfaWQgPSBzcGluZUl0ZW0ubWVkaWFfb3ZlcmxheV9pZDtcbiAgICAgICAgcGFyc2luZ0RlZmVycmVkcy5wdXNoKHBhcnNpbmdEZWZlcnJlZCk7XG4gICAgICAgIHZhciBzbWlsSnNvbiA9IHt9O1xuXG4gICAgICAgIC8vIFB1c2ggdGhlIGhvbGRlciBvYmplY3Qgb250byB0aGUgbWFwIGVhcmx5IHNvIHRoYXQgb3JkZXIgaXNuJ3QgZGlzdHVyYmVkIGJ5IGFzeW5jaHJvbmljaXR5OlxuICAgICAgICBtb19tYXAucHVzaChzbWlsSnNvbik7XG5cbiAgICAgICAgLy8gVGhlIGxvY2FsIHBhcnNpbmdEZWZlcnJlZCB2YXJpYWJsZSB3aWxsIGhhdmUgaXRzIHZhbHVlIHJlcGxhY2VkIG9uIG5leHQgbG9vcCBpdGVyYXRpb24uXG4gICAgICAgIC8vIE11c3QgcGFzcyB0aGUgcGFyc2luZ0RlZmVycmVkIHRocm91Z2ggYXN5bmMgY2FsbHMgYXMgYW4gYXJndW1lbnQgYW5kIGl0IGFycml2ZXMgYmFjayBhcyBteURlZmVycmVkLlxuICAgICAgICB0aGF0LnBhcnNlKHNwaW5lSXRlbSwgbWFuaWZlc3RJdGVtU01JTCwgc21pbEpzb24sIHBhcnNpbmdEZWZlcnJlZCwgZnVuY3Rpb24obXlEZWZlcnJlZCwgc21pbEpzb24pIHtcbiAgICAgICAgICBhbGxGYWtlU21pbCA9IGZhbHNlO1xuICAgICAgICAgIG15RGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9LCBmdW5jdGlvbihteURlZmVycmVkLCBwYXJzZUVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHdoZW4gcGFyc2luZyBTTUlMIG1hbmlmZXN0IGl0ZW0gJyArIG1hbmlmZXN0SXRlbVNNSUwuaHJlZiArICc6Jyk7XG4gICAgICAgICAgY29uc29sZS5sb2cocGFyc2VFcnJvcik7XG4gICAgICAgICAgbXlEZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW9fbWFwLnB1c2gobWFrZUZha2VTbWlsSnNvbihzcGluZUl0ZW0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkLndoZW4uYXBwbHkoJCwgcGFyc2luZ0RlZmVycmVkcykuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgIHBhY2thZ2VEb2N1bWVudC5nZXRNZXRhZGF0YSgpLnNldE1vTWFwKG1vX21hcCk7XG4gICAgICBpZiAoYWxsRmFrZVNtaWwpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJObyBNZWRpYSBPdmVybGF5c1wiKTtcbiAgICAgICAgcGFja2FnZURvY3VtZW50LmdldE1ldGFkYXRhKCkuc2V0TW9NYXAoW10pO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxufTtcblxuLy8gcGFyc2UgdGhlIHRpbWVzdGFtcCBhbmQgcmV0dXJuIHRoZSB2YWx1ZSBpbiBzZWNvbmRzXG4vLyBzdXBwb3J0cyB0aGlzIHN5bnRheDpcbi8vIGh0dHA6Ly9pZHBmLm9yZy9lcHViLzMwL3NwZWMvZXB1YjMwLW1lZGlhb3ZlcmxheXMuaHRtbCNhcHAtY2xvY2stZXhhbXBsZXNcblNtaWxEb2N1bWVudFBhcnNlci5yZXNvbHZlQ2xvY2tWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHJldHVybiAwO1xuXG4gIHZhciBob3VycyA9IDA7XG4gIHZhciBtaW5zID0gMDtcbiAgdmFyIHNlY3MgPSAwO1xuXG4gIGlmICh2YWx1ZS5pbmRleE9mKFwibWluXCIpICE9IC0xKSB7XG4gICAgbWlucyA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDAsIHZhbHVlLmluZGV4T2YoXCJtaW5cIikpKTtcbiAgfSBlbHNlIGlmICh2YWx1ZS5pbmRleE9mKFwibXNcIikgIT0gLTEpIHtcbiAgICB2YXIgbXMgPSBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cigwLCB2YWx1ZS5pbmRleE9mKFwibXNcIikpKTtcbiAgICBzZWNzID0gbXMgLyAxMDAwO1xuICB9IGVsc2UgaWYgKHZhbHVlLmluZGV4T2YoXCJzXCIpICE9IC0xKSB7XG4gICAgc2VjcyA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDAsIHZhbHVlLmluZGV4T2YoXCJzXCIpKSk7XG4gIH0gZWxzZSBpZiAodmFsdWUuaW5kZXhPZihcImhcIikgIT0gLTEpIHtcbiAgICBob3VycyA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDAsIHZhbHVlLmluZGV4T2YoXCJoXCIpKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcGFyc2UgYXMgaGg6bW06c3MuZnJhY3Rpb25cbiAgICAvLyB0aGlzIGFsc28gd29ya3MgZm9yIHNlY29uZHMtb25seSwgZS5nLiAxMi4zNDVcbiAgICB2YXIgYXJyID0gdmFsdWUuc3BsaXQoXCI6XCIpO1xuICAgIHNlY3MgPSBwYXJzZUZsb2F0KGFyci5wb3AoKSk7XG4gICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICBtaW5zID0gcGFyc2VGbG9hdChhcnIucG9wKCkpO1xuICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGhvdXJzID0gcGFyc2VGbG9hdChhcnIucG9wKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgdG90YWwgPSBob3VycyAqIDM2MDAgKyBtaW5zICogNjAgKyBzZWNzO1xuICByZXR1cm4gdG90YWw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU21pbERvY3VtZW50UGFyc2VyOyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBSZWFkZXI6IHJlcXVpcmUoJy4vcmVhZGVyJyksXG4gIFNESzogcmVxdWlyZSgnLi9zZGsnKVxufSIsIi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgU0RLID0gcmVxdWlyZSgnLi9zZGsnKVxudmFyIFBhY2thZ2VQYXJzZXIgPSByZXF1aXJlKCcuL2VwdWIvcGFja2FnZS1kb2N1bWVudC1wYXJzZXInKVxudmFyIFB1YmxpY2F0aW9uRmV0Y2hlciA9IHJlcXVpcmUoJy4vZXB1Yi1mZXRjaC9wdWJsaWNhdGlvbi1mZXRjaGVyJylcblxuaWYgKHdpbmRvdykge1xuICAvL3BvbHlmaWxsIHRvIHN1cHBvcnQgU2FmYXJpIDZcbiAgaWYgKCdVUkwnIGluIHdpbmRvdyA9PT0gZmFsc2UpIHtcbiAgICBpZiAoJ3dlYmtpdFVSTCcgaW4gd2luZG93ID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0Jyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB3aW5kb3cuVVJMJyk7XG4gICAgfVxuXG4gICAgd2luZG93LlVSTCA9IHdpbmRvdy53ZWJraXRVUkw7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGVyKHJlYWRpdW1PcHRpb25zLCByZWFkZXJPcHRpb25zKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBfY3VycmVudFB1YmxpY2F0aW9uRmV0Y2hlcjtcblxuICB2YXIganNMaWJSb290ID0gcmVhZGl1bU9wdGlvbnMuanNMaWJSb290O1xuXG4gIGlmICghcmVhZGl1bU9wdGlvbnMudXNlU2ltcGxlTG9hZGVyKSB7XG4gICAgLy8gVE9ETyBXZSdyZSBub3QgYnVuZGxpbmcgSWZyYW1lWmlwTG9hZGVyXG4gICAgcmVhZGVyT3B0aW9ucy5pZnJhbWVMb2FkZXIgPSBuZXcgSWZyYW1lWmlwTG9hZGVyKFNESywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gX2N1cnJlbnRQdWJsaWNhdGlvbkZldGNoZXI7XG4gICAgfSwge1xuICAgICAgbWF0aEpheFVybDogcmVhZGVyT3B0aW9ucy5tYXRoSmF4VXJsXG4gICAgfSk7O1xuICB9IGVsc2Uge1xuICAgIHJlYWRlck9wdGlvbnMuaWZyYW1lTG9hZGVyID0gbmV3IFNESy5WaWV3cy5JRnJhbWVMb2FkZXIoKTtcbiAgfVxuXG5cbiAgdGhpcy5yZWFkZXIgPSBuZXcgU0RLLlZpZXdzLlJlYWRlclZpZXcocmVhZGVyT3B0aW9ucyk7XG5cbiAgdGhpcy5vcGVuUGFja2FnZURvY3VtZW50ID0gZnVuY3Rpb24oYm9va1Jvb3QsIGNhbGxiYWNrLCBvcGVuUGFnZVJlcXVlc3QpIHtcblxuICAgIF9jdXJyZW50UHVibGljYXRpb25GZXRjaGVyID0gbmV3IFB1YmxpY2F0aW9uRmV0Y2hlcihib29rUm9vdCwganNMaWJSb290KTtcblxuICAgIF9jdXJyZW50UHVibGljYXRpb25GZXRjaGVyLmluaXRpYWxpemUoZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciBfcGFja2FnZVBhcnNlciA9IG5ldyBQYWNrYWdlUGFyc2VyKGJvb2tSb290LCBfY3VycmVudFB1YmxpY2F0aW9uRmV0Y2hlcik7XG5cbiAgICAgIF9wYWNrYWdlUGFyc2VyLnBhcnNlKGZ1bmN0aW9uKHBhY2thZ2VEb2N1bWVudCkge1xuICAgICAgICB2YXIgb3BlbkJvb2tPcHRpb25zID0gcmVhZGl1bU9wdGlvbnMub3BlbkJvb2tPcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgb3BlbkJvb2tEYXRhID0gJC5leHRlbmQocGFja2FnZURvY3VtZW50LmdldFNoYXJlZEpzUGFja2FnZURhdGEoKSwgb3BlbkJvb2tPcHRpb25zKTtcblxuICAgICAgICBpZiAob3BlblBhZ2VSZXF1ZXN0KSB7XG4gICAgICAgICAgb3BlbkJvb2tEYXRhLm9wZW5QYWdlUmVxdWVzdCA9IG9wZW5QYWdlUmVxdWVzdDtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnJlYWRlci5vcGVuQm9vayhvcGVuQm9va0RhdGEpO1xuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgIHBhY2thZ2VEb2N1bWVudFVybDogX2N1cnJlbnRQdWJsaWNhdGlvbkZldGNoZXIuZ2V0UGFja2FnZVVybCgpLFxuICAgICAgICAgIG1ldGFkYXRhOiBwYWNrYWdlRG9jdW1lbnQuZ2V0TWV0YWRhdGEoKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIC8vIGdpdmVzIGNhbGxlciBhY2Nlc3MgdG8gZG9jdW1lbnQgbWV0YWRhdGEgbGlrZSB0aGUgdGFibGUgb2YgY29udGVudHNcbiAgICAgICAgICBjYWxsYmFjayhwYWNrYWdlRG9jdW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vd2UgbmVlZCBnbG9iYWwgYWNjZXNzIHRvIHRoZSByZWFkZXIgb2JqZWN0IGZvciBhdXRvbWF0aW9uIHRlc3QgYmVpbmcgYWJsZSB0byBjYWxsIGl0J3MgQVBJc1xuICBTREsucmVhZGVyID0gdGhpcy5yZWFkZXI7XG5cbiAgU0RLLnRyaWdnZXIoU0RLLkV2ZW50cy5SRUFERVJfSU5JVElBTElaRUQsIHRoaXMucmVhZGVyKTtcbn07XG5cblJlYWRlci52ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkZXI7IiwiLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG52YXIgU3R5bGUgPSByZXF1aXJlKCcuLi9tb2RlbHMvc3R5bGUnKVxuXG4vKipcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3R5bGVDb2xsZWN0aW9uKCkge1xuXG4gIHZhciBfc3R5bGVzID0gW107XG5cbiAgdGhpcy5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIF9zdHlsZXMubGVuZ3RoID0gMDtcblxuICB9O1xuXG4gIHRoaXMuZmluZFN0eWxlID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblxuICAgIHZhciBjb3VudCA9IF9zdHlsZXMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgaWYgKF9zdHlsZXNbaV0uc2VsZWN0b3IgPT09IHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBfc3R5bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5hZGRTdHlsZSA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBkZWNsYXJhdGlvbnMpIHtcblxuICAgIHZhciBzdHlsZSA9IHRoaXMuZmluZFN0eWxlKHNlbGVjdG9yKTtcblxuICAgIGlmIChzdHlsZSkge1xuICAgICAgc3R5bGUuc2V0RGVjbGFyYXRpb25zKGRlY2xhcmF0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlID0gbmV3IFN0eWxlKHNlbGVjdG9yLCBkZWNsYXJhdGlvbnMpO1xuICAgICAgX3N0eWxlcy5wdXNoKHN0eWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH07XG5cbiAgdGhpcy5yZW1vdmVTdHlsZSA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG5cbiAgICB2YXIgY291bnQgPSBfc3R5bGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuXG4gICAgICBpZiAoX3N0eWxlc1tpXS5zZWxlY3RvciA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgX3N0eWxlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5nZXRTdHlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3N0eWxlcztcbiAgfTtcblxuICB0aGlzLnJlc2V0U3R5bGVWYWx1ZXMgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBjb3VudCA9IF9zdHlsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG5cbiAgICAgIHZhciBzdHlsZSA9IF9zdHlsZXNbaV07XG4gICAgICB2YXIgZGVjbGFyYXRpb25zID0gc3R5bGUuZGVjbGFyYXRpb25zO1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIGRlY2xhcmF0aW9ucykge1xuICAgICAgICBpZiAoZGVjbGFyYXRpb25zLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgZGVjbGFyYXRpb25zW3Byb3BdID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdHlsZUNvbGxlY3Rpb24iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIEBldmVudFxuICAgKi9cbiAgUkVBREVSX0lOSVRJQUxJWkVEOiBcIlJlYWRlckluaXRpYWxpemVkXCIsXG4gIC8qKlxuICAgKiBUaGlzIGdldHMgdHJpZ2dlcmVkIG9uIGV2ZXJ5IHBhZ2UgdHVybm92ZXIuIEl0IGluY2x1ZGVzIHNwaW5lIGluZm9ybWF0aW9uIGFuZCBzdWNoLlxuICAgKiBAZXZlbnRcbiAgICovXG4gIFBBR0lOQVRJT05fQ0hBTkdFRDogXCJQYWdpbmF0aW9uQ2hhbmdlZFwiLFxuICAvKipcbiAgICogQGV2ZW50XG4gICAqL1xuICBTRVRUSU5HU19BUFBMSUVEOiBcIlNldHRpbmdzQXBwbGllZFwiLFxuICAvKipcbiAgICogQGV2ZW50XG4gICAqL1xuICBGWExfVklFV19SRVNJWkVEOiBcIkZYTFZpZXdSZXNpemVkXCIsXG4gIC8qKlxuICAgKiBAZXZlbnRcbiAgICovXG4gIFJFQURFUl9WSUVXX0NSRUFURUQ6IFwiUmVhZGVyVmlld0NyZWF0ZWRcIixcbiAgLyoqXG4gICAqIEBldmVudFxuICAgKi9cbiAgUkVBREVSX1ZJRVdfREVTVFJPWUVEOiBcIlJlYWRlclZpZXdEZXN0cm95ZWRcIixcbiAgLyoqXG4gICAqIEBldmVudFxuICAgKi9cbiAgQ09OVEVOVF9ET0NVTUVOVF9MT0FEX1NUQVJUOiBcIkNvbnRlbnREb2N1bWVudExvYWRTdGFydFwiLFxuICAvKipcbiAgICogQGV2ZW50XG4gICAqL1xuICBDT05URU5UX0RPQ1VNRU5UX0xPQURFRDogXCJDb250ZW50RG9jdW1lbnRMb2FkZWRcIixcbiAgLyoqXG4gICAqIEBldmVudFxuICAgKi9cbiAgTUVESUFfT1ZFUkxBWV9TVEFUVVNfQ0hBTkdFRDogXCJNZWRpYU92ZXJsYXlTdGF0dXNDaGFuZ2VkXCIsXG4gIC8qKlxuICAgKiBAZXZlbnRcbiAgICovXG4gIE1FRElBX09WRVJMQVlfVFRTX1NQRUFLOiBcIk1lZGlhT3ZlcmxheVRUU1NwZWFrXCIsXG4gIC8qKlxuICAgKiBAZXZlbnRcbiAgICovXG4gIE1FRElBX09WRVJMQVlfVFRTX1NUT1A6IFwiTWVkaWFPdmVybGF5VFRTU3RvcFwiXG59IiwiLyoqXG4gKlxuICogQHBhcmFtIHN0clxuICogQHBhcmFtIHN1ZmZpeFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAc3RhdGljXG4gKi9cbmZ1bmN0aW9uIEJlZ2luc1dpdGgoc3RyLCBzdWZmaXgpIHtcblxuICByZXR1cm4gc3RyLmluZGV4T2Yoc3VmZml4KSA9PT0gMDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmVnaW5zV2l0aCIsIi8vc2NhbGUsIGxlZnQsIHRvcCwgYW5nbGUsIG9yaWdpblxuZnVuY3Rpb24gQ1NTVHJhbnNmb3JtU3RyaW5nKG9wdGlvbnMpIHtcbiAgdmFyIGVuYWJsZTNEID0gb3B0aW9ucy5lbmFibGUzRCA/IHRydWUgOiBmYWxzZTtcblxuICB2YXIgdHJhbnNsYXRlLCBzY2FsZSwgcm90YXRpb24sXG4gICAgb3JpZ2luID0gb3B0aW9ucy5vcmlnaW47XG5cbiAgaWYgKG9wdGlvbnMubGVmdCB8fCBvcHRpb25zLnRvcCkge1xuICAgIHZhciBsZWZ0ID0gb3B0aW9ucy5sZWZ0IHx8IDAsXG4gICAgICB0b3AgPSBvcHRpb25zLnRvcCB8fCAwO1xuXG4gICAgdHJhbnNsYXRlID0gZW5hYmxlM0QgPyAoXCJ0cmFuc2xhdGUzRChcIiArIGxlZnQgKyBcInB4LCBcIiArIHRvcCArIFwicHgsIDApXCIpIDogKFwidHJhbnNsYXRlKFwiICsgbGVmdCArIFwicHgsIFwiICsgdG9wICsgXCJweClcIik7XG4gIH1cbiAgaWYgKG9wdGlvbnMuc2NhbGUpIHtcbiAgICBzY2FsZSA9IGVuYWJsZTNEID8gKFwic2NhbGUzRChcIiArIG9wdGlvbnMuc2NhbGUgKyBcIiwgXCIgKyBvcHRpb25zLnNjYWxlICsgXCIsIDApXCIpIDogKFwic2NhbGUoXCIgKyBvcHRpb25zLnNjYWxlICsgXCIpXCIpO1xuICB9XG4gIGlmIChvcHRpb25zLmFuZ2xlKSB7XG4gICAgcm90YXRpb24gPSBlbmFibGUzRCA/IChcInJvdGF0ZTNEKDAsMCxcIiArIG9wdGlvbnMuYW5nbGUgKyBcImRlZylcIikgOiAoXCJyb3RhdGUoXCIgKyBvcHRpb25zLmFuZ2xlICsgXCJkZWcpXCIpO1xuICB9XG5cbiAgaWYgKCEodHJhbnNsYXRlIHx8IHNjYWxlIHx8IHJvdGF0aW9uKSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHZhciB0cmFuc2Zvcm1TdHJpbmcgPSAodHJhbnNsYXRlICYmIHNjYWxlKSA/ICh0cmFuc2xhdGUgKyBcIiBcIiArIHNjYWxlKSA6ICh0cmFuc2xhdGUgPyB0cmFuc2xhdGUgOiBzY2FsZSk7IC8vIHRoZSBvcmRlciBpcyBpbXBvcnRhbnQhXG4gIGlmIChyb3RhdGlvbikge1xuICAgIHRyYW5zZm9ybVN0cmluZyA9IHRyYW5zZm9ybVN0cmluZyArIFwiIFwiICsgcm90YXRpb247XG4gICAgLy90cmFuc2Zvcm1TdHJpbmcgPSByb3RhdGlvbiArIFwiIFwiICsgdHJhbnNmb3JtU3RyaW5nO1xuICB9XG5cbiAgdmFyIGNzcyA9IHt9O1xuICBjc3NbJ3RyYW5zZm9ybSddID0gdHJhbnNmb3JtU3RyaW5nO1xuICBjc3NbJ3RyYW5zZm9ybS1vcmlnaW4nXSA9IG9yaWdpbiA/IG9yaWdpbiA6IChlbmFibGUzRCA/ICcwIDAgMCcgOiAnMCAwJyk7XG4gIHJldHVybiBjc3M7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1RyYW5zZm9ybVN0cmluZyIsInZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG5cbmZ1bmN0aW9uIENTU1RyYW5zaXRpb24oJGVsLCB0cmFucykge1xuXG4gIC8vIGRvZXMgbm90IHdvcmshXG4gIC8vJGVsLmNzcygndHJhbnNpdGlvbicsIHRyYW5zKTtcblxuICB2YXIgY3NzID0ge307XG4gIC8vIGVtcHR5ICcnIHByZWZpeCBGSVJTVCFcbiAgXy5lYWNoKFsnJywgJy13ZWJraXQtJywgJy1tb3otJywgJy1tcy0nXSwgZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgY3NzW3ByZWZpeCArICd0cmFuc2l0aW9uJ10gPSBwcmVmaXggKyB0cmFucztcbiAgfSk7XG4gICRlbC5jc3MoY3NzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDU1NUcmFuc2l0aW9uIiwidmFyIGdldE9yaWVudGF0aW9uID0gcmVxdWlyZSgnLi9nZXQtb3JpZW50YXRpb24nKVxudmFyIFNwaW5lSXRlbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL21vZGVscy9zcGluZS1pdGVtLWNvbnN0YW50cycpXG52YXIgVmlld3NDb25zdGFudHMgPSByZXF1aXJlKCcuLi92aWV3cy9jb25zdGFudHMnKVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gJHZpZXdwb3J0XG4gKiBAcGFyYW0gc3BpbmVJdGVtXG4gKiBAcGFyYW0gc2V0dGluZ3NcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG4vL0Jhc2VkIG9uIGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3NwcmVhZHNoZWV0L2NjYz9rZXk9MEFvUE1Va1FoYzR3Y2RESTBhbkZ2V205Nk4weFJUMTg0WkU5Nk1YRlJkRkUmdXNwPWRyaXZlX3dlYiNnaWQ9MCBkb2Ncbi8vIFJldHVybnMgZmFsc3kgYW5kIHRydXRoeVxuLy8gdHJ1ZSBhbmQgZmFsc2UgbWVhbiB0aGF0IHRoZSBzeW50aGV0aWMtc3ByZWFkIG9yIHNpbmdsZS1wYWdlIGlzIFwiZm9yY2VkXCIgKHRvIGJlIHJlc3BlY3RlZCB3aGF0ZXZlciB0aGUgZXh0ZXJuYWwgY29uZGl0aW9ucylcbi8vIDEgYW5kIDAgbWVhbiB0aGF0IHRoZSBzeW50aGV0aWMtc3ByZWFkIG9yIHNpbmdsZS1wYWdlIGlzIFwibm90IGZvcmNlZFwiIChpcyBhbGxvd2VkIHRvIGJlIG92ZXJyaWRlbiBieSBleHRlcm5hbCBjb25kaXRpb25zLCBzdWNoIGFzIG9wdGltdW0gY29sdW1uIHdpZHRoIC8gdGV4dCBsaW5lIG51bWJlciBvZiBjaGFyYWN0ZXJzLCBldGMuKVxuZnVuY3Rpb24gZGVkdWNlU3ludGhldGljU3ByZWFkKCR2aWV3cG9ydCwgc3BpbmVJdGVtLCBzZXR0aW5ncykge1xuXG4gIGlmICghJHZpZXdwb3J0IHx8ICR2aWV3cG9ydC5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybiAwOyAvLyBub24tZm9yY2VkXG4gIH1cblxuICAvL2h0dHA6Ly93d3cuaWRwZi5vcmcvZXB1Yi9meGwvI3Byb3BlcnR5LXNwcmVhZC12YWx1ZXNcblxuICB2YXIgcmVuZGl0aW9uX3NwcmVhZCA9IHNwaW5lSXRlbSA/IHNwaW5lSXRlbS5nZXRSZW5kaXRpb25TcHJlYWQoKSA6IHVuZGVmaW5lZDtcblxuICBpZiAocmVuZGl0aW9uX3NwcmVhZCA9PT0gU3BpbmVJdGVtQ29uc3RhbnRzLlJFTkRJVElPTl9TUFJFQURfTk9ORSkge1xuICAgIHJldHVybiBmYWxzZTsgLy8gZm9yY2VkXG5cbiAgICAvL1wiUmVhZGluZyBTeXN0ZW1zIG11c3Qgbm90IGluY29ycG9yYXRlIHRoaXMgc3BpbmUgaXRlbSBpbiBhIHN5bnRoZXRpYyBzcHJlYWQuXCJcbiAgfVxuXG4gIGlmIChzZXR0aW5ncy5zeW50aGV0aWNTcHJlYWQgPT0gXCJkb3VibGVcIikge1xuICAgIHJldHVybiB0cnVlOyAvLyBmb3JjZWRcbiAgfSBlbHNlIGlmIChzZXR0aW5ncy5zeW50aGV0aWNTcHJlYWQgPT0gXCJzaW5nbGVcIikge1xuICAgIHJldHVybiBmYWxzZTsgLy8gZm9yY2VkXG4gIH1cblxuICBpZiAoIXNwaW5lSXRlbSkge1xuICAgIHJldHVybiAwOyAvLyBub24tZm9yY2VkXG4gIH1cblxuICBpZiAocmVuZGl0aW9uX3NwcmVhZCA9PT0gU3BpbmVJdGVtQ29uc3RhbnRzLlJFTkRJVElPTl9TUFJFQURfQk9USCkge1xuICAgIHJldHVybiB0cnVlOyAvLyBmb3JjZWRcblxuICAgIC8vXCJSZWFkaW5nIFN5c3RlbXMgc2hvdWxkIGluY29ycG9yYXRlIHRoaXMgc3BpbmUgaXRlbSBpbiBhIHN5bnRoZXRpYyBzcHJlYWQgcmVnYXJkbGVzcyBvZiBkZXZpY2Ugb3JpZW50YXRpb24uXCJcbiAgfVxuXG4gIHZhciBvcmllbnRhdGlvbiA9IGdldE9yaWVudGF0aW9uKCR2aWV3cG9ydCk7XG5cbiAgaWYgKHJlbmRpdGlvbl9zcHJlYWQgPT09IFNwaW5lSXRlbUNvbnN0YW50cy5SRU5ESVRJT05fU1BSRUFEX0xBTkRTQ0FQRSkge1xuICAgIHJldHVybiBvcmllbnRhdGlvbiA9PT0gVmlld3NDb25zdGFudHMuT1JJRU5UQVRJT05fTEFORFNDQVBFOyAvLyBmb3JjZWRcblxuICAgIC8vXCJSZWFkaW5nIFN5c3RlbXMgc2hvdWxkIGluY29ycG9yYXRlIHRoaXMgc3BpbmUgaXRlbSBpbiBhIHN5bnRoZXRpYyBzcHJlYWQgb25seSB3aGVuIHRoZSBkZXZpY2UgaXMgaW4gbGFuZHNjYXBlIG9yaWVudGF0aW9uLlwiXG4gIH1cblxuICBpZiAocmVuZGl0aW9uX3NwcmVhZCA9PT0gU3BpbmVJdGVtQ29uc3RhbnRzLlJFTkRJVElPTl9TUFJFQURfUE9SVFJBSVQpIHtcbiAgICByZXR1cm4gb3JpZW50YXRpb24gPT09IFZpZXdzQ29uc3RhbnRzLk9SSUVOVEFUSU9OX1BPUlRSQUlUOyAvLyBmb3JjZWRcblxuICAgIC8vXCJSZWFkaW5nIFN5c3RlbXMgc2hvdWxkIGluY29ycG9yYXRlIHRoaXMgc3BpbmUgaXRlbSBpbiBhIHN5bnRoZXRpYyBzcHJlYWQgb25seSB3aGVuIHRoZSBkZXZpY2UgaXMgaW4gcG9ydHJhaXQgb3JpZW50YXRpb24uXCJcbiAgfVxuXG4gIGlmICghcmVuZGl0aW9uX3NwcmVhZCB8fCByZW5kaXRpb25fc3ByZWFkID09PSBTcGluZUl0ZW1Db25zdGFudHMuUkVORElUSU9OX1NQUkVBRF9BVVRPKSB7XG4gICAgLy8gaWYgbm8gc3ByZWFkIHNldCBpbiBkb2N1bWVudCBhbmQgdXNlciBkaWRuJ3Qgc2V0IGluIGluIHNldHRpbmcgd2Ugd2lsbCBkbyBkb3VibGUgZm9yIGxhbmRzY2FwZVxuICAgIHZhciBsYW5kc2NhcGUgPSBvcmllbnRhdGlvbiA9PT0gVmlld3NDb25zdGFudHMuT1JJRU5UQVRJT05fTEFORFNDQVBFO1xuICAgIHJldHVybiBsYW5kc2NhcGUgPyAxIDogMDsgLy8gbm9uLWZvcmNlZFxuXG4gICAgLy9cIlJlYWRpbmcgU3lzdGVtcyBtYXkgdXNlIHN5bnRoZXRpYyBzcHJlYWRzIGluIHNwZWNpZmljIG9yIGFsbCBkZXZpY2Ugb3JpZW50YXRpb25zIGFzIHBhcnQgb2YgYSBkaXNwbGF5IGFyZWEgdXRpbGl6YXRpb24gb3B0aW1pemF0aW9uIHByb2Nlc3MuXCJcbiAgfVxuXG4gIGNvbnNvbGUud2FybihcIkhlbHBlcnMuZGVkdWNlU3ludGhldGljU3ByZWFkOiBzcHJlYWQgcHJvcGVydGllcz8hXCIpO1xuICByZXR1cm4gMDsgLy8gbm9uLWZvcmNlZFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWR1Y2VTeW50aGV0aWNTcHJlYWQiLCIvKipcbiAqXG4gKiBAcGFyYW0gc3RyXG4gKiBAcGFyYW0gc3VmZml4XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gRW5kc1dpdGgoc3RyLCBzdWZmaXgpIHtcbiAgcmV0dXJuIHN0ci5pbmRleE9mKHN1ZmZpeCwgc3RyLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpICE9PSAtMTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRW5kc1dpdGgiLCIvL1RPRE86IGNvbnNpZGVyIHVzaW5nIENTU09NIGVzY2FwZSgpIG9yIHBvbHlmaWxsXG4vL2h0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL0NTUy5lc2NhcGUvYmxvYi9tYXN0ZXIvY3NzLmVzY2FwZS5qc1xuLy9odHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlc1xuLyoqXG4gKlxuICogQHBhcmFtIHNlbFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlSlF1ZXJ5U2VsZWN0b3Ioc2VsKSB7XG4gIC8vaHR0cDovL2FwaS5qcXVlcnkuY29tL2NhdGVnb3J5L3NlbGVjdG9ycy9cbiAgLy8hXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXV5ge3x9flxuICAvLyBkb3VibGUgYmFja3NsYXNoIGVzY2FwZVxuXG4gIGlmICghc2VsKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gIHZhciBzZWxlY3RvciA9IHNlbC5yZXBsYWNlKC8oWzsmLFxcLlxcK1xcKlxcflxcPyc6XCJcXCFcXF4jJCVAXFxbXFxdXFwoXFwpPD0+XFx8XFwvXFxcXHt9YF0pL2csICdcXFxcJDEnKTtcblxuICAvLyBpZiAoc2VsZWN0b3IgIT09IHNlbClcbiAgLy8ge1xuICAvLyAgICAgY29uc29sZS5kZWJ1ZyhcIi0tLS0gU0VMRUNUT1IgRVNDQVBFRFwiKTtcbiAgLy8gICAgIGNvbnNvbGUuZGVidWcoXCIxOiBcIiArIHNlbCk7XG4gIC8vICAgICBjb25zb2xlLmRlYnVnKFwiMjogXCIgKyBzZWxlY3Rvcik7XG4gIC8vIH1cbiAgLy8gZWxzZVxuICAvLyB7XG4gIC8vICAgICBjb25zb2xlLmRlYnVnKFwiLS0tLSBTRUxFQ1RPUiBPS0FZOiBcIiArIHNlbCk7XG4gIC8vIH1cblxuICByZXR1cm4gc2VsZWN0b3I7XG59O1xuLy8gVEVTVFMgQkVMT1cgQUxMIFdPUktJTkcgRklORSA6KVxuLy8gKFJlZ0V4cCB0eXBvcyBhcmUgaGFyZCB0byBzcG90ISlcbi8vIGVzY2FwZVNlbGVjdG9yKCchJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignXCInKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCcjJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignJCcpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJyUnKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCcmJyk7XG4vLyBlc2NhcGVTZWxlY3RvcihcIidcIik7XG4vLyBlc2NhcGVTZWxlY3RvcignKCcpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJyknKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCcqJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignKycpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJywnKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCcuJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignLycpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJzonKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCc7Jyk7XG4vLyBlc2NhcGVTZWxlY3RvcignPCcpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJz0nKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCc+Jyk7XG4vLyBlc2NhcGVTZWxlY3RvcignPycpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJ0AnKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCdbJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignXFxcXCcpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJ10nKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCdeJyk7XG4vLyBlc2NhcGVTZWxlY3RvcignYCcpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJ3snKTtcbi8vIGVzY2FwZVNlbGVjdG9yKCd8Jyk7XG4vLyBlc2NhcGVTZWxlY3RvcignfScpO1xuLy8gZXNjYXBlU2VsZWN0b3IoJ34nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVKUXVlcnlTZWxlY3RvciIsImZ1bmN0aW9uIGV4dGVuZGVkVGhyb3R0bGUoc3RhcnRDYiwgdGlja0NiLCBlbmRDYiwgdGlja1JhdGUsIHdhaXRUaHJlc2hvbGQsIGNvbnRleHQpIHtcbiAgaWYgKCF0aWNrUmF0ZSkgdGlja1JhdGUgPSAyNTA7XG4gIGlmICghd2FpdFRocmVzaG9sZCkgd2FpdFRocmVzaG9sZCA9IHRpY2tSYXRlO1xuXG4gIHZhciBmaXJzdCA9IHRydWUsXG4gICAgbGFzdCxcbiAgICBkZWZlclRpbWVyO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3R4ID0gY29udGV4dCB8fCB0aGlzLFxuICAgICAgbm93ID0gKERhdGUubm93ICYmIERhdGUubm93KCkpIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIGlmICghKGxhc3QgJiYgbm93IDwgbGFzdCArIHRpY2tSYXRlKSkge1xuICAgICAgbGFzdCA9IG5vdztcbiAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICBzdGFydENiLmFwcGx5KGN0eCwgYXJncyk7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aWNrQ2IuYXBwbHkoY3R4LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoZGVmZXJUaW1lcik7XG4gICAgZGVmZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBsYXN0ID0gbm93O1xuICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgZW5kQ2IuYXBwbHkoY3R4LCBhcmdzKTtcbiAgICB9LCB3YWl0VGhyZXNob2xkKTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kZWRUaHJvdHRsZSIsInZhciBWaWV3c0NvbnN0YW50cyA9IHJlcXVpcmUoJy4uL3ZpZXdzL2NvbnN0YW50cycpXG5cbi8qKlxuICpcbiAqIEBwYXJhbSAkdmlld3BvcnRcbiAqIEByZXR1cm5zIHtSZWFkaXVtU0RLLlZpZXdzLk9SSUVOVEFUSU9OX0xBTkRTQ0FQRXxSZWFkaXVtU0RLLlZpZXdzLk9SSUVOVEFUSU9OX1BPUlRSQUlUfVxuICovXG5mdW5jdGlvbiBnZXRPcmllbnRhdGlvbigkdmlld3BvcnQpIHtcblxuICB2YXIgdmlld3BvcnRXaWR0aCA9ICR2aWV3cG9ydC53aWR0aCgpO1xuICB2YXIgdmlld3BvcnRIZWlnaHQgPSAkdmlld3BvcnQuaGVpZ2h0KCk7XG5cbiAgaWYgKCF2aWV3cG9ydFdpZHRoIHx8ICF2aWV3cG9ydEhlaWdodCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gdmlld3BvcnRXaWR0aCA+PSB2aWV3cG9ydEhlaWdodCA/IFZpZXdzQ29uc3RhbnRzLk9SSUVOVEFUSU9OX0xBTkRTQ0FQRSA6IFZpZXdzQ29uc3RhbnRzLk9SSUVOVEFUSU9OX1BPUlRSQUlUO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRPcmllbnRhdGlvbiIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJlZ2luc1dpdGg6IHJlcXVpcmUoJy4vYmVnaW5zLXdpdGgnKSxcbiAgQ1NTVHJhbnNpdGlvbjogcmVxdWlyZSgnLi9jc3MtdHJhbnNpdGlvbicpLFxuICBDU1NUcmFuc2Zvcm1TdHJpbmc6IHJlcXVpcmUoJy4vY3NzLXRyYW5zZm9ybS1zdHJpbmcnKSxcbiAgZGVkdWNlU3ludGhldGljU3ByZWFkOiByZXF1aXJlKCcuL2RlZHVjZS1zeW50aGV0aWMtc3ByZWFkJyksXG4gIEVuZHNXaXRoOiByZXF1aXJlKCcuL2VuZHMtd2l0aCcpLFxuICBlc2NhcGVKUXVlcnlTZWxlY3RvcjogcmVxdWlyZSgnLi9lc2NhcGUtanF1ZXJ5LXNlbGVjdG9yJyksXG4gIGV4dGVuZGVkVGhyb3R0bGU6IHJlcXVpcmUoJy4vZXh0ZW5kZWQtdGhyb3R0bGUnKSxcbiAgZ2V0T3JpZW50YXRpb246IHJlcXVpcmUoJy4vZ2V0LW9yaWVudGF0aW9uJyksXG4gIGlzSWZyYW1lQWxpdmU6IHJlcXVpcmUoJy4vaXMtaWZyYW1lLWFsaXZlJyksXG4gIGlzUmVuZGl0aW9uU3ByZWFkUGVybWl0dGVkRm9ySXRlbTogcmVxdWlyZSgnLi9pcy1yZW5kaXRpb24tc3ByZWFkLXBlcm1pdHRlZC1mb3ItaXRlbScpLFxuICBsb2FkVGVtcGxhdGU6IHJlcXVpcmUoJy4vbG9hZC10ZW1wbGF0ZScpLFxuICBNYXJnaW5zOiByZXF1aXJlKCcuL21hcmdpbnMnKSxcbiAgUmVjdDogcmVxdWlyZSgnLi9yZWN0JyksXG4gIFJlbW92ZUZyb21TdHJpbmc6IHJlcXVpcmUoJy4vcmVtb3ZlLWZyb20tc3RyaW5nJyksXG4gIFJlc29sdmVDb250ZW50UmVmOiByZXF1aXJlKCcuL3Jlc29sdmUtY29udGVudC1yZWYnKSxcbiAgc2V0U3R5bGVzOiByZXF1aXJlKCcuL3NldC1zdHlsZXMnKSxcbiAgdHJpZ2dlckxheW91dDogcmVxdWlyZSgnLi90cmlnZ2VyLWxheW91dCcpLFxuICBVcGRhdGVIdG1sRm9udFNpemU6IHJlcXVpcmUoJy4vdXBkYXRlLWh0bWwtZm9udC1zaXplJylcbn0iLCIvKipcbiAqXG4gKiBAcGFyYW0gaWZyYW1lXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNJZnJhbWVBbGl2ZShpZnJhbWUpIHtcbiAgdmFyIHcgPSB1bmRlZmluZWQ7XG4gIHZhciBkID0gdW5kZWZpbmVkO1xuICB0cnkge1xuICAgIHcgPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICBkID0gaWZyYW1lLmNvbnRlbnREb2N1bWVudDtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBjb25zb2xlLmVycm9yKGV4KTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdyAmJiBkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSWZyYW1lQWxpdmUiLCJ2YXIgU3BpbmVJdGVtQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vbW9kZWxzL3NwaW5lLWl0ZW0tY29uc3RhbnRzJylcbnZhciBWaWV3c0NvbnN0YW50cyA9IHJlcXVpcmUoJy4uL3ZpZXdzL2NvbnN0YW50cycpXG5cbi8qKlxuICpcbiAqIEBwYXJhbSBpdGVtXG4gKiBAcGFyYW0gb3JpZW50YXRpb25cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1JlbmRpdGlvblNwcmVhZFBlcm1pdHRlZEZvckl0ZW0oaXRlbSwgb3JpZW50YXRpb24pIHtcblxuICB2YXIgcmVuZGl0aW9uX3NwcmVhZCA9IGl0ZW0uZ2V0UmVuZGl0aW9uU3ByZWFkKCk7XG5cbiAgcmV0dXJuICFyZW5kaXRpb25fc3ByZWFkIHx8IHJlbmRpdGlvbl9zcHJlYWQgPT0gU3BpbmVJdGVtQ29uc3RhbnRzLlJFTkRJVElPTl9TUFJFQURfQk9USCB8fCByZW5kaXRpb25fc3ByZWFkID09IFNwaW5lSXRlbUNvbnN0YW50cy5SRU5ESVRJT05fU1BSRUFEX0FVVE8gfHwgKHJlbmRpdGlvbl9zcHJlYWQgPT0gU3BpbmVJdGVtQ29uc3RhbnRzLlJFTkRJVElPTl9TUFJFQURfTEFORFNDQVBFICYmIG9yaWVudGF0aW9uID09IFZpZXdzQ29uc3RhbnRzLk9SSUVOVEFUSU9OX0xBTkRTQ0FQRSkgfHwgKHJlbmRpdGlvbl9zcHJlYWQgPT0gU3BpbmVJdGVtQ29uc3RhbnRzLlJFTkRJVElPTl9TUFJFQURfUE9SVFJBSVQgJiYgb3JpZW50YXRpb24gPT0gVmlld3NDb25zdGFudHMuT1JJRU5UQVRJT05fUE9SVFJBSVQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1JlbmRpdGlvblNwcmVhZFBlcm1pdHRlZEZvckl0ZW0iLCIvKipcbiAqXG4gKiBAcGFyYW0gbmFtZVxuICogQHBhcmFtIHBhcmFtc1xuICogQHJldHVybnMge0hlbHBlcnMubG9hZFRlbXBsYXRlLmNhY2hlfVxuICovXG5mdW5jdGlvbiBsb2FkVGVtcGxhdGUobmFtZSwgcGFyYW1zKSB7XG4gIHJldHVybiBsb2FkVGVtcGxhdGUuY2FjaGVbbmFtZV07XG59O1xuXG4vKipcbiAqXG4gKiBAdHlwZSB7e2ZpeGVkX2Jvb2tfZnJhbWU6IHN0cmluZywgc2luZ2xlX3BhZ2VfZnJhbWU6IHN0cmluZywgc2Nyb2xsZWRfYm9va19mcmFtZTogc3RyaW5nLCByZWZsb3dhYmxlX2Jvb2tfZnJhbWU6IHN0cmluZywgcmVmbG93YWJsZV9ib29rX3BhZ2VfZnJhbWU6IHN0cmluZ319XG4gKi9cbmxvYWRUZW1wbGF0ZS5jYWNoZSA9IHtcbiAgXCJmaXhlZF9ib29rX2ZyYW1lXCI6ICc8ZGl2IGlkPVwiZml4ZWQtYm9vay1mcmFtZVwiIGNsYXNzPVwiY2xlYXJmaXggYm9vay1mcmFtZSBmaXhlZC1ib29rLWZyYW1lXCI+PC9kaXY+JyxcblxuICBcInNpbmdsZV9wYWdlX2ZyYW1lXCI6ICc8ZGl2PjxkaXYgaWQ9XCJzY2FsZXJcIj48aWZyYW1lIHNjcm9sbGluZz1cIm5vXCIgY2xhc3M9XCJpZnJhbWUtZml4ZWRcIj48L2lmcmFtZT48L2Rpdj48L2Rpdj4nLFxuICAvL1wic2luZ2xlX3BhZ2VfZnJhbWVcIiA6ICc8ZGl2PjxpZnJhbWUgc2Nyb2xsaW5nPVwibm9cIiBjbGFzcz1cImlmcmFtZS1maXhlZFwiIGlkPVwic2NhbGVyXCI+PC9pZnJhbWU+PC9kaXY+JyxcblxuICBcInNjcm9sbGVkX2Jvb2tfZnJhbWVcIjogJzxkaXYgaWQ9XCJyZWZsb3dhYmxlLWJvb2stZnJhbWVcIiBjbGFzcz1cImNsZWFyZml4IGJvb2stZnJhbWUgcmVmbG93YWJsZS1ib29rLWZyYW1lXCI+PGRpdiBpZD1cInNjcm9sbGVkLWNvbnRlbnQtZnJhbWVcIj48L2Rpdj48L2Rpdj4nLFxuICBcInJlZmxvd2FibGVfYm9va19mcmFtZVwiOiAnPGRpdiBpZD1cInJlZmxvd2FibGUtYm9vay1mcmFtZVwiIGNsYXNzPVwiY2xlYXJmaXggYm9vay1mcmFtZSByZWZsb3dhYmxlLWJvb2stZnJhbWVcIj48L2Rpdj4nLFxuICBcInJlZmxvd2FibGVfYm9va19wYWdlX2ZyYW1lXCI6ICc8ZGl2IGlkPVwicmVmbG93YWJsZS1jb250ZW50LWZyYW1lXCIgY2xhc3M9XCJyZWZsb3dhYmxlLWNvbnRlbnQtZnJhbWVcIj48aWZyYW1lIHNjcm9sbGluZz1cIm5vXCIgaWQ9XCJlcHViQ29udGVudElmcmFtZVwiPjwvaWZyYW1lPjwvZGl2Pidcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbG9hZFRlbXBsYXRlOyIsIi8qKlxuICpcbiAqIEBwYXJhbSBtYXJnaW5cbiAqIEBwYXJhbSBib3JkZXJcbiAqIEBwYXJhbSBwYWRkaW5nXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFyZ2lucyhtYXJnaW4sIGJvcmRlciwgcGFkZGluZykge1xuXG4gIHRoaXMubWFyZ2luID0gbWFyZ2luO1xuICB0aGlzLmJvcmRlciA9IGJvcmRlcjtcbiAgdGhpcy5wYWRkaW5nID0gcGFkZGluZztcblxuICB0aGlzLmxlZnQgPSB0aGlzLm1hcmdpbi5sZWZ0ICsgdGhpcy5ib3JkZXIubGVmdCArIHRoaXMucGFkZGluZy5sZWZ0O1xuICB0aGlzLnJpZ2h0ID0gdGhpcy5tYXJnaW4ucmlnaHQgKyB0aGlzLmJvcmRlci5yaWdodCArIHRoaXMucGFkZGluZy5yaWdodDtcbiAgdGhpcy50b3AgPSB0aGlzLm1hcmdpbi50b3AgKyB0aGlzLmJvcmRlci50b3AgKyB0aGlzLnBhZGRpbmcudG9wO1xuICB0aGlzLmJvdHRvbSA9IHRoaXMubWFyZ2luLmJvdHRvbSArIHRoaXMuYm9yZGVyLmJvdHRvbSArIHRoaXMucGFkZGluZy5ib3R0b207XG5cbiAgdGhpcy53aWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmxlZnQgKyB0aGlzLnJpZ2h0O1xuICB9O1xuXG4gIHRoaXMuaGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9wICsgdGhpcy5ib3R0b207XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSAkZWxlbWVudFxuICogQHJldHVybnMge0hlbHBlcnMuUmVjdH1cbiAqL1xuTWFyZ2lucy5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uKCRlbGVtZW50KSB7XG4gIHJldHVybiBuZXcgdGhpcygkZWxlbWVudC5tYXJnaW4oKSwgJGVsZW1lbnQuYm9yZGVyKCksICRlbGVtZW50LnBhZGRpbmcoKSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtIZWxwZXJzLlJlY3R9XG4gKi9cbk1hcmdpbnMuZW1wdHkgPSBmdW5jdGlvbigpIHtcblxuICByZXR1cm4gbmV3IHRoaXMoe1xuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogMFxuICB9LCB7XG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAwXG4gIH0sIHtcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IDBcbiAgfSk7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWFyZ2lucyIsIi8qKlxuICpcbiAqIEBwYXJhbSBsZWZ0XG4gKiBAcGFyYW0gdG9wXG4gKiBAcGFyYW0gd2lkdGhcbiAqIEBwYXJhbSBoZWlnaHRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyIGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG5mdW5jdGlvbiBSZWN0KGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCkge1xuXG4gIHRoaXMubGVmdCA9IGxlZnQ7XG4gIHRoaXMudG9wID0gdG9wO1xuICB0aGlzLndpZHRoID0gd2lkdGg7XG4gIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gIHRoaXMucmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5sZWZ0ICsgdGhpcy53aWR0aDtcbiAgfTtcblxuICB0aGlzLmJvdHRvbSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0O1xuICB9O1xuXG4gIHRoaXMuaXNPdmVybGFwID0gZnVuY3Rpb24ocmVjdCwgdG9sZXJhbmNlKSB7XG5cbiAgICBpZiAodG9sZXJhbmNlID09IHVuZGVmaW5lZCkge1xuICAgICAgdG9sZXJhbmNlID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gIShyZWN0LnJpZ2h0KCkgPCB0aGlzLmxlZnQgKyB0b2xlcmFuY2UgfHxcbiAgICAgIHJlY3QubGVmdCA+IHRoaXMucmlnaHQoKSAtIHRvbGVyYW5jZSB8fFxuICAgICAgcmVjdC5ib3R0b20oKSA8IHRoaXMudG9wICsgdG9sZXJhbmNlIHx8XG4gICAgICByZWN0LnRvcCA+IHRoaXMuYm90dG9tKCkgLSB0b2xlcmFuY2UpO1xuICB9XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gJGVsZW1lbnRcbiAqIEByZXR1cm5zIHtIZWxwZXJzLlJlY3R9XG4gKi9cbi8vVGhpcyBtZXRob2QgdHJlYXRzIG11bHRpY29sdW1uIHZpZXcgYXMgb25lIGxvbmcgY29sdW1uIGFuZCBmaW5kcyB0aGUgcmVjdGFuZ2xlIG9mIHRoZSBlbGVtZW50IGluIHRoaXMgXCJsb25nXCIgY29sdW1uXG4vL3dlIGFyZSBub3QgdXNpbmcgalF1ZXJ5IE9mZnNldCgpIGFuZCB3aWR0aCgpL2hlaWdodCgpIGZ1bmN0aW9uIGJlY2F1c2UgZm9yIG11bHRpY29sdW1uIHJlbmRpdGlvbl9sYXlvdXQgaXQgcHJvZHVjZXMgcmVjdGFuZ2xlIGFzIGEgYm91bmRpbmcgYm94IG9mIGVsZW1lbnQgdGhhdFxuLy8gcmVmbG93cyBiZXR3ZWVuIGNvbHVtbnMgdGhpcyBpcyBpbmNvbnN0YW50IGFuZCBkaWZmaWN1bHQgdG8gYW5hbHl6ZSAuXG5SZWN0LmZyb21FbGVtZW50ID0gZnVuY3Rpb24oJGVsZW1lbnQpIHtcblxuICB2YXIgZTtcbiAgaWYgKF8uaXNBcnJheSgkZWxlbWVudCkgfHwgJGVsZW1lbnQgaW5zdGFuY2VvZiBqUXVlcnkpXG4gICAgZSA9ICRlbGVtZW50WzBdO1xuICBlbHNlXG4gICAgZSA9ICRlbGVtZW50O1xuICAvLyBUT0RPRE0gdGhpcyBpcyBzb21ld2hhdCBoYWNreS4gVGV4dCAocmFuZ2U/KSBlbGVtZW50cyBkb24ndCBoYXZlIGEgcG9zaXRpb24gc28gd2UgaGF2ZSB0byBhc2sgdGhlIHBhcmVudC5cbiAgaWYgKGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICBlID0gJGVsZW1lbnQucGFyZW50KClbMF07XG4gIH1cblxuXG4gIHZhciBvZmZzZXRMZWZ0ID0gZS5vZmZzZXRMZWZ0O1xuICB2YXIgb2Zmc2V0VG9wID0gZS5vZmZzZXRUb3A7XG4gIHZhciBvZmZzZXRXaWR0aCA9IGUub2Zmc2V0V2lkdGg7XG4gIHZhciBvZmZzZXRIZWlnaHQgPSBlLm9mZnNldEhlaWdodDtcblxuICB3aGlsZSAoZSA9IGUub2Zmc2V0UGFyZW50KSB7XG4gICAgb2Zmc2V0TGVmdCArPSBlLm9mZnNldExlZnQ7XG4gICAgb2Zmc2V0VG9wICs9IGUub2Zmc2V0VG9wO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWN0KG9mZnNldExlZnQsIG9mZnNldFRvcCwgb2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlY3RcbiIsIi8qKlxuICpcbiAqIEBwYXJhbSBzdHJcbiAqIEBwYXJhbSB0b1JlbW92ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gUmVtb3ZlRnJvbVN0cmluZyhzdHIsIHRvUmVtb3ZlKSB7XG5cbiAgdmFyIHN0YXJ0SXggPSBzdHIuaW5kZXhPZih0b1JlbW92ZSk7XG5cbiAgaWYgKHN0YXJ0SXggPT0gLTEpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMCwgc3RhcnRJeCkgKyBzdHIuc3Vic3RyaW5nKHN0YXJ0SXggKyB0b1JlbW92ZS5sZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZW1vdmVGcm9tU3RyaW5nIiwiLyoqXG4gKlxuICogQHBhcmFtIGNvbnRlbnRSZWZcbiAqIEBwYXJhbSBzb3VyY2VGaWxlSHJlZlxuICogQHJldHVybnMge3N0cmluZ31cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSZXNvbHZlQ29udGVudFJlZihjb250ZW50UmVmLCBzb3VyY2VGaWxlSHJlZikge1xuXG4gIGlmICghc291cmNlRmlsZUhyZWYpIHtcbiAgICByZXR1cm4gY29udGVudFJlZjtcbiAgfVxuXG4gIHZhciBzb3VyY2VQYXJ0cyA9IHNvdXJjZUZpbGVIcmVmLnNwbGl0KFwiL1wiKTtcbiAgc291cmNlUGFydHMucG9wKCk7IC8vcmVtb3ZlIHNvdXJjZSBmaWxlIG5hbWVcblxuICB2YXIgcGF0aENvbXBvbmVudHMgPSBjb250ZW50UmVmLnNwbGl0KFwiL1wiKTtcblxuICB3aGlsZSAoc291cmNlUGFydHMubGVuZ3RoID4gMCAmJiBwYXRoQ29tcG9uZW50c1swXSA9PT0gXCIuLlwiKSB7XG5cbiAgICBzb3VyY2VQYXJ0cy5wb3AoKTtcbiAgICBwYXRoQ29tcG9uZW50cy5zcGxpY2UoMCwgMSk7XG4gIH1cblxuICB2YXIgY29tYmluZWQgPSBzb3VyY2VQYXJ0cy5jb25jYXQocGF0aENvbXBvbmVudHMpO1xuXG4gIHJldHVybiBjb21iaW5lZC5qb2luKFwiL1wiKTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXNvbHZlQ29udGVudFJlZlxuIiwiLyoqXG4gKlxuICogQHBhcmFtIHN0eWxlc1xuICogQHBhcmFtICRlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhzdHlsZXMsICRlbGVtZW50KSB7XG5cbiAgdmFyIGNvdW50ID0gc3R5bGVzLmxlbmd0aDtcblxuICBpZiAoIWNvdW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgdmFyIHN0eWxlID0gc3R5bGVzW2ldO1xuICAgIGlmIChzdHlsZS5zZWxlY3Rvcikge1xuICAgICAgJChzdHlsZS5zZWxlY3RvciwgJGVsZW1lbnQpLmNzcyhzdHlsZS5kZWNsYXJhdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWxlbWVudC5jc3Moc3R5bGUuZGVjbGFyYXRpb25zKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRTdHlsZXMiLCIvKipcbiAqXG4gKiBAcGFyYW0gJGlmcmFtZVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyTGF5b3V0KCRpZnJhbWUpIHtcblxuICB2YXIgZG9jID0gJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQ7XG5cbiAgaWYgKCFkb2MpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc3MgPSB1bmRlZmluZWQ7XG4gIHRyeSB7XG4gICAgc3MgPSBkb2Muc3R5bGVTaGVldHMgJiYgZG9jLnN0eWxlU2hlZXRzLmxlbmd0aCA/IGRvYy5zdHlsZVNoZWV0c1swXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoIXNzKSB7XG4gICAgICB2YXIgc3R5bGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICAgICAgc3MgPSBzdHlsZS5zaGVldDtcbiAgICB9XG5cbiAgICBpZiAoc3MpXG4gICAgICBzcy5pbnNlcnRSdWxlKCdib2R5OmZpcnN0LWNoaWxkOjpiZWZvcmUge2NvbnRlbnQ6XFwnUkVBRElVTVxcJztjb2xvcjogcmVkO2ZvbnQtd2VpZ2h0OiBib2xkO30nLCBzcy5jc3NSdWxlcy5sZW5ndGgpO1xuICB9IGNhdGNoIChleCkge1xuICAgIGNvbnNvbGUuZXJyb3IoZXgpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB2YXIgZWwgPSBkb2MuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLCBcInN0eWxlXCIpO1xuICAgIGVsLmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZShcIip7fVwiKSk7XG4gICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIGRvYy5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcblxuICAgIGlmIChzcylcbiAgICAgIHNzLmRlbGV0ZVJ1bGUoc3MuY3NzUnVsZXMubGVuZ3RoIC0gMSk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgY29uc29sZS5lcnJvcihleCk7XG4gIH1cblxuICBpZiAoZG9jLmJvZHkpIHtcbiAgICB2YXIgdmFsID0gZG9jLmJvZHkub2Zmc2V0VG9wOyAvLyB0cmlnZ2VycyBsYXlvdXRcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRyaWdnZXJMYXlvdXQiLCJ2YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG5yZXF1aXJlKCcuLi8uLi8uLi9saWIvanF1ZXJ5LXNpemVzJylcblxuZnVuY3Rpb24gVXBkYXRlSHRtbEZvbnRTaXplKCRlcHViSHRtbCwgZm9udFNpemUpIHtcbiAgdmFyIGZhY3RvciA9IGZvbnRTaXplIC8gMTAwO1xuICB2YXIgd2luID0gJGVwdWJIdG1sWzBdLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciAkdGV4dGJsb2NrcyA9ICQoJ3AsIGRpdiwgc3BhbiwgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgbGksIGJsb2NrcXVvdGUsIHRkLCBwcmUnLCAkZXB1Ykh0bWwpO1xuICB2YXIgb3JpZ2luYWxMaW5lSGVpZ2h0O1xuXG5cbiAgLy8gbmVlZCB0byBkbyB0d28gcGFzc2VzIGJlY2F1c2UgaXQgaXMgcG9zc2libGUgdG8gaGF2ZSBuZXN0ZWQgdGV4dCBibG9ja3MuIFxuICAvLyBJZiB5b3UgY2hhbmdlIHRoZSBmb250IHNpemUgb2YgdGhlIHBhcmVudCB0aGlzIHdpbGwgdGhlbiBjcmVhdGUgYW4gaW5hY2N1cmF0ZVxuICAvLyBmb250IHNpemUgZm9yIGFueSBjaGlsZHJlbi4gXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgJHRleHRibG9ja3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxlID0gJHRleHRibG9ja3NbaV0sXG4gICAgICBmb250U2l6ZUF0dHIgPSBlbGUuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLWZvbnQtc2l6ZScpO1xuXG4gICAgaWYgKCFmb250U2l6ZUF0dHIpIHtcbiAgICAgIHZhciBzdHlsZSA9IHdpbi5nZXRDb21wdXRlZFN0eWxlKGVsZSk7XG4gICAgICB2YXIgb3JpZ2luYWxGb250U2l6ZSA9IHBhcnNlSW50KHN0eWxlLmZvbnRTaXplKTtcbiAgICAgIG9yaWdpbmFsTGluZUhlaWdodCA9IHBhcnNlSW50KHN0eWxlLmxpbmVIZWlnaHQpO1xuXG4gICAgICBlbGUuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLWZvbnQtc2l6ZScsIG9yaWdpbmFsRm9udFNpemUpO1xuICAgICAgLy8gZ2V0Q29tcHV0ZWRTdHlsZSB3aWxsIG5vdCBjYWxjdWxhdGUgdGhlIGxpbmUtaGVpZ2h0IGlmIHRoZSB2YWx1ZSBpcyAnbm9ybWFsJy4gSW4gdGhpcyBjYXNlIHBhcnNlSW50IHdpbGwgcmV0dXJuIE5hTlxuICAgICAgaWYgKG9yaWdpbmFsTGluZUhlaWdodCkge1xuICAgICAgICBlbGUuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLWxpbmUtaGVpZ2h0Jywgb3JpZ2luYWxMaW5lSGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyByZXNldCB2YXJpYWJsZSBzbyB0aGUgYmVsb3cgbG9naWMgd29ya3MuIEFsbCB2YXJpYWJsZXMgaW4gSlMgYXJlIGZ1bmN0aW9uIHNjb3BlZC4gXG4gIG9yaWdpbmFsTGluZUhlaWdodCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgJHRleHRibG9ja3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxlID0gJHRleHRibG9ja3NbaV0sXG4gICAgICBmb250U2l6ZUF0dHIgPSBlbGUuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLWZvbnQtc2l6ZScpLFxuICAgICAgbGluZUhlaWdodEF0dHIgPSBlbGUuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLWxpbmUtaGVpZ2h0JyksXG4gICAgICBvcmlnaW5hbEZvbnRTaXplID0gTnVtYmVyKGZvbnRTaXplQXR0cik7XG5cbiAgICBpZiAobGluZUhlaWdodEF0dHIpIHtcbiAgICAgIG9yaWdpbmFsTGluZUhlaWdodCA9IE51bWJlcihsaW5lSGVpZ2h0QXR0cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yaWdpbmFsTGluZUhlaWdodCA9IDA7XG4gICAgfVxuXG4gICAgZWxlLnN0eWxlLmZvbnRTaXplID0gKG9yaWdpbmFsRm9udFNpemUgKiBmYWN0b3IpICsgJ3B4JztcbiAgICBpZiAob3JpZ2luYWxMaW5lSGVpZ2h0KSB7XG4gICAgICBlbGUuc3R5bGUubGluZUhlaWdodCA9IChvcmlnaW5hbExpbmVIZWlnaHQgKiBmYWN0b3IpICsgJ3B4JztcbiAgICB9XG5cbiAgfVxuICAkZXB1Ykh0bWwuY3NzKFwiZm9udC1zaXplXCIsIGZvbnRTaXplICsgXCIlXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFVwZGF0ZUh0bWxGb250U2l6ZSIsInZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKTtcblxudmFyIFJlYWRpdW1TREsgPSB7XG4gIFZpZXdzOiByZXF1aXJlKCcuL3ZpZXdzJyksXG4gIEV2ZW50czogcmVxdWlyZSgnLi9ldmVudHMnKSxcbiAgUGFyc2VyOiByZXF1aXJlKCcuLi8uLi9saWIvZXB1YmpzL3BhcnNlcicpLFxuICB2ZXJzaW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJzAuOC4wJztcbiAgfVxufTtcblxucmVxdWlyZSgnLi9uYXZpZ2F0b3Itc2hpbScpO1xuXG5fLmV4dGVuZChSZWFkaXVtU0RLLCBCYWNrYm9uZS5FdmVudHMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRpdW1TREs7XG4iLCIgICAgLyoqXG4gICAgICogSW50ZXJuYWwgRXZlbnRzXG4gICAgICpcbiAgICAgKiBAZGVzYyBTaG91bGQgbm90IGJlIHRyaWdnZXJlZCBvdXRzaWRlIG9mIHtAbGluayBSZWFkaXVtU0RLLlZpZXdzLlJlYWRlclZpZXd9LlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKi9cblxuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBAZXZlbnRcbiAgICAgICAqL1xuICAgICAgQ1VSUkVOVF9WSUVXX1BBR0lOQVRJT05fQ0hBTkdFRDogXCJDdXJyZW50Vmlld1BhZ2luYXRpb25DaGFuZ2VkXCIsXG4gICAgfSIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuXG4vKipcbiAqIEBjbGFzcyBSZWFkaXVtU0RLLk1vZGVscy5Cb29rbWFya0RhdGFcbiAqL1xuZnVuY3Rpb24gQm9va21hcmtEYXRhKGlkcmVmLCBjb250ZW50Q0ZJKSB7XG5cbiAgLyoqXG4gICAqIHNwaW5lIGl0ZW0gaWRyZWZcbiAgICogQHByb3BlcnR5IGlkcmVmXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmlkcmVmID0gaWRyZWY7XG5cbiAgLyoqXG4gICAqIGNmaSBvZiB0aGUgZmlyc3QgdmlzaWJsZSBlbGVtZW50XG4gICAqIEBwcm9wZXJ0eSBjb250ZW50Q0ZJXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmNvbnRlbnRDRkkgPSBjb250ZW50Q0ZJO1xuXG4gIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQm9va21hcmtEYXRhIiwiLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG4vKipcbiAqIFVzZWQgdG8gcmVwb3J0IHBhZ2luYXRpb24gc3RhdGUgYmFjayB0byB0aGUgaG9zdCBhcHBsaWNhdGlvblxuICpcbiAqIEBjbGFzcyBSZWFkaXVtU0RLLk1vZGVscy5DdXJyZW50UGFnZXNJbmZvXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkaXVtU0RLLk1vZGVscy5TcGluZX0gc3BpbmVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNGaXhlZExheW91dCBpcyBmaXhlZCBvciByZWZsb3dhYmxlIHNwaW5lIGl0ZW1cbiAqL1xuXG5mdW5jdGlvbiBDdXJyZW50UGFnZXNJbmZvKHNwaW5lLCBpc0ZpeGVkTGF5b3V0KSB7XG5cblxuICB0aGlzLmlzUmlnaHRUb0xlZnQgPSBzcGluZS5pc1JpZ2h0VG9MZWZ0KCk7XG4gIHRoaXMuaXNGaXhlZExheW91dCA9IGlzRml4ZWRMYXlvdXQ7XG4gIHRoaXMuc3BpbmVJdGVtQ291bnQgPSBzcGluZS5pdGVtcy5sZW5ndGhcbiAgdGhpcy5vcGVuUGFnZXMgPSBbXTtcblxuICB0aGlzLmFkZE9wZW5QYWdlID0gZnVuY3Rpb24oc3BpbmVJdGVtUGFnZUluZGV4LCBzcGluZUl0ZW1QYWdlQ291bnQsIGlkcmVmLCBzcGluZUl0ZW1JbmRleCkge1xuICAgIHRoaXMub3BlblBhZ2VzLnB1c2goe1xuICAgICAgc3BpbmVJdGVtUGFnZUluZGV4OiBzcGluZUl0ZW1QYWdlSW5kZXgsXG4gICAgICBzcGluZUl0ZW1QYWdlQ291bnQ6IHNwaW5lSXRlbVBhZ2VDb3VudCxcbiAgICAgIGlkcmVmOiBpZHJlZixcbiAgICAgIHNwaW5lSXRlbUluZGV4OiBzcGluZUl0ZW1JbmRleFxuICAgIH0pO1xuXG4gICAgdGhpcy5zb3J0KCk7XG4gIH07XG5cbiAgdGhpcy5jYW5Hb0xlZnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1JpZ2h0VG9MZWZ0ID8gdGhpcy5jYW5Hb05leHQoKSA6IHRoaXMuY2FuR29QcmV2KCk7XG4gIH07XG5cbiAgdGhpcy5jYW5Hb1JpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNSaWdodFRvTGVmdCA/IHRoaXMuY2FuR29QcmV2KCkgOiB0aGlzLmNhbkdvTmV4dCgpO1xuICB9O1xuXG4gIHRoaXMuY2FuR29OZXh0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAodGhpcy5vcGVuUGFnZXMubGVuZ3RoID09IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbGFzdE9wZW5QYWdlID0gdGhpcy5vcGVuUGFnZXNbdGhpcy5vcGVuUGFnZXMubGVuZ3RoIC0gMV07XG5cbiAgICAvLyBUT0RPOiBoYW5kbGluZyBvZiBub24tbGluZWFyIHNwaW5lIGl0ZW1zIChcImFuY2lsbGFyeVwiIGRvY3VtZW50cyksIGFsbG93aW5nIHBhZ2UgdHVybiB3aXRoaW4gdGhlIHJlZmxvd2FibGUgWEhUTUwsIGJ1dCBwcmV2ZW50aW5nIHByZXZpb3VzL25leHQgYWNjZXNzIHRvIHNpYmxpbmcgc3BpbmUgaXRlbXMuIEFsc28gbmVlZHMgXCJnbyBiYWNrXCIgZmVhdHVyZSB0byBuYXZpZ2F0ZSB0byBzb3VyY2UgaHlwZXJsaW5rIGxvY2F0aW9uIHRoYXQgbGVkIHRvIHRoZSBub24tbGluZWFyIGRvY3VtZW50LlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhZGl1bS9yZWFkaXVtLXNoYXJlZC1qcy9pc3N1ZXMvMjZcblxuICAgIC8vIFJlbW92ZWQsIG5lZWRzIHRvIGJlIGltcGxlbWVudGVkIHByb3Blcmx5IGFzIHBlciBhYm92ZS5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWRpdW0vcmVhZGl1bS1zaGFyZWQtanMvaXNzdWVzLzEwOFxuICAgIC8vIGlmKCFzcGluZS5pc1ZhbGlkTGluZWFySXRlbShsYXN0T3BlblBhZ2Uuc3BpbmVJdGVtSW5kZXgpKVxuICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gbGFzdE9wZW5QYWdlLnNwaW5lSXRlbUluZGV4IDwgc3BpbmUubGFzdCgpLmluZGV4IHx8IGxhc3RPcGVuUGFnZS5zcGluZUl0ZW1QYWdlSW5kZXggPCBsYXN0T3BlblBhZ2Uuc3BpbmVJdGVtUGFnZUNvdW50IC0gMTtcbiAgfTtcblxuICB0aGlzLmNhbkdvUHJldiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKHRoaXMub3BlblBhZ2VzLmxlbmd0aCA9PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGZpcnN0T3BlblBhZ2UgPSB0aGlzLm9wZW5QYWdlc1swXTtcblxuICAgIC8vIFRPRE86IGhhbmRsaW5nIG9mIG5vbi1saW5lYXIgc3BpbmUgaXRlbXMgKFwiYW5jaWxsYXJ5XCIgZG9jdW1lbnRzKSwgYWxsb3dpbmcgcGFnZSB0dXJuIHdpdGhpbiB0aGUgcmVmbG93YWJsZSBYSFRNTCwgYnV0IHByZXZlbnRpbmcgcHJldmlvdXMvbmV4dCBhY2Nlc3MgdG8gc2libGluZyBzcGluZSBpdGVtcy4gQWxzbyBuZWVkcyBcImdvIGJhY2tcIiBmZWF0dXJlIHRvIG5hdmlnYXRlIHRvIHNvdXJjZSBoeXBlcmxpbmsgbG9jYXRpb24gdGhhdCBsZWQgdG8gdGhlIG5vbi1saW5lYXIgZG9jdW1lbnQuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFkaXVtL3JlYWRpdW0tc2hhcmVkLWpzL2lzc3Vlcy8yNlxuXG4gICAgLy8gUmVtb3ZlZCwgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWQgcHJvcGVybHkgYXMgcGVyIGFib3ZlLlxuICAgIC8vIC8vaHR0cHM6Ly9naXRodWIuY29tL3JlYWRpdW0vcmVhZGl1bS1zaGFyZWQtanMvaXNzdWVzLzEwOFxuICAgIC8vIGlmKCFzcGluZS5pc1ZhbGlkTGluZWFySXRlbShmaXJzdE9wZW5QYWdlLnNwaW5lSXRlbUluZGV4KSlcbiAgICAvLyAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHNwaW5lLmZpcnN0KCkuaW5kZXggPCBmaXJzdE9wZW5QYWdlLnNwaW5lSXRlbUluZGV4IHx8IDAgPCBmaXJzdE9wZW5QYWdlLnNwaW5lSXRlbVBhZ2VJbmRleDtcbiAgfTtcblxuICB0aGlzLnNvcnQgPSBmdW5jdGlvbigpIHtcblxuICAgIHRoaXMub3BlblBhZ2VzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXG4gICAgICBpZiAoYS5zcGluZUl0ZW1JbmRleCAhPSBiLnNwaW5lSXRlbUluZGV4KSB7XG4gICAgICAgIHJldHVybiBhLnNwaW5lSXRlbUluZGV4IC0gYi5zcGluZUl0ZW1JbmRleDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGEucGFnZUluZGV4IC0gYi5wYWdlSW5kZXg7XG5cbiAgICB9KTtcblxuICB9O1xuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3VycmVudFBhZ2VzSW5mbyIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vIE1vZGlmaWVkIGJ5IERhbmllbCBXZWNrXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbi8qKlxuICpcbiAqIEBwYXJhbSBwYWNrYWdlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG52YXIgU21pbE1vZGVsID0gcmVxdWlyZSgnLi9zbWlsLW1vZGVsJylcblxudmFyIE1lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKHBhY2thZ2UpIHtcblxuICB0aGlzLnBhY2thZ2UgPSBwYWNrYWdlO1xuXG5cbiAgdGhpcy5wYXJhbGxlbEF0ID0gZnVuY3Rpb24odGltZU1pbGxpc2Vjb25kcykge1xuICAgIHZhciBvZmZzZXQgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNtaWxfbW9kZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc21pbERhdGEgPSB0aGlzLnNtaWxfbW9kZWxzW2ldO1xuXG4gICAgICB2YXIgdGltZUFkanVzdGVkID0gdGltZU1pbGxpc2Vjb25kcyAtIG9mZnNldDtcblxuICAgICAgdmFyIHBhcmEgPSBzbWlsRGF0YS5wYXJhbGxlbEF0KHRpbWVBZGp1c3RlZCk7XG4gICAgICBpZiAocGFyYSkge1xuICAgICAgICByZXR1cm4gcGFyYTtcbiAgICAgIH1cblxuICAgICAgb2Zmc2V0ICs9IHNtaWxEYXRhLmR1cmF0aW9uTWlsbGlzZWNvbmRzX0NhbGN1bGF0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHRoaXMucGVyY2VudFRvUG9zaXRpb24gPSBmdW5jdGlvbihwZXJjZW50LCBzbWlsRGF0YSwgcGFyLCBtaWxsaXNlY29uZHMpIHtcbiAgICBpZiAocGVyY2VudCA8IDAuMCB8fCBwZXJjZW50ID4gMTAwLjApIHtcbiAgICAgIHBlcmNlbnQgPSAwLjA7XG4gICAgfVxuXG4gICAgdmFyIHRvdGFsID0gdGhpcy5kdXJhdGlvbk1pbGxpc2Vjb25kc19DYWxjdWxhdGVkKCk7XG5cbiAgICB2YXIgdGltZU1zID0gdG90YWwgKiAocGVyY2VudCAvIDEwMC4wKTtcblxuICAgIHBhci5wYXIgPSB0aGlzLnBhcmFsbGVsQXQodGltZU1zKTtcbiAgICBpZiAoIXBhci5wYXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc21pbERhdGFQYXIgPSBwYXIucGFyLmdldFNtaWwoKTtcbiAgICBpZiAoIXNtaWxEYXRhUGFyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNtaWxEYXRhT2Zmc2V0ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zbWlsX21vZGVscy5sZW5ndGg7IGkrKykge1xuICAgICAgc21pbERhdGEuc21pbERhdGEgPSB0aGlzLnNtaWxfbW9kZWxzW2ldO1xuICAgICAgaWYgKHNtaWxEYXRhLnNtaWxEYXRhID09IHNtaWxEYXRhUGFyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc21pbERhdGFPZmZzZXQgKz0gc21pbERhdGEuc21pbERhdGEuZHVyYXRpb25NaWxsaXNlY29uZHNfQ2FsY3VsYXRlZCgpO1xuICAgIH1cblxuICAgIG1pbGxpc2Vjb25kcy5taWxsaXNlY29uZHMgPSB0aW1lTXMgLSAoc21pbERhdGFPZmZzZXQgKyBzbWlsRGF0YS5zbWlsRGF0YS5jbGlwT2Zmc2V0KHBhci5wYXIpKTtcbiAgfTtcblxuICB0aGlzLmR1cmF0aW9uTWlsbGlzZWNvbmRzX0NhbGN1bGF0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNtaWxfbW9kZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc21pbERhdGEgPSB0aGlzLnNtaWxfbW9kZWxzW2ldO1xuXG4gICAgICB0b3RhbCArPSBzbWlsRGF0YS5kdXJhdGlvbk1pbGxpc2Vjb25kc19DYWxjdWxhdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvdGFsO1xuICB9O1xuXG4gIHRoaXMuc21pbEF0ID0gZnVuY3Rpb24oc21pbEluZGV4KSB7XG4gICAgaWYgKHNtaWxJbmRleCA8IDAgfHwgc21pbEluZGV4ID49IHRoaXMuc21pbF9tb2RlbHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNtaWxfbW9kZWxzW3NtaWxJbmRleF07XG4gIH1cblxuICB0aGlzLnBvc2l0aW9uVG9QZXJjZW50ID0gZnVuY3Rpb24oc21pbEluZGV4LCBwYXJJbmRleCwgbWlsbGlzZWNvbmRzKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCI+Pj4+Pj4+Pj4+XCIpO1xuICAgIC8vIGNvbnNvbGUubG9nKG1pbGxpc2Vjb25kcyk7XG4gICAgLy8gY29uc29sZS5sb2coc21pbEluZGV4KTtcbiAgICAvLyBjb25zb2xlLmxvZyhwYXJJbmRleCk7XG4gICAgLy8gY29uc29sZS5sb2coXCItLS0tLS0tXCIpO1xuXG4gICAgaWYgKHNtaWxJbmRleCA+PSB0aGlzLnNtaWxfbW9kZWxzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIC0xLjA7XG4gICAgfVxuXG4gICAgdmFyIHNtaWxEYXRhT2Zmc2V0ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNtaWxJbmRleDsgaSsrKSB7XG4gICAgICB2YXIgc2QgPSB0aGlzLnNtaWxfbW9kZWxzW2ldO1xuICAgICAgc21pbERhdGFPZmZzZXQgKz0gc2QuZHVyYXRpb25NaWxsaXNlY29uZHNfQ2FsY3VsYXRlZCgpO1xuICAgIH1cblxuICAgIC8vY29uc29sZS5sb2coc21pbERhdGFPZmZzZXQpO1xuXG4gICAgdmFyIHNtaWxEYXRhID0gdGhpcy5zbWlsX21vZGVsc1tzbWlsSW5kZXhdO1xuXG4gICAgdmFyIHBhciA9IHNtaWxEYXRhLm50aFBhcmFsbGVsKHBhckluZGV4KTtcbiAgICBpZiAoIXBhcikge1xuICAgICAgcmV0dXJuIC0xLjA7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldCA9IHNtaWxEYXRhT2Zmc2V0ICsgc21pbERhdGEuY2xpcE9mZnNldChwYXIpICsgbWlsbGlzZWNvbmRzO1xuXG4gICAgLy9jb25zb2xlLmxvZyhvZmZzZXQpO1xuXG4gICAgdmFyIHRvdGFsID0gdGhpcy5kdXJhdGlvbk1pbGxpc2Vjb25kc19DYWxjdWxhdGVkKCk7XG5cbiAgICAvLy9jb25zb2xlLmxvZyh0b3RhbCk7XG5cbiAgICB2YXIgcGVyY2VudCA9IChvZmZzZXQgLyB0b3RhbCkgKiAxMDA7XG5cbiAgICAvL2NvbnNvbGUubG9nKFwiPDw8PDw8PDw8PDwgXCIgKyBwZXJjZW50KTtcblxuICAgIHJldHVybiBwZXJjZW50O1xuICB9O1xuXG4gIHRoaXMuc21pbF9tb2RlbHMgPSBbXTtcblxuICB0aGlzLnNraXBwYWJsZXMgPSBbXTtcbiAgdGhpcy5lc2NhcGFibGVzID0gW107XG5cbiAgdGhpcy5kdXJhdGlvbiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5uYXJyYXRvciA9IHVuZGVmaW5lZDtcblxuXG4gIHRoaXMuYWN0aXZlQ2xhc3MgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGxheWJhY2tBY3RpdmVDbGFzcyA9IHVuZGVmaW5lZDtcblxuICB0aGlzLkRFQlVHID0gZmFsc2U7XG5cblxuICB0aGlzLmdldFNtaWxCeVNwaW5lSXRlbSA9IGZ1bmN0aW9uKHNwaW5lSXRlbSkge1xuICAgIGlmICghc3BpbmVJdGVtKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gdGhpcy5zbWlsX21vZGVscy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICB2YXIgc21pbCA9IHRoaXMuc21pbF9tb2RlbHNbaV07XG4gICAgICBpZiAoc21pbC5zcGluZUl0ZW1JZCA9PT0gc3BpbmVJdGVtLmlkcmVmKSB7XG4gICAgICAgIGlmIChzcGluZUl0ZW0ubWVkaWFfb3ZlcmxheV9pZCAhPT0gc21pbC5pZCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJTTUlMIElOQ09SUkVDVCBJRD8/IFwiICsgc3BpbmVJdGVtLm1lZGlhX292ZXJsYXlfaWQgKyBcIiAvLy8gXCIgKyBzbWlsLmlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc21pbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIC8qXG4gIHRoaXMuZ2V0U21pbEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcblxuICAgICAgZm9yKHZhciBpID0gMCwgY291bnQgPSB0aGlzLnNtaWxfbW9kZWxzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcblxuICAgICAgICAgIHZhciBzbWlsID0gdGhpcy5zbWlsX21vZGVsc1tpXTtcbiAgICAgICAgICBpZihzbWlsLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICByZXR1cm4gc21pbDtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG4gICovXG5cbiAgdGhpcy5nZXROZXh0U21pbCA9IGZ1bmN0aW9uKHNtaWwpIHtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuc21pbF9tb2RlbHMuaW5kZXhPZihzbWlsKTtcbiAgICBpZiAoaW5kZXggPT0gLTEgfHwgaW5kZXggPT0gdGhpcy5zbWlsX21vZGVscy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNtaWxfbW9kZWxzW2luZGV4ICsgMV07XG4gIH1cblxuICB0aGlzLmdldFByZXZpb3VzU21pbCA9IGZ1bmN0aW9uKHNtaWwpIHtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuc21pbF9tb2RlbHMuaW5kZXhPZihzbWlsKTtcbiAgICBpZiAoaW5kZXggPT0gLTEgfHwgaW5kZXggPT0gMCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zbWlsX21vZGVsc1tpbmRleCAtIDFdO1xuICB9XG59O1xuXG5NZWRpYU92ZXJsYXkuZnJvbURUTyA9IGZ1bmN0aW9uKG1vRFRPLCBwYWNrYWdlKSB7XG5cbiAgdmFyIG1vID0gbmV3IE1lZGlhT3ZlcmxheShwYWNrYWdlKTtcbm1vLkRFQlVHID0gdHJ1ZTtcbiAgaWYgKCFtb0RUTykge1xuICAgIGNvbnNvbGUuZGVidWcoXCJObyBNZWRpYSBPdmVybGF5LlwiKTtcbiAgICByZXR1cm4gbW87XG4gIH1cblxuICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBJTklULi4uXCIsIG1vRFRPLCBwYWNrYWdlKTtcblxuICBpZiAobW8uREVCVUcpXG4gICAgY29uc29sZS5kZWJ1ZyhKU09OLnN0cmluZ2lmeShtb0RUTykpO1xuXG4gIG1vLmR1cmF0aW9uID0gbW9EVE8uZHVyYXRpb247XG4gIGlmIChtby5kdXJhdGlvbiAmJiBtby5kdXJhdGlvbi5sZW5ndGggJiYgbW8uZHVyYXRpb24ubGVuZ3RoID4gMCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJTTUlMIHRvdGFsIGR1cmF0aW9uIGlzIHN0cmluZywgcGFyc2luZyBmbG9hdC4uLiAoXCIgKyBtby5kdXJhdGlvbiArIFwiKVwiKTtcbiAgICBtby5kdXJhdGlvbiA9IHBhcnNlRmxvYXQobW8uZHVyYXRpb24pO1xuICB9XG4gIGlmIChtby5ERUJVRylcbiAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBEdXJhdGlvbiAoVE9UQUwpOiBcIiArIG1vLmR1cmF0aW9uKTtcblxuICBtby5uYXJyYXRvciA9IG1vRFRPLm5hcnJhdG9yO1xuICBpZiAobW8uREVCVUcpXG4gICAgY29uc29sZS5kZWJ1ZyhcIk1lZGlhIE92ZXJsYXkgTmFycmF0b3I6IFwiICsgbW8ubmFycmF0b3IpO1xuXG4gIG1vLmFjdGl2ZUNsYXNzID0gbW9EVE8uYWN0aXZlQ2xhc3M7XG4gIGlmIChtby5ERUJVRylcbiAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBBY3RpdmUtQ2xhc3M6IFwiICsgbW8uYWN0aXZlQ2xhc3MpO1xuXG4gIG1vLnBsYXliYWNrQWN0aXZlQ2xhc3MgPSBtb0RUTy5wbGF5YmFja0FjdGl2ZUNsYXNzO1xuICBpZiAobW8uREVCVUcpXG4gICAgY29uc29sZS5kZWJ1ZyhcIk1lZGlhIE92ZXJsYXkgUGxheWJhY2stQWN0aXZlLUNsYXNzOiBcIiArIG1vLnBsYXliYWNrQWN0aXZlQ2xhc3MpO1xuXG4gIHZhciBjb3VudCA9IG1vRFRPLnNtaWxfbW9kZWxzLmxlbmd0aDtcbiAgaWYgKG1vLkRFQlVHKVxuICAgIGNvbnNvbGUuZGVidWcoXCJNZWRpYSBPdmVybGF5IFNNSUwgY291bnQ6IFwiICsgY291bnQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIHZhciBzbWlsTW9kZWwgPSBTbWlsTW9kZWwuZnJvbVNtaWxEVE8obW9EVE8uc21pbF9tb2RlbHNbaV0sIG1vKTtcbiAgICBtby5zbWlsX21vZGVscy5wdXNoKHNtaWxNb2RlbCk7XG5cbiAgICBpZiAobW8uREVCVUcpXG4gICAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBEdXJhdGlvbiAoU1BJTkUgSVRFTSk6IFwiICsgc21pbE1vZGVsLmR1cmF0aW9uKTtcbiAgfVxuXG4gIGNvdW50ID0gbW9EVE8uc2tpcHBhYmxlcy5sZW5ndGg7XG4gIGlmIChtby5ERUJVRylcbiAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBTS0lQUEFCTEVTIGNvdW50OiBcIiArIGNvdW50KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICBtby5za2lwcGFibGVzLnB1c2gobW9EVE8uc2tpcHBhYmxlc1tpXSk7XG5cbiAgICAvL2lmIChtby5ERUJVRylcbiAgICAvLyAgICBjb25zb2xlLmRlYnVnKFwiTWVkaWEgT3ZlcmxheSBTS0lQUEFCTEU6IFwiICsgbW8uc2tpcHBhYmxlc1tpXSk7XG4gIH1cblxuICBjb3VudCA9IG1vRFRPLmVzY2FwYWJsZXMubGVuZ3RoO1xuICBpZiAobW8uREVCVUcpXG4gICAgY29uc29sZS5kZWJ1ZyhcIk1lZGlhIE92ZXJsYXkgRVNDQVBBQkxFUyBjb3VudDogXCIgKyBjb3VudCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgbW8uZXNjYXBhYmxlcy5wdXNoKG1vRFRPLmVzY2FwYWJsZXNbaV0pO1xuXG4gICAgLy9pZiAobW8uREVCVUcpXG4gICAgLy8gICAgY29uc29sZS5kZWJ1ZyhcIk1lZGlhIE92ZXJsYXkgRVNDQVBBQkxFOiBcIiArIG1vLmVzY2FwYWJsZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIG1vO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZWRpYU92ZXJsYXlcbiIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyIEhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzJylcbnZhciBNZWRpYU92ZXJsYXkgPSByZXF1aXJlKCcuL21lZGlhLW92ZXJsYXknKVxudmFyIFNwaW5lID0gcmVxdWlyZSgnLi9zcGluZScpXG52YXIgU3BpbmVJdGVtQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9zcGluZS1pdGVtLWNvbnN0YW50cycpXG5cbi8qKlxuICpcbiAqIEBjbGFzcyBSZWFkaXVtU0RLLk1vZGVscy5QYWNrYWdlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG52YXIgUGFja2FnZSA9IGZ1bmN0aW9uKHBhY2thZ2VEYXRhKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuc3BpbmUgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5yb290VXJsID0gdW5kZWZpbmVkO1xuICB0aGlzLnJvb3RVcmxNTyA9IHVuZGVmaW5lZDtcblxuICB0aGlzLm1lZGlhX292ZXJsYXkgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5yZW5kaXRpb25fdmlld3BvcnQgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5yZW5kaXRpb25fZmxvdyA9IHVuZGVmaW5lZDtcblxuICB0aGlzLnJlbmRpdGlvbl9sYXlvdXQgPSB1bmRlZmluZWQ7XG5cbiAgLy9UT0RPOiB1bnVzZWQgeWV0IVxuICB0aGlzLnJlbmRpdGlvbl9zcHJlYWQgPSB1bmRlZmluZWQ7XG5cbiAgLy9UT0RPOiB1bnVzZWQgeWV0IVxuICB0aGlzLnJlbmRpdGlvbl9vcmllbnRhdGlvbiA9IHVuZGVmaW5lZDtcblxuICB0aGlzLnJlc29sdmVSZWxhdGl2ZVVybE1PID0gZnVuY3Rpb24ocmVsYXRpdmVVcmwpIHtcblxuICAgIGlmIChzZWxmLnJvb3RVcmxNTyAmJiBzZWxmLnJvb3RVcmxNTy5sZW5ndGggPiAwKSB7XG5cbiAgICAgIGlmIChIZWxwZXJzLkVuZHNXaXRoKHNlbGYucm9vdFVybE1PLCBcIi9cIikpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYucm9vdFVybE1PICsgcmVsYXRpdmVVcmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VsZi5yb290VXJsTU8gKyBcIi9cIiArIHJlbGF0aXZlVXJsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWxmLnJlc29sdmVSZWxhdGl2ZVVybChyZWxhdGl2ZVVybCk7XG4gIH07XG5cbiAgdGhpcy5yZXNvbHZlUmVsYXRpdmVVcmwgPSBmdW5jdGlvbihyZWxhdGl2ZVVybCkge1xuXG4gICAgaWYgKHNlbGYucm9vdFVybCkge1xuXG4gICAgICBpZiAoSGVscGVycy5FbmRzV2l0aChzZWxmLnJvb3RVcmwsIFwiL1wiKSkge1xuICAgICAgICByZXR1cm4gc2VsZi5yb290VXJsICsgcmVsYXRpdmVVcmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VsZi5yb290VXJsICsgXCIvXCIgKyByZWxhdGl2ZVVybDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVsYXRpdmVVcmw7XG4gIH07XG5cbiAgdGhpcy5pc0ZpeGVkTGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYucmVuZGl0aW9uX2xheW91dCA9PT0gU3BpbmVJdGVtQ29uc3RhbnRzLlJFTkRJVElPTl9MQVlPVVRfUFJFUEFHSU5BVEVEO1xuICB9O1xuXG4gIHRoaXMuaXNSZWZsb3dhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICFzZWxmLmlzRml4ZWRMYXlvdXQoKTtcbiAgfTtcblxuXG4gIGlmIChwYWNrYWdlRGF0YSkge1xuXG4gICAgdGhpcy5yb290VXJsID0gcGFja2FnZURhdGEucm9vdFVybDtcbiAgICB0aGlzLnJvb3RVcmxNTyA9IHBhY2thZ2VEYXRhLnJvb3RVcmxNTztcblxuICAgIHRoaXMucmVuZGl0aW9uX3ZpZXdwb3J0ID0gcGFja2FnZURhdGEucmVuZGl0aW9uX3ZpZXdwb3J0O1xuXG4gICAgdGhpcy5yZW5kaXRpb25fbGF5b3V0ID0gcGFja2FnZURhdGEucmVuZGl0aW9uX2xheW91dDtcblxuICAgIHRoaXMucmVuZGl0aW9uX2Zsb3cgPSBwYWNrYWdlRGF0YS5yZW5kaXRpb25fZmxvdztcbiAgICB0aGlzLnJlbmRpdGlvbl9vcmllbnRhdGlvbiA9IHBhY2thZ2VEYXRhLnJlbmRpdGlvbl9vcmllbnRhdGlvbjtcbiAgICB0aGlzLnJlbmRpdGlvbl9zcHJlYWQgPSBwYWNrYWdlRGF0YS5yZW5kaXRpb25fc3ByZWFkO1xuXG4gICAgdGhpcy5zcGluZSA9IG5ldyBTcGluZSh0aGlzLCBwYWNrYWdlRGF0YS5zcGluZSk7XG5cbiAgICB0aGlzLm1lZGlhX292ZXJsYXkgPSBNZWRpYU92ZXJsYXkuZnJvbURUTyhwYWNrYWdlRGF0YS5tZWRpYV9vdmVybGF5LCB0aGlzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYWNrYWdlIiwiLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIG9wZW5pbmcgcGFnZSByZXF1ZXN0XG4gKiBQcm92aWRlcyB0aGUgc3BpbmUgaXRlbSB0byBiZSBvcGVuZWQgYW5kIG9uZSBvZiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgc3BpbmVJdGVtUGFnZUluZGV4IHtOdW1iZXJ9LFxuICogIGVsZW1lbnRJZCB7U3RyaW5nfSxcbiAqICBlbGVtZW50Q2ZpIHtTdHJpbmd9LFxuICogIGZpcnN0UGFnZSB7Ym9vbH0sXG4gKiAgbGFzdFBhZ2Uge2Jvb2x9XG4gKlxuICogQHBhcmFtIHtSZWFkaXVtU0RLLk1vZGVscy5TcGluZUl0ZW19IHNwaW5lSXRlbVxuICogQHBhcmFtIHtvYmplY3R9IFtpbml0aWF0b3JdXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBQYWdlT3BlblJlcXVlc3QgPSBmdW5jdGlvbihzcGluZUl0ZW0sIGluaXRpYXRvcikge1xuXG4gIHRoaXMuc3BpbmVJdGVtID0gc3BpbmVJdGVtO1xuICB0aGlzLnNwaW5lSXRlbVBhZ2VJbmRleCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5lbGVtZW50SWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZWxlbWVudENmaSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5maXJzdFBhZ2UgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGFnZSA9IGZhbHNlO1xuICB0aGlzLmluaXRpYXRvciA9IGluaXRpYXRvcjtcblxuICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zcGluZUl0ZW1QYWdlSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbGVtZW50SWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbGVtZW50Q2ZpID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZmlyc3RQYWdlID0gZmFsc2U7XG4gICAgdGhpcy5sYXN0UGFnZSA9IGZhbHNlO1xuICB9O1xuXG4gIHRoaXMuc2V0Rmlyc3RQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuZmlyc3RQYWdlID0gdHJ1ZTtcbiAgfTtcblxuICB0aGlzLnNldExhc3RQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMubGFzdFBhZ2UgPSB0cnVlO1xuICB9O1xuXG4gIHRoaXMuc2V0UGFnZUluZGV4ID0gZnVuY3Rpb24ocGFnZUluZGV4KSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuc3BpbmVJdGVtUGFnZUluZGV4ID0gcGFnZUluZGV4O1xuICB9O1xuXG4gIHRoaXMuc2V0RWxlbWVudElkID0gZnVuY3Rpb24oZWxlbWVudElkKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuZWxlbWVudElkID0gZWxlbWVudElkO1xuICB9O1xuXG4gIHRoaXMuc2V0RWxlbWVudENmaSA9IGZ1bmN0aW9uKGVsZW1lbnRDZmkpIHtcblxuICAgIHRoaXMucmVzZXQoKTtcbiAgICB0aGlzLmVsZW1lbnRDZmkgPSBlbGVtZW50Q2ZpO1xuICB9O1xuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZU9wZW5SZXF1ZXN0IiwiLy8gIExhdW5jaGVyT1NYXG4vL1xuLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gTW9kaWZpZWQgYnkgRGFuaWVsIFdlY2tcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyIGVzY2FwZUpRdWVyeVNlbGVjdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9lc2NhcGUtanF1ZXJ5LXNlbGVjdG9yJylcblxuLyoqXG4gKlxuICogQHBhcmFtIHNtaWxcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIFNtaWxJdGVyYXRvcihzbWlsKSB7XG5cbiAgdGhpcy5zbWlsID0gc21pbDtcbiAgdGhpcy5jdXJyZW50UGFyID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmN1cnJlbnRQYXIgPSBmaW5kUGFyTm9kZSgwLCB0aGlzLnNtaWwsIGZhbHNlKTtcbiAgfTtcblxuICAvKlxuICB0aGlzLmZpcnN0RGVlcCA9IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgICAgdmFyIHBhciA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gXCJwYXJcIiA/IGNvbnRhaW5lciA6IGZpbmRQYXJOb2RlKDAsIGNvbnRhaW5lciwgZmFsc2UpO1xuXG4gICAgICByZXR1cm4gcGFyO1xuICB9O1xuICAqL1xuICAvL1xuICAvLyAgICB0aGlzLmVuc3VyZU5leHRWYWxpZFRleHRFbGVtZW50ID0gZnVuY3Rpb24oKVxuICAvLyAgICB7XG4gIC8vICAgICAgICBpZiAoIXRoaXMuY3VycmVudFBhcilcbiAgLy8gICAgICAgIHtcbiAgLy8gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiUGFyIGl0ZXJhdG9yIGlzIG91dCBvZiByYW5nZVwiKTtcbiAgLy8gICAgICAgICAgICByZXR1cm47XG4gIC8vICAgICAgICB9XG4gIC8vXG4gIC8vICAgICAgICB3aGlsZSAodGhpcy5jdXJyZW50UGFyICYmICF0aGlzLmN1cnJlbnRQYXIuZWxlbWVudClcbiAgLy8gICAgICAgIHtcbiAgLy8gICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgLy8gICAgICAgIH1cbiAgLy8gICAgfTtcblxuICB0aGlzLmZpbmRUZXh0SWQgPSBmdW5jdGlvbihpZCkge1xuICAgIGlmICghdGhpcy5jdXJyZW50UGFyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwiUGFyIGl0ZXJhdG9yIGlzIG91dCBvZiByYW5nZVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWlkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgd2hpbGUgKHRoaXMuY3VycmVudFBhcikge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFBhci5lbGVtZW50KSB7XG4gICAgICAgIGlmIChpZCA9PT0gdGhpcy5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZCkgLy90aGlzLmN1cnJlbnRQYXIuZWxlbWVudC5pZFxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPVVRFUiBtYXRjaFxuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5jdXJyZW50UGFyLmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgIGlmIChwYXJlbnQuaWQgJiYgcGFyZW50LmlkID09IGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElOTkVSIG1hdGNoXG4gICAgICAgIC8vdmFyIGluc2lkZSA9IHRoaXMuY3VycmVudFBhci5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICB2YXIgaW5zaWRlID0gJChcIiNcIiArIGVzY2FwZUpRdWVyeVNlbGVjdG9yKGlkKSwgdGhpcy5jdXJyZW50UGFyLmVsZW1lbnQpO1xuICAgICAgICBpZiAoaW5zaWRlICYmIGluc2lkZS5sZW5ndGggJiYgaW5zaWRlWzBdKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdGhpcy5uZXh0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoIXRoaXMuY3VycmVudFBhcikge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIlBhciBpdGVyYXRvciBpcyBvdXQgb2YgcmFuZ2VcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50UGFyID0gZmluZFBhck5vZGUodGhpcy5jdXJyZW50UGFyLmluZGV4ICsgMSwgdGhpcy5jdXJyZW50UGFyLnBhcmVudCwgZmFsc2UpO1xuICB9O1xuXG4gIHRoaXMucHJldmlvdXMgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmICghdGhpcy5jdXJyZW50UGFyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwiUGFyIGl0ZXJhdG9yIGlzIG91dCBvZiByYW5nZVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRQYXIgPSBmaW5kUGFyTm9kZSh0aGlzLmN1cnJlbnRQYXIuaW5kZXggLSAxLCB0aGlzLmN1cnJlbnRQYXIucGFyZW50LCB0cnVlKTtcbiAgfTtcblxuICB0aGlzLmlzTGFzdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKCF0aGlzLmN1cnJlbnRQYXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJQYXIgaXRlcmF0b3IgaXMgb3V0IG9mIHJhbmdlXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChmaW5kUGFyTm9kZSh0aGlzLmN1cnJlbnRQYXIuaW5kZXggKyAxLCB0aGlzLmN1cnJlbnRQYXIucGFyZW50LCBmYWxzZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuZ29Ub1BhciA9IGZ1bmN0aW9uKHBhcikge1xuXG4gICAgd2hpbGUgKHRoaXMuY3VycmVudFBhcikge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFBhciA9PSBwYXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBmaW5kUGFyTm9kZShzdGFydEluZGV4LCBjb250YWluZXIsIHByZXZpb3VzKSB7XG5cbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleCwgY291bnQgPSBjb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoOyBpID49IDAgJiYgaSA8IGNvdW50OyBpICs9IChwcmV2aW91cyA/IC0xIDogMSkpIHtcblxuICAgICAgdmFyIG5vZGUgPSBjb250YWluZXIuY2hpbGRyZW5baV07XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSBcInBhclwiKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuXG4gICAgICAvLyBhc3NlcnQobm9kZS5ub2RlVHlwZSA9PSBcInNlcVwiKVxuICAgICAgbm9kZSA9IGZpbmRQYXJOb2RlKHByZXZpb3VzID8gbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxIDogMCwgbm9kZSwgcHJldmlvdXMpO1xuXG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyLnBhcmVudCkge1xuICAgICAgcmV0dXJuIGZpbmRQYXJOb2RlKGNvbnRhaW5lci5pbmRleCArIChwcmV2aW91cyA/IC0xIDogMSksIGNvbnRhaW5lci5wYXJlbnQsIHByZXZpb3VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdGhpcy5yZXNldCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbWlsSXRlcmF0b3JcbiIsInZhciBNZWRpYU5vZGUgPSByZXF1aXJlKCcuL21lZGlhLW5vZGUnKVxuXG5mdW5jdGlvbiBBdWRpb05vZGUocGFyZW50KSB7XG5cbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgdGhpcy5ub2RlVHlwZSA9IFwiYXVkaW9cIjtcblxuICB0aGlzLmNsaXBCZWdpbiA9IDA7XG5cbiAgdGhpcy5NQVggPSAxMjM0NTY3ODkwLjE7IC8vTnVtYmVyLk1BWF9WQUxVRSAtIDAuMTsgLy9JbmZpbml0eTtcbiAgdGhpcy5jbGlwRW5kID0gdGhpcy5NQVg7XG5cblxuICB0aGlzLmNsaXBEdXJhdGlvbk1pbGxpc2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBfY2xpcEJlZ2luTWlsbGlzZWNvbmRzID0gdGhpcy5jbGlwQmVnaW4gKiAxMDAwO1xuICAgIHZhciBfY2xpcEVuZE1pbGxpc2Vjb25kcyA9IHRoaXMuY2xpcEVuZCAqIDEwMDA7XG5cbiAgICBpZiAodGhpcy5jbGlwRW5kID49IHRoaXMuTUFYIHx8IF9jbGlwRW5kTWlsbGlzZWNvbmRzIDw9IF9jbGlwQmVnaW5NaWxsaXNlY29uZHMpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiBfY2xpcEVuZE1pbGxpc2Vjb25kcyAtIF9jbGlwQmVnaW5NaWxsaXNlY29uZHM7XG4gIH07XG59O1xuXG5BdWRpb05vZGUucHJvdG90eXBlID0gbmV3IE1lZGlhTm9kZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1ZGlvTm9kZSIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vIE1vZGlmaWVkIGJ5IERhbmllbCBXZWNrXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciBBdWRpb05vZGUgPSByZXF1aXJlKCcuL2F1ZGlvLW5vZGUnKVxudmFyIFRleHROb2RlID0gcmVxdWlyZSgnLi90ZXh0LW5vZGUnKVxudmFyIFNlcU5vZGUgPSByZXF1aXJlKCcuL3NlcS1ub2RlJylcbnZhciBQYXJOb2RlID0gcmVxdWlyZSgnLi9wYXItbm9kZScpXG5cbmZ1bmN0aW9uIFNtaWxNb2RlbCgpIHtcblxuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcblxuXG5cbiAgdGhpcy5jaGlsZHJlbiA9IFtdOyAvL2NvbGxlY3Rpb24gb2Ygc2VxIG9yIHBhciBzbWlsIG5vZGVzXG4gIHRoaXMuaWQgPSB1bmRlZmluZWQ7IC8vbWFuaWZlc3QgaXRlbSBpZFxuICB0aGlzLmhyZWYgPSB1bmRlZmluZWQ7IC8vaHJlZiBvZiB0aGUgLnNtaWwgc291cmNlIGZpbGVcbiAgdGhpcy5kdXJhdGlvbiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5tbyA9IHVuZGVmaW5lZDtcblxuICB0aGlzLnBhcmFsbGVsQXQgPSBmdW5jdGlvbih0aW1lTWlsbGlzZWNvbmRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0ucGFyYWxsZWxBdCh0aW1lTWlsbGlzZWNvbmRzKTtcbiAgfTtcblxuICB0aGlzLm50aFBhcmFsbGVsID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICB2YXIgY291bnQgPSB7XG4gICAgICBjb3VudDogLTFcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuWzBdLm50aFBhcmFsbGVsKGluZGV4LCBjb3VudCk7XG4gIH07XG5cbiAgdGhpcy5jbGlwT2Zmc2V0ID0gZnVuY3Rpb24ocGFyKSB7XG4gICAgdmFyIG9mZnNldCA9IHtcbiAgICAgIG9mZnNldDogMFxuICAgIH07XG4gICAgaWYgKHRoaXMuY2hpbGRyZW5bMF0uY2xpcE9mZnNldChvZmZzZXQsIHBhcikpIHtcbiAgICAgIHJldHVybiBvZmZzZXQub2Zmc2V0O1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIHRoaXMuZHVyYXRpb25NaWxsaXNlY29uZHNfQ2FsY3VsYXRlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuWzBdLmR1cmF0aW9uTWlsbGlzZWNvbmRzKCk7XG4gIH07XG5cblxuICB2YXIgX2VwdWJ0eXBlU3luY3MgPSBbXTtcbiAgLy8gXG4gIC8vIHRoaXMuY2xlYXJTeW5jcyA9IGZ1bmN0aW9uKClcbiAgLy8ge1xuICAvLyAgICAgX2VwdWJ0eXBlU3luY3MgPSBbXTtcbiAgLy8gfTtcblxuICB0aGlzLmhhc1N5bmMgPSBmdW5jdGlvbihlcHVidHlwZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2VwdWJ0eXBlU3luY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChfZXB1YnR5cGVTeW5jc1tpXSA9PT0gZXB1YnR5cGUpIHtcbiAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiaGFzU3luYyBPSzogW1wiK2VwdWJ0eXBlK1wiXVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9jb25zb2xlLmRlYnVnKFwiaGFzU3luYz8/OiBbXCIrZXB1YnR5cGUrXCJdIFwiICsgX2VwdWJ0eXBlU3luY3MpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB0aGlzLmFkZFN5bmMgPSBmdW5jdGlvbihlcHVidHlwZXMpIHtcbiAgICBpZiAoIWVwdWJ0eXBlcykgcmV0dXJuO1xuXG4gICAgLy9jb25zb2xlLmRlYnVnKFwiYWRkU3luY3M6IFwiK2VwdWJ0eXBlcyk7XG5cbiAgICB2YXIgcGFydHMgPSBlcHVidHlwZXMuc3BsaXQoJyAnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXB1YnR5cGUgPSBwYXJ0c1tpXS50cmltKCk7XG5cbiAgICAgIGlmIChlcHVidHlwZS5sZW5ndGggPiAwICYmICF0aGlzLmhhc1N5bmMoZXB1YnR5cGUpKSB7XG4gICAgICAgIF9lcHVidHlwZVN5bmNzLnB1c2goZXB1YnR5cGUpO1xuXG4gICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcImFkZFN5bmM6IFwiK2VwdWJ0eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbn07XG5cblNtaWxNb2RlbC5mcm9tU21pbERUTyA9IGZ1bmN0aW9uKHNtaWxEVE8sIG1vKSB7XG5cbiAgaWYgKG1vLkRFQlVHKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIk1lZGlhIE92ZXJsYXkgRFRPIGltcG9ydC4uLlwiKTtcbiAgfVxuXG4gIHZhciBpbmRlbnQgPSAwO1xuICB2YXIgZ2V0SW5kZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRlbnQ7IGkrKykge1xuICAgICAgc3RyICs9IFwiICAgXCI7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICB2YXIgc21pbE1vZGVsID0gbmV3IFNtaWxNb2RlbCgpO1xuICBzbWlsTW9kZWwuaWQgPSBzbWlsRFRPLmlkO1xuICBzbWlsTW9kZWwuc3BpbmVJdGVtSWQgPSBzbWlsRFRPLnNwaW5lSXRlbUlkO1xuICBzbWlsTW9kZWwuaHJlZiA9IHNtaWxEVE8uaHJlZjtcblxuICBzbWlsTW9kZWwuc21pbFZlcnNpb24gPSBzbWlsRFRPLnNtaWxWZXJzaW9uO1xuXG4gIHNtaWxNb2RlbC5kdXJhdGlvbiA9IHNtaWxEVE8uZHVyYXRpb247XG4gIGlmIChzbWlsTW9kZWwuZHVyYXRpb24gJiYgc21pbE1vZGVsLmR1cmF0aW9uLmxlbmd0aCAmJiBzbWlsTW9kZWwuZHVyYXRpb24ubGVuZ3RoID4gMCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJTTUlMIGR1cmF0aW9uIGlzIHN0cmluZywgcGFyc2luZyBmbG9hdC4uLiAoXCIgKyBzbWlsTW9kZWwuZHVyYXRpb24gKyBcIilcIik7XG4gICAgc21pbE1vZGVsLmR1cmF0aW9uID0gcGFyc2VGbG9hdChzbWlsTW9kZWwuZHVyYXRpb24pO1xuICB9XG5cbiAgc21pbE1vZGVsLm1vID0gbW87IC8vUmVhZGl1bVNESy5Nb2RlbHMuTWVkaWFPdmVybGF5XG5cbiAgaWYgKHNtaWxNb2RlbC5tby5ERUJVRykge1xuICAgIGNvbnNvbGUubG9nKFwiSlMgTU8gc21pbFZlcnNpb249XCIgKyBzbWlsTW9kZWwuc21pbFZlcnNpb24pO1xuICAgIGNvbnNvbGUubG9nKFwiSlMgTU8gaWQ9XCIgKyBzbWlsTW9kZWwuaWQpO1xuICAgIGNvbnNvbGUubG9nKFwiSlMgTU8gc3BpbmVJdGVtSWQ9XCIgKyBzbWlsTW9kZWwuc3BpbmVJdGVtSWQpO1xuICAgIGNvbnNvbGUubG9nKFwiSlMgTU8gaHJlZj1cIiArIHNtaWxNb2RlbC5ocmVmKTtcbiAgICBjb25zb2xlLmxvZyhcIkpTIE1PIGR1cmF0aW9uPVwiICsgc21pbE1vZGVsLmR1cmF0aW9uKTtcbiAgfVxuXG4gIHZhciBzYWZlQ29weVByb3BlcnR5ID0gZnVuY3Rpb24ocHJvcGVydHksIGZyb20sIHRvLCBpc1JlcXVpcmVkKSB7XG5cbiAgICBpZiAoKHByb3BlcnR5IGluIGZyb20pKSB7IC8vICYmIGZyb21bcHJvcGVydHldICE9PSBcIlwiXG5cbiAgICAgIGlmICghKHByb3BlcnR5IGluIHRvKSkge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwicHJvcGVydHkgXCIgKyBwcm9wZXJ0eSArIFwiIG5vdCBkZWNsYXJlZCBpbiBzbWlsIG5vZGUgXCIgKyB0by5ub2RlVHlwZSk7XG4gICAgICB9XG5cbiAgICAgIHRvW3Byb3BlcnR5XSA9IGZyb21bcHJvcGVydHldO1xuXG4gICAgICBpZiAoc21pbE1vZGVsLm1vLkRFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdldEluZGVudCgpICsgXCJKUyBNTzogW1wiICsgcHJvcGVydHkgKyBcIj1cIiArIHRvW3Byb3BlcnR5XSArIFwiXVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiUmVxdWlyZWQgcHJvcGVydHkgXCIgKyBwcm9wZXJ0eSArIFwiIG5vdCBmb3VuZCBpbiBzbWlsIG5vZGUgXCIgKyBmcm9tLm5vZGVUeXBlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNyZWF0ZU5vZGVGcm9tRFRPID0gZnVuY3Rpb24obm9kZURUTywgcGFyZW50KSB7XG5cbiAgICB2YXIgbm9kZTtcblxuICAgIGlmIChub2RlRFRPLm5vZGVUeXBlID09IFwic2VxXCIpIHtcblxuICAgICAgaWYgKHNtaWxNb2RlbC5tby5ERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhnZXRJbmRlbnQoKSArIFwiSlMgTU8gc2VxXCIpO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbmV3IFNlcU5vZGUocGFyZW50KTtcblxuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcInRleHRyZWZcIiwgbm9kZURUTywgbm9kZSwgKChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkgPyB0cnVlIDogZmFsc2UpKTtcbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJpZFwiLCBub2RlRFRPLCBub2RlKTtcbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJlcHVidHlwZVwiLCBub2RlRFRPLCBub2RlKTtcblxuICAgICAgaWYgKG5vZGUuZXB1YnR5cGUpIHtcbiAgICAgICAgbm9kZS5nZXRTbWlsKCkuYWRkU3luYyhub2RlLmVwdWJ0eXBlKTtcbiAgICAgIH1cblxuICAgICAgaW5kZW50Kys7XG4gICAgICBjb3B5Q2hpbGRyZW4obm9kZURUTywgbm9kZSk7XG4gICAgICBpbmRlbnQtLTtcbiAgICB9IGVsc2UgaWYgKG5vZGVEVE8ubm9kZVR5cGUgPT0gXCJwYXJcIikge1xuXG4gICAgICBpZiAoc21pbE1vZGVsLm1vLkRFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdldEluZGVudCgpICsgXCJKUyBNTyBwYXJcIik7XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBuZXcgUGFyTm9kZShwYXJlbnQpO1xuXG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwiaWRcIiwgbm9kZURUTywgbm9kZSk7XG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwiZXB1YnR5cGVcIiwgbm9kZURUTywgbm9kZSk7XG5cbiAgICAgIGlmIChub2RlLmVwdWJ0eXBlKSB7XG4gICAgICAgIG5vZGUuZ2V0U21pbCgpLmFkZFN5bmMobm9kZS5lcHVidHlwZSk7XG4gICAgICB9XG5cbiAgICAgIGluZGVudCsrO1xuICAgICAgY29weUNoaWxkcmVuKG5vZGVEVE8sIG5vZGUpO1xuICAgICAgaW5kZW50LS07XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuXG4gICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PSBcInRleHRcIikge1xuICAgICAgICAgIG5vZGUudGV4dCA9IGNoaWxkO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkLm5vZGVUeXBlID09IFwiYXVkaW9cIikge1xuICAgICAgICAgIG5vZGUuYXVkaW8gPSBjaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5leHBlY3RlZCBzbWlsIG5vZGUgdHlwZTogXCIgKyBjaGlsZC5ub2RlVHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgdmFyIGZvcmNlVFRTID0gZmFsc2U7IC8vIGZvciB0ZXN0aW5nIG9ubHkhXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgIGlmIChmb3JjZVRUUyB8fCAhbm9kZS5hdWRpbykge1xuICAgICAgICAvLyBzeW50aGV0aWMgc3BlZWNoIChwbGF5YmFjayB1c2luZyBUVFMgZW5naW5lKSwgb3IgZW1iZWRkZWQgbWVkaWEsIG9yIGJsYW5rIHBhZ2VcbiAgICAgICAgdmFyIGZha2VBdWRpbyA9IG5ldyBBdWRpb05vZGUobm9kZSk7XG5cbiAgICAgICAgZmFrZUF1ZGlvLmNsaXBCZWdpbiA9IDA7XG4gICAgICAgIGZha2VBdWRpby5jbGlwRW5kID0gZmFrZUF1ZGlvLk1BWDtcbiAgICAgICAgZmFrZUF1ZGlvLnNyYyA9IHVuZGVmaW5lZDtcblxuICAgICAgICBub2RlLmF1ZGlvID0gZmFrZUF1ZGlvO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZURUTy5ub2RlVHlwZSA9PSBcInRleHRcIikge1xuXG4gICAgICBpZiAoc21pbE1vZGVsLm1vLkRFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdldEluZGVudCgpICsgXCJKUyBNTyB0ZXh0XCIpO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbmV3IFRleHROb2RlKHBhcmVudCk7XG5cbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJzcmNcIiwgbm9kZURUTywgbm9kZSwgdHJ1ZSk7XG4gICAgICBzYWZlQ29weVByb3BlcnR5KFwic3JjRmlsZVwiLCBub2RlRFRPLCBub2RlLCB0cnVlKTtcbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJzcmNGcmFnbWVudElkXCIsIG5vZGVEVE8sIG5vZGUsIGZhbHNlKTtcbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJpZFwiLCBub2RlRFRPLCBub2RlKTtcblxuICAgICAgbm9kZS51cGRhdGVNZWRpYU1hbmlmZXN0SXRlbUlkKCk7XG4gICAgfSBlbHNlIGlmIChub2RlRFRPLm5vZGVUeXBlID09IFwiYXVkaW9cIikge1xuXG4gICAgICBpZiAoc21pbE1vZGVsLm1vLkRFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdldEluZGVudCgpICsgXCJKUyBNTyBhdWRpb1wiKTtcbiAgICAgIH1cblxuICAgICAgbm9kZSA9IG5ldyBBdWRpb05vZGUocGFyZW50KTtcblxuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcInNyY1wiLCBub2RlRFRPLCBub2RlLCB0cnVlKTtcbiAgICAgIHNhZmVDb3B5UHJvcGVydHkoXCJpZFwiLCBub2RlRFRPLCBub2RlKTtcblxuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImNsaXBCZWdpblwiLCBub2RlRFRPLCBub2RlKTtcbiAgICAgIGlmIChub2RlLmNsaXBCZWdpbiAmJiBub2RlLmNsaXBCZWdpbi5sZW5ndGggJiYgbm9kZS5jbGlwQmVnaW4ubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiU01JTCBjbGlwQmVnaW4gaXMgc3RyaW5nLCBwYXJzaW5nIGZsb2F0Li4uIChcIiArIG5vZGUuY2xpcEJlZ2luICsgXCIpXCIpO1xuICAgICAgICBub2RlLmNsaXBCZWdpbiA9IHBhcnNlRmxvYXQobm9kZS5jbGlwQmVnaW4pO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuY2xpcEJlZ2luIDwgMCkge1xuICAgICAgICBpZiAoc21pbE1vZGVsLm1vLkRFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZ2V0SW5kZW50KCkgKyBcIkpTIE1PIGNsaXBCZWdpbiBhZGp1c3RlZCB0byBaRVJPXCIpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuY2xpcEJlZ2luID0gMDtcbiAgICAgIH1cblxuICAgICAgc2FmZUNvcHlQcm9wZXJ0eShcImNsaXBFbmRcIiwgbm9kZURUTywgbm9kZSk7XG4gICAgICBpZiAobm9kZS5jbGlwRW5kICYmIG5vZGUuY2xpcEVuZC5sZW5ndGggJiYgbm9kZS5jbGlwRW5kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNNSUwgY2xpcEVuZCBpcyBzdHJpbmcsIHBhcnNpbmcgZmxvYXQuLi4gKFwiICsgbm9kZS5jbGlwRW5kICsgXCIpXCIpO1xuICAgICAgICBub2RlLmNsaXBFbmQgPSBwYXJzZUZsb2F0KG5vZGUuY2xpcEVuZCk7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5jbGlwRW5kIDw9IG5vZGUuY2xpcEJlZ2luKSB7XG4gICAgICAgIGlmIChzbWlsTW9kZWwubW8uREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhnZXRJbmRlbnQoKSArIFwiSlMgTU8gY2xpcEVuZCBhZGp1c3RlZCB0byBNQVhcIik7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5jbGlwRW5kID0gbm9kZS5NQVg7XG4gICAgICB9XG5cbiAgICAgIC8vbm9kZS51cGRhdGVNZWRpYU1hbmlmZXN0SXRlbUlkKCk7IE9OTFkgWEhUTUwgU1BJTkUgSVRFTVMgXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmV4cGVjdGVkIHNtaWwgbm9kZSB0eXBlOiBcIiArIG5vZGVEVE8ubm9kZVR5cGUpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcblxuICB9O1xuXG4gIHZhciBjb3B5Q2hpbGRyZW4gPSBmdW5jdGlvbihmcm9tLCB0bykge1xuXG4gICAgdmFyIGNvdW50ID0gZnJvbS5jaGlsZHJlbi5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIHZhciBub2RlID0gY3JlYXRlTm9kZUZyb21EVE8oZnJvbS5jaGlsZHJlbltpXSwgdG8pO1xuICAgICAgbm9kZS5pbmRleCA9IGk7XG4gICAgICB0by5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgIH1cblxuICB9O1xuXG4gIGNvcHlDaGlsZHJlbihzbWlsRFRPLCBzbWlsTW9kZWwpO1xuXG4gIHJldHVybiBzbWlsTW9kZWw7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU21pbE1vZGVsIiwidmFyIFNtaWxOb2RlID0gcmVxdWlyZSgnLi9zbWlsLW5vZGUnKVxuXG5mdW5jdGlvbiBNZWRpYU5vZGUocGFyZW50KSB7XG5cbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgdGhpcy5zcmMgPSBcIlwiO1xufTtcblxuTWVkaWFOb2RlLnByb3RvdHlwZSA9IG5ldyBTbWlsTm9kZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lZGlhTm9kZSIsInZhciBUaW1lQ29udGFpbmVyTm9kZSA9IHJlcXVpcmUoJy4vdGltZS1jb250YWluZXItbm9kZScpXG5cbmZ1bmN0aW9uIFBhck5vZGUocGFyZW50KSB7XG5cbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICB0aGlzLm5vZGVUeXBlID0gXCJwYXJcIjtcbiAgdGhpcy50ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmF1ZGlvID0gdW5kZWZpbmVkO1xuICB0aGlzLmVsZW1lbnQgPSB1bmRlZmluZWQ7XG5cblxuICB0aGlzLmdldEZpcnN0U2VxQW5jZXN0b3JXaXRoRXB1YlR5cGUgPSBmdW5jdGlvbihlcHVidHlwZSwgaW5jbHVkZVNlbGYpIHtcbiAgICBpZiAoIWVwdWJ0eXBlKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgdmFyIHBhcmVudCA9IGluY2x1ZGVTZWxmID8gdGhpcyA6IHRoaXMucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuZXB1YnR5cGUgJiYgcGFyZW50LmVwdWJ0eXBlLmluZGV4T2YoZXB1YnR5cGUpID49IDApIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudDsgLy8gYXNzZXJ0KHBhcmVudC5ub2RlVHlwZSA9PT0gXCJzZXFcIilcbiAgICAgIH1cblxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufTtcblxuUGFyTm9kZS5wcm90b3R5cGUgPSBuZXcgVGltZUNvbnRhaW5lck5vZGUoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJOb2RlIiwidmFyIFRpbWVDb250YWluZXJOb2RlID0gcmVxdWlyZSgnLi90aW1lLWNvbnRhaW5lci1ub2RlJylcblxuZnVuY3Rpb24gU2VxTm9kZShwYXJlbnQpIHtcblxuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICB0aGlzLmNoaWxkcmVuID0gW107XG4gIHRoaXMubm9kZVR5cGUgPSBcInNlcVwiO1xuICB0aGlzLnRleHRyZWYgPSBcIlwiO1xuXG4gIHRoaXMuZHVyYXRpb25NaWxsaXNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc21pbERhdGEgPSB0aGlzLmdldFNtaWwoKTtcblxuICAgIHZhciB0b3RhbCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gXCJwYXJcIikge1xuICAgICAgICBpZiAoIWNvbnRhaW5lci5hdWRpbykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250YWluZXIudGV4dCAmJiAoIWNvbnRhaW5lci50ZXh0Lm1hbmlmZXN0SXRlbUlkIHx8IGNvbnRhaW5lci50ZXh0Lm1hbmlmZXN0SXRlbUlkICE9IHNtaWxEYXRhLnNwaW5lSXRlbUlkKSkge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNvbnRhaW5lci50ZXh0KTtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzbWlsRGF0YS5zcGluZUl0ZW1JZCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2xpcER1ciA9IGNvbnRhaW5lci5hdWRpby5jbGlwRHVyYXRpb25NaWxsaXNlY29uZHMoKTtcbiAgICAgICAgdG90YWwgKz0gY2xpcER1cjtcbiAgICAgIH0gZWxzZSBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBcInNlcVwiKSB7XG4gICAgICAgIHRvdGFsICs9IGNvbnRhaW5lci5kdXJhdGlvbk1pbGxpc2Vjb25kcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0b3RhbDtcbiAgfTtcblxuICB0aGlzLmNsaXBPZmZzZXQgPSBmdW5jdGlvbihvZmZzZXQsIHBhcikge1xuICAgIHZhciBzbWlsRGF0YSA9IHRoaXMuZ2V0U21pbCgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IFwicGFyXCIpIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lciA9PSBwYXIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGFpbmVyLmF1ZGlvKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGFpbmVyLnRleHQgJiYgKCFjb250YWluZXIudGV4dC5tYW5pZmVzdEl0ZW1JZCB8fCBjb250YWluZXIudGV4dC5tYW5pZmVzdEl0ZW1JZCAhPSBzbWlsRGF0YS5zcGluZUl0ZW1JZCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjbGlwRHVyID0gY29udGFpbmVyLmF1ZGlvLmNsaXBEdXJhdGlvbk1pbGxpc2Vjb25kcygpO1xuICAgICAgICBvZmZzZXQub2Zmc2V0ICs9IGNsaXBEdXI7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gXCJzZXFcIikge1xuICAgICAgICB2YXIgZm91bmQgPSBjb250YWluZXIuY2xpcE9mZnNldChvZmZzZXQsIHBhcik7XG4gICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHRoaXMucGFyYWxsZWxBdCA9IGZ1bmN0aW9uKHRpbWVNaWxsaXNlY29uZHMpIHtcbiAgICB2YXIgc21pbERhdGEgPSB0aGlzLmdldFNtaWwoKTtcblxuICAgIHZhciBvZmZzZXQgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdGltZUFkanVzdGVkID0gdGltZU1pbGxpc2Vjb25kcyAtIG9mZnNldDtcblxuICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IFwicGFyXCIpIHtcbiAgICAgICAgaWYgKCFjb250YWluZXIuYXVkaW8pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250YWluZXIudGV4dCAmJiAoIWNvbnRhaW5lci50ZXh0Lm1hbmlmZXN0SXRlbUlkIHx8IGNvbnRhaW5lci50ZXh0Lm1hbmlmZXN0SXRlbUlkICE9IHNtaWxEYXRhLnNwaW5lSXRlbUlkKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsaXBEdXIgPSBjb250YWluZXIuYXVkaW8uY2xpcER1cmF0aW9uTWlsbGlzZWNvbmRzKCk7XG5cbiAgICAgICAgaWYgKGNsaXBEdXIgPiAwICYmIHRpbWVBZGp1c3RlZCA8PSBjbGlwRHVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgICAgfVxuXG4gICAgICAgIG9mZnNldCArPSBjbGlwRHVyO1xuICAgICAgfSBlbHNlIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IFwic2VxXCIpIHtcbiAgICAgICAgdmFyIHBhcmEgPSBjb250YWluZXIucGFyYWxsZWxBdCh0aW1lQWRqdXN0ZWQpO1xuICAgICAgICBpZiAocGFyYSkge1xuICAgICAgICAgIHJldHVybiBwYXJhO1xuICAgICAgICB9XG5cbiAgICAgICAgb2Zmc2V0ICs9IGNvbnRhaW5lci5kdXJhdGlvbk1pbGxpc2Vjb25kcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5udGhQYXJhbGxlbCA9IGZ1bmN0aW9uKGluZGV4LCBjb3VudCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IFwicGFyXCIpIHtcbiAgICAgICAgY291bnQuY291bnQrKztcblxuICAgICAgICBpZiAoY291bnQuY291bnQgPT0gaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gXCJzZXFcIikge1xuICAgICAgICB2YXIgcGFyYSA9IGNvbnRhaW5lci5udGhQYXJhbGxlbChpbmRleCwgY291bnQpO1xuICAgICAgICBpZiAocGFyYSkge1xuICAgICAgICAgIHJldHVybiBwYXJhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxufTtcblxuU2VxTm9kZS5wcm90b3R5cGUgPSBuZXcgVGltZUNvbnRhaW5lck5vZGUoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUaW1lQ29udGFpbmVyTm9kZSIsImZ1bmN0aW9uIFNtaWxOb2RlKHBhcmVudCkge1xuXG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXG4gIHRoaXMuaWQgPSBcIlwiO1xuXG4gIC8vcm9vdCBub2RlIGlzIGEgc21pbCBtb2RlbFxuICB0aGlzLmdldFNtaWwgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBub2RlID0gdGhpcztcbiAgICB3aGlsZSAobm9kZS5wYXJlbnQpIHtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICB0aGlzLmhhc0FuY2VzdG9yID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50ID09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbWlsTm9kZSIsInZhciBNZWRpYU5vZGUgPSByZXF1aXJlKCcuL21lZGlhLW5vZGUnKVxudmFyIFJlc29sdmVDb250ZW50UmVmID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9yZXNvbHZlLWNvbnRlbnQtcmVmJylcblxuZnVuY3Rpb24gVGV4dE5vZGUocGFyZW50KSB7XG5cbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgdGhpcy5ub2RlVHlwZSA9IFwidGV4dFwiO1xuICB0aGlzLnNyY0ZpbGUgPSBcIlwiO1xuICB0aGlzLnNyY0ZyYWdtZW50SWQgPSBcIlwiO1xuXG5cbiAgdGhpcy5tYW5pZmVzdEl0ZW1JZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy51cGRhdGVNZWRpYU1hbmlmZXN0SXRlbUlkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNtaWxEYXRhID0gdGhpcy5nZXRTbWlsKCk7XG5cbiAgICBpZiAoIXNtaWxEYXRhLmhyZWYgfHwgIXNtaWxEYXRhLmhyZWYubGVuZ3RoKSB7XG4gICAgICByZXR1cm47IC8vIEJsYW5rIE1PIHBhZ2UgcGxhY2Vob2xkZXIsIG5vIHJlYWwgU01JTFxuICAgIH1cblxuICAgIC8vIHZhciBzcmNQYXJ0cyA9IGl0ZW0uc3JjLnNwbGl0KCcjJyk7XG4gICAgLy8gICAgICAgICBpdGVtLnNyY0ZpbGUgPSBzcmNQYXJ0c1swXTtcbiAgICAvLyAgICAgICAgIGl0ZW0uc3JjRnJhZ21lbnRJZCA9IChzcmNQYXJ0cy5sZW5ndGggPT09IDIpID8gc3JjUGFydHNbMV0gOiBcIlwiO1xuXG4gICAgdmFyIHNyYyA9IHRoaXMuc3JjRmlsZSA/IHRoaXMuc3JjRmlsZSA6IHRoaXMuc3JjO1xuICAgIC8vIGNvbnNvbGUubG9nKFwic3JjOiBcIiArIHNyYyk7XG4gICAgLy8gY29uc29sZS5sb2coXCJzbWlsRGF0YS5ocmVmOiBcIiArIHNtaWxEYXRhLmhyZWYpO1xuICAgIHZhciByZWYgPSBSZXNvbHZlQ29udGVudFJlZihzcmMsIHNtaWxEYXRhLmhyZWYpO1xuICAgIC8vY29uc29sZS5sb2coXCJyZWY6IFwiICsgcmVmKTtcbiAgICB2YXIgZnVsbCA9IHNtaWxEYXRhLm1vLnBhY2thZ2UucmVzb2x2ZVJlbGF0aXZlVXJsTU8ocmVmKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcImZ1bGw6IFwiICsgZnVsbCk7XG4gICAgLy8gY29uc29sZS5sb2coXCItLS1cIik7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzbWlsRGF0YS5tby5wYWNrYWdlLnNwaW5lLml0ZW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgaXRlbSA9IHNtaWxEYXRhLm1vLnBhY2thZ2Uuc3BpbmUuaXRlbXNbal07XG4gICAgICAvL2NvbnNvbGUubG9nKFwiaXRlbS5ocmVmOiBcIiArIGl0ZW0uaHJlZik7XG4gICAgICB2YXIgdXJsID0gc21pbERhdGEubW8ucGFja2FnZS5yZXNvbHZlUmVsYXRpdmVVcmwoaXRlbS5ocmVmKTtcbiAgICAgIC8vY29uc29sZS5sb2coXCJ1cmw6IFwiICsgdXJsKTtcbiAgICAgIGlmICh1cmwgPT09IGZ1bGwpIHtcbiAgICAgICAgLy9jb25zb2xlLmVycm9yKFwiRk9VTkQ6IFwiICsgaXRlbS5pZHJlZik7XG4gICAgICAgIHRoaXMubWFuaWZlc3RJdGVtSWQgPSBpdGVtLmlkcmVmO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS5lcnJvcihcIkNhbm5vdCBzZXQgdGhlIE1lZGlhIE1hbmlmZXN0SXRlbUlkPyBcIiArIHRoaXMuc3JjICsgXCIgJiYgXCIgKyBzbWlsRGF0YS5ocmVmKTtcblxuICAgIC8vICAgICAgICB0aHJvdyBcIkJSRUFLXCI7XG4gIH07XG5cbn07XG5cblRleHROb2RlLnByb3RvdHlwZSA9IG5ldyBNZWRpYU5vZGUoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0Tm9kZSIsInZhciBTbWlsTm9kZSA9IHJlcXVpcmUoJy4vc21pbC1ub2RlJylcblxuZnVuY3Rpb24gVGltZUNvbnRhaW5lck5vZGUocGFyZW50KSB7XG5cbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgdGhpcy5jaGlsZHJlbiA9IHR5cGVvZiB0aGlzLmNoaWxkcmVuID09PSAndW5kZWZpbmVkJyA/IFtdIDogdGhpcy5jaGlsZHJlbjtcbiAgdGhpcy5pbmRleCA9IHVuZGVmaW5lZDtcblxuICB0aGlzLmVwdWJ0eXBlID0gXCJcIjtcblxuICB0aGlzLmlzRXNjYXBhYmxlID0gZnVuY3Rpb24odXNlckVzY2FwYWJsZXMpIHtcbiAgICBpZiAodGhpcy5lcHVidHlwZSA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBzbWlsTW9kZWwgPSB0aGlzLmdldFNtaWwoKTtcbiAgICBpZiAoIXNtaWxNb2RlbC5tbykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBhcnIgPSBzbWlsTW9kZWwubW8uZXNjYXBhYmxlcztcbiAgICBpZiAodXNlckVzY2FwYWJsZXMubGVuZ3RoID4gMCkge1xuICAgICAgYXJyID0gdXNlckVzY2FwYWJsZXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmVwdWJ0eXBlLmluZGV4T2YoYXJyW2ldKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB0aGlzLmlzU2tpcHBhYmxlID0gZnVuY3Rpb24odXNlclNraXBwYWJsZXMpIHtcbiAgICBpZiAodGhpcy5lcHVidHlwZSA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBzbWlsTW9kZWwgPSB0aGlzLmdldFNtaWwoKTtcbiAgICBpZiAoIXNtaWxNb2RlbC5tbykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBhcnIgPSBzbWlsTW9kZWwubW8uc2tpcHBhYmxlcztcbiAgICBpZiAodXNlclNraXBwYWJsZXMubGVuZ3RoID4gMCkge1xuICAgICAgYXJyID0gdXNlclNraXBwYWJsZXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmVwdWJ0eXBlLmluZGV4T2YoYXJyW2ldKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn07XG5cblRpbWVDb250YWluZXJOb2RlLnByb3RvdHlwZSA9IG5ldyBTbWlsTm9kZSgpXG5cbm1vZHVsZS5leHBvcnRzID0gVGltZUNvbnRhaW5lck5vZGUiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgUkVORElUSU9OX0xBWU9VVF9SRUZMT1dBQkxFOiBcInJlZmxvd2FibGVcIixcbiAgUkVORElUSU9OX0xBWU9VVF9QUkVQQUdJTkFURUQ6IFwicHJlLXBhZ2luYXRlZFwiLFxuXG4gIFJFTkRJVElPTl9PUklFTlRBVElPTl9MQU5EU0NBUEU6IFwibGFuZHNjYXBlXCIsXG4gIFJFTkRJVElPTl9PUklFTlRBVElPTl9QT1JUUkFJVDogXCJwb3J0cmFpdFwiLFxuICBSRU5ESVRJT05fT1JJRU5UQVRJT05fQVVUTzogXCJhdXRvXCIsXG5cbiAgU1BSRUFEX0xFRlQ6IFwicGFnZS1zcHJlYWQtbGVmdFwiLFxuICBTUFJFQURfUklHSFQ6IFwicGFnZS1zcHJlYWQtcmlnaHRcIixcbiAgU1BSRUFEX0NFTlRFUjogXCJwYWdlLXNwcmVhZC1jZW50ZXJcIixcblxuICBSRU5ESVRJT05fU1BSRUFEX05PTkU6IFwibm9uZVwiLFxuICBSRU5ESVRJT05fU1BSRUFEX0xBTkRTQ0FQRTogXCJsYW5kc2NhcGVcIixcbiAgUkVORElUSU9OX1NQUkVBRF9QT1JUUkFJVDogXCJwb3J0cmFpdFwiLFxuICBSRU5ESVRJT05fU1BSRUFEX0JPVEg6IFwiYm90aFwiLFxuICBSRU5ESVRJT05fU1BSRUFEX0FVVE86IFwiYXV0b1wiLFxuXG4gIFJFTkRJVElPTl9GTE9XX1BBR0lOQVRFRDogXCJwYWdpbmF0ZWRcIixcbiAgUkVORElUSU9OX0ZMT1dfU0NST0xMRURfQ09OVElOVU9VUzogXCJzY3JvbGxlZC1jb250aW51b3VzXCIsXG4gIFJFTkRJVElPTl9GTE9XX1NDUk9MTEVEX0RPQzogXCJzY3JvbGxlZC1kb2NcIixcbiAgUkVORElUSU9OX0ZMT1dfQVVUTzogXCJhdXRvXCJcbn0iLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciBDb25zdGFudHMgPSByZXF1aXJlKCcuL3NwaW5lLWl0ZW0tY29uc3RhbnRzJylcblxuLyoqXG4gKiBXcmFwcGVyIG9mIHRoZSBTcGluZUl0ZW0gb2JqZWN0IHJlY2VpdmVkIGZyb20gdGhlIGhvc3QgYXBwbGljYXRpb25cbiAqXG4gKiBAY2xhc3MgU3BpbmVJdGVtXG4gKlxuICogQHBhcmFtIGl0ZW1EYXRhIHNwaW5lIGl0ZW0gcHJvcGVydGllcyBjb250YWluZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtTcGluZX0gc3BpbmVcbiAqXG4gKi9cbnZhciBTcGluZUl0ZW0gPSBmdW5jdGlvbihpdGVtRGF0YSwgaW5kZXgsIHNwaW5lKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuaWRyZWYgPSBpdGVtRGF0YS5pZHJlZjtcbiAgdGhpcy5ocmVmID0gaXRlbURhdGEuaHJlZjtcblxuICB0aGlzLmxpbmVhciA9IGl0ZW1EYXRhLmxpbmVhciA/IGl0ZW1EYXRhLmxpbmVhci50b0xvd2VyQ2FzZSgpIDogaXRlbURhdGEubGluZWFyO1xuXG4gIHRoaXMucGFnZV9zcHJlYWQgPSBpdGVtRGF0YS5wYWdlX3NwcmVhZDtcblxuICB0aGlzLnJlbmRpdGlvbl92aWV3cG9ydCA9IGl0ZW1EYXRhLnJlbmRpdGlvbl92aWV3cG9ydDtcblxuICB0aGlzLnJlbmRpdGlvbl9zcHJlYWQgPSBpdGVtRGF0YS5yZW5kaXRpb25fc3ByZWFkO1xuXG4gIC8vVE9ETzogdW51c2VkIHlldCFcbiAgdGhpcy5yZW5kaXRpb25fb3JpZW50YXRpb24gPSBpdGVtRGF0YS5yZW5kaXRpb25fb3JpZW50YXRpb247XG5cbiAgdGhpcy5yZW5kaXRpb25fbGF5b3V0ID0gaXRlbURhdGEucmVuZGl0aW9uX2xheW91dDtcblxuICB0aGlzLnJlbmRpdGlvbl9mbG93ID0gaXRlbURhdGEucmVuZGl0aW9uX2Zsb3c7XG5cblxuXG4gIHRoaXMubWVkaWFfb3ZlcmxheV9pZCA9IGl0ZW1EYXRhLm1lZGlhX292ZXJsYXlfaWQ7XG5cbiAgdGhpcy5tZWRpYV90eXBlID0gaXRlbURhdGEubWVkaWFfdHlwZTtcblxuICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gIHRoaXMuc3BpbmUgPSBzcGluZTtcblxuICB2YWxpZGF0ZVNwcmVhZCgpO1xuXG4gIHRoaXMuc2V0U3ByZWFkID0gZnVuY3Rpb24oc3ByZWFkKSB7XG4gICAgdGhpcy5wYWdlX3NwcmVhZCA9IHNwcmVhZDtcblxuICAgIHZhbGlkYXRlU3ByZWFkKCk7XG4gIH07XG5cbiAgdGhpcy5pc1JlbmRpdGlvblNwcmVhZEFsbG93ZWQgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciByZW5kaXRpb25fc3ByZWFkID0gc2VsZi5nZXRSZW5kaXRpb25TcHJlYWQoKTtcbiAgICByZXR1cm4gIXJlbmRpdGlvbl9zcHJlYWQgfHwgcmVuZGl0aW9uX3NwcmVhZCAhPSBDb25zdGFudHMuUkVORElUSU9OX1NQUkVBRF9OT05FO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlU3ByZWFkKCkge1xuXG4gICAgaWYgKCFzZWxmLnBhZ2Vfc3ByZWFkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNlbGYucGFnZV9zcHJlYWQgIT0gQ29uc3RhbnRzLlNQUkVBRF9MRUZUICYmXG4gICAgICBzZWxmLnBhZ2Vfc3ByZWFkICE9IENvbnN0YW50cy5TUFJFQURfUklHSFQgJiZcbiAgICAgIHNlbGYucGFnZV9zcHJlYWQgIT0gQ29uc3RhbnRzLlNQUkVBRF9DRU5URVIpIHtcblxuICAgICAgY29uc29sZS5lcnJvcihzZWxmLnBhZ2Vfc3ByZWFkICsgXCIgaXMgbm90IGEgcmVjb2duaXplZCBzcHJlYWQgdHlwZVwiKTtcbiAgICB9XG5cbiAgfVxuXG4gIHRoaXMuaXNMZWZ0UGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLnBhZ2Vfc3ByZWFkID09IENvbnN0YW50cy5TUFJFQURfTEVGVDtcbiAgfTtcblxuICB0aGlzLmlzUmlnaHRQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYucGFnZV9zcHJlYWQgPT0gQ29uc3RhbnRzLlNQUkVBRF9SSUdIVDtcbiAgfTtcblxuICB0aGlzLmlzQ2VudGVyUGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLnBhZ2Vfc3ByZWFkID09IENvbnN0YW50cy5TUFJFQURfQ0VOVEVSO1xuICB9O1xuXG4gIHRoaXMuaXNSZWZsb3dhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICFzZWxmLmlzRml4ZWRMYXlvdXQoKTtcbiAgfTtcblxuICB0aGlzLmlzRml4ZWRMYXlvdXQgPSBmdW5jdGlvbigpIHtcblxuICAgIC8vIGNhbm5vdCB1c2UgaXNQcm9wZXJ0eVZhbHVlU2V0Rm9ySXRlbU9yUGFja2FnZSgpIGhlcmUhXG5cbiAgICB2YXIgaXNMYXlvdXRFeHBsaWNpdGx5RGVmaW5lZCA9IHNlbGYuZ2V0UmVuZGl0aW9uTGF5b3V0KCk7XG5cbiAgICBpZiAoaXNMYXlvdXRFeHBsaWNpdGx5RGVmaW5lZCkge1xuXG4gICAgICBpZiAoc2VsZi5yZW5kaXRpb25fbGF5b3V0KSB7XG4gICAgICAgIGlmIChzZWxmLnJlbmRpdGlvbl9sYXlvdXQgPT09IENvbnN0YW50cy5SRU5ESVRJT05fTEFZT1VUX1BSRVBBR0lOQVRFRCkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChzZWxmLnJlbmRpdGlvbl9sYXlvdXQgPT09IENvbnN0YW50cy5SRU5ESVRJT05fTEFZT1VUX1JFRkxPV0FCTEUpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuc3BpbmUucGFja2FnZS5pc0ZpeGVkTGF5b3V0KCk7XG4gICAgfVxuXG4gICAgLy8gaWYgaW1hZ2Ugb3Igc3ZnIHVzZSBmaXhlZCBsYXlvdXRcbiAgICByZXR1cm4gc2VsZi5tZWRpYV90eXBlLmluZGV4T2YoXCJpbWFnZS9cIikgPj0gMDtcblxuICB9O1xuXG4gIHRoaXMuZ2V0UmVuZGl0aW9uRmxvdyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKHNlbGYucmVuZGl0aW9uX2Zsb3cpIHtcbiAgICAgIHJldHVybiBzZWxmLnJlbmRpdGlvbl9mbG93O1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLnNwaW5lLnBhY2thZ2UucmVuZGl0aW9uX2Zsb3c7XG4gIH07XG5cbiAgdGhpcy5nZXRSZW5kaXRpb25WaWV3cG9ydCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKHNlbGYucmVuZGl0aW9uX3ZpZXdwb3J0KSB7XG4gICAgICByZXR1cm4gc2VsZi5yZW5kaXRpb25fdmlld3BvcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuc3BpbmUucGFja2FnZS5yZW5kaXRpb25fdmlld3BvcnQ7XG4gIH07XG5cbiAgdGhpcy5nZXRSZW5kaXRpb25TcHJlYWQgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmIChzZWxmLnJlbmRpdGlvbl9zcHJlYWQpIHtcbiAgICAgIHJldHVybiBzZWxmLnJlbmRpdGlvbl9zcHJlYWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuc3BpbmUucGFja2FnZS5yZW5kaXRpb25fc3ByZWFkO1xuICB9O1xuXG4gIHRoaXMuZ2V0UmVuZGl0aW9uT3JpZW50YXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgIGlmIChzZWxmLnJlbmRpdGlvbl9vcmllbnRhdGlvbikge1xuICAgICAgcmV0dXJuIHNlbGYucmVuZGl0aW9uX29yaWVudGF0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLnNwaW5lLnBhY2thZ2UucmVuZGl0aW9uX29yaWVudGF0aW9uO1xuICB9O1xuXG4gIHRoaXMuZ2V0UmVuZGl0aW9uTGF5b3V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoc2VsZi5yZW5kaXRpb25fbGF5b3V0KSB7XG4gICAgICByZXR1cm4gc2VsZi5yZW5kaXRpb25fbGF5b3V0O1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLnNwaW5lLnBhY2thZ2UucmVuZGl0aW9uX2xheW91dDtcbiAgfTtcblxuICBmdW5jdGlvbiBpc1Byb3BlcnR5VmFsdWVTZXRGb3JJdGVtT3JQYWNrYWdlKHByb3BOYW1lLCBwcm9wVmFsdWUpIHtcblxuICAgIGlmIChzZWxmW3Byb3BOYW1lXSkge1xuICAgICAgcmV0dXJuIHNlbGZbcHJvcE5hbWVdID09PSBwcm9wVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuc3BpbmUucGFja2FnZVtwcm9wTmFtZV0pIHtcbiAgICAgIHJldHVybiBzZWxmLnNwaW5lLnBhY2thZ2VbcHJvcE5hbWVdID09PSBwcm9wVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdGhpcy5pc0Zsb3dTY3JvbGxlZENvbnRpbnVvdXMgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiBpc1Byb3BlcnR5VmFsdWVTZXRGb3JJdGVtT3JQYWNrYWdlKFwicmVuZGl0aW9uX2Zsb3dcIiwgQ29uc3RhbnRzLlJFTkRJVElPTl9GTE9XX1NDUk9MTEVEX0NPTlRJTlVPVVMpO1xuICB9O1xuXG4gIHRoaXMuaXNGbG93U2Nyb2xsZWREb2MgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiBpc1Byb3BlcnR5VmFsdWVTZXRGb3JJdGVtT3JQYWNrYWdlKFwicmVuZGl0aW9uX2Zsb3dcIiwgQ29uc3RhbnRzLlJFTkRJVElPTl9GTE9XX1NDUk9MTEVEX0RPQyk7XG4gIH07XG59O1xuXG5TcGluZUl0ZW0uYWx0ZXJuYXRlU3ByZWFkID0gZnVuY3Rpb24oc3ByZWFkKSB7XG5cbiAgaWYgKHNwcmVhZCA9PT0gQ29uc3RhbnRzLlNQUkVBRF9MRUZUKSB7XG4gICAgcmV0dXJuIENvbnN0YW50cy5TUFJFQURfUklHSFQ7XG4gIH1cblxuICBpZiAoc3ByZWFkID09PSBDb25zdGFudHMuU1BSRUFEX1JJR0hUKSB7XG4gICAgcmV0dXJuIENvbnN0YW50cy5TUFJFQURfTEVGVDtcbiAgfVxuXG4gIHJldHVybiBzcHJlYWQ7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3BpbmVJdGVtIiwiLy8gIENyZWF0ZWQgYnkgQm9yaXMgU2NobmVpZGVybWFuLlxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG4vKipcbiAqICBXcmFwcGVyIG9mIHRoZSBzcGluZSBvYmplY3QgcmVjZWl2ZWQgZnJvbSBob3N0aW5nIGFwcGxpY2F0aW9uXG4gKlxuICogIEBjbGFzcyAgUmVhZGl1bVNESy5Nb2RlbHMuU3BpbmVcbiAqL1xuXG52YXIgU3BpbmVJdGVtID0gcmVxdWlyZSgnLi9zcGluZS1pdGVtJylcbnZhciBTcGluZUl0ZW1Db25zdGFudHMgPSByZXF1aXJlKCcuL3NwaW5lLWl0ZW0tY29uc3RhbnRzJylcblxuZnVuY3Rpb24gU3BpbmUoZXB1YlBhY2thZ2UsIHNwaW5lRFRPKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8qXG4gICAqIENvbGxlY3Rpb24gb2Ygc3BpbmUgaXRlbXNcbiAgICogQHByb3BlcnR5IGl0ZW1zXG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIHRoaXMuaXRlbXMgPSBbXTtcblxuICAvKlxuICAgKiBQYWdlIHByb2dyZXNzaW9uIGRpcmVjdGlvbiBsdHJ8cnRsfGRlZmF1bHRcbiAgICogQHByb3BlcnR5IGRpcmVjdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5kaXJlY3Rpb24gPSBcImx0clwiO1xuXG4gIC8qXG4gICAqIEBwcm9wZXJ0eSBwYWNrYWdlXG4gICAqIEB0eXBlIHtSZWFkaXVtU0RLLk1vZGVscy5QYWNrYWdlfVxuICAgKlxuICAgKi9cbiAgdGhpcy5wYWNrYWdlID0gZXB1YlBhY2thZ2U7XG5cbiAgdmFyIF9oYW5kbGVMaW5lYXIgPSBmYWxzZTtcblxuICB0aGlzLmhhbmRsZUxpbmVhciA9IGZ1bmN0aW9uKGhhbmRsZUxpbmVhcikge1xuICAgIF9oYW5kbGVMaW5lYXIgPSBoYW5kbGVMaW5lYXI7XG4gIH07XG5cbiAgZnVuY3Rpb24gaXNWYWxpZExpbmVhckl0ZW0oaXRlbSkge1xuICAgIHJldHVybiAhX2hhbmRsZUxpbmVhciB8fCBpdGVtLmxpbmVhciAhPT0gXCJub1wiO1xuICB9XG5cblxuICB0aGlzLmlzVmFsaWRMaW5lYXJJdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgIGlmICghaXNWYWxpZEluZGV4KGluZGV4KSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNWYWxpZExpbmVhckl0ZW0odGhpcy5pdGVtKGluZGV4KSk7XG4gIH07XG5cbiAgdGhpcy5wcmV2SXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblxuICAgIHJldHVybiBsb29rRm9yUHJldlZhbGlkSXRlbShpdGVtLmluZGV4IC0gMSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbG9va0Zvck5leHRWYWxpZEl0ZW0oaXgpIHtcblxuICAgIGlmICghaXNWYWxpZEluZGV4KGl4KSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXNbaXhdO1xuXG4gICAgaWYgKGlzVmFsaWRMaW5lYXJJdGVtKGl0ZW0pKSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9va0Zvck5leHRWYWxpZEl0ZW0oaXRlbS5pbmRleCArIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9va0ZvclByZXZWYWxpZEl0ZW0oaXgpIHtcblxuICAgIGlmICghaXNWYWxpZEluZGV4KGl4KSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXNbaXhdO1xuXG4gICAgaWYgKGlzVmFsaWRMaW5lYXJJdGVtKGl0ZW0pKSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9va0ZvclByZXZWYWxpZEl0ZW0oaXRlbS5pbmRleCAtIDEpO1xuICB9XG5cbiAgdGhpcy5uZXh0SXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblxuICAgIHJldHVybiBsb29rRm9yTmV4dFZhbGlkSXRlbShpdGVtLmluZGV4ICsgMSk7XG4gIH07XG5cbiAgdGhpcy5nZXRJdGVtVXJsID0gZnVuY3Rpb24oaXRlbSkge1xuXG4gICAgcmV0dXJuIHNlbGYucGFja2FnZS5yZXNvbHZlUmVsYXRpdmVVcmwoaXRlbS5ocmVmKTtcblxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzVmFsaWRJbmRleChpbmRleCkge1xuXG4gICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCBzZWxmLml0ZW1zLmxlbmd0aDtcbiAgfVxuXG4gIHRoaXMuZmlyc3QgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiBsb29rRm9yTmV4dFZhbGlkSXRlbSgwKTtcbiAgfTtcblxuICB0aGlzLmxhc3QgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiBsb29rRm9yUHJldlZhbGlkSXRlbSh0aGlzLml0ZW1zLmxlbmd0aCAtIDEpO1xuICB9O1xuXG4gIHRoaXMuaXNGaXJzdEl0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG5cbiAgICByZXR1cm4gc2VsZi5maXJzdCgpID09PSBpdGVtO1xuICB9O1xuXG4gIHRoaXMuaXNMYXN0SXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblxuICAgIHJldHVybiBzZWxmLmxhc3QoKSA9PT0gaXRlbTtcbiAgfTtcblxuICB0aGlzLml0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgaWYgKGlzVmFsaWRJbmRleChpbmRleCkpXG4gICAgICByZXR1cm4gc2VsZi5pdGVtc1tpbmRleF07XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHRoaXMuaXNSaWdodFRvTGVmdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHNlbGYuZGlyZWN0aW9uID09IFwicnRsXCI7XG4gIH07XG5cbiAgdGhpcy5pc0xlZnRUb1JpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICByZXR1cm4gIXNlbGYuaXNSaWdodFRvTGVmdCgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0SXRlbUJ5SWQgPSBmdW5jdGlvbihpZHJlZikge1xuXG4gICAgdmFyIGxlbmd0aCA9IHNlbGYuaXRlbXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHNlbGYuaXRlbXNbaV0uaWRyZWYgPT0gaWRyZWYpIHtcblxuICAgICAgICByZXR1cm4gc2VsZi5pdGVtc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHRoaXMuZ2V0SXRlbUJ5SHJlZiA9IGZ1bmN0aW9uKGhyZWYpIHtcblxuICAgIHZhciBsZW5ndGggPSBzZWxmLml0ZW1zLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzZWxmLml0ZW1zW2ldLmhyZWYgPT0gaHJlZikge1xuXG4gICAgICAgIHJldHVybiBzZWxmLml0ZW1zW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gdXBkYXRlU3BpbmVJdGVtc1NwcmVhZCgpIHtcblxuICAgIHZhciBsZW4gPSBzZWxmLml0ZW1zLmxlbmd0aDtcblxuICAgIHZhciBpc0ZpcnN0UGFnZUluU3ByZWFkID0gZmFsc2U7XG4gICAgdmFyIGJhc2VTaWRlID0gc2VsZi5pc0xlZnRUb1JpZ2h0KCkgPyBTcGluZUl0ZW1Db25zdGFudHMuU1BSRUFEX0xFRlQgOiBTcGluZUl0ZW1Db25zdGFudHMuU1BSRUFEX1JJR0hUO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXG4gICAgICB2YXIgc3BpbmVJdGVtID0gc2VsZi5pdGVtc1tpXTtcbiAgICAgIGlmICghc3BpbmVJdGVtLnBhZ2Vfc3ByZWFkKSB7XG5cbiAgICAgICAgdmFyIHNwcmVhZCA9IHNwaW5lSXRlbS5pc1JlbmRpdGlvblNwcmVhZEFsbG93ZWQoKSA/IChpc0ZpcnN0UGFnZUluU3ByZWFkID8gYmFzZVNpZGUgOiBTcGluZUl0ZW0uYWx0ZXJuYXRlU3ByZWFkKGJhc2VTaWRlKSkgOiBTcGluZUl0ZW1Db25zdGFudHMuU1BSRUFEX0NFTlRFUjtcbiAgICAgICAgc3BpbmVJdGVtLnNldFNwcmVhZChzcHJlYWQpO1xuICAgICAgfVxuXG4gICAgICBpc0ZpcnN0UGFnZUluU3ByZWFkID0gIXNwaW5lSXRlbS5pc1JlbmRpdGlvblNwcmVhZEFsbG93ZWQoKSB8fCBzcGluZUl0ZW0ucGFnZV9zcHJlYWQgIT0gYmFzZVNpZGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNwaW5lRFRPKSB7XG5cbiAgICBpZiAoc3BpbmVEVE8uZGlyZWN0aW9uKSB7XG4gICAgICB0aGlzLmRpcmVjdGlvbiA9IHNwaW5lRFRPLmRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgbGVuZ3RoID0gc3BpbmVEVE8uaXRlbXMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gbmV3IFNwaW5lSXRlbShzcGluZURUTy5pdGVtc1tpXSwgaSwgdGhpcyk7XG4gICAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgdXBkYXRlU3BpbmVJdGVtc1NwcmVhZCgpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3BpbmUiLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbi8vIFRoaXMgZmlsZSB3YXMgcmVhZGl1bS1qcy1zaGFyZWQvanMvbW9kZWxzL2ZpeGVkX3BhZ2Vfc3ByZWFkLmpzXG5cbnZhciBQT1NJVElPTl9MRUZUID0gXCJsZWZ0XCI7XG52YXIgUE9TSVRJT05fUklHSFQgPSBcInJpZ2h0XCI7XG52YXIgUE9TSVRJT05fQ0VOVEVSID0gXCJjZW50ZXJcIjtcblxuLyoqXG4gKlxuICpcbiAqXG4gKiBAcGFyYW0ge1JlYWRpdW1TREsuTW9kZWxzLlNwaW5lfSBzcGluZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cblxudmFyIFNwcmVhZCA9IGZ1bmN0aW9uKHNwaW5lLCBpc1N5bnRoZXRpY1NwcmVhZCkge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLnNwaW5lID0gc3BpbmU7XG5cbiAgdGhpcy5sZWZ0SXRlbSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yaWdodEl0ZW0gPSB1bmRlZmluZWQ7XG4gIHRoaXMuY2VudGVySXRlbSA9IHVuZGVmaW5lZDtcblxuICB2YXIgX2lzU3ludGhldGljU3ByZWFkID0gaXNTeW50aGV0aWNTcHJlYWQ7XG5cbiAgdGhpcy5zZXRTeW50aGV0aWNTcHJlYWQgPSBmdW5jdGlvbihpc1N5bnRoZXRpY1NwcmVhZCkge1xuICAgIF9pc1N5bnRoZXRpY1NwcmVhZCA9IGlzU3ludGhldGljU3ByZWFkO1xuICB9O1xuXG4gIHRoaXMuaXNTeW50aGV0aWNTcHJlYWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX2lzU3ludGhldGljU3ByZWFkO1xuICB9O1xuXG4gIHRoaXMub3BlbkZpcnN0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAodGhpcy5zcGluZS5pdGVtcy5sZW5ndGggPT0gMCkge1xuICAgICAgcmVzZXRJdGVtcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wZW5JdGVtKHRoaXMuc3BpbmUuZmlyc3QoKSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub3Blbkxhc3QgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmICh0aGlzLnNwaW5lLml0ZW1zLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXNldEl0ZW1zKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3Blbkl0ZW0odGhpcy5zcGluZS5sYXN0KCkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9wZW5JdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuXG4gICAgcmVzZXRJdGVtcygpO1xuXG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0SXRlbVBvc2l0aW9uKGl0ZW0pO1xuICAgIHNldEl0ZW1Ub1Bvc2l0aW9uKGl0ZW0sIHBvc2l0aW9uKTtcblxuICAgIGlmIChwb3NpdGlvbiAhPSBQT1NJVElPTl9DRU5URVIgJiYgdGhpcy5zcGluZS5pc1ZhbGlkTGluZWFySXRlbShpdGVtLmluZGV4KSkgeyAvLyAmJiBpdGVtLmlzUmVuZGl0aW9uU3ByZWFkQWxsb3dlZCgpIG5vdCBuZWNlc3NhcnksIHNlZSBnZXRJdGVtUG9zaXRpb24oKSBiZWxvd1xuICAgICAgdmFyIG5laWdoYm91ciA9IGdldE5laWdoYm91ckl0ZW0oaXRlbSk7XG4gICAgICBpZiAobmVpZ2hib3VyKSB7XG4gICAgICAgIHZhciBuZWlnaGJvdXJQb3MgPSBnZXRJdGVtUG9zaXRpb24obmVpZ2hib3VyKTtcbiAgICAgICAgaWYgKG5laWdoYm91clBvcyAhPSBwb3NpdGlvbiAmJiBuZWlnaGJvdXJQb3MgIT0gUE9TSVRJT05fQ0VOVEVSICYmICFuZWlnaGJvdXIuaXNSZWZsb3dhYmxlKCkgJiYgbmVpZ2hib3VyLmlzUmVuZGl0aW9uU3ByZWFkQWxsb3dlZCgpKSB7XG4gICAgICAgICAgc2V0SXRlbVRvUG9zaXRpb24obmVpZ2hib3VyLCBuZWlnaGJvdXJQb3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlc2V0SXRlbXMoKSB7XG5cbiAgICBzZWxmLmxlZnRJdGVtID0gdW5kZWZpbmVkO1xuICAgIHNlbGYucmlnaHRJdGVtID0gdW5kZWZpbmVkO1xuICAgIHNlbGYuY2VudGVySXRlbSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEl0ZW1Ub1Bvc2l0aW9uKGl0ZW0sIHBvc2l0aW9uKSB7XG5cbiAgICBpZiAocG9zaXRpb24gPT0gUE9TSVRJT05fTEVGVCkge1xuICAgICAgc2VsZi5sZWZ0SXRlbSA9IGl0ZW07XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PSBQT1NJVElPTl9SSUdIVCkge1xuICAgICAgc2VsZi5yaWdodEl0ZW0gPSBpdGVtO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIGlmIChwb3NpdGlvbiAhPSBQT1NJVElPTl9DRU5URVIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVucmVjb2duaXplZCBwb3NpdGlvbiB2YWx1ZVwiKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5jZW50ZXJJdGVtID0gaXRlbTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJdGVtUG9zaXRpb24oaXRlbSkge1xuXG4gICAgLy8gaW5jbHVkZXMgIWl0ZW0uaXNSZW5kaXRpb25TcHJlYWRBbGxvd2VkKCkgKFwicmVuZGl0aW9uOnNwcmVhZC1ub25lXCIpID09PiBmb3JjZSBjZW50ZXIgcG9zaXRpb25cbiAgICBpZiAoIV9pc1N5bnRoZXRpY1NwcmVhZCkge1xuICAgICAgcmV0dXJuIFBPU0lUSU9OX0NFTlRFUjtcbiAgICB9XG5cbiAgICBpZiAoaXRlbS5pc0xlZnRQYWdlKCkpIHtcbiAgICAgIHJldHVybiBQT1NJVElPTl9MRUZUO1xuICAgIH1cblxuICAgIGlmIChpdGVtLmlzUmlnaHRQYWdlKCkpIHtcbiAgICAgIHJldHVybiBQT1NJVElPTl9SSUdIVDtcbiAgICB9XG5cbiAgICByZXR1cm4gUE9TSVRJT05fQ0VOVEVSO1xuICB9XG5cbiAgdGhpcy5vcGVuTmV4dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGl0ZW1zID0gdGhpcy52YWxpZEl0ZW1zKCk7XG5cbiAgICBpZiAoaXRlbXMubGVuZ3RoID09IDApIHtcblxuICAgICAgdGhpcy5vcGVuRmlyc3QoKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgbmV4dEl0ZW0gPSB0aGlzLnNwaW5lLm5leHRJdGVtKGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdKTtcbiAgICAgIGlmIChuZXh0SXRlbSkge1xuXG4gICAgICAgIHRoaXMub3Blbkl0ZW0obmV4dEl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLm9wZW5QcmV2ID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgaXRlbXMgPSB0aGlzLnZhbGlkSXRlbXMoKTtcblxuICAgIGlmIChpdGVtcy5sZW5ndGggPT0gMCkge1xuICAgICAgdGhpcy5vcGVuTGFzdCgpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIHZhciBwcmV2SXRlbSA9IHRoaXMuc3BpbmUucHJldkl0ZW0oaXRlbXNbMF0pO1xuICAgICAgaWYgKHByZXZJdGVtKSB7XG5cbiAgICAgICAgdGhpcy5vcGVuSXRlbShwcmV2SXRlbSk7XG5cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy52YWxpZEl0ZW1zID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgYXJyID0gW107XG5cbiAgICBpZiAodGhpcy5sZWZ0SXRlbSkgYXJyLnB1c2godGhpcy5sZWZ0SXRlbSk7XG4gICAgaWYgKHRoaXMucmlnaHRJdGVtKSBhcnIucHVzaCh0aGlzLnJpZ2h0SXRlbSk7XG4gICAgaWYgKHRoaXMuY2VudGVySXRlbSkgYXJyLnB1c2godGhpcy5jZW50ZXJJdGVtKTtcblxuICAgIGFyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgICB9KTtcblxuICAgIHJldHVybiBhcnI7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0TmVpZ2hib3VySXRlbShpdGVtKSB7XG5cbiAgICBpZiAoaXRlbS5pc0xlZnRQYWdlKCkpIHtcbiAgICAgIHJldHVybiBzZWxmLnNwaW5lLmlzUmlnaHRUb0xlZnQoKSA/IHNlbGYuc3BpbmUucHJldkl0ZW0oaXRlbSkgOiBzZWxmLnNwaW5lLm5leHRJdGVtKGl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChpdGVtLmlzUmlnaHRQYWdlKCkpIHtcbiAgICAgIHJldHVybiBzZWxmLnNwaW5lLmlzUmlnaHRUb0xlZnQoKSA/IHNlbGYuc3BpbmUubmV4dEl0ZW0oaXRlbSkgOiBzZWxmLnNwaW5lLnByZXZJdGVtKGl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTcHJlYWQiLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbi8qKlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvclxuICogQHBhcmFtIGRlY2xhcmF0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBTdHlsZSA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBkZWNsYXJhdGlvbnMpIHtcblxuICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gIHRoaXMuZGVjbGFyYXRpb25zID0gZGVjbGFyYXRpb25zO1xuXG4gIHRoaXMuc2V0RGVjbGFyYXRpb25zID0gZnVuY3Rpb24oZGVjbGFyYXRpb25zKSB7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIGRlY2xhcmF0aW9ucykge1xuICAgICAgaWYgKGRlY2xhcmF0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICB0aGlzLmRlY2xhcmF0aW9uc1twcm9wXSA9IGRlY2xhcmF0aW9uc1twcm9wXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdHlsZSIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxuXG4vLyBEZXNjcmlwdGlvbjogUGFyc2UgdGhlIGVwdWIgXCJzd2l0Y2hcIiB0YWdzIGFuZCBoaWRlXG4vLyBjYXNlcyB0aGF0IGFyZSBub3Qgc3VwcG9ydGVkXG5mdW5jdGlvbiBhcHBseShkb20pIHtcblxuXG4gIC8vIGhlbHBlciBtZXRob2QsIHJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIGNhc2Ugbm9kZVxuICAvLyBpcyBzdXBwb3J0ZWQsIGZhbHNlIG90aGVyd2lzZVxuICBmdW5jdGlvbiBpc1N1cHBvcnRlZChjYXNlTm9kZSkge1xuXG4gICAgdmFyIG5zID0gY2FzZU5vZGUuYXR0cmlidXRlc1tcInJlcXVpcmVkLW5hbWVzcGFjZVwiXTtcbiAgICBpZiAoIW5zKSB7XG4gICAgICAvLyB0aGUgbmFtZXNwYWNlIHdhcyBub3Qgc3BlY2lmaWVkLCB0aGF0IHNob3VsZFxuICAgICAgLy8gbmV2ZXIgaGFwcGVuLCB3ZSBkb24ndCBzdXBwb3J0IGl0IHRoZW5cbiAgICAgIGNvbnNvbGUubG9nKFwiRW5jb3VudGVyZWQgYSBjYXNlIHN0YXRlbWVudCB3aXRoIG5vIHJlcXVpcmVkLW5hbWVzcGFjZVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gYWxsIHRoZSB4bWxucyB0aGF0IHJlYWRpdW0gaXMga25vd24gdG8gc3VwcG9ydFxuICAgIC8vIFRPRE8gdGhpcyBpcyBnb2luZyB0byByZXF1aXJlIG1haW50ZW5hbmNlXG4gICAgdmFyIHN1cHBvcnRlZE5hbWVzcGFjZXMgPSBbXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCJdO1xuICAgIHJldHVybiBfLmluY2x1ZGUoc3VwcG9ydGVkTmFtZXNwYWNlcywgbnMpO1xuICB9XG5cbiAgJCgnc3dpdGNoJywgZG9tKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgLy8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdyB3ZSBmb3VuZCBvbmVcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcblxuICAgICQoJ2Nhc2UnLCB0aGlzKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICBpZiAoIWZvdW5kICYmIGlzU3VwcG9ydGVkKHRoaXMpKSB7XG4gICAgICAgIGZvdW5kID0gdHJ1ZTsgLy8gd2UgZm91bmQgdGhlIG5vZGUsIGRvbid0IHJlbW92ZSBpdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTsgLy8gcmVtb3ZlIHRoZSBub2RlIGZyb20gdGhlIGRvbVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wcm9wKFwiaGlkZGVuXCIsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICAvLyBpZiB3ZSBmb3VuZCBhIHN1cHBvcnRlZCBjYXNlLCByZW1vdmUgdGhlIGRlZmF1bHRcbiAgICAgICQoJ2RlZmF1bHQnLCB0aGlzKS5yZW1vdmUoKTtcbiAgICAgIC8vICAgICAgICAgICAgICAgICQoJ2RlZmF1bHQnLCB0aGlzKS5wcm9wKFwiaGlkZGVuXCIsIHRydWUpO1xuICAgIH1cbiAgfSlcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhcHBseTogYXBwbHlcbn0iLCIvLyAgTGF1bmNoZXJPU1hcbi8vXG4vLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBlc2NhcGVKUXVlcnlTZWxlY3RvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvZXNjYXBlLWpxdWVyeS1zZWxlY3RvcicpXG52YXIgVHJpZ2dlciA9IHJlcXVpcmUoJy4vdHJpZ2dlcicpXG5cbi8qKlxuICogU2V0dGVyIGZvdCBlcHViIFRyaWdnZXJzXG4gKlxuICpcbiAqIEBwYXJhbSBkb21Ob2RlXG4gKi9cblxudmFyIFRyaWdnZXIgPSBmdW5jdGlvbihkb21Ob2RlKSB7XG4gIHZhciAkZWwgPSAkKGRvbU5vZGUpO1xuICB0aGlzLmFjdGlvbiA9ICRlbC5hdHRyKFwiYWN0aW9uXCIpO1xuICB0aGlzLnJlZiA9ICRlbC5hdHRyKFwicmVmXCIpO1xuICB0aGlzLmV2ZW50ID0gJGVsLmF0dHIoXCJldjpldmVudFwiKTtcbiAgdGhpcy5vYnNlcnZlciA9ICRlbC5hdHRyKFwiZXY6b2JzZXJ2ZXJcIik7XG4gIHRoaXMucmVmID0gJGVsLmF0dHIoXCJyZWZcIik7XG59O1xuXG5UcmlnZ2VyLnJlZ2lzdGVyID0gZnVuY3Rpb24oZG9tKSB7XG4gICQoJ3RyaWdnZXInLCBkb20pLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyaWdnZXIgPSBuZXcgVHJpZ2dlcih0aGlzKTtcbiAgICB0cmlnZ2VyLnN1YnNjcmliZShkb20pO1xuICB9KTtcbn07XG5cblRyaWdnZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKGRvbSkge1xuICB2YXIgc2VsZWN0b3IgPSBcIiNcIiArIHRoaXMub2JzZXJ2ZXI7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgJChzZWxlY3RvciwgZG9tKS5vbih0aGlzLmV2ZW50LCBmdW5jdGlvbigpIHtcbiAgICB0aGF0LmV4ZWN1dGUoZG9tKTtcbiAgfSk7XG59O1xuXG5UcmlnZ2VyLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24oZG9tKSB7XG4gIHZhciAkdGFyZ2V0ID0gJChcIiNcIiArIGVzY2FwZUpRdWVyeVNlbGVjdG9yKHRoaXMucmVmKSwgZG9tKTtcbiAgc3dpdGNoICh0aGlzLmFjdGlvbikge1xuICAgIGNhc2UgXCJzaG93XCI6XG4gICAgICAkdGFyZ2V0LmNzcyhcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImhpZGVcIjpcbiAgICAgICR0YXJnZXQuY3NzKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwbGF5XCI6XG4gICAgICAkdGFyZ2V0WzBdLmN1cnJlbnRUaW1lID0gMDtcbiAgICAgICR0YXJnZXRbMF0ucGxheSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBhdXNlXCI6XG4gICAgICAkdGFyZ2V0WzBdLnBhdXNlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicmVzdW1lXCI6XG4gICAgICAkdGFyZ2V0WzBdLnBsYXkoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtdXRlXCI6XG4gICAgICAkdGFyZ2V0WzBdLm11dGVkID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ1bm11dGVcIjpcbiAgICAgICR0YXJnZXRbMF0ubXV0ZWQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zb2xlLmxvZyhcImRvIG5vdCBubyBob3cgdG8gaGFuZGxlIHRyaWdnZXIgXCIgKyB0aGlzLmFjdGlvbik7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVHJpZ2dlciIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuLyoqXG4gKlxuICogQHBhcmFtIHNldHRpbmdzRGF0YVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBWaWV3ZXJTZXR0aW5ncyA9IGZ1bmN0aW9uKHNldHRpbmdzRGF0YSkge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLnN5bnRoZXRpY1NwcmVhZCA9IFwiYXV0b1wiO1xuICB0aGlzLmZvbnRTaXplID0gMTAwO1xuICB0aGlzLmNvbHVtbkdhcCA9IDIwO1xuXG4gIHRoaXMubWVkaWFPdmVybGF5c1ByZXNlcnZlUGxheWJhY2tXaGVuU2Nyb2xsID0gZmFsc2U7XG5cbiAgdGhpcy5tZWRpYU92ZXJsYXlzU2tpcFNraXBwYWJsZXMgPSBmYWxzZTtcbiAgdGhpcy5tZWRpYU92ZXJsYXlzRXNjYXBlRXNjYXBhYmxlcyA9IHRydWU7XG5cbiAgdGhpcy5tZWRpYU92ZXJsYXlzU2tpcHBhYmxlcyA9IFtdO1xuICB0aGlzLm1lZGlhT3ZlcmxheXNFc2NhcGFibGVzID0gW107XG5cbiAgdGhpcy5tZWRpYU92ZXJsYXlzRW5hYmxlQ2xpY2sgPSB0cnVlO1xuICB0aGlzLm1lZGlhT3ZlcmxheXNSYXRlID0gMTtcbiAgdGhpcy5tZWRpYU92ZXJsYXlzVm9sdW1lID0gMTAwO1xuXG4gIHRoaXMubWVkaWFPdmVybGF5c1N5bmNocm9uaXphdGlvbkdyYW51bGFyaXR5ID0gXCJcIjtcblxuICB0aGlzLm1lZGlhT3ZlcmxheXNBdXRvbWF0aWNQYWdlVHVybiA9IHRydWU7XG5cbiAgdGhpcy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEID0gZmFsc2U7XG5cbiAgLy8gLTEgPT0+IGRpc2FibGVcbiAgLy8gWzAuLi5uXSA9PT4gaW5kZXggb2YgdHJhbnNpdGlvbiBpbiBwcmUtZGVmaW5lZCBhcnJheVxuICB0aGlzLnBhZ2VUcmFuc2l0aW9uID0gLTE7XG5cbiAgdGhpcy5zY3JvbGwgPSBcImF1dG9cIjtcblxuICBmdW5jdGlvbiBidWlsZEFycmF5KHN0cikge1xuICAgIHZhciByZXRBcnIgPSBbXTtcbiAgICB2YXIgYXJyID0gc3RyLnNwbGl0KC9bXFxzLDtdKy8pOyAvLycsJ1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGFycltpXS50cmltKCk7XG4gICAgICBpZiAoaXRlbSAhPT0gXCJcIikge1xuICAgICAgICByZXRBcnIucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldEFycjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcFByb3BlcnR5KHByb3BOYW1lLCBzZXR0aW5nc0RhdGEsIGZ1bmN0aW9uVG9BcHBseSkge1xuXG4gICAgaWYgKHNldHRpbmdzRGF0YVtwcm9wTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGZ1bmN0aW9uVG9BcHBseSkge1xuXG4gICAgICAgIHNlbGZbcHJvcE5hbWVdID0gZnVuY3Rpb25Ub0FwcGx5KHNldHRpbmdzRGF0YVtwcm9wTmFtZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZltwcm9wTmFtZV0gPSBzZXR0aW5nc0RhdGFbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbihzZXR0aW5nc0RhdGEpIHtcblxuICAgIG1hcFByb3BlcnR5KFwiY29sdW1uR2FwXCIsIHNldHRpbmdzRGF0YSk7XG4gICAgbWFwUHJvcGVydHkoXCJmb250U2l6ZVwiLCBzZXR0aW5nc0RhdGEpO1xuICAgIG1hcFByb3BlcnR5KFwibWVkaWFPdmVybGF5c1ByZXNlcnZlUGxheWJhY2tXaGVuU2Nyb2xsXCIsIHNldHRpbmdzRGF0YSk7XG4gICAgbWFwUHJvcGVydHkoXCJtZWRpYU92ZXJsYXlzU2tpcFNraXBwYWJsZXNcIiwgc2V0dGluZ3NEYXRhKTtcbiAgICBtYXBQcm9wZXJ0eShcIm1lZGlhT3ZlcmxheXNFc2NhcGVFc2NhcGFibGVzXCIsIHNldHRpbmdzRGF0YSk7XG4gICAgbWFwUHJvcGVydHkoXCJtZWRpYU92ZXJsYXlzU2tpcHBhYmxlc1wiLCBzZXR0aW5nc0RhdGEsIGJ1aWxkQXJyYXkpO1xuICAgIG1hcFByb3BlcnR5KFwibWVkaWFPdmVybGF5c0VzY2FwYWJsZXNcIiwgc2V0dGluZ3NEYXRhLCBidWlsZEFycmF5KTtcbiAgICBtYXBQcm9wZXJ0eShcIm1lZGlhT3ZlcmxheXNFbmFibGVDbGlja1wiLCBzZXR0aW5nc0RhdGEpO1xuICAgIG1hcFByb3BlcnR5KFwibWVkaWFPdmVybGF5c1JhdGVcIiwgc2V0dGluZ3NEYXRhKTtcbiAgICBtYXBQcm9wZXJ0eShcIm1lZGlhT3ZlcmxheXNWb2x1bWVcIiwgc2V0dGluZ3NEYXRhKTtcbiAgICBtYXBQcm9wZXJ0eShcIm1lZGlhT3ZlcmxheXNTeW5jaHJvbml6YXRpb25HcmFudWxhcml0eVwiLCBzZXR0aW5nc0RhdGEpO1xuICAgIG1hcFByb3BlcnR5KFwibWVkaWFPdmVybGF5c0F1dG9tYXRpY1BhZ2VUdXJuXCIsIHNldHRpbmdzRGF0YSk7XG4gICAgbWFwUHJvcGVydHkoXCJzY3JvbGxcIiwgc2V0dGluZ3NEYXRhKTtcbiAgICBtYXBQcm9wZXJ0eShcInN5bnRoZXRpY1NwcmVhZFwiLCBzZXR0aW5nc0RhdGEpO1xuICAgIG1hcFByb3BlcnR5KFwicGFnZVRyYW5zaXRpb25cIiwgc2V0dGluZ3NEYXRhKTtcbiAgICBtYXBQcm9wZXJ0eShcImVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0RcIiwgc2V0dGluZ3NEYXRhKTtcbiAgfTtcblxuICB0aGlzLnVwZGF0ZShzZXR0aW5nc0RhdGEpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3ZXJTZXR0aW5nczsiLCJpZiAobmF2aWdhdG9yKSB7XG4gIC8vVGhpcyBpcyBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHJlYWRpbmcgc3lzdGVtIG9iamVjdCB0aGF0IHdpbGwgYmUgYXZhaWxhYmxlIGZvciB0aGUgcHVibGljYXRpb24ncyBqYXZhc2NyaXB0IHRvIGFuYWx5emUgYXQgcnVudGltZVxuICAvL1RvIGV4dGVuZC9tb2RpZnkvcmVwbGFjZSB0aGlzIG9iamVjdCByZWFkaW5nIHN5c3RlbSBzaG91bGQgc3Vic2NyaWJlIFJlYWRpdW1TREsuRXZlbnRzLlJFQURFUl9JTklUSUFMSVpFRCBhbmQgYXBwbHkgY2hhbmdlcyBpbiByZWFjdGlvbiB0byB0aGlzIGV2ZW50XG4gIG5hdmlnYXRvci5lcHViUmVhZGluZ1N5c3RlbSA9IHtcbiAgICBuYW1lOiBcIlwiLFxuICAgIHZlcnNpb246IFwiMC4wLjBcIixcbiAgICBsYXlvdXRTdHlsZTogXCJwYWdpbmF0ZWRcIixcblxuICAgIGhhc0ZlYXR1cmU6IGZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pIHtcblxuICAgICAgLy8gZm9yIG5vdyBhbGwgZmVhdHVyZXMgbXVzdCBiZSB2ZXJzaW9uIDEuMCBzbyBmYWlsIGZhc3QgaWYgdGhlIHVzZXIgaGFzIGFza2VkIGZvciBzb21ldGhpbmcgZWxzZVxuICAgICAgaWYgKHZlcnNpb24gJiYgdmVyc2lvbiAhPT0gXCIxLjBcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChmZWF0dXJlID09PSBcImRvbS1tYW5pcHVsYXRpb25cIikge1xuICAgICAgICAvLyBTY3JpcHRzIG1heSBtYWtlIHN0cnVjdHVyYWwgY2hhbmdlcyB0byB0aGUgZG9jdW1lbnQ/Pz9zIERPTSAoYXBwbGllcyB0byBzcGluZS1sZXZlbCBzY3JpcHRpbmcgb25seSkuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGZlYXR1cmUgPT09IFwibGF5b3V0LWNoYW5nZXNcIikge1xuICAgICAgICAvLyBTY3JpcHRzIG1heSBtb2RpZnkgYXR0cmlidXRlcyBhbmQgQ1NTIHN0eWxlcyB0aGF0IGFmZmVjdCBjb250ZW50IGxheW91dCAoYXBwbGllcyB0byBzcGluZS1sZXZlbCBzY3JpcHRpbmcgb25seSkuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGZlYXR1cmUgPT09IFwidG91Y2gtZXZlbnRzXCIpIHtcbiAgICAgICAgLy8gVGhlIGRldmljZSBzdXBwb3J0cyB0b3VjaCBldmVudHMgYW5kIHRoZSBSZWFkaW5nIFN5c3RlbSBwYXNzZXMgdG91Y2ggZXZlbnRzIHRvIHRoZSBjb250ZW50LlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZmVhdHVyZSA9PT0gXCJtb3VzZS1ldmVudHNcIikge1xuICAgICAgICAvLyBUaGUgZGV2aWNlIHN1cHBvcnRzIG1vdXNlIGV2ZW50cyBhbmQgdGhlIFJlYWRpbmcgU3lzdGVtIHBhc3NlcyBtb3VzZSBldmVudHMgdG8gdGhlIGNvbnRlbnQuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGZlYXR1cmUgPT09IFwia2V5Ym9hcmQtZXZlbnRzXCIpIHtcbiAgICAgICAgLy8gVGhlIGRldmljZSBzdXBwb3J0cyBrZXlib2FyZCBldmVudHMgYW5kIHRoZSBSZWFkaW5nIFN5c3RlbSBwYXNzZXMga2V5Ym9hcmQgZXZlbnRzIHRvIHRoZSBjb250ZW50LlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZlYXR1cmUgPT09IFwic3BpbmUtc2NyaXB0aW5nXCIpIHtcbiAgICAgICAgLy9TcGluZS1sZXZlbCBzY3JpcHRpbmcgaXMgc3VwcG9ydGVkLlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn0iLCIvLyAgQ3JlYXRlZCBieSBEbWl0cnkgTWFya3VzaGV2aWNoIChkbWl0cnltQGV2aWRlbnRwb2ludC5jb20pXG4vLyBcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuLypcblxuXG5cbiMgSGlnaGxpZ2h0aW5nIGluIFJlYWRpdW0gLSBBIHByaW1lclxuXG5QbGVhc2Ugbm90ZTpcblxuLSBvbmx5IHNpbXBsZSB0ZXh0IGhpZ2hsaWdodGluZyBpcyBjdXJyZW50bHkgc3VwcG9ydGVkXG4tIGl0J3MgdGhlIGpvYiBvZiB0aGUgcmVhZGluZyBzeXN0ZW0gdG8ga2VlcCB0cmFjayBvZiBhbm5vdGF0aW9ucy4gcmVhZGl1bS1qcyBzaW1wbHkgZGlzcGxheXMgeW91ciBhbm5vdGF0aW9ucy5cbi0gZnVsbCBDRklzIGZvciBhbm5vdGF0aW9ucyBhcmUgbm90IGN1cnJlbnRseSBhdmFpbGFibGUuIFdlIHVzZSBzbyBjYWxsZWQgXCJwYXJ0aWFsIENGSVwicywgYSB0dXBsZSBjb250YWluaW5nIGlkcmVmIG9mIHRoZSBzcGluZSBpdGVtIGFuZCB0aGUgQ0ZJIGRlZmluaXRpb24gcmVsYXRpdmUgdG8gdGhlIHJvb3Qgb2YgdGhlIHNwaW5lIGl0ZW0uXG5cbkN1cnJlbnRseSwgdGhlIEFQSSBleHBvc2VkIHZpYSBgUmVhZGVyVmlld2AgZXhwb3NlcyA0IGZ1bmN0aW9ucyBhbmQgMSBldmVuIHdoaWNoIHNob3VsZCBiZSBzdWZmaWNpZW50IGZvciBhIHNpbXBsZSBoaWdobGlnaHRpbmcgd29ya2Zsb3cuXG5cblxuIyBBUElcblxuRm9yIHRoZSBwdXJwb3NlcyBvZiB0aGUgZXhhbXBsZXMgYmVsb3csIGBSUmVhZGVyYCBpcyBhIHByZXZpb3VzbHkgaW5zdGFudGlhdGVkIGBSZWFkZXJWaWV3YCBpbnN0YW5jZS5cblxuXG4jIyBJcyBhbnl0aGluZyBzZWxlY3RlZCAoZ2V0Q3VycmVudFNlbGVjdGlvbkNmaSgpKVxuXG5CZWZvcmUgcHJvY2VlZGluZyB3aXRoIHRoZSBoaWdobGlnaHRpbmcgd29ya2Zsb3cgaXQgaXMgc29tZXRpbWVzIG5lY2Vzc2FyeSB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgdXNlciBoYXMgaW4gZmFjdCBzZWxlY3RlZCBhbnl0aGluZy4gVGhpcyBjYW4gYmUgYWNjb21wbGlzaGVkIHdpdGggdGhlIGZvbGxvd2luZzpcblxuXG5cdD4gUlJlYWRlci5nZXRDdXJyZW50U2VsZWN0aW9uQ2ZpKClcblx0T2JqZWN0IHtpZHJlZjogXCJpZC1pZDI2MDQ3NDNcIiwgY2ZpOiBcIi80LzIvNiwvMTo3NCwvMToxMjlcIn1cblxuVGhlIHJlc3BvbnNlIGNvbnRhaW5zIGEgcGFydGlhbCBDRkkgdGhhdCBpcyBzdWZmaWNpZW50IHRvIGNyZWF0ZSBhIGhpZ2hsaWdodCBiYXNlZCBvbiBzZWxlY3Rpb24uIElmIG5vdGhpbmcgaXMgc2VsZWN0ZWQgKnVuZGVmaW5lZCogaXMgcmV0dXJuZWQuIFxuXG5Zb3UgY2FuIGFsc28gdXNlIHBhcnRpYWwgQ2ZpIHdpdGggYG9wZW5TcGluZUl0ZW1FbGVtZW50Q2ZpKClgIHRvIG5hdmlnYXRlIHRvIHdoZXJlIHRoaXMgc2VsZWN0aW9uIGlzIGxhdGVyLlxuXG4jIyBIaWdobGlnaHRpbmcgKGFkZEhpZ2hsaWdodCBhbmQgYWRkU2VsZWN0aW9uSGlnaGxpZ2h0KVxuXG5PbmNlIHdlJ3ZlIGRldGVybWluZWQgd2hhdCBuZWVkcyB0byBiZSBoaWdobGlnaHRlZCAoYnkgZ2VuZXJhdGluZyBhIHBhcnRpYWwgQ0ZJIGZyb20gYSBzZWxlY3Rpb24sIG9yIGhhdmluZyBhbiBleGlzdGluZyBwYXJ0aWFsIENGSSBzdG9yZWQgZXh0ZXJuYWxseSkgd2UgY2FuIGFkZCBpdCB0byB0aGUgcmVhZGVyIGJ5IGNhbGxpbmcgYGFkZEhpZ2hsaWdodCgpYDpcblxuXHQ+IFJSZWFkZXIuYWRkSGlnaGxpZ2h0KCdpZC1pZDI2MDQ3NDMnLCBcIi80LzIvNiwvMTo3NCwvMToxMjlcIiwgMTIzLCBcImhpZ2hsaWdodFwiKVxuXHRPYmplY3Qge0NGSTogXCIvNC8yLzYsLzE6NzQsLzE6MTI5XCIsIHNlbGVjdGVkRWxlbWVudHM6IEFycmF5WzFdLCBpZHJlZjogXCJpZC1pZDI2MDQ3NDNcIn1cblxuKmFkZEhpZ2hsaWdoKnQgdGFrZXMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuXG4tICppZC1pZDI2MDQ3NDMqIC0gYGlkcmVmYCBpcyB0aGUgaWRyZWYgdmFsdWUgZnJvbSBgZ2V0Q3VycmVudFNlbGVjdGlvbkNmaSgpXG4tICogLzQvMi82LC8xOjc0LC8xOjEyOSogLSBgY2ZpYCBpcyB0aGUgY2ZpIHZhbHVlIGZyb20gYGdldEN1cnJlbnRTZWxlY3Rpb25DZmkoKVxuLSAqMTIzKiAtIGBpZGAgaXMgdGhlIHVuaXF1ZSBpZCB0aGF0IGRlZmluZXMgdGhpcyBhbm5vdGF0aW9uXG4tICpoaWdobGlnaHQqIC0gJ3R5cGUnIG9mIGFubm90YXRpb24uIG9ubHkgJ2hpZ2hsaWdodCcgaXMgY3VycmVudGx5IHN1cHBvcnRlZC5cblxuIyMjIGFkZFNlbGVjdGlvSGlnaGxpZ2h0XG5cbkFsdGVybmF0aXZlbHksIHlvdSBjYW4gY2FsbCBhZGRTZWxlY3Rpb25IaWdobGlnaHQoKS4gSXQgY29tYmluZXMgYm90aCBnZXRDdXJyZW50U2VsZWN0aW9uQ2ZpKCkgYW5kIGFkZEhpZ2hsaWdodCBpbnRvIG9uZSBjYWxsOlxuXG5cdD4gUlJlYWRlci5hZGRTZWxlY3Rpb25IaWdobGlnaHQoMTI0LCBcImhpZ2hsaWdodFwiKVxuXHRPYmplY3Qge0NGSTogXCIvNC8yLzQsLzE6NDM3LC8xOjUwM1wiLCBzZWxlY3RlZEVsZW1lbnRzOiBBcnJheVsxXSwgaWRyZWY6IFwiaWQtaWQyNjA0NzQzXCJ9XG5cbk5vdGUgdGhhdCBpdCBwcm92aWRlcyBubyB2YWxpZGF0aW9uLiBJZiBub3RoaW5nIGlzIHNlbGVjdGVkLCBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cblxuXG4jIyBSZW1vdmluZyBoaWdobGlnaHRzIFxuXG5UbyByZW1vdmUgdGhlIGhpZ2hsaWdodCwgY2FsbCBgcmVtb3ZlSGlnaGxpZ2h0YDpcblxuXHQ+IFJSZWFkZXIucmVtb3ZlSGlnaGxpZ2h0KDEyMylcblx0dW5kZWZpbmVkXG5cblxuIyBIYW5kbGluZyBhbm5vdGF0aW9uIGNsaWNrIGV2ZW50c1xuXG5XaGVuIGEgdXNlciBjbGlja3Mgb24gYSBoaWdobGlnaHQgYGFubm90YXRpb25DbGlja2VkYCBldmVudCBpcyBkaXNwYXRjaGVkIHdpdGggdGhlIGZvbGxvd2luZyBhcmd1bWVudHM6XG5cbi0gdHlwZSBvZiBhbm5vdGF0aW9uXG4tIGlkcmVmIG9mIHRoZSBzcGluZSBpdGVtXG4tIHBhcnRpYWwgQ2ZpIG9mIHRoZSBhbm5vdGF0aW9uXG4tIGFubm90YXRpb25kSWRcblxuXG5cdD4gUlJlYWRlci5vbignYW5ub3RhdGlvbkNsaWNrZWQnLCBmdW5jdGlvbih0eXBlLCBpZHJlZiwgY2ZpLCBhbm5vdGF0aW9uSWQpIHsgY29uc29sZS5sb2cgKHR5cGUsIGlkcmVmLCBjZmksIGFubm90YXRpb25JZCl9KTtcblx0UmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3IHtvbjogZnVuY3Rpb24sIG9uY2U6IGZ1bmN0aW9uLCBvZmY6IGZ1bmN0aW9uLCB0cmlnZ2VyOiBmdW5jdGlvbiwgbGlzdGVuVG86IGZ1bmN0aW9uPz8/fVxuXHRcblRoZW4gd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gdGhlIGhpZ2hsaWdodCB0aGUgZm9sbG93aW5nIHdpbGwgc2hvdyB1cCBpbiB0aGUgY29uc29sZTpcblxuXHRoaWdobGlnaHQgaWQtaWQyNjA0NzQzIC80LzIvNiwvMTo3NCwvMToxMjkgMTIzIFxuXHRcblxuKi9cblxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBFcHViQW5ub3RhdGlvbnMgPSByZXF1aXJlKCcuLi8uLi9lcHViLWFubm90YXRpb25zJylcblxuLyoqXG4gKlxuICogQHBhcmFtIHByb3h5T2JqXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEFubm90YXRpb25zTWFuYWdlcihwcm94eU9iaiwgb3B0aW9ucykge1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGxpdmVBbm5vdGF0aW9ucyA9IHt9O1xuICB2YXIgc3BpbmVzID0ge307XG4gIHZhciBwcm94eSA9IHByb3h5T2JqO1xuICB2YXIgYW5ub3RhdGlvbkNTU1VybCA9IG9wdGlvbnMuYW5ub3RhdGlvbkNTU1VybDtcblxuICBpZiAoIWFubm90YXRpb25DU1NVcmwpIHtcbiAgICBjb25zb2xlLndhcm4oXCJXQVJOSU5HISBBbm5vdGF0aW9ucyBDU1Mgbm90IHN1cHBsaWVkLiBIaWdobGlnaHRpbmcgaXMgbm90IGdvaW5nIHRvIHdvcmsuXCIpO1xuICB9XG5cbiAgXy5leHRlbmQoc2VsZiwgQmFja2JvbmUuRXZlbnRzKTtcblxuICAvLyB3ZSB3YW50IHRvIGJ1YmJsZSB1cCBhbGwgb2YgdGhlIGV2ZW50cyB0aGF0IGFubm90YXRpb25zIG1vZHVsZSBtYXkgdHJpZ2dlciB1cC5cbiAgdGhpcy5vbihcImFsbFwiLCBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgLy8gbWFuZ2xlIGFubm90YXRpb25DbGlja2VkIGV2ZW50LiBXaGF0IHJlYWxseSBuZWVkcyB0byBoYXBwZW4gaXMsIHRoZSBhbm5vdGF0aW9uX21vZHVsZSBuZWVkcyB0byByZXR1cm4gYSBcbiAgICAvLyBiYXJlIENmaSwgYW5kIHRoaXMgY2xhc3Mgc2hvdWxkIGFwcGVuZCB0aGUgaWRyZWYuXG4gICAgdmFyIGFubm90YXRpb25DbGlja2VkRXZlbnQgPSAnYW5ub3RhdGlvbkNsaWNrZWQnO1xuICAgIGlmIChhcmdzLmxlbmd0aCAmJiBhcmdzWzBdID09PSBhbm5vdGF0aW9uQ2xpY2tlZEV2ZW50KSB7XG4gICAgICBmb3IgKHZhciBzcGluZUluZGV4IGluIGxpdmVBbm5vdGF0aW9ucykge1xuICAgICAgICB2YXIgalF1ZXJ5RXZlbnQgPSBhcmdzWzRdO1xuICAgICAgICB2YXIgYW5ub3RhdGlvbklkID0gYXJnc1szXTtcbiAgICAgICAgdmFyIGZ1bGxGYWtlQ2ZpID0gYXJnc1syXTtcbiAgICAgICAgdmFyIHR5cGUgPSBhcmdzWzFdO1xuICAgICAgICBpZiAobGl2ZUFubm90YXRpb25zW3NwaW5lSW5kZXhdLmdldEhpZ2hsaWdodChhbm5vdGF0aW9uSWQpKSB7XG4gICAgICAgICAgdmFyIGlkcmVmID0gc3BpbmVzW3NwaW5lSW5kZXhdLmlkcmVmO1xuICAgICAgICAgIHZhciBwYXJ0aWFsQ2ZpID0gZ2V0UGFydGlhbENmaShmdWxsRmFrZUNmaSk7XG4gICAgICAgICAgYXJncyA9IFthbm5vdGF0aW9uQ2xpY2tlZEV2ZW50LCB0eXBlLCBpZHJlZiwgcGFydGlhbENmaSwgYW5ub3RhdGlvbklkLCBqUXVlcnlFdmVudF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZlsndHJpZ2dlciddLmFwcGx5KHByb3h5LCBhcmdzKTtcbiAgfSk7XG5cbiAgdGhpcy5hdHRhY2hBbm5vdGF0aW9ucyA9IGZ1bmN0aW9uKCRpZnJhbWUsIHNwaW5lSXRlbSkge1xuICAgIHZhciBlcHViRG9jdW1lbnQgPSAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcbiAgICBsaXZlQW5ub3RhdGlvbnNbc3BpbmVJdGVtLmluZGV4XSA9IG5ldyBFcHViQW5ub3RhdGlvbnMoZXB1YkRvY3VtZW50LCBzZWxmLCBhbm5vdGF0aW9uQ1NTVXJsKTtcbiAgICBzcGluZXNbc3BpbmVJdGVtLmluZGV4XSA9IHNwaW5lSXRlbTtcblxuICAgIC8vIGNoZWNrIHRvIHNlZSB3aGljaCBzcGluZSBpbmRlY2llcyBjYW4gYmUgY3VsbGVkIGRlcGVuZGluZyBvbiB0aGUgZGlzdGFuY2UgZnJvbSBjdXJyZW50IHNwaW5lIGl0ZW1cbiAgICBmb3IgKHZhciBzcGluZUluZGV4IGluIGxpdmVBbm5vdGF0aW9ucykge1xuICAgICAgaWYgKE1hdGguYWJzKHNwaW5lSW5kZXggLSBzcGluZUluZGV4LmluZGV4KSA+IDMpIHtcbiAgICAgICAgZGVsZXRlIGxpdmVBbm5vdGF0aW9uc1tzcGluZUluZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cblxuICB0aGlzLmdldEN1cnJlbnRTZWxlY3Rpb25DZmkgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBzcGluZSBpbiBsaXZlQW5ub3RhdGlvbnMpIHtcbiAgICAgIHZhciBhbm5vdGF0aW9uc0ZvclZpZXcgPSBsaXZlQW5ub3RhdGlvbnNbc3BpbmVdO1xuICAgICAgdmFyIHBhcnRpYWxDZmkgPSBhbm5vdGF0aW9uc0ZvclZpZXcuZ2V0Q3VycmVudFNlbGVjdGlvbkNGSSgpO1xuICAgICAgaWYgKHBhcnRpYWxDZmkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBcImlkcmVmXCI6IHNwaW5lc1tzcGluZV0uaWRyZWYsXG4gICAgICAgICAgXCJjZmlcIjogcGFydGlhbENmaVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHRoaXMuYWRkU2VsZWN0aW9uSGlnaGxpZ2h0ID0gZnVuY3Rpb24oaWQsIHR5cGUpIHtcbiAgICBmb3IgKHNwaW5lIGluIGxpdmVBbm5vdGF0aW9ucykge1xuICAgICAgdmFyIGFubm90YXRpb25zRm9yVmlldyA9IGxpdmVBbm5vdGF0aW9uc1tzcGluZV07XG4gICAgICBpZiAoYW5ub3RhdGlvbnNGb3JWaWV3LmdldEN1cnJlbnRTZWxlY3Rpb25DRkkoKSkge1xuICAgICAgICB2YXIgYW5ub3RhdGlvbiA9IGFubm90YXRpb25zRm9yVmlldy5hZGRTZWxlY3Rpb25IaWdobGlnaHQoaWQsIHR5cGUpO1xuICAgICAgICBhbm5vdGF0aW9uLmlkcmVmID0gc3BpbmVzW3NwaW5lXS5pZHJlZjtcbiAgICAgICAgcmV0dXJuIGFubm90YXRpb247XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5hZGRIaWdobGlnaHQgPSBmdW5jdGlvbihzcGluZUlkUmVmLCBwYXJ0aWFsQ2ZpLCBpZCwgdHlwZSwgc3R5bGVzKSB7XG4gICAgZm9yICh2YXIgc3BpbmUgaW4gbGl2ZUFubm90YXRpb25zKSB7XG4gICAgICBpZiAoc3BpbmVzW3NwaW5lXS5pZHJlZiA9PT0gc3BpbmVJZFJlZikge1xuICAgICAgICB2YXIgZmFrZUNmaSA9IFwiZXB1YmNmaSgvOTkhXCIgKyBwYXJ0aWFsQ2ZpICsgXCIpXCI7XG4gICAgICAgIHZhciBhbm5vdGF0aW9uc0ZvclZpZXcgPSBsaXZlQW5ub3RhdGlvbnNbc3BpbmVdO1xuICAgICAgICB2YXIgYW5ub3RhdGlvbiA9IGFubm90YXRpb25zRm9yVmlldy5hZGRIaWdobGlnaHQoZmFrZUNmaSwgaWQsIHR5cGUsIHN0eWxlcyk7XG4gICAgICAgIGFubm90YXRpb24uaWRyZWYgPSBzcGluZUlkUmVmO1xuICAgICAgICBhbm5vdGF0aW9uLkNGSSA9IGdldFBhcnRpYWxDZmkoYW5ub3RhdGlvbi5DRkkpO1xuICAgICAgICByZXR1cm4gYW5ub3RhdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLnJlbW92ZUhpZ2hsaWdodCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICBmb3IgKHZhciBzcGluZSBpbiBsaXZlQW5ub3RhdGlvbnMpIHtcbiAgICAgIHZhciBhbm5vdGF0aW9uc0ZvclZpZXcgPSBsaXZlQW5ub3RhdGlvbnNbc3BpbmVdO1xuICAgICAgcmVzdWx0ID0gYW5ub3RhdGlvbnNGb3JWaWV3LnJlbW92ZUhpZ2hsaWdodChpZCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cblxuXG4gIGZ1bmN0aW9uIGdldFBhcnRpYWxDZmkoQ0ZJKSB7XG4gICAgdmFyIGNmaVdyYXBwZXJQYXR0ZXJuID0gbmV3IFJlZ0V4cChcIl4uKiFcIilcbiAgICAgIC8vIHJlbW92ZSBlcHViY2ZpKCBhbmQgaW5kaXJlY3Rpb24gc3RlcFxuICAgIHZhciBwYXJ0aWFsbHlOYWtlZENmaSA9IENGSS5yZXBsYWNlKGNmaVdyYXBwZXJQYXR0ZXJuLCBcIlwiKTtcbiAgICAvLyByZW1vdmUgbGFzdCBwYXJlblxuICAgIHZhciBuYWtlZENmaSA9IHBhcnRpYWxseU5ha2VkQ2ZpLnN1YnN0cmluZygwLCBwYXJ0aWFsbHlOYWtlZENmaS5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gbmFrZWRDZmk7XG4gIH1cblxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFubm90YXRpb25zTWFuYWdlciIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vIE1vZGlmaWVkIGJ5IERhbmllbCBXZWNrLCBBbmRyZXkgS2F2YXJtYVxuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG5cbnZhciBfaU9TID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvKGlQYWR8aVBob25lfGlQb2QpL2cpID8gdHJ1ZSA6IGZhbHNlO1xudmFyIF9BbmRyb2lkID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2FuZHJvaWQnKSA+IC0xO1xudmFyIF9pc01vYmlsZSA9IF9pT1MgfHwgX0FuZHJvaWQ7XG5cbi8vdmFyIF9pc1JlYWRpdW1KUyA9IHR5cGVvZiB3aW5kb3cucmVxdWlyZWpzICE9PSBcInVuZGVmaW5lZFwiO1xuXG52YXIgREVCVUcgPSBmYWxzZTtcblxudmFyIF9hdWRpb0VsZW1lbnQgPSBuZXcgQXVkaW8oKTtcblxuaWYgKERFQlVHKSB7XG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIjApIGxvYWRcIik7XG4gIH0pO1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRzdGFydFwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiMSkgbG9hZHN0YXJ0XCIpO1xuICB9KTtcblxuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkdXJhdGlvbmNoYW5nZVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiMikgZHVyYXRpb25jaGFuZ2VcIik7XG4gIH0pO1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlZG1ldGFkYXRhXCIsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUuZGVidWcoXCIzKSBsb2FkZWRtZXRhZGF0YVwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVkZGF0YVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiNCkgbG9hZGVkZGF0YVwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIjUpIHByb2dyZXNzXCIpO1xuICB9KTtcblxuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjYW5wbGF5XCIsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUuZGVidWcoXCI2KSBjYW5wbGF5XCIpO1xuICB9KTtcblxuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjYW5wbGF5dGhyb3VnaFwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmRlYnVnKFwiNykgY2FucGxheXRocm91Z2hcIik7XG4gIH0pO1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBsYXlcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIjgpIHBsYXlcIik7XG4gIH0pO1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBhdXNlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUuZGVidWcoXCI5KSBwYXVzZVwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIjEwKSBlbmRlZFwiKTtcbiAgfSk7XG5cbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Vla2VkXCIsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUuZGVidWcoXCJYKSBzZWVrZWRcIik7XG4gIH0pO1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRpbWV1cGRhdGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIlkpIHRpbWV1cGRhdGVcIik7XG4gIH0pO1xuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNlZWtpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIlopIHNlZWtpbmdcIik7XG4gIH0pO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gb25TdGF0dXNDaGFuZ2VkXG4gKiBAcGFyYW0gb25Qb3NpdGlvbkNoYW5nZWRcbiAqIEBwYXJhbSBvbkF1ZGlvRW5kZWRcbiAqIEBwYXJhbSBvbkF1ZGlvUGxheVxuICogQHBhcmFtIG9uQXVkaW9QYXVzZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEF1ZGlvUGxheWVyKG9uU3RhdHVzQ2hhbmdlZCwgb25Qb3NpdGlvbkNoYW5nZWQsIG9uQXVkaW9FbmRlZCwgb25BdWRpb1BsYXksIG9uQXVkaW9QYXVzZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy9fYXVkaW9FbGVtZW50LnNldEF0dHJpYnV0ZShcInByZWxvYWRcIiwgXCJhdXRvXCIpO1xuXG4gIHZhciBfY3VycmVudEVwdWJTcmMgPSB1bmRlZmluZWQ7XG5cbiAgdmFyIF9jdXJyZW50U21pbFNyYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jdXJyZW50U21pbFNyYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfY3VycmVudFNtaWxTcmM7XG4gIH07XG5cbiAgdmFyIF9yYXRlID0gMS4wO1xuICB0aGlzLnNldFJhdGUgPSBmdW5jdGlvbihyYXRlKSB7XG4gICAgX3JhdGUgPSByYXRlO1xuICAgIGlmIChfcmF0ZSA8IDAuNSkge1xuICAgICAgX3JhdGUgPSAwLjU7XG4gICAgfVxuICAgIGlmIChfcmF0ZSA+IDQuMCkge1xuICAgICAgX3JhdGUgPSA0LjA7XG4gICAgfVxuXG4gICAgX2F1ZGlvRWxlbWVudC5wbGF5YmFja1JhdGUgPSBfcmF0ZTtcbiAgfVxuICBzZWxmLnNldFJhdGUoX3JhdGUpO1xuICB0aGlzLmdldFJhdGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3JhdGU7XG4gIH1cblxuXG4gIHZhciBfdm9sdW1lID0gMTAwLjA7XG4gIHRoaXMuc2V0Vm9sdW1lID0gZnVuY3Rpb24odm9sdW1lKSB7XG4gICAgX3ZvbHVtZSA9IHZvbHVtZTtcbiAgICBpZiAoX3ZvbHVtZSA8IDAuMCkge1xuICAgICAgX3ZvbHVtZSA9IDAuMDtcbiAgICB9XG4gICAgaWYgKF92b2x1bWUgPiAxLjApIHtcbiAgICAgIF92b2x1bWUgPSAxLjA7XG4gICAgfVxuICAgIF9hdWRpb0VsZW1lbnQudm9sdW1lID0gX3ZvbHVtZTtcbiAgfVxuICBzZWxmLnNldFZvbHVtZShfdm9sdW1lKTtcbiAgdGhpcy5nZXRWb2x1bWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3ZvbHVtZTtcbiAgfVxuXG4gIHRoaXMucGxheSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5lcnJvcihcInRoaXMucGxheSgpXCIpO1xuICAgIH1cblxuICAgIGlmICghX2N1cnJlbnRFcHViU3JjKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc3RhcnRUaW1lcigpO1xuXG4gICAgc2VsZi5zZXRWb2x1bWUoX3ZvbHVtZSk7XG4gICAgc2VsZi5zZXRSYXRlKF9yYXRlKTtcblxuICAgIF9hdWRpb0VsZW1lbnQucGxheSgpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5lcnJvcihcInRoaXMucGF1c2UoKVwiKTtcbiAgICB9XG5cbiAgICBzdG9wVGltZXIoKTtcblxuICAgIF9hdWRpb0VsZW1lbnQucGF1c2UoKTtcbiAgfTtcblxuICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBvblBsYXksIGZhbHNlKTtcbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIG9uUGF1c2UsIGZhbHNlKTtcbiAgX2F1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIG9uRW5kZWQsIGZhbHNlKTtcblxuICBmdW5jdGlvbiBvblBsYXkoKSB7XG4gICAgb25TdGF0dXNDaGFuZ2VkKHtcbiAgICAgIGlzUGxheWluZzogdHJ1ZVxuICAgIH0pO1xuICAgIG9uQXVkaW9QbGF5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBvblBhdXNlKCkge1xuICAgIG9uQXVkaW9QYXVzZSgpO1xuICAgIG9uU3RhdHVzQ2hhbmdlZCh7XG4gICAgICBpc1BsYXlpbmc6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkVuZGVkKCkge1xuICAgIGlmIChfYXVkaW9FbGVtZW50Lm1vU2Vla2luZykge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJvbkVuZGVkKCkgc2tpcHBlZCAoc3RpbGwgc2Vla2luZy4uLilcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdG9wVGltZXIoKTtcblxuICAgIG9uQXVkaW9FbmRlZCgpO1xuICAgIG9uU3RhdHVzQ2hhbmdlZCh7XG4gICAgICBpc1BsYXlpbmc6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICB2YXIgX2ludGVydmFsVGltZXJTa2lwcyA9IDA7XG5cbiAgdmFyIF9pbnRlcnZhbFRpbWVyID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIHN0YXJ0VGltZXIoKSB7XG4gICAgaWYgKF9pbnRlcnZhbFRpbWVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX2ludGVydmFsVGltZXIgPSBzZXRJbnRlcnZhbChcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoX2F1ZGlvRWxlbWVudC5tb1NlZWtpbmcpIHtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcImludGVydmFsIHRpbWVyIHNraXBwZWQgKHN0aWxsIHNlZWtpbmcuLi4pXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9pbnRlcnZhbFRpbWVyU2tpcHMrKztcbiAgICAgICAgICBpZiAoX2ludGVydmFsVGltZXJTa2lwcyA+IDEwMDApIHtcbiAgICAgICAgICAgIF9pbnRlcnZhbFRpbWVyU2tpcHMgPSAwO1xuICAgICAgICAgICAgc3RvcFRpbWVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjdXJyZW50VGltZSA9IF9hdWRpb0VsZW1lbnQuY3VycmVudFRpbWU7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihleC5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICAgICAgICAgICAgICAgIGlmIChERUJVRylcbiAgICAgICAgLy8gICAgICAgICAgICAgICAge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhcImN1cnJlbnRUaW1lOiBcIiArIGN1cnJlbnRUaW1lKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50VGltZSkge1xuICAgICAgICAgIG9uUG9zaXRpb25DaGFuZ2VkKGN1cnJlbnRUaW1lLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSwgMjApO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcFRpbWVyKCkge1xuICAgIGlmIChfaW50ZXJ2YWxUaW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbChfaW50ZXJ2YWxUaW1lcik7XG4gICAgfVxuICAgIF9pbnRlcnZhbFRpbWVyID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdGhpcy5pc1BsYXlpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX2ludGVydmFsVGltZXIgIT09IHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwidGhpcy5yZXNldCgpXCIpO1xuICAgIH1cblxuICAgIHRoaXMucGF1c2UoKTtcblxuICAgIF9hdWRpb0VsZW1lbnQubW9TZWVraW5nID0gdW5kZWZpbmVkO1xuXG4gICAgX2N1cnJlbnRTbWlsU3JjID0gdW5kZWZpbmVkO1xuICAgIF9jdXJyZW50RXB1YlNyYyA9IHVuZGVmaW5lZDtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBfYXVkaW9FbGVtZW50LnNldEF0dHJpYnV0ZShcInNyY1wiLCBcIlwiKTtcbiAgICB9LCAxKTtcbiAgfTtcblxuXG4gIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRzdGFydFwiLCBmdW5jdGlvbigpIHtcbiAgICBfdG91Y2hJbml0ZWQgPSB0cnVlO1xuICB9KTtcbiAgdmFyIF90b3VjaEluaXRlZCA9IGZhbHNlO1xuICB0aGlzLnRvdWNoSW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghX2lPUykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChfdG91Y2hJbml0ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfdG91Y2hJbml0ZWQgPSB0cnVlO1xuXG4gICAgX2F1ZGlvRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCJ0b3VjaC9pbml0L2h0bWw1L2F1ZGlvLm1wM1wiKTtcbiAgICBfYXVkaW9FbGVtZW50LmxvYWQoKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIF9wbGF5SWQgPSAwO1xuXG4gIHZhciBfc2Vla1F1ZXVpbmcgPSAwO1xuXG4gIHRoaXMucGxheUZpbGUgPSBmdW5jdGlvbihzbWlsU3JjLCBlcHViU3JjLCBzZWVrQmVnaW4pIC8vZWxlbWVudFxuICAgIHtcbiAgICAgIF9wbGF5SWQrKztcbiAgICAgIGlmIChfcGxheUlkID4gOTk5OTkpIHtcbiAgICAgICAgX3BsYXlJZCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBwbGF5SWQgPSBfcGxheUlkO1xuXG4gICAgICBpZiAoX2F1ZGlvRWxlbWVudC5tb1NlZWtpbmcpIHtcbiAgICAgICAgX3NlZWtRdWV1aW5nKys7XG4gICAgICAgIGlmIChfc2Vla1F1ZXVpbmcgPiBNQVhfU0VFS19SRVRSSUVTKSB7XG4gICAgICAgICAgX3NlZWtRdWV1aW5nID0gMDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKFwidGhpcy5wbGF5RmlsZShcIiArIGVwdWJTcmMgKyBcIilcIiArIFwiIEBcIiArIHNlZWtCZWdpbiArIFwiIChQT1NUUE9ORSwgU0VFS0lORy4uLilcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYucGxheUZpbGUoc21pbFNyYywgZXB1YlNyYywgc2Vla0JlZ2luKTtcbiAgICAgICAgfSwgMjApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX2F1ZGlvRWxlbWVudC5tb1NlZWtpbmcgPSB7fTtcblxuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJ0aGlzLnBsYXlGaWxlKFwiICsgZXB1YlNyYyArIFwiKVwiICsgXCIgQFwiICsgc2Vla0JlZ2luICsgXCIgI1wiICsgcGxheUlkKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGF1ZGlvTmVlZHNOZXdTcmMgPSAhX2N1cnJlbnRFcHViU3JjIHx8IF9jdXJyZW50RXB1YlNyYyAhPT0gZXB1YlNyYztcblxuICAgICAgaWYgKCFhdWRpb05lZWRzTmV3U3JjKSB7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJ0aGlzLnBsYXlGaWxlKCkgU0FNRSBTUkNcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhdXNlKCk7XG5cbiAgICAgICAgX2N1cnJlbnRTbWlsU3JjID0gc21pbFNyYztcbiAgICAgICAgX2N1cnJlbnRFcHViU3JjID0gZXB1YlNyYztcblxuICAgICAgICBwbGF5U2Vla0N1cnJlbnRUaW1lKHNlZWtCZWdpbiwgcGxheUlkLCBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcInRoaXMucGxheUZpbGUoKSBORVcgU1JDXCIpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiX2N1cnJlbnRFcHViU3JjOiBcIiArIF9jdXJyZW50RXB1YlNyYyk7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJlcHViU3JjOiBcIiArIGVwdWJTcmMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICBfYXVkaW9FbGVtZW50Lm1vU2Vla2luZyA9IHt9O1xuXG4gICAgICBfY3VycmVudFNtaWxTcmMgPSBzbWlsU3JjO1xuICAgICAgX2N1cnJlbnRFcHViU3JjID0gZXB1YlNyYztcblxuICAgICAgLy9lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKF9hdWRpb0VsZW1lbnQsIGVsZW1lbnQpOyAvL2VsZW1lbnQucGFyZW50Tm9kZS5jaGlsZE5vZGVzWzBdKTtcblxuICAgICAgaWYgKCFfQW5kcm9pZCkge1xuICAgICAgICBfYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBvblBsYXlUb0ZvcmNlUHJlbG9hZCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICAkKF9hdWRpb0VsZW1lbnQpLm9uKF9yZWFkeUV2ZW50LCB7XG4gICAgICAgIHNlZWtCZWdpbjogc2Vla0JlZ2luLFxuICAgICAgICBwbGF5SWQ6IHBsYXlJZFxuICAgICAgfSwgb25SZWFkeVRvU2Vlayk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIF9hdWRpb0VsZW1lbnQuc2V0QXR0cmlidXRlKFwic3JjXCIsIF9jdXJyZW50RXB1YlNyYyk7XG4gICAgICAgIC8vIF9hdWRpb0VsZW1lbnQuc3JjID0gX2N1cnJlbnRFcHViU3JjO1xuICAgICAgICAvLyAkKF9hdWRpb0VsZW1lbnQpLmF0dHIoXCJzcmNcIiwgX2N1cnJlbnRFcHViU3JjKTtcblxuICAgICAgICAvLyBpZiAoX0FuZHJvaWQpXG4gICAgICAgIC8vIHtcbiAgICAgICAgLy8gICAgIF9hdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0Jywgb25SZWFkeVRvUGxheVRvRm9yY2VQcmVsb2FkLCBmYWxzZSk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBfYXVkaW9FbGVtZW50LmxvYWQoKTtcblxuICAgICAgICBpZiAoIV9BbmRyb2lkKSB7XG4gICAgICAgICAgcGxheVRvRm9yY2VQcmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDEpO1xuICAgIH07XG5cbiAgLy8gdmFyIG9uUmVhZHlUb1BsYXlUb0ZvcmNlUHJlbG9hZCA9IGZ1bmN0aW9uICgpXG4gIC8vIHtcbiAgLy8gICAgIF9hdWRpb0VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0Jywgb25SZWFkeVRvUGxheVRvRm9yY2VQcmVsb2FkLCBmYWxzZSk7XG4gIC8vICAgICBcbiAgLy8gICAgIGlmIChERUJVRylcbiAgLy8gICAgIHtcbiAgLy8gICAgICAgICBjb25zb2xlLmRlYnVnKFwib25SZWFkeVRvUGxheVRvRm9yY2VQcmVsb2FkXCIpO1xuICAvLyAgICAgfVxuICAvLyAgICAgXG4gIC8vICAgICBwbGF5VG9Gb3JjZVByZWxvYWQoKTtcbiAgLy8gfTtcblxuICB2YXIgcGxheVRvRm9yY2VQcmVsb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwicGxheVRvRm9yY2VQcmVsb2FkXCIpO1xuICAgIH1cblxuICAgIC8vX2F1ZGlvRWxlbWVudC52b2x1bWUgPSAwO1xuICAgIC8vX2F1ZGlvRWxlbWVudC5wbGF5KCk7XG4gICAgdmFyIHZvbCA9IF92b2x1bWU7XG4gICAgX3ZvbHVtZSA9IDA7XG4gICAgc2VsZi5wbGF5KCk7XG4gICAgX3ZvbHVtZSA9IHZvbDtcbiAgfTtcblxuICB2YXIgb25QbGF5VG9Gb3JjZVByZWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBfYXVkaW9FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXknLCBvblBsYXlUb0ZvcmNlUHJlbG9hZCwgZmFsc2UpO1xuXG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwib25QbGF5VG9Gb3JjZVByZWxvYWRcIik7XG4gICAgfVxuICAgIF9hdWRpb0VsZW1lbnQucGF1c2UoKTsgLy8gbm90ZTogaW50ZXJ2YWwgdGltZXIgY29udGludWVzIChpbW1lZGlhdGVseSBmb2xsb3dzIHNlbGYucGxheSgpKVxuICB9O1xuXG4gIHZhciBfcmVhZHlFdmVudCA9IF9BbmRyb2lkID8gXCJjYW5wbGF5dGhyb3VnaFwiIDogXCJjYW5wbGF5XCI7XG5cbiAgZnVuY3Rpb24gb25SZWFkeVRvU2Vla18oZXZlbnQpIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJvblJlYWR5VG9TZWVrICNcIiArIGV2ZW50LmRhdGEucGxheUlkKTtcbiAgICB9XG4gICAgcGxheVNlZWtDdXJyZW50VGltZShldmVudC5kYXRhLnNlZWtCZWdpbiwgZXZlbnQuZGF0YS5wbGF5SWQsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25SZWFkeVRvU2VlayhldmVudCkge1xuICAgICQoX2F1ZGlvRWxlbWVudCkub2ZmKF9yZWFkeUV2ZW50LCBvblJlYWR5VG9TZWVrKTtcblxuICAgIGlmICghX0FuZHJvaWQpIHtcbiAgICAgIG9uUmVhZHlUb1NlZWtfKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJvblJlYWR5VG9TZWVrIEFORFJPSUQgLi4uIHdhaXRpbmcgYSBiaXQgLi4uICNcIiArIGV2ZW50LmRhdGEucGxheUlkKTtcbiAgICAgIH1cblxuICAgICAgLy9zZWxmLnBsYXkoKTtcbiAgICAgIHBsYXlUb0ZvcmNlUHJlbG9hZCgpO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBvblJlYWR5VG9TZWVrXyhldmVudCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5U2Vla0N1cnJlbnRUaW1lKG5ld0N1cnJlbnRUaW1lLCBwbGF5SWQsIGlzTmV3U3JjKSB7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwicGxheVNlZWtDdXJyZW50VGltZSgpICNcIiArIHBsYXlJZCk7XG4gICAgfVxuXG4gICAgaWYgKG5ld0N1cnJlbnRUaW1lID09IDApIHtcbiAgICAgIG5ld0N1cnJlbnRUaW1lID0gMC4wMTtcbiAgICB9XG5cbiAgICBpZiAoTWF0aC5hYnMobmV3Q3VycmVudFRpbWUgLSBfYXVkaW9FbGVtZW50LmN1cnJlbnRUaW1lKSA8IDAuMykge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJwbGF5U2Vla0N1cnJlbnRUaW1lKCkgQ09OVElOVUVcIik7XG4gICAgICB9XG5cbiAgICAgIF9hdWRpb0VsZW1lbnQubW9TZWVraW5nID0gdW5kZWZpbmVkO1xuICAgICAgc2VsZi5wbGF5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGV2ID0gaXNOZXdTcmMgPyBfc2Vla2VkRXZlbnQxIDogX3NlZWtlZEV2ZW50MjtcblxuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcInBsYXlTZWVrQ3VycmVudFRpbWUoKSBORUVEIFNFRUssIEVWOiBcIiArIGV2KTtcbiAgICB9XG5cbiAgICBzZWxmLnBhdXNlKCk7XG5cbiAgICAkKF9hdWRpb0VsZW1lbnQpLm9uKGV2LCB7XG4gICAgICBuZXdDdXJyZW50VGltZTogbmV3Q3VycmVudFRpbWUsXG4gICAgICBwbGF5SWQ6IHBsYXlJZCxcbiAgICAgIGlzTmV3U3JjOiBpc05ld1NyY1xuICAgIH0sIG9uU2Vla2VkKTtcblxuICAgIHRyeSB7XG4gICAgICBfYXVkaW9FbGVtZW50LmN1cnJlbnRUaW1lID0gbmV3Q3VycmVudFRpbWU7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXgubWVzc2FnZSk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgX2F1ZGlvRWxlbWVudC5jdXJyZW50VGltZSA9IG5ld0N1cnJlbnRUaW1lO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXgubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBNQVhfU0VFS19SRVRSSUVTID0gMTA7XG4gIHZhciBfc2Vla2VkRXZlbnQxID0gX2lPUyA/IFwiY2FucGxheXRocm91Z2hcIiA6IFwic2Vla2VkXCI7IC8vXCJwcm9ncmVzc1wiXG4gIHZhciBfc2Vla2VkRXZlbnQyID0gX2lPUyA/IFwidGltZXVwZGF0ZVwiIDogXCJzZWVrZWRcIjtcblxuICBmdW5jdGlvbiBvblNlZWtlZChldmVudCkge1xuICAgIHZhciBldiA9IGV2ZW50LmRhdGEuaXNOZXdTcmMgPyBfc2Vla2VkRXZlbnQxIDogX3NlZWtlZEV2ZW50MjtcblxuICAgIHZhciBub3RSZXRyeSA9IGV2ZW50LmRhdGEuc2Vla1JldHJpZXMgPT0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5vdFJldHJ5IHx8IGV2ZW50LmRhdGEuc2Vla1JldHJpZXMgPT0gTUFYX1NFRUtfUkVUUklFUykgLy8gZmlyc3QgcmV0cnlcbiAgICB7XG4gICAgICAkKF9hdWRpb0VsZW1lbnQpLm9mZihldiwgb25TZWVrZWQpO1xuICAgIH1cblxuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIm9uU2Vla2VkKCkgI1wiICsgZXZlbnQuZGF0YS5wbGF5SWQgKyBcIiBGSVJTVD8gXCIgKyBub3RSZXRyeSArIFwiIEVWOiBcIiArIGV2KTtcbiAgICB9XG5cbiAgICB2YXIgY3VyVGltZSA9IF9hdWRpb0VsZW1lbnQuY3VycmVudFRpbWU7XG4gICAgdmFyIGRpZmYgPSBNYXRoLmFicyhldmVudC5kYXRhLm5ld0N1cnJlbnRUaW1lIC0gY3VyVGltZSk7XG5cbiAgICBpZiAoKG5vdFJldHJ5IHx8IGV2ZW50LmRhdGEuc2Vla1JldHJpZXMgPj0gMCkgJiZcbiAgICAgIGRpZmYgPj0gMSkge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJvblNlZWtlZCgpIHRpbWUgZGlmZjogXCIgKyBldmVudC5kYXRhLm5ld0N1cnJlbnRUaW1lICsgXCIgdnMuIFwiICsgY3VyVGltZSArIFwiIChcIiArIGRpZmYgKyBcIilcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChub3RSZXRyeSkge1xuICAgICAgICBldmVudC5kYXRhLnNlZWtSZXRyaWVzID0gTUFYX1NFRUtfUkVUUklFUztcblxuICAgICAgICAvLyBpZiAoREVCVUcpXG4gICAgICAgIC8vIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZGVidWcoXCJvblNlZWtlZCgpIGZhaWwgPT4gZmlyc3QgcmV0cnksIEVWOiBcIiArIF9zZWVrZWRFdmVudDIpO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgZXZlbnQuZGF0YS5pc05ld1NyYyA9IGZhbHNlO1xuICAgICAgICAvLyQoX2F1ZGlvRWxlbWVudCkub24oX3NlZWtlZEV2ZW50MiwgZXZlbnQuZGF0YSwgb25TZWVrZWQpO1xuICAgICAgfVxuXG4gICAgICAvL2Vsc2VcbiAgICAgIHtcbiAgICAgICAgZXZlbnQuZGF0YS5zZWVrUmV0cmllcy0tO1xuXG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJvblNlZWtlZCgpIEZBSUwgPT4gcmV0cnkgYWdhaW4gKHRpbWVvdXQpXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBvblNlZWtlZChldmVudCk7XG4gICAgICAgIH0sIF9BbmRyb2lkID8gMTAwMCA6IDIwMCk7XG4gICAgICB9XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIF9hdWRpb0VsZW1lbnQucGF1c2UoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBfYXVkaW9FbGVtZW50LmN1cnJlbnRUaW1lID0gZXZlbnQuZGF0YS5uZXdDdXJyZW50VGltZTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGV4Lm1lc3NhZ2UpO1xuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIF9hdWRpb0VsZW1lbnQuY3VycmVudFRpbWUgPSBldmVudC5kYXRhLm5ld0N1cnJlbnRUaW1lO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihleC5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCA0KTtcbiAgICAgICAgfVxuICAgICAgfSwgNSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwib25TZWVrZWQoKSBTVEFURTpcIik7XG4gICAgICAgIGNvbnNvbGUuZGVidWcobm90UmV0cnkpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKGV2ZW50LmRhdGEuc2Vla1JldHJpZXMpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKGRpZmYpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlmZiA+PSAxKSB7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJvblNlZWtlZCgpIEFCT1JULCBUUlkgQUdBSU4gRlJPTSBTQ1JBVENIIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzbWlsU3JjID0gX2N1cnJlbnRTbWlsU3JjO1xuICAgICAgICB2YXIgZXB1YlNyYyA9IF9jdXJyZW50RXB1YlNyYztcbiAgICAgICAgdmFyIHNlZWtCZWdpbiA9IGV2ZW50LmRhdGEubmV3Q3VycmVudFRpbWU7XG5cbiAgICAgICAgc2VsZi5yZXNldCgpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5wbGF5RmlsZShzbWlsU3JjLCBlcHViU3JjLCBzZWVrQmVnaW4pO1xuICAgICAgICB9LCAxMCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIm9uU2Vla2VkKCkgT0tBWSA9PiBwbGF5IVwiKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnQuZGF0YS5zZWVrUmV0cmllcyA9IHVuZGVmaW5lZDtcblxuICAgICAgc2VsZi5wbGF5KCk7XG5cbiAgICAgIF9hdWRpb0VsZW1lbnQubW9TZWVraW5nID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdWRpb1BsYXllciIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIFJlY3QgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3JlY3QnKVxuXG4vKipcbiAqIENGSSBuYXZpZ2F0aW9uIGhlbHBlciBjbGFzc1xuICpcbiAqIEBwYXJhbSAkdmlld3BvcnRcbiAqIEBwYXJhbSAkaWZyYW1lXG4gKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIHNldHRpbmdzIGZvciBOYXZpZ2F0aW9uTG9naWMgb2JqZWN0XG4gKiAgICAgIC0gcmVjdGFuZ2xlQmFzZWQgICAgSWYgdHJ1dGh5LCBjbGllbnRSZWN0LWJhc2VkIGdlb21ldHJ5IHdpbGwgYmUgdXNlZFxuICogICAgICAtIHBhZ2luYXRpb25JbmZvICAgIExheW91dCBkZXRhaWxzLCB1c2VkIGJ5IGNsaWVudFJlY3QtYmFzZWQgZ2VvbWV0cnlcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIENmaU5hdmlnYXRpb25Mb2dpYygkdmlld3BvcnQsICRpZnJhbWUsIG9wdGlvbnMpIHtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB0aGlzLmdldFJvb3RFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICByZXR1cm4gJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9O1xuXG4gIC8vIEZJWEVEIExBWU9VVCBpZiAoIW9wdGlvbnMucmVjdGFuZ2xlQmFzZWQpIGFsZXJ0KFwiISEhb3B0aW9ucy5yZWN0YW5nbGVCYXNlZFwiKTtcblxuICB2YXIgdmlzaWJpbGl0eUNoZWNrZXJGdW5jID0gb3B0aW9ucy5yZWN0YW5nbGVCYXNlZCA/IGNoZWNrVmlzaWJpbGl0eUJ5UmVjdGFuZ2xlcyA6IGNoZWNrVmlzaWJpbGl0eUJ5VmVydGljYWxPZmZzZXRzO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgcGFnZXMgYXJlIHJlbmRlcmVkIHJpZ2h0LXRvLWxlZnRcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBpc1BhZ2VQcm9ncmVzc2lvblJpZ2h0VG9MZWZ0KCkge1xuICAgIHJldHVybiBvcHRpb25zLnBhZ2luYXRpb25JbmZvICYmICEhb3B0aW9ucy5wYWdpbmF0aW9uSW5mby5yaWdodFRvTGVmdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgcGFnZXMgYXJlIHJlbmRlcmVkIHdpdGggdmVydGljYWwgd3JpdGluZyBtb2RlXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gaXNWZXJ0aWNhbFdyaXRpbmdNb2RlKCkge1xuICAgIHJldHVybiBvcHRpb25zLnBhZ2luYXRpb25JbmZvICYmICEhb3B0aW9ucy5wYWdpbmF0aW9uSW5mby5pc1ZlcnRpY2FsV3JpdGluZ01vZGU7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgYSAoZnVsbHkgYWRqdXN0ZWQpIHJlY3RhbmdsZSBpcyBhdCBsZWFzdCBwYXJ0bHkgdmlzaWJsZVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZnJhbWVEaW1lbnNpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzVndtXSAgICAgICAgICAgaXNWZXJ0aWNhbFdyaXRpbmdNb2RlXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gaXNSZWN0VmlzaWJsZShyZWN0LCBmcmFtZURpbWVuc2lvbnMsIGlzVndtKSB7XG4gICAgaWYgKGlzVndtKSB7XG4gICAgICByZXR1cm4gcmVjdC50b3AgPj0gMCAmJiByZWN0LnRvcCA8IGZyYW1lRGltZW5zaW9ucy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiByZWN0LmxlZnQgPj0gMCAmJiByZWN0LmxlZnQgPCBmcmFtZURpbWVuc2lvbnMud2lkdGg7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogUmV0cmlldmVzIF9jdXJyZW50XyBmdWxsIHdpZHRoIG9mIGEgY29sdW1uIChpbmNsdWRpbmcgaXRzIGdhcClcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn0gRnVsbCB3aWR0aCBvZiBhIGNvbHVtbiBpbiBwaXhlbHNcbiAgICovXG4gIGZ1bmN0aW9uIGdldENvbHVtbkZ1bGxXaWR0aCgpIHtcblxuICAgIGlmICghb3B0aW9ucy5wYWdpbmF0aW9uSW5mbyB8fCBpc1ZlcnRpY2FsV3JpdGluZ01vZGUoKSkge1xuICAgICAgcmV0dXJuICRpZnJhbWUud2lkdGgoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucy5wYWdpbmF0aW9uSW5mby5jb2x1bW5XaWR0aCArIG9wdGlvbnMucGFnaW5hdGlvbkluZm8uY29sdW1uR2FwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqXG4gICAqIFJldHJpZXZlcyBfY3VycmVudF8gb2Zmc2V0IG9mIGEgdmlld3BvcnRcbiAgICogKHJlbGF0ZWQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgY2hhcHRlcilcbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZpc2libGVDb250ZW50T2Zmc2V0cygpIHtcbiAgICBpZiAoaXNWZXJ0aWNhbFdyaXRpbmdNb2RlKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogKG9wdGlvbnMucGFnaW5hdGlvbkluZm8gPyBvcHRpb25zLnBhZ2luYXRpb25JbmZvLnBhZ2VPZmZzZXQgOiAwKVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IChvcHRpb25zLnBhZ2luYXRpb25JbmZvID8gb3B0aW9ucy5wYWdpbmF0aW9uSW5mby5wYWdlT2Zmc2V0IDogMCkgKiAoaXNQYWdlUHJvZ3Jlc3Npb25SaWdodFRvTGVmdCgpID8gLTEgOiAxKVxuICAgIH07XG4gIH1cblxuICAvLyBPbGQgKG9mZnNldFRvcC1iYXNlZCkgYWxnb3JpdGhtLCB1c2VmdWwgaW4gdG9wLXRvLWJvdHRvbSBsYXlvdXRzXG4gIGZ1bmN0aW9uIGNoZWNrVmlzaWJpbGl0eUJ5VmVydGljYWxPZmZzZXRzKFxuICAgICRlbGVtZW50LCB2aXNpYmxlQ29udGVudE9mZnNldHMsIHNob3VsZENhbGN1bGF0ZVZpc2liaWxpdHlPZmZzZXQpIHtcblxuICAgIHZhciBlbGVtZW50UmVjdCA9IFJlY3QuZnJvbUVsZW1lbnQoJGVsZW1lbnQpO1xuICAgIGlmIChfLmlzTmFOKGVsZW1lbnRSZWN0LmxlZnQpKSB7XG4gICAgICAvLyB0aGlzIGlzIGFjdHVhbGx5IGEgcG9pbnQgZWxlbWVudCwgZG9lc250IGhhdmUgYSBib3VuZGluZyByZWN0YW5nbGVcbiAgICAgIGVsZW1lbnRSZWN0ID0gbmV3IFJlY3QoXG4gICAgICAgICRlbGVtZW50LnBvc2l0aW9uKCkudG9wLCAkZWxlbWVudC5wb3NpdGlvbigpLmxlZnQsIDAsIDApO1xuICAgIH1cbiAgICB2YXIgdG9wT2Zmc2V0ID0gdmlzaWJsZUNvbnRlbnRPZmZzZXRzLnRvcCB8fCAwO1xuICAgIHZhciBpc0JlbG93VmlzaWJsZVRvcCA9IGVsZW1lbnRSZWN0LmJvdHRvbSgpID4gdG9wT2Zmc2V0O1xuICAgIHZhciBpc0Fib3ZlVmlzaWJsZUJvdHRvbSA9IHZpc2libGVDb250ZW50T2Zmc2V0cy5ib3R0b20gIT09IHVuZGVmaW5lZCA/IGVsZW1lbnRSZWN0LnRvcCA8IHZpc2libGVDb250ZW50T2Zmc2V0cy5ib3R0b20gOiB0cnVlOyAvL3RoaXMgY2hlY2sgYWx3YXlzIHBhc3NlZCwgaWYgY29ycmVzcG9uZGluZyBvZmZzZXQgaXNuJ3Qgc2V0XG5cbiAgICB2YXIgcGVyY2VudE9mRWxlbWVudEhlaWdodCA9IDA7XG4gICAgaWYgKGlzQmVsb3dWaXNpYmxlVG9wICYmIGlzQWJvdmVWaXNpYmxlQm90dG9tKSB7IC8vIGVsZW1lbnQgaXMgdmlzaWJsZVxuICAgICAgaWYgKCFzaG91bGRDYWxjdWxhdGVWaXNpYmlsaXR5T2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiAxMDA7XG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnRSZWN0LnRvcCA8PSB0b3BPZmZzZXQpIHtcbiAgICAgICAgcGVyY2VudE9mRWxlbWVudEhlaWdodCA9IE1hdGguY2VpbChcbiAgICAgICAgICAxMDAgKiAodG9wT2Zmc2V0IC0gZWxlbWVudFJlY3QudG9wKSAvIGVsZW1lbnRSZWN0LmhlaWdodFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGJlbG93IGdvZXMgYW5vdGhlciBhbGdvcml0aG0sIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gZ2V0VmlzaWJsZUVsZW1lbnRzIHBhdHRlcm4sXG4gICAgICAgIC8vIGJ1dCBpdCBzZWVtcyB0byBiZSBhIGJpdCBpbmNvcnJlY3RcbiAgICAgICAgLy8gKGFzIHNwYXRpYWwgb2Zmc2V0IHNob3VsZCBiZSBtZWFzdXJlZCBhdCB0aGUgZmlyc3QgdmlzaWJsZSBwb2ludCBvZiB0aGUgZWxlbWVudCk6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHZhciB2aXNpYmxlVG9wID0gTWF0aC5tYXgoZWxlbWVudFJlY3QudG9wLCB2aXNpYmxlQ29udGVudE9mZnNldHMudG9wKTtcbiAgICAgICAgLy8gdmFyIHZpc2libGVCb3R0b20gPSBNYXRoLm1pbihlbGVtZW50UmVjdC5ib3R0b20oKSwgdmlzaWJsZUNvbnRlbnRPZmZzZXRzLmJvdHRvbSk7XG4gICAgICAgIC8vIHZhciB2aXNpYmxlSGVpZ2h0ID0gdmlzaWJsZUJvdHRvbSAtIHZpc2libGVUb3A7XG4gICAgICAgIC8vIHZhciBwZXJjZW50VmlzaWJsZSA9IE1hdGgucm91bmQoKHZpc2libGVIZWlnaHQgLyBlbGVtZW50UmVjdC5oZWlnaHQpICogMTAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAxMDAgLSBwZXJjZW50T2ZFbGVtZW50SGVpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gMDsgLy8gZWxlbWVudCBpc24ndCB2aXNpYmxlXG4gIH1cblxuICAvKipcbiAgICogTmV3IChyZWN0YW5nbGUtYmFzZWQpIGFsZ29yaXRobSwgdXNlZnVsIGluIG11bHRpLWNvbHVtbiBsYXlvdXRzXG4gICAqXG4gICAqIE5vdGU6IHRoZSBzZWNvbmQgcGFyYW0gKHByb3BzKSBpcyBpZ25vcmVkIGludGVudGlvbmFsbHlcbiAgICogKG5vIG5lZWQgdG8gdXNlIHRob3NlIGluIG5vcm1hbGl6YXRpb24pXG4gICAqXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gX3Byb3BzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkQ2FsY3VsYXRlVmlzaWJpbGl0eVBlcmNlbnRhZ2VcbiAgICogQHJldHVybnMge251bWJlcnxudWxsfVxuICAgKiAgICAgIDAgZm9yIG5vbi12aXNpYmxlIGVsZW1lbnRzLFxuICAgKiAgICAgIDAgPCBuIDw9IDEwMCBmb3IgdmlzaWJsZSBlbGVtZW50c1xuICAgKiAgICAgICh3aWxsIGp1c3QgZ2l2ZSAxMDAsIGlmIGBzaG91bGRDYWxjdWxhdGVWaXNpYmlsaXR5UGVyY2VudGFnZWAgPT4gZmFsc2UpXG4gICAqICAgICAgbnVsbCBmb3IgZWxlbWVudHMgd2l0aCBkaXNwbGF5Om5vbmVcbiAgICovXG4gIGZ1bmN0aW9uIGNoZWNrVmlzaWJpbGl0eUJ5UmVjdGFuZ2xlcyhcbiAgICAkZWxlbWVudCwgX3Byb3BzLCBzaG91bGRDYWxjdWxhdGVWaXNpYmlsaXR5UGVyY2VudGFnZSkge1xuXG4gICAgdmFyIGVsZW1lbnRSZWN0YW5nbGVzID0gZ2V0Tm9ybWFsaXplZFJlY3RhbmdsZXMoJGVsZW1lbnQpO1xuICAgIHZhciBjbGllbnRSZWN0YW5nbGVzID0gZWxlbWVudFJlY3RhbmdsZXMuY2xpZW50UmVjdGFuZ2xlcztcbiAgICBpZiAoY2xpZW50UmVjdGFuZ2xlcy5sZW5ndGggPT09IDApIHsgLy8gZWxlbWVudHMgd2l0aCBkaXNwbGF5Om5vbmUsIGV0Yy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBpc1J0bCA9IGlzUGFnZVByb2dyZXNzaW9uUmlnaHRUb0xlZnQoKTtcbiAgICB2YXIgaXNWd20gPSBpc1ZlcnRpY2FsV3JpdGluZ01vZGUoKTtcbiAgICB2YXIgY29sdW1uRnVsbFdpZHRoID0gZ2V0Q29sdW1uRnVsbFdpZHRoKCk7XG4gICAgdmFyIGZyYW1lRGltZW5zaW9ucyA9IHtcbiAgICAgIHdpZHRoOiAkaWZyYW1lLndpZHRoKCksXG4gICAgICBoZWlnaHQ6ICRpZnJhbWUuaGVpZ2h0KClcbiAgICB9O1xuXG4gICAgaWYgKGNsaWVudFJlY3RhbmdsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAvLyBiZWNhdXNlIG9mIHdlYmtpdCBpbmNvbnNpc3RlbmN5LCB0aGF0IHNpbmdsZSByZWN0YW5nbGUgc2hvdWxkIGJlIGFkanVzdGVkXG4gICAgICAvLyB1bnRpbCBpdCBoaXRzIHRoZSBlbmQgT1Igd2lsbCBiZSBiYXNlZCBvbiB0aGUgRklSU1QgY29sdW1uIHRoYXQgaXMgdmlzaWJsZVxuICAgICAgYWRqdXN0UmVjdGFuZ2xlKGNsaWVudFJlY3RhbmdsZXNbMF0sIGZyYW1lRGltZW5zaW9ucywgY29sdW1uRnVsbFdpZHRoLFxuICAgICAgICBpc1J0bCwgaXNWd20sIHRydWUpO1xuICAgIH1cblxuICAgIC8vIGZvciBhbiBlbGVtZW50IHNwbGl0IGJldHdlZW4gc2V2ZXJhbCBDU1MgY29sdW1ucyxcbiAgICAvLyBib3RoIEZpcmVmb3ggYW5kIElFIHByb2R1Y2UgYXMgbWFueSBjbGllbnQgcmVjdGFuZ2xlcztcbiAgICAvLyBlYWNoIG9mIHRob3NlIHNob3VsZCBiZSBjaGVja2VkXG4gICAgdmFyIHZpc2liaWxpdHlQZXJjZW50YWdlID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNsaWVudFJlY3RhbmdsZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICBpZiAoaXNSZWN0VmlzaWJsZShjbGllbnRSZWN0YW5nbGVzW2ldLCBmcmFtZURpbWVuc2lvbnMsIGlzVndtKSkge1xuICAgICAgICB2aXNpYmlsaXR5UGVyY2VudGFnZSA9IHNob3VsZENhbGN1bGF0ZVZpc2liaWxpdHlQZXJjZW50YWdlID8gbWVhc3VyZVZpc2liaWxpdHlQZXJjZW50YWdlQnlSZWN0YW5nbGVzKGNsaWVudFJlY3RhbmdsZXMsIGkpIDogMTAwO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZpc2liaWxpdHlQZXJjZW50YWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIGEgcGFnZSBpbmRleCAoMC1iYXNlZCkgZm9yIGEgc3BlY2lmaWMgZWxlbWVudC5cbiAgICogQ2FsY3VsYXRpb25zIGFyZSBiYXNlZCBvbiByZWN0YW5nbGVzIHJldHJpZXZlZCB3aXRoIGdldENsaWVudFJlY3RzKCkgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW1lbnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNwYXRpYWxWZXJ0aWNhbE9mZnNldFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfG51bGx9XG4gICAqL1xuICBmdW5jdGlvbiBmaW5kUGFnZUJ5UmVjdGFuZ2xlcygkZWxlbWVudCwgc3BhdGlhbFZlcnRpY2FsT2Zmc2V0KSB7XG4gICAgdmFyIHZpc2libGVDb250ZW50T2Zmc2V0cyA9IGdldFZpc2libGVDb250ZW50T2Zmc2V0cygpO1xuICAgIHZhciBlbGVtZW50UmVjdGFuZ2xlcyA9IGdldE5vcm1hbGl6ZWRSZWN0YW5nbGVzKCRlbGVtZW50LCB2aXNpYmxlQ29udGVudE9mZnNldHMpO1xuICAgIHZhciBjbGllbnRSZWN0YW5nbGVzID0gZWxlbWVudFJlY3RhbmdsZXMuY2xpZW50UmVjdGFuZ2xlcztcbiAgICBpZiAoY2xpZW50UmVjdGFuZ2xlcy5sZW5ndGggPT09IDApIHsgLy8gZWxlbWVudHMgd2l0aCBkaXNwbGF5Om5vbmUsIGV0Yy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBpc1J0bCA9IGlzUGFnZVByb2dyZXNzaW9uUmlnaHRUb0xlZnQoKTtcbiAgICB2YXIgaXNWd20gPSBpc1ZlcnRpY2FsV3JpdGluZ01vZGUoKTtcbiAgICB2YXIgY29sdW1uRnVsbFdpZHRoID0gZ2V0Q29sdW1uRnVsbFdpZHRoKCk7XG5cbiAgICB2YXIgZnJhbWVIZWlnaHQgPSAkaWZyYW1lLmhlaWdodCgpO1xuICAgIHZhciBmcmFtZVdpZHRoID0gJGlmcmFtZS53aWR0aCgpO1xuXG4gICAgaWYgKHNwYXRpYWxWZXJ0aWNhbE9mZnNldCkge1xuICAgICAgdHJpbVJlY3RhbmdsZXNCeVZlcnRPZmZzZXQoY2xpZW50UmVjdGFuZ2xlcywgc3BhdGlhbFZlcnRpY2FsT2Zmc2V0LFxuICAgICAgICBmcmFtZUhlaWdodCwgY29sdW1uRnVsbFdpZHRoLCBpc1J0bCwgaXNWd20pO1xuICAgIH1cblxuICAgIHZhciBmaXJzdFJlY3RhbmdsZSA9IF8uZmlyc3QoY2xpZW50UmVjdGFuZ2xlcyk7XG4gICAgaWYgKGNsaWVudFJlY3RhbmdsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICBhZGp1c3RSZWN0YW5nbGUoZmlyc3RSZWN0YW5nbGUsIHtcbiAgICAgICAgaGVpZ2h0OiBmcmFtZUhlaWdodCxcbiAgICAgICAgd2lkdGg6IGZyYW1lV2lkdGhcbiAgICAgIH0sIGNvbHVtbkZ1bGxXaWR0aCwgaXNSdGwsIGlzVndtKTtcbiAgICB9XG5cbiAgICB2YXIgcGFnZUluZGV4O1xuXG4gICAgaWYgKGlzVndtKSB7XG4gICAgICB2YXIgdG9wT2Zmc2V0ID0gZmlyc3RSZWN0YW5nbGUudG9wO1xuICAgICAgcGFnZUluZGV4ID0gTWF0aC5mbG9vcih0b3BPZmZzZXQgLyBmcmFtZUhlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZWZ0T2Zmc2V0ID0gZmlyc3RSZWN0YW5nbGUubGVmdDtcbiAgICAgIGlmIChpc1J0bCkge1xuICAgICAgICBsZWZ0T2Zmc2V0ID0gKGNvbHVtbkZ1bGxXaWR0aCAqIChvcHRpb25zLnBhZ2luYXRpb25JbmZvID8gb3B0aW9ucy5wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQgOiAxKSkgLSBsZWZ0T2Zmc2V0O1xuICAgICAgfVxuICAgICAgcGFnZUluZGV4ID0gTWF0aC5mbG9vcihsZWZ0T2Zmc2V0IC8gY29sdW1uRnVsbFdpZHRoKTtcbiAgICB9XG5cbiAgICBpZiAocGFnZUluZGV4IDwgMCkge1xuICAgICAgcGFnZUluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKHBhZ2VJbmRleCA+PSAob3B0aW9ucy5wYWdpbmF0aW9uSW5mbyA/IG9wdGlvbnMucGFnaW5hdGlvbkluZm8uY29sdW1uQ291bnQgOiAxKSkge1xuICAgICAgcGFnZUluZGV4ID0gKG9wdGlvbnMucGFnaW5hdGlvbkluZm8gPyAob3B0aW9ucy5wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudCAtIDEpIDogMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhZ2VJbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBDYWxjdWxhdGVzIHRoZSB2aXNpYmlsaXR5IG9mZnNldCBwZXJjZW50YWdlIGJhc2VkIG9uIENsaWVudFJlY3QgZGltZW5zaW9uc1xuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBjbGllbnRSZWN0YW5nbGVzIChzaG91bGQgYWxyZWFkeSBiZSBub3JtYWxpemVkKVxuICAgKiBAcGFyYW0ge251bWJlcn0gZmlyc3RWaXNpYmxlUmVjdEluZGV4XG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IC0gdmlzaWJpbGl0eSBwZXJjZW50YWdlICgwIDwgbiA8PSAxMDApXG4gICAqL1xuICBmdW5jdGlvbiBtZWFzdXJlVmlzaWJpbGl0eVBlcmNlbnRhZ2VCeVJlY3RhbmdsZXMoXG4gICAgY2xpZW50UmVjdGFuZ2xlcywgZmlyc3RWaXNpYmxlUmVjdEluZGV4KSB7XG5cbiAgICB2YXIgaGVpZ2h0VG90YWwgPSAwO1xuICAgIHZhciBoZWlnaHRWaXNpYmxlID0gMDtcblxuICAgIGlmIChjbGllbnRSZWN0YW5nbGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIF8uZWFjaChjbGllbnRSZWN0YW5nbGVzLCBmdW5jdGlvbihyZWN0LCBpbmRleCkge1xuICAgICAgICBoZWlnaHRUb3RhbCArPSByZWN0LmhlaWdodDtcbiAgICAgICAgaWYgKGluZGV4ID49IGZpcnN0VmlzaWJsZVJlY3RJbmRleCkge1xuICAgICAgICAgIC8vIGluIHRoaXMgY2FzZSwgYWxsIHRoZSByZWN0YW5nbGVzIGFmdGVyIHRoZSBmaXJzdCB2aXNpYmxlXG4gICAgICAgICAgLy8gc2hvdWxkIGJlIGNvdW50ZWQgYXMgdmlzaWJsZVxuICAgICAgICAgIGhlaWdodFZpc2libGUgKz0gcmVjdC5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzaG91bGQgYWxyZWFkeSBiZSBub3JtYWxpemVkIGFuZCBhZGp1c3RlZFxuICAgICAgaGVpZ2h0VG90YWwgPSBjbGllbnRSZWN0YW5nbGVzWzBdLmhlaWdodDtcbiAgICAgIGhlaWdodFZpc2libGUgPSBjbGllbnRSZWN0YW5nbGVzWzBdLmhlaWdodCAtIE1hdGgubWF4KFxuICAgICAgICAwLCAtY2xpZW50UmVjdGFuZ2xlc1swXS50b3ApO1xuICAgIH1cbiAgICByZXR1cm4gaGVpZ2h0VmlzaWJsZSA9PT0gaGVpZ2h0VG90YWwgPyAxMDAgLy8gdHJpdmlhbCBjYXNlOiBlbGVtZW50IGlzIDEwMCUgdmlzaWJsZVxuICAgICAgOiBNYXRoLmZsb29yKDEwMCAqIGhlaWdodFZpc2libGUgLyBoZWlnaHRUb3RhbCk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogUmV0cmlldmVzIHRoZSBwb3NpdGlvbiBvZiAkZWxlbWVudCBpbiBtdWx0aS1jb2x1bW4gbGF5b3V0XG4gICAqXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFt2aXNpYmxlQ29udGVudE9mZnNldHNdXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBmdW5jdGlvbiBnZXROb3JtYWxpemVkUmVjdGFuZ2xlcygkZWwsIHZpc2libGVDb250ZW50T2Zmc2V0cykge1xuXG4gICAgdmlzaWJsZUNvbnRlbnRPZmZzZXRzID0gdmlzaWJsZUNvbnRlbnRPZmZzZXRzIHx8IHt9O1xuICAgIHZhciBsZWZ0T2Zmc2V0ID0gdmlzaWJsZUNvbnRlbnRPZmZzZXRzLmxlZnQgfHwgMDtcbiAgICB2YXIgdG9wT2Zmc2V0ID0gdmlzaWJsZUNvbnRlbnRPZmZzZXRzLnRvcCB8fCAwO1xuXG4gICAgLy8gdW5pb24gb2YgYWxsIHJlY3RhbmdsZXMgd3JhcHBpbmcgdGhlIGVsZW1lbnRcbiAgICB2YXIgd3JhcHBlclJlY3RhbmdsZSA9IG5vcm1hbGl6ZVJlY3RhbmdsZShcbiAgICAgICRlbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbGVmdE9mZnNldCwgdG9wT2Zmc2V0KTtcblxuICAgIC8vIGFsbCB0aGUgc2VwYXJhdGUgcmVjdGFuZ2xlcyAoZm9yIGRldGVjdGluZyBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudFxuICAgIC8vIHNwbGl0IGJldHdlZW4gc2V2ZXJhbCBjb2x1bW5zKVxuICAgIHZhciBjbGllbnRSZWN0YW5nbGVzID0gW107XG4gICAgdmFyIGNsaWVudFJlY3RMaXN0ID0gJGVsWzBdLmdldENsaWVudFJlY3RzKCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjbGllbnRSZWN0TGlzdC5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIGlmIChjbGllbnRSZWN0TGlzdFtpXS5oZWlnaHQgPiAwKSB7XG4gICAgICAgIC8vIEZpcmVmb3ggc29tZXRpbWVzIGdldHMgaXQgd3JvbmcsXG4gICAgICAgIC8vIGFkZGluZyBsaXRlcmFsbHkgZW1wdHkgKGhlaWdodCA9IDApIGNsaWVudCByZWN0YW5nbGUgcHJlY2VkaW5nIHRoZSByZWFsIG9uZSxcbiAgICAgICAgLy8gdGhhdCBlbXB0eSBjbGllbnQgcmVjdGFubGUgc2hvdWxkbid0IGJlIHJldHJpZXZlZFxuICAgICAgICBjbGllbnRSZWN0YW5nbGVzLnB1c2goXG4gICAgICAgICAgbm9ybWFsaXplUmVjdGFuZ2xlKGNsaWVudFJlY3RMaXN0W2ldLCBsZWZ0T2Zmc2V0LCB0b3BPZmZzZXQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xpZW50UmVjdGFuZ2xlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIHNvbWV0aW1lcyBhbiBlbGVtZW50IGlzIGVpdGhlciBoaWRkZW4gb3IgZW1wdHksIGFuZCB0aGF0IG1lYW5zXG4gICAgICAvLyBXZWJraXQtYmFzZWQgYnJvd3NlcnMgZmFpbCB0byBhc3NpZ24gcHJvcGVyIGNsaWVudFJlY3RzIHRvIGl0XG4gICAgICAvLyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBnbyBmb3IgaXRzIHNpYmxpbmcgKGlmIGl0IGV4aXN0cylcbiAgICAgICRlbCA9ICRlbC5uZXh0KCk7XG4gICAgICBpZiAoJGVsLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZ2V0Tm9ybWFsaXplZFJlY3RhbmdsZXMoJGVsLCB2aXNpYmxlQ29udGVudE9mZnNldHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB3cmFwcGVyUmVjdGFuZ2xlOiB3cmFwcGVyUmVjdGFuZ2xlLFxuICAgICAgY2xpZW50UmVjdGFuZ2xlczogY2xpZW50UmVjdGFuZ2xlc1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQ29udmVydHMgVGV4dFJlY3RhbmdsZSBvYmplY3QgaW50byBhIHBsYWluIG9iamVjdCxcbiAgICogdGFraW5nIGNvbnRlbnQgb2Zmc2V0cyAoPXNjcm9sbHMsIHBvc2l0aW9uIHNoaWZ0cyBldGMuKSBpbnRvIGFjY291bnRcbiAgICpcbiAgICogQHBhcmFtIHtUZXh0UmVjdGFuZ2xlfSB0ZXh0UmVjdFxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdE9mZnNldFxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9wT2Zmc2V0XG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBmdW5jdGlvbiBub3JtYWxpemVSZWN0YW5nbGUodGV4dFJlY3QsIGxlZnRPZmZzZXQsIHRvcE9mZnNldCkge1xuXG4gICAgdmFyIHBsYWluUmVjdE9iamVjdCA9IHtcbiAgICAgIGxlZnQ6IHRleHRSZWN0LmxlZnQsXG4gICAgICByaWdodDogdGV4dFJlY3QucmlnaHQsXG4gICAgICB0b3A6IHRleHRSZWN0LnRvcCxcbiAgICAgIGJvdHRvbTogdGV4dFJlY3QuYm90dG9tLFxuICAgICAgd2lkdGg6IHRleHRSZWN0LnJpZ2h0IC0gdGV4dFJlY3QubGVmdCxcbiAgICAgIGhlaWdodDogdGV4dFJlY3QuYm90dG9tIC0gdGV4dFJlY3QudG9wXG4gICAgfTtcbiAgICBvZmZzZXRSZWN0YW5nbGUocGxhaW5SZWN0T2JqZWN0LCBsZWZ0T2Zmc2V0LCB0b3BPZmZzZXQpO1xuICAgIHJldHVybiBwbGFpblJlY3RPYmplY3Q7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogT2Zmc2V0cyBwbGFpbiBvYmplY3QgKHdoaWNoIHJlcHJlc2VudHMgYSBUZXh0UmVjdGFuZ2xlKS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnRPZmZzZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvcE9mZnNldFxuICAgKi9cbiAgZnVuY3Rpb24gb2Zmc2V0UmVjdGFuZ2xlKHJlY3QsIGxlZnRPZmZzZXQsIHRvcE9mZnNldCkge1xuXG4gICAgcmVjdC5sZWZ0ICs9IGxlZnRPZmZzZXQ7XG4gICAgcmVjdC5yaWdodCArPSBsZWZ0T2Zmc2V0O1xuICAgIHJlY3QudG9wICs9IHRvcE9mZnNldDtcbiAgICByZWN0LmJvdHRvbSArPSB0b3BPZmZzZXQ7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogV2hlbiBlbGVtZW50IGlzIHNwaWxsZWQgb3ZlciB0d28gb3IgbW9yZSBjb2x1bW5zLFxuICAgKiBtb3N0IG9mIHRoZSB0aW1lIFdlYmtpdC1iYXNlZCBicm93c2Vyc1xuICAgKiBzdGlsbCBhc3NpZ24gYSBzaW5nbGUgY2xpZW50UmVjdGFuZ2xlIHRvIGl0LCBzZXR0aW5nIGl0cyBgdG9wYCBwcm9wZXJ0eSB0byBuZWdhdGl2ZSB2YWx1ZVxuICAgKiAoc28gaXQgbG9va3MgbGlrZSBpdCdzIHJlbmRlcmVkIGJhc2VkIG9uIHRoZSBzZWNvbmQgY29sdW1uKVxuICAgKiBBbGFzLCBzb21ldGltZXMgdGhleSBkZWNpZGUgdG8gY29udGludWUgdGhlIGxlZnRtb3N0IGNvbHVtbiAtIGZyb20gX2JlbG93XyBpdHMgcmVhbCBoZWlnaHQuXG4gICAqIEluIHRoaXMgY2FzZSwgYGJvdHRvbWAgcHJvcGVydHkgaXMgYWN0dWFsbHkgZ3JlYXRlciB0aGFuIGVsZW1lbnQncyBoZWlnaHQgYW5kIGhhZCB0byBiZSBhZGp1c3RlZCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogVWdoLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZnJhbWVEaW1lbnNpb25zXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5GdWxsV2lkdGhcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1J0bFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzVndtICAgICAgICAgICAgICAgaXNWZXJ0aWNhbFdyaXRpbmdNb2RlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkTG9va0ZvckZpcnN0VmlzaWJsZUNvbHVtblxuICAgKiAgICAgIElmIHNldCwgdGhlcmUnbGwgYmUgdHdvLXBoYXNlIGFkanVzdG1lbnRcbiAgICogICAgICAodG8gYWxpZ24gYSByZWN0YW5nbGUgd2l0aCBhIHZpZXdwb3J0KVxuXG4gICAqL1xuICBmdW5jdGlvbiBhZGp1c3RSZWN0YW5nbGUocmVjdCwgZnJhbWVEaW1lbnNpb25zLCBjb2x1bW5GdWxsV2lkdGgsIGlzUnRsLCBpc1Z3bSxcbiAgICBzaG91bGRMb29rRm9yRmlyc3RWaXNpYmxlQ29sdW1uKSB7XG5cbiAgICAvLyBSZWN0YW5nbGUgYWRqdXN0bWVudCBpcyBub3QgbmVlZGVkIGluIFZXTSBzaW5jZSBpdCBkb2VzIG5vdCBkZWFsIHdpdGggY29sdW1uc1xuICAgIGlmIChpc1Z3bSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc1J0bCkge1xuICAgICAgY29sdW1uRnVsbFdpZHRoICo9IC0xOyAvLyBob3Jpem9udGFsIHNoaWZ0cyBhcmUgcmV2ZXJ0ZWQgaW4gUlRMIG1vZGVcbiAgICB9XG5cbiAgICAvLyBmaXJzdCB3ZSBnbyBsZWZ0L3JpZ2h0IChyZWJhc2luZyBvbnRvIHRoZSB2ZXJ5IGZpcnN0IGNvbHVtbiBhdmFpbGFibGUpXG4gICAgd2hpbGUgKHJlY3QudG9wIDwgMCkge1xuICAgICAgb2Zmc2V0UmVjdGFuZ2xlKHJlY3QsIC1jb2x1bW5GdWxsV2lkdGgsIGZyYW1lRGltZW5zaW9ucy5oZWlnaHQpO1xuICAgIH1cblxuICAgIC8vIC4uLiB0aGVuLCBpZiBuZWNlc3NhcnkgKGZvciB2aXNpYmlsaXR5IG9mZnNldCBjaGVja3MpLFxuICAgIC8vIGVhY2ggY29sdW1uIGlzIHRyaWVkIGFnYWluIChub3cgaW4gcmV2ZXJzZSBvcmRlcilcbiAgICAvLyB0aGUgbG9vcCB3aWxsIGJlIHN0b3BwZWQgd2hlbiB0aGUgY29sdW1uIGlzIGFsaWduZWQgd2l0aCBhIHZpZXdwb3J0XG4gICAgLy8gKGkuZS4sIGlzIHRoZSBmaXJzdCB2aXNpYmxlIG9uZSkuXG4gICAgaWYgKHNob3VsZExvb2tGb3JGaXJzdFZpc2libGVDb2x1bW4pIHtcbiAgICAgIHdoaWxlIChyZWN0LmJvdHRvbSA+PSBmcmFtZURpbWVuc2lvbnMuaGVpZ2h0KSB7XG4gICAgICAgIGlmIChpc1JlY3RWaXNpYmxlKHJlY3QsIGZyYW1lRGltZW5zaW9ucywgaXNWd20pKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0UmVjdGFuZ2xlKHJlY3QsIGNvbHVtbkZ1bGxXaWR0aCwgLWZyYW1lRGltZW5zaW9ucy5oZWlnaHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBUcmltcyB0aGUgcmVjdGFuZ2xlKHMpIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gcmVjdHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZlcnRpY2FsT2Zmc2V0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcmFtZUhlaWdodFxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uRnVsbFdpZHRoXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNSdGxcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1Z3bSAgICAgICAgICAgICAgIGlzVmVydGljYWxXcml0aW5nTW9kZVxuICAgKi9cbiAgZnVuY3Rpb24gdHJpbVJlY3RhbmdsZXNCeVZlcnRPZmZzZXQoXG4gICAgcmVjdHMsIHZlcnRpY2FsT2Zmc2V0LCBmcmFtZUhlaWdodCwgY29sdW1uRnVsbFdpZHRoLCBpc1J0bCwgaXNWd20pIHtcblxuICAgIC8vVE9ETzogU3VwcG9ydCB2ZXJ0aWNhbCB3cml0aW5nIG1vZGVcbiAgICBpZiAoaXNWd20pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdG90YWxIZWlnaHQgPSBfLnJlZHVjZShyZWN0cywgZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgICByZXR1cm4gcHJldiArIGN1ci5oZWlnaHQ7XG4gICAgfSwgMCk7XG5cbiAgICB2YXIgaGVpZ2h0VG9IaWRlID0gdG90YWxIZWlnaHQgKiB2ZXJ0aWNhbE9mZnNldCAvIDEwMDtcbiAgICBpZiAocmVjdHMubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIGhlaWdodEFjY3VtID0gMDtcbiAgICAgIGRvIHtcbiAgICAgICAgaGVpZ2h0QWNjdW0gKz0gcmVjdHNbMF0uaGVpZ2h0O1xuICAgICAgICBpZiAoaGVpZ2h0QWNjdW0gPiBoZWlnaHRUb0hpZGUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZWN0cy5zaGlmdCgpO1xuICAgICAgfSB3aGlsZSAocmVjdHMubGVuZ3RoID4gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlYmFzZSB0byB0aGUgbGFzdCBwb3NzaWJsZSBjb2x1bW5cbiAgICAgIC8vIChzbyB0aGF0IGFkZGluZyB0byB0b3Agd2lsbCBiZSBwcm9wZXJseSBwcm9jZXNzZWQgbGF0ZXIpXG4gICAgICBpZiAoaXNSdGwpIHtcbiAgICAgICAgY29sdW1uRnVsbFdpZHRoICo9IC0xO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHJlY3RzWzBdLmJvdHRvbSA+PSBmcmFtZUhlaWdodCkge1xuICAgICAgICBvZmZzZXRSZWN0YW5nbGUocmVjdHNbMF0sIGNvbHVtbkZ1bGxXaWR0aCwgLWZyYW1lSGVpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgcmVjdHNbMF0udG9wICs9IGhlaWdodFRvSGlkZTtcbiAgICAgIHJlY3RzWzBdLmhlaWdodCAtPSBoZWlnaHRUb0hpZGU7XG4gICAgfVxuICB9XG5cbiAgLy93ZSBsb29rIGZvciB0ZXh0IGFuZCBpbWFnZXNcbiAgdGhpcy5maW5kRmlyc3RWaXNpYmxlRWxlbWVudCA9IGZ1bmN0aW9uKHByb3BzKSB7XG5cbiAgICBpZiAodHlwZW9mIHByb3BzICE9PSAnb2JqZWN0Jykge1xuICAgICAgLy8gY29tcGF0aWJpbGl0eSB3aXRoIGxlZ2FjeSBjb2RlLCBgcHJvcHNgIGlzIGB0b3BPZmZzZXRgIGFjdHVhbGx5XG4gICAgICBwcm9wcyA9IHtcbiAgICAgICAgdG9wOiBwcm9wc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgJGVsZW1lbnRzO1xuICAgIHZhciAkZmlyc3RWaXNpYmxlVGV4dE5vZGUgPSBudWxsO1xuICAgIHZhciBwZXJjZW50T2ZFbGVtZW50SGVpZ2h0ID0gMDtcblxuICAgICRlbGVtZW50cyA9ICQoXCJib2R5XCIsIHRoaXMuZ2V0Um9vdEVsZW1lbnQoKSkuZmluZChcIjpub3QoaWZyYW1lKVwiKS5jb250ZW50cygpLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpc1ZhbGlkVGV4dE5vZGUodGhpcykgfHwgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW1nJztcbiAgICB9KTtcblxuICAgIC8vIEZpbmQgdGhlIGZpcnN0IHZpc2libGUgdGV4dCBub2RlXG4gICAgJC5lYWNoKCRlbGVtZW50cywgZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciAkZWxlbWVudDtcblxuICAgICAgaWYgKHRoaXMubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7IC8vdGV4dCBub2RlXG4gICAgICAgICRlbGVtZW50ID0gJCh0aGlzKS5wYXJlbnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRlbGVtZW50ID0gJCh0aGlzKTsgLy9pbWFnZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmlzaWJpbGl0eVJlc3VsdCA9IHZpc2liaWxpdHlDaGVja2VyRnVuYygkZWxlbWVudCwgcHJvcHMsIHRydWUpO1xuICAgICAgaWYgKHZpc2liaWxpdHlSZXN1bHQpIHtcbiAgICAgICAgJGZpcnN0VmlzaWJsZVRleHROb2RlID0gJGVsZW1lbnQ7XG4gICAgICAgIHBlcmNlbnRPZkVsZW1lbnRIZWlnaHQgPSAxMDAgLSB2aXNpYmlsaXR5UmVzdWx0O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAkZWxlbWVudDogJGZpcnN0VmlzaWJsZVRleHROb2RlLFxuICAgICAgcGVyY2VudFk6IHBlcmNlbnRPZkVsZW1lbnRIZWlnaHRcbiAgICB9O1xuICB9O1xuXG4gIHRoaXMuZ2V0Rmlyc3RWaXNpYmxlRWxlbWVudENmaSA9IGZ1bmN0aW9uKHRvcE9mZnNldCkge1xuXG4gICAgdmFyIGZvdW5kRWxlbWVudCA9IHRoaXMuZmluZEZpcnN0VmlzaWJsZUVsZW1lbnQodG9wT2Zmc2V0KTtcblxuICAgIGlmICghZm91bmRFbGVtZW50LiRlbGVtZW50KSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkNvdWxkIG5vdCBnZW5lcmF0ZSBDRkkgbm8gdmlzaWJsZSBlbGVtZW50IG9uIHBhZ2VcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgdmFyIGNmaSA9IEVQVUJjZmkuR2VuZXJhdG9yLmdlbmVyYXRlRWxlbWVudENGSUNvbXBvbmVudChmb3VuZEVsZW1lbnQuJGVsZW1lbnRbMF0pO1xuXG4gICAgaWYgKGNmaVswXSA9PSBcIiFcIikge1xuICAgICAgY2ZpID0gY2ZpLnN1YnN0cmluZygxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2ZpICsgXCJAMDpcIiArIGZvdW5kRWxlbWVudC5wZXJjZW50WTtcbiAgfTtcblxuICB0aGlzLmdldFBhZ2VGb3JFbGVtZW50Q2ZpID0gZnVuY3Rpb24oY2ZpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgIHZhciBjZmlQYXJ0cyA9IHNwbGl0Q2ZpKGNmaSk7XG5cbiAgICB2YXIgJGVsZW1lbnQgPSBnZXRFbGVtZW50QnlQYXJ0aWFsQ2ZpKGNmaVBhcnRzLmNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgIGlmICghJGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXRQYWdlRm9yUG9pbnRPbkVsZW1lbnQoJGVsZW1lbnQsIGNmaVBhcnRzLngsIGNmaVBhcnRzLnkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldEVsZW1lbnRCeVBhcnRpYWxDZmkoY2ZpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgIHZhciBjb250ZW50RG9jID0gJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQ7XG5cbiAgICB2YXIgd3JhcHBlZENmaSA9IFwiZXB1YmNmaShcIiArIGNmaSArIFwiKVwiO1xuICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgdmFyICRlbGVtZW50ID0gRVBVQmNmaS5nZXRUYXJnZXRFbGVtZW50V2l0aFBhcnRpYWxDRkkod3JhcHBlZENmaSwgY29udGVudERvYywgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KTtcblxuICAgIGlmICghJGVsZW1lbnQgfHwgJGVsZW1lbnQubGVuZ3RoID09IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiQ2FuJ3QgZmluZCBlbGVtZW50IGZvciBDRkk6IFwiICsgY2ZpKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuICRlbGVtZW50O1xuICB9XG5cbiAgdGhpcy5nZXRFbGVtZW50QnlDZmkgPSBmdW5jdGlvbihjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgdmFyIGNmaVBhcnRzID0gc3BsaXRDZmkoY2ZpKTtcbiAgICByZXR1cm4gZ2V0RWxlbWVudEJ5UGFydGlhbENmaShjZmlQYXJ0cy5jZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gIH07XG5cbiAgdGhpcy5nZXRQYWdlRm9yRWxlbWVudCA9IGZ1bmN0aW9uKCRlbGVtZW50KSB7XG5cbiAgICByZXR1cm4gdGhpcy5nZXRQYWdlRm9yUG9pbnRPbkVsZW1lbnQoJGVsZW1lbnQsIDAsIDApO1xuICB9O1xuXG4gIHRoaXMuZ2V0UGFnZUZvclBvaW50T25FbGVtZW50ID0gZnVuY3Rpb24oJGVsZW1lbnQsIHgsIHkpIHtcblxuICAgIHZhciBwYWdlSW5kZXg7XG4gICAgaWYgKG9wdGlvbnMucmVjdGFuZ2xlQmFzZWQpIHtcbiAgICAgIHBhZ2VJbmRleCA9IGZpbmRQYWdlQnlSZWN0YW5nbGVzKCRlbGVtZW50LCB5KTtcbiAgICAgIGlmIChwYWdlSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdJbXBvc3NpYmxlIHRvIGxvY2F0ZSBhIGhpZGRlbiBlbGVtZW50OiAnLCAkZWxlbWVudCk7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhZ2VJbmRleDtcbiAgICB9XG5cbiAgICB2YXIgcG9zSW5FbGVtZW50ID0gdGhpcy5nZXRWZXJ0aWNhbE9mZnNldEZvclBvaW50T25FbGVtZW50KCRlbGVtZW50LCB4LCB5KTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihwb3NJbkVsZW1lbnQgLyAkdmlld3BvcnQuaGVpZ2h0KCkpO1xuICB9O1xuXG4gIHRoaXMuZ2V0VmVydGljYWxPZmZzZXRGb3JFbGVtZW50ID0gZnVuY3Rpb24oJGVsZW1lbnQpIHtcblxuICAgIHJldHVybiB0aGlzLmdldFZlcnRpY2FsT2Zmc2V0Rm9yUG9pbnRPbkVsZW1lbnQoJGVsZW1lbnQsIDAsIDApO1xuICB9O1xuXG4gIHRoaXMuZ2V0VmVydGljYWxPZmZzZXRGb3JQb2ludE9uRWxlbWVudCA9IGZ1bmN0aW9uKCRlbGVtZW50LCB4LCB5KSB7XG5cbiAgICB2YXIgZWxlbWVudFJlY3QgPSBSZWN0LmZyb21FbGVtZW50KCRlbGVtZW50KTtcbiAgICByZXR1cm4gTWF0aC5jZWlsKGVsZW1lbnRSZWN0LnRvcCArIHkgKiBlbGVtZW50UmVjdC5oZWlnaHQgLyAxMDApO1xuICB9O1xuXG4gIHRoaXMuZ2V0RWxlbWVudEJ5SWQgPSBmdW5jdGlvbihpZCkge1xuXG4gICAgdmFyIGNvbnRlbnREb2MgPSAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcblxuICAgIHZhciAkZWxlbWVudCA9ICQoY29udGVudERvYy5nZXRFbGVtZW50QnlJZChpZCkpO1xuICAgIC8vJChcIiNcIiArIEhlbHBlcnMuZXNjYXBlSlF1ZXJ5U2VsZWN0b3IoaWQpLCBjb250ZW50RG9jKTtcblxuICAgIGlmICgkZWxlbWVudC5sZW5ndGggPT0gMCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gJGVsZW1lbnQ7XG4gIH07XG5cbiAgdGhpcy5nZXRQYWdlRm9yRWxlbWVudElkID0gZnVuY3Rpb24oaWQpIHtcblxuICAgIHZhciAkZWxlbWVudCA9IHRoaXMuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIGlmICghJGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXRQYWdlRm9yRWxlbWVudCgkZWxlbWVudCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc3BsaXRDZmkoY2ZpKSB7XG5cbiAgICB2YXIgcmV0ID0ge1xuICAgICAgY2ZpOiBcIlwiLFxuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuXG4gICAgdmFyIGl4ID0gY2ZpLmluZGV4T2YoXCJAXCIpO1xuXG4gICAgaWYgKGl4ICE9IC0xKSB7XG4gICAgICB2YXIgdGVybWludXMgPSBjZmkuc3Vic3RyaW5nKGl4ICsgMSk7XG5cbiAgICAgIHZhciBjb2xJeCA9IHRlcm1pbnVzLmluZGV4T2YoXCI6XCIpO1xuICAgICAgaWYgKGNvbEl4ICE9IC0xKSB7XG4gICAgICAgIHJldC54ID0gcGFyc2VJbnQodGVybWludXMuc3Vic3RyKDAsIGNvbEl4KSk7XG4gICAgICAgIHJldC55ID0gcGFyc2VJbnQodGVybWludXMuc3Vic3RyKGNvbEl4ICsgMSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJVbmV4cGVjdGVkIHRlcm1pbmF0aW5nIHN0ZXAgZm9ybWF0XCIpO1xuICAgICAgfVxuXG4gICAgICByZXQuY2ZpID0gY2ZpLnN1YnN0cmluZygwLCBpeCk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgcmV0LmNmaSA9IGNmaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gcmV0dXJucyByYXcgRE9NIGVsZW1lbnQgKG5vdCAkIGpRdWVyeS13cmFwcGVkKVxuICB0aGlzLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQgPSBmdW5jdGlvbih2aXNpYmxlQ29udGVudE9mZnNldHMpIHtcbiAgICB2YXIgZG9jRWxlbWVudCA9IHRoaXMuZ2V0Um9vdEVsZW1lbnQoKTtcbiAgICBpZiAoIWRvY0VsZW1lbnQpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgJHJvb3QgPSAkKFwiYm9keVwiLCBkb2NFbGVtZW50KTtcbiAgICBpZiAoISRyb290IHx8ICEkcm9vdC5sZW5ndGggfHwgISRyb290WzBdKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgdmFyIGZpcnN0UGFydGlhbCA9IHVuZGVmaW5lZDtcblxuICAgIGZ1bmN0aW9uIHRyYXZlcnNlQXJyYXkoYXJyKSB7XG4gICAgICBpZiAoIWFyciB8fCAhYXJyLmxlbmd0aCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gYXJyLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBhcnJbaV07XG4gICAgICAgIGlmICghaXRlbSkgY29udGludWU7XG5cbiAgICAgICAgdmFyICRpdGVtID0gJChpdGVtKTtcblxuICAgICAgICBpZiAoJGl0ZW0uZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIikpIHtcbiAgICAgICAgICB2YXIgdmlzaWJsZSA9IHRoYXQuZ2V0RWxlbWVudFZpc2liaWxpdHkoJGl0ZW0sIHZpc2libGVDb250ZW50T2Zmc2V0cyk7XG4gICAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICAgIGlmICghZmlyc3RQYXJ0aWFsKSBmaXJzdFBhcnRpYWwgPSBpdGVtO1xuXG4gICAgICAgICAgICBpZiAodmlzaWJsZSA9PSAxMDApIHJldHVybiBpdGVtO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZWxlbSA9IHRyYXZlcnNlQXJyYXkoaXRlbS5jaGlsZHJlbik7XG4gICAgICAgICAgaWYgKGVsZW0pIHJldHVybiBlbGVtO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGVsID0gdHJhdmVyc2VBcnJheShbJHJvb3RbMF1dKTtcbiAgICBpZiAoIWVsKSBlbCA9IGZpcnN0UGFydGlhbDtcbiAgICByZXR1cm4gZWw7XG5cbiAgICAvLyB2YXIgJGVsZW1lbnRzID0gdGhpcy5nZXRNZWRpYU92ZXJsYXlFbGVtZW50cygkcm9vdCk7XG4gICAgLy8gcmV0dXJuIHRoaXMuZ2V0VmlzaWJsZUVsZW1lbnRzKCRlbGVtZW50cywgdmlzaWJsZUNvbnRlbnRPZmZzZXRzKTtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnRWaXNpYmlsaXR5ID0gZnVuY3Rpb24oJGVsZW1lbnQsIHZpc2libGVDb250ZW50T2Zmc2V0cykge1xuICAgIHJldHVybiB2aXNpYmlsaXR5Q2hlY2tlckZ1bmMoJGVsZW1lbnQsIHZpc2libGVDb250ZW50T2Zmc2V0cywgdHJ1ZSk7XG4gIH07XG5cbiAgLy8gLyoqXG4gIC8vICAqIEBkZXByZWNhdGVkXG4gIC8vICAqL1xuICAvLyB0aGlzLmdldFZpc2libGVNZWRpYU92ZXJsYXlFbGVtZW50cyA9IGZ1bmN0aW9uKHZpc2libGVDb250ZW50T2Zmc2V0cykge1xuICAvLyBcbiAgLy8gICAgIHZhciAkZWxlbWVudHMgPSB0aGlzLmdldE1lZGlhT3ZlcmxheUVsZW1lbnRzKCQoXCJib2R5XCIsIHRoaXMuZ2V0Um9vdEVsZW1lbnQoKSkpO1xuICAvLyAgICAgcmV0dXJuIHRoaXMuZ2V0VmlzaWJsZUVsZW1lbnRzKCRlbGVtZW50cywgdmlzaWJsZUNvbnRlbnRPZmZzZXRzKTtcbiAgLy8gXG4gIC8vIH07XG5cbiAgdGhpcy5pc0VsZW1lbnRWaXNpYmxlID0gdmlzaWJpbGl0eUNoZWNrZXJGdW5jO1xuXG4gIHRoaXMuZ2V0QWxsVmlzaWJsZUVsZW1lbnRzV2l0aFNlbGVjdG9yID0gZnVuY3Rpb24oc2VsZWN0b3IsIHZpc2libGVDb250ZW50T2Zmc2V0KSB7XG4gICAgdmFyIGVsZW1lbnRzID0gJChzZWxlY3RvciwgdGhpcy5nZXRSb290RWxlbWVudCgpKS5maWx0ZXIoZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgdmFyICRuZXdFbGVtZW50cyA9IFtdO1xuICAgICQuZWFjaChlbGVtZW50cywgZnVuY3Rpb24oKSB7XG4gICAgICAkbmV3RWxlbWVudHMucHVzaCgkKHRoaXMpKTtcbiAgICB9KTtcbiAgICB2YXIgdmlzaWJsZURpdnMgPSB0aGlzLmdldFZpc2libGVFbGVtZW50cygkbmV3RWxlbWVudHMsIHZpc2libGVDb250ZW50T2Zmc2V0KTtcbiAgICByZXR1cm4gdmlzaWJsZURpdnM7XG5cbiAgfTtcblxuICB0aGlzLmdldFZpc2libGVFbGVtZW50cyA9IGZ1bmN0aW9uKCRlbGVtZW50cywgdmlzaWJsZUNvbnRlbnRPZmZzZXRzKSB7XG5cbiAgICB2YXIgdmlzaWJsZUVsZW1lbnRzID0gW107XG5cbiAgICAvLyBGaW5kIHRoZSBmaXJzdCB2aXNpYmxlIHRleHQgbm9kZVxuICAgICQuZWFjaCgkZWxlbWVudHMsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRlbGVtZW50ID0gdGhpcztcbiAgICAgIHZhciB2aXNpYmlsaXR5UGVyY2VudGFnZSA9IHZpc2liaWxpdHlDaGVja2VyRnVuYyhcbiAgICAgICAgJGVsZW1lbnQsIHZpc2libGVDb250ZW50T2Zmc2V0cywgdHJ1ZSk7XG5cbiAgICAgIGlmICh2aXNpYmlsaXR5UGVyY2VudGFnZSkge1xuICAgICAgICB2YXIgJHZpc2libGVFbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgICAgIHZpc2libGVFbGVtZW50cy5wdXNoKHtcbiAgICAgICAgICBlbGVtZW50OiAkdmlzaWJsZUVsZW1lbnRbMF0sIC8vIERPTSBFbGVtZW50IGlzIHB1c2hlZFxuICAgICAgICAgIHBlcmNlbnRWaXNpYmxlOiB2aXNpYmlsaXR5UGVyY2VudGFnZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGVsZW1lbnQncyBwb3NpdGlvbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZCwganVzdCBnbyB0byBuZXh0IG9uZVxuICAgICAgaWYgKHZpc2liaWxpdHlQZXJjZW50YWdlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBjb250aW51ZSBpZiBubyB2aXNpYmxlRWxlbWVudHMgaGF2ZSBiZWVuIGZvdW5kIHlldCxcbiAgICAgIC8vIHN0b3Agb3RoZXJ3aXNlXG4gICAgICByZXR1cm4gdmlzaWJsZUVsZW1lbnRzLmxlbmd0aCA9PT0gMDtcbiAgICB9KTtcblxuICAgIHJldHVybiB2aXNpYmxlRWxlbWVudHM7XG4gIH07XG5cbiAgdGhpcy5nZXRWaXNpYmxlVGV4dEVsZW1lbnRzID0gZnVuY3Rpb24odmlzaWJsZUNvbnRlbnRPZmZzZXRzKSB7XG5cbiAgICB2YXIgJGVsZW1lbnRzID0gdGhpcy5nZXRUZXh0RWxlbWVudHMoJChcImJvZHlcIiwgdGhpcy5nZXRSb290RWxlbWVudCgpKSk7XG5cbiAgICByZXR1cm4gdGhpcy5nZXRWaXNpYmxlRWxlbWVudHMoJGVsZW1lbnRzLCB2aXNpYmxlQ29udGVudE9mZnNldHMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgdGhpcy5nZXRNZWRpYU92ZXJsYXlFbGVtZW50cyA9IGZ1bmN0aW9uKCRyb290KSB7XG5cbiAgICB2YXIgJGVsZW1lbnRzID0gW107XG5cbiAgICBmdW5jdGlvbiB0cmF2ZXJzZUNvbGxlY3Rpb24oZWxlbWVudHMpIHtcblxuICAgICAgaWYgKGVsZW1lbnRzID09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgY291bnQgPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG5cbiAgICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50c1tpXSk7XG5cbiAgICAgICAgaWYgKCRlbGVtZW50LmRhdGEoXCJtZWRpYU92ZXJsYXlEYXRhXCIpKSB7XG4gICAgICAgICAgJGVsZW1lbnRzLnB1c2goJGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYXZlcnNlQ29sbGVjdGlvbigkZWxlbWVudFswXS5jaGlsZHJlbik7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH1cblxuICAgIHRyYXZlcnNlQ29sbGVjdGlvbihbJHJvb3RbMF1dKTtcblxuICAgIHJldHVybiAkZWxlbWVudHM7XG4gIH07XG5cbiAgdGhpcy5nZXRUZXh0RWxlbWVudHMgPSBmdW5jdGlvbigkcm9vdCkge1xuXG4gICAgdmFyICR0ZXh0RWxlbWVudHMgPSBbXTtcblxuICAgICRyb290LmZpbmQoXCI6bm90KGlmcmFtZSlcIikuY29udGVudHMoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICBpZiAoaXNWYWxpZFRleHROb2RlKHRoaXMpKSB7XG4gICAgICAgICR0ZXh0RWxlbWVudHMucHVzaCgkKHRoaXMpLnBhcmVudCgpKTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgcmV0dXJuICR0ZXh0RWxlbWVudHM7XG5cbiAgfTtcblxuICBmdW5jdGlvbiBpc1ZhbGlkVGV4dE5vZGUobm9kZSkge1xuXG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG5cbiAgICAgIC8vIEhldXJpc3RpYyB0byBmaW5kIGEgdGV4dCBub2RlIHdpdGggYWN0dWFsIHRleHRcbiAgICAgIHZhciBub2RlVGV4dCA9IG5vZGUubm9kZVZhbHVlLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbiAgICAgIG5vZGVUZXh0ID0gbm9kZVRleHQucmVwbGFjZSgvIC9nLCBcIlwiKTtcblxuICAgICAgcmV0dXJuIG5vZGVUZXh0Lmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIH1cblxuICB0aGlzLmdldEVsZW1lbnQgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuXG4gICAgdmFyICRlbGVtZW50ID0gJChzZWxlY3RvciwgdGhpcy5nZXRSb290RWxlbWVudCgpKTtcblxuICAgIGlmICgkZWxlbWVudC5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gJGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDZmlOYXZpZ2F0aW9uTG9naWNcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBPUklFTlRBVElPTl9MQU5EU0NBUEU6IFwib3JpZW50YXRpb25fbGFuZHNjYXBlXCIsXG4gIE9SSUVOVEFUSU9OX1BPUlRSQUlUOiBcIm9yaWVudGF0aW9uX3BvcnRyYWl0XCJcbn0iLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpXG52YXIgQm9va21hcmtEYXRhID0gcmVxdWlyZSgnLi4vbW9kZWxzL2Jvb2ttYXJrLWRhdGEnKVxudmFyIEN1cnJlbnRQYWdlc0luZm8gPSByZXF1aXJlKCcuLi9tb2RlbHMvY3VycmVudC1wYWdlcy1pbmZvJylcbnZhciBDU1NUcmFuc2l0aW9uID0gcmVxdWlyZSgnLi4vaGVscGVycy9jc3MtdHJhbnNpdGlvbicpXG52YXIgZGVkdWNlU3ludGhldGljU3ByZWFkID0gcmVxdWlyZSgnLi4vaGVscGVycy9kZWR1Y2Utc3ludGhldGljLXNwcmVhZCcpXG52YXIgRXZlbnRzID0gcmVxdWlyZSgnLi4vZXZlbnRzJylcbnZhciBJbnRlcm5hbEV2ZW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFsLWV2ZW50cycpXG52YXIgbG9hZFRlbXBsYXRlID0gcmVxdWlyZSgnLi4vaGVscGVycy9sb2FkLXRlbXBsYXRlJylcbnZhciBNYXJnaW5zID0gcmVxdWlyZSgnLi4vaGVscGVycy9tYXJnaW5zJylcbnZhciBPbmVQYWdlVmlldyA9IHJlcXVpcmUoJy4vb25lLXBhZ2UtdmlldycpXG52YXIgUGFnZU9wZW5SZXF1ZXN0ID0gcmVxdWlyZSgnLi4vbW9kZWxzL3BhZ2Utb3Blbi1yZXF1ZXN0JylcbnZhciBzZXRTdHlsZXMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3NldC1zdHlsZXMnKVxudmFyIFNwcmVhZCA9IHJlcXVpcmUoJy4uL21vZGVscy9zcHJlYWQnKVxuXG4vKipcbiAqIFZpZXcgZm9yIHJlbmRlcmluZyBmaXhlZCBsYXlvdXQgcGFnZSBzcHJlYWRcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcGFyYW0gcmVhZGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRml4ZWRWaWV3KG9wdGlvbnMsIHJlYWRlcikge1xuXG4gIF8uZXh0ZW5kKHRoaXMsIEJhY2tib25lLkV2ZW50cyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBfJGVsO1xuICB2YXIgXyR2aWV3cG9ydCA9IG9wdGlvbnMuJHZpZXdwb3J0O1xuICB2YXIgX3NwaW5lID0gb3B0aW9ucy5zcGluZTtcbiAgdmFyIF91c2VyU3R5bGVzID0gb3B0aW9ucy51c2VyU3R5bGVzO1xuICB2YXIgX2Jvb2tTdHlsZXMgPSBvcHRpb25zLmJvb2tTdHlsZXM7XG4gIHZhciBfem9vbSA9IG9wdGlvbnMuem9vbSB8fCB7XG4gICAgc3R5bGU6ICdkZWZhdWx0J1xuICB9O1xuICB2YXIgX2N1cnJlbnRTY2FsZTtcbiAgdmFyIF9pZnJhbWVMb2FkZXIgPSBvcHRpb25zLmlmcmFtZUxvYWRlcjtcbiAgdmFyIF92aWV3U2V0dGluZ3MgPSB1bmRlZmluZWQ7XG5cbiAgdmFyIF9sZWZ0UGFnZVZpZXcgPSBjcmVhdGVPbmVQYWdlVmlldyhcImZpeGVkLXBhZ2UtZnJhbWUtbGVmdFwiKTtcbiAgdmFyIF9yaWdodFBhZ2VWaWV3ID0gY3JlYXRlT25lUGFnZVZpZXcoXCJmaXhlZC1wYWdlLWZyYW1lLXJpZ2h0XCIpO1xuICB2YXIgX2NlbnRlclBhZ2VWaWV3ID0gY3JlYXRlT25lUGFnZVZpZXcoXCJmaXhlZC1wYWdlLWZyYW1lLWNlbnRlclwiKTtcblxuICB2YXIgX3BhZ2VWaWV3cyA9IFtdO1xuICBfcGFnZVZpZXdzLnB1c2goX2xlZnRQYWdlVmlldyk7XG4gIF9wYWdlVmlld3MucHVzaChfcmlnaHRQYWdlVmlldyk7XG4gIF9wYWdlVmlld3MucHVzaChfY2VudGVyUGFnZVZpZXcpO1xuXG4gIHZhciBfc3ByZWFkID0gbmV3IFNwcmVhZChfc3BpbmUsIGZhbHNlKTtcbiAgdmFyIF9ib29rTWFyZ2lucztcbiAgdmFyIF9jb250ZW50TWV0YVNpemU7XG4gIHZhciBfaXNSZWRyb3dpbmcgPSBmYWxzZTtcbiAgdmFyIF9yZWRyYXdSZXF1ZXN0ID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY3JlYXRlT25lUGFnZVZpZXcoZWxlbWVudENsYXNzKSB7XG5cbiAgICB2YXIgcGFnZVZpZXcgPSBuZXcgT25lUGFnZVZpZXcob3B0aW9ucywgW2VsZW1lbnRDbGFzc10sXG4gICAgICBmYWxzZSwgLy9lbmFibGVCb29rU3R5bGVPdmVycmlkZXNcbiAgICAgIHJlYWRlclxuICAgICk7XG5cbiAgICBwYWdlVmlldy5vbihPbmVQYWdlVmlldy5TUElORV9JVEVNX09QRU5fU1RBUlQsIGZ1bmN0aW9uKCRpZnJhbWUsIHNwaW5lSXRlbSkge1xuXG4gICAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLkNPTlRFTlRfRE9DVU1FTlRfTE9BRF9TVEFSVCwgJGlmcmFtZSwgc3BpbmVJdGVtKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwYWdlVmlldztcbiAgfVxuXG4gIHRoaXMuaXNSZWZsb3dhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHRoaXMuc2V0Wm9vbSA9IGZ1bmN0aW9uKHpvb20pIHtcbiAgICBfem9vbSA9IHpvb207XG5cbiAgICByZXNpemVCb29rKGZhbHNlKTtcbiAgfVxuXG4gIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgdGVtcGxhdGUgPSBsb2FkVGVtcGxhdGUoXCJmaXhlZF9ib29rX2ZyYW1lXCIsIHt9KTtcblxuICAgIF8kZWwgPSAkKHRlbXBsYXRlKTtcblxuICAgIENTU1RyYW5zaXRpb24oXyRlbCwgXCJhbGwgMCBlYXNlIDBcIik7XG5cbiAgICBfJGVsLmNzcyhcIm92ZXJmbG93XCIsIFwiaGlkZGVuXCIpO1xuXG4gICAgLy8gUmVtb3ZlZCwgc2VlIG9uZV9wYWdlX3ZpZXdAcmVuZGVyKClcbiAgICAvLyB2YXIgc2V0dGluZ3MgPSByZWFkZXIudmlld2VyU2V0dGluZ3MoKTtcbiAgICAvLyBpZiAoIXNldHRpbmdzIHx8IHR5cGVvZiBzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEID09PSBcInVuZGVmaW5lZFwiKVxuICAgIC8vIHtcbiAgICAvLyAgICAgLy9kZWZhdWx0c1xuICAgIC8vICAgICBzZXR0aW5ncyA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSk7XG4gICAgLy8gfVxuICAgIC8vIGlmIChzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEKSB7XG4gICAgLy9cbiAgICAvLyAgICAgLy8gVGhpcyBmaXhlcyByZW5kZXJpbmcgaXNzdWVzIHdpdGggV2ViVmlldyAobmF0aXZlIGFwcHMpLCB3aGljaCBjcm9wcyBjb250ZW50IGVtYmVkZGVkIGluIGlmcmFtZXMgdW5sZXNzIEdQVSBoYXJkd2FyZSBhY2NlbGVyYXRpb24gaXMgZW5hYmxlZCBmb3IgQ1NTIHJlbmRlcmluZy5cbiAgICAvLyAgICAgXyRlbC5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVaKDApXCIpO1xuICAgIC8vIH1cblxuICAgIF8kdmlld3BvcnQuYXBwZW5kKF8kZWwpO1xuXG4gICAgc2VsZi5hcHBseVN0eWxlcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdGhpcy5yZW1vdmUgPSBmdW5jdGlvbigpIHtcblxuICAgIF8kZWwucmVtb3ZlKCk7XG4gIH07XG5cblxuICB0aGlzLnNldFZpZXdTZXR0aW5ncyA9IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG5cbiAgICBfdmlld1NldHRpbmdzID0gc2V0dGluZ3M7XG5cbiAgICBfc3ByZWFkLnNldFN5bnRoZXRpY1NwcmVhZChkZWR1Y2VTeW50aGV0aWNTcHJlYWQoXyR2aWV3cG9ydCwgZ2V0Rmlyc3RWaXNpYmxlSXRlbSgpLCBfdmlld1NldHRpbmdzKSA9PSB0cnVlKTsgLy8gZm9yY2UgYm9vbGVhbiB2YWx1ZSAoZnJvbSB0cnV0aHkvZmFsc2V5IHJldHVybiB2YWx1ZSlcblxuICAgIHZhciB2aWV3cyA9IGdldERpc3BsYXlpbmdWaWV3cygpO1xuICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IHZpZXdzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIHZpZXdzW2ldLnNldFZpZXdTZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldEZpcnN0VmlzaWJsZUl0ZW0oKSB7XG5cbiAgICB2YXIgdmlzaWJsZUl0ZW1zID0gX3NwcmVhZC52YWxpZEl0ZW1zKCk7XG4gICAgcmV0dXJuIHZpc2libGVJdGVtc1swXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZHJhdyhpbml0aWF0b3IsIHBhZ2luYXRpb25SZXF1ZXN0KSB7XG5cbiAgICBpZiAoX2lzUmVkcm93aW5nKSB7XG4gICAgICBfcmVkcmF3UmVxdWVzdCA9IHtcbiAgICAgICAgaW5pdGlhdG9yOiBpbml0aWF0b3IsXG4gICAgICAgIHBhZ2luYXRpb25SZXF1ZXN0OiBwYWdpbmF0aW9uUmVxdWVzdFxuICAgICAgfTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfaXNSZWRyb3dpbmcgPSB0cnVlO1xuXG4gICAgdmFyIGNvbnRleHQgPSB7XG4gICAgICBpc0VsZW1lbnRBZGRlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgdmFyIHBhZ2VMb2FkRGVmZXJyYWxzID0gY3JlYXRlUGFnZUxvYWREZWZlcnJhbHMoW3tcbiAgICAgIHBhZ2VWaWV3OiBfbGVmdFBhZ2VWaWV3LFxuICAgICAgc3BpbmVJdGVtOiBfc3ByZWFkLmxlZnRJdGVtLFxuICAgICAgY29udGV4dDogY29udGV4dFxuICAgIH0sIHtcbiAgICAgIHBhZ2VWaWV3OiBfcmlnaHRQYWdlVmlldyxcbiAgICAgIHNwaW5lSXRlbTogX3NwcmVhZC5yaWdodEl0ZW0sXG4gICAgICBjb250ZXh0OiBjb250ZXh0XG4gICAgfSwge1xuICAgICAgcGFnZVZpZXc6IF9jZW50ZXJQYWdlVmlldyxcbiAgICAgIHNwaW5lSXRlbTogX3NwcmVhZC5jZW50ZXJJdGVtLFxuICAgICAgY29udGV4dDogY29udGV4dFxuICAgIH1dKTtcblxuICAgICQud2hlbi5hcHBseSgkLCBwYWdlTG9hZERlZmVycmFscykuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgIF9pc1JlZHJvd2luZyA9IGZhbHNlO1xuXG4gICAgICBpZiAoX3JlZHJhd1JlcXVlc3QpIHtcbiAgICAgICAgdmFyIHAxID0gX3JlZHJhd1JlcXVlc3QuaW5pdGlhdG9yO1xuICAgICAgICB2YXIgcDIgPSBfcmVkcmF3UmVxdWVzdC5wYWdpbmF0aW9uUmVxdWVzdDtcbiAgICAgICAgX3JlZHJhd1JlcXVlc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJlZHJhdyhwMSwgcDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbnRleHQuaXNFbGVtZW50QWRkZWQpIHtcbiAgICAgICAgICBzZWxmLmFwcGx5U3R5bGVzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFnaW5hdGlvblJlcXVlc3QpIHtcbiAgICAgICAgICBvblBhZ2VzTG9hZGVkKGluaXRpYXRvciwgcGFnaW5hdGlvblJlcXVlc3Quc3BpbmVJdGVtLCBwYWdpbmF0aW9uUmVxdWVzdC5lbGVtZW50SWQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25QYWdlc0xvYWRlZChpbml0aWF0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9KTtcblxuICB9XG5cbiAgLy8gZGlyOiAwID0+IG5ldyBvciBzYW1lIHBhZ2UsIDEgPT4gcHJldmlvdXMsIDIgPT4gbmV4dFxuICB2YXIgdXBkYXRlUGFnZVN3aXRjaERpciA9IGZ1bmN0aW9uKGRpciwgaGFzQ2hhbmdlZCkge1xuICAgIC8vIGlycmVzcGVjdGl2ZSBvZiBkaXNwbGF5IHN0YXRlXG4gICAgaWYgKF9sZWZ0UGFnZVZpZXcpIF9sZWZ0UGFnZVZpZXcudXBkYXRlUGFnZVN3aXRjaERpcihkaXIsIGhhc0NoYW5nZWQpO1xuICAgIGlmIChfcmlnaHRQYWdlVmlldykgX3JpZ2h0UGFnZVZpZXcudXBkYXRlUGFnZVN3aXRjaERpcihkaXIsIGhhc0NoYW5nZWQpO1xuICAgIGlmIChfY2VudGVyUGFnZVZpZXcpIF9jZW50ZXJQYWdlVmlldy51cGRhdGVQYWdlU3dpdGNoRGlyKGRpciwgaGFzQ2hhbmdlZCk7XG5cbiAgICAvLyB2YXIgdmlld3MgPSBnZXREaXNwbGF5aW5nVmlld3MoKTtcbiAgICAvLyBmb3IodmFyIGkgPSAwLCBjb3VudCA9IHZpZXdzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAvLyAgICAgdmlld3NbaV0udXBkYXRlUGFnZVN3aXRjaERpcihkaXIsIGhhc0NoYW5nZWQpO1xuICAgIC8vIH1cbiAgfTtcblxuXG4gIHRoaXMuYXBwbHlTdHlsZXMgPSBmdW5jdGlvbigpIHtcblxuICAgIHNldFN0eWxlcyhfdXNlclN0eWxlcy5nZXRTdHlsZXMoKSwgXyRlbC5wYXJlbnQoKSk7XG5cbiAgICB1cGRhdGVCb29rTWFyZ2lucygpO1xuICAgIHVwZGF0ZUNvbnRlbnRNZXRhU2l6ZSgpO1xuXG4gICAgcmVzaXplQm9vaygpO1xuICB9O1xuXG4gIHRoaXMuYXBwbHlCb29rU3R5bGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgdmlld3MgPSBnZXREaXNwbGF5aW5nVmlld3MoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IHZpZXdzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIHZpZXdzW2ldLmFwcGx5Qm9va1N0eWxlcygpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVQYWdlTG9hZERlZmVycmFscyh2aWV3SXRlbVBhaXJzKSB7XG5cbiAgICB2YXIgcGFnZUxvYWREZWZlcnJhbHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlld0l0ZW1QYWlycy5sZW5ndGg7IGkrKykge1xuXG4gICAgICB2YXIgZGZkID0gdXBkYXRlUGFnZVZpZXdGb3JJdGVtKHZpZXdJdGVtUGFpcnNbaV0ucGFnZVZpZXcsIHZpZXdJdGVtUGFpcnNbaV0uc3BpbmVJdGVtLCB2aWV3SXRlbVBhaXJzW2ldLmNvbnRleHQpO1xuICAgICAgcGFnZUxvYWREZWZlcnJhbHMucHVzaChkZmQpO1xuICAgIH1cblxuICAgIHJldHVybiBwYWdlTG9hZERlZmVycmFscztcblxuICB9XG5cbiAgZnVuY3Rpb24gb25QYWdlc0xvYWRlZChpbml0aWF0b3IsIHBhZ2luYXRpb25SZXF1ZXN0X3NwaW5lSXRlbSwgcGFnaW5hdGlvblJlcXVlc3RfZWxlbWVudElkKSB7XG5cbiAgICB1cGRhdGVDb250ZW50TWV0YVNpemUoKTtcbiAgICByZXNpemVCb29rKCk7XG5cbiAgICBzZWxmLnRyaWdnZXIoSW50ZXJuYWxFdmVudHMuQ1VSUkVOVF9WSUVXX1BBR0lOQVRJT05fQ0hBTkdFRCwge1xuICAgICAgcGFnaW5hdGlvbkluZm86IHNlbGYuZ2V0UGFnaW5hdGlvbkluZm8oKSxcbiAgICAgIGluaXRpYXRvcjogaW5pdGlhdG9yLFxuICAgICAgc3BpbmVJdGVtOiBwYWdpbmF0aW9uUmVxdWVzdF9zcGluZUl0ZW0sXG4gICAgICBlbGVtZW50SWQ6IHBhZ2luYXRpb25SZXF1ZXN0X2VsZW1lbnRJZFxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5vblZpZXdwb3J0UmVzaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgICAvL2JlY2F1c2UgY2hhbmdlIG9mIHRoZSB2aWV3cG9ydCBvcmllbnRhdGlvbiBjYW4gYWx0ZXIgcGFnaW5hdGlvbiBiZWhhdmlvdXIgd2UgaGF2ZSB0byBjaGVjayBpZlxuICAgIC8vdmlzaWJsZSBjb250ZW50IHN0YXlzIHNhbWVcblxuICAgIHZhciBmaXJzdFZpc2libGVJdGVtID0gZ2V0Rmlyc3RWaXNpYmxlSXRlbSgpO1xuICAgIGlmICghZmlyc3RWaXNpYmxlSXRlbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpc1N5bnRoZXRpY1NwcmVhZCA9IGRlZHVjZVN5bnRoZXRpY1NwcmVhZChfJHZpZXdwb3J0LCBmaXJzdFZpc2libGVJdGVtLCBfdmlld1NldHRpbmdzKSA9PSB0cnVlOyAvLyBmb3JjZSBib29sZWFuIHZhbHVlIChmcm9tIHRydXRoeS9mYWxzZXkgcmV0dXJuIHZhbHVlKVxuXG4gICAgaWYgKGlzU3ByZWFkQ2hhbmdlZChmaXJzdFZpc2libGVJdGVtLCBpc1N5bnRoZXRpY1NwcmVhZCkpIHtcbiAgICAgIF9zcHJlYWQuc2V0U3ludGhldGljU3ByZWFkKGlzU3ludGhldGljU3ByZWFkKTtcbiAgICAgIHZhciBwYWdpbmF0aW9uUmVxdWVzdCA9IG5ldyBQYWdlT3BlblJlcXVlc3QoZmlyc3RWaXNpYmxlSXRlbSwgc2VsZik7XG4gICAgICBzZWxmLm9wZW5QYWdlKHBhZ2luYXRpb25SZXF1ZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzaXplQm9vayh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gaXNTcHJlYWRDaGFuZ2VkKGZpcnN0VmlzaWJsZUl0ZW0sIGlzU3ludGhldGljU3ByZWFkKSB7XG5cbiAgICB2YXIgdG1wU3ByZWFkID0gbmV3IFNwcmVhZChfc3BpbmUsIGlzU3ludGhldGljU3ByZWFkKTtcbiAgICB0bXBTcHJlYWQub3Blbkl0ZW0oZmlyc3RWaXNpYmxlSXRlbSk7XG5cbiAgICByZXR1cm4gX3NwcmVhZC5sZWZ0SXRlbSAhPSB0bXBTcHJlYWQubGVmdEl0ZW0gfHwgX3NwcmVhZC5yaWdodEl0ZW0gIT0gdG1wU3ByZWFkLnJpZ2h0SXRlbSB8fCBfc3ByZWFkLmNlbnRlckl0ZW0gIT0gdG1wU3ByZWFkLmNlbnRlckl0ZW07XG4gIH1cblxuICB0aGlzLmdldFZpZXdTY2FsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfY3VycmVudFNjYWxlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGlzQ29udGVudFJlbmRlcmVkKCkge1xuXG4gICAgaWYgKCFfY29udGVudE1ldGFTaXplIHx8ICFfYm9va01hcmdpbnMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmlld3BvcnRXaWR0aCA9IF8kdmlld3BvcnQud2lkdGgoKTtcbiAgICB2YXIgdmlld3BvcnRIZWlnaHQgPSBfJHZpZXdwb3J0LmhlaWdodCgpO1xuXG4gICAgcmV0dXJuIHZpZXdwb3J0V2lkdGggJiYgdmlld3BvcnRIZWlnaHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZXNpemVCb29rKHZpZXdwb3J0SXNSZXNpemluZykge1xuXG4gICAgdXBkYXRlUGFnZVN3aXRjaERpcigwLCBmYWxzZSk7XG5cbiAgICBpZiAoIWlzQ29udGVudFJlbmRlcmVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmlld3BvcnRXaWR0aCA9IF8kdmlld3BvcnQud2lkdGgoKTtcbiAgICB2YXIgdmlld3BvcnRIZWlnaHQgPSBfJHZpZXdwb3J0LmhlaWdodCgpO1xuXG4gICAgdmFyIGxlZnRQYWdlTWFyZ2lucyA9IF9sZWZ0UGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkgPyBNYXJnaW5zLmZyb21FbGVtZW50KF9sZWZ0UGFnZVZpZXcuZWxlbWVudCgpKSA6IE1hcmdpbnMuZW1wdHkoKTtcbiAgICB2YXIgcmlnaHRQYWdlTWFyZ2lucyA9IF9yaWdodFBhZ2VWaWV3LmlzRGlzcGxheWluZygpID8gTWFyZ2lucy5mcm9tRWxlbWVudChfcmlnaHRQYWdlVmlldy5lbGVtZW50KCkpIDogTWFyZ2lucy5lbXB0eSgpO1xuICAgIHZhciBjZW50ZXJQYWdlTWFyZ2lucyA9IF9jZW50ZXJQYWdlVmlldy5pc0Rpc3BsYXlpbmcoKSA/IE1hcmdpbnMuZnJvbUVsZW1lbnQoX2NlbnRlclBhZ2VWaWV3LmVsZW1lbnQoKSkgOiBNYXJnaW5zLmVtcHR5KCk7XG5cbiAgICB2YXIgcGFnZU1hcmdpbnMgPSBnZXRNYXhQYWdlTWFyZ2lucyhsZWZ0UGFnZU1hcmdpbnMsIHJpZ2h0UGFnZU1hcmdpbnMsIGNlbnRlclBhZ2VNYXJnaW5zKTtcblxuICAgIHZhciBwb3RlbnRpYWxUYXJnZXRFbGVtZW50U2l6ZSA9IHtcbiAgICAgIHdpZHRoOiB2aWV3cG9ydFdpZHRoIC0gX2Jvb2tNYXJnaW5zLndpZHRoKCksXG4gICAgICBoZWlnaHQ6IHZpZXdwb3J0SGVpZ2h0IC0gX2Jvb2tNYXJnaW5zLmhlaWdodCgpXG4gICAgfTtcblxuICAgIHZhciBwb3RlbnRpYWxDb250ZW50U2l6ZSA9IHtcbiAgICAgIHdpZHRoOiBwb3RlbnRpYWxUYXJnZXRFbGVtZW50U2l6ZS53aWR0aCAtIHBhZ2VNYXJnaW5zLndpZHRoKCksXG4gICAgICBoZWlnaHQ6IHBvdGVudGlhbFRhcmdldEVsZW1lbnRTaXplLmhlaWdodCAtIHBhZ2VNYXJnaW5zLmhlaWdodCgpXG4gICAgfTtcblxuICAgIGlmIChwb3RlbnRpYWxUYXJnZXRFbGVtZW50U2l6ZS53aWR0aCA8PSAwIHx8IHBvdGVudGlhbFRhcmdldEVsZW1lbnRTaXplLmhlaWdodCA8PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGhvclNjYWxlID0gcG90ZW50aWFsQ29udGVudFNpemUud2lkdGggLyBfY29udGVudE1ldGFTaXplLndpZHRoO1xuICAgIHZhciB2ZXJTY2FsZSA9IHBvdGVudGlhbENvbnRlbnRTaXplLmhlaWdodCAvIF9jb250ZW50TWV0YVNpemUuaGVpZ2h0O1xuXG4gICAgXyR2aWV3cG9ydC5jc3MoXCJvdmVyZmxvd1wiLCBcImF1dG9cIik7XG5cbiAgICB2YXIgc2NhbGU7XG4gICAgaWYgKF96b29tLnN0eWxlID09ICdmaXQtd2lkdGgnKSB7XG4gICAgICBzY2FsZSA9IGhvclNjYWxlO1xuICAgIH0gZWxzZSBpZiAoX3pvb20uc3R5bGUgPT0gJ2ZpdC1oZWlnaHQnKSB7XG4gICAgICBzY2FsZSA9IHZlclNjYWxlO1xuICAgIH0gZWxzZSBpZiAoX3pvb20uc3R5bGUgPT0gJ3VzZXInKSB7XG4gICAgICBzY2FsZSA9IF96b29tLnNjYWxlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZSA9IE1hdGgubWluKGhvclNjYWxlLCB2ZXJTY2FsZSk7XG5cbiAgICAgIC8vIG5vIG5lZWQgZm9yIHBhbiBkdXJpbmcgXCJ2aWV3cG9ydCBmaXRcIiB6b29tXG4gICAgICBfJHZpZXdwb3J0LmNzcyhcIm92ZXJmbG93XCIsIFwiaGlkZGVuXCIpO1xuICAgIH1cblxuICAgIF9jdXJyZW50U2NhbGUgPSBzY2FsZTtcblxuICAgIHZhciBjb250ZW50U2l6ZSA9IHtcbiAgICAgIHdpZHRoOiBfY29udGVudE1ldGFTaXplLndpZHRoICogc2NhbGUsXG4gICAgICBoZWlnaHQ6IF9jb250ZW50TWV0YVNpemUuaGVpZ2h0ICogc2NhbGVcbiAgICB9O1xuXG4gICAgdmFyIHRhcmdldEVsZW1lbnRTaXplID0ge1xuICAgICAgd2lkdGg6IGNvbnRlbnRTaXplLndpZHRoICsgcGFnZU1hcmdpbnMud2lkdGgoKSxcbiAgICAgIGhlaWdodDogY29udGVudFNpemUuaGVpZ2h0ICsgcGFnZU1hcmdpbnMuaGVpZ2h0KClcbiAgICB9O1xuXG4gICAgdmFyIGJvb2tTaXplID0ge1xuICAgICAgd2lkdGg6IHRhcmdldEVsZW1lbnRTaXplLndpZHRoICsgX2Jvb2tNYXJnaW5zLndpZHRoKCksXG4gICAgICBoZWlnaHQ6IHRhcmdldEVsZW1lbnRTaXplLmhlaWdodCArIF9ib29rTWFyZ2lucy5oZWlnaHQoKVxuICAgIH07XG5cblxuICAgIHZhciBib29rTGVmdCA9IE1hdGguZmxvb3IoKHZpZXdwb3J0V2lkdGggLSBib29rU2l6ZS53aWR0aCkgLyAyKTtcbiAgICB2YXIgYm9va1RvcCA9IE1hdGguZmxvb3IoKHZpZXdwb3J0SGVpZ2h0IC0gYm9va1NpemUuaGVpZ2h0KSAvIDIpO1xuXG4gICAgaWYgKGJvb2tMZWZ0IDwgMCkgYm9va0xlZnQgPSAwO1xuICAgIGlmIChib29rVG9wIDwgMCkgYm9va1RvcCA9IDA7XG5cbiAgICBfJGVsLmNzcyhcImxlZnRcIiwgYm9va0xlZnQgKyBcInB4XCIpO1xuICAgIF8kZWwuY3NzKFwidG9wXCIsIGJvb2tUb3AgKyBcInB4XCIpO1xuICAgIF8kZWwuY3NzKFwid2lkdGhcIiwgdGFyZ2V0RWxlbWVudFNpemUud2lkdGggKyBcInB4XCIpO1xuICAgIF8kZWwuY3NzKFwiaGVpZ2h0XCIsIHRhcmdldEVsZW1lbnRTaXplLmhlaWdodCArIFwicHhcIik7XG5cbiAgICB2YXIgbGVmdCA9IF9ib29rTWFyZ2lucy5wYWRkaW5nLmxlZnQ7XG4gICAgdmFyIHRvcCA9IF9ib29rTWFyZ2lucy5wYWRkaW5nLnRvcDtcblxuICAgIHZhciB0cmFuc0Z1bmMgPSB2aWV3cG9ydElzUmVzaXppbmcgPyBcInRyYW5zZm9ybUNvbnRlbnRJbW1lZGlhdGVcIiA6IFwidHJhbnNmb3JtQ29udGVudFwiO1xuXG4gICAgaWYgKF9sZWZ0UGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkpIHtcblxuICAgICAgX2xlZnRQYWdlVmlld1t0cmFuc0Z1bmNdKHNjYWxlLCBsZWZ0LCB0b3ApO1xuICAgIH1cblxuICAgIGlmIChfcmlnaHRQYWdlVmlldy5pc0Rpc3BsYXlpbmcoKSkge1xuXG4gICAgICBsZWZ0ICs9IF9jb250ZW50TWV0YVNpemUuc2VwYXJhdG9yUG9zaXRpb24gKiBzY2FsZTtcblxuICAgICAgaWYgKF9sZWZ0UGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkpIHtcbiAgICAgICAgbGVmdCArPSBsZWZ0UGFnZU1hcmdpbnMubGVmdDtcbiAgICAgIH1cblxuICAgICAgX3JpZ2h0UGFnZVZpZXdbdHJhbnNGdW5jXShzY2FsZSwgbGVmdCwgdG9wKTtcbiAgICB9XG5cbiAgICBpZiAoX2NlbnRlclBhZ2VWaWV3LmlzRGlzcGxheWluZygpKSB7XG5cbiAgICAgIF9jZW50ZXJQYWdlVmlld1t0cmFuc0Z1bmNdKHNjYWxlLCBsZWZ0LCB0b3ApO1xuICAgIH1cblxuICAgIHNlbGYudHJpZ2dlcihFdmVudHMuRlhMX1ZJRVdfUkVTSVpFRCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNYXhQYWdlTWFyZ2lucyhsZWZ0UGFnZU1hcmdpbnMsIHJpZ2h0UGFnZU1hcmdpbnMsIGNlbnRlclBhZ2VNYXJnaW5zKSB7XG5cbiAgICB2YXIgc3VtTWFyZ2luID0ge1xuICAgICAgbGVmdDogTWF0aC5tYXgobGVmdFBhZ2VNYXJnaW5zLm1hcmdpbi5sZWZ0LCByaWdodFBhZ2VNYXJnaW5zLm1hcmdpbi5sZWZ0LCBjZW50ZXJQYWdlTWFyZ2lucy5tYXJnaW4ubGVmdCksXG4gICAgICByaWdodDogTWF0aC5tYXgobGVmdFBhZ2VNYXJnaW5zLm1hcmdpbi5yaWdodCwgcmlnaHRQYWdlTWFyZ2lucy5tYXJnaW4ucmlnaHQsIGNlbnRlclBhZ2VNYXJnaW5zLm1hcmdpbi5yaWdodCksXG4gICAgICB0b3A6IE1hdGgubWF4KGxlZnRQYWdlTWFyZ2lucy5tYXJnaW4udG9wLCByaWdodFBhZ2VNYXJnaW5zLm1hcmdpbi50b3AsIGNlbnRlclBhZ2VNYXJnaW5zLm1hcmdpbi50b3ApLFxuICAgICAgYm90dG9tOiBNYXRoLm1heChsZWZ0UGFnZU1hcmdpbnMubWFyZ2luLmJvdHRvbSwgcmlnaHRQYWdlTWFyZ2lucy5tYXJnaW4uYm90dG9tLCBjZW50ZXJQYWdlTWFyZ2lucy5tYXJnaW4uYm90dG9tKVxuICAgIH07XG5cbiAgICB2YXIgc3VtQm9yZGVyID0ge1xuICAgICAgbGVmdDogTWF0aC5tYXgobGVmdFBhZ2VNYXJnaW5zLmJvcmRlci5sZWZ0LCByaWdodFBhZ2VNYXJnaW5zLmJvcmRlci5sZWZ0LCBjZW50ZXJQYWdlTWFyZ2lucy5ib3JkZXIubGVmdCksXG4gICAgICByaWdodDogTWF0aC5tYXgobGVmdFBhZ2VNYXJnaW5zLmJvcmRlci5yaWdodCwgcmlnaHRQYWdlTWFyZ2lucy5ib3JkZXIucmlnaHQsIGNlbnRlclBhZ2VNYXJnaW5zLmJvcmRlci5yaWdodCksXG4gICAgICB0b3A6IE1hdGgubWF4KGxlZnRQYWdlTWFyZ2lucy5ib3JkZXIudG9wLCByaWdodFBhZ2VNYXJnaW5zLmJvcmRlci50b3AsIGNlbnRlclBhZ2VNYXJnaW5zLmJvcmRlci50b3ApLFxuICAgICAgYm90dG9tOiBNYXRoLm1heChsZWZ0UGFnZU1hcmdpbnMuYm9yZGVyLmJvdHRvbSwgcmlnaHRQYWdlTWFyZ2lucy5ib3JkZXIuYm90dG9tLCBjZW50ZXJQYWdlTWFyZ2lucy5ib3JkZXIuYm90dG9tKVxuICAgIH07XG5cbiAgICB2YXIgc3VtUEFkZGluZyA9IHtcbiAgICAgIGxlZnQ6IE1hdGgubWF4KGxlZnRQYWdlTWFyZ2lucy5wYWRkaW5nLmxlZnQsIHJpZ2h0UGFnZU1hcmdpbnMucGFkZGluZy5sZWZ0LCBjZW50ZXJQYWdlTWFyZ2lucy5wYWRkaW5nLmxlZnQpLFxuICAgICAgcmlnaHQ6IE1hdGgubWF4KGxlZnRQYWdlTWFyZ2lucy5wYWRkaW5nLnJpZ2h0LCByaWdodFBhZ2VNYXJnaW5zLnBhZGRpbmcucmlnaHQsIGNlbnRlclBhZ2VNYXJnaW5zLnBhZGRpbmcucmlnaHQpLFxuICAgICAgdG9wOiBNYXRoLm1heChsZWZ0UGFnZU1hcmdpbnMucGFkZGluZy50b3AsIHJpZ2h0UGFnZU1hcmdpbnMucGFkZGluZy50b3AsIGNlbnRlclBhZ2VNYXJnaW5zLnBhZGRpbmcudG9wKSxcbiAgICAgIGJvdHRvbTogTWF0aC5tYXgobGVmdFBhZ2VNYXJnaW5zLnBhZGRpbmcuYm90dG9tLCByaWdodFBhZ2VNYXJnaW5zLnBhZGRpbmcuYm90dG9tLCBjZW50ZXJQYWdlTWFyZ2lucy5wYWRkaW5nLmJvdHRvbSlcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBNYXJnaW5zKHN1bU1hcmdpbiwgc3VtQm9yZGVyLCBzdW1QQWRkaW5nKTtcblxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ29udGVudE1ldGFTaXplKCkge1xuXG4gICAgX2NvbnRlbnRNZXRhU2l6ZSA9IHt9O1xuXG4gICAgaWYgKF9jZW50ZXJQYWdlVmlldy5pc0Rpc3BsYXlpbmcoKSkge1xuICAgICAgX2NvbnRlbnRNZXRhU2l6ZS53aWR0aCA9IF9jZW50ZXJQYWdlVmlldy5tZXRhX3dpZHRoKCk7XG4gICAgICBfY29udGVudE1ldGFTaXplLmhlaWdodCA9IF9jZW50ZXJQYWdlVmlldy5tZXRhX2hlaWdodCgpO1xuICAgICAgX2NvbnRlbnRNZXRhU2l6ZS5zZXBhcmF0b3JQb3NpdGlvbiA9IDA7XG4gICAgfSBlbHNlIGlmIChfbGVmdFBhZ2VWaWV3LmlzRGlzcGxheWluZygpICYmIF9yaWdodFBhZ2VWaWV3LmlzRGlzcGxheWluZygpKSB7XG4gICAgICBpZiAoX2xlZnRQYWdlVmlldy5tZXRhX2hlaWdodCgpID09IF9yaWdodFBhZ2VWaWV3Lm1ldGFfaGVpZ2h0KCkpIHtcbiAgICAgICAgX2NvbnRlbnRNZXRhU2l6ZS53aWR0aCA9IF9sZWZ0UGFnZVZpZXcubWV0YV93aWR0aCgpICsgX3JpZ2h0UGFnZVZpZXcubWV0YV93aWR0aCgpO1xuICAgICAgICBfY29udGVudE1ldGFTaXplLmhlaWdodCA9IF9sZWZ0UGFnZVZpZXcubWV0YV9oZWlnaHQoKTtcbiAgICAgICAgX2NvbnRlbnRNZXRhU2l6ZS5zZXBhcmF0b3JQb3NpdGlvbiA9IF9sZWZ0UGFnZVZpZXcubWV0YV93aWR0aCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9ub3JtYWxpemUgYnkgaGVpZ2h0XG4gICAgICAgIF9jb250ZW50TWV0YVNpemUud2lkdGggPSBfbGVmdFBhZ2VWaWV3Lm1ldGFfd2lkdGgoKSArIF9yaWdodFBhZ2VWaWV3Lm1ldGFfd2lkdGgoKSAqIChfbGVmdFBhZ2VWaWV3Lm1ldGFfaGVpZ2h0KCkgLyBfcmlnaHRQYWdlVmlldy5tZXRhX2hlaWdodCgpKTtcbiAgICAgICAgX2NvbnRlbnRNZXRhU2l6ZS5oZWlnaHQgPSBfbGVmdFBhZ2VWaWV3Lm1ldGFfaGVpZ2h0KCk7XG4gICAgICAgIF9jb250ZW50TWV0YVNpemUuc2VwYXJhdG9yUG9zaXRpb24gPSBfbGVmdFBhZ2VWaWV3Lm1ldGFfd2lkdGgoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9sZWZ0UGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkpIHtcbiAgICAgIF9jb250ZW50TWV0YVNpemUud2lkdGggPSBfbGVmdFBhZ2VWaWV3Lm1ldGFfd2lkdGgoKSAqIDI7XG4gICAgICBfY29udGVudE1ldGFTaXplLmhlaWdodCA9IF9sZWZ0UGFnZVZpZXcubWV0YV9oZWlnaHQoKTtcbiAgICAgIF9jb250ZW50TWV0YVNpemUuc2VwYXJhdG9yUG9zaXRpb24gPSBfbGVmdFBhZ2VWaWV3Lm1ldGFfd2lkdGgoKTtcbiAgICB9IGVsc2UgaWYgKF9yaWdodFBhZ2VWaWV3LmlzRGlzcGxheWluZygpKSB7XG4gICAgICBfY29udGVudE1ldGFTaXplLndpZHRoID0gX3JpZ2h0UGFnZVZpZXcubWV0YV93aWR0aCgpICogMjtcbiAgICAgIF9jb250ZW50TWV0YVNpemUuaGVpZ2h0ID0gX3JpZ2h0UGFnZVZpZXcubWV0YV9oZWlnaHQoKTtcbiAgICAgIF9jb250ZW50TWV0YVNpemUuc2VwYXJhdG9yUG9zaXRpb24gPSBfcmlnaHRQYWdlVmlldy5tZXRhX3dpZHRoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jb250ZW50TWV0YVNpemUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVCb29rTWFyZ2lucygpIHtcbiAgICBfYm9va01hcmdpbnMgPSBNYXJnaW5zLmZyb21FbGVtZW50KF8kZWwpO1xuICB9XG5cbiAgLy8gZGlyOiAwID0+IG5ldyBvciBzYW1lIHBhZ2UsIDEgPT4gcHJldmlvdXMsIDIgPT4gbmV4dFxuICB0aGlzLm9wZW5QYWdlID0gZnVuY3Rpb24ocGFnaW5hdGlvblJlcXVlc3QsIGRpcikge1xuXG4gICAgaWYgKCFwYWdpbmF0aW9uUmVxdWVzdC5zcGluZUl0ZW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGVmdEl0ZW0gPSBfc3ByZWFkLmxlZnRJdGVtO1xuICAgIHZhciByaWdodEl0ZW0gPSBfc3ByZWFkLnJpZ2h0SXRlbTtcbiAgICB2YXIgY2VudGVySXRlbSA9IF9zcHJlYWQuY2VudGVySXRlbTtcblxuICAgIHZhciBpc1N5bnRoZXRpY1NwcmVhZCA9IGRlZHVjZVN5bnRoZXRpY1NwcmVhZChfJHZpZXdwb3J0LCBwYWdpbmF0aW9uUmVxdWVzdC5zcGluZUl0ZW0sIF92aWV3U2V0dGluZ3MpID09IHRydWU7IC8vIGZvcmNlIGJvb2xlYW4gdmFsdWUgKGZyb20gdHJ1dGh5L2ZhbHNleSByZXR1cm4gdmFsdWUpXG4gICAgX3NwcmVhZC5zZXRTeW50aGV0aWNTcHJlYWQoaXNTeW50aGV0aWNTcHJlYWQpO1xuICAgIF9zcHJlYWQub3Blbkl0ZW0ocGFnaW5hdGlvblJlcXVlc3Quc3BpbmVJdGVtKTtcblxuICAgIHZhciBoYXNDaGFuZ2VkID0gbGVmdEl0ZW0gIT09IF9zcHJlYWQubGVmdEl0ZW0gfHwgcmlnaHRJdGVtICE9PSBfc3ByZWFkLnJpZ2h0SXRlbSB8fCBjZW50ZXJJdGVtICE9PSBfc3ByZWFkLmNlbnRlckl0ZW07XG5cbiAgICBpZiAoZGlyID09PSBudWxsIHx8IHR5cGVvZiBkaXIgPT09IFwidW5kZWZpbmVkXCIpIGRpciA9IDA7XG5cbiAgICB1cGRhdGVQYWdlU3dpdGNoRGlyKGRpciA9PT0gMCA/IDAgOiAoX3NwcmVhZC5zcGluZS5pc1JpZ2h0VG9MZWZ0KCkgPyAoZGlyID09PSAxID8gMiA6IDEpIDogZGlyKSwgaGFzQ2hhbmdlZCk7XG5cbiAgICByZWRyYXcocGFnaW5hdGlvblJlcXVlc3QuaW5pdGlhdG9yLCBwYWdpbmF0aW9uUmVxdWVzdCk7XG4gIH07XG5cblxuICB0aGlzLm9wZW5QYWdlUHJldiA9IGZ1bmN0aW9uKGluaXRpYXRvcikge1xuXG4gICAgX3NwcmVhZC5vcGVuUHJldigpO1xuXG4gICAgdXBkYXRlUGFnZVN3aXRjaERpcihfc3ByZWFkLnNwaW5lLmlzUmlnaHRUb0xlZnQoKSA/IDIgOiAxLCB0cnVlKTtcblxuICAgIHJlZHJhdyhpbml0aWF0b3IsIHVuZGVmaW5lZCk7XG4gIH07XG5cbiAgdGhpcy5vcGVuUGFnZU5leHQgPSBmdW5jdGlvbihpbml0aWF0b3IpIHtcblxuICAgIF9zcHJlYWQub3Blbk5leHQoKTtcblxuICAgIHVwZGF0ZVBhZ2VTd2l0Y2hEaXIoX3NwcmVhZC5zcGluZS5pc1JpZ2h0VG9MZWZ0KCkgPyAxIDogMiwgdHJ1ZSk7XG5cbiAgICByZWRyYXcoaW5pdGlhdG9yLCB1bmRlZmluZWQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZVBhZ2VWaWV3Rm9ySXRlbShwYWdlVmlldywgaXRlbSwgY29udGV4dCkge1xuXG4gICAgdmFyIGRmZCA9ICQuRGVmZXJyZWQoKTtcblxuICAgIGlmICghaXRlbSkge1xuICAgICAgaWYgKHBhZ2VWaWV3LmlzRGlzcGxheWluZygpKSB7XG4gICAgICAgIHBhZ2VWaWV3LnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICBkZmQucmVzb2x2ZSgpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIGlmICghcGFnZVZpZXcuaXNEaXNwbGF5aW5nKCkpIHtcblxuICAgICAgICBfJGVsLmFwcGVuZChwYWdlVmlldy5yZW5kZXIoKS5lbGVtZW50KCkpO1xuXG4gICAgICAgIGNvbnRleHQuaXNFbGVtZW50QWRkZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBwYWdlVmlldy5sb2FkU3BpbmVJdGVtKGl0ZW0sIGZ1bmN0aW9uKHN1Y2Nlc3MsICRpZnJhbWUsIHNwaW5lSXRlbSwgaXNOZXdDb250ZW50RG9jdW1lbnRMb2FkZWQsIGNvbnRleHQpIHtcblxuICAgICAgICBpZiAoc3VjY2VzcyAmJiBpc05ld0NvbnRlbnREb2N1bWVudExvYWRlZCkge1xuXG4gICAgICAgICAgLy9pZiB3ZSBhIHJlIGxvYWRpbmcgZml4ZWQgdmlldyBtZXRhIHNpemUgc2hvdWxkIGJlIGRlZmluZWRcbiAgICAgICAgICBpZiAoIXBhZ2VWaWV3Lm1ldGFfaGVpZ2h0KCkgfHwgIXBhZ2VWaWV3Lm1ldGFfd2lkdGgoKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgZG9jdW1lbnQgXCIgKyBzcGluZUl0ZW0uaHJlZiArIFwiOiB2aWV3cG9ydCBpcyBub3Qgc3BlY2lmaWVkIVwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLkNPTlRFTlRfRE9DVU1FTlRfTE9BREVELCAkaWZyYW1lLCBzcGluZUl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZGZkLnJlc29sdmUoKTtcblxuICAgICAgfSwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRmZC5wcm9taXNlKCk7XG4gIH1cblxuICB0aGlzLmdldFBhZ2luYXRpb25JbmZvID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgcGFnaW5hdGlvbkluZm8gPSBuZXcgQ3VycmVudFBhZ2VzSW5mbyhfc3BpbmUsIHRydWUpO1xuXG4gICAgdmFyIHNwcmVhZEl0ZW1zID0gW19zcHJlYWQubGVmdEl0ZW0sIF9zcHJlYWQucmlnaHRJdGVtLCBfc3ByZWFkLmNlbnRlckl0ZW1dO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcHJlYWRJdGVtcy5sZW5ndGg7IGkrKykge1xuXG4gICAgICB2YXIgc3ByZWFkSXRlbSA9IHNwcmVhZEl0ZW1zW2ldO1xuXG4gICAgICBpZiAoc3ByZWFkSXRlbSkge1xuICAgICAgICBwYWdpbmF0aW9uSW5mby5hZGRPcGVuUGFnZSgwLCAxLCBzcHJlYWRJdGVtLmlkcmVmLCBzcHJlYWRJdGVtLmluZGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFnaW5hdGlvbkluZm87XG4gIH07XG5cbiAgdGhpcy5ib29rbWFya0N1cnJlbnRQYWdlID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgdmlld3MgPSBnZXREaXNwbGF5aW5nVmlld3MoKTtcblxuICAgIGlmICh2aWV3cy5sZW5ndGggPiAwKSB7XG5cbiAgICAgIHZhciBpZHJlZiA9IHZpZXdzWzBdLmN1cnJlbnRTcGluZUl0ZW0oKS5pZHJlZjtcbiAgICAgIHZhciBjZmkgPSB2aWV3c1swXS5nZXRGaXJzdFZpc2libGVFbGVtZW50Q2ZpKCk7XG5cbiAgICAgIGlmIChjZmkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNmaSA9IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgQm9va21hcmtEYXRhKGlkcmVmLCBjZmkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQm9va21hcmtEYXRhKFwiXCIsIFwiXCIpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERpc3BsYXlpbmdWaWV3cygpIHtcblxuICAgIHZhciB2aWV3c1RvQ2hlY2sgPSBbXTtcblxuICAgIGlmIChfc3BpbmUuaXNMZWZ0VG9SaWdodCgpKSB7XG4gICAgICB2aWV3c1RvQ2hlY2sgPSBbX2xlZnRQYWdlVmlldywgX2NlbnRlclBhZ2VWaWV3LCBfcmlnaHRQYWdlVmlld107XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXdzVG9DaGVjayA9IFtfcmlnaHRQYWdlVmlldywgX2NlbnRlclBhZ2VWaWV3LCBfbGVmdFBhZ2VWaWV3XTtcbiAgICB9XG5cbiAgICB2YXIgdmlld3MgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IHZpZXdzVG9DaGVjay5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBpZiAodmlld3NUb0NoZWNrW2ldLmlzRGlzcGxheWluZygpKSB7XG4gICAgICAgIHZpZXdzLnB1c2godmlld3NUb0NoZWNrW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmlld3M7XG4gIH1cblxuICB0aGlzLmdldExvYWRlZFNwaW5lSXRlbXMgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiBfc3ByZWFkLnZhbGlkSXRlbXMoKTtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnQgPSBmdW5jdGlvbihzcGluZUl0ZW0sIHNlbGVjdG9yKSB7XG5cbiAgICB2YXIgdmlld3MgPSBnZXREaXNwbGF5aW5nVmlld3MoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IHZpZXdzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcblxuICAgICAgdmFyIHZpZXcgPSB2aWV3c1tpXTtcbiAgICAgIGlmICh2aWV3LmN1cnJlbnRTcGluZUl0ZW0oKSA9PSBzcGluZUl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHZpZXcuZ2V0RWxlbWVudChzcGluZUl0ZW0sIHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zb2xlLmVycm9yKFwic3BpbmUgaXRlbSBpcyBub3QgbG9hZGVkXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgaWQpIHtcblxuICAgIHZhciB2aWV3cyA9IGdldERpc3BsYXlpbmdWaWV3cygpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gdmlld3MubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuXG4gICAgICB2YXIgdmlldyA9IHZpZXdzW2ldO1xuICAgICAgaWYgKHZpZXcuY3VycmVudFNwaW5lSXRlbSgpID09IHNwaW5lSXRlbSkge1xuICAgICAgICByZXR1cm4gdmlldy5nZXRFbGVtZW50QnlJZChzcGluZUl0ZW0sIGlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zb2xlLmVycm9yKFwic3BpbmUgaXRlbSBpcyBub3QgbG9hZGVkXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50QnlDZmkgPSBmdW5jdGlvbihzcGluZUl0ZW0sIGNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICB2YXIgdmlld3MgPSBnZXREaXNwbGF5aW5nVmlld3MoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IHZpZXdzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcblxuICAgICAgdmFyIHZpZXcgPSB2aWV3c1tpXTtcbiAgICAgIGlmICh2aWV3LmN1cnJlbnRTcGluZUl0ZW0oKSA9PSBzcGluZUl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHZpZXcuZ2V0RWxlbWVudEJ5Q2ZpKHNwaW5lSXRlbSwgY2ZpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciB2aWV3cyA9IGdldERpc3BsYXlpbmdWaWV3cygpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gdmlld3MubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgdmFyIGVsID0gdmlld3NbaV0uZ2V0Rmlyc3RWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudCgpO1xuICAgICAgaWYgKGVsKSByZXR1cm4gZWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLmluc3VyZUVsZW1lbnRWaXNpYmlsaXR5ID0gZnVuY3Rpb24oc3BpbmVJdGVtSWQsIGVsZW1lbnQsIGluaXRpYXRvcikge1xuXG4gICAgLy9UT0RPOiBkdXJpbmcgem9vbStwYW4sIHBsYXlpbmcgZWxlbWVudCBtaWdodCBub3QgYWN0dWFseSBiZSB2aXNpYmxlXG5cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpeGVkVmlldyIsInZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgVVJJID0gcmVxdWlyZSgnVVJJanMnKVxuXG5mdW5jdGlvbiBJRnJhbWVMb2FkZXIoKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZXZlbnRMaXN0ZW5lcnMgPSB7fTtcblxuXG4gIHRoaXMuYWRkSUZyYW1lRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcblxuICAgIGlmIChldmVudExpc3RlbmVyc1tldmVudE5hbWVdID09IHVuZGVmaW5lZCkge1xuICAgICAgZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xuICAgIH1cblxuICAgIGV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0ucHVzaCh7XG4gICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICBjb250ZXh0OiBjb250ZXh0XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy51cGRhdGVJZnJhbWVFdmVudHMgPSBmdW5jdGlvbihpZnJhbWUpIHtcblxuICAgIF8uZWFjaChldmVudExpc3RlbmVycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGNvdW50ID0gdmFsdWUubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAkKGlmcmFtZS5jb250ZW50V2luZG93KS5vZmYoa2V5KTtcbiAgICAgICAgJChpZnJhbWUuY29udGVudFdpbmRvdykub24oa2V5LCB2YWx1ZVtpXS5jYWxsYmFjaywgdmFsdWVbaV0uY29udGV4dCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5sb2FkSWZyYW1lID0gZnVuY3Rpb24oaWZyYW1lLCBzcmMsIGNhbGxiYWNrLCBjb250ZXh0LCBhdHRhY2hlZERhdGEpIHtcblxuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWJhc2VVcmlcIiwgaWZyYW1lLmJhc2VVUkkpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiLCBzcmMpO1xuXG4gICAgdmFyIGxvYWRlZERvY3VtZW50VXJpID0gbmV3IFVSSShzcmMpLmFic29sdXRlVG8oaWZyYW1lLmJhc2VVUkkpLnRvU3RyaW5nKCk7XG5cbiAgICBzZWxmLl9sb2FkSWZyYW1lV2l0aFVyaShpZnJhbWUsIGF0dGFjaGVkRGF0YSwgbG9hZGVkRG9jdW1lbnRVcmksIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRvYyA9IGlmcmFtZS5jb250ZW50RG9jdW1lbnQgfHwgaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gICAgICAkKCdzdmcnLCBkb2MpLmxvYWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdsb2FkZWQnKTtcbiAgICAgIH0pO1xuICAgICAgY2FsbGJhY2suY2FsbChjb250ZXh0LCB0cnVlLCBhdHRhY2hlZERhdGEpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuX2xvYWRJZnJhbWVXaXRoVXJpID0gZnVuY3Rpb24oaWZyYW1lLCBhdHRhY2hlZERhdGEsIGNvbnRlbnRVcmksIGNhbGxiYWNrKSB7XG5cbiAgICBpZnJhbWUub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgIHNlbGYudXBkYXRlSWZyYW1lRXZlbnRzKGlmcmFtZSk7XG5cbiAgICAgIHZhciBtYXRoSmF4ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuTWF0aEpheDtcbiAgICAgIGlmIChtYXRoSmF4KSB7XG4gICAgICAgIC8vIElmIE1hdGhKYXggaXMgYmVpbmcgdXNlZCwgZGVsYXkgdGhlIGNhbGxiYWNrIHVudGlsIGl0IGhhcyBjb21wbGV0ZWQgcmVuZGVyaW5nXG4gICAgICAgIHZhciBtYXRoSmF4Q2FsbGJhY2sgPSBfLm9uY2UoY2FsbGJhY2spO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG1hdGhKYXguSHViLlF1ZXVlKG1hdGhKYXhDYWxsYmFjayk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRoSmF4IGZhaWwhXCIpO1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3IgYXQgYW4gOCBzZWNvbmQgdGltZW91dCwgd2hpY2ggZXZlciBjb21lcyBmaXJzdFxuICAgICAgICAvL3dpbmRvdy5zZXRUaW1lb3V0KG1hdGhKYXhDYWxsYmFjaywgODAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKFwic3JjXCIsIGNvbnRlbnRVcmkpO1xuXG4gIH07XG5cblxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSUZyYW1lTG9hZGVyIiwiLy8gVE9ETyBSZW1vdmUgd2hlbiBhbGwgdW5kZXJzY29yZSBkZXBzIGFyZSBnb25lXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxuXG52YXIgVmlld3MgPSB7XG4gIElGcmFtZUxvYWRlcjogcmVxdWlyZSgnLi9pZnJhbWUtbG9hZGVyJyksXG4gIFJlYWRlclZpZXc6IHJlcXVpcmUoJy4vcmVhZGVyLXZpZXcnKVxufVxuXG52YXIgVmlld3NDb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpXG5cbl8uZXh0ZW5kKFZpZXdzLCBWaWV3c0NvbnN0YW50cylcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3cyIsIi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgSW50ZXJwcmV0ZXIgPSByZXF1aXJlKCdlcHViLWNmaScpLkludGVycHJldGVyXG52YXIgVVJJID0gcmVxdWlyZSgnVVJJanMnKVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gcmVhZGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSW50ZXJuYWxMaW5rc1N1cHBvcnQocmVhZGVyKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIHNwbGl0Q2ZpKGZ1bGxDZmkpIHtcblxuICAgIHZhciBzdGFydEl4ID0gZnVsbENmaS5pbmRleE9mKFwiKFwiKTtcbiAgICB2YXIgYnVuZ0l4ID0gZnVsbENmaS5pbmRleE9mKFwiIVwiKTtcbiAgICB2YXIgZW5kSXggPSBmdWxsQ2ZpLmluZGV4T2YoXCIpXCIpO1xuXG4gICAgaWYgKGJ1bmdJeCA9PSAtMSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoZW5kSXggPT0gLTEpIHtcbiAgICAgIGVuZEl4ID0gZnVsbENmaS5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcblxuICAgICAgc3BpbmVJdGVtQ2ZpOiBmdWxsQ2ZpLnN1YnN0cmluZyhzdGFydEl4ICsgMSwgYnVuZ0l4KSxcbiAgICAgIGVsZW1lbnRDZmk6IGZ1bGxDZmkuc3Vic3RyaW5nKGJ1bmdJeCArIDEsIGVuZEl4KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEFic29sdXRlVXJpUmVsYXRpdmVUb1NwaW5lSXRlbShocmVmVXJpLCBzcGluZUl0ZW0pIHtcblxuICAgIHZhciBmdWxsUGF0aCA9IHJlYWRlci5wYWNrYWdlKCkucmVzb2x2ZVJlbGF0aXZlVXJsKHNwaW5lSXRlbS5ocmVmKTtcblxuICAgIHZhciBhYnNVcmwgPSBocmVmVXJpLmFic29sdXRlVG8oZnVsbFBhdGgpO1xuXG4gICAgcmV0dXJuIGFic1VybDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NEZWVwTGluayhocmVmVXJpLCBzcGluZUl0ZW0pIHtcblxuICAgIHZhciBhYnNvbHV0ZU9wZlVyaSA9IGdldEFic29sdXRlVXJpUmVsYXRpdmVUb1NwaW5lSXRlbShocmVmVXJpLCBzcGluZUl0ZW0pO1xuXG4gICAgaWYgKCFhYnNvbHV0ZU9wZlVyaSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byByZXNvbHZlIFwiICsgaHJlZlVyaS5ocmVmKCkpXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxDZmkgPSBocmVmVXJpLmZyYWdtZW50KCk7XG5cbiAgICB2YXIgYWJzUGF0aCA9IGFic29sdXRlT3BmVXJpLnRvU3RyaW5nKCk7XG5cbiAgICBhYnNQYXRoID0gUmVtb3ZlRnJvbVN0cmluZyhhYnNQYXRoLCBcIiNcIiArIGZ1bGxDZmkpO1xuXG4gICAgcmVhZE9wZkZpbGUoYWJzUGF0aCwgZnVuY3Rpb24ob3BmVGV4dCkge1xuXG4gICAgICBpZiAoIW9wZlRleHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXI7XG4gICAgICB2YXIgcGFja2FnZURvbSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcob3BmVGV4dCwgJ3RleHQveG1sJyk7XG4gICAgICB2YXIgY2ZpID0gc3BsaXRDZmkoZnVsbENmaSk7XG5cbiAgICAgIGlmICghY2ZpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBzcGxpdCBjZmk6XCIgKyBmdWxsQ2ZpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGVudERvY1JlZiA9IEludGVycHJldGVyLmdldENvbnRlbnREb2NIcmVmKFwiZXB1YmNmaShcIiArIGNmaS5zcGluZUl0ZW1DZmkgKyBcIilcIiwgcGFja2FnZURvbSk7XG5cbiAgICAgIGlmIChjb250ZW50RG9jUmVmKSB7XG5cbiAgICAgICAgdmFyIG5ld1NwaW5lSXRlbSA9IHJlYWRlci5zcGluZSgpLmdldEl0ZW1CeUhyZWYoY29udGVudERvY1JlZik7XG4gICAgICAgIGlmIChuZXdTcGluZUl0ZW0pIHtcblxuICAgICAgICAgIHJlYWRlci5vcGVuU3BpbmVJdGVtRWxlbWVudENmaShuZXdTcGluZUl0ZW0uaWRyZWYsIGNmaS5lbGVtZW50Q2ZpLCBzZWxmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gZmluZCBzcGluZUl0ZW0gd2l0aCBocmVmPVwiICsgY29udGVudERvY1JlZik7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVW5hYmxlIHRvIGZpbmQgZG9jdW1lbnQgcmVmIGZyb20gXCIgKyBmdWxsQ2ZpICsgXCIgY2ZpXCIpO1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRPcGZGaWxlKHBhdGgsIGNhbGxiYWNrKSB7XG5cbiAgICAkLmFqYXgoe1xuICAgICAgLy8gZW5jb2Rpbmc6IFwiVVRGLThcIixcbiAgICAgIC8vIG1pbWVUeXBlOiBcInRleHQvcGxhaW47IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgIC8vIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCB4aHIgKSB7XG4gICAgICAvLyAgICAgeGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PVVURi04XCIpO1xuICAgICAgLy8gfSxcbiAgICAgIGlzTG9jYWw6IHBhdGguaW5kZXhPZihcImh0dHBcIikgPT09IDAgPyBmYWxzZSA6IHRydWUsXG4gICAgICB1cmw6IHBhdGgsXG4gICAgICBkYXRhVHlwZTogJ3RleHQnLFxuICAgICAgYXN5bmM6IHRydWUsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHdoZW4gQUpBWCBmZXRjaGluZyAnICsgcGF0aCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3Ioc3RhdHVzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvclRocm93bik7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvL2NoZWNrcyBpZiBocmVmIGluY2x1ZGVzIHBhdGggdG8gb3BmIGZpbGUgYW5kIGZ1bGwgY2ZpXG4gIGZ1bmN0aW9uIGlzRGVlcExpa0hyZWYodXJpKSB7XG5cbiAgICB2YXIgZmlsZU5hbWUgPSB1cmkuZmlsZW5hbWUoKTtcbiAgICByZXR1cm4gZmlsZU5hbWUgJiYgRW5kc1dpdGgoZmlsZU5hbWUsIFwiLm9wZlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NMaW5rV2l0aEhhc2goaHJlZlVyaSwgc3BpbmVJdGVtKSB7XG5cbiAgICB2YXIgZmlsZU5hbWUgPSBocmVmVXJpLmZpbGVuYW1lKCk7XG5cbiAgICB2YXIgaWRyZWY7XG5cbiAgICAvL3JlZmVyZW5jZSB0byBhbm90aGVyIGZpbGVcbiAgICBpZiAoZmlsZU5hbWUpIHtcbiAgICAgIHZhciBub3JtYWxpemVkVXJpID0gbmV3IFVSSShocmVmVXJpLCBzcGluZUl0ZW0uaHJlZik7XG5cbiAgICAgIHZhciBwYXRobmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChub3JtYWxpemVkVXJpLnBhdGhuYW1lKCkpO1xuXG4gICAgICB2YXIgbmV3U3BpbmVJdGVtID0gcmVhZGVyLnNwaW5lKCkuZ2V0SXRlbUJ5SHJlZihwYXRobmFtZSk7XG5cbiAgICAgIGlmICghbmV3U3BpbmVJdGVtKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIHdpdGggaHJlZj1cIiArIHBhdGhuYW1lICsgXCIgbm90IGZvdW5kXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlkcmVmID0gbmV3U3BpbmVJdGVtLmlkcmVmO1xuICAgIH0gZWxzZSB7IC8vaHVzaCBpbiB0aGUgc2FtZSBmaWxlXG4gICAgICBpZHJlZiA9IHNwaW5lSXRlbS5pZHJlZjtcbiAgICB9XG5cbiAgICB2YXIgaGFzaEZyYWcgPSBocmVmVXJpLmZyYWdtZW50KCk7XG5cbiAgICByZWFkZXIub3BlblNwaW5lSXRlbUVsZW1lbnRJZChpZHJlZiwgaGFzaEZyYWcsIHNlbGYpO1xuXG4gIH1cblxuICB0aGlzLnByb2Nlc3NMaW5rRWxlbWVudHMgPSBmdW5jdGlvbigkaWZyYW1lLCBzcGluZUl0ZW0pIHtcblxuICAgIHZhciBlcHViQ29udGVudERvY3VtZW50ID0gJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQ7XG5cbiAgICAkKCdhJywgZXB1YkNvbnRlbnREb2N1bWVudCkuY2xpY2soZnVuY3Rpb24oY2xpY2tFdmVudCkge1xuICAgICAgLy8gQ2hlY2sgZm9yIGJvdGggaHJlZiBhbmQgeGxpbms6aHJlZiBhdHRyaWJ1dGUgYW5kIGdldCB2YWx1ZVxuICAgICAgdmFyIGhyZWY7XG4gICAgICBpZiAoY2xpY2tFdmVudC5jdXJyZW50VGFyZ2V0LmF0dHJpYnV0ZXNbXCJ4bGluazpocmVmXCJdKSB7XG5cbiAgICAgICAgaHJlZiA9IGNsaWNrRXZlbnQuY3VycmVudFRhcmdldC5hdHRyaWJ1dGVzW1wieGxpbms6aHJlZlwiXS52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhyZWYgPSBjbGlja0V2ZW50LmN1cnJlbnRUYXJnZXQuYXR0cmlidXRlc1tcImhyZWZcIl0udmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdmVycmlkZUNsaWNrRXZlbnQgPSBmYWxzZTtcbiAgICAgIHZhciBocmVmVXJpID0gbmV3IFVSSShocmVmKTtcbiAgICAgIHZhciBocmVmSXNSZWxhdGl2ZSA9IGhyZWZVcmkuaXMoJ3JlbGF0aXZlJyk7XG5cbiAgICAgIGlmIChocmVmSXNSZWxhdGl2ZSkge1xuXG4gICAgICAgIGlmIChpc0RlZXBMaWtIcmVmKGhyZWZVcmkpKSB7XG4gICAgICAgICAgcHJvY2Vzc0RlZXBMaW5rKGhyZWZVcmksIHNwaW5lSXRlbSk7XG4gICAgICAgICAgb3ZlcnJpZGVDbGlja0V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzTGlua1dpdGhIYXNoKGhyZWZVcmksIHNwaW5lSXRlbSk7XG4gICAgICAgICAgb3ZlcnJpZGVDbGlja0V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJdCdzIGFuIGFic29sdXRlIFVSTCB0byBhIHJlbW90ZSBzaXRlIC0gb3BlbiBpdCBpbiBhIHNlcGFyYXRlIHdpbmRvdyBvdXRzaWRlIHRoZSByZWFkZXJcbiAgICAgICAgd2luZG93Lm9wZW4oaHJlZiwgJ19ibGFuaycpO1xuICAgICAgICBvdmVycmlkZUNsaWNrRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAob3ZlcnJpZGVDbGlja0V2ZW50KSB7XG4gICAgICAgIGNsaWNrRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY2xpY2tFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcm5hbExpbmtzU3VwcG9ydCIsIi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIEVQVUJjZmkgPSByZXF1aXJlKCdlcHViLWNmaScpXG52YXIgU21pbEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vbW9kZWxzL3NtaWwtaXRlcmF0b3InKTtcbnZhciBSZXNvbHZlQ29udGVudFJlZiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVzb2x2ZS1jb250ZW50LXJlZicpXG5cblxuLyoqXG4gKlxuICogQHBhcmFtIG1lZGlhT3ZlcmxheVxuICogQHBhcmFtIG1lZGlhT3ZlcmxheVBsYXllclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1lZGlhT3ZlcmxheURhdGFJbmplY3RvcihtZWRpYU92ZXJsYXksIG1lZGlhT3ZlcmxheVBsYXllcikge1xuXG4gIHRoaXMuYXR0YWNoTWVkaWFPdmVybGF5RGF0YSA9IGZ1bmN0aW9uKCRpZnJhbWUsIHNwaW5lSXRlbSwgbWVkaWFPdmVybGF5U2V0dGluZ3MpIHtcblxuICAgIHZhciBjb250ZW50RG9jRWxlbWVudCA9ICRpZnJhbWVbMF0uY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgIGlmICghc3BpbmVJdGVtLm1lZGlhX292ZXJsYXlfaWQgJiYgbWVkaWFPdmVybGF5LnNtaWxfbW9kZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciAkYm9keSA9ICQoXCJib2R5XCIsIGNvbnRlbnREb2NFbGVtZW50KTtcbiAgICBpZiAoJGJvZHkubGVuZ3RoID09IDApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCIhIEJPRFkgPz8/XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2xpY2sgPSAkYm9keS5kYXRhKFwibWVkaWFPdmVybGF5Q2xpY2tcIik7XG4gICAgICBpZiAoY2xpY2spIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXQVJOXSBhbHJlYWR5IG1lZGlhT3ZlcmxheUNsaWNrXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGJvZHkuZGF0YShcIm1lZGlhT3ZlcmxheUNsaWNrXCIsIHtcbiAgICAgICAgICBwaW5nOiBcInBvbmdcIlxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY2xpY2tFdmVudCA9ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/ICd0b3VjaHN0YXJ0JyA6ICdjbGljayc7XG4gICAgICAgICRib2R5LmJpbmQoY2xpY2tFdmVudCwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICB2YXIgZWxlbSA9ICQodGhpcylbMF07IC8vIGJvZHlcbiAgICAgICAgICBlbGVtID0gZXZlbnQudGFyZ2V0OyAvLyBib2R5IGRlc2NlbmRhbnRcblxuICAgICAgICAgIGlmICghZWxlbSkge1xuICAgICAgICAgICAgbWVkaWFPdmVybGF5UGxheWVyLnRvdWNoSW5pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiTU8gQ0xJQ0s6IFwiICsgZWxlbS5pZCk7XG5cbiAgICAgICAgICB2YXIgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB2YXIgZWwgPSBlbGVtO1xuXG4gICAgICAgICAgdmFyIGluTGluayA9IGZhbHNlO1xuICAgICAgICAgIGlmIChlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImFcIikge1xuICAgICAgICAgICAgaW5MaW5rID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aGlsZSAoIShkYXRhID0gJChlbCkuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIikpKSB7XG4gICAgICAgICAgICBpZiAoZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJhXCIpIHtcbiAgICAgICAgICAgICAgaW5MaW5rID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsID0gZWwucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGlmICghZWwpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgKGRhdGEucGFyIHx8IGRhdGEucGFycykpIHtcbiAgICAgICAgICAgIGlmIChlbCAhPT0gZWxlbSkge1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiTU8gQ0xJQ0sgUkVESVJFQ1Q6IFwiICsgZWwuaWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW1lZGlhT3ZlcmxheVNldHRpbmdzLm1lZGlhT3ZlcmxheXNFbmFibGVDbGljaykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1PIENMSUNLIERJU0FCTEVEXCIpO1xuICAgICAgICAgICAgICBtZWRpYU92ZXJsYXlQbGF5ZXIudG91Y2hJbml0KCk7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5MaW5rKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTU8gQ0xJQ0tFRCBMSU5LXCIpO1xuICAgICAgICAgICAgICBtZWRpYU92ZXJsYXlQbGF5ZXIudG91Y2hJbml0KCk7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyID0gZGF0YS5wYXIgPyBkYXRhLnBhciA6IGRhdGEucGFyc1swXTtcblxuICAgICAgICAgICAgaWYgKGRhdGEucGFycyAmJiAodHlwZW9mIHJhbmd5ICE9PSBcInVuZGVmaW5lZFwiKSkge1xuICAgICAgICAgICAgICB2YXIgd2FzUGF1c2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgLy8gVG8gcmVtb3ZlIGhpZ2hsaWdodCB3aGljaCBtYXkgaGF2ZSBhbHRlcmVkIERPTSAoYW5kIGJyZWFrIENGSSBleHByZXNzaW9ucylcbiAgICAgICAgICAgICAgaWYgKG1lZGlhT3ZlcmxheVBsYXllci5pc1BsYXlpbmdDZmkoKSkge1xuICAgICAgICAgICAgICAgIHdhc1BhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgbWVkaWFPdmVybGF5UGxheWVyLnBhdXNlKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgLy8gXG4gICAgICAgICAgICAgIC8vIHZhciBwID0ge3g6IGV2ZW50LnBhZ2VYLCB5OiBldmVudC5wYWdlWX07XG4gICAgICAgICAgICAgIC8vIGlmICh3ZWJraXRDb252ZXJ0UG9pbnRGcm9tUGFnZVRvTm9kZSlcbiAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAvLyAgICAgcCA9IHdlYmtpdENvbnZlcnRQb2ludEZyb21QYWdlVG9Ob2RlKGVsZW0ub3duZXJEb2N1bWVudC5ib2R5LCBuZXcgV2ViS2l0UG9pbnQoZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZKSk7XG4gICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgLy8gXG4gICAgICAgICAgICAgIC8vIHZhciBkaXYgPSBlbGVtLm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJDTElDS0VEXCIpO1xuICAgICAgICAgICAgICAvLyBpZiAoZGl2KVxuICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgIC8vICAgICBkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpO1xuICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgIC8vIFxuICAgICAgICAgICAgICAvLyBkaXYgPSBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLCAnZGl2Jyk7XG4gICAgICAgICAgICAgIC8vIGRpdi5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcImJhY2tncm91bmQtY29sb3I6IHJlZDsgcG9zaXRpb246IGFic29sdXRlOyB6LWluZGV4OiA5OTk7IHdpZHRoOiA1MHB4OyBoZWlnaHQ6IDUwcHg7IGxlZnQ6IFwiICsgcC54ICsgXCJweDsgdG9wOiBcIiArIHAueSArIFwicHg7XCIpO1xuICAgICAgICAgICAgICAvLyBkaXYuaWQgPSBcIkNMSUNLRURcIjtcbiAgICAgICAgICAgICAgLy8gZGl2LnNldEF0dHJpYnV0ZShcImlkXCIsIGRpdi5pZCk7XG4gICAgICAgICAgICAgIC8vIHZhciBkaXZUeHQgPSBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIgXCIpO1xuICAgICAgICAgICAgICAvLyBkaXYuYXBwZW5kQ2hpbGQoZGl2VHh0KTtcbiAgICAgICAgICAgICAgLy8gZWxlbS5vd25lckRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4gICAgICAgICAgICAgIC8vcmFuZ3kuaW5pdCgpO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFRISVMgV09SS1MgKHNhbWUgYXMgUmFuZ3kncyBtZXRob2QgYmVsb3cpXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcjtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtLm93bmVyRG9jdW1lbnQuY2FyZXRSYW5nZUZyb21Qb2ludClcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gZWxlbS5vd25lckRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQoZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LnJhbmdlUGFyZW50KVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChldmVudC5yYW5nZVBhcmVudCwgZXZlbnQucmFuZ2VPZmZzZXQpO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCItLS0tLS0gMVwiKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlbGVtLm93bmVyRG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50LnBhZ2VYKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhldmVudC5wYWdlWSk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coci5zdGFydENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coci5zdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCItLS0tLS1cIik7XG5cbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gcmFuZ3kucG9zaXRpb25Gcm9tUG9pbnQoZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZLCBlbGVtLm93bmVyRG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiLS0tLS0tIDJcIik7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocG9zLm5vZGUudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHBvcy5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiLS0tLS0tXCIpO1xuXG4gICAgICAgICAgICAgICAgcGFyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaVBhciA9IDA7IGlQYXIgPCBkYXRhLnBhcnMubGVuZ3RoOyBpUGFyKyspIHtcbiAgICAgICAgICAgICAgICAgIHZhciBwID0gZGF0YS5wYXJzW2lQYXJdO1xuXG4gICAgICAgICAgICAgICAgICB2YXIgc3RhcnRDRkkgPSBcImVwdWJjZmkoXCIgKyBwLmNmaS5wYXJ0aWFsU3RhcnRDZmkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgIHZhciBpbmZvU3RhcnQgPSBFUFVCY2ZpLmdldFRleHRUZXJtaW51c0luZm9XaXRoUGFydGlhbENGSShzdGFydENGSSwgZWxlbS5vd25lckRvY3VtZW50LCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXSk7XG4gICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGluZm9TdGFydCk7XG5cbiAgICAgICAgICAgICAgICAgIHZhciBlbmRDRkkgPSBcImVwdWJjZmkoXCIgKyBwLmNmaS5wYXJ0aWFsRW5kQ2ZpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICB2YXIgaW5mb0VuZCA9IEVQVUJjZmkuZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJKGVuZENGSSwgZWxlbS5vd25lckRvY3VtZW50LCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXSk7XG4gICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGluZm9FbmQpO1xuXG4gICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSByYW5neS5jcmVhdGVSYW5nZShlbGVtLm93bmVyRG9jdW1lbnQpOyAvL2NyZWF0ZU5hdGl2ZVJhbmdlXG4gICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEFuZEVuZChcbiAgICAgICAgICAgICAgICAgICAgaW5mb1N0YXJ0LnRleHROb2RlWzBdLCBpbmZvU3RhcnQudGV4dE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5mb0VuZC50ZXh0Tm9kZVswXSwgaW5mb0VuZC50ZXh0T2Zmc2V0XG4gICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICBpZiAocmFuZ2UuaXNQb2ludEluUmFuZ2UocG9zLm5vZGUsIHBvcy5vZmZzZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHAuY2ZpLnBhcnRpYWxTdGFydENmaSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHAuY2ZpLnBhcnRpYWxFbmRDZmkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBET1VCTEUgQ0hFQ0sgV0lUSCBnZXRDbGllbnRSZWN0cyA/P1xuXG4gICAgICAgICAgICAgICAgICAgIHBhciA9IHA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIXBhcikge1xuICAgICAgICAgICAgICAgIGlmICh3YXNQYXVzZWQpIHtcbiAgICAgICAgICAgICAgICAgIG1lZGlhT3ZlcmxheVBsYXllci50b2dnbGVNZWRpYU92ZXJsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAoZWwgJiYgZWwgIT0gZWxlbSAmJiBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImJvZHlcIiAmJiBwYXIgJiYgIXBhci5nZXRTbWlsKCkuaWQpIHtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiTU8gQ0xJQ0tFRCBCTEFOSyBCT0RZXCIpO1xuICAgICAgICAgICAgICBtZWRpYU92ZXJsYXlQbGF5ZXIudG91Y2hJbml0KCk7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZWRpYU92ZXJsYXlQbGF5ZXIucGxheVVzZXJQYXIocGFyKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVhZGFsb3VkID0gJChlbGVtKS5hdHRyKFwiaWJvb2tzOnJlYWRhbG91ZFwiKTtcbiAgICAgICAgICAgIGlmICghcmVhZGFsb3VkKSB7XG4gICAgICAgICAgICAgIHJlYWRhbG91ZCA9ICQoZWxlbSkuYXR0cihcImVwdWI6cmVhZGFsb3VkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlYWRhbG91ZCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiTU8gcmVhZGFsb3VkIGF0dHI6IFwiICsgcmVhZGFsb3VkKTtcblxuICAgICAgICAgICAgICB2YXIgaXNQbGF5aW5nID0gbWVkaWFPdmVybGF5UGxheWVyLmlzUGxheWluZygpO1xuICAgICAgICAgICAgICBpZiAocmVhZGFsb3VkID09PSBcInN0YXJ0XCIgJiYgIWlzUGxheWluZyB8fFxuICAgICAgICAgICAgICAgIHJlYWRhbG91ZCA9PT0gXCJzdG9wXCIgJiYgaXNQbGF5aW5nIHx8XG4gICAgICAgICAgICAgICAgcmVhZGFsb3VkID09PSBcInN0YXJ0c3RvcFwiKSB7XG4gICAgICAgICAgICAgICAgbWVkaWFPdmVybGF5UGxheWVyLnRvZ2dsZU1lZGlhT3ZlcmxheSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVkaWFPdmVybGF5UGxheWVyLnRvdWNoSW5pdCgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc21pbCA9IG1lZGlhT3ZlcmxheS5nZXRTbWlsQnlTcGluZUl0ZW0oc3BpbmVJdGVtKTtcbiAgICBpZiAoIXNtaWwpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJOTyBTTUlMPz8gXCIgKyBzcGluZUl0ZW0uaWRyZWYgKyBcIiAvLy8gXCIgKyBzcGluZUl0ZW0ubWVkaWFfb3ZlcmxheV9pZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRyYXZlcnNlU21pbFNlcXMgPSBmdW5jdGlvbihyb290KSB7XG4gICAgICBpZiAoIXJvb3QpIHJldHVybjtcblxuICAgICAgaWYgKHJvb3Qubm9kZVR5cGUgJiYgcm9vdC5ub2RlVHlwZSA9PT0gXCJzZXFcIikge1xuICAgICAgICAvLyBpZiAocm9vdC5lbGVtZW50KVxuICAgICAgICAvLyB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmVycm9yKFwiV0FSTjogc2VxLmVsZW1lbnQgYWxyZWFkeSBzZXQ6IFwiICsgcm9vdC50ZXh0cmVmKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIGlmIChyb290LnRleHRyZWYpIHtcbiAgICAgICAgICB2YXIgcGFydHMgPSByb290LnRleHRyZWYuc3BsaXQoJyMnKTtcbiAgICAgICAgICB2YXIgZmlsZSA9IHBhcnRzWzBdO1xuICAgICAgICAgIHZhciBmcmFnbWVudElkID0gKHBhcnRzLmxlbmd0aCA9PT0gMikgPyBwYXJ0c1sxXSA6IFwiXCI7XG4gICAgICAgICAgLy8gXG4gICAgICAgICAgLy8gY29uc29sZS5kZWJ1Zyhyb290LnRleHRyZWYpO1xuICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoZnJhZ21lbnRJZCk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCItLS0tIFNIT1VMRCBCRSBFUVVBTDpcIik7XG4gICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyhmaWxlKTtcbiAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKHBhci50ZXh0LnNyY0ZpbGUpO1xuICAgICAgICAgIC8vIFxuICAgICAgICAgIC8vIGlmIChmaWxlICE9PSBwYXIudGV4dC5zcmNGaWxlKVxuICAgICAgICAgIC8vIHtcbiAgICAgICAgICAvLyAgICAgY29uc29sZS5lcnJvcihcImFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5IHRleHRyZWYuZmlsZSAhPT0gcGFyLnRleHQuc3JjRmlsZSA/Pz9cIik7XG4gICAgICAgICAgLy8gICAgIHJldHVybiBwYXI7XG4gICAgICAgICAgLy8gfVxuICAgICAgICAgIC8vIFxuICAgICAgICAgIC8vIGlmICghZnJhZ21lbnRJZClcbiAgICAgICAgICAvLyB7XG4gICAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoXCJhZGp1c3RQYXJUb1NlcVN5bmNHcmFudWxhcml0eSAhZnJhZ21lbnRJZCA/Pz9cIik7XG4gICAgICAgICAgLy8gICAgIHJldHVybiBwYXI7XG4gICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgaWYgKGZpbGUgJiYgZnJhZ21lbnRJZCkge1xuICAgICAgICAgICAgdmFyIHRleHRSZWxhdGl2ZVJlZiA9IFJlc29sdmVDb250ZW50UmVmKGZpbGUsIHNtaWwuaHJlZik7XG4gICAgICAgICAgICB2YXIgc2FtZSA9IHRleHRSZWxhdGl2ZVJlZiA9PT0gc3BpbmVJdGVtLmhyZWY7XG4gICAgICAgICAgICBpZiAoc2FtZSkge1xuICAgICAgICAgICAgICByb290LmVsZW1lbnQgPSAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudC5nZXRFbGVtZW50QnlJZChmcmFnbWVudElkKTtcblxuICAgICAgICAgICAgICBpZiAoIXJvb3QuZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJzZXEudGV4dHJlZiAhZWxlbWVudD8gXCIgKyByb290LnRleHRyZWYpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gdmFyIHNlbGVjdG9yID0gXCIjXCIgKyBSZWFkaXVtU0RLLkhlbHBlcnMuZXNjYXBlSlF1ZXJ5U2VsZWN0b3IoZnJhZ21lbnRJZCk7XG4gICAgICAgICAgICAgIC8vIHZhciAkZWxlbWVudCA9ICQoc2VsZWN0b3IsIGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgICAgICAgICAvLyBpZiAoJGVsZW1lbnQpXG4gICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgLy8gICAgIHNlcS5lbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHJvb3QuY2hpbGRyZW4gJiYgcm9vdC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb290LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGNoaWxkID0gcm9vdC5jaGlsZHJlbltpXTtcbiAgICAgICAgICB0cmF2ZXJzZVNtaWxTZXFzKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdHJhdmVyc2VTbWlsU2VxcyhzbWlsKTtcblxuICAgIC8vY29uc29sZS5kZWJ1ZyhcIltbTU8gQVRUQUNIXV0gXCIgKyBzcGluZUl0ZW0uaWRyZWYgKyBcIiAvLy8gXCIgKyBzcGluZUl0ZW0ubWVkaWFfb3ZlcmxheV9pZCArIFwiID09PSBcIiArIHNtaWwuaWQpO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgU21pbEl0ZXJhdG9yKHNtaWwpO1xuXG4gICAgdmFyIGZha2VPcGZSb290ID0gXCIvOTkhXCI7XG4gICAgdmFyIGVwdWJDZmlQcmVmaXggPSBcImVwdWJjZmlcIjtcblxuICAgIHdoaWxlIChpdGVyLmN1cnJlbnRQYXIpIHtcbiAgICAgIGl0ZXIuY3VycmVudFBhci5lbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgaXRlci5jdXJyZW50UGFyLmNmaSA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHRydWUpIHsgLy9pdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkIChpbmNsdWRlcyBlbXB0eSBmcmFnIElEKVxuXG4gICAgICAgIHZhciB0ZXh0UmVsYXRpdmVSZWYgPSBSZXNvbHZlQ29udGVudFJlZihpdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGaWxlLCBpdGVyLnNtaWwuaHJlZik7XG5cbiAgICAgICAgdmFyIHNhbWUgPSB0ZXh0UmVsYXRpdmVSZWYgPT09IHNwaW5lSXRlbS5ocmVmO1xuICAgICAgICBpZiAoc2FtZSkge1xuICAgICAgICAgIHZhciBzZWxlY3RCb2R5ID0gIWl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQgfHwgaXRlci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZC5sZW5ndGggPT0gMDtcbiAgICAgICAgICB2YXIgc2VsZWN0SWQgPSBpdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkLmluZGV4T2YoZXB1YkNmaVByZWZpeCkgPT0gMCA/IHVuZGVmaW5lZCA6IGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQ7XG5cbiAgICAgICAgICB2YXIgJGVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdmFyIGlzQ2ZpVGV4dFJhbmdlID0gZmFsc2U7XG4gICAgICAgICAgaWYgKCFzZWxlY3RCb2R5ICYmICFzZWxlY3RJZCkge1xuICAgICAgICAgICAgaWYgKGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQuaW5kZXhPZihlcHViQ2ZpUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICB2YXIgcGFydGlhbCA9IGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQuc3Vic3RyKGVwdWJDZmlQcmVmaXgubGVuZ3RoICsgMSwgaXRlci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZC5sZW5ndGggLSBlcHViQ2ZpUHJlZml4Lmxlbmd0aCAtIDIpO1xuXG4gICAgICAgICAgICAgIGlmIChwYXJ0aWFsLmluZGV4T2YoZmFrZU9wZlJvb3QpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbCA9IHBhcnRpYWwuc3Vic3RyKGZha2VPcGZSb290Lmxlbmd0aCwgcGFydGlhbC5sZW5ndGggLSBmYWtlT3BmUm9vdC5sZW5ndGgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocGFydGlhbCk7XG4gICAgICAgICAgICAgIHZhciBwYXJ0cyA9IHBhcnRpYWwuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICBpZiAocGFydHMgJiYgcGFydHMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsU3RhcnRDZmkgPSBwYXJ0c1swXSArIHBhcnRzWzFdO1xuICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q0ZJID0gXCJlcHViY2ZpKFwiICsgcGFydGlhbFN0YXJ0Q2ZpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICB2YXIgaW5mb1N0YXJ0ID0gRVBVQmNmaS5nZXRUZXh0VGVybWludXNJbmZvV2l0aFBhcnRpYWxDRkkoc3RhcnRDRkksICRpZnJhbWVbMF0uY29udGVudERvY3VtZW50LCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXSk7XG4gICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGluZm9TdGFydCk7XG5cbiAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsRW5kQ2ZpID0gcGFydHNbMF0gKyBwYXJ0c1syXTtcbiAgICAgICAgICAgICAgICAgIHZhciBlbmRDRkkgPSBcImVwdWJjZmkoXCIgKyBwYXJ0aWFsRW5kQ2ZpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICB2YXIgaW5mb0VuZCA9IEVQVUJjZmkuZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJKGVuZENGSSwgJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdKTtcbiAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coaW5mb0VuZCk7XG5cbiAgICAgICAgICAgICAgICAgIHZhciBjZmlUZXh0UGFyZW50ID0gaW5mb1N0YXJ0LnRleHROb2RlWzBdLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgICAgICAgIGl0ZXIuY3VycmVudFBhci5jZmkgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNtaWxUZXh0U3JjQ2ZpOiBpdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsUmFuZ2VDZmk6IHBhcnRpYWwsXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpYWxTdGFydENmaTogcGFydGlhbFN0YXJ0Q2ZpLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsRW5kQ2ZpOiBwYXJ0aWFsRW5kQ2ZpLFxuXG4gICAgICAgICAgICAgICAgICAgIGNmaVRleHRQYXJlbnQ6IGNmaVRleHRQYXJlbnRcblxuICAgICAgICAgICAgICAgICAgICAvLyB0ZXh0Tm9kZSBiZWNvbWVzIGludmFsaWQgYWZ0ZXIgaGlnaGxpZ2h0aW5nISAoZHluYW1pYyBzcGFuIGluc2VydGlvbi9yZW1vdmFsIGNoYW5nZXMgRE9NKVxuICAgICAgICAgICAgICAgICAgICAvLyBjZmlSYW5nZVN0YXJ0OiBpbmZvU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIC8vIGNmaVJhbmdlRW5kOiBpbmZvRW5kXG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAvLyBUT0RPOiBub3QganVzdCBzdGFydCB0ZXh0Tm9kZSwgYnV0IGFsbCBvZiB0aGVtIGJldHdlZW4gc3RhcnQgYW5kIGVuZC4uLlxuICAgICAgICAgICAgICAgICAgLy8gLi4udGhhdCBiZWluZyBzYWlkLCBDRkkgdGV4dCByYW5nZXMgbGlrZWx5IHRvIGJlIHVzZWQgb25seSB3aXRoaW4gYSBzaW5nbGUgY29tbW9uIHBhcmVudCxcbiAgICAgICAgICAgICAgICAgIC8vIHNvIHRoaXMgaXMgYW4gYWNjZXB0YWJsZSBpbXBsZW1lbnRhdGlvbiBzaG9ydGN1dCBmb3IgdGhpcyBDRkkgZXhwZXJpbWVudGF0aW9uICh3b3JkLWxldmVsIHRleHQvYXVkaW8gc3luY2hyb25pc2F0aW9uKS5cbiAgICAgICAgICAgICAgICAgIGlzQ2ZpVGV4dFJhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICRlbGVtZW50ID0gJChjZmlUZXh0UGFyZW50KTtcbiAgICAgICAgICAgICAgICAgIHZhciBtb2RhdGEgPSAkZWxlbWVudC5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiKTtcbiAgICAgICAgICAgICAgICAgIGlmICghbW9kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICBwYXJzOiBbaXRlci5jdXJyZW50UGFyXVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5kYXRhKFwibWVkaWFPdmVybGF5RGF0YVwiLCBtb2RhdGEpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGF0YS5wYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dBUk5dIG5vbi1DRkkgTU8gREFUQSBhbHJlYWR5IGV4aXN0cyFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgbW9kYXRhLnBhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kYXRhLnBhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpUGFycyA9IDA7IGlQYXJzIDwgbW9kYXRhLnBhcnMubGVuZ3RoOyBpUGFycysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyID0gbW9kYXRhLnBhcnNbaVBhcnNdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyID09PSBpdGVyLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dBUk5dIG1lZGlhT3ZlcmxheURhdGEgQ0ZJIFBBUiBhbHJlYWR5IHJlZ2lzdGVyZWQhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBtb2RhdGEucGFycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgIG1vZGF0YS5wYXJzLnB1c2goaXRlci5jdXJyZW50UGFyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgdmFyIGNmaSA9IFwiZXB1YmNmaShcIiArIHBhcnRpYWwgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICRlbGVtZW50ID0gRVBVQmNmaS5nZXRUYXJnZXRFbGVtZW50V2l0aFBhcnRpYWxDRkkoY2ZpLCAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudCwgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl0pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJTTUlMIHRleHRAc3JjIENGSSBmcmFnbWVudCBpZGVudGlmaWVyIHNjaGVtZSBub3Qgc3VwcG9ydGVkOiBcIiArIGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0Qm9keSkge1xuICAgICAgICAgICAgICAkZWxlbWVudCA9ICRib2R5OyAvLyQoXCJib2R5XCIsIGNvbnRlbnREb2NFbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRlbGVtZW50ID0gJCgkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWxlY3RJZCkpO1xuICAgICAgICAgICAgICAvLyRlbGVtZW50ID0gJChcIiNcIiArIFJlYWRpdW1TREsuSGVscGVycy5lc2NhcGVKUXVlcnlTZWxlY3RvcihpdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkKSwgY29udGVudERvY0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgkZWxlbWVudCAmJiAkZWxlbWVudC5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgIGlmICghaXNDZmlUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgICAgaWYgKGl0ZXIuY3VycmVudFBhci5lbGVtZW50ICYmIGl0ZXIuY3VycmVudFBhci5lbGVtZW50ICE9PSAkZWxlbWVudFswXSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJESUZGRVJFTlQgRUxFTUVOVFM/PyEgXCIgKyBpdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkICsgXCIgLy8vIFwiICsgaXRlci5jdXJyZW50UGFyLmVsZW1lbnQuaWQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIG5hbWUgPSAkZWxlbWVudFswXS5ub2RlTmFtZSA/ICRlbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIGlmIChuYW1lID09PSBcImF1ZGlvXCIgfHwgbmFtZSA9PT0gXCJ2aWRlb1wiKSB7XG4gICAgICAgICAgICAgICAgJGVsZW1lbnQuYXR0cihcInByZWxvYWRcIiwgXCJhdXRvXCIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaXRlci5jdXJyZW50UGFyLmVsZW1lbnQgPSAkZWxlbWVudFswXTtcblxuICAgICAgICAgICAgICB2YXIgbW9kYXRhID0gJGVsZW1lbnQuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIik7XG4gICAgICAgICAgICAgIGlmIChtb2RhdGEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dBUk5dIE1PIERBVEEgYWxyZWFkeSBleGlzdHMuXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vZGF0YS5wYXIgJiYgbW9kYXRhLnBhciAhPT0gaXRlci5jdXJyZW50UGFyKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRElGRkVSRU5UIFBBUlM/PyFcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgJGVsZW1lbnQuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIiwge1xuICAgICAgICAgICAgICAgIHBhcjogaXRlci5jdXJyZW50UGFyXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAkZWxlbWVudC5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgIHZhciBlbGVtID0gJCh0aGlzKVswXTtcbiAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJNTyBDTElDSyAoRUxFTSk6IFwiICsgZWxlbS5pZCk7XG5cbiAgICAgICAgICAgICAgIHZhciBwYXIgPSAkKHRoaXMpLmRhdGEoXCJtZWRpYU92ZXJsYXlEYXRhXCIpLnBhcjtcbiAgICAgICAgICAgICAgIG1lZGlhT3ZlcmxheVBsYXllci5wbGF5VXNlclBhcihwYXIpO1xuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiISEgQ0FOTk9UIEZJTkQgRUxFTUVOVDogXCIgKyBpdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkICsgXCIgPT0gXCIgKyBpdGVyLmN1cnJlbnRQYXIudGV4dC5zcmNGaWxlICsgXCIgLy8vIFwiICsgc3BpbmVJdGVtLmhyZWYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJbSU5GT10gXCIgKyBzcGluZUl0ZW0uaHJlZiArIFwiICE9IFwiICsgdGV4dFJlbGF0aXZlUmVmICsgXCIgIyBcIiArIGl0ZXIuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGl0ZXIubmV4dCgpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZWRpYU92ZXJsYXlEYXRhSW5qZWN0b3JcbiIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vIE1vZGlmaWVkIGJ5IERhbmllbCBXZWNrXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciByYW5neSA9IHJlcXVpcmUoJ3Jhbmd5JylcblxuLyoqXG4gKlxuICogQHBhcmFtIHJlYWRlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1lZGlhT3ZlcmxheUVsZW1lbnRIaWdobGlnaHRlcihyZWFkZXIpIHtcblxuICB0aGlzLmluY2x1ZGVQYXJXaGVuQWRqdXN0aW5nVG9TZXFTeW5jR3JhbnVsYXJpdHkgPSB0cnVlO1xuXG4gIHZhciBERUZBVUxUX01PX0FDVElWRV9DTEFTUyA9IFwibW8tYWN0aXZlLWRlZmF1bHRcIjtcbiAgdmFyIERFRkFVTFRfTU9fU1VCX1NZTkNfQ0xBU1MgPSBcIm1vLXN1Yi1zeW5jXCI7XG5cbiAgLy92YXIgQkFDS19DT0xPUiA9IFwiIzk5Q0NDQ1wiO1xuXG4gIHZhciBfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzRWxlbWVudEhpZ2hsaWdodGVkID0gZnVuY3Rpb24ocGFyKSB7XG4gICAgcmV0dXJuIF9oaWdobGlnaHRlZEVsZW1lbnRQYXIgJiYgcGFyID09PSBfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyO1xuICB9O1xuXG4gIHZhciBfaGlnaGxpZ2h0ZWRDZmlQYXIgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNDZmlIaWdobGlnaHRlZCA9IGZ1bmN0aW9uKHBhcikge1xuICAgIHJldHVybiBfaGlnaGxpZ2h0ZWRDZmlQYXIgJiYgcGFyID09PSBfaGlnaGxpZ2h0ZWRDZmlQYXI7XG4gIH07XG5cbiAgdmFyIF9hY3RpdmVDbGFzcyA9IFwiXCI7XG4gIHZhciBfcGxheWJhY2tBY3RpdmVDbGFzcyA9IFwiXCI7XG5cbiAgdmFyIF9yZWFkZXIgPSByZWFkZXI7XG5cbiAgdmFyIFVTRV9SQU5HWSA9IHRydWUgJiYgKHR5cGVvZiByYW5neSAhPT0gXCJ1bmRlZmluZWRcIik7XG4gIHZhciBfcmFuZ3lDU1MgPSB1bmRlZmluZWQ7XG4gIHZhciBfcmFuZ3lSYW5nZSA9IHVuZGVmaW5lZDtcblxuICB2YXIgSElHSExJR0hUX0lEID0gXCJNT19TUEVBS1wiO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgJHVzZXJTdHlsZSA9IHVuZGVmaW5lZDtcblxuICB0aGlzLnJlRG8gPSBmdW5jdGlvbigpIHtcbiAgICAvL3RoaXMucmVzZXQoKTtcblxuICAgIGlmICgkdXNlclN0eWxlKSB7XG4gICAgICAkdXNlclN0eWxlLnJlbW92ZSgpO1xuICAgIH1cbiAgICAkdXNlclN0eWxlID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIGhlID0gX2hpZ2hsaWdodGVkRWxlbWVudFBhcjtcbiAgICB2YXIgaGMgPSBfaGlnaGxpZ2h0ZWRDZmlQYXI7XG4gICAgdmFyIGMxID0gX2FjdGl2ZUNsYXNzO1xuICAgIHZhciBjMiA9IF9wbGF5YmFja0FjdGl2ZUNsYXNzO1xuXG4gICAgaWYgKF9oaWdobGlnaHRlZEVsZW1lbnRQYXIpIHtcbiAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgdGhpcy5oaWdobGlnaHRFbGVtZW50KGhlLCBjMSwgYzIpO1xuICAgIH0gZWxzZSBpZiAoX2hpZ2hsaWdodGVkQ2ZpUGFyKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgIHRoaXMuaGlnaGxpZ2h0Q2ZpKGhjLCBjMSwgYzIpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBlbnN1cmVVc2VyU3R5bGUoJGVsZW1lbnQsIGhhc0F1dGhvclN0eWxlLCBvdmVycmlkZVdpdGhVc2VyU3R5bGUpIHtcbiAgICBpZiAoJHVzZXJTdHlsZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCR1c2VyU3R5bGVbMF0ub3duZXJEb2N1bWVudCA9PT0gJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAkaGVhZCA9ICQoXCJoZWFkXCIsICRlbGVtZW50WzBdLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcblxuICAgICR1c2VyU3R5bGUgPSAkKFwiPHN0eWxlIHR5cGU9J3RleHQvY3NzJz4gPC9zdHlsZT5cIik7XG5cbiAgICAkdXNlclN0eWxlLmFwcGVuZChcIi5cIiArIERFRkFVTFRfTU9fQUNUSVZFX0NMQVNTICsgXCIge1wiKTtcblxuICAgIHZhciBmYWxsYmFja1VzZXJTdHlsZSA9IFwiYmFja2dyb3VuZC1jb2xvcjogeWVsbG93ICFpbXBvcnRhbnQ7IGNvbG9yOiBibGFjayAhaW1wb3J0YW50OyBib3JkZXItcmFkaXVzOiAwLjRlbTtcIjtcblxuICAgIHZhciBzdHlsZSA9IG92ZXJyaWRlV2l0aFVzZXJTdHlsZTsgLy9fcmVhZGVyLnVzZXJTdHlsZXMoKS5maW5kU3R5bGUoXCIuXCIgKyBERUZBVUxUX01PX0FDVElWRV9DTEFTUyk7XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICB2YXIgYXRMZWFzdE9uZSA9IGZhbHNlO1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZS5kZWNsYXJhdGlvbnMpIHtcbiAgICAgICAgaWYgKCFzdHlsZS5kZWNsYXJhdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF0TGVhc3RPbmUgPSB0cnVlO1xuICAgICAgICAkdXNlclN0eWxlLmFwcGVuZChwcm9wICsgXCI6IFwiICsgc3R5bGUuZGVjbGFyYXRpb25zW3Byb3BdICsgXCI7IFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhdExlYXN0T25lICYmICFoYXNBdXRob3JTdHlsZSkge1xuICAgICAgICAkdXNlclN0eWxlLmFwcGVuZChmYWxsYmFja1VzZXJTdHlsZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaGFzQXV0aG9yU3R5bGUpIHtcbiAgICAgICR1c2VyU3R5bGUuYXBwZW5kKGZhbGxiYWNrVXNlclN0eWxlKTtcbiAgICB9XG5cbiAgICAkdXNlclN0eWxlLmFwcGVuZChcIn1cIik7XG5cblxuICAgIC8vIC0tLS0gQ0ZJXG4gICAgLy8kdXNlclN0eWxlLmFwcGVuZChcIiAuaGlnaGxpZ2h0IHtiYWNrZ3JvdW5kLWNvbG9yOiBibHVlOyBib3JkZXI6IDJ4IHNvbGlkIGdyZWVuO31cIik7IC8vLmhvdmVyLWhpZ2hsaWdodFxuXG5cbiAgICAkdXNlclN0eWxlLmFwcGVuZFRvKCRoZWFkKTtcblxuICAgIC8vY29uc29sZS5kZWJ1ZygkdXNlclN0eWxlWzBdLnRleHRDb250ZW50KTtcbiAgfTtcblxuICB0aGlzLmhpZ2hsaWdodEVsZW1lbnQgPSBmdW5jdGlvbihwYXIsIGFjdGl2ZUNsYXNzLCBwbGF5YmFja0FjdGl2ZUNsYXNzKSB7XG5cbiAgICBpZiAoIXBhciB8fCBwYXIgPT09IF9oaWdobGlnaHRlZEVsZW1lbnRQYXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICBfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyID0gcGFyO1xuICAgIF9oaWdobGlnaHRlZENmaVBhciA9IHVuZGVmaW5lZDtcblxuICAgIF9hY3RpdmVDbGFzcyA9IGFjdGl2ZUNsYXNzO1xuICAgIF9wbGF5YmFja0FjdGl2ZUNsYXNzID0gcGxheWJhY2tBY3RpdmVDbGFzcztcblxuICAgIHZhciBzZXEgPSB0aGlzLmFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5KF9oaWdobGlnaHRlZEVsZW1lbnRQYXIpO1xuICAgIHZhciBlbGVtZW50ID0gc2VxLmVsZW1lbnQ7XG5cbiAgICBpZiAoX3BsYXliYWNrQWN0aXZlQ2xhc3MgJiYgX3BsYXliYWNrQWN0aXZlQ2xhc3MgIT09IFwiXCIpIHtcbiAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIk1PIHBsYXliYWNrQWN0aXZlQ2xhc3M6IFwiICsgX3BsYXliYWNrQWN0aXZlQ2xhc3MpO1xuICAgICAgJChlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5hZGRDbGFzcyhfcGxheWJhY2tBY3RpdmVDbGFzcyk7XG4gICAgICAvL2NvbnNvbGUuZGVidWcoXCJNTyBwbGF5YmFja0FjdGl2ZUNsYXNzIDI6IFwiICsgZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QpO1xuICAgIH1cblxuICAgIHZhciAkaGVsID0gJChlbGVtZW50KTtcblxuICAgIHZhciBoYXNBdXRob3JTdHlsZSA9IF9hY3RpdmVDbGFzcyAmJiBfYWN0aXZlQ2xhc3MgIT09IFwiXCI7XG4gICAgdmFyIG92ZXJyaWRlV2l0aFVzZXJTdHlsZSA9IF9yZWFkZXIudXNlclN0eWxlcygpLmZpbmRTdHlsZShcIi5cIiArIERFRkFVTFRfTU9fQUNUSVZFX0NMQVNTKTtcblxuICAgIGVuc3VyZVVzZXJTdHlsZSgkaGVsLCBoYXNBdXRob3JTdHlsZSwgb3ZlcnJpZGVXaXRoVXNlclN0eWxlKTtcblxuICAgIGlmIChvdmVycmlkZVdpdGhVc2VyU3R5bGUgfHwgIWhhc0F1dGhvclN0eWxlKSB7XG4gICAgICAvL2NvbnNvbGUuZGVidWcoXCJNTyBhY3RpdmUgTk8gQ0xBU1M6IFwiICsgX2FjdGl2ZUNsYXNzKTtcblxuICAgICAgaWYgKGhhc0F1dGhvclN0eWxlKSB7XG4gICAgICAgICRoZWwuYWRkQ2xhc3MoX2FjdGl2ZUNsYXNzKTtcbiAgICAgIH1cblxuICAgICAgJGhlbC5hZGRDbGFzcyhERUZBVUxUX01PX0FDVElWRV9DTEFTUyk7XG5cbiAgICAgIC8vJChlbGVtZW50KS5jc3MoXCJiYWNrZ3JvdW5kXCIsIEJBQ0tfQ09MT1IpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL2NvbnNvbGUuZGVidWcoXCJNTyBhY3RpdmVDbGFzczogXCIgKyBfYWN0aXZlQ2xhc3MpO1xuICAgICAgJGhlbC5hZGRDbGFzcyhfYWN0aXZlQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmluY2x1ZGVQYXJXaGVuQWRqdXN0aW5nVG9TZXFTeW5jR3JhbnVsYXJpdHkgfHwgX2hpZ2hsaWdodGVkRWxlbWVudFBhciAhPT0gc2VxKSB7XG4gICAgICAkKF9oaWdobGlnaHRlZEVsZW1lbnRQYXIuZWxlbWVudCkuYWRkQ2xhc3MoREVGQVVMVF9NT19TVUJfU1lOQ19DTEFTUyk7XG4gICAgfVxuXG4gICAgLy8gLS0tLSBDRklcbiAgICAvLyAgICAgICAgIHRyeVxuICAgIC8vICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgIC8vIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgLy8gICAgICAgICAgICAgLy8gdmFyIGNmaSA9IEVQVUJjZmkuR2VuZXJhdG9yLmdlbmVyYXRlRWxlbWVudENGSUNvbXBvbmVudChlbGVtZW50KTsgLy8kaGVsWzBdXG4gICAgLy8gICAgICAgICAgICAgLy8gaWYoY2ZpWzBdID09IFwiIVwiKSB7XG4gICAgLy8gICAgICAgICAgICAgLy8gICAgIGNmaSA9IGNmaS5zdWJzdHJpbmcoMSk7XG4gICAgLy8gICAgICAgICAgICAgLy8gfVxuICAgIC8vIFxuICAgIC8vIC8vY29uc29sZS5sb2coZWxlbWVudCk7XG4gICAgLy8gICAgICAgICBcbiAgICAvLyAgICAgICAgICAgICB2YXIgZmlyc3RUZXh0Tm9kZSA9IGdldEZpcnN0VGV4dE5vZGUoZWxlbWVudCk7XG4gICAgLy8gICAgICAgICAgICAgdmFyIHR4dEZpcnN0ID0gZmlyc3RUZXh0Tm9kZS50ZXh0Q29udGVudDtcbiAgICAvLyAvL2NvbnNvbGUubG9nKHR4dEZpcnN0KTtcbiAgICAvLyBcbiAgICAvLyAgICAgICAgICAgICB2YXIgbGFzdFRleHROb2RlID0gZ2V0TGFzdFRleHROb2RlKGVsZW1lbnQpO1xuICAgIC8vICAgICAgICAgICAgIHZhciB0eHRMYXN0ID0gbGFzdFRleHROb2RlLnRleHRDb250ZW50O1xuICAgIC8vIC8vY29uc29sZS5sb2codHh0TGFzdCk7XG4gICAgLy8gICAgICAgICBcbiAgICAvLyAgICAgICAgICAgICB2YXIgY2ZpID0gRVBVQmNmaS5HZW5lcmF0b3IuZ2VuZXJhdGVDaGFyT2Zmc2V0UmFuZ2VDb21wb25lbnQoXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBmaXJzdFRleHROb2RlLCBcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIDAsIFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGFzdFRleHROb2RlLCBcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHR4dExhc3QubGVuZ3RoLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgW1wiY2ZpLW1hcmtlclwiXSxcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFtdLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgW1wiTWF0aEpheF9NZXNzYWdlXCJdXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICApO1xuICAgIC8vICAgICAgICAgICAgIFxuICAgIC8vICAgICAgICAgICAgIHZhciBpZCA9ICRoZWwuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIikucGFyLmdldFNtaWwoKS5zcGluZUl0ZW1JZDtcbiAgICAvLyAgICAgICAgICAgICBfcmVhZGVyLmFkZEhpZ2hsaWdodChpZCwgY2ZpLCBISUdITElHSFRfSUQsXG4gICAgLy8gICAgICAgICAgICAgXCJoaWdobGlnaHRcIiwgLy9cInVuZGVybGluZVwiXG4gICAgLy8gICAgICAgICAgICAgdW5kZWZpbmVkIC8vIHN0eWxlc1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgICAgICBjYXRjaChlcnJvcilcbiAgICAvLyAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAvLyAgICAgICAgIFxuICAgIC8vICAgICAgICAgICAgIHJlbW92ZUhpZ2hsaWdodCgpO1xuICAgIC8vICAgICAgICAgfVxuICB9O1xuXG4gIHRoaXMuaGlnaGxpZ2h0Q2ZpID0gZnVuY3Rpb24ocGFyLCBhY3RpdmVDbGFzcywgcGxheWJhY2tBY3RpdmVDbGFzcykge1xuXG4gICAgaWYgKCFwYXIgfHwgcGFyID09PSBfaGlnaGxpZ2h0ZWRDZmlQYXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICBfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyID0gdW5kZWZpbmVkO1xuICAgIF9oaWdobGlnaHRlZENmaVBhciA9IHBhcjtcblxuICAgIF9hY3RpdmVDbGFzcyA9IGFjdGl2ZUNsYXNzO1xuICAgIF9wbGF5YmFja0FjdGl2ZUNsYXNzID0gcGxheWJhY2tBY3RpdmVDbGFzcztcblxuICAgIHZhciAkaGVsID0gJChfaGlnaGxpZ2h0ZWRDZmlQYXIuY2ZpLmNmaVRleHRQYXJlbnQpO1xuXG4gICAgdmFyIGhhc0F1dGhvclN0eWxlID0gX2FjdGl2ZUNsYXNzICYmIF9hY3RpdmVDbGFzcyAhPT0gXCJcIjtcbiAgICB2YXIgb3ZlcnJpZGVXaXRoVXNlclN0eWxlID0gX3JlYWRlci51c2VyU3R5bGVzKCkuZmluZFN0eWxlKFwiLlwiICsgREVGQVVMVF9NT19BQ1RJVkVfQ0xBU1MpOyAvLyBUT0RPOiBwZXJmb3JtYW5jZSBpc3N1ZT9cblxuICAgIGVuc3VyZVVzZXJTdHlsZSgkaGVsLCBoYXNBdXRob3JTdHlsZSwgb3ZlcnJpZGVXaXRoVXNlclN0eWxlKTtcblxuICAgIHZhciBjbGF6eiA9IChvdmVycmlkZVdpdGhVc2VyU3R5bGUgfHwgIWhhc0F1dGhvclN0eWxlKSA/ICgoaGFzQXV0aG9yU3R5bGUgPyAoX2FjdGl2ZUNsYXNzICsgXCIgXCIpIDogXCJcIikgKyBERUZBVUxUX01PX0FDVElWRV9DTEFTUykgOiBfYWN0aXZlQ2xhc3M7XG5cbiAgICBpZiAoVVNFX1JBTkdZKSB7XG4gICAgICB2YXIgZG9jID0gX2hpZ2hsaWdodGVkQ2ZpUGFyLmNmaS5jZmlUZXh0UGFyZW50Lm93bmVyRG9jdW1lbnQ7XG5cbiAgICAgIF9yYW5neVJhbmdlID0gcmFuZ3kuY3JlYXRlUmFuZ2UoZG9jKTsgLy9jcmVhdGVOYXRpdmVSYW5nZVxuXG4gICAgICB2YXIgc3RhcnRDRkkgPSBcImVwdWJjZmkoXCIgKyBfaGlnaGxpZ2h0ZWRDZmlQYXIuY2ZpLnBhcnRpYWxTdGFydENmaSArIFwiKVwiO1xuICAgICAgdmFyIGluZm9TdGFydCA9IEVQVUJjZmkuZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJKHN0YXJ0Q0ZJLCBkb2MsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdKTtcbiAgICAgIC8vY29uc29sZS5sb2coaW5mb1N0YXJ0KTtcblxuICAgICAgdmFyIGVuZENGSSA9IFwiZXB1YmNmaShcIiArIF9oaWdobGlnaHRlZENmaVBhci5jZmkucGFydGlhbEVuZENmaSArIFwiKVwiO1xuICAgICAgdmFyIGluZm9FbmQgPSBFUFVCY2ZpLmdldFRleHRUZXJtaW51c0luZm9XaXRoUGFydGlhbENGSShlbmRDRkksIGRvYywgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl0pO1xuICAgICAgLy9jb25zb2xlLmxvZyhpbmZvRW5kKTtcblxuICAgICAgX3Jhbmd5UmFuZ2Uuc2V0U3RhcnRBbmRFbmQoXG4gICAgICAgIGluZm9TdGFydC50ZXh0Tm9kZVswXSwgaW5mb1N0YXJ0LnRleHRPZmZzZXQsXG4gICAgICAgIGluZm9FbmQudGV4dE5vZGVbMF0sIGluZm9FbmQudGV4dE9mZnNldFxuICAgICAgKTtcblxuICAgICAgaWYgKGZhbHNlICYmIC8vIHdlIHVzZSBDc3NDbGFzc0FwcGxpZXIgaW5zdGVhZCwgYmVjYXVzZSBzdXJyb3VuZENvbnRlbnRzKCkgaGFzIG5vIHRyaXZpYWwgdW5kb1N1cnJvdW5kQ29udGVudHMoKSBmdW5jdGlvbiAoaW5jLiB0ZXh0IG5vZGVzIG5vcm1hbGlzYXRpb24sIGV0Yy4pXG4gICAgICAgIF9yYW5neVJhbmdlLmNhblN1cnJvdW5kQ29udGVudHMoKSkge1xuICAgICAgICBfcmFuZ3lSYW5nZS5NT19jcmVhdGVDc3NDbGFzc0FwcGxpZXIgPSBmYWxzZTtcblxuICAgICAgICB2YXIgc3BhbiA9IGRvYy5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsICdzcGFuJyk7XG4gICAgICAgIHNwYW4uaWQgPSBISUdITElHSFRfSUQ7XG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKFwiaWRcIiwgc3Bhbi5pZCk7XG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgY2xhenogKyBcIiBtby1jZmktaGlnaGxpZ2h0XCIpO1xuXG4gICAgICAgIF9yYW5neVJhbmdlLnN1cnJvdW5kQ29udGVudHMoc3Bhbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcmFuZ3lSYW5nZS5NT19jcmVhdGVDc3NDbGFzc0FwcGxpZXIgPSB0cnVlO1xuXG4gICAgICAgIGlmICghX3Jhbmd5Q1NTIHx8IF9yYW5neUNTUy5jc3NDbGFzcyAhPT0gY2xhenopIHtcbiAgICAgICAgICBfcmFuZ3lDU1MgPSByYW5neS5jcmVhdGVDc3NDbGFzc0FwcGxpZXIoY2xhenosIHtcbiAgICAgICAgICAgIGVsZW1lbnRUYWdOYW1lOiBcInNwYW5cIixcbiAgICAgICAgICAgIGVsZW1lbnRQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJtby1jZmktaGlnaGxpZ2h0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpZ25vcmVXaGl0ZVNwYWNlOiB0cnVlLFxuICAgICAgICAgICAgYXBwbHlUb0VkaXRhYmxlT25seTogZmFsc2UsXG4gICAgICAgICAgICBub3JtYWxpemU6IHRydWVcbiAgICAgICAgICB9LCBbXCJzcGFuXCJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yYW5neUNTUy5hcHBseVRvUmFuZ2UoX3Jhbmd5UmFuZ2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICAvL3ZhciBpZCA9ICRoZWwuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIikucGFyLmdldFNtaWwoKS5zcGluZUl0ZW1JZDtcbiAgICAgICAgdmFyIGlkID0gcGFyLmdldFNtaWwoKS5zcGluZUl0ZW1JZDtcbiAgICAgICAgX3JlYWRlci5hZGRIaWdobGlnaHQoaWQsIHBhci5jZmkucGFydGlhbFJhbmdlQ2ZpLCBISUdITElHSFRfSUQsXG4gICAgICAgICAgXCJoaWdobGlnaHRcIiwgLy9cInVuZGVybGluZVwiXG4gICAgICAgICAgdW5kZWZpbmVkIC8vIHN0eWxlc1xuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIC0tLS0gQ0ZJXG4gIC8vICAgICBcbiAgLy8gICAgIGZ1bmN0aW9uIGdldEZpcnN0VGV4dE5vZGUobm9kZSlcbiAgLy8gICAgIHtcbiAgLy8gICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpXG4gIC8vICAgICAgICAge1xuICAvLyAgICAgICAgICAgICBpZiAobm9kZS50ZXh0Q29udGVudC50cmltKCkubGVuZ3RoID4gMClcbiAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgICBcbiAgLy8gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKylcbiAgLy8gICAgICAgICB7XG4gIC8vICAgICAgICAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGROb2Rlc1tpXTtcbiAgLy8gICAgICAgICAgICAgdmFyIGZpcnN0ID0gZ2V0Rmlyc3RUZXh0Tm9kZShjaGlsZCk7XG4gIC8vICAgICAgICAgICAgIGlmIChmaXJzdClcbiAgLy8gICAgICAgICAgICAge1xuICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0O1xuICAvLyAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICAgIFxuICAvLyAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIC8vICAgICB9XG4gIC8vICAgICBcbiAgLy8gICAgIGZ1bmN0aW9uIGdldExhc3RUZXh0Tm9kZShub2RlKVxuICAvLyAgICAge1xuICAvLyAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSlcbiAgLy8gICAgICAgICB7XG4gIC8vICAgICAgICAgICAgIGlmIChub2RlLnRleHRDb250ZW50LnRyaW0oKS5sZW5ndGggPiAwKVxuICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICAgIFxuICAvLyAgICAgICAgIGZvciAodmFyIGkgPSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKVxuICAvLyAgICAgICAgIHtcbiAgLy8gICAgICAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZE5vZGVzW2ldO1xuICAvLyAgICAgICAgICAgICB2YXIgbGFzdCA9IGdldExhc3RUZXh0Tm9kZShjaGlsZCk7XG4gIC8vICAgICAgICAgICAgIGlmIChsYXN0KVxuICAvLyAgICAgICAgICAgICB7XG4gIC8vICAgICAgICAgICAgICAgICByZXR1cm4gbGFzdDtcbiAgLy8gICAgICAgICAgICAgfVxuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgICBcbiAgLy8gICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAvLyAgICAgfVxuICAvLyAgICAgXG5cbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKF9oaWdobGlnaHRlZENmaVBhcikge1xuICAgICAgdmFyIGRvYyA9IF9oaWdobGlnaHRlZENmaVBhci5jZmkuY2ZpVGV4dFBhcmVudC5vd25lckRvY3VtZW50O1xuICAgICAgaWYgKFVTRV9SQU5HWSkge1xuICAgICAgICBpZiAoX3Jhbmd5Q1NTICYmIF9yYW5neVJhbmdlLk1PX2NyZWF0ZUNzc0NsYXNzQXBwbGllcikge1xuICAgICAgICAgIF9yYW5neUNTUy51bmRvVG9SYW5nZShfcmFuZ3lSYW5nZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHRvUmVtb3ZlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHdoaWxlICgodG9SZW1vdmUgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoSElHSExJR0hUX0lEKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB0eHQgPSB0b1JlbW92ZS50ZXh0Q29udGVudDsgLy8gVE9ETzogaW5uZXJIVE1MPyBvciBiZXR0ZXI6IGhhc0NoaWxkTm9kZXMgbG9vcCArIGRldGFjaCBhbmQgcmUtYXR0YWNoXG4gICAgICAgICAgICB2YXIgdHh0Tm9kZSA9IGRvYy5jcmVhdGVUZXh0Tm9kZSh0eHQpO1xuXG4gICAgICAgICAgICB0b1JlbW92ZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0eHROb2RlLCB0b1JlbW92ZSk7XG4gICAgICAgICAgICB0eHROb2RlLnBhcmVudE5vZGUubm9ybWFsaXplKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9fcmFuZ3lDU1MgPSB1bmRlZmluZWQ7XG4gICAgICAgIF9yYW5neVJhbmdlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBfcmVhZGVyLnJlbW92ZUhpZ2hsaWdodChISUdITElHSFRfSUQpO1xuXG4gICAgICAgICAgdmFyIHRvUmVtb3ZlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHdoaWxlICgodG9SZW1vdmUgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoXCJzdGFydC1cIiArIEhJR0hMSUdIVF9JRCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRvUmVtb3ZlIFNUQVJUXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codG9SZW1vdmUpO1xuICAgICAgICAgICAgdG9SZW1vdmUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0b1JlbW92ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlICgodG9SZW1vdmUgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoXCJlbmQtXCIgKyBISUdITElHSFRfSUQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0b1JlbW92ZSBFTkRcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0b1JlbW92ZSk7XG4gICAgICAgICAgICB0b1JlbW92ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvUmVtb3ZlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX2hpZ2hsaWdodGVkQ2ZpUGFyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuXG5cblxuICAgIGlmIChfaGlnaGxpZ2h0ZWRFbGVtZW50UGFyKSB7XG5cbiAgICAgIHZhciBzZXEgPSB0aGlzLmFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5KF9oaWdobGlnaHRlZEVsZW1lbnRQYXIpO1xuICAgICAgdmFyIGVsZW1lbnQgPSBzZXEuZWxlbWVudDtcbiAgICAgIGlmICh0aGlzLmluY2x1ZGVQYXJXaGVuQWRqdXN0aW5nVG9TZXFTeW5jR3JhbnVsYXJpdHkgfHwgX2hpZ2hsaWdodGVkRWxlbWVudFBhciAhPT0gc2VxKSB7XG4gICAgICAgICQoX2hpZ2hsaWdodGVkRWxlbWVudFBhci5lbGVtZW50KS5yZW1vdmVDbGFzcyhERUZBVUxUX01PX1NVQl9TWU5DX0NMQVNTKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9wbGF5YmFja0FjdGl2ZUNsYXNzICYmIF9wbGF5YmFja0FjdGl2ZUNsYXNzICE9PSBcIlwiKSB7XG4gICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIk1PIFJFU0VUIHBsYXliYWNrQWN0aXZlQ2xhc3M6IFwiICsgX3BsYXliYWNrQWN0aXZlQ2xhc3MpO1xuICAgICAgICAkKGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLnJlbW92ZUNsYXNzKF9wbGF5YmFja0FjdGl2ZUNsYXNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9hY3RpdmVDbGFzcyAmJiBfYWN0aXZlQ2xhc3MgIT09IFwiXCIpIHtcbiAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiTU8gUkVTRVQgYWN0aXZlQ2xhc3M6IFwiICsgX2FjdGl2ZUNsYXNzKTtcbiAgICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhfYWN0aXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgLy9lbHNlXG4gICAgICAvL3tcbiAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIk1PIFJFU0VUIGFjdGl2ZSBOTyBDTEFTUzogXCIgKyBfYWN0aXZlQ2xhc3MpO1xuICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhERUZBVUxUX01PX0FDVElWRV9DTEFTUyk7XG4gICAgICAvLyQoZWxlbWVudCkuY3NzKFwiYmFja2dyb3VuZFwiLCAnJyk7XG4gICAgICAvL31cblxuICAgICAgX2hpZ2hsaWdodGVkRWxlbWVudFBhciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBfYWN0aXZlQ2xhc3MgPSBcIlwiO1xuICAgIF9wbGF5YmFja0FjdGl2ZUNsYXNzID0gXCJcIjtcbiAgfTtcblxuICB0aGlzLmFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5ID0gZnVuY3Rpb24ocGFyKSB7XG4gICAgaWYgKCFwYXIpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgc3luYyA9IF9yZWFkZXIudmlld2VyU2V0dGluZ3MoKS5tZWRpYU92ZXJsYXlzU3luY2hyb25pemF0aW9uR3JhbnVsYXJpdHk7XG4gICAgaWYgKHN5bmMgJiYgc3luYy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHBhci5lbGVtZW50IHx8IChwYXIuY2ZpID8gcGFyLmNmaS5jZmlUZXh0UGFyZW50IDogdW5kZWZpbmVkKTtcbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkgIWVsZW1lbnQgPz8/XCIpO1xuICAgICAgICByZXR1cm4gcGFyOyAvLyBzaG91bGQgbmV2ZXIgaGFwcGVuIVxuICAgICAgfVxuXG4gICAgICB2YXIgc2VxID0gcGFyLmdldEZpcnN0U2VxQW5jZXN0b3JXaXRoRXB1YlR5cGUoc3luYywgdGhpcy5pbmNsdWRlUGFyV2hlbkFkanVzdGluZ1RvU2VxU3luY0dyYW51bGFyaXR5KTtcbiAgICAgIGlmIChzZXEgJiYgc2VxLmVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHNlcTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFyO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZWRpYU92ZXJsYXlFbGVtZW50SGlnaGxpZ2h0ZXIiLCIvLyAgTGF1bmNoZXJPU1hcbi8vXG4vLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyBNb2RpZmllZCBieSBEYW5pZWwgV2Vja1xuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG52YXIgQXVkaW9QbGF5ZXIgPSByZXF1aXJlKCcuL2F1ZGlvLXBsYXllcicpXG52YXIgRXZlbnRzID0gcmVxdWlyZSgnLi4vZXZlbnRzJylcbnZhciBNZWRpYU92ZXJsYXlFbGVtZW50SGlnaGxpZ2h0ZXIgPSByZXF1aXJlKCcuL21lZGlhLW92ZXJsYXktZWxlbWVudC1oaWdobGlnaHRlcicpXG52YXIgUmVzb2x2ZUNvbnRlbnRSZWYgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3Jlc29sdmUtY29udGVudC1yZWYnKVxudmFyIFNjcm9sbFZpZXcgPSByZXF1aXJlKCcuL3Njcm9sbC12aWV3JylcbnZhciBTbWlsSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9tb2RlbHMvc21pbC1pdGVyYXRvcicpXG5cbi8qKlxuICpcbiAqIEBwYXJhbSByZWFkZXJcbiAqIEBwYXJhbSBvblN0YXR1c0NoYW5nZWRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNZWRpYU92ZXJsYXlQbGF5ZXIocmVhZGVyLCBvblN0YXR1c0NoYW5nZWQpIHtcblxuXG4gIHZhciBfc21pbEl0ZXJhdG9yID0gdW5kZWZpbmVkO1xuXG4gIHZhciBfYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIob25TdGF0dXNDaGFuZ2VkLCBvbkF1ZGlvUG9zaXRpb25DaGFuZ2VkLCBvbkF1ZGlvRW5kZWQsIG9uUGxheSwgb25QYXVzZSk7XG5cbiAgdmFyIF90dHNJc1BsYXlpbmcgPSBmYWxzZTtcbiAgdmFyIF9jdXJyZW50VFRTID0gdW5kZWZpbmVkO1xuICB2YXIgX2VuYWJsZUhUTUxTcGVlY2ggPSB0cnVlICYmIHR5cGVvZiB3aW5kb3cuc3BlZWNoU3ludGhlc2lzICE9PSBcInVuZGVmaW5lZFwiICYmIHNwZWVjaFN5bnRoZXNpcyAhPSBudWxsOyAvLyBzZXQgdG8gZmFsc2UgdG8gZm9yY2UgXCJuYXRpdmVcIiBwbGF0Zm9ybSBUVFMgZW5naW5lLCByYXRoZXIgdGhhbiBIVE1MIFNwZWVjaCBBUElcblxuICB2YXIgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSA9IHVuZGVmaW5lZDtcbiAgLy92YXIgX3NraXBUVFNFbmRFdmVudCA9IGZhbHNlO1xuICB2YXIgVE9LRU5JWkVfVFRTID0gZmFsc2U7XG5cbiAgdmFyIF9lbWJlZGRlZElzUGxheWluZyA9IGZhbHNlO1xuICB2YXIgX2N1cnJlbnRFbWJlZGRlZCA9IHVuZGVmaW5lZDtcblxuXG4gIHRoaXMuaXNQbGF5aW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9hdWRpb1BsYXllci5pc1BsYXlpbmcoKSB8fCBfdHRzSXNQbGF5aW5nIHx8IF9lbWJlZGRlZElzUGxheWluZyB8fCBfYmxhbmtQYWdlUGxheWVyO1xuICB9XG5cbiAgLy92YXIgX2N1cnJlbnRQYWdpbmF0aW9uID0gdW5kZWZpbmVkO1xuICB2YXIgX3BhY2thZ2UgPSByZWFkZXIucGFja2FnZSgpO1xuICB2YXIgX3NldHRpbmdzID0gcmVhZGVyLnZpZXdlclNldHRpbmdzKCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIF9lbGVtZW50SGlnaGxpZ2h0ZXIgPSBuZXcgTWVkaWFPdmVybGF5RWxlbWVudEhpZ2hsaWdodGVyKHJlYWRlcik7XG5cbiAgcmVhZGVyLm9uKEV2ZW50cy5SRUFERVJfVklFV19ERVNUUk9ZRUQsIGZ1bmN0aW9uKCkge1xuXG4gICAgc2VsZi5yZXNldCgpO1xuXG4gIH0pO1xuXG5cbiAgdGhpcy5hcHBseVN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIF9lbGVtZW50SGlnaGxpZ2h0ZXIucmVEbygpO1xuICB9O1xuXG4gIC8vXG4gIC8vIHNob3VsZCB1c2UgdGhpcy5vblNldHRpbmdzQXBwbGllZCgpIGluc3RlYWQhXG4gIC8vICAgIHRoaXMuc2V0UmF0ZSA9IGZ1bmN0aW9uKHJhdGUpIHtcbiAgLy8gICAgICAgIF9hdWRpb1BsYXllci5zZXRSYXRlKHJhdGUpO1xuICAvLyAgICB9O1xuICAvLyAgICB0aGlzLnNldFZvbHVtZSA9IGZ1bmN0aW9uKHZvbHVtZSkge1xuICAvLyAgICAgICAgX2F1ZGlvUGxheWVyLnNldFZvbHVtZSh2b2x1bWUpO1xuICAvLyAgICB9O1xuXG5cbiAgdGhpcy5vblNldHRpbmdzQXBwbGllZCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vY29uc29sZS5kZWJ1Zyhfc2V0dGluZ3MpO1xuICAgIF9hdWRpb1BsYXllci5zZXRSYXRlKF9zZXR0aW5ncy5tZWRpYU92ZXJsYXlzUmF0ZSk7XG4gICAgX2F1ZGlvUGxheWVyLnNldFZvbHVtZShfc2V0dGluZ3MubWVkaWFPdmVybGF5c1ZvbHVtZSAvIDEwMC4wKTtcbiAgfTtcbiAgc2VsZi5vblNldHRpbmdzQXBwbGllZCgpO1xuICAvL1JlYWRpdW1TREsuXG4gIHJlYWRlci5vbihFdmVudHMuU0VUVElOR1NfQVBQTElFRCwgdGhpcy5vblNldHRpbmdzQXBwbGllZCwgdGhpcyk7XG5cbiAgLypcbiAgdmFyIGxhc3RFbGVtZW50ID0gdW5kZWZpbmVkO1xuICB2YXIgbGFzdEVsZW1lbnRDb2xvciA9IFwiXCI7XG4gICovXG5cbiAgdmFyIF93YXNQbGF5aW5nQXREb2NMb2FkU3RhcnQgPSBmYWxzZTtcbiAgdGhpcy5vbkRvY0xvYWRTdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIDEpIFJlYWRpdW1TREsuRXZlbnRzLkNPTlRFTlRfRE9DVU1FTlRfTE9BRF9TVEFSVFxuICAgIC8vIChtYXliZSAyLXBhZ2UgZml4ZWQtbGF5b3V0IG9yIHJlZmxvd2FibGUgc3ByZWFkID09IDIgZG9jdW1lbnRzID09IDJ4IGV2ZW50cylcbiAgICAvLyBNT1BMYXllci5vbkRvY0xvYWQoKVxuXG4gICAgLy8gMikgUmVhZGl1bVNESy5FdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FERURcbiAgICAvLyAobWF5YmUgMi1wYWdlIGZpeGVkLWxheW91dCBvciByZWZsb3dhYmxlIHNwcmVhZCA9PSAyIGRvY3VtZW50cyA9PSAyeCBldmVudHMpXG4gICAgLy9fbWVkaWFPdmVybGF5RGF0YUluamVjdG9yLmF0dGFjaE1lZGlhT3ZlcmxheURhdGEoJGlmcmFtZSwgc3BpbmVJdGVtLCBfdmlld2VyU2V0dGluZ3MpO1xuXG4gICAgLy8gMykgUmVhZGl1bVNESy5FdmVudHMuUEFHSU5BVElPTl9DSEFOR0VEIChsYXlvdXQgZmluaXNoZWQsIG5vdGlmaWVkIGJlZm9yZSByZXN0IG9mIGFwcCwganVzdCBvbmNlKVxuICAgIC8vIE1PUExheWVyLm9uUGFnZUNoYW5nZWQoKVxuXG4gICAgdmFyIHdhc1BsYXlpbmcgPSBzZWxmLmlzUGxheWluZygpO1xuICAgIGlmICh3YXNQbGF5aW5nKSB7XG4gICAgICBfd2FzUGxheWluZ0F0RG9jTG9hZFN0YXJ0ID0gdHJ1ZTtcbiAgICAgIHNlbGYucGF1c2UoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9sYXN0UGFnaW5hdGlvbkRhdGEgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5vblBhZ2VDaGFuZ2VkID0gZnVuY3Rpb24ocGFnaW5hdGlvbkRhdGEpIHtcblxuICAgIF9sYXN0UGFnaW5hdGlvbkRhdGEgPSBwYWdpbmF0aW9uRGF0YTtcblxuICAgIHZhciB3YXNQYXVzZWRCZWNhdXNlTm9BdXRvTmV4dFNtaWwgPSBfd2FzUGF1c2VkQmVjYXVzZU5vQXV0b05leHRTbWlsO1xuICAgIF93YXNQYXVzZWRCZWNhdXNlTm9BdXRvTmV4dFNtaWwgPSBmYWxzZTtcblxuICAgIHZhciB3YXNQbGF5aW5nQXREb2NMb2FkU3RhcnQgPSBfd2FzUGxheWluZ0F0RG9jTG9hZFN0YXJ0O1xuICAgIF93YXNQbGF5aW5nQXREb2NMb2FkU3RhcnQgPSBmYWxzZTtcblxuICAgIGlmICghcGFnaW5hdGlvbkRhdGEpIHtcbiAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyAgICAgICAgaWYgKHBhZ2luYXRpb25EYXRhLnBhZ2luYXRpb25JbmZvKVxuICAgIC8vICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICBfY3VycmVudFBhZ2luYXRpb24gPSBwYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mbztcbiAgICAvLyAgICAgICAgfVxuXG4gICAgLypcbiAgICBpZiAobGFzdEVsZW1lbnQpXG4gICAge1xuICAgICAgICAkKGxhc3RFbGVtZW50KS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIGxhc3RFbGVtZW50Q29sb3IpO1xuICAgICAgICBsYXN0RWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgKi9cblxuICAgIHZhciBlbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgIHZhciBpc0NmaVRleHRSYW5nZSA9IGZhbHNlO1xuXG4gICAgdmFyIGZha2VPcGZSb290ID0gXCIvOTkhXCI7XG4gICAgdmFyIGVwdWJDZmlQcmVmaXggPSBcImVwdWJjZmlcIjtcblxuICAgIGlmIChwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQgfHwgcGFnaW5hdGlvbkRhdGEuaW5pdGlhdG9yID09IHNlbGYpIHtcbiAgICAgIHZhciBzcGluZUl0ZW1zID0gcmVhZGVyLmdldExvYWRlZFNwaW5lSXRlbXMoKTtcblxuICAgICAgdmFyIHJ0bCA9IHJlYWRlci5zcGluZSgpLmlzUmlnaHRUb0xlZnQoKTtcblxuICAgICAgZm9yICh2YXIgaSA9IChydGwgPyAoc3BpbmVJdGVtcy5sZW5ndGggLSAxKSA6IDApOyBydGwgJiYgaSA+PSAwIHx8ICFydGwgJiYgaSA8IHNwaW5lSXRlbXMubGVuZ3RoOyBpICs9IChydGwgPyAtMSA6IDEpKSB7XG4gICAgICAgIHZhciBzcGluZUl0ZW0gPSBzcGluZUl0ZW1zW2ldO1xuICAgICAgICBpZiAocGFnaW5hdGlvbkRhdGEuc3BpbmVJdGVtICYmIHBhZ2luYXRpb25EYXRhLnNwaW5lSXRlbSAhPSBzcGluZUl0ZW0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQgJiYgcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkLmluZGV4T2YoZXB1YkNmaVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICBfZWxlbWVudEhpZ2hsaWdodGVyLnJlc2V0KCk7IC8vIGVuc3VyZSBjbGVhbiBET00gKG5vIENGSSBzcGFuIG1hcmtlcnMpXG5cbiAgICAgICAgICB2YXIgcGFydGlhbCA9IHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZC5zdWJzdHIoZXB1YkNmaVByZWZpeC5sZW5ndGggKyAxLCBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQubGVuZ3RoIC0gZXB1YkNmaVByZWZpeC5sZW5ndGggLSAyKTtcblxuICAgICAgICAgIGlmIChwYXJ0aWFsLmluZGV4T2YoZmFrZU9wZlJvb3QpID09PSAwKSB7XG4gICAgICAgICAgICBwYXJ0aWFsID0gcGFydGlhbC5zdWJzdHIoZmFrZU9wZlJvb3QubGVuZ3RoLCBwYXJ0aWFsLmxlbmd0aCAtIGZha2VPcGZSb290Lmxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vY29uc29sZS5sb2cocGFydGlhbCk7XG4gICAgICAgICAgdmFyIHBhcnRzID0gcGFydGlhbC5zcGxpdChcIixcIik7XG4gICAgICAgICAgaWYgKHBhcnRzICYmIHBhcnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGNmaSA9IHBhcnRzWzBdICsgcGFydHNbMV07XG4gICAgICAgICAgICAgIHZhciAkZWxlbWVudCA9IHJlYWRlci5nZXRFbGVtZW50QnlDZmkoc3BpbmVJdGVtLCBjZmksIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdKTtcblxuICAgICAgICAgICAgICBlbGVtZW50ID0gKCRlbGVtZW50ICYmICRlbGVtZW50Lmxlbmd0aCA+IDApID8gJGVsZW1lbnRbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vdmFyIGNmaSA9IFwiZXB1YmNmaShcIiArIHBhcnRpYWwgKyBcIilcIjtcbiAgICAgICAgICAgICAgLy92YXIgJGVsZW1lbnQgPSBFUFVCY2ZpLmdldFRhcmdldEVsZW1lbnRXaXRoUGFydGlhbENGSShjZmksIERPQyk7XG4gICAgICAgICAgICAgIHZhciAkZWxlbWVudCA9IHJlYWRlci5nZXRFbGVtZW50QnlDZmkoc3BpbmVJdGVtLCBwYXJ0aWFsLCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXSk7XG5cbiAgICAgICAgICAgICAgZWxlbWVudCA9ICgkZWxlbWVudCAmJiAkZWxlbWVudC5sZW5ndGggPiAwKSA/ICRlbGVtZW50WzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgIGlmIChwYWdpbmF0aW9uRGF0YS5pbml0aWF0b3IgPT0gc2VsZiAmJiAhcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSByZWFkZXIuZ2V0RWxlbWVudChzcGluZUl0ZW0sIFwiYm9keVwiKTtcbiAgICAgICAgICAgIGVsZW1lbnQgPSAoJGVsZW1lbnQgJiYgJGVsZW1lbnQubGVuZ3RoID4gMCkgPyAkZWxlbWVudFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyICRlbGVtZW50ID0gcmVhZGVyLmdldEVsZW1lbnRCeUlkKHNwaW5lSXRlbSwgcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkKTtcbiAgICAgICAgICAgIGVsZW1lbnQgPSAoJGVsZW1lbnQgJiYgJGVsZW1lbnQubGVuZ3RoID4gMCkgPyAkZWxlbWVudFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIC8vKFwiI1wiICsgUmVhZGl1bVNESy5IZWxwZXJzLmVzY2FwZUpRdWVyeVNlbGVjdG9yKHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCkpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiR1JFRU46IFwiICsgcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkKTtcbiAgICAgICAgICAgIGxhc3RFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgIGxhc3RFbGVtZW50Q29sb3IgPSAkKGVsZW1lbnQpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIik7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCJncmVlblwiKTtcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwicGFnaW5hdGlvbkRhdGEuZWxlbWVudElkIEJVVCAhZWxlbWVudDogXCIgKyBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB3YXNQbGF5aW5nID0gc2VsZi5pc1BsYXlpbmcoKSB8fCB3YXNQbGF5aW5nQXREb2NMb2FkU3RhcnQ7XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IgfHwgIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgaWYgKHBhZ2luYXRpb25EYXRhLmluaXRpYXRvciAhPT0gc2VsZikge1xuICAgICAgICBjbGlwQmVnaW5PZmZzZXQgPSAwLjA7XG4gICAgICAgIHNlbGYucmVzZXQoKTtcblxuICAgICAgICBpZiAocGFnaW5hdGlvbkRhdGEuZWxlbWVudElkICYmIGVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAod2FzUGxheWluZyB8fCB3YXNQYXVzZWRCZWNhdXNlTm9BdXRvTmV4dFNtaWwpIHtcbiAgICAgICAgICAgIHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZFJlc29sdmVkID0gZWxlbWVudDtcbiAgICAgICAgICAgIHNlbGYudG9nZ2xlTWVkaWFPdmVybGF5UmVmcmVzaChwYWdpbmF0aW9uRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHdhc1BsYXlpbmcgfHwgd2FzUGF1c2VkQmVjYXVzZU5vQXV0b05leHRTbWlsKSB7XG4gICAgICAgICAgc2VsZi50b2dnbGVNZWRpYU92ZXJsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vcGFnaW5hdGlvbkRhdGEuaW5pdGlhdG9yID09PSBzZWxmXG4gICAgICAvL1xuICAgICAgLy8gICAgICAgICAgICBpZiAoIXBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZClcbiAgICAgIC8vICAgICAgICAgICAge1xuICAgICAgLy8gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIiFwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWRcIik7XG4gICAgICAvLyAgICAgICAgICAgICAgICBjbGlwQmVnaW5PZmZzZXQgPSAwLjA7XG4gICAgICAvLyAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAvLyAgICAgICAgICAgIH1cblxuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCIhZWxlbWVudDogXCIgKyBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQpO1xuICAgICAgICBjbGlwQmVnaW5PZmZzZXQgPSAwLjA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1vRGF0YSA9ICQoZWxlbWVudCkuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIik7XG4gICAgICBpZiAoIW1vRGF0YSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiIW1vRGF0YTogXCIgKyBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQpO1xuICAgICAgICBjbGlwQmVnaW5PZmZzZXQgPSAwLjA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhclRvUGxheSA9IG1vRGF0YS5wYXIgPyBtb0RhdGEucGFyIDogbW9EYXRhLnBhcnNbMF07XG5cbiAgICAgIGlmIChtb0RhdGEucGFycykge1xuICAgICAgICBmb3IgKHZhciBpUGFyID0gMDsgaVBhciA8IG1vRGF0YS5wYXJzLmxlbmd0aDsgaVBhcisrKSB7XG4gICAgICAgICAgdmFyIHAgPSBtb0RhdGEucGFyc1tpUGFyXTtcblxuICAgICAgICAgIGlmIChwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQgPT09IHAuY2ZpLnNtaWxUZXh0U3JjQ2ZpKSB7XG4gICAgICAgICAgICBwYXJUb1BsYXkgPSBwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBsYXlQYXIocGFyVG9QbGF5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbm9SZXZlcnNlRGF0YSA9ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuZWxlbWVudCAmJiAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmNmaTtcbiAgICBpZiAobm9SZXZlcnNlRGF0YSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIiEhIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5lbGVtZW50ID8/XCIpO1xuICAgIH1cblxuICAgIC8vY29uc29sZS5kZWJ1ZyhcIisrKz4gcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkOiBcIiArIHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCArIFwiIC8vLyBcIiArIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyY0ZpbGUgKyBcIiAjIFwiICsgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZCk7IC8vUGFnZU9wZW5SZXF1ZXN0LmVsZW1lbnRJZFxuXG5cbiAgICBpZiAocGFnaW5hdGlvbkRhdGEuaW5pdGlhdG9yID09IHNlbGYpIHtcbiAgICAgIHZhciBub3RTYW1lVGFyZ2V0SUQgPSBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQgJiYgcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkICE9PSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkO1xuXG4gICAgICBpZiAobm90U2FtZVRhcmdldElEKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCIhISBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWQgIT09IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWRcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChub3RTYW1lVGFyZ2V0SUQgfHwgbm9SZXZlcnNlRGF0YSkge1xuICAgICAgICBjbGlwQmVnaW5PZmZzZXQgPSAwLjA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHdhc1BsYXlpbmcpIHtcbiAgICAgICAgaGlnaGxpZ2h0Q3VycmVudEVsZW1lbnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXlDdXJyZW50UGFyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghd2FzUGxheWluZyAmJiAhd2FzUGF1c2VkQmVjYXVzZU5vQXV0b05leHRTbWlsKSB7XG4gICAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCkge1xuICAgICAgICAvL3NlbGYucmVzZXQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCAmJiAhZWxlbWVudCkge1xuICAgICAgICAvL3NlbGYucmVzZXQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFnaW5hdGlvbkRhdGEuZWxlbWVudElkKSB7XG4gICAgICAgIHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZFJlc29sdmVkID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgc2VsZi50b2dnbGVNZWRpYU92ZXJsYXlSZWZyZXNoKHBhZ2luYXRpb25EYXRhKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcGxheVBhcihwYXIpIHtcblxuICAgIHZhciBwYXJTbWlsID0gcGFyLmdldFNtaWwoKTtcbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IgfHwgX3NtaWxJdGVyYXRvci5zbWlsICE9IHBhclNtaWwpIHtcbiAgICAgIF9zbWlsSXRlcmF0b3IgPSBuZXcgU21pbEl0ZXJhdG9yKHBhclNtaWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfc21pbEl0ZXJhdG9yLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgX3NtaWxJdGVyYXRvci5nb1RvUGFyKHBhcik7XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgY29uc29sZS5lcnJvcihcInBsYXlQYXIgIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhclwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwbGF5Q3VycmVudFBhcigpO1xuICB9XG5cbiAgdmFyIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcblxuICB2YXIgX2JsYW5rUGFnZVBsYXllciA9IHVuZGVmaW5lZDtcblxuICBmdW5jdGlvbiBpbml0QmxhbmtQYWdlUGxheWVyKCkge1xuICAgIHNlbGYucmVzZXRCbGFua1BhZ2UoKTtcblxuICAgIF9ibGFua1BhZ2VQbGF5ZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICBpZiAoIV9ibGFua1BhZ2VQbGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnJlc2V0QmxhbmtQYWdlKCk7XG5cbiAgICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhdWRpb0N1cnJlbnRUaW1lID0gMC4wO1xuICAgICAgLy9jb25zb2xlLmxvZyhcIkJMQU5LIEVORC5cIik7XG4gICAgICAvL25leHRTbWlsKHRydWUpO1xuICAgICAgb25BdWRpb1Bvc2l0aW9uQ2hhbmdlZChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEVuZCArIDAuMSwgMik7XG5cbiAgICB9LCAyMDAwKTtcblxuICAgIG9uU3RhdHVzQ2hhbmdlZCh7XG4gICAgICBpc1BsYXlpbmc6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXlDdXJyZW50UGFyKCkge1xuICAgIF93YXNQbGF5aW5nU2Nyb2xsaW5nID0gZmFsc2U7XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IgfHwgIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgY29uc29sZS5lcnJvcihcInBsYXlDdXJyZW50UGFyICFfc21pbEl0ZXJhdG9yIHx8ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIgPz8/XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghX3NtaWxJdGVyYXRvci5zbWlsLmlkKSB7XG4gICAgICBfYXVkaW9QbGF5ZXIucmVzZXQoKTtcblxuICAgICAgc2VsZi5yZXNldFRUUygpO1xuICAgICAgc2VsZi5yZXNldEVtYmVkZGVkKCk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGluaXRCbGFua1BhZ2VQbGF5ZXIoKTtcbiAgICAgIH0sIDEwMCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKCFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uc3JjKSB7XG4gICAgICBjbGlwQmVnaW5PZmZzZXQgPSAwLjA7XG5cbiAgICAgIC8vICAgICAgICAgICAgaWYgKF9jdXJyZW50VFRTKVxuICAgICAgLy8gICAgICAgICAgICB7XG4gICAgICAvLyAgICAgICAgICAgICAgICBfc2tpcFRUU0VuZGVkID0gdHJ1ZTtcbiAgICAgIC8vICAgICAgICAgICAgfVxuXG4gICAgICBfYXVkaW9QbGF5ZXIucmVzZXQoKTtcblxuICAgICAgdmFyIGVsZW1lbnQgPSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuZWxlbWVudDtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGF1ZGlvQ3VycmVudFRpbWUgPSAwLjA7XG5cbiAgICAgICAgdmFyIG5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lID8gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuYW1lID09PSBcImF1ZGlvXCIgfHwgbmFtZSA9PT0gXCJ2aWRlb1wiKSB7XG4gICAgICAgICAgc2VsZi5yZXNldFRUUygpO1xuICAgICAgICAgIHNlbGYucmVzZXRCbGFua1BhZ2UoKTtcblxuICAgICAgICAgIGlmIChfY3VycmVudEVtYmVkZGVkKSB7XG4gICAgICAgICAgICBzZWxmLnJlc2V0RW1iZWRkZWQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfY3VycmVudEVtYmVkZGVkID0gZWxlbWVudDtcblxuICAgICAgICAgIF9jdXJyZW50RW1iZWRkZWQucGF1c2UoKTtcblxuICAgICAgICAgIC8vIERPTkUgYXQgcmVhZGVyX3ZpZXcuYXR0YWNoTU8oKVxuICAgICAgICAgIC8vJChfY3VycmVudEVtYmVkZGVkKS5hdHRyKFwicHJlbG9hZFwiLCBcImF1dG9cIik7XG5cbiAgICAgICAgICBfY3VycmVudEVtYmVkZGVkLmN1cnJlbnRUaW1lID0gMDtcblxuICAgICAgICAgIF9jdXJyZW50RW1iZWRkZWQucGxheSgpO1xuXG4gICAgICAgICAgJChfY3VycmVudEVtYmVkZGVkKS5vbihcImVuZGVkXCIsIHNlbGYub25FbWJlZGRlZEVuZCk7XG5cbiAgICAgICAgICBfZW1iZWRkZWRJc1BsYXlpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gZ2l2ZXMgdGhlIGF1ZGlvIHBsYXllciBzb21lIGRpc3BhdGNoZXIgdGltZSB0byByYWlzZSB0aGUgb25QYXVzZSBldmVudFxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvblN0YXR1c0NoYW5nZWQoe1xuICAgICAgICAgICAgICBpc1BsYXlpbmc6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDgwKTtcblxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLm9uKFwic2Vla2VkXCIsIGZ1bmN0aW9uKClcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5vZmYoXCJzZWVrZWRcIiwgb25TZWVrZWQpO1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnJlc2V0RW1iZWRkZWQoKTtcbiAgICAgICAgICBzZWxmLnJlc2V0QmxhbmtQYWdlKCk7XG5cbiAgICAgICAgICBfY3VycmVudFRUUyA9IGVsZW1lbnQudGV4dENvbnRlbnQ7IC8vLmlubmVyVGV4dCAoQ1NTIGRpc3BsYXkgc2Vuc2l0aXZlICsgc2NyaXB0ICsgc3R5bGUgdGFncylcbiAgICAgICAgICBpZiAoIV9jdXJyZW50VFRTIHx8IF9jdXJyZW50VFRTID09IFwiXCIpIHtcbiAgICAgICAgICAgIF9jdXJyZW50VFRTID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcGVha1N0YXJ0KF9jdXJyZW50VFRTKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNmaSA9IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5jZmk7XG4gICAgICBpZiAoY2ZpKSB7XG4gICAgICAgIGF1ZGlvQ3VycmVudFRpbWUgPSAwLjA7XG4gICAgICAgIHNlbGYucmVzZXRFbWJlZGRlZCgpO1xuICAgICAgICBzZWxmLnJlc2V0QmxhbmtQYWdlKCk7XG5cbiAgICAgICAgX2VsZW1lbnRIaWdobGlnaHRlci5yZXNldCgpOyAvLyBlbnN1cmUgY2xlYW4gRE9NIChubyBDRkkgc3BhbiBtYXJrZXJzKVxuXG4gICAgICAgIHZhciBkb2MgPSBjZmkuY2ZpVGV4dFBhcmVudC5vd25lckRvY3VtZW50O1xuXG4gICAgICAgIHZhciBzdGFydENGSSA9IFwiZXB1YmNmaShcIiArIGNmaS5wYXJ0aWFsU3RhcnRDZmkgKyBcIilcIjtcbiAgICAgICAgdmFyIGluZm9TdGFydCA9IEVQVUJjZmkuZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJKHN0YXJ0Q0ZJLCBkb2MsIFtcImNmaS1tYXJrZXJcIiwgXCJtby1jZmktaGlnaGxpZ2h0XCJdLCBbXSwgW1wiTWF0aEpheF9NZXNzYWdlXCJdKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhpbmZvU3RhcnQpO1xuXG4gICAgICAgIHZhciBlbmRDRkkgPSBcImVwdWJjZmkoXCIgKyBjZmkucGFydGlhbEVuZENmaSArIFwiKVwiO1xuICAgICAgICB2YXIgaW5mb0VuZCA9IEVQVUJjZmkuZ2V0VGV4dFRlcm1pbnVzSW5mb1dpdGhQYXJ0aWFsQ0ZJKGVuZENGSSwgZG9jLCBbXCJjZmktbWFya2VyXCIsIFwibW8tY2ZpLWhpZ2hsaWdodFwiXSwgW10sIFtcIk1hdGhKYXhfTWVzc2FnZVwiXSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coaW5mb0VuZCk7XG5cbiAgICAgICAgaWYgKHJhbmd5KSB7XG4gICAgICAgICAgLy9pbmZvU3RhcnQudGV4dE5vZGVbMF0ucGFyZW50Tm9kZS5vd25lckRvY3VtZW50XG4gICAgICAgICAgdmFyIHJhbmdlID0gcmFuZ3kuY3JlYXRlUmFuZ2UoZG9jKTsgLy9jcmVhdGVOYXRpdmVSYW5nZVxuICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKFxuICAgICAgICAgICAgaW5mb1N0YXJ0LnRleHROb2RlWzBdLCBpbmZvU3RhcnQudGV4dE9mZnNldCxcbiAgICAgICAgICAgIGluZm9FbmQudGV4dE5vZGVbMF0sIGluZm9FbmQudGV4dE9mZnNldFxuICAgICAgICAgICk7XG4gICAgICAgICAgX2N1cnJlbnRUVFMgPSByYW5nZS50b1N0cmluZygpOyAvLy50ZXh0KClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfY3VycmVudFRUUyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghX2N1cnJlbnRUVFMgfHwgX2N1cnJlbnRUVFMgPT0gXCJcIikge1xuICAgICAgICAgIF9jdXJyZW50VFRTID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNwZWFrU3RhcnQoX2N1cnJlbnRUVFMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYucmVzZXRUVFMoKTtcbiAgICAgIHNlbGYucmVzZXRFbWJlZGRlZCgpO1xuICAgICAgc2VsZi5yZXNldEJsYW5rUGFnZSgpO1xuXG4gICAgICB2YXIgZHVyID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBFbmQgLSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEJlZ2luO1xuICAgICAgaWYgKGR1ciA8PSAwIHx8IGNsaXBCZWdpbk9mZnNldCA+IGR1cikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiIyMjIE1PIFhYWCBQQVIgT0ZGU0VUOiBcIiArIGNsaXBCZWdpbk9mZnNldCArIFwiIC8gXCIgKyBkdXIpO1xuICAgICAgICBjbGlwQmVnaW5PZmZzZXQgPSAwLjA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCIjIyMgTU8gUEFSIE9GRlNFVDogXCIgKyBjbGlwQmVnaW5PZmZzZXQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXVkaW9Db250ZW50UmVmID0gUmVzb2x2ZUNvbnRlbnRSZWYoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLnNyYywgX3NtaWxJdGVyYXRvci5zbWlsLmhyZWYpO1xuXG4gICAgICB2YXIgYXVkaW9Tb3VyY2UgPSBfcGFja2FnZS5yZXNvbHZlUmVsYXRpdmVVcmxNTyhhdWRpb0NvbnRlbnRSZWYpO1xuXG4gICAgICB2YXIgc3RhcnRUaW1lID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBCZWdpbiArIGNsaXBCZWdpbk9mZnNldDtcblxuICAgICAgLy9jb25zb2xlLmRlYnVnKFwiUExBWSBTVEFSVCBUSU1FOiBcIiArIHN0YXJ0VGltZSArIFwiKFwiK19zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpby5jbGlwQmVnaW4rXCIgKyBcIitjbGlwQmVnaW5PZmZzZXQrXCIpXCIpO1xuXG4gICAgICBfYXVkaW9QbGF5ZXIucGxheUZpbGUoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLnNyYywgYXVkaW9Tb3VyY2UsIHN0YXJ0VGltZSk7IC8vX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmVsZW1lbnQgPyBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuZWxlbWVudCA6IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5jZmkuY2ZpVGV4dFBhcmVudFxuICAgIH1cblxuICAgIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcblxuICAgIGhpZ2hsaWdodEN1cnJlbnRFbGVtZW50KCk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0U21pbChnb05leHQpIHtcbiAgICBzZWxmLnBhdXNlKCk7XG5cbiAgICAvL2NvbnNvbGUuZGVidWcoXCJjdXJyZW50IFNtaWw6IFwiICsgX3NtaWxJdGVyYXRvci5zbWlsLmhyZWYgKyBcIiAvLy8gXCIgKyBfc21pbEl0ZXJhdG9yLnNtaWwuaWQpO1xuXG4gICAgdmFyIG5leHRTbWlsID0gZ29OZXh0ID8gX3BhY2thZ2UubWVkaWFfb3ZlcmxheS5nZXROZXh0U21pbChfc21pbEl0ZXJhdG9yLnNtaWwpIDogX3BhY2thZ2UubWVkaWFfb3ZlcmxheS5nZXRQcmV2aW91c1NtaWwoX3NtaWxJdGVyYXRvci5zbWlsKTtcbiAgICBpZiAobmV4dFNtaWwpIHtcblxuICAgICAgLy9jb25zb2xlLmRlYnVnKFwibmV4dFNtaWw6IFwiICsgbmV4dFNtaWwuaHJlZiArIFwiIC8vLyBcIiArIG5leHRTbWlsLmlkKTtcblxuICAgICAgX3NtaWxJdGVyYXRvciA9IG5ldyBTbWlsSXRlcmF0b3IobmV4dFNtaWwpO1xuICAgICAgaWYgKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgICBpZiAoIWdvTmV4dCkge1xuICAgICAgICAgIHdoaWxlICghX3NtaWxJdGVyYXRvci5pc0xhc3QoKSkge1xuICAgICAgICAgICAgX3NtaWxJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwib3BlbkNvbnRlbnRVcmwgKG5leHRTbWlsKTogXCIgKyBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIudGV4dC5zcmMgKyBcIiAtLSBcIiArIF9zbWlsSXRlcmF0b3Iuc21pbC5ocmVmKTtcblxuICAgICAgICByZWFkZXIub3BlbkNvbnRlbnRVcmwoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLnRleHQuc3JjLCBfc21pbEl0ZXJhdG9yLnNtaWwuaHJlZiwgc2VsZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiTm8gbW9yZSBTTUlMXCIpO1xuICAgICAgc2VsZi5yZXNldCgpO1xuICAgIH1cbiAgfVxuXG5cbiAgdmFyIF9za2lwQXVkaW9FbmRlZCA9IGZhbHNlO1xuICAvLyAgICB2YXIgX3NraXBUVFNFbmRlZCA9IGZhbHNlO1xuXG4gIHZhciBhdWRpb0N1cnJlbnRUaW1lID0gMC4wO1xuXG4gIHZhciBESVJFQ1RJT05fTUFSSyA9IC05OTk7XG5cbiAgLy8gICAgdmFyIF9sZXRQbGF5ID0gZmFsc2U7XG5cbiAgLy9mcm9tXG4gIC8vMSA9IGF1ZGlvIHBsYXllclxuICAvLzIgPSBibGFuayBwYWdlXG4gIC8vMyA9IHZpZGVvL2F1ZGlvIGVtYmJlZGVkXG4gIC8vNCA9IFRUU1xuICAvLzUgPSBhdWRpbyBlbmRcbiAgLy82ID0gdXNlciBwcmV2aW91cy9uZXh0L2VzY2FwZVxuICBmdW5jdGlvbiBvbkF1ZGlvUG9zaXRpb25DaGFuZ2VkKHBvc2l0aW9uLCBmcm9tLCBza2lwcGluZykgeyAvL25vTGV0UGxheVxuXG4gICAgYXVkaW9DdXJyZW50VGltZSA9IHBvc2l0aW9uO1xuXG4gICAgLy8gICAgICAgIGlmIChfbGV0UGxheSlcbiAgICAvLyAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgcmV0dXJuO1xuICAgIC8vICAgICAgICB9XG5cbiAgICBfc2tpcEF1ZGlvRW5kZWQgPSBmYWxzZTtcbiAgICAvLyAgICAgICAgX3NraXBUVFNFbmRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCFfc21pbEl0ZXJhdG9yIHx8ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGFyRnJvbSA9IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcjtcblxuICAgIHZhciBhdWRpbyA9IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpbztcblxuICAgIC8vdmFyIFRPTEVSQU5DRSA9IDAuMDU7XG4gICAgaWYgKFxuICAgICAgLy9wb3NpdGlvbiA+PSAoYXVkaW8uY2xpcEJlZ2luIC0gVE9MRVJBTkNFKSAmJlxuICAgICAgcG9zaXRpb24gPiBESVJFQ1RJT05fTUFSSyAmJlxuICAgICAgcG9zaXRpb24gPD0gYXVkaW8uY2xpcEVuZCkge1xuXG4gICAgICAvL2NvbnNvbGUuZGVidWcoXCJvbkF1ZGlvUG9zaXRpb25DaGFuZ2VkOiBcIiArIHBvc2l0aW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfc2tpcEF1ZGlvRW5kZWQgPSB0cnVlO1xuXG4gICAgLy9jb25zb2xlLmRlYnVnKFwiUExBWSBORVhUOiBcIiArIFwiKFwiICsgYXVkaW8uY2xpcEJlZ2luICsgXCIgLS0gXCIgKyBhdWRpby5jbGlwRW5kICsgXCIpIFtcIiArIGZyb20gKyBcIl0gXCIgKyAgcG9zaXRpb24pO1xuICAgIC8vY29uc29sZS5kZWJ1Zyhfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkKTtcblxuICAgIHZhciBpc1BsYXlpbmcgPSBfYXVkaW9QbGF5ZXIuaXNQbGF5aW5nKCk7XG4gICAgaWYgKGlzUGxheWluZyAmJiBmcm9tID09PSA2KSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwiZnJvbSB1c2VyTmF2IF9hdWRpb1BsYXllci5pc1BsYXlpbmcoKSA/Pz9cIik7XG4gICAgfVxuXG4gICAgdmFyIGdvTmV4dCA9IHBvc2l0aW9uID4gYXVkaW8uY2xpcEVuZDtcblxuICAgIHZhciBkb05vdE5leHRTbWlsID0gIV9hdXRvTmV4dFNtaWwgJiYgZnJvbSAhPT0gNiAmJiBnb05leHQ7XG5cbiAgICB2YXIgc3BpbmVJdGVtSWRSZWYgPSAoX3NtaWxJdGVyYXRvciAmJiBfc21pbEl0ZXJhdG9yLnNtaWwgJiYgX3NtaWxJdGVyYXRvci5zbWlsLnNwaW5lSXRlbUlkKSA/IF9zbWlsSXRlcmF0b3Iuc21pbC5zcGluZUl0ZW1JZCA6ICgoX2xhc3RQYWdpbmF0aW9uRGF0YSAmJiBfbGFzdFBhZ2luYXRpb25EYXRhLnNwaW5lSXRlbSAmJiBfbGFzdFBhZ2luYXRpb25EYXRhLnNwaW5lSXRlbS5pZHJlZikgPyBfbGFzdFBhZ2luYXRpb25EYXRhLnNwaW5lSXRlbS5pZHJlZiA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKGRvTm90TmV4dFNtaWwgJiYgc3BpbmVJdGVtSWRSZWYgJiYgX2xhc3RQYWdpbmF0aW9uRGF0YSAmJiBfbGFzdFBhZ2luYXRpb25EYXRhLnBhZ2luYXRpb25JbmZvICYmIF9sYXN0UGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzICYmIF9sYXN0UGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vdmFyIGlQYWdlID0gX2xhc3RQYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mby5pc1JpZ2h0VG9MZWZ0ID8gX2xhc3RQYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMubGVuZ3RoIC0gMSA6IDA7XG4gICAgICB2YXIgaVBhZ2UgPSAwO1xuXG4gICAgICB2YXIgb3BlblBhZ2UgPSBfbGFzdFBhZ2luYXRpb25EYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlc1tpUGFnZV07XG4gICAgICBpZiAoc3BpbmVJdGVtSWRSZWYgPT09IG9wZW5QYWdlLmlkcmVmKSB7XG4gICAgICAgIGRvTm90TmV4dFNtaWwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ29OZXh0KSB7XG4gICAgICBfc21pbEl0ZXJhdG9yLm5leHQoKTtcbiAgICB9IGVsc2UgLy9wb3NpdGlvbiA8PSBESVJFQ1RJT05fTUFSS1xuICAgIHtcbiAgICAgIF9zbWlsSXRlcmF0b3IucHJldmlvdXMoKTtcbiAgICB9XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgLy9cbiAgICAgIC8vICAgICAgICBpZiAoIW5vTGV0UGxheSlcbiAgICAgIC8vICAgICAgICB7XG4gICAgICAvLyAgICAgICAgICAgIF9sZXRQbGF5ID0gdHJ1ZTtcbiAgICAgIC8vICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpXG4gICAgICAvLyAgICAgICAgICAgIHtcbiAgICAgIC8vICAgICAgICAgICAgICAgIF9sZXRQbGF5ID0gZmFsc2U7XG4gICAgICAvLyAgICAgICAgICAgICAgICBuZXh0U21pbChnb05leHQpO1xuICAgICAgLy8gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgLy8gICAgICAgIH1cbiAgICAgIC8vICAgICAgICBlbHNlXG4gICAgICAvLyAgICAgICAge1xuICAgICAgLy8gICAgICAgICAgICBuZXh0U21pbChnb05leHQpO1xuICAgICAgLy8gICAgICAgIH1cblxuICAgICAgLy9jb25zb2xlLmRlYnVnKFwiTkVYVCBTTUlMIE9OIEFVRElPIFBPU1wiKTtcblxuICAgICAgaWYgKGRvTm90TmV4dFNtaWwpIHtcbiAgICAgICAgX3dhc1BhdXNlZEJlY2F1c2VOb0F1dG9OZXh0U21pbCA9IHRydWU7XG4gICAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgICAgLy9zZWxmLnBhdXNlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0U21pbChnb05leHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vY29uc29sZS5kZWJ1ZyhcIklURVI6IFwiICsgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLnRleHQuc3JjRnJhZ21lbnRJZCk7XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpbykge1xuICAgICAgc2VsZi5wYXVzZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfc2V0dGluZ3MubWVkaWFPdmVybGF5c1NraXBTa2lwcGFibGVzKSB7XG4gICAgICB2YXIgc2tpcCA9IGZhbHNlO1xuICAgICAgdmFyIHBhcmVudCA9IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcjtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5pc1NraXBwYWJsZSAmJiBwYXJlbnQuaXNTa2lwcGFibGUoX3NldHRpbmdzLm1lZGlhT3ZlcmxheXNTa2lwcGFibGVzKSkge1xuICAgICAgICAgIHNraXAgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChza2lwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTU8gU0tJUDogXCIgKyBwYXJlbnQuZXB1YnR5cGUpO1xuXG4gICAgICAgIHNlbGYucGF1c2UoKTtcblxuICAgICAgICB2YXIgcG9zID0gZ29OZXh0ID8gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBFbmQgKyAwLjEgOiBESVJFQ1RJT05fTUFSSyAtIDE7XG5cbiAgICAgICAgb25BdWRpb1Bvc2l0aW9uQ2hhbmdlZChwb3MsIGZyb20sIHRydWUpOyAvL25vTGV0UGxheVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gX3NldHRpbmdzLm1lZGlhT3ZlcmxheXNTeW5jaHJvbml6YXRpb25HcmFudWxhcml0eVxuICAgIGlmICghaXNQbGF5aW5nICYmIChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuZWxlbWVudCB8fCBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuY2ZpICYmIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5jZmkuY2ZpVGV4dFBhcmVudCkpIHtcbiAgICAgIHZhciBzY29wZVRvID0gX2VsZW1lbnRIaWdobGlnaHRlci5hZGp1c3RQYXJUb1NlcVN5bmNHcmFudWxhcml0eShfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpO1xuICAgICAgaWYgKHNjb3BlVG8gJiYgc2NvcGVUbyAhPT0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgIHZhciBzY29wZUZyb20gPSBfZWxlbWVudEhpZ2hsaWdodGVyLmFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5KHBhckZyb20pO1xuICAgICAgICBpZiAoc2NvcGVGcm9tICYmIChzY29wZUZyb20gPT09IHNjb3BlVG8gfHwgIWdvTmV4dCkpIHtcbiAgICAgICAgICBpZiAoc2NvcGVGcm9tID09PSBzY29wZVRvKSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIGlmIChnb05leHQpIF9zbWlsSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgICBlbHNlIF9zbWlsSXRlcmF0b3IucHJldmlvdXMoKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhciAmJiBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuaGFzQW5jZXN0b3Ioc2NvcGVGcm9tKSk7XG5cbiAgICAgICAgICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcImFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5IG5leHRTbWlsKGdvTmV4dClcIik7XG5cbiAgICAgICAgICAgICAgaWYgKGRvTm90TmV4dFNtaWwpIHtcbiAgICAgICAgICAgICAgICBfd2FzUGF1c2VkQmVjYXVzZU5vQXV0b05leHRTbWlsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzZWxmLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgLy9zZWxmLnBhdXNlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dFNtaWwoZ29OZXh0KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJBREpVU1RFRDogXCIgKyBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkKTtcbiAgICAgICAgICBpZiAoIWdvTmV4dCkge1xuICAgICAgICAgICAgdmFyIGxhbmRlZCA9IF9lbGVtZW50SGlnaGxpZ2h0ZXIuYWRqdXN0UGFyVG9TZXFTeW5jR3JhbnVsYXJpdHkoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKTtcbiAgICAgICAgICAgIGlmIChsYW5kZWQgJiYgbGFuZGVkICE9PSBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgICAgICAgdmFyIGJhY2t1cCA9IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcjtcblxuICAgICAgICAgICAgICB2YXIgaW5uZXJQYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpbm5lclBhciA9IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcjtcbiAgICAgICAgICAgICAgICBfc21pbEl0ZXJhdG9yLnByZXZpb3VzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgd2hpbGUgKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhciAmJiBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuaGFzQW5jZXN0b3IobGFuZGVkKSk7XG5cbiAgICAgICAgICAgICAgaWYgKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgICAgICAgICAgIF9zbWlsSXRlcmF0b3IubmV4dCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuaGFzQW5jZXN0b3IobGFuZGVkKSkge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuaGFzQW5jZXN0b3IobGFuZGVkKSA/Pz9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vYXNzZXJ0IFxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcImFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5IHJlYWNoZWQgYmVnaW5cIik7XG5cbiAgICAgICAgICAgICAgICBfc21pbEl0ZXJhdG9yLnJlc2V0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyICE9PSBpbm5lclBhcikge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhciAhPT09IGlubmVyUGFyPz8/XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5ICFfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIgPz8/Pz9cIik7XG4gICAgICAgICAgICAgICAgX3NtaWxJdGVyYXRvci5nb1RvUGFyKGJhY2t1cCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJBREpVU1RFRCBQUkVWOiBcIiArIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfYXVkaW9QbGF5ZXIuaXNQbGF5aW5nKCkgJiYgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLnNyYyAmJiBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uc3JjID09IF9hdWRpb1BsYXllci5jdXJyZW50U21pbFNyYygpICYmIHBvc2l0aW9uID49IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpby5jbGlwQmVnaW4gJiYgcG9zaXRpb24gPD0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBFbmQpIHtcbiAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIk9OTFkgaGlnaGxpZ2h0Q3VycmVudEVsZW1lbnRcIik7XG4gICAgICBoaWdobGlnaHRDdXJyZW50RWxlbWVudCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vcG9zaXRpb24gPD0gRElSRUNUSU9OX01BUksgZ29lcyBoZXJlIChnb3RvIHByZXZpb3VzKTpcblxuICAgIC8vICAgICAgICAgICAgaWYgKCFub0xldFBsYXkgJiYgcG9zaXRpb24gPiBESVJFQ1RJT05fTUFSS1xuICAgIC8vICAgICAgICAgICAgICAgICYmIF9hdWRpb1BsYXllci5pc1BsYXlpbmcoKSAmJiBfYXVkaW9QbGF5ZXIuc3JjUmVmKCkgIT0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLnNyYylcbiAgICAvLyAgICAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICAgICBfbGV0UGxheSA9IHRydWU7XG4gICAgLy8gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpXG4gICAgLy8gICAgICAgICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgICAgICAgICBfbGV0UGxheSA9IGZhbHNlO1xuICAgIC8vICAgICAgICAgICAgICAgICAgICBwbGF5Q3VycmVudFBhcigpO1xuICAgIC8vICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgLy9cbiAgICAvLyAgICAgICAgICAgICAgICBwbGF5Q3VycmVudFBhcigpO1xuICAgIC8vXG4gICAgLy8gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgIC8vICAgICAgICAgICAgfVxuXG4gICAgcGxheUN1cnJlbnRQYXIoKTtcbiAgfVxuXG4gIHRoaXMudG91Y2hJbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRvZG8gPSBfYXVkaW9QbGF5ZXIudG91Y2hJbml0KCk7XG4gICAgaWYgKHRvZG8pIHtcbiAgICAgIGlmIChfZW5hYmxlSFRNTFNwZWVjaCkge1xuICAgICAgICBzcGVha1N0YXJ0KFwib1wiLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHRva2VuaXNlVFRTID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBCTE9DS19ERUxJTUlURVJTID0gWydwJywgJ2RpdicsICdwYWdlbnVtJywgJ3RkJywgJ3RhYmxlJywgJ2xpJywgJ3VsJywgJ29sJ107XG4gICAgdmFyIEJPVU5EQVJZX1BVTkNUVUFUSU9OID0gWycsJywgJzsnLCAnLicsICctJywgJz8/JywgJz8/JywgJz8nLCAnISddO1xuICAgIHZhciBJR05PUkFCTEVfUFVOQ1RVQVRJT04gPSBbJ1wiJywgJ1xcJycsICc/PycsICc/PycsICc/PycsICc/PyddO1xuXG4gICAgdmFyIGZsdXNoID0gZnVuY3Rpb24odCwgcikge1xuICAgICAgaWYgKHQud29yZC5sZW5ndGggPD0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3MgPSB0LnRleHQubGVuZ3RoO1xuICAgICAgci5zcGFuTWFwW3Bvc10gPSB0LmNvdW50ZXI7XG4gICAgICB0LnRleHQgKz0gdC53b3JkO1xuICAgICAgdC5tYXJrdXAgKz0gdC5odG1sLnN1YnN0cmluZygwLCB0LndvcmRTdGFydCkgK1xuICAgICAgICAnPHNwYW4gY2xhc3M9XCJ0dHNfb2ZmXCIgaWQ9XCJ0dHNfJyArIHQuY291bnRlciArICdcIj4nICtcbiAgICAgICAgdC5odG1sLnN1YnN0cmluZyh0LndvcmRTdGFydCwgdC53b3JkRW5kKSArXG4gICAgICAgICc8L3NwYW4+JyArIHQuaHRtbC5zdWJzdHJpbmcodC53b3JkRW5kLCB0Lmh0bWwubGVuZ3RoKTtcbiAgICAgIHQud29yZCA9IFwiXCI7XG4gICAgICB0Lmh0bWwgPSBcIlwiO1xuICAgICAgdC53b3JkU3RhcnQgPSAtMTtcbiAgICAgIHQud29yZEVuZCA9IC0xO1xuICAgICAgdC5jb3VudGVyKys7XG4gICAgfTtcblxuICAgIHZhciByID0ge1xuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIGlubmVySFRNTF90dHM6IFwiXCIsXG4gICAgICBzcGFuTWFwOiB7fSxcbiAgICAgIHRleHQ6IFwiXCIsXG4gICAgICBsYXN0Q2hhckluZGV4OiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHIuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWwgPSBlbGVtZW50LmlubmVySFRNTDtcblxuICAgIHZhciB0ID0ge1xuICAgICAgaW5UYWc6IGZhbHNlLFxuICAgICAgY291bnRlcjogMCxcbiAgICAgIHdvcmRTdGFydDogLTEsXG4gICAgICB3b3JkRW5kOiAtMSxcbiAgICAgIHRleHQ6ICcnLFxuICAgICAgbWFya3VwOiAnJyxcbiAgICAgIHdvcmQ6ICcnLFxuICAgICAgaHRtbDogJydcbiAgICB9O1xuXG4gICAgdmFyIGxpbWl0ID0gci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbC5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDw9IGxpbWl0KSB7XG4gICAgICBpZiAodC5pblRhZykge1xuICAgICAgICB0Lmh0bWwgKz0gci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbFtpXTtcbiAgICAgICAgaWYgKHIuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWxbaV0gPT0gXCI+XCIpIHtcbiAgICAgICAgICB0LmluVGFnID0gZmFsc2U7XG4gICAgICAgICAgLy8gaWYgaXQncyBhIGJsb2NrIGVsZW1lbnQgZGVsaW1pdGVyLCBmbHVzaFxuICAgICAgICAgIHZhciBibG9ja0NoZWNrID0gdC5odG1sLm1hdGNoKC88XFwvKC4qPyk+JC8pO1xuICAgICAgICAgIGlmIChibG9ja0NoZWNrICYmIEJMT0NLX0RFTElNSVRFUlMuaW5kZXhPZihibG9ja0NoZWNrWzFdKSA+IC0xKSB7XG4gICAgICAgICAgICBmbHVzaCh0LCByKTtcbiAgICAgICAgICAgIHQudGV4dCArPSAnICc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaSA9PSBsaW1pdCB8fCByLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsW2ldLm1hdGNoKC9cXHMvKSkge1xuICAgICAgICAgIGZsdXNoKHQsIHIpO1xuXG4gICAgICAgICAgLy8gYXBwZW5kIHRoZSBjYXB0dXJlZCB3aGl0ZXNwYWNlXG4gICAgICAgICAgaWYgKGkgPCBsaW1pdCkge1xuICAgICAgICAgICAgdC50ZXh0ICs9IHIuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWxbaV07XG4gICAgICAgICAgICB0Lm1hcmt1cCArPSByLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChCT1VOREFSWV9QVU5DVFVBVElPTi5pbmRleE9mKHIuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWxbaV0pID4gLTEpIHtcbiAgICAgICAgICBmbHVzaCh0LCByKTtcblxuICAgICAgICAgIHQud29yZFN0YXJ0ID0gdC5odG1sLmxlbmd0aDtcbiAgICAgICAgICB0LndvcmRFbmQgPSB0Lmh0bWwubGVuZ3RoICsgMTtcbiAgICAgICAgICB0LndvcmQgKz0gci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbFtpXTtcbiAgICAgICAgICB0Lmh0bWwgKz0gci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbFtpXTtcblxuICAgICAgICAgIGZsdXNoKHQsIHIpO1xuICAgICAgICB9IGVsc2UgaWYgKHIuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWxbaV0gPT0gXCI8XCIpIHtcbiAgICAgICAgICB0LmluVGFnID0gdHJ1ZTtcbiAgICAgICAgICB0Lmh0bWwgKz0gci5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbFtpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodC53b3JkLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICB0LndvcmRTdGFydCA9IHQuaHRtbC5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHQud29yZEVuZCA9IHQuaHRtbC5sZW5ndGggKyAxO1xuICAgICAgICAgIHQud29yZCArPSByLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsW2ldO1xuICAgICAgICAgIHQuaHRtbCArPSByLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgfVxuICAgIC8vXG4gICAgLy9jb25zb2xlLmRlYnVnKHQudGV4dCk7XG4gICAgLy8gICAgICAgIGNvbnNvbGUuZGVidWcoXCItLS0tXCIpO1xuICAgIC8vY29uc29sZS5kZWJ1Zyh0Lm1hcmt1cCk7XG5cbiAgICByLnRleHQgPSB0LnRleHQ7XG4gICAgci5pbm5lckhUTUxfdHRzID0gdC5tYXJrdXA7XG4gICAgci5lbGVtZW50LmlubmVySFRNTCA9IHIuaW5uZXJIVE1MX3R0cztcblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIHZhciAkdHRzU3R5bGUgPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gZW5zdXJlVFRTU3R5bGUoJGVsZW1lbnQpIHtcbiAgICBpZiAoJHR0c1N0eWxlICYmICR0dHNTdHlsZVswXS5vd25lckRvY3VtZW50ID09PSAkZWxlbWVudFswXS5vd25lckRvY3VtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlID0gXCIudHRzX29ue2JhY2tncm91bmQtY29sb3I6cmVkO2NvbG9yOndoaXRlO30gLnR0c19vZmZ7fVwiO1xuXG4gICAgJGhlYWQgPSAkKFwiaGVhZFwiLCAkZWxlbWVudFswXS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG5cbiAgICAkdHRzU3R5bGUgPSAkKFwiPHN0eWxlIHR5cGU9J3RleHQvY3NzJz4gPC9zdHlsZT5cIikuYXBwZW5kVG8oJGhlYWQpO1xuXG4gICAgJHR0c1N0eWxlLmFwcGVuZChzdHlsZSk7XG4gIH1cblxuICB2YXIgc3BlYWtTdGFydCA9IGZ1bmN0aW9uKHR4dCwgdm9sdW1lKSB7XG4gICAgdmFyIHRva2VuRGF0YSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgY3VyUGFyID0gKF9zbWlsSXRlcmF0b3IgJiYgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSA/IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhciA6IHVuZGVmaW5lZDtcbiAgICB2YXIgZWxlbWVudCA9IGN1clBhciA/IGN1clBhci5lbGVtZW50IDogdW5kZWZpbmVkO1xuICAgIHZhciBjZmkgPSBjdXJQYXIgPyBjdXJQYXIuY2ZpIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKCF2b2x1bWUgfHwgdm9sdW1lID4gMCkge1xuICAgICAgLy8gZ2l2ZXMgdGhlIGF1ZGlvIHBsYXllciBzb21lIGRpc3BhdGNoZXIgdGltZSB0byByYWlzZSB0aGUgb25QYXVzZSBldmVudFxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgb25TdGF0dXNDaGFuZ2VkKHtcbiAgICAgICAgICBpc1BsYXlpbmc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9LCA4MCk7XG5cbiAgICAgIF90dHNJc1BsYXlpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoVE9LRU5JWkVfVFRTICYmIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyICRlbCA9ICQoZWxlbWVudCk7XG4gICAgICAgIGVuc3VyZVRUU1N0eWxlKCRlbCk7XG5cblxuICAgICAgICBpZiAoZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWwpIHtcbiAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsO1xuICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRva2VuRGF0YSA9IHRva2VuaXNlVFRTKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghX2VuYWJsZUhUTUxTcGVlY2gpIHtcbiAgICAgIHJlYWRlci50cmlnZ2VyKEV2ZW50cy5NRURJQV9PVkVSTEFZX1RUU19TUEVBSywge1xuICAgICAgICB0dHM6IHR4dFxuICAgICAgfSk7IC8vIHJlc3VtZSBpZiB0eHQgPT0gdW5kZWZpbmVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0eHQgJiYgd2luZG93LnNwZWVjaFN5bnRoZXNpcy5wYXVzZWQpIHtcbiAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIlRUUyByZXN1bWVcIik7XG4gICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnJlc3VtZSgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHQgPSB0eHQgfHwgX2N1cnJlbnRUVFM7XG5cbiAgICBpZiAodGV4dCkge1xuICAgICAgaWYgKF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UpIHtcbiAgICAgICAgLy9jb25zb2xlLmRlYnVnKFwiX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSBudWxsaWZ5XCIpO1xuXG4gICAgICAgIGlmIChUT0tFTklaRV9UVFMpIHtcbiAgICAgICAgICBpZiAoX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5vbmVuZCkge1xuICAgICAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5vbmVuZCh7XG4gICAgICAgICAgICAgIGZvcmNlU2tpcEVuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgdGFyZ2V0OiBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLnRva2VuRGF0YSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2Uub25ib3VuZGFyeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5vbmJvdW5kYXJ5ID0gZnVuY3Rpb24oZXZlbnQpXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwiT0xEIFRUUyBib3VuZGFyeVwiKTtcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnRva2VuRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAvLyAgXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLm9uZW5kID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5vbmVuZCA9IGZ1bmN0aW9uKGV2ZW50KVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAge1xuICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwiT0xEIFRUUyBlbmRlZFwiKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBpZiAoVE9LRU5JWkVfVFRTKVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnRva2VuRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2Uub25lcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2Uub25lcnJvciA9IGZ1bmN0aW9uKGV2ZW50KVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAge1xuICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwiT0xEIFRUUyBlcnJvclwiKTtcbiAgICAgICAgLy8gLy9jb25zb2xlLmRlYnVnKGV2ZW50KTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBpZiAoVE9LRU5JWkVfVFRTKVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnRva2VuRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgIF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICAvL1xuICAgICAgLy8gICAgICAgICAgICBpZiAod2luZG93LnNwZWVjaFN5bnRoZXNpcy5wZW5kaW5nIHx8XG4gICAgICAvLyAgICAgICAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFraW5nKVxuICAgICAgLy8gICAgICAgICAgICB7XG4gICAgICAvLyAgICAgICAgICAgICAgICBfc2tpcFRUU0VuZEV2ZW50ID0gdHJ1ZTtcbiAgICAgIC8vICAgICAgICAgICAgfVxuXG4gICAgICBjb25zb2xlLmRlYnVnKFwicGF1c2VkOiBcIiArIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMucGF1c2VkKTtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJzcGVha2luZzogXCIgKyB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFraW5nKTtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJwZW5kaW5nOiBcIiArIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMucGVuZGluZyk7XG5cbiAgICAgIC8vICAgICAgICAgICAgIGlmICghd2luZG93LnNwZWVjaFN5bnRoZXNpcy5wYXVzZWQpXG4gICAgICAvLyAgICAgICAgICAgICB7XG4gICAgICAvLyBjb25zb2xlLmRlYnVnKFwiVFRTIHBhdXNlIGJlZm9yZSBzcGVha1wiKTtcbiAgICAgIC8vICAgICAgICAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnBhdXNlKCk7XG4gICAgICAvLyAgICAgICAgICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbFRUUyhmaXJzdCkge1xuICAgICAgICBpZiAoZmlyc3QgfHwgd2luZG93LnNwZWVjaFN5bnRoZXNpcy5wZW5kaW5nKSB7XG4gICAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlRUUyBjYW5jZWwgYmVmb3JlIHNwZWFrXCIpO1xuICAgICAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuY2FuY2VsKCk7XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2FuY2VsVFRTKGZhbHNlKTtcbiAgICAgICAgICB9LCA1KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cGRhdGVUVFMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2FuY2VsVFRTKHRydWUpO1xuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVUVFMoKSB7XG4gICAgICAgIC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKVxuICAgICAgICAvLyB7XG5cbiAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSA9IG5ldyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UoKTtcblxuICAgICAgICBpZiAoVE9LRU5JWkVfVFRTICYmIHRva2VuRGF0YSkge1xuICAgICAgICAgIF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UudG9rZW5EYXRhID0gdG9rZW5EYXRhO1xuXG4gICAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5vbmJvdW5kYXJ5ID0gZnVuY3Rpb24oZXZlbnQpXG4gICAgICAgICAgICAvL19TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UuYWRkRXZlbnRMaXN0ZW5lcihcImJvdW5kYXJ5XCIsIGZ1bmN0aW9uKGV2ZW50KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZiAoIV9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIGJvdW5kYXJ5OiBcIiArIGV2ZW50Lm5hbWUgKyBcIiAvIFwiICsgZXZlbnQuY2hhckluZGV4KTtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmRlYnVnKGV2ZW50KTtcblxuICAgICAgICAgICAgICB2YXIgdG9rZW5pc2VkID0gZXZlbnQudGFyZ2V0LnRva2VuRGF0YTtcbiAgICAgICAgICAgICAgaWYgKCF0b2tlbmlzZWQgfHwgIXRva2VuaXNlZC5zcGFuTWFwLmhhc093blByb3BlcnR5KGV2ZW50LmNoYXJJbmRleCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZmFsc2UgJiYgdG9rZW5pc2VkLmxhc3RDaGFySW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJUVFMgbGFzdENoYXJJbmRleDogXCIgKyB0b2tlbmlzZWQubGFzdENoYXJJbmRleCk7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gJ3R0c18nICsgdG9rZW5pc2VkLnNwYW5NYXBbdG9rZW5pc2VkLmxhc3RDaGFySW5kZXhdO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIlRUUyBsYXN0Q2hhckluZGV4IElEOiBcIiArIGlkKTtcbiAgICAgICAgICAgICAgICB2YXIgc3BhblByZXZpb3VzID0gdG9rZW5pc2VkLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIGlkKTtcbiAgICAgICAgICAgICAgICBpZiAoc3BhblByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJUVFMgT0ZGXCIpO1xuICAgICAgICAgICAgICAgICAgc3BhblByZXZpb3VzLmNsYXNzTmFtZSA9ICd0dHNfb2ZmJztcbiAgICAgICAgICAgICAgICAgIC8vc3BhblByZXZpb3VzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwid2hpdGVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKFxuICAgICAgICAgICAgICAgICAgdG9rZW5pc2VkLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50dHNfb25cIiksXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIE9GRiBcIiArIGVsLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gJ3R0c19vZmYnO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgaWQgPSAndHRzXycgKyB0b2tlbmlzZWQuc3Bhbk1hcFtldmVudC5jaGFySW5kZXhdO1xuICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIGNoYXJJbmRleCBJRDogXCIgKyBpZCk7XG4gICAgICAgICAgICAgIHZhciBzcGFuTmV3ID0gdG9rZW5pc2VkLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIGlkKTtcbiAgICAgICAgICAgICAgaWYgKHNwYW5OZXcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIE9OXCIpO1xuICAgICAgICAgICAgICAgIHNwYW5OZXcuY2xhc3NOYW1lID0gJ3R0c19vbic7XG4gICAgICAgICAgICAgICAgLy9zcGFuTmV3LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwidHJhbnNwYXJlbnRcIjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRva2VuaXNlZC5sYXN0Q2hhckluZGV4ID0gZXZlbnQuY2hhckluZGV4O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2Uub25lbmQgPSBmdW5jdGlvbihldmVudClcbiAgICAgICAgICAvL19TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UuYWRkRXZlbnRMaXN0ZW5lcihcImVuZFwiLCBmdW5jdGlvbihldmVudClcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIV9TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UpIHtcbiAgICAgICAgICAgICAgLy9fc2tpcFRUU0VuZEV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICBpZiAoX3NraXBUVFNFbmRFdmVudClcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBfc2tpcFRUU0VuZEV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIGVuZGVkXCIpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmRlYnVnKGV2ZW50KTtcblxuICAgICAgICAgICAgaWYgKFRPS0VOSVpFX1RUUykge1xuICAgICAgICAgICAgICB2YXIgdG9rZW5pc2VkID0gZXZlbnQudGFyZ2V0LnRva2VuRGF0YTtcblxuICAgICAgICAgICAgICB2YXIgZG9FbmQgPSAhZXZlbnQuZm9yY2VTa2lwRW5kICYmIChfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlID09PSBldmVudC50YXJnZXQpICYmICghdG9rZW5pc2VkIHx8IHRva2VuaXNlZC5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbCk7XG5cbiAgICAgICAgICAgICAgaWYgKHRva2VuaXNlZCkge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbmlzZWQuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICAgIHRva2VuaXNlZC5lbGVtZW50LmlubmVySFRNTCA9IHRva2VuaXNlZC5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKFxuICAgICAgICAgICAgICAgICAgICB0b2tlbmlzZWQuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnR0c19vblwiKSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIE9GRiAoZW5kKVwiICsgZWwuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTmFtZSA9ICd0dHNfb2ZmJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0b2tlbmlzZWQuZWxlbWVudC5pbm5lckhUTUxfb3JpZ2luYWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgIGlmIChkb0VuZCkge1xuICAgICAgICAgICAgICAgIHNlbGYub25UVFNFbmQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiVFRTIGVuZCBTS0lQUEVEXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWxmLm9uVFRTRW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICBfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudClcbiAgICAgICAgICAvL19TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uKGV2ZW50KVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICghX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUVFMgZXJyb3JcIik7XG4gICAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoZXZlbnQpO1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhfU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLnRleHQpO1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1Zyh3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnBhdXNlZCk7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKHdpbmRvdy5zcGVlY2hTeW50aGVzaXMucGVuZGluZyk7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuc3BlYWtpbmcpO1xuXG4gICAgICAgICAgICBpZiAoVE9LRU5JWkVfVFRTKSB7XG4gICAgICAgICAgICAgIHZhciB0b2tlbmlzZWQgPSBldmVudC50YXJnZXQudG9rZW5EYXRhO1xuICAgICAgICAgICAgICBpZiAodG9rZW5pc2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuaXNlZC5lbGVtZW50LmlubmVySFRNTF9vcmlnaW5hbCkge1xuICAgICAgICAgICAgICAgICAgdG9rZW5pc2VkLmVsZW1lbnQuaW5uZXJIVE1MID0gdG9rZW5pc2VkLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgIHRva2VuaXNlZC5lbGVtZW50Lm93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50dHNfb25cIiksXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlRUUyBPRkYgKGVycm9yKVwiICsgZWwuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTmFtZSA9ICd0dHNfb2ZmJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9rZW5pc2VkLmVsZW1lbnQuaW5uZXJIVE1MX29yaWdpbmFsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICB2YXIgdm9sID0gdm9sdW1lIHx8IF9hdWRpb1BsYXllci5nZXRWb2x1bWUoKTtcbiAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS52b2x1bWUgPSB2b2w7XG5cbiAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5yYXRlID0gX2F1ZGlvUGxheWVyLmdldFJhdGUoKTtcbiAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS5waXRjaCA9IDE7XG5cbiAgICAgICAgLy9fU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLmxhbmcgPSBcImVuLVVTXCI7XG5cbiAgICAgICAgX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZS50ZXh0ID0gdGV4dDtcblxuICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCJUVFMgc3BlYWs6IFwiICsgdGV4dCk7XG4gICAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuc3BlYWsoX1NwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSk7XG5cbiAgICAgICAgaWYgKHdpbmRvdy5zcGVlY2hTeW50aGVzaXMucGF1c2VkKSB7XG4gICAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlRUUyByZXN1bWVcIik7XG4gICAgICAgICAgd2luZG93LnNwZWVjaFN5bnRoZXNpcy5yZXN1bWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vfSwgNSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBzcGVha1N0b3AgPSBmdW5jdGlvbigpIHtcbiAgICBvblN0YXR1c0NoYW5nZWQoe1xuICAgICAgaXNQbGF5aW5nOiBmYWxzZVxuICAgIH0pO1xuICAgIF90dHNJc1BsYXlpbmcgPSBmYWxzZTtcblxuICAgIGlmICghX2VuYWJsZUhUTUxTcGVlY2gpIHtcbiAgICAgIHJlYWRlci50cmlnZ2VyKEV2ZW50cy5NRURJQV9PVkVSTEFZX1RUU19TVE9QLCB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vY29uc29sZS5kZWJ1ZyhcIlRUUyBwYXVzZVwiKTtcbiAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnBhdXNlKCk7XG4gIH07XG5cbiAgdmFyIF90aW1lclRpY2sgPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gb25QbGF5KCkge1xuICAgIG9uUGF1c2UoKTtcblxuICAgIHZhciBmdW5jID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNtaWwgPSBfc21pbEl0ZXJhdG9yLnNtaWw7IC8vY3VycmVudFBhci5nZXRTbWlsKCk7XG4gICAgICBpZiAoIXNtaWwubW8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyAgICAgICAgICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLnNyYylcbiAgICAgIC8vICAgICAgICAgICAge1xuICAgICAgLy8gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgLy8gICAgICAgICAgICB9XG5cbiAgICAgIHZhciBwbGF5UG9zaXRpb24gPSBhdWRpb0N1cnJlbnRUaW1lIC0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBCZWdpbjtcbiAgICAgIGlmIChwbGF5UG9zaXRpb24gPD0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzbWlsSW5kZXggPSBzbWlsLm1vLnNtaWxfbW9kZWxzLmluZGV4T2Yoc21pbCk7XG5cbiAgICAgIHZhciBzbWlsSXRlcmF0b3IgPSBuZXcgU21pbEl0ZXJhdG9yKHNtaWwpO1xuICAgICAgdmFyIHBhckluZGV4ID0gLTE7XG4gICAgICB3aGlsZSAoc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpIHtcbiAgICAgICAgcGFySW5kZXgrKztcbiAgICAgICAgaWYgKHNtaWxJdGVyYXRvci5jdXJyZW50UGFyID09IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNtaWxJdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIG9uU3RhdHVzQ2hhbmdlZCh7XG4gICAgICAgIHBsYXlQb3NpdGlvbjogcGxheVBvc2l0aW9uLFxuICAgICAgICBzbWlsSW5kZXg6IHNtaWxJbmRleCxcbiAgICAgICAgcGFySW5kZXg6IHBhckluZGV4XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgc2V0VGltZW91dChmdW5jLCA1MDApO1xuXG4gICAgX3RpbWVyVGljayA9IHNldEludGVydmFsKGZ1bmMsIDE1MDApO1xuICB9XG5cbiAgZnVuY3Rpb24gb25QYXVzZSgpIHtcblxuICAgIGF1ZGlvQ3VycmVudFRpbWUgPSAwLjA7XG4gICAgaWYgKF90aW1lclRpY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChfdGltZXJUaWNrKTtcbiAgICB9XG4gICAgX3RpbWVyVGljayA9IHVuZGVmaW5lZDtcbiAgfVxuXG5cbiAgdGhpcy5vbkVtYmVkZGVkRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgYXVkaW9DdXJyZW50VGltZSA9IDAuMDtcblxuICAgIF9lbWJlZGRlZElzUGxheWluZyA9IGZhbHNlO1xuICAgIC8vX2N1cnJlbnRFbWJlZGRlZCA9IHVuZGVmaW5lZDtcblxuICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICBzZWxmLnJlc2V0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb25BdWRpb1Bvc2l0aW9uQ2hhbmdlZChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEVuZCArIDAuMSwgMyk7XG4gIH07XG5cbiAgdGhpcy5vblRUU0VuZCA9IGZ1bmN0aW9uKCkge1xuICAgIGF1ZGlvQ3VycmVudFRpbWUgPSAwLjA7XG5cbiAgICBfdHRzSXNQbGF5aW5nID0gZmFsc2U7XG4gICAgLy9fY3VycmVudFRUUyA9IHVuZGVmaW5lZDtcblxuICAgIC8vICAgICAgICBpZihfc2tpcFRUU0VuZGVkKVxuICAgIC8vICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICBfc2tpcFRUU0VuZGVkID0gZmFsc2U7XG4gICAgLy8gICAgICAgICAgICByZXR1cm47XG4gICAgLy8gICAgICAgIH1cblxuICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICBzZWxmLnJlc2V0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb25BdWRpb1Bvc2l0aW9uQ2hhbmdlZChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuYXVkaW8uY2xpcEVuZCArIDAuMSwgNCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gb25BdWRpb0VuZGVkKCkge1xuXG4gICAgb25QYXVzZSgpO1xuICAgIC8vXG4gICAgLy8gICAgICAgIGlmIChfbGV0UGxheSlcbiAgICAvLyAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgcmV0dXJuO1xuICAgIC8vICAgICAgICB9XG5cbiAgICBpZiAoX3NraXBBdWRpb0VuZGVkKSB7XG4gICAgICBfc2tpcEF1ZGlvRW5kZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IgfHwgIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9uQXVkaW9Qb3NpdGlvbkNoYW5nZWQoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBFbmQgKyAwLjEsIDUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGlnaGxpZ2h0Q3VycmVudEVsZW1lbnQoKSB7XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIudGV4dC5zcmNGcmFnbWVudElkICYmIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyY0ZyYWdtZW50SWQubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5lbGVtZW50KSB7XG4gICAgICAgIC8vY29uc29sZS5lcnJvcihfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuZWxlbWVudC5pZCArIFwiOiBcIiArIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5hdWRpby5jbGlwQmVnaW4gKyBcIiAvIFwiICsgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBFbmQpO1xuXG4gICAgICAgIGlmICghX2VsZW1lbnRIaWdobGlnaHRlci5pc0VsZW1lbnRIaWdobGlnaHRlZChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpKSB7XG4gICAgICAgICAgX2VsZW1lbnRIaWdobGlnaHRlci5oaWdobGlnaHRFbGVtZW50KF9zbWlsSXRlcmF0b3IuY3VycmVudFBhciwgX3BhY2thZ2UubWVkaWFfb3ZlcmxheS5hY3RpdmVDbGFzcywgX3BhY2thZ2UubWVkaWFfb3ZlcmxheS5wbGF5YmFja0FjdGl2ZUNsYXNzKTtcblxuICAgICAgICAgIGlmICghX3dhc1BsYXlpbmdTY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIHJlYWRlci5pbnN1cmVFbGVtZW50VmlzaWJpbGl0eShfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuZ2V0U21pbCgpLnNwaW5lSXRlbUlkLCBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuZWxlbWVudCwgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICB9IGVsc2UgaWYgKF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5jZmkpIHtcblxuICAgICAgICBpZiAoIV9lbGVtZW50SGlnaGxpZ2h0ZXIuaXNDZmlIaWdobGlnaHRlZChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpKSB7XG4gICAgICAgICAgX2VsZW1lbnRIaWdobGlnaHRlci5oaWdobGlnaHRDZmkoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLCBfcGFja2FnZS5tZWRpYV9vdmVybGF5LmFjdGl2ZUNsYXNzLCBfcGFja2FnZS5tZWRpYV9vdmVybGF5LnBsYXliYWNrQWN0aXZlQ2xhc3MpO1xuXG4gICAgICAgICAgaWYgKCFfd2FzUGxheWluZ1Njcm9sbGluZykge1xuICAgICAgICAgICAgcmVhZGVyLmluc3VyZUVsZW1lbnRWaXNpYmlsaXR5KF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5nZXRTbWlsKCkuc3BpbmVJdGVtSWQsIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5jZmkuY2ZpVGV4dFBhcmVudCwgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGJvZHkgKG5vdCBGUkFHIElEKVxuICAgIGlmIChfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIuZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vZWxzZTogc2luZ2xlIFNNSUwgcGVyIG11bHRpcGxlIFhIVE1MPyA9PT4gb3BlbiBuZXcgc3BpbmUgaXRlbVxuXG4gICAgLypcbiAgICAgICAgdmFyIHRleHRSZWxhdGl2ZVJlZiA9IFJlYWRpdW1TREsuSGVscGVycy5SZXNvbHZlQ29udGVudFJlZihfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIudGV4dC5zcmNGaWxlLCBfc21pbEl0ZXJhdG9yLnNtaWwuaHJlZik7XG5jb25zb2xlLmRlYnVnKFwidGV4dFJlbGF0aXZlUmVmOiBcIiArIHRleHRSZWxhdGl2ZVJlZik7XG4gICAgICAgIGlmICh0ZXh0UmVsYXRpdmVSZWYpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB0ZXh0QWJzb2x1dGVSZWYgPSBfcGFja2FnZS5yZXNvbHZlUmVsYXRpdmVVcmwodGV4dFJlbGF0aXZlUmVmKTtcbmNvbnNvbGUuZGVidWcoXCJ0ZXh0QWJzb2x1dGVSZWY6IFwiICsgdGV4dEFic29sdXRlUmVmKTtcbiAgICAgICAgfVxuICAgICAgICAqL1xuXG4gICAgdmFyIHNyYyA9IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci50ZXh0LnNyYztcbiAgICB2YXIgYmFzZSA9IF9zbWlsSXRlcmF0b3Iuc21pbC5ocmVmO1xuXG4gICAgLy9zZWxmLnBhdXNlKCk7XG4gICAgLy9zZWxmLnJlc2V0KCk7XG4gICAgX3NtaWxJdGVyYXRvciA9IHVuZGVmaW5lZDtcblxuICAgIHJlYWRlci5vcGVuQ29udGVudFVybChzcmMsIGJhc2UsIHNlbGYpO1xuICB9XG5cbiAgdGhpcy5lc2NhcGUgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCAhX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG5cbiAgICAgIHRoaXMudG9nZ2xlTWVkaWFPdmVybGF5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFzZWxmLmlzUGxheWluZygpKSB7XG4gICAgICAvL3BsYXlDdXJyZW50UGFyKCk7XG4gICAgICBzZWxmLnBsYXkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoX3NldHRpbmdzLm1lZGlhT3ZlcmxheXNFc2NhcGVFc2NhcGFibGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyO1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LmlzRXNjYXBhYmxlICYmIHBhcmVudC5pc0VzY2FwYWJsZShfc2V0dGluZ3MubWVkaWFPdmVybGF5c0VzY2FwYWJsZXMpKSB7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgX3NtaWxJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgfSB3aGlsZSAoX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyICYmIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhci5oYXNBbmNlc3RvcihwYXJlbnQpKTtcblxuICAgICAgICAgIGlmICghX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICAgICAgICBuZXh0U21pbCh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL19zbWlsSXRlcmF0b3IuZ29Ub1Bhcihfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIpO1xuICAgICAgICAgIHBsYXlDdXJyZW50UGFyKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm5leHRNZWRpYU92ZXJsYXkodHJ1ZSk7XG4gIH07XG5cblxuICB0aGlzLnBsYXlVc2VyUGFyID0gZnVuY3Rpb24ocGFyKSB7XG4gICAgaWYgKHNlbGYuaXNQbGF5aW5nKCkpIHtcbiAgICAgIHNlbGYucGF1c2UoKTtcbiAgICB9XG5cbiAgICBpZiAocGFyLmVsZW1lbnQgfHwgcGFyLmNmaSAmJiBwYXIuY2ZpLmNmaVRleHRQYXJlbnQpIHtcbiAgICAgIHZhciBzZXEgPSBfZWxlbWVudEhpZ2hsaWdodGVyLmFkanVzdFBhclRvU2VxU3luY0dyYW51bGFyaXR5KHBhcik7XG4gICAgICBpZiAoc2VxICYmIHNlcSAhPT0gcGFyKSB7XG4gICAgICAgIHZhciBmaW5kRmlyc3RQYXIgPSBmdW5jdGlvbihzbWlsTm9kZSkge1xuICAgICAgICAgIGlmIChzbWlsTm9kZS5ub2RlVHlwZSAmJiBzbWlsTm9kZS5ub2RlVHlwZSA9PT0gXCJwYXJcIikgcmV0dXJuIHNtaWxOb2RlO1xuXG4gICAgICAgICAgaWYgKCFzbWlsTm9kZS5jaGlsZHJlbiB8fCBzbWlsTm9kZS5jaGlsZHJlbi5sZW5ndGggPD0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc21pbE5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHNtaWxOb2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgdmFyIGluUGFyID0gZmluZEZpcnN0UGFyKGNoaWxkKTtcbiAgICAgICAgICAgIGlmIChpblBhcikgcmV0dXJuIGluUGFyO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGZpcnN0UGFyID0gZmluZEZpcnN0UGFyKHNlcSk7XG4gICAgICAgIGlmIChmaXJzdFBhcikgcGFyID0gZmlyc3RQYXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGxheVBhcihwYXIpO1xuICB9O1xuXG4gIHRoaXMucmVzZXRUVFMgPSBmdW5jdGlvbigpIHtcbiAgICBfY3VycmVudFRUUyA9IHVuZGVmaW5lZDtcbiAgICAvLyAgICAgICAgX3NraXBUVFNFbmRlZCA9IGZhbHNlO1xuICAgIHNwZWFrU3RvcCgpO1xuICB9O1xuXG4gIHRoaXMucmVzZXRCbGFua1BhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoX2JsYW5rUGFnZVBsYXllcikge1xuICAgICAgdmFyIHRpbWVyID0gX2JsYW5rUGFnZVBsYXllcjtcbiAgICAgIF9ibGFua1BhZ2VQbGF5ZXIgPSB1bmRlZmluZWQ7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIH1cbiAgICBfYmxhbmtQYWdlUGxheWVyID0gdW5kZWZpbmVkO1xuXG4gICAgb25TdGF0dXNDaGFuZ2VkKHtcbiAgICAgIGlzUGxheWluZzogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnJlc2V0RW1iZWRkZWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoX2N1cnJlbnRFbWJlZGRlZCkge1xuICAgICAgJChfY3VycmVudEVtYmVkZGVkKS5vZmYoXCJlbmRlZFwiLCBzZWxmLm9uRW1iZWRkZWRFbmQpO1xuICAgICAgX2N1cnJlbnRFbWJlZGRlZC5wYXVzZSgpO1xuICAgIH1cbiAgICBfY3VycmVudEVtYmVkZGVkID0gdW5kZWZpbmVkO1xuICAgIG9uU3RhdHVzQ2hhbmdlZCh7XG4gICAgICBpc1BsYXlpbmc6IGZhbHNlXG4gICAgfSk7XG4gICAgX2VtYmVkZGVkSXNQbGF5aW5nID0gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIGNsaXBCZWdpbk9mZnNldCA9IDAuMDtcbiAgICBfYXVkaW9QbGF5ZXIucmVzZXQoKTtcbiAgICBzZWxmLnJlc2V0VFRTKCk7XG4gICAgc2VsZi5yZXNldEVtYmVkZGVkKCk7XG4gICAgc2VsZi5yZXNldEJsYW5rUGFnZSgpO1xuICAgIF9lbGVtZW50SGlnaGxpZ2h0ZXIucmVzZXQoKTtcbiAgICBfc21pbEl0ZXJhdG9yID0gdW5kZWZpbmVkO1xuICAgIF9za2lwQXVkaW9FbmRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIHRoaXMucGxheSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChfc21pbEl0ZXJhdG9yICYmIF9zbWlsSXRlcmF0b3Iuc21pbCAmJiAhX3NtaWxJdGVyYXRvci5zbWlsLmlkKSB7XG4gICAgICBpbml0QmxhbmtQYWdlUGxheWVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChfY3VycmVudEVtYmVkZGVkKSB7XG4gICAgICBfZW1iZWRkZWRJc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgX2N1cnJlbnRFbWJlZGRlZC5wbGF5KCk7XG4gICAgICBvblN0YXR1c0NoYW5nZWQoe1xuICAgICAgICBpc1BsYXlpbmc6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoX2N1cnJlbnRUVFMpIHtcbiAgICAgIHNwZWFrU3RhcnQodW5kZWZpbmVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFfYXVkaW9QbGF5ZXIucGxheSgpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQXVkaW8gcGxheWVyIHdhcyBkZWFkLCByZWFjdGl2YXRpbmcuLi5cIik7XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLnRvZ2dsZU1lZGlhT3ZlcmxheSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGlnaGxpZ2h0Q3VycmVudEVsZW1lbnQoKTtcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICBfd2FzUGxheWluZ1Njcm9sbGluZyA9IGZhbHNlO1xuXG4gICAgaWYgKF9ibGFua1BhZ2VQbGF5ZXIpIHtcbiAgICAgIHRoaXMucmVzZXRCbGFua1BhZ2UoKTtcbiAgICB9IGVsc2UgaWYgKF9lbWJlZGRlZElzUGxheWluZykge1xuICAgICAgX2VtYmVkZGVkSXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICBpZiAoX2N1cnJlbnRFbWJlZGRlZCkge1xuICAgICAgICBfY3VycmVudEVtYmVkZGVkLnBhdXNlKCk7XG4gICAgICB9XG4gICAgICBvblN0YXR1c0NoYW5nZWQoe1xuICAgICAgICBpc1BsYXlpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKF90dHNJc1BsYXlpbmcpIHtcbiAgICAgIHNwZWFrU3RvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfYXVkaW9QbGF5ZXIucGF1c2UoKTtcbiAgICB9XG5cbiAgICBfZWxlbWVudEhpZ2hsaWdodGVyLnJlc2V0KCk7XG4gIH1cblxuICB0aGlzLmlzTWVkaWFPdmVybGF5QXZhaWxhYmxlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAvLyAgICAgICAgY29uc29sZS5kZWJ1ZyhcImlzTWVkaWFPdmVybGF5QXZhaWxhYmxlKClcIik7XG4gICAgLy9cbiAgICAvLyAgICAgICAgdmFyIG5vdzEgPSB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vdyA/IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSA6IERhdGUubm93KCk7XG4gICAgLy9cbiAgICAvLyAgICAgICAgaWYgKGNvbnNvbGUudGltZSlcbiAgICAvLyAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgY29uc29sZS50aW1lKFwiTU9cIik7XG4gICAgLy8gICAgICAgIH1cblxuICAgIHZhciB2aXNpYmxlTWVkaWFFbGVtZW50ID0gcmVhZGVyLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQoKTtcblxuICAgIC8vICAgICAgICBpZiAoY29uc29sZS50aW1lRW5kKVxuICAgIC8vICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoXCJNT1wiKTtcbiAgICAvLyAgICAgICAgfVxuICAgIC8vXG4gICAgLy8gICAgICAgIHZhciBub3cyID0gd2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cgPyB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOiBEYXRlLm5vdygpO1xuICAgIC8vXG4gICAgLy8gICAgICAgIGNvbnNvbGUuZGVidWcobm93MiAtIG5vdzEpO1xuXG4gICAgcmV0dXJuIHR5cGVvZiB2aXNpYmxlTWVkaWFFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuICB9O1xuXG4gIHRoaXMubmV4dE9yUHJldmlvdXNNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbihwcmV2aW91cykge1xuICAgIGlmIChzZWxmLmlzUGxheWluZygpKSB7XG4gICAgICBzZWxmLnBhdXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChfc21pbEl0ZXJhdG9yICYmIF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgICAvL3BsYXlDdXJyZW50UGFyKCk7XG4gICAgICAgIHNlbGYucGxheSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFfc21pbEl0ZXJhdG9yKSB7XG4gICAgICB0aGlzLnRvZ2dsZU1lZGlhT3ZlcmxheSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbiA9IHByZXZpb3VzID8gRElSRUNUSU9OX01BUksgLSAxIDogX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmF1ZGlvLmNsaXBFbmQgKyAwLjE7XG5cbiAgICBvbkF1ZGlvUG9zaXRpb25DaGFuZ2VkKHBvc2l0aW9uLCA2KTtcbiAgICAvLyBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgIFxuICAgIC8vIH0sIDEpO1xuXG4gICAgLy9zZWxmLnBsYXkoKTtcbiAgICAvL3BsYXlDdXJyZW50UGFyKCk7XG4gIH07XG5cbiAgdGhpcy5uZXh0TWVkaWFPdmVybGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5uZXh0T3JQcmV2aW91c01lZGlhT3ZlcmxheShmYWxzZSk7XG4gIH07XG5cbiAgdGhpcy5wcmV2aW91c01lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubmV4dE9yUHJldmlvdXNNZWRpYU92ZXJsYXkodHJ1ZSk7XG4gIH07XG5cbiAgLypcbiAgdGhpcy5zZXRNZWRpYU92ZXJsYXlTa2lwcGFibGVzID0gZnVuY3Rpb24oaXRlbXMpIHtcblxuICB9O1xuXG4gIHRoaXMuc2V0TWVkaWFPdmVybGF5RXNjYXBhYmxlcyA9IGZ1bmN0aW9uKGl0ZW1zKSB7XG5cbiAgfTtcbiAgKi9cblxuICB0aGlzLm1lZGlhT3ZlcmxheXNPcGVuQ29udGVudFVybCA9IGZ1bmN0aW9uKGNvbnRlbnRSZWZVcmwsIHNvdXJjZUZpbGVIcmVmLCBvZmZzZXQpIHtcbiAgICBjbGlwQmVnaW5PZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICAvL3NlbGYucGF1c2UoKTtcbiAgICAvL3NlbGYucmVzZXQoKTtcbiAgICBfc21pbEl0ZXJhdG9yID0gdW5kZWZpbmVkO1xuXG4gICAgcmVhZGVyLm9wZW5Db250ZW50VXJsKGNvbnRlbnRSZWZVcmwsIHNvdXJjZUZpbGVIcmVmLCBzZWxmKTtcblxuICAgIC8qXG4gICAgaWYgKF9jdXJyZW50UGFnaW5hdGlvbiAmJiBfY3VycmVudFBhZ2luYXRpb24uaXNGaXhlZExheW91dCAmJiBfY3VycmVudFBhZ2luYXRpb24ub3BlblBhZ2VzICYmIF9jdXJyZW50UGFnaW5hdGlvbi5vcGVuUGFnZXMubGVuZ3RoID4gMClcbiAgICB7XG4gICAgICAgIHZhciBjb21iaW5lZFBhdGggPSBSZWFkaXVtU0RLLkhlbHBlcnMuUmVzb2x2ZUNvbnRlbnRSZWYoY29udGVudFJlZlVybCwgc291cmNlRmlsZUhyZWYpO1xuXG4gICAgICAgIHZhciBoYXNoSW5kZXggPSBjb21iaW5lZFBhdGguaW5kZXhPZihcIiNcIik7XG4gICAgICAgIHZhciBocmVmUGFydDtcbiAgICAgICAgdmFyIGVsZW1lbnRJZDtcbiAgICAgICAgaWYoaGFzaEluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGhyZWZQYXJ0ID0gY29tYmluZWRQYXRoLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICAgICAgICAgICAgZWxlbWVudElkID0gY29tYmluZWRQYXRoLnN1YnN0cihoYXNoSW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhyZWZQYXJ0ID0gY29tYmluZWRQYXRoO1xuICAgICAgICAgICAgZWxlbWVudElkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNwaW5lSXRlbSA9IHJlYWRlci5zcGluZS5nZXRJdGVtQnlIcmVmKGhyZWZQYXJ0KTtcbiAgICAgICAgdmFyIHNwaW5lSXRlbUluZGV4ID0gX2N1cnJlbnRQYWdpbmF0aW9uLm9wZW5QYWdlc1swXS5zcGluZUl0ZW1JbmRleDtcblxuICAgICAgICAvL3ZhciBpZHJlZiA9IF9jdXJyZW50UGFnaW5hdGlvbi5vcGVuUGFnZXNbMF0uaWRyZWY7XG4gICAgICAgIC8vc3BpbmVJdGVtLmlkcmVmID09PSBpZHJlZlxuICAgICAgICAvL3ZhciBjdXJyZW50U3BpbmVJdGVtID0gcmVhZGVyLnNwaW5lLmdldEl0ZW1CeUlkKGlkcmVmKTtcbiAgICAgICAgLy9jdXJyZW50U3BpbmVJdGVtID09IHNwaW5lSXRlbVxuICAgICAgICBpZiAoc3BpbmVJdGVtLmluZGV4ID09PSBzcGluZUl0ZW1JbmRleClcbiAgICAgICAge1xuICAgICAgICAgICAgc2VsZi5vblBhZ2VDaGFuZ2VkKHtcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSW5mbzogX2N1cnJlbnRQYWdpbmF0aW9uLFxuICAgICAgICAgICAgICAgIGVsZW1lbnRJZDogZWxlbWVudElkLFxuICAgICAgICAgICAgICAgIGluaXRpYXRvcjogc2VsZlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKi9cbiAgfTtcblxuICB0aGlzLnRvZ2dsZU1lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLmlzUGxheWluZygpKSB7XG4gICAgICBzZWxmLnBhdXNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy9pZiB3ZSBoYXZlIHBvc2l0aW9uIHRvIGNvbnRpbnVlIGZyb20gKHJlc2V0IHdhc24ndCBjYWxsZWQpXG4gICAgaWYgKF9zbWlsSXRlcmF0b3IpIHtcbiAgICAgIHNlbGYucGxheSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudG9nZ2xlTWVkaWFPdmVybGF5UmVmcmVzaCh1bmRlZmluZWQpO1xuICB9O1xuXG4gIHZhciBfd2FzUGxheWluZ1Njcm9sbGluZyA9IGZhbHNlO1xuXG4gIHRoaXMudG9nZ2xlTWVkaWFPdmVybGF5UmVmcmVzaCA9IGZ1bmN0aW9uKHBhZ2luYXRpb25EYXRhKSB7XG4gICAgLy9jb25zb2xlLmRlYnVnKFwibW9EYXRhIFNNSUw6IFwiICsgbW9EYXRhLnBhci5nZXRTbWlsKCkuaHJlZiArIFwiIC8vIFwiICsgKyBtb0RhdGEucGFyLmdldFNtaWwoKS5pZCk7XG5cbiAgICB2YXIgc3BpbmVJdGVtcyA9IHJlYWRlci5nZXRMb2FkZWRTcGluZUl0ZW1zKCk7XG5cbiAgICAvL3BhZ2luYXRpb25EYXRhLmlzUmlnaHRUb0xlZnRcbiAgICB2YXIgcnRsID0gcmVhZGVyLnNwaW5lKCkuaXNSaWdodFRvTGVmdCgpO1xuXG4gICAgLy9wYWdpbmF0aW9uRGF0YS5zcGluZUl0ZW1Db3VudFxuICAgIC8vcGFnaW5hdGlvbkRhdGEub3BlblBhZ2VzXG4gICAgLy97c3BpbmVJdGVtUGFnZUluZGV4OiAsIHNwaW5lSXRlbVBhZ2VDb3VudDogLCBpZHJlZjogLCBzcGluZUl0ZW1JbmRleDogfVxuXG4gICAgdmFyIHBsYXlpbmdQYXIgPSB1bmRlZmluZWQ7XG4gICAgdmFyIHdhc1BsYXlpbmcgPSBzZWxmLmlzUGxheWluZygpO1xuICAgIGlmICh3YXNQbGF5aW5nICYmIF9zbWlsSXRlcmF0b3IpIHtcbiAgICAgIHZhciBpc1Njcm9sbFZpZXcgPSBwYWdpbmF0aW9uRGF0YS5pbml0aWF0b3IgJiYgcGFnaW5hdGlvbkRhdGEuaW5pdGlhdG9yIGluc3RhbmNlb2YgU2Nyb2xsVmlldztcbiAgICAgIGlmIChpc1Njcm9sbFZpZXcgJiYgX3NldHRpbmdzLm1lZGlhT3ZlcmxheXNQcmVzZXJ2ZVBsYXliYWNrV2hlblNjcm9sbCkge1xuICAgICAgICBfd2FzUGxheWluZ1Njcm9sbGluZyA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGxheWluZ1BhciA9IF9zbWlsSXRlcmF0b3IuY3VycmVudFBhcjtcbiAgICAgIHNlbGYucGF1c2UoKTtcbiAgICB9XG5cbiAgICBfd2FzUGxheWluZ1Njcm9sbGluZyA9IGZhbHNlO1xuXG4gICAgLy9wYWdpbmF0aW9uRGF0YSAmJiBwYWdpbmF0aW9uRGF0YS5lbGVtZW50SWRcbiAgICAvL3BhZ2luYXRpb25EYXRhLmluaXRpYXRvciAhPSBzZWxmXG5cbiAgICAvL19wYWNrYWdlLmlzRml4ZWRMYXlvdXQoKVxuXG4gICAgdmFyIGVsZW1lbnQgPSAocGFnaW5hdGlvbkRhdGEgJiYgcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkUmVzb2x2ZWQpID8gcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkUmVzb2x2ZWQgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgaWQgPSAocGFnaW5hdGlvbkRhdGEgJiYgcGFnaW5hdGlvbkRhdGEuZWxlbWVudElkKSA/IHBhZ2luYXRpb25EYXRhLmVsZW1lbnRJZCA6IHVuZGVmaW5lZDtcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV0FSTl0gaWQgZGlkIG5vdCByZXNvbHZlIHRvIGVsZW1lbnQ/XCIpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gKHJ0bCA/IChzcGluZUl0ZW1zLmxlbmd0aCAtIDEpIDogMCk7XG4gICAgICAgIChydGwgJiYgaSA+PSAwKSB8fCAoIXJ0bCAmJiBpIDwgc3BpbmVJdGVtcy5sZW5ndGgpOyBpICs9IChydGwgPyAtMSA6IDEpKSB7XG4gICAgICAgIHZhciBzcGluZUl0ZW0gPSBzcGluZUl0ZW1zW2ldO1xuICAgICAgICBpZiAoIXNwaW5lSXRlbSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZUl0ZW1zW2ldIGlzIHVuZGVmaW5lZD8/XCIpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhZ2luYXRpb25EYXRhICYmIHBhZ2luYXRpb25EYXRhLnNwaW5lSXRlbSAmJiBwYWdpbmF0aW9uRGF0YS5zcGluZUl0ZW0gIT0gc3BpbmVJdGVtKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICB2YXIgJGVsZW1lbnQgPSByZWFkZXIuZ2V0RWxlbWVudEJ5SWQoc3BpbmVJdGVtLCBpZCk7XG4gICAgICAgICAgLy92YXIgJGVsZW1lbnQgPSByZWFkZXIuZ2V0RWxlbWVudChzcGluZUl0ZW0sIFwiI1wiICsgUmVhZGl1bVNESy5IZWxwZXJzLmVzY2FwZUpRdWVyeVNlbGVjdG9yKGlkKSk7XG4gICAgICAgICAgZWxlbWVudCA9ICgkZWxlbWVudCAmJiAkZWxlbWVudC5sZW5ndGggPiAwKSA/ICRlbGVtZW50WzBdIDogdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2UgaWYgKHNwaW5lSXRlbS5pc0ZpeGVkTGF5b3V0KCkpIHtcbiAgICAgICAgICBpZiAocGFnaW5hdGlvbkRhdGEgJiYgcGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8gJiYgcGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzKSB7XG4gICAgICAgICAgICAvLyBvcGVuUGFnZXMgYXJlIHNvcnRlZCBieSBzcGluZUl0ZW0gaW5kZXgsIHNvIHRoZSBzbWFsbGVzdCBpbmRleCBvbiBkaXNwbGF5IGlzIHRoZSBvbmUgd2UgbmVlZCB0byBwbGF5IChwYWdlIG9uIHRoZSBsZWZ0IGluIExUUiwgb3IgcGFnZSBvbiB0aGUgcmlnaHQgaW4gUlRMIHByb2dyZXNzaW9uKVxuICAgICAgICAgICAgdmFyIGluZGV4ID0gMDsgLy8gIXBhZ2luYXRpb25EYXRhLnBhZ2luYXRpb25JbmZvLmlzUmlnaHRUb0xlZnQgPyAwIDogcGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgIGlmIChwYWdpbmF0aW9uRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXNbaW5kZXhdICYmIHBhZ2luYXRpb25EYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlc1tpbmRleF0uaWRyZWYgJiYgcGFnaW5hdGlvbkRhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzW2luZGV4XS5pZHJlZiA9PT0gc3BpbmVJdGVtLmlkcmVmKSB7XG4gICAgICAgICAgICAgIHZhciAkZWxlbWVudCA9IHJlYWRlci5nZXRFbGVtZW50KHNwaW5lSXRlbSwgXCJib2R5XCIpO1xuICAgICAgICAgICAgICBlbGVtZW50ID0gKCRlbGVtZW50ICYmICRlbGVtZW50Lmxlbmd0aCA+IDApID8gJGVsZW1lbnRbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgZWxlbWVudCA9IHJlYWRlci5nZXRGaXJzdFZpc2libGVNZWRpYU92ZXJsYXlFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICBzZWxmLnJlc2V0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG1vRGF0YSA9ICQoZWxlbWVudCkuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIik7XG5cbiAgICBpZiAoIW1vRGF0YSkge1xuICAgICAgdmFyIGZvdW5kTWUgPSBmYWxzZTtcbiAgICAgIHZhciBkZXB0aEZpcnN0VHJhdmVyc2FsID0gZnVuY3Rpb24oZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKCFlbGVtZW50cykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gZWxlbWVudHNbaV0pIGZvdW5kTWUgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKGZvdW5kTWUpIHtcbiAgICAgICAgICAgIHZhciBkID0gJChlbGVtZW50c1tpXSkuZGF0YShcIm1lZGlhT3ZlcmxheURhdGFcIik7XG4gICAgICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgICBtb0RhdGEgPSBkO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZm91bmQgPSBkZXB0aEZpcnN0VHJhdmVyc2FsKGVsZW1lbnRzW2ldLmNoaWxkcmVuKTtcbiAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJvb3QgPSBlbGVtZW50O1xuICAgICAgd2hpbGUgKHJvb3QgJiYgcm9vdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcImJvZHlcIikge1xuICAgICAgICByb290ID0gcm9vdC5wYXJlbnROb2RlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRlcHRoRmlyc3RUcmF2ZXJzYWwoW3Jvb3RdKTtcbiAgICB9XG5cbiAgICBpZiAoIW1vRGF0YSkge1xuICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB6UGFyID0gbW9EYXRhLnBhciA/IG1vRGF0YS5wYXIgOiBtb0RhdGEucGFyc1swXTtcbiAgICB2YXIgcGFyU21pbCA9IHpQYXIuZ2V0U21pbCgpO1xuICAgIGlmICghX3NtaWxJdGVyYXRvciB8fCBfc21pbEl0ZXJhdG9yLnNtaWwgIT0gcGFyU21pbCkge1xuICAgICAgX3NtaWxJdGVyYXRvciA9IG5ldyBTbWlsSXRlcmF0b3IocGFyU21pbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9zbWlsSXRlcmF0b3IucmVzZXQoKTtcbiAgICB9XG5cbiAgICBfc21pbEl0ZXJhdG9yLmdvVG9QYXIoelBhcik7XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhciAmJiBpZCkge1xuICAgICAgX3NtaWxJdGVyYXRvci5yZXNldCgpO1xuICAgICAgX3NtaWxJdGVyYXRvci5maW5kVGV4dElkKGlkKTtcbiAgICB9XG5cbiAgICBpZiAoIV9zbWlsSXRlcmF0b3IuY3VycmVudFBhcikge1xuICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh3YXNQbGF5aW5nICYmIHBsYXlpbmdQYXIgJiYgcGxheWluZ1BhciA9PT0gX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyKSB7XG4gICAgICBzZWxmLnBsYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGxheUN1cnJlbnRQYXIoKTtcbiAgICAgIC8vcGxheVBhcih6UGFyKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5pc1BsYXlpbmdDZmkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3NtaWxJdGVyYXRvciAmJiBfc21pbEl0ZXJhdG9yLmN1cnJlbnRQYXIgJiYgX3NtaWxJdGVyYXRvci5jdXJyZW50UGFyLmNmaTtcbiAgfTtcblxuICB2YXIgX3dhc1BhdXNlZEJlY2F1c2VOb0F1dG9OZXh0U21pbCA9IGZhbHNlO1xuICB2YXIgX2F1dG9OZXh0U21pbCA9IHRydWU7XG4gIHRoaXMuc2V0QXV0b21hdGljTmV4dFNtaWwgPSBmdW5jdGlvbihhdXRvTmV4dCkge1xuICAgIF9hdXRvTmV4dFNtaWwgPSBhdXRvTmV4dDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWVkaWFPdmVybGF5UGxheWVyXG4iLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxudmFyIENmaU5hdmlnYXRpb25Mb2dpYyA9IHJlcXVpcmUoJy4vY2ZpLW5hdmlnYXRpb24tbG9naWMnKVxudmFyIENTU1RyYW5zaXRpb24gPSByZXF1aXJlKCcuLi9oZWxwZXJzL2Nzcy10cmFuc2l0aW9uJylcbnZhciBDU1NUcmFuc2Zvcm1TdHJpbmcgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2Nzcy10cmFuc2Zvcm0tc3RyaW5nJylcbnZhciBpc0lGcmFtZUFsaXZlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pcy1pZnJhbWUtYWxpdmUnKVxudmFyIGxvYWRUZW1wbGF0ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbG9hZC10ZW1wbGF0ZScpXG52YXIgc2V0U3R5bGVzID0gcmVxdWlyZSgnLi4vaGVscGVycy9zZXQtc3R5bGVzJylcbnZhciBVcGRhdGVIdG1sRm9udFNpemUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3VwZGF0ZS1odG1sLWZvbnQtc2l6ZScpXG52YXIgVmlld2VyU2V0dGluZ3MgPSByZXF1aXJlKCcuLi9tb2RlbHMvdmlld2VyLXNldHRpbmdzJylcblxuLyoqXG4gKiBSZW5kZXJzIG9uZSBwYWdlIG9mIGZpeGVkIGxheW91dCBzcHJlYWRcbiAqXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQHBhcmFtIGNsYXNzZXNcbiAqIEBwYXJhbSBlbmFibGVCb29rU3R5bGVPdmVycmlkZXNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBPbmVQYWdlVmlldyhvcHRpb25zLCBjbGFzc2VzLCBlbmFibGVCb29rU3R5bGVPdmVycmlkZXMsIHJlYWRlcikge1xuXG4gIF8uZXh0ZW5kKHRoaXMsIEJhY2tib25lLkV2ZW50cyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBfJGVwdWJIdG1sO1xuICB2YXIgXyRlbDtcbiAgdmFyIF8kaWZyYW1lO1xuICB2YXIgX2N1cnJlbnRTcGluZUl0ZW07XG4gIHZhciBfc3BpbmUgPSBvcHRpb25zLnNwaW5lO1xuICB2YXIgX2lmcmFtZUxvYWRlciA9IG9wdGlvbnMuaWZyYW1lTG9hZGVyO1xuICB2YXIgX2Jvb2tTdHlsZXMgPSBvcHRpb25zLmJvb2tTdHlsZXM7XG5cbiAgdmFyIF8kdmlld3BvcnQgPSBvcHRpb25zLiR2aWV3cG9ydDtcblxuICB2YXIgX2lzSWZyYW1lTG9hZGVkID0gZmFsc2U7XG5cbiAgdmFyIF8kc2NhbGVyO1xuXG4gIHZhciBQYWdlVHJhbnNpdGlvbkhhbmRsZXIgPSBmdW5jdGlvbihvcHRzKSB7XG4gICAgdmFyIFBhZ2VUcmFuc2l0aW9uID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgdGhpcy5iZWdpbiA9IGJlZ2luO1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfTtcblxuICAgIHZhciBfcGFnZVRyYW5zaXRpb25fT1BBQ0lUWSA9IG5ldyBQYWdlVHJhbnNpdGlvbihcbiAgICAgIGZ1bmN0aW9uKHNjYWxlLCBsZWZ0LCB0b3AsICRlbCwgbWV0YV93aWR0aCwgbWV0YV9oZWlnaHQsIHBhZ2VTd2l0Y2hEaXIpIHtcbiAgICAgICAgJGVsLmNzcyhcIm9wYWNpdHlcIiwgXCIwXCIpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKHNjYWxlLCBsZWZ0LCB0b3AsICRlbCwgbWV0YV93aWR0aCwgbWV0YV9oZWlnaHQsIHBhZ2VTd2l0Y2hEaXIpIHtcbiAgICAgICAgJGVsLmNzcyhcInRyYW5zZm9ybVwiLCBcIm5vbmVcIik7XG5cbiAgICAgICAgQ1NTVHJhbnNpdGlvbigkZWwsIFwib3BhY2l0eSAxNTBtcyBlYXNlLW91dFwiKTtcblxuICAgICAgICAkZWwuY3NzKFwib3BhY2l0eVwiLCBcIjFcIik7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHZhciBfcGFnZVRyYW5zaXRpb25fVFJBTlNMQVRFID0gbmV3IFBhZ2VUcmFuc2l0aW9uKFxuICAgICAgZnVuY3Rpb24oc2NhbGUsIGxlZnQsIHRvcCwgJGVsLCBtZXRhX3dpZHRoLCBtZXRhX2hlaWdodCwgcGFnZVN3aXRjaERpcikge1xuICAgICAgICAkZWwuY3NzKFwib3BhY2l0eVwiLCBcIjBcIik7XG5cbiAgICAgICAgdmFyIGVsV2lkdGggPSBNYXRoLmNlaWwobWV0YV93aWR0aCAqIHNjYWxlKTtcblxuICAgICAgICB2YXIgaW5pdGlhbExlZnQgPSBlbFdpZHRoICogMC44ICogKHBhZ2VTd2l0Y2hEaXIgPT09IDIgPyAxIDogLTEpO1xuICAgICAgICB2YXIgbW92ZSA9IENTU1RyYW5zZm9ybVN0cmluZyh7XG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChpbml0aWFsTGVmdCksXG4gICAgICAgICAgb3JpZ2luOiBcIjUwJSA1MCUgMFwiLFxuICAgICAgICAgIGVuYWJsZTNEOiBfZW5hYmxlM0RcbiAgICAgICAgfSk7XG4gICAgICAgICRlbC5jc3MobW92ZSk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oc2NhbGUsIGxlZnQsIHRvcCwgJGVsLCBtZXRhX3dpZHRoLCBtZXRhX2hlaWdodCwgcGFnZVN3aXRjaERpcikge1xuICAgICAgICAkZWwuY3NzKFwib3BhY2l0eVwiLCBcIjFcIik7XG5cbiAgICAgICAgQ1NTVHJhbnNpdGlvbigkZWwsIFwidHJhbnNmb3JtIDE1MG1zIGVhc2Utb3V0XCIpO1xuXG4gICAgICAgICRlbC5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJub25lXCIpO1xuICAgICAgfVxuICAgICk7XG5cbiAgICB2YXIgX3BhZ2VUcmFuc2l0aW9uX1JPVEFURSA9IG5ldyBQYWdlVHJhbnNpdGlvbihcbiAgICAgIGZ1bmN0aW9uKHNjYWxlLCBsZWZ0LCB0b3AsICRlbCwgbWV0YV93aWR0aCwgbWV0YV9oZWlnaHQsIHBhZ2VTd2l0Y2hEaXIpIHtcbiAgICAgICAgJGVsLmNzcyhcIm9wYWNpdHlcIiwgXCIwXCIpO1xuXG4gICAgICAgIHZhciBlbFdpZHRoID0gTWF0aC5jZWlsKG1ldGFfd2lkdGggKiBzY2FsZSk7XG5cbiAgICAgICAgdmFyIGluaXRpYWxMZWZ0ID0gZWxXaWR0aCAqIDEuNyAqIChwYWdlU3dpdGNoRGlyID09PSAyID8gMSA6IC0xKTtcbiAgICAgICAgdmFyIHRyYW5zID0gQ1NTVHJhbnNmb3JtU3RyaW5nKHtcbiAgICAgICAgICBsZWZ0OiBNYXRoLnJvdW5kKGluaXRpYWxMZWZ0KSxcbiAgICAgICAgICBhbmdsZTogKHBhZ2VTd2l0Y2hEaXIgPT09IDIgPyAtMSA6IDEpICogMzAsXG4gICAgICAgICAgb3JpZ2luOiBcIjUwJSA1MCUgMFwiLFxuICAgICAgICAgIGVuYWJsZTNEOiBfZW5hYmxlM0RcbiAgICAgICAgfSk7IC8vKHBhZ2VTd2l0Y2hEaXIgPT09IDIgPyAnMCUgMCUnIDogJzEwMCUgMCUnKVxuICAgICAgICAkZWwuY3NzKHRyYW5zKTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbihzY2FsZSwgbGVmdCwgdG9wLCAkZWwsIG1ldGFfd2lkdGgsIG1ldGFfaGVpZ2h0LCBwYWdlU3dpdGNoRGlyKSB7XG4gICAgICAgICRlbC5jc3MoXCJvcGFjaXR5XCIsIFwiMVwiKTtcblxuICAgICAgICBDU1NUcmFuc2l0aW9uKCRlbCwgXCJ0cmFuc2Zvcm0gMzAwbXMgZWFzZS1pbi1vdXRcIik7XG5cbiAgICAgICAgJGVsLmNzcyhcInRyYW5zZm9ybVwiLCBcIm5vbmVcIik7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHZhciBfcGFnZVRyYW5zaXRpb25fU1dJTkcgPSBuZXcgUGFnZVRyYW5zaXRpb24oXG4gICAgICBmdW5jdGlvbihzY2FsZSwgbGVmdCwgdG9wLCAkZWwsIG1ldGFfd2lkdGgsIG1ldGFfaGVpZ2h0LCBwYWdlU3dpdGNoRGlyKSB7XG4gICAgICAgICRlbC5jc3MoXCJvcGFjaXR5XCIsIFwiMFwiKTtcblxuICAgICAgICAvLyBTVVBFUiBIQUNLWSEhIChqdXN0IGZvciBkZW1vKVxuICAgICAgICB2YXIgaXNMZWZ0ID0gZmFsc2U7XG4gICAgICAgIHZhciBpc0NlbnRlciA9IGZhbHNlO1xuICAgICAgICB2YXIgaXNSaWdodCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgYyA9IGNsYXNzZXNbaV0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAoYy5pbmRleE9mKFwibGVmdFwiKSA+PSAwKSB7XG4gICAgICAgICAgICBpc0xlZnQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjLmluZGV4T2YoXCJyaWdodFwiKSA+PSAwKSB7XG4gICAgICAgICAgICBpc1JpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYy5pbmRleE9mKFwiY2VudGVyXCIpID49IDApIHtcbiAgICAgICAgICAgIGlzQ2VudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbFdpZHRoID0gTWF0aC5jZWlsKG1ldGFfd2lkdGggKiBzY2FsZSk7XG5cbiAgICAgICAgdmFyIGluaXRpYWxMZWZ0ID0gZWxXaWR0aCAqIDAuNSAqICgoaXNMZWZ0IHx8IGlzQ2VudGVyICYmIHBhZ2VTd2l0Y2hEaXIgPT09IDEpID8gMSA6IC0xKTtcbiAgICAgICAgdmFyIHRyYW5zID0gQ1NTVHJhbnNmb3JtU3RyaW5nKHtcbiAgICAgICAgICBzY2FsZTogMC4yLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQoaW5pdGlhbExlZnQpLFxuICAgICAgICAgIGFuZ2xlOiAoKGlzTGVmdCB8fCBpc0NlbnRlciAmJiBwYWdlU3dpdGNoRGlyID09PSAxKSA/IDEgOiAtMSkgKiAzMCxcbiAgICAgICAgICBvcmlnaW46ICc1MCUgNTAlIDAnLFxuICAgICAgICAgIGVuYWJsZTNEOiBfZW5hYmxlM0RcbiAgICAgICAgfSk7XG4gICAgICAgICRlbC5jc3ModHJhbnMpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKHNjYWxlLCBsZWZ0LCB0b3AsICRlbCwgbWV0YV93aWR0aCwgbWV0YV9oZWlnaHQsIHBhZ2VTd2l0Y2hEaXIpIHtcbiAgICAgICAgJGVsLmNzcyhcIm9wYWNpdHlcIiwgXCIxXCIpO1xuXG4gICAgICAgIENTU1RyYW5zaXRpb24oJGVsLCBcInRyYW5zZm9ybSA0MDBtcyBlYXNlLW91dFwiKTtcblxuICAgICAgICAkZWwuY3NzKFwidHJhbnNmb3JtXCIsIFwibm9uZVwiKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdmFyIF9wYWdlVHJhbnNpdGlvbnMgPSBbXTtcbiAgICBfcGFnZVRyYW5zaXRpb25zLnB1c2goX3BhZ2VUcmFuc2l0aW9uX09QQUNJVFkpOyAvLyAwXG4gICAgX3BhZ2VUcmFuc2l0aW9ucy5wdXNoKF9wYWdlVHJhbnNpdGlvbl9UUkFOU0xBVEUpOyAvLyAxXG4gICAgX3BhZ2VUcmFuc2l0aW9ucy5wdXNoKF9wYWdlVHJhbnNpdGlvbl9ST1RBVEUpOyAvLyAyXG4gICAgX3BhZ2VUcmFuc2l0aW9ucy5wdXNoKF9wYWdlVHJhbnNpdGlvbl9TV0lORyk7IC8vIDNcblxuICAgIHZhciBfZGlzYWJsZVBhZ2VUcmFuc2l0aW9ucyA9IG9wdHMuZGlzYWJsZVBhZ2VUcmFuc2l0aW9ucyB8fCBmYWxzZTtcblxuICAgIHZhciBfcGFnZVRyYW5zaXRpb24gPSAtMTtcblxuICAgIHZhciBfZW5hYmxlM0QgPSBuZXcgVmlld2VyU2V0dGluZ3Moe30pLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0Q7XG5cbiAgICB2YXIgX3ZpZXdlclNldHRpbmdzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudXBkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uKG8pIHtcbiAgICAgIF92aWV3ZXJTZXR0aW5ncyA9IG87XG5cbiAgICAgIHZhciBzZXR0aW5ncyA9IF92aWV3ZXJTZXR0aW5ncztcbiAgICAgIGlmICghc2V0dGluZ3MgfHwgdHlwZW9mIHNldHRpbmdzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgLy9kZWZhdWx0c1xuICAgICAgICBzZXR0aW5ncyA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCkge1xuICAgICAgICBfZW5hYmxlM0QgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoby5wYWdlVHJhbnNpdGlvbiAhPT0gbnVsbCAmJiB0eXBlb2Ygby5wYWdlVHJhbnNpdGlvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBfcGFnZVRyYW5zaXRpb24gPSBvLnBhZ2VUcmFuc2l0aW9uO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy51cGRhdGVPcHRpb25zKG9wdHMpO1xuXG4gICAgdmFyIF9wYWdlU3dpdGNoRGlyID0gMDtcbiAgICB2YXIgX3BhZ2VTd2l0Y2hBY3R1YWxseUNoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgX3BhZ2VTd2l0Y2hBY3R1YWxseUNoYW5nZWRfSUZSQU1FX0xPQUQgPSBmYWxzZTtcblxuICAgIC8vIGRpcjogMCA9PiBuZXcgb3Igc2FtZSBwYWdlLCAxID0+IHByZXZpb3VzLCAyID0+IG5leHRcbiAgICB0aGlzLnVwZGF0ZVBhZ2VTd2l0Y2hEaXIgPSBmdW5jdGlvbihkaXIsIGhhc0NoYW5nZWQpIHtcbiAgICAgIGlmIChfcGFnZVN3aXRjaEFjdHVhbGx5Q2hhbmdlZF9JRlJBTUVfTE9BRCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9wYWdlU3dpdGNoRGlyID0gZGlyO1xuICAgICAgX3BhZ2VTd2l0Y2hBY3R1YWxseUNoYW5nZWQgPSBoYXNDaGFuZ2VkO1xuICAgIH07XG5cbiAgICB0aGlzLm9uSUZyYW1lTG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgX3BhZ2VTd2l0Y2hBY3R1YWxseUNoYW5nZWRfSUZSQU1FX0xPQUQgPSB0cnVlOyAvLyBzZWNvbmQgcGFzcywgYnV0IGluaXRpYWwgZGlzcGxheSBmb3IgdHJhbnNpdGlvblxuICAgIH07XG5cbiAgICB0aGlzLnRyYW5zZm9ybUNvbnRlbnRJbW1lZGlhdGVfQkVHSU4gPSBmdW5jdGlvbigkZWwsIHNjYWxlLCBsZWZ0LCB0b3ApIHtcbiAgICAgIHZhciBwYWdlU3dpdGNoQWN0dWFsbHlDaGFuZ2VkID0gX3BhZ2VTd2l0Y2hBY3R1YWxseUNoYW5nZWQgfHwgX3BhZ2VTd2l0Y2hBY3R1YWxseUNoYW5nZWRfSUZSQU1FX0xPQUQ7XG4gICAgICBfcGFnZVN3aXRjaEFjdHVhbGx5Q2hhbmdlZF9JRlJBTUVfTE9BRCA9IGZhbHNlO1xuXG4gICAgICBpZiAoX2Rpc2FibGVQYWdlVHJhbnNpdGlvbnMgfHwgX3BhZ2VUcmFuc2l0aW9uID09PSAtMSkgcmV0dXJuO1xuXG4gICAgICBDU1NUcmFuc2l0aW9uKCRlbCwgXCJhbGwgMCBlYXNlIDBcIik7XG5cbiAgICAgIGlmICghcGFnZVN3aXRjaEFjdHVhbGx5Q2hhbmdlZCkgcmV0dXJuO1xuXG4gICAgICB2YXIgcGFnZVRyYW5zaXRpb24gPSAoX3BhZ2VUcmFuc2l0aW9uID49IDAgJiYgX3BhZ2VUcmFuc2l0aW9uIDwgX3BhZ2VUcmFuc2l0aW9ucy5sZW5ndGgpID8gX3BhZ2VUcmFuc2l0aW9uc1tfcGFnZVRyYW5zaXRpb25dIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoX3BhZ2VTd2l0Y2hEaXIgPT09IDAgfHwgIXBhZ2VUcmFuc2l0aW9uKSB7XG4gICAgICAgICRlbC5jc3MoXCJvcGFjaXR5XCIsIFwiMFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2VUcmFuc2l0aW9uLmJlZ2luKHNjYWxlLCBsZWZ0LCB0b3AsICRlbCwgc2VsZi5tZXRhX3dpZHRoKCksIHNlbGYubWV0YV9oZWlnaHQoKSwgX3BhZ2VTd2l0Y2hEaXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnRyYW5zZm9ybUNvbnRlbnRJbW1lZGlhdGVfRU5EID0gZnVuY3Rpb24oJGVsLCBzY2FsZSwgbGVmdCwgdG9wKSB7XG4gICAgICBpZiAoX2Rpc2FibGVQYWdlVHJhbnNpdGlvbnMgfHwgX3BhZ2VUcmFuc2l0aW9uID09PSAtMSkge1xuICAgICAgICAkZWwuY3NzKFwidHJhbnNmb3JtXCIsIFwibm9uZVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFnZVRyYW5zaXRpb24gPSAoX3BhZ2VUcmFuc2l0aW9uID49IDAgJiYgX3BhZ2VUcmFuc2l0aW9uIDwgX3BhZ2VUcmFuc2l0aW9ucy5sZW5ndGgpID8gX3BhZ2VUcmFuc2l0aW9uc1tfcGFnZVRyYW5zaXRpb25dIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChfcGFnZVN3aXRjaERpciA9PT0gMCB8fCAhcGFnZVRyYW5zaXRpb24pIHtcbiAgICAgICAgICAkZWwuY3NzKFwidHJhbnNmb3JtXCIsIFwibm9uZVwiKTtcblxuICAgICAgICAgIENTU1RyYW5zaXRpb24oJGVsLCBcIm9wYWNpdHkgMjUwbXMgbGluZWFyXCIpO1xuXG4gICAgICAgICAgJGVsLmNzcyhcIm9wYWNpdHlcIiwgXCIxXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZ2VUcmFuc2l0aW9uLmVuZChzY2FsZSwgbGVmdCwgdG9wLCAkZWwsIHNlbGYubWV0YV93aWR0aCgpLCBzZWxmLm1ldGFfaGVpZ2h0KCksIF9wYWdlU3dpdGNoRGlyKTtcbiAgICAgICAgfVxuXG4gICAgICB9LCAxMCk7XG4gICAgfTtcbiAgfTtcbiAgdmFyIF9wYWdlVHJhbnNpdGlvbkhhbmRsZXIgPSBuZXcgUGFnZVRyYW5zaXRpb25IYW5kbGVyKG9wdGlvbnMpO1xuXG5cbiAgLy8gZml4ZWQgbGF5b3V0IGRvZXMgbm90IGFwcGx5IHVzZXIgc3R5bGVzIHRvIHB1Ymxpc2hlciBjb250ZW50LCBidXQgcmVmbG93YWJsZSBzY3JvbGwgdmlldyBkb2VzXG4gIHZhciBfZW5hYmxlQm9va1N0eWxlT3ZlcnJpZGVzID0gZW5hYmxlQm9va1N0eWxlT3ZlcnJpZGVzIHx8IGZhbHNlO1xuXG4gIHZhciBfbWV0YV9zaXplID0ge1xuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9O1xuXG4gIHRoaXMuZWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfJGVsO1xuICB9O1xuXG4gIHRoaXMubWV0YV9oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX21ldGFfc2l6ZS5oZWlnaHQ7XG4gIH07XG5cbiAgdGhpcy5tZXRhX3dpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9tZXRhX3NpemUud2lkdGg7XG4gIH07XG5cbiAgdGhpcy5pc0Rpc3BsYXlpbmcgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiBfaXNJZnJhbWVMb2FkZWQ7XG4gIH07XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciB0ZW1wbGF0ZSA9IGxvYWRUZW1wbGF0ZShcInNpbmdsZV9wYWdlX2ZyYW1lXCIsIHt9KTtcblxuICAgIF8kZWwgPSAkKHRlbXBsYXRlKTtcblxuICAgIF8kc2NhbGVyID0gJChcIiNzY2FsZXJcIiwgXyRlbCk7XG5cbiAgICBDU1NUcmFuc2l0aW9uKF8kZWwsIFwiYWxsIDAgZWFzZSAwXCIpO1xuXG4gICAgXyRlbC5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIHNldHRpbmdzID0gcmVhZGVyLnZpZXdlclNldHRpbmdzKCk7XG4gICAgaWYgKCFzZXR0aW5ncyB8fCB0eXBlb2Ygc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgLy9kZWZhdWx0c1xuICAgICAgc2V0dGluZ3MgPSBuZXcgVmlld2VyU2V0dGluZ3Moe30pO1xuICAgIH1cbiAgICBpZiAoc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCkge1xuXG4gICAgICAvLyBUaGlzIGZpeGVzIHJlbmRlcmluZyBpc3N1ZXMgd2l0aCBXZWJWaWV3IChuYXRpdmUgYXBwcyksIHdoaWNoIGNyb3BzIGNvbnRlbnQgZW1iZWRkZWQgaW4gaWZyYW1lcyB1bmxlc3MgR1BVIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiBpcyBlbmFibGVkIGZvciBDU1MgcmVuZGVyaW5nLlxuICAgICAgXyRlbC5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVaKDApXCIpO1xuICAgIH1cblxuICAgIF8kZWwuY3NzKFwiaGVpZ2h0XCIsIFwiMTAwJVwiKTtcbiAgICBfJGVsLmNzcyhcIndpZHRoXCIsIFwiMTAwJVwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IGNsYXNzZXMubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgXyRlbC5hZGRDbGFzcyhjbGFzc2VzW2ldKTtcbiAgICB9XG5cbiAgICBfJGlmcmFtZSA9ICQoXCJpZnJhbWVcIiwgXyRlbCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIHRoaXMuZGVjb3JhdGVJZnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIV8kaWZyYW1lIHx8ICFfJGlmcmFtZS5sZW5ndGgpIHJldHVybjtcblxuICAgIF8kaWZyYW1lLmNzcyhcImJvcmRlci1ib3R0b21cIiwgXCIxcHggZGFzaGVkIHNpbHZlclwiKTtcbiAgICBfJGlmcmFtZS5jc3MoXCJib3JkZXItdG9wXCIsIFwiMXB4IGRhc2hlZCBzaWx2ZXJcIik7XG4gIH1cblxuICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIF9pc0lmcmFtZUxvYWRlZCA9IGZhbHNlO1xuICAgIF9jdXJyZW50U3BpbmVJdGVtID0gdW5kZWZpbmVkO1xuICAgIF8kZWwucmVtb3ZlKCk7XG4gIH07XG5cbiAgdGhpcy5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIF9pc0lmcmFtZUxvYWRlZCA9IGZhbHNlO1xuICAgIF8kaWZyYW1lWzBdLnNyYyA9IFwiXCI7XG4gIH07XG5cbiAgdGhpcy5jdXJyZW50U3BpbmVJdGVtID0gZnVuY3Rpb24oKSB7XG5cbiAgICByZXR1cm4gX2N1cnJlbnRTcGluZUl0ZW07XG4gIH07XG5cbiAgZnVuY3Rpb24gb25JRnJhbWVMb2FkKHN1Y2Nlc3MpIHtcblxuICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICBfaXNJZnJhbWVMb2FkZWQgPSB0cnVlO1xuICAgICAgdmFyIGVwdWJDb250ZW50RG9jdW1lbnQgPSBfJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICBfJGVwdWJIdG1sID0gJChcImh0bWxcIiwgZXB1YkNvbnRlbnREb2N1bWVudCk7XG4gICAgICBpZiAoIV8kZXB1Ykh0bWwgfHwgXyRlcHViSHRtbC5sZW5ndGggPT0gMCkge1xuICAgICAgICBfJGVwdWJIdG1sID0gJChcInN2Z1wiLCBlcHViQ29udGVudERvY3VtZW50KTtcbiAgICAgIH1cblxuICAgICAgLy9fJGVwdWJIdG1sLmNzcyhcIm92ZXJmbG93XCIsIFwiaGlkZGVuXCIpO1xuXG4gICAgICBpZiAoX2VuYWJsZUJvb2tTdHlsZU92ZXJyaWRlcykge1xuICAgICAgICBzZWxmLmFwcGx5Qm9va1N0eWxlcygpO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVNZXRhU2l6ZSgpO1xuXG4gICAgICBfcGFnZVRyYW5zaXRpb25IYW5kbGVyLm9uSUZyYW1lTG9hZCgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfdmlld1NldHRpbmdzID0gdW5kZWZpbmVkO1xuICB0aGlzLnNldFZpZXdTZXR0aW5ncyA9IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG5cbiAgICBfdmlld1NldHRpbmdzID0gc2V0dGluZ3M7XG5cbiAgICBpZiAoX2VuYWJsZUJvb2tTdHlsZU92ZXJyaWRlcykge1xuICAgICAgc2VsZi5hcHBseUJvb2tTdHlsZXMoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVNZXRhU2l6ZSgpO1xuXG4gICAgX3BhZ2VUcmFuc2l0aW9uSGFuZGxlci51cGRhdGVPcHRpb25zKHNldHRpbmdzKTtcbiAgfTtcblxuICBmdW5jdGlvbiB1cGRhdGVIdG1sRm9udFNpemUoKSB7XG5cbiAgICBpZiAoIV9lbmFibGVCb29rU3R5bGVPdmVycmlkZXMpIHJldHVybjtcblxuICAgIGlmIChfJGVwdWJIdG1sICYmIF92aWV3U2V0dGluZ3MpIHtcbiAgICAgIFVwZGF0ZUh0bWxGb250U2l6ZShfJGVwdWJIdG1sLCBfdmlld1NldHRpbmdzLmZvbnRTaXplKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmFwcGx5Qm9va1N0eWxlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKCFfZW5hYmxlQm9va1N0eWxlT3ZlcnJpZGVzKSByZXR1cm47XG5cbiAgICBpZiAoXyRlcHViSHRtbCkge1xuICAgICAgc2V0U3R5bGVzKF9ib29rU3R5bGVzLmdldFN0eWxlcygpLCBfJGVwdWJIdG1sKTtcbiAgICAgIHVwZGF0ZUh0bWxGb250U2l6ZSgpO1xuICAgIH1cbiAgfTtcblxuICAvL3RoaXMgaXMgY2FsbGVkIGJ5IHNjcm9sbF92aWV3IGZvciBmaXhlZCBzcGluZSBpdGVtXG4gIHRoaXMuc2NhbGVUb1dpZHRoID0gZnVuY3Rpb24od2lkdGgpIHtcblxuICAgIGlmIChfbWV0YV9zaXplLndpZHRoIDw9IDApIHJldHVybjsgLy8gcmVzaXplIGV2ZW50IHRvbyBlYXJseSFcblxuICAgIHZhciBzY2FsZSA9IHdpZHRoIC8gX21ldGFfc2l6ZS53aWR0aDtcbiAgICBzZWxmLnRyYW5zZm9ybUNvbnRlbnRJbW1lZGlhdGUoc2NhbGUsIDAsIDApO1xuICB9O1xuXG4gIC8vdGhpcyBpcyBjYWxsZWQgYnkgc2Nyb2xsX3ZpZXcgZm9yIHJlZmxvd2FibGUgc3BpbmUgaXRlbVxuICB0aGlzLnJlc2l6ZUlGcmFtZVRvQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb250SGVpZ2h0ID0gZ2V0Q29udGVudERvY0hlaWdodCgpO1xuICAgIC8vY29uc29sZS5sb2coXCJyZXNpemVJRnJhbWVUb0NvbnRlbnQ6IFwiICsgY29udEhlaWdodCk7XG5cbiAgICBzZWxmLnNldEhlaWdodChjb250SGVpZ2h0KTtcblxuICAgIHNlbGYuc2hvd0lGcmFtZSgpO1xuICB9O1xuXG4gIHRoaXMuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oaGVpZ2h0KSB7XG5cbiAgICBfJHNjYWxlci5jc3MoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgXCJweFwiKTtcbiAgICBfJGVsLmNzcyhcImhlaWdodFwiLCBoZWlnaHQgKyBcInB4XCIpO1xuXG4gICAgLy8gICAgICAgIF8kaWZyYW1lLmNzcyhcImhlaWdodFwiLCBoZWlnaHQgKyBcInB4XCIpO1xuICB9O1xuXG4gIHZhciBfdXNlQ1NTVHJhbnNmb3JtVG9IaWRlSWZyYW1lID0gdHJ1ZTtcblxuICB0aGlzLnNob3dJRnJhbWUgPSBmdW5jdGlvbigpIHtcblxuICAgIF8kaWZyYW1lLmNzcyhcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuXG4gICAgaWYgKF91c2VDU1NUcmFuc2Zvcm1Ub0hpZGVJZnJhbWUpIHtcbiAgICAgIF8kaWZyYW1lLmNzcyhcInRyYW5zZm9ybVwiLCBcIm5vbmVcIik7XG5cbiAgICAgIHZhciBlbmFibGUzRCA9IGZhbHNlO1xuICAgICAgdmFyIHNldHRpbmdzID0gX3ZpZXdTZXR0aW5ncztcbiAgICAgIGlmICghc2V0dGluZ3MgfHwgdHlwZW9mIHNldHRpbmdzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgLy9kZWZhdWx0c1xuICAgICAgICBzZXR0aW5ncyA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCkge1xuICAgICAgICBlbmFibGUzRCA9IHRydWU7XG4gICAgICAgIF8kaWZyYW1lLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVooMClcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF8kaWZyYW1lLmNzcyh7XG4gICAgICAgIGxlZnQ6IFwiMHB4XCIsXG4gICAgICAgIHRvcDogXCIwcHhcIlxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaGlkZUlGcmFtZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgXyRpZnJhbWUuY3NzKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcblxuICAgIC8vIFdpdGggc29tZSBib29rcywgZGVzcGl0ZSB0aGUgaWZyYW1lIGFuZCBpdHMgY29udGFpbmluZyBkaXYgd3JhcHBlciBiZWluZyBoaWRkZW4sXG4gICAgLy8gdGhlIGlmcmFtZSdzIGNvbnRlbnRXaW5kb3cgLyBjb250ZW50RG9jdW1lbnQgaXMgc3RpbGwgdmlzaWJsZSFcbiAgICAvLyBUaHVzIHdoeSB3ZSB0cmFuc2xhdGUgdGhlIGlmcmFtZSBvdXQgb2YgdmlldyBpbnN0ZWFkLlxuXG4gICAgaWYgKF91c2VDU1NUcmFuc2Zvcm1Ub0hpZGVJZnJhbWUpIHtcbiAgICAgIHZhciBlbmFibGUzRCA9IGZhbHNlO1xuICAgICAgdmFyIHNldHRpbmdzID0gX3ZpZXdTZXR0aW5ncztcbiAgICAgIGlmICghc2V0dGluZ3MgfHwgdHlwZW9mIHNldHRpbmdzLmVuYWJsZUdQVUhhcmR3YXJlQWNjZWxlcmF0aW9uQ1NTM0QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgLy9kZWZhdWx0c1xuICAgICAgICBzZXR0aW5ncyA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCkge1xuICAgICAgICBlbmFibGUzRCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjc3MgPSBDU1NUcmFuc2Zvcm1TdHJpbmcoe1xuICAgICAgICBsZWZ0OiBcIjEwMDAwXCIsXG4gICAgICAgIHRvcDogXCIxMDAwMFwiLFxuICAgICAgICBlbmFibGUzRDogZW5hYmxlM0RcbiAgICAgIH0pO1xuICAgICAgXyRpZnJhbWUuY3NzKGNzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF8kaWZyYW1lLmNzcyh7XG4gICAgICAgIGxlZnQ6IFwiMTAwMDBweFwiLFxuICAgICAgICB0b3A6IFwiMTAwMDBweFwiXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0Q29udGVudERvY0hlaWdodCgpIHtcblxuICAgIGlmICghXyRpZnJhbWUgfHwgIV8kaWZyYW1lLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKGlzSWZyYW1lQWxpdmUoXyRpZnJhbWVbMF0pKSB7XG4gICAgICB2YXIgd2luID0gXyRpZnJhbWVbMF0uY29udGVudFdpbmRvdztcbiAgICAgIHZhciBkb2MgPSBfJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQ7XG5cbiAgICAgIHZhciBoZWlnaHQgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQod2luLmdldENvbXB1dGVkU3R5bGUoZG9jLmRvY3VtZW50RWxlbWVudCkuaGVpZ2h0KSk7IC8vYm9keSBjYW4gYmUgc2hvcnRlciFcbiAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgfSBlbHNlIGlmIChfJGVwdWJIdG1sKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiZ2V0Q29udGVudERvY0hlaWdodCA/P1wiKTtcblxuICAgICAgdmFyIGpxdWVyeUhlaWdodCA9IF8kZXB1Ykh0bWwuaGVpZ2h0KCk7XG4gICAgICByZXR1cm4ganF1ZXJ5SGVpZ2h0O1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLy8gZGlyOiAwID0+IG5ldyBvciBzYW1lIHBhZ2UsIDEgPT4gcHJldmlvdXMsIDIgPT4gbmV4dFxuICB0aGlzLnVwZGF0ZVBhZ2VTd2l0Y2hEaXIgPSBmdW5jdGlvbihkaXIsIGhhc0NoYW5nZWQpIHtcbiAgICBfcGFnZVRyYW5zaXRpb25IYW5kbGVyLnVwZGF0ZVBhZ2VTd2l0Y2hEaXIoZGlyLCBoYXNDaGFuZ2VkKTtcbiAgfTtcblxuXG4gIHRoaXMudHJhbnNmb3JtQ29udGVudEltbWVkaWF0ZSA9IGZ1bmN0aW9uKHNjYWxlLCBsZWZ0LCB0b3ApIHtcblxuICAgIHZhciBlbFdpZHRoID0gTWF0aC5jZWlsKF9tZXRhX3NpemUud2lkdGggKiBzY2FsZSk7XG4gICAgdmFyIGVsSGVpZ2h0ID0gTWF0aC5mbG9vcihfbWV0YV9zaXplLmhlaWdodCAqIHNjYWxlKTtcblxuICAgIF9wYWdlVHJhbnNpdGlvbkhhbmRsZXIudHJhbnNmb3JtQ29udGVudEltbWVkaWF0ZV9CRUdJTihfJGVsLCBzY2FsZSwgbGVmdCwgdG9wKTtcblxuICAgIF8kZWwuY3NzKFwibGVmdFwiLCBsZWZ0ICsgXCJweFwiKTtcbiAgICBfJGVsLmNzcyhcInRvcFwiLCB0b3AgKyBcInB4XCIpO1xuICAgIF8kZWwuY3NzKFwid2lkdGhcIiwgZWxXaWR0aCArIFwicHhcIik7XG4gICAgXyRlbC5jc3MoXCJoZWlnaHRcIiwgZWxIZWlnaHQgKyBcInB4XCIpO1xuXG4gICAgaWYgKCFfJGVwdWJIdG1sKSB7XG4gICAgICAvLyAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBlbmFibGUzRCA9IGZhbHNlO1xuICAgIHZhciBzZXR0aW5ncyA9IF92aWV3U2V0dGluZ3M7XG4gICAgaWYgKCFzZXR0aW5ncyB8fCB0eXBlb2Ygc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgLy9kZWZhdWx0c1xuICAgICAgc2V0dGluZ3MgPSBuZXcgVmlld2VyU2V0dGluZ3Moe30pO1xuICAgIH1cbiAgICBpZiAoc2V0dGluZ3MuZW5hYmxlR1BVSGFyZHdhcmVBY2NlbGVyYXRpb25DU1MzRCkge1xuICAgICAgZW5hYmxlM0QgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChyZWFkZXIubmVlZHNGaXhlZExheW91dFNjYWxlcldvcmtBcm91bmQoKSkge1xuICAgICAgdmFyIGNzczEgPSBDU1NUcmFuc2Zvcm1TdHJpbmcoe1xuICAgICAgICBzY2FsZTogc2NhbGUsXG4gICAgICAgIGVuYWJsZTNEOiBlbmFibGUzRFxuICAgICAgfSk7XG4gICAgICBfJGVwdWJIdG1sLmNzcyhjc3MxKTtcblxuICAgICAgdmFyIGNzczIgPSBDU1NUcmFuc2Zvcm1TdHJpbmcoe1xuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgZW5hYmxlM0Q6IGVuYWJsZTNEXG4gICAgICB9KTtcbiAgICAgIGNzczJbXCJ3aWR0aFwiXSA9IF9tZXRhX3NpemUud2lkdGg7XG4gICAgICBjc3MyW1wiaGVpZ2h0XCJdID0gX21ldGFfc2l6ZS5oZWlnaHQ7XG4gICAgICBfJHNjYWxlci5jc3MoY3NzMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjc3MgPSBDU1NUcmFuc2Zvcm1TdHJpbmcoe1xuICAgICAgICBzY2FsZTogc2NhbGUsXG4gICAgICAgIGVuYWJsZTNEOiBlbmFibGUzRFxuICAgICAgfSk7XG4gICAgICBjc3NbXCJ3aWR0aFwiXSA9IF9tZXRhX3NpemUud2lkdGg7XG4gICAgICBjc3NbXCJoZWlnaHRcIl0gPSBfbWV0YV9zaXplLmhlaWdodDtcbiAgICAgIF8kc2NhbGVyLmNzcyhjc3MpO1xuICAgIH1cblxuICAgIC8vIENocm9tZSB3b3JrYXJvdW5kOiBvdGhlcndpc2UgdGV4dCBpcyBzb21ldGltZXMgaW52aXNpYmxlIChwcm9iYWJseSBhIHJlbmRlcmluZyBnbGl0Y2ggZHVlIHRvIHRoZSAzRCB0cmFuc2Zvcm0gZ3JhcGhpY3MgYmFja2VuZD8pXG4gICAgLy9fJGVwdWJIdG1sLmNzcyhcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7IC8vIFwiZmxhc2hpbmdcIiBpbiB0d28tcGFnZSBzcHJlYWQgbW9kZSBpcyBhbm5veWluZyA6KFxuICAgIF8kZXB1Ykh0bWwuY3NzKFwib3BhY2l0eVwiLCBcIjAuOTk5XCIpO1xuXG4gICAgc2VsZi5zaG93SUZyYW1lKCk7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgLy9fJGVwdWJIdG1sLmNzcyhcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuICAgICAgXyRlcHViSHRtbC5jc3MoXCJvcGFjaXR5XCIsIFwiMVwiKTtcbiAgICB9LCAwKTtcblxuICAgIF9wYWdlVHJhbnNpdGlvbkhhbmRsZXIudHJhbnNmb3JtQ29udGVudEltbWVkaWF0ZV9FTkQoXyRlbCwgc2NhbGUsIGxlZnQsIHRvcCk7XG4gIH07XG5cbiAgdGhpcy5nZXRDYWxjdWxhdGVkUGFnZUhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfJGVsLmhlaWdodCgpO1xuICB9O1xuXG4gIHRoaXMudHJhbnNmb3JtQ29udGVudCA9IF8uYmluZChfLmRlYm91bmNlKHRoaXMudHJhbnNmb3JtQ29udGVudEltbWVkaWF0ZSwgNTApLCBzZWxmKTtcblxuICBmdW5jdGlvbiB1cGRhdGVNZXRhU2l6ZSgpIHtcblxuICAgIF9tZXRhX3NpemUud2lkdGggPSAwO1xuICAgIF9tZXRhX3NpemUuaGVpZ2h0ID0gMDtcblxuICAgIHZhciBzaXplID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNvbnRlbnREb2N1bWVudCA9IF8kaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcblxuICAgIC8vIGZpcnN0IHRyeSB0byByZWFkIHZpZXdwb3J0IHNpemVcbiAgICB2YXIgY29udGVudCA9ICQoJ21ldGFbbmFtZT12aWV3cG9ydF0nLCBjb250ZW50RG9jdW1lbnQpLmF0dHIoXCJjb250ZW50XCIpO1xuXG4gICAgLy8gaWYgbm90IGZvdW5kIHRyeSB2aWV3Ym94ICh1c2VkIGZvciBTVkcpXG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICBjb250ZW50ID0gJCgnbWV0YVtuYW1lPXZpZXdib3hdJywgY29udGVudERvY3VtZW50KS5hdHRyKFwiY29udGVudFwiKTtcbiAgICB9XG5cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgc2l6ZSA9IHBhcnNlTWV0YVNpemUoY29udGVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFzaXplKSB7XG4gICAgICAvLyBUT0RPOiB0aGUgcGlja2VkIFNWRyBlbGVtZW50IG1heSBiZSB0aGUgcm9vdC4uLm1heSBiZSBkZWVwIGluc2lkZSB0aGUgbWFya3VwIVxuICAgICAgdmFyICRzdmcgPSAkKGNvbnRlbnREb2N1bWVudCkuZmluZCgnc3ZnJyk7XG4gICAgICAvL3ZhciAkc3ZnID0gJChjb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICAgIC8vIGNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgPT0gXCJzdmdcIlxuICAgICAgaWYgKCRzdmcubGVuZ3RoID4gMCkge1xuXG4gICAgICAgIHZhciB3aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGhlaWdodCA9IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgd0F0dHIgPSAkc3ZnWzBdLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpO1xuICAgICAgICBpZiAod0F0dHIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2lkdGggPSBwYXJzZUludCh3QXR0ciwgMTApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgfVxuICAgICAgICB2YXIgaEF0dHIgPSAkc3ZnWzBdLmdldEF0dHJpYnV0ZShcImhlaWdodFwiKTtcbiAgICAgICAgaWYgKGhBdHRyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlSW50KGhBdHRyLCAxMCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdpZHRoICYmIGhlaWdodCkge1xuICAgICAgICAgIHNpemUgPSB7XG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLy8gRElTQUJMRUQgKG5vdCBhIHNhdGlzZmFjdG9yeSBmYWxsYmFjaylcbiAgICAgICAgICAvLyBjb250ZW50ID0gJHN2Zy5hdHRyKCd2aWV3Qm94Jyk7XG4gICAgICAgICAgLy8gaWYoY29udGVudCkge1xuICAgICAgICAgIC8vICAgICBzaXplID0gcGFyc2VWaWV3Qm94U2l6ZShjb250ZW50KTtcbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBpZiAoc2l6ZSkge1xuICAgICAgICAgIC8vICAgICBjb25zb2xlLndhcm4oXCJWaWV3cG9ydCBTVkc6IHVzaW5nIHZpZXdib3ghXCIpO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghc2l6ZSAmJiBfY3VycmVudFNwaW5lSXRlbSkge1xuICAgICAgY29udGVudCA9IF9jdXJyZW50U3BpbmVJdGVtLmdldFJlbmRpdGlvblZpZXdwb3J0KCk7XG5cbiAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgIHNpemUgPSBwYXJzZU1ldGFTaXplKGNvbnRlbnQpO1xuICAgICAgICBpZiAoc2l6ZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiVmlld3BvcnQ6IHVzaW5nIHJlbmRpdGlvbjp2aWV3cG9ydCBkaW1lbnNpb25zXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzaXplKSB7XG4gICAgICAvLyBJbWFnZSBmYWxsYmFjayAoYXV0by1nZW5lcmF0ZWQgSFRNTCB0ZW1wbGF0ZSB3aGVuIFdlYlZpZXcgLyBpRnJhbWUgaXMgZmVkIHdpdGggaW1hZ2UgbWVkaWEgdHlwZSlcbiAgICAgIHZhciAkaW1nID0gJChjb250ZW50RG9jdW1lbnQpLmZpbmQoJ2ltZycpO1xuICAgICAgaWYgKCRpbWcubGVuZ3RoID4gMCkge1xuICAgICAgICBzaXplID0ge1xuICAgICAgICAgICAgd2lkdGg6ICRpbWcud2lkdGgoKSxcbiAgICAgICAgICAgIGhlaWdodDogJGltZy5oZWlnaHQoKVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBpZiAoY29udGVudERvY3VtZW50ICYmIGNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAmJiBjb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gXCJzdmdcIikge1xuICAgICAgICAgIC8vICAgICBjb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHNpemUud2lkdGgpO1xuICAgICAgICAgIC8vICAgICBjb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBzaXplLmhlaWdodCk7XG4gICAgICAgICAgLy8gfVxuXG4gICAgICAgIHZhciBpc0ltYWdlID0gX2N1cnJlbnRTcGluZUl0ZW0gJiYgX2N1cnJlbnRTcGluZUl0ZW0ubWVkaWFfdHlwZSAmJiBfY3VycmVudFNwaW5lSXRlbS5tZWRpYV90eXBlLmxlbmd0aCAmJiBfY3VycmVudFNwaW5lSXRlbS5tZWRpYV90eXBlLmluZGV4T2YoXCJpbWFnZS9cIikgPT0gMDtcbiAgICAgICAgaWYgKCFpc0ltYWdlKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiVmlld3BvcnQ6IHVzaW5nIGltZyBkaW1lbnNpb25zIVwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGltZyA9ICQoY29udGVudERvY3VtZW50KS5maW5kKCdpbWFnZScpO1xuICAgICAgICBpZiAoJGltZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIHdpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHZhciBoZWlnaHQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICB2YXIgd0F0dHIgPSAkaW1nWzBdLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpO1xuICAgICAgICAgIGlmICh3QXR0cikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2lkdGggPSBwYXJzZUludCh3QXR0ciwgMTApO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaEF0dHIgPSAkaW1nWzBdLmdldEF0dHJpYnV0ZShcImhlaWdodFwiKTtcbiAgICAgICAgICBpZiAoaEF0dHIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlSW50KGhBdHRyLCAxMCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHdpZHRoICYmIGhlaWdodCkge1xuICAgICAgICAgICAgc2l6ZSA9IHtcbiAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiAoY29udGVudERvY3VtZW50ICYmIGNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAmJiBjb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gXCJzdmdcIikge1xuICAgICAgICAgICAgLy8gICAgIGNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgc2l6ZS53aWR0aCk7XG4gICAgICAgICAgICAvLyAgICAgY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgc2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJWaWV3cG9ydDogdXNpbmcgaW1hZ2UgZGltZW5zaW9ucyFcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzaXplKSB7XG4gICAgICAvLyBOb3QgYSBncmVhdCBmYWxsYmFjaywgYXMgaXQgaGFzIHRoZSBhc3BlY3QgcmF0aW8gb2YgdGhlIGZ1bGwgd2luZG93LCBidXQgaXQgaXMgYmV0dGVyIHRoYW4gbm8gZGlzcGxheSBhdCBhbGwuXG4gICAgICB3aWR0aCA9IF8kdmlld3BvcnQud2lkdGgoKTtcbiAgICAgIGhlaWdodCA9IF8kdmlld3BvcnQuaGVpZ2h0KCk7XG4gICAgICBzaXplID0ge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUud2FybihcIlZpZXdwb3J0OiB1c2luZyBicm93c2VyIC8gZS1yZWFkZXIgdmlld3BvcnQgZGltZW5zaW9ucyFcIik7XG4gICAgfVxuXG4gICAgaWYgKHNpemUpIHtcbiAgICAgIF9tZXRhX3NpemUud2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgX21ldGFfc2l6ZS5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICB9XG4gIH1cblxuICAvL2V4cGVjdGVkIGNhbGxiYWNrIHNpZ25hdHVyZTogZnVuY3Rpb24oc3VjY2VzcywgJGlmcmFtZSwgc3BpbmVJdGVtLCBpc05ld2x5TG9hZGVkLCBjb250ZXh0KVxuICB0aGlzLmxvYWRTcGluZUl0ZW0gPSBmdW5jdGlvbihzcGluZUl0ZW0sIGNhbGxiYWNrLCBjb250ZXh0KSB7XG5cbiAgICBpZiAoX2N1cnJlbnRTcGluZUl0ZW0gIT0gc3BpbmVJdGVtKSB7XG5cbiAgICAgIF9jdXJyZW50U3BpbmVJdGVtID0gc3BpbmVJdGVtO1xuICAgICAgdmFyIHNyYyA9IF9zcGluZS5wYWNrYWdlLnJlc29sdmVSZWxhdGl2ZVVybChzcGluZUl0ZW0uaHJlZik7XG5cbiAgICAgIC8vaWYgKHNwaW5lSXRlbSAmJiBzcGluZUl0ZW0uaXNGaXhlZExheW91dCgpKVxuICAgICAgaWYgKHRydWUpIC8vIGJvdGggZml4ZWQgbGF5b3V0IGFuZCByZWZsb3dhYmxlIGRvY3VtZW50cyBuZWVkIGhpZGluZyBkdWUgdG8gZmxhc2hpbmcgZHVyaW5nIGxheW91dC9yZW5kZXJpbmdcbiAgICAgIHtcbiAgICAgICAgLy9oaWRlIGlmcmFtZSB1bnRpbCBjb250ZW50IGlzIHNjYWxlZFxuICAgICAgICBzZWxmLmhpZGVJRnJhbWUoKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi50cmlnZ2VyKE9uZVBhZ2VWaWV3LlNQSU5FX0lURU1fT1BFTl9TVEFSVCwgXyRpZnJhbWUsIF9jdXJyZW50U3BpbmVJdGVtKTtcbiAgICAgIF9pZnJhbWVMb2FkZXIubG9hZElmcmFtZShfJGlmcmFtZVswXSwgc3JjLCBmdW5jdGlvbihzdWNjZXNzKSB7XG5cbiAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2FsbGJhY2soc3VjY2VzcywgXyRpZnJhbWUsIF9jdXJyZW50U3BpbmVJdGVtLCB0cnVlLCBjb250ZXh0KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKGlzSUZyYW1lQWxpdmUoXyRpZnJhbWVbMF0pKSB7XG4gICAgICAgICAgICBvbklGcmFtZUxvYWQoc3VjY2Vzcyk7IC8vIGFwcGxpZXMgc3R5bGVzXG5cbiAgICAgICAgICAgIGZ1bmMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIm9uSUZyYW1lTG9hZCAhISBkb2MgJiYgd2luICsgVElNRU9VVFwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoc3BpbmVJdGVtLmhyZWYpO1xuXG4gICAgICAgICAgICBvbklGcmFtZUxvYWQoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuYywgNTAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25JRnJhbWVMb2FkKHN1Y2Nlc3MpO1xuICAgICAgICB9XG5cbiAgICAgIH0sIHNlbGYsIHtcbiAgICAgICAgc3BpbmVJdGVtOiBfY3VycmVudFNwaW5lSXRlbVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayh0cnVlLCBfJGlmcmFtZSwgX2N1cnJlbnRTcGluZUl0ZW0sIGZhbHNlLCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8vXG4gIC8vIGZ1bmN0aW9uIHBhcnNlVmlld0JveFNpemUodmlld0JveFN0cmluZykge1xuICAvL1xuICAvLyAgICAgdmFyIHBhcnRzID0gdmlld0JveFN0cmluZy5zcGxpdCgnICcpO1xuICAvL1xuICAvLyAgICAgaWYocGFydHMubGVuZ3RoIDwgNCkge1xuICAvLyAgICAgICAgIGNvbnNvbGUud2Fybih2aWV3Qm94U3RyaW5nICsgXCIgdmFsdWUgaXMgbm90IHZhbGlkIHZpZXdCb3ggc2l6ZVwiKVxuICAvLyAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIC8vICAgICB9XG4gIC8vXG4gIC8vICAgICB2YXIgd2lkdGggPSBwYXJzZUludChwYXJ0c1syXSk7XG4gIC8vICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQocGFydHNbM10pO1xuICAvL1xuICAvLyAgICAgaWYoIWlzTmFOKHdpZHRoKSAmJiAhaXNOYU4oaGVpZ2h0KSkge1xuICAvLyAgICAgICAgIHJldHVybiB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHR9IDtcbiAgLy8gICAgIH1cbiAgLy9cbiAgLy8gICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIC8vIH1cblxuICBmdW5jdGlvbiBwYXJzZU1ldGFTaXplKGNvbnRlbnQpIHtcblxuICAgIHZhciBwYWlycyA9IGNvbnRlbnQucmVwbGFjZSgvXFxzL2csICcnKS5zcGxpdChcIixcIik7XG5cbiAgICB2YXIgZGljdCA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5hbWVWYWwgPSBwYWlyc1tpXS5zcGxpdChcIj1cIik7XG4gICAgICBpZiAobmFtZVZhbC5sZW5ndGggPT0gMikge1xuXG4gICAgICAgIGRpY3RbbmFtZVZhbFswXV0gPSBuYW1lVmFsWzFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB3aWR0aCA9IE51bWJlci5OYU47XG4gICAgdmFyIGhlaWdodCA9IE51bWJlci5OYU47XG5cbiAgICBpZiAoZGljdFtcIndpZHRoXCJdKSB7XG4gICAgICB3aWR0aCA9IHBhcnNlSW50KGRpY3RbXCJ3aWR0aFwiXSk7XG4gICAgfVxuXG4gICAgaWYgKGRpY3RbXCJoZWlnaHRcIl0pIHtcbiAgICAgIGhlaWdodCA9IHBhcnNlSW50KGRpY3RbXCJoZWlnaHRcIl0pO1xuICAgIH1cblxuICAgIGlmICghaXNOYU4od2lkdGgpICYmICFpc05hTihoZWlnaHQpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB0aGlzLmdldEZpcnN0VmlzaWJsZUVsZW1lbnRDZmkgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBuYXZpZ2F0aW9uID0gbmV3IENmaU5hdmlnYXRpb25Mb2dpYyhfJGVsLCBfJGlmcmFtZSk7XG4gICAgcmV0dXJuIG5hdmlnYXRpb24uZ2V0Rmlyc3RWaXNpYmxlRWxlbWVudENmaSgwKTtcblxuICB9O1xuXG4gIHRoaXMuZ2V0TmF2aWdhdG9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICByZXR1cm4gbmV3IENmaU5hdmlnYXRpb25Mb2dpYyhfJGVsLCBfJGlmcmFtZSk7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50QnlDZmkgPSBmdW5jdGlvbihzcGluZUl0ZW0sIGNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICBpZiAoc3BpbmVJdGVtICE9IF9jdXJyZW50U3BpbmVJdGVtKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwic3BpbmUgaXRlbSBpcyBub3QgbG9hZGVkXCIpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgbmF2aWdhdGlvbiA9IG5ldyBDZmlOYXZpZ2F0aW9uTG9naWMoXyRlbCwgXyRpZnJhbWUpO1xuICAgIHJldHVybiBuYXZpZ2F0aW9uLmdldEVsZW1lbnRCeUNmaShjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgaWQpIHtcblxuICAgIGlmIChzcGluZUl0ZW0gIT0gX2N1cnJlbnRTcGluZUl0ZW0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBuYXZpZ2F0aW9uID0gbmV3IENmaU5hdmlnYXRpb25Mb2dpYyhfJGVsLCBfJGlmcmFtZSk7XG4gICAgcmV0dXJuIG5hdmlnYXRpb24uZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgc2VsZWN0b3IpIHtcblxuICAgIGlmIChzcGluZUl0ZW0gIT0gX2N1cnJlbnRTcGluZUl0ZW0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBuYXZpZ2F0aW9uID0gbmV3IENmaU5hdmlnYXRpb25Mb2dpYyhfJGVsLCBfJGlmcmFtZSk7XG4gICAgcmV0dXJuIG5hdmlnYXRpb24uZ2V0RWxlbWVudChzZWxlY3Rvcik7XG4gIH07XG5cbiAgdGhpcy5nZXRGaXJzdFZpc2libGVNZWRpYU92ZXJsYXlFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5hdmlnYXRpb24gPSBuZXcgQ2ZpTmF2aWdhdGlvbkxvZ2ljKF8kZWwsIF8kaWZyYW1lKTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbi5nZXRGaXJzdFZpc2libGVNZWRpYU92ZXJsYXlFbGVtZW50KHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogXyRpZnJhbWUuaGVpZ2h0KClcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLm9mZnNldCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChfJGlmcmFtZSkge1xuICAgICAgcmV0dXJuIF8kaWZyYW1lLm9mZnNldCgpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbk9uZVBhZ2VWaWV3LlNQSU5FX0lURU1fT1BFTl9TVEFSVCA9IFwiU3BpbmVJdGVtT3BlblN0YXJ0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gT25lUGFnZVZpZXdcbiIsIi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vIE1vZGlmaWVkIGJ5IERhbmllbCBXZWNrXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE0IFJlYWRpdW0gRm91bmRhdGlvbiBhbmQvb3IgaXRzIGxpY2Vuc2Vlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBcbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBcbi8vICBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vLyAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIFxuLy8gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4vLyAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3IgXG4vLyAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSBcbi8vICB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIFxuLy8gIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbi8vICBcbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgXG4vLyAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgXG4vLyAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBcbi8vICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBcbi8vICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgXG4vLyAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgXG4vLyAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIFxuLy8gIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcbi8vICBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbi8qKlxuICogT3B0aW9ucyBwYXNzZWQgb24gdGhlIHJlYWRlciBmcm9tIHRoZSByZWFkaXVtIGxvYWRlci9pbml0aWFsaXplclxuICpcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFJlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5SZWFkZXJPcHRpb25zXG4gKiBAcHJvcGVydHkge2pRdWVyeUVsZW1lbnR8c3RyaW5nfSBlbCAgIFRoZSBlbGVtZW50IHRoZSByZWFkZXIgdmlldyBzaG91bGQgY3JlYXRlIGl0c2VsZiBpbi4gQ2FuIGJlIGEganF1ZXJ5IHdyYXBwZWQgZWxlbWVudCBvciBhIHF1ZXJ5IHNlbGVjdG9yLlxuICogQHByb3BlcnR5IHtSZWFkaXVtU0RLLlZpZXdzLklGcmFtZUxvYWRlcn0gaWZyYW1lTG9hZGVyICAgQW4gaW5zdGFuY2Ugb2YgYW4gaWZyYW1lIGxvYWRlciBvciBvbmUgZXhwYW5kaW5nIGl0LlxuICogQHByb3BlcnR5IHtib29sZWFufSBuZWVkc0ZpeGVkTGF5b3V0U2NhbGVyV29ya0Fyb3VuZFxuICovXG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpXG52YXIgQW5ub3RhdGlvbnNNYW5hZ2VyID0gcmVxdWlyZSgnLi9hbm5vdGF0aW9ucy1tYW5hZ2VyJylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBFdmVudHMgPSByZXF1aXJlKCcuLi9ldmVudHMnKVxudmFyIGV4dGVuZGVkVGhyb3R0bGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2V4dGVuZGVkLXRocm90dGxlJylcbnZhciBGaXhlZFZpZXcgPSByZXF1aXJlKCcuL2ZpeGVkLXZpZXcnKVxudmFyIElGcmFtZUxvYWRlciA9IHJlcXVpcmUoJy4vaWZyYW1lLWxvYWRlcicpXG52YXIgSW50ZXJuYWxFdmVudHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC1ldmVudHMnKVxudmFyIEludGVybmFsTGlua3NTdXBwb3J0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC1saW5rcy1zdXBwb3J0JylcbnZhciBpc0lmcmFtZUFsaXZlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pcy1pZnJhbWUtYWxpdmUnKVxudmFyIE1lZGlhT3ZlcmxheURhdGFJbmplY3RvciA9IHJlcXVpcmUoJy4vbWVkaWEtb3ZlcmxheS1kYXRhLWluamVjdG9yJylcbnZhciBNZWRpYU92ZXJsYXlQbGF5ZXIgPSByZXF1aXJlKCcuL21lZGlhLW92ZXJsYXktcGxheWVyJylcbnZhciBQYWNrYWdlID0gcmVxdWlyZSgnLi4vbW9kZWxzL3BhY2thZ2UnKVxudmFyIFBhZ2VPcGVuUmVxdWVzdCA9IHJlcXVpcmUoJy4uL21vZGVscy9wYWdlLW9wZW4tcmVxdWVzdCcpXG52YXIgUmVmbG93YWJsZVZpZXcgPSByZXF1aXJlKCcuL3JlZmxvd2FibGUtdmlldycpXG52YXIgUmVzb2x2ZUNvbnRlbnRSZWYgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3Jlc29sdmUtY29udGVudC1yZWYnKVxudmFyIFNjcm9sbFZpZXcgPSByZXF1aXJlKCcuL3Njcm9sbC12aWV3JylcbnZhciBzZXRTdHlsZXMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3NldC1zdHlsZXMnKVxudmFyIFN0eWxlQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2NvbGxlY3Rpb25zL3N0eWxlJylcbnZhciBTd2l0Y2hlcyA9IHJlcXVpcmUoJy4uL21vZGVscy9zd2l0Y2hlcycpXG52YXIgVHJpZ2dlciA9IHJlcXVpcmUoJy4uL21vZGVscy90cmlnZ2VyJylcbnZhciBWaWV3ZXJTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL21vZGVscy92aWV3ZXItc2V0dGluZ3MnKVxuXG4vKipcbiAqIFZpZXcgVHlwZVxuICogQHR5cGVkZWYge29iamVjdH0gUmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3LlZpZXdUeXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gVklFV19UWVBFX0NPTFVNTklaRUQgICAgICAgICAgUmVmbG93YWJsZSBkb2N1bWVudCB2aWV3XG4gKiBAcHJvcGVydHkge251bWJlcn0gVklFV19UWVBFX0ZJWEVEICAgICAgICAgICAgICAgRml4ZWQgbGF5b3V0IGRvY3VtZW50IHZpZXdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBWSUVXX1RZUEVfU0NST0xMRURfRE9DICAgICAgICBTY3JvbGxhYmxlIGRvY3VtZW50IHZpZXdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBWSUVXX1RZUEVfU0NST0xMRURfQ09OVElOVU9VUyBDb250aW51b3VzIHNjcm9sbGFibGUgZG9jdW1lbnQgdmlld1xuICovXG52YXIgVklFV19UWVBFX0NPTFVNTklaRUQgPSAxO1xudmFyIFZJRVdfVFlQRV9GSVhFRCA9IDI7XG52YXIgVklFV19UWVBFX1NDUk9MTEVEX0RPQyA9IDM7XG52YXIgVklFV19UWVBFX1NDUk9MTEVEX0NPTlRJTlVPVVMgPSA0O1xuXG5cbi8qKlxuICogVG9wIGxldmVsIFZpZXcgb2JqZWN0LiBJbnRlcmZhY2UgZm9yIHZpZXcgbWFuaXB1bGF0aW9uIHB1YmxpYyBBUElzXG4gKiBAcGFyYW0ge1JlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5SZWFkZXJPcHRpb25zfSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUmVhZGVyVmlldyhvcHRpb25zKSB7XG5cbiAgXy5leHRlbmQodGhpcywgQmFja2JvbmUuRXZlbnRzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBfY3VycmVudFZpZXcgPSB1bmRlZmluZWQ7XG4gIHZhciBfcGFja2FnZSA9IHVuZGVmaW5lZDtcbiAgdmFyIF9zcGluZSA9IHVuZGVmaW5lZDtcbiAgdmFyIF92aWV3ZXJTZXR0aW5ncyA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSk7XG4gIC8vc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBkaXZzXG4gIHZhciBfdXNlclN0eWxlcyA9IG5ldyBTdHlsZUNvbGxlY3Rpb24oKTtcbiAgLy9zdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGVudCBkb2N1bWVudHNcbiAgdmFyIF9ib29rU3R5bGVzID0gbmV3IFN0eWxlQ29sbGVjdGlvbigpO1xuICB2YXIgX2ludGVybmFsTGlua3NTdXBwb3J0ID0gbmV3IEludGVybmFsTGlua3NTdXBwb3J0KHRoaXMpO1xuICB2YXIgX21lZGlhT3ZlcmxheVBsYXllcjtcbiAgdmFyIF9tZWRpYU92ZXJsYXlEYXRhSW5qZWN0b3I7XG4gIHZhciBfaWZyYW1lTG9hZGVyO1xuICB2YXIgXyRlbDtcbiAgdmFyIF9hbm5vdGF0aW9uc01hbmFnZXIgPSBuZXcgQW5ub3RhdGlvbnNNYW5hZ2VyKHNlbGYsIG9wdGlvbnMpO1xuXG4gIC8vV2Ugd2lsbCBjYWxsIG9uVmlld3BvcnRSZXNpemUgYWZ0ZXIgdXNlciBzdG9wcGVkIHJlc2l6aW5nIHdpbmRvd1xuICB2YXIgbGF6eVJlc2l6ZSA9IGV4dGVuZGVkVGhyb3R0bGUoXG4gICAgaGFuZGxlVmlld3BvcnRSZXNpemVTdGFydCxcbiAgICBoYW5kbGVWaWV3cG9ydFJlc2l6ZVRpY2ssXG4gICAgaGFuZGxlVmlld3BvcnRSZXNpemVFbmQsIDI1MCwgMTAwMCwgc2VsZik7XG5cbiAgJCh3aW5kb3cpLm9uKFwicmVzaXplLlJlYWRpdW1TREsucmVhZGVyVmlld1wiLCBsYXp5UmVzaXplKTtcblxuICBpZiAob3B0aW9ucy5lbCBpbnN0YW5jZW9mICQpIHtcbiAgICBfJGVsID0gb3B0aW9ucy5lbDtcbiAgICBjb25zb2xlLmxvZyhcIioqIEVMIGlzIGEgalF1ZXJ5IHNlbGVjdG9yOlwiICsgb3B0aW9ucy5lbC5hdHRyKCdpZCcpKTtcbiAgfSBlbHNlIHtcbiAgICBfJGVsID0gJChvcHRpb25zLmVsKTtcbiAgICBjb25zb2xlLmxvZyhcIioqIEVMIGlzIGEgc3RyaW5nOlwiICsgXyRlbC5hdHRyKCdpZCcpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmlmcmFtZUxvYWRlcikge1xuICAgIF9pZnJhbWVMb2FkZXIgPSBvcHRpb25zLmlmcmFtZUxvYWRlcjtcbiAgfSBlbHNlIHtcbiAgICBfaWZyYW1lTG9hZGVyID0gbmV3IElGcmFtZUxvYWRlcih7XG4gICAgICBtYXRoSmF4VXJsOiBvcHRpb25zLm1hdGhKYXhVcmxcbiAgICB9KTtcbiAgfVxuXG5cbiAgX25lZWRzRml4ZWRMYXlvdXRTY2FsZXJXb3JrQXJvdW5kID0gb3B0aW9ucy5uZWVkc0ZpeGVkTGF5b3V0U2NhbGVyV29ya0Fyb3VuZDtcbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5uZWVkc0ZpeGVkTGF5b3V0U2NhbGVyV29ya0Fyb3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfbmVlZHNGaXhlZExheW91dFNjYWxlcldvcmtBcm91bmQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgdmlldyBiYXNlZCBvbiB0aGUgZ2l2ZW4gdmlldyB0eXBlLlxuICAgKiBAcGFyYW0ge1JlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5WaWV3VHlwZX0gdmlld1R5cGVcbiAgICogQHBhcmFtIHtSZWFkaXVtU0RLLlZpZXdzLlJlYWRlclZpZXcuVmlld0NyZWF0aW9uT3B0aW9uc30gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHRoaXMuY3JlYXRlVmlld0ZvclR5cGUgPSBmdW5jdGlvbih2aWV3VHlwZSwgb3B0aW9ucykge1xuICAgIHZhciBjcmVhdGVkVmlldztcblxuICAgIC8vIE5PVEU6IF8kZWwgPT0gb3B0aW9ucy4kdmlld3BvcnRcbiAgICBfJGVsLmNzcyhcIm92ZXJmbG93XCIsIFwiaGlkZGVuXCIpO1xuXG4gICAgc3dpdGNoICh2aWV3VHlwZSkge1xuICAgICAgY2FzZSBWSUVXX1RZUEVfRklYRUQ6XG5cbiAgICAgICAgXyRlbC5jc3MoXCJvdmVyZmxvd1wiLCBcImF1dG9cIik7IC8vIGZvciBjb250ZW50IHBhbiwgc2VlIHNlbGYuc2V0Wm9vbSgpXG5cbiAgICAgICAgY3JlYXRlZFZpZXcgPSBuZXcgRml4ZWRWaWV3KG9wdGlvbnMsIHNlbGYpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVklFV19UWVBFX1NDUk9MTEVEX0RPQzpcbiAgICAgICAgY3JlYXRlZFZpZXcgPSBuZXcgU2Nyb2xsVmlldyhvcHRpb25zLCBmYWxzZSwgc2VsZik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBWSUVXX1RZUEVfU0NST0xMRURfQ09OVElOVU9VUzpcbiAgICAgICAgY3JlYXRlZFZpZXcgPSBuZXcgU2Nyb2xsVmlldyhvcHRpb25zLCB0cnVlLCBzZWxmKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjcmVhdGVkVmlldyA9IG5ldyBSZWZsb3dhYmxlVmlldyhvcHRpb25zLCBzZWxmKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZWRWaWV3O1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZpZXcgdHlwZSBvZiB0aGUgcmVhZGVyIHZpZXdcbiAgICogQHJldHVybnMge1JlYWRlclZpZXcuVmlld1R5cGV9XG4gICAqL1xuICB0aGlzLmdldEN1cnJlbnRWaWV3VHlwZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKCFfY3VycmVudFZpZXcpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKF9jdXJyZW50VmlldyBpbnN0YW5jZW9mIFJlZmxvd2FibGVWaWV3KSB7XG4gICAgICByZXR1cm4gVklFV19UWVBFX0NPTFVNTklaRUQ7XG4gICAgfVxuXG4gICAgaWYgKF9jdXJyZW50VmlldyBpbnN0YW5jZW9mIEZpeGVkVmlldykge1xuICAgICAgcmV0dXJuIFZJRVdfVFlQRV9GSVhFRDtcbiAgICB9XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3IGluc3RhbmNlb2YgU2Nyb2xsVmlldykge1xuICAgICAgaWYgKF9jdXJyZW50Vmlldy5pc0NvbnRpbnVvdXNTY3JvbGwoKSkge1xuICAgICAgICByZXR1cm4gVklFV19UWVBFX1NDUk9MTEVEX0NPTlRJTlVPVVM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBWSUVXX1RZUEVfU0NST0xMRURfRE9DO1xuICAgIH1cblxuICAgIGNvbnNvbGUuZXJyb3IoXCJVbnJlY29nbml6ZWQgdmlldyB0eXBlXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLy9iYXNlZCBvbiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldC9jY2M/a2V5PTBBb1BNVWtRaGM0d2NkREkwYW5GdldtOTZOMHhSVDE4NFpFOTZNWEZSZEZFJnVzcD1kcml2ZV93ZWIjZ2lkPTAgZG9jdW1lbnRcbiAgZnVuY3Rpb24gZGVkdWNlRGVzaXJlZFZpZXdUeXBlKHNwaW5lSXRlbSkge1xuXG4gICAgLy9jaGVjayBzZXR0aW5nc1xuICAgIGlmIChfdmlld2VyU2V0dGluZ3Muc2Nyb2xsID09IFwic2Nyb2xsLWRvY1wiKSB7XG4gICAgICByZXR1cm4gVklFV19UWVBFX1NDUk9MTEVEX0RPQztcbiAgICB9XG5cbiAgICBpZiAoX3ZpZXdlclNldHRpbmdzLnNjcm9sbCA9PSBcInNjcm9sbC1jb250aW51b3VzXCIpIHtcbiAgICAgIHJldHVybiBWSUVXX1RZUEVfU0NST0xMRURfQ09OVElOVU9VUztcbiAgICB9XG5cbiAgICAvL2lzIGZpeGVkIGxheW91dCBpZ25vcmUgZmxvd1xuICAgIGlmIChzcGluZUl0ZW0uaXNGaXhlZExheW91dCgpKSB7XG4gICAgICByZXR1cm4gVklFV19UWVBFX0ZJWEVEO1xuICAgIH1cblxuICAgIC8vZmxvd1xuICAgIGlmIChzcGluZUl0ZW0uaXNGbG93U2Nyb2xsZWREb2MoKSkge1xuICAgICAgcmV0dXJuIFZJRVdfVFlQRV9TQ1JPTExFRF9ET0M7XG4gICAgfVxuXG4gICAgaWYgKHNwaW5lSXRlbS5pc0Zsb3dTY3JvbGxlZENvbnRpbnVvdXMoKSkge1xuICAgICAgcmV0dXJuIFZJRVdfVFlQRV9TQ1JPTExFRF9DT05USU5VT1VTO1xuICAgIH1cblxuICAgIHJldHVybiBWSUVXX1RZUEVfQ09MVU1OSVpFRDtcbiAgfVxuXG4gIC8vIHJldHVybnMgdHJ1ZSBpcyB2aWV3IGNoYW5nZWRcbiAgZnVuY3Rpb24gaW5pdFZpZXdGb3JJdGVtKHNwaW5lSXRlbSwgY2FsbGJhY2spIHtcblxuICAgIHZhciBkZXNpcmVkVmlld1R5cGUgPSBkZWR1Y2VEZXNpcmVkVmlld1R5cGUoc3BpbmVJdGVtKTtcblxuICAgIGlmIChfY3VycmVudFZpZXcpIHtcblxuICAgICAgaWYgKHNlbGYuZ2V0Q3VycmVudFZpZXdUeXBlKCkgPT0gZGVzaXJlZFZpZXdUeXBlKSB7XG4gICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXNldEN1cnJlbnRWaWV3KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmlldyBjcmVhdGlvbiBvcHRpb25zXG4gICAgICogQHR5cGVkZWYge29iamVjdH0gUmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3LlZpZXdDcmVhdGlvbk9wdGlvbnNcbiAgICAgKiBAcHJvcGVydHkge2pRdWVyeUVsZW1lbnR9ICR2aWV3cG9ydCAgVGhlIHZpZXcgcG9ydCBlbGVtZW50IHRoZSByZWFkZXIgdmlldyBoYXMgY3JlYXRlZC5cbiAgICAgKiBAcHJvcGVydHkge01vZGVscy5TcGluZX0gc3BpbmUgVGhlIHNwaW5lIGl0ZW0gY29sbGVjdGlvbiBvYmplY3RcbiAgICAgKiBAcHJvcGVydHkge1JlYWRpdW1TREsuQ29sbGVjdGlvbnMuU3R5bGVDb2xsZWN0aW9ufSB1c2VyU3R5bGVzIFVzZXIgc3R5bGVzXG4gICAgICogQHByb3BlcnR5IHtSZWFkaXVtU0RLLkNvbGxlY3Rpb25zLlN0eWxlQ29sbGVjdGlvbn0gYm9va1N0eWxlcyBCb29rIHN0eWxlc1xuICAgICAqIEBwcm9wZXJ0eSB7UmVhZGl1bVNESy5WaWV3cy5JRnJhbWVMb2FkZXJ9IGlmcmFtZUxvYWRlciAgIEFuIGluc3RhbmNlIG9mIGFuIGlmcmFtZSBsb2FkZXIgb3Igb25lIGV4cGFuZGluZyBpdC5cbiAgICAgKi9cbiAgICB2YXIgdmlld0NyZWF0aW9uUGFyYW1zID0ge1xuICAgICAgJHZpZXdwb3J0OiBfJGVsLFxuICAgICAgc3BpbmU6IF9zcGluZSxcbiAgICAgIHVzZXJTdHlsZXM6IF91c2VyU3R5bGVzLFxuICAgICAgYm9va1N0eWxlczogX2Jvb2tTdHlsZXMsXG4gICAgICBpZnJhbWVMb2FkZXI6IF9pZnJhbWVMb2FkZXJcbiAgICB9O1xuXG5cbiAgICBfY3VycmVudFZpZXcgPSBzZWxmLmNyZWF0ZVZpZXdGb3JUeXBlKGRlc2lyZWRWaWV3VHlwZSwgdmlld0NyZWF0aW9uUGFyYW1zKTtcbiAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLlJFQURFUl9WSUVXX0NSRUFURUQsIGRlc2lyZWRWaWV3VHlwZSk7XG5cbiAgICBfY3VycmVudFZpZXcub24oRXZlbnRzLkNPTlRFTlRfRE9DVU1FTlRfTE9BREVELCBmdW5jdGlvbigkaWZyYW1lLCBzcGluZUl0ZW0pIHtcblxuICAgICAgaWYgKCFpc0lmcmFtZUFsaXZlKCRpZnJhbWVbMF0pKSByZXR1cm47XG5cbiAgICAgIC8vIHBlcmZvcm1hbmNlIGRlZ3JhZGVzIHdpdGggbGFyZ2UgRE9NIChlLmcuIHdvcmQtbGV2ZWwgdGV4dC1hdWRpbyBzeW5jKVxuICAgICAgX21lZGlhT3ZlcmxheURhdGFJbmplY3Rvci5hdHRhY2hNZWRpYU92ZXJsYXlEYXRhKCRpZnJhbWUsIHNwaW5lSXRlbSwgX3ZpZXdlclNldHRpbmdzKTtcblxuICAgICAgX2ludGVybmFsTGlua3NTdXBwb3J0LnByb2Nlc3NMaW5rRWxlbWVudHMoJGlmcmFtZSwgc3BpbmVJdGVtKTtcbiAgICAgIF9hbm5vdGF0aW9uc01hbmFnZXIuYXR0YWNoQW5ub3RhdGlvbnMoJGlmcmFtZSwgc3BpbmVJdGVtKTtcblxuICAgICAgdmFyIGNvbnRlbnREb2MgPSAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcbiAgICAgIFRyaWdnZXIucmVnaXN0ZXIoY29udGVudERvYyk7XG4gICAgICBTd2l0Y2hlcy5hcHBseShjb250ZW50RG9jKTtcblxuICAgICAgc2VsZi50cmlnZ2VyKEV2ZW50cy5DT05URU5UX0RPQ1VNRU5UX0xPQURFRCwgJGlmcmFtZSwgc3BpbmVJdGVtKTtcbiAgICB9KTtcblxuICAgIF9jdXJyZW50Vmlldy5vbihFdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FEX1NUQVJULCBmdW5jdGlvbigkaWZyYW1lLCBzcGluZUl0ZW0pIHtcbiAgICAgIHNlbGYudHJpZ2dlcihFdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FEX1NUQVJULCAkaWZyYW1lLCBzcGluZUl0ZW0pO1xuICAgIH0pO1xuXG4gICAgX2N1cnJlbnRWaWV3Lm9uKEludGVybmFsRXZlbnRzLkNVUlJFTlRfVklFV19QQUdJTkFUSU9OX0NIQU5HRUQsIGZ1bmN0aW9uKHBhZ2VDaGFuZ2VEYXRhKSB7XG5cbiAgICAgIC8vd2UgY2FsbCBvbiBvblBhZ2VDaGFuZ2VkIGV4cGxpY2l0bHkgaW5zdGVhZCBvZiBzdWJzY3JpYmluZyB0byB0aGUgUmVhZGl1bVNESy5FdmVudHMuUEFHSU5BVElPTl9DSEFOR0VEIGJ5XG4gICAgICAvL21lZGlhT3ZlcmxheVBsYXllciBiZWNhdXNlIHdlIGh2ZSB0byBndWFyYW50ZWUgdGhhdCBtZWRpYU92ZXJsYXlQbGF5ZXIgd2lsbCBiZSB1cGRhdGVkIGJlZm9yZSB0aGUgaG9zdFxuICAgICAgLy9hcHBsaWNhdGlvbiB3aWxsIGJlIG5vdGlmaWVkIGJ5IHRoZSBzYW1lIFJlYWRpdW1TREsuRXZlbnRzLlBBR0lOQVRJT05fQ0hBTkdFRCBldmVudFxuICAgICAgX21lZGlhT3ZlcmxheVBsYXllci5vblBhZ2VDaGFuZ2VkKHBhZ2VDaGFuZ2VEYXRhKTtcblxuICAgICAgc2VsZi50cmlnZ2VyKEV2ZW50cy5QQUdJTkFUSU9OX0NIQU5HRUQsIHBhZ2VDaGFuZ2VEYXRhKTtcbiAgICB9KTtcblxuICAgIF9jdXJyZW50Vmlldy5vbihFdmVudHMuRlhMX1ZJRVdfUkVTSVpFRCwgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLkZYTF9WSUVXX1JFU0laRUQpO1xuICAgIH0pXG5cbiAgICBfY3VycmVudFZpZXcucmVuZGVyKCk7XG4gICAgX2N1cnJlbnRWaWV3LnNldFZpZXdTZXR0aW5ncyhfdmlld2VyU2V0dGluZ3MpO1xuXG4gICAgLy8gd2UgZG8gdGhpcyB0byB3YWl0IHVudGlsIGVsZW1lbnRzIGFyZSByZW5kZXJlZCBvdGhlcndpc2UgYm9vayBpcyBub3QgYWJsZSB0byBkZXRlcm1pbmUgdmlldyBzaXplLlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuXG4gICAgfSwgNTApO1xuXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgc3BpbmUgaXRlbXNcbiAgICpcbiAgICogQHJldHVybnMge01vZGVscy5TcGluZUl0ZW1bXX1cbiAgICovXG4gIHRoaXMuZ2V0TG9hZGVkU3BpbmVJdGVtcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKF9jdXJyZW50Vmlldykge1xuICAgICAgcmV0dXJuIF9jdXJyZW50Vmlldy5nZXRMb2FkZWRTcGluZUl0ZW1zKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlc2V0Q3VycmVudFZpZXcoKSB7XG5cbiAgICBpZiAoIV9jdXJyZW50Vmlldykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGYudHJpZ2dlcihFdmVudHMuUkVBREVSX1ZJRVdfREVTVFJPWUVEKTtcblxuICAgIF9jdXJyZW50Vmlldy5vZmYoSW50ZXJuYWxFdmVudHMuQ1VSUkVOVF9WSUVXX1BBR0lOQVRJT05fQ0hBTkdFRCk7XG4gICAgX2N1cnJlbnRWaWV3LnJlbW92ZSgpO1xuICAgIF9jdXJyZW50VmlldyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50bHkgaW5zdGFuY2VkIHZpZXdlciBzZXR0aW5nc1xuICAgKlxuICAgKiBAcmV0dXJucyB7TW9kZWxzLlZpZXdlclNldHRpbmdzfVxuICAgKi9cbiAgdGhpcy52aWV3ZXJTZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfdmlld2VyU2V0dGluZ3M7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBkYXRhIG9iamVjdCBiYXNlZCBvbiB0aGUgcGFja2FnZSBkb2N1bWVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7TW9kZWxzLlBhY2thZ2V9XG4gICAqL1xuICB0aGlzLnBhY2thZ2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BhY2thZ2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3BpbmUgYXMgYSBkYXRhIG9iamVjdCwgYWxzbyBhY3RzIGFzIGxpc3Qgb2Ygc3BpbmUgaXRlbXNcbiAgICpcbiAgICogQHJldHVybnMge01vZGVscy5TcGluZX1cbiAgICovXG4gIHRoaXMuc3BpbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3NwaW5lO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB1c2VyIENTUyBzdHlsZXMgY29sbGVjdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7UmVhZGl1bVNESy5Db2xsZWN0aW9ucy5TdHlsZUNvbGxlY3Rpb259XG4gICAqL1xuICB0aGlzLnVzZXJTdHlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3VzZXJTdHlsZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIE9wZW4gQm9vayBEYXRhXG4gICAqXG4gICAqIEB0eXBlZGVmIHtvYmplY3R9IFJlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5PcGVuQm9va0RhdGFcbiAgICogQHByb3BlcnR5IHtNb2RlbHMuUGFja2FnZX0gcGFja2FnZSAtIHBhY2thZ2VEYXRhIChyZXF1aXJlZClcbiAgICogQHByb3BlcnR5IHtNb2RlbHMuUGFnZU9wZW5SZXF1ZXN0fSBvcGVuUGFnZVJlcXVlc3QgLSBvcGVuUGFnZVJlcXVlc3REYXRhLCAob3B0aW9uYWwpIGRhdGEgcmVsYXRlZCB0byBvcGVuIHBhZ2UgcmVxdWVzdFxuICAgKiBAcHJvcGVydHkge1JlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5TZXR0aW5nc0RhdGF9IFtzZXR0aW5nc11cbiAgICogQHByb3BlcnR5IHtSZWFkaXVtU0RLLkNvbGxlY3Rpb25zLlN0eWxlQ29sbGVjdGlvbn0gc3R5bGVzOiBbY3NzU3R5bGVzXVxuICAgKiBAdG9kbyBEZWZpbmUgbWlzc2luZyB0eXBlc1xuICAgKi9cblxuICAvKipcbiAgICogVHJpZ2dlcnMgdGhlIHByb2Nlc3Mgb2Ygb3BlbmluZyB0aGUgYm9vayBhbmQgcmVxdWVzdGluZyByZXNvdXJjZXMgc3BlY2lmaWVkIGluIHRoZSBwYWNrYWdlRGF0YVxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5PcGVuQm9va0RhdGF9IG9wZW5Cb29rRGF0YSAtIG9iamVjdCB3aXRoIG9wZW4gYm9vayBkYXRhXG4gICAqL1xuICB0aGlzLm9wZW5Cb29rID0gZnVuY3Rpb24ob3BlbkJvb2tEYXRhKSB7XG5cbiAgICB2YXIgcGFja2FnZURhdGEgPSBvcGVuQm9va0RhdGEucGFja2FnZSA/IG9wZW5Cb29rRGF0YS5wYWNrYWdlIDogb3BlbkJvb2tEYXRhO1xuXG4gICAgX3BhY2thZ2UgPSBuZXcgUGFja2FnZShwYWNrYWdlRGF0YSk7XG5cbiAgICBfc3BpbmUgPSBfcGFja2FnZS5zcGluZTtcbiAgICBfc3BpbmUuaGFuZGxlTGluZWFyKHRydWUpO1xuXG4gICAgaWYgKF9tZWRpYU92ZXJsYXlQbGF5ZXIpIHtcbiAgICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIucmVzZXQoKTtcbiAgICB9XG5cbiAgICBfbWVkaWFPdmVybGF5UGxheWVyID0gbmV3IE1lZGlhT3ZlcmxheVBsYXllcihzZWxmLCAkLnByb3h5KG9uTWVkaWFQbGF5ZXJTdGF0dXNDaGFuZ2VkLCBzZWxmKSk7XG4gICAgX21lZGlhT3ZlcmxheVBsYXllci5zZXRBdXRvbWF0aWNOZXh0U21pbChfdmlld2VyU2V0dGluZ3MubWVkaWFPdmVybGF5c0F1dG9tYXRpY1BhZ2VUdXJuID8gdHJ1ZSA6IGZhbHNlKTsgLy8ganVzdCB0byBlbnN1cmUgdGhlIGludGVybmFsIHZhciBpcyBzZXQgdG8gdGhlIGRlZmF1bHQgc2V0dGluZ3MgKHVzZXIgc2V0dGluZ3MgYXJlIGFwcGxpZWQgYmVsb3cgYXQgc2VsZi51cGRhdGVTZXR0aW5ncyhvcGVuQm9va0RhdGEuc2V0dGluZ3MpOylcblxuICAgIF9tZWRpYU92ZXJsYXlEYXRhSW5qZWN0b3IgPSBuZXcgTWVkaWFPdmVybGF5RGF0YUluamVjdG9yKF9wYWNrYWdlLm1lZGlhX292ZXJsYXksIF9tZWRpYU92ZXJsYXlQbGF5ZXIpO1xuXG5cbiAgICByZXNldEN1cnJlbnRWaWV3KCk7XG5cbiAgICBpZiAob3BlbkJvb2tEYXRhLnNldHRpbmdzKSB7XG4gICAgICBzZWxmLnVwZGF0ZVNldHRpbmdzKG9wZW5Cb29rRGF0YS5zZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgaWYgKG9wZW5Cb29rRGF0YS5zdHlsZXMpIHtcbiAgICAgIHNlbGYuc2V0U3R5bGVzKG9wZW5Cb29rRGF0YS5zdHlsZXMpO1xuICAgIH1cblxuICAgIHZhciBwYWdlUmVxdWVzdERhdGEgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAob3BlbkJvb2tEYXRhLm9wZW5QYWdlUmVxdWVzdCkge1xuXG4gICAgICBpZiAob3BlbkJvb2tEYXRhLm9wZW5QYWdlUmVxdWVzdC5pZHJlZiB8fCAob3BlbkJvb2tEYXRhLm9wZW5QYWdlUmVxdWVzdC5jb250ZW50UmVmVXJsICYmIG9wZW5Cb29rRGF0YS5vcGVuUGFnZVJlcXVlc3Quc291cmNlRmlsZUhyZWYpKSB7XG4gICAgICAgIHBhZ2VSZXF1ZXN0RGF0YSA9IG9wZW5Cb29rRGF0YS5vcGVuUGFnZVJlcXVlc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkludmFsaWQgcGFnZSByZXF1ZXN0IGRhdGE6IGlkcmVmIHJlcXVpcmVkIVwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZmFsbGJhY2sgPSBmYWxzZTtcbiAgICBpZiAocGFnZVJlcXVlc3REYXRhKSB7XG5cbiAgICAgIHBhZ2VSZXF1ZXN0RGF0YSA9IG9wZW5Cb29rRGF0YS5vcGVuUGFnZVJlcXVlc3Q7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlUmVxdWVzdERhdGEuaWRyZWYpIHtcblxuICAgICAgICAgIGlmIChwYWdlUmVxdWVzdERhdGEuc3BpbmVJdGVtUGFnZUluZGV4KSB7XG4gICAgICAgICAgICBmYWxsYmFjayA9ICFzZWxmLm9wZW5TcGluZUl0ZW1QYWdlKHBhZ2VSZXF1ZXN0RGF0YS5pZHJlZiwgcGFnZVJlcXVlc3REYXRhLnNwaW5lSXRlbVBhZ2VJbmRleCwgc2VsZik7XG4gICAgICAgICAgfSBlbHNlIGlmIChwYWdlUmVxdWVzdERhdGEuZWxlbWVudENmaSkge1xuICAgICAgICAgICAgZmFsbGJhY2sgPSAhc2VsZi5vcGVuU3BpbmVJdGVtRWxlbWVudENmaShwYWdlUmVxdWVzdERhdGEuaWRyZWYsIHBhZ2VSZXF1ZXN0RGF0YS5lbGVtZW50Q2ZpLCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmFsbGJhY2sgPSAhc2VsZi5vcGVuU3BpbmVJdGVtUGFnZShwYWdlUmVxdWVzdERhdGEuaWRyZWYsIDAsIHNlbGYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmYWxsYmFjayA9ICFzZWxmLm9wZW5Db250ZW50VXJsKHBhZ2VSZXF1ZXN0RGF0YS5jb250ZW50UmVmVXJsLCBwYWdlUmVxdWVzdERhdGEuc291cmNlRmlsZUhyZWYsIHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIm9wZW5QYWdlUmVxdWVzdCBmYWlsOiBmYWxsYmFjayB0byBmaXJzdCBwYWdlIVwiKVxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICBmYWxsYmFjayA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZhbGxiYWNrID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZmFsbGJhY2spIHsgLy8gaWYgd2Ugd2hlcmUgbm90IGFza2VkIHRvIG9wZW4gc3BlY2lmaWMgcGFnZSB3ZSB3aWxsIG9wZW4gdGhlIGZpcnN0IG9uZVxuXG4gICAgICB2YXIgc3BpbmVJdGVtID0gX3NwaW5lLmZpcnN0KCk7XG4gICAgICBpZiAoc3BpbmVJdGVtKSB7XG4gICAgICAgIHZhciBwYWdlT3BlblJlcXVlc3QgPSBuZXcgUGFnZU9wZW5SZXF1ZXN0KHNwaW5lSXRlbSwgc2VsZik7XG4gICAgICAgIHBhZ2VPcGVuUmVxdWVzdC5zZXRGaXJzdFBhZ2UoKTtcbiAgICAgICAgb3BlblBhZ2UocGFnZU9wZW5SZXF1ZXN0LCAwKTtcbiAgICAgIH1cblxuICAgIH1cblxuICB9O1xuXG4gIGZ1bmN0aW9uIG9uTWVkaWFQbGF5ZXJTdGF0dXNDaGFuZ2VkKHN0YXR1cykge1xuICAgIHNlbGYudHJpZ2dlcihFdmVudHMuTUVESUFfT1ZFUkxBWV9TVEFUVVNfQ0hBTkdFRCwgc3RhdHVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGbGlwcyB0aGUgcGFnZSBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAqIFRha2VzIHRvIGFjY291bnQgdGhlIHBhZ2UgcHJvZ3Jlc3Npb24gZGlyZWN0aW9uIHRvIGRlY2lkZSB0byBmbGlwIHRvIHByZXYgb3IgbmV4dCBwYWdlLlxuICAgKi9cbiAgdGhpcy5vcGVuUGFnZUxlZnQgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmIChfcGFja2FnZS5zcGluZS5pc0xlZnRUb1JpZ2h0KCkpIHtcbiAgICAgIHNlbGYub3BlblBhZ2VQcmV2KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYub3BlblBhZ2VOZXh0KCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBGbGlwcyB0aGUgcGFnZSBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIFRha2VzIHRvIGFjY291bnQgdGhlIHBhZ2UgcHJvZ3Jlc3Npb24gZGlyZWN0aW9uIHRvIGRlY2lkZSB0byBmbGlwIHRvIHByZXYgb3IgbmV4dCBwYWdlLlxuICAgKi9cbiAgdGhpcy5vcGVuUGFnZVJpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoX3BhY2thZ2Uuc3BpbmUuaXNMZWZ0VG9SaWdodCgpKSB7XG4gICAgICBzZWxmLm9wZW5QYWdlTmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLm9wZW5QYWdlUHJldigpO1xuICAgIH1cblxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGlmIHRoZSBjdXJyZW50IGNoaWxkIHZpZXcgaXMgYW4gaW5zdGFuY2Ugb2YgYSBmaXhlZCBwYWdlIHZpZXdcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzQ3VycmVudFZpZXdGaXhlZExheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfY3VycmVudFZpZXcgaW5zdGFuY2VvZiBGaXhlZFZpZXc7XG4gIH07XG5cbiAgLyoqXG4gICAqIFpvb20gb3B0aW9uc1xuICAgKlxuICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBSZWFkaXVtU0RLLlZpZXdzLlJlYWRlclZpZXcuWm9vbU9wdGlvbnNcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHN0eWxlIC0gXCJ1c2VyXCJ8XCJmaXQtc2NyZWVuXCJ8XCJmaXQtd2lkdGhcIlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gc2NhbGUgLSAwLjAgdG8gMS4wXG4gICAqL1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHpvb20gb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFkaXVtU0RLLlZpZXdzLlJlYWRlclZpZXcuWm9vbU9wdGlvbnN9IHpvb20gWm9vbSBvcHRpb25zXG4gICAqL1xuICB0aGlzLnNldFpvb20gPSBmdW5jdGlvbih6b29tKSB7XG4gICAgLy8gem9vbSBvbmx5IGhhbmRsZWQgYnkgZml4ZWQgbGF5b3V0IHZpZXdzIFxuICAgIGlmIChzZWxmLmlzQ3VycmVudFZpZXdGaXhlZExheW91dCgpKSB7XG4gICAgICBfY3VycmVudFZpZXcuc2V0Wm9vbSh6b29tKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmlldyBzY2FsZSBhcyBhIHBlcmNlbnRhZ2VcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHRoaXMuZ2V0Vmlld1NjYWxlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYuaXNDdXJyZW50Vmlld0ZpeGVkTGF5b3V0KCkpIHtcbiAgICAgIHJldHVybiAxMDAgKiBfY3VycmVudFZpZXcuZ2V0Vmlld1NjYWxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAxMDA7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBTZXR0aW5ncyBEYXRhXG4gICAqXG4gICAqIEB0eXBlZGVmIHtvYmplY3R9IFJlYWRpdW1TREsuVmlld3MuUmVhZGVyVmlldy5TZXR0aW5nc0RhdGFcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGZvbnRTaXplIC0gRm9udCBzaXplIGFzIHBlcmNlbnRhZ2VcbiAgICogQHByb3BlcnR5IHsoc3RyaW5nfGJvb2xlYW4pfSBzeW50aGV0aWNTcHJlYWQgLSBcImF1dG9cInx0cnVlfGZhbHNlXG4gICAqIEBwcm9wZXJ0eSB7KHN0cmluZ3xib29sZWFuKX0gc2Nyb2xsIC0gXCJhdXRvXCJ8dHJ1ZXxmYWxzZVxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGRvTm90VXBkYXRlVmlldyAtIEluZGljYXRlcyB3aGV0aGVyIHRoZSB2aWV3IHNob3VsZCBiZSB1cGRhdGVkIGFmdGVyIHRoZSBzZXR0aW5ncyBhcmUgYXBwbGllZFxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IG1lZGlhT3ZlcmxheXNFbmFibGVDbGljayAtIEluZGljYXRlcyB3aGV0aGVyIG1lZGlhIG92ZXJsYXlzIGFyZSBpbnRlcmFjdGl2ZSBvbiBtb3VzZSBjbGlja3NcbiAgICovXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgcmVhZGVyIHZpZXcgYmFzZWQgb24gdGhlIHNldHRpbmdzIHNwZWNpZmllZCBpbiBzZXR0aW5nc0RhdGEgb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7UmVhZGl1bVNESy5WaWV3cy5SZWFkZXJWaWV3LlNldHRpbmdzRGF0YX0gc2V0dGluZ3NEYXRhIFNldHRpbmdzIGRhdGFcbiAgICogQGZpcmVzIFJlYWRpdW1TREsuRXZlbnRzLlNFVFRJTkdTX0FQUExJRURcbiAgICovXG4gIHRoaXMudXBkYXRlU2V0dGluZ3MgPSBmdW5jdGlvbihzZXR0aW5nc0RhdGEpIHtcblxuICAgIC8vY29uc29sZS5kZWJ1ZyhcIlVwZGF0ZVNldHRpbmdzOiBcIiArIEpTT04uc3RyaW5naWZ5KHNldHRpbmdzRGF0YSkpO1xuXG4gICAgX3ZpZXdlclNldHRpbmdzLnVwZGF0ZShzZXR0aW5nc0RhdGEpO1xuXG4gICAgaWYgKF9tZWRpYU92ZXJsYXlQbGF5ZXIpIHtcbiAgICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIuc2V0QXV0b21hdGljTmV4dFNtaWwoX3ZpZXdlclNldHRpbmdzLm1lZGlhT3ZlcmxheXNBdXRvbWF0aWNQYWdlVHVybiA/IHRydWUgOiBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKF9jdXJyZW50VmlldyAmJiAhc2V0dGluZ3NEYXRhLmRvTm90VXBkYXRlVmlldykge1xuXG4gICAgICB2YXIgYm9va01hcmsgPSBfY3VycmVudFZpZXcuYm9va21hcmtDdXJyZW50UGFnZSgpO1xuXG4gICAgICBpZiAoYm9va01hcmsgJiYgYm9va01hcmsuaWRyZWYpIHtcblxuICAgICAgICB2YXIgd2FzUGxheWluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoX2N1cnJlbnRWaWV3LmlzUmVmbG93YWJsZSAmJiBfY3VycmVudFZpZXcuaXNSZWZsb3dhYmxlKCkpIHtcbiAgICAgICAgICB3YXNQbGF5aW5nID0gc2VsZi5pc1BsYXlpbmdNZWRpYU92ZXJsYXkoKTtcbiAgICAgICAgICBpZiAod2FzUGxheWluZykge1xuICAgICAgICAgICAgc2VsZi5wYXVzZU1lZGlhT3ZlcmxheSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzcGluZUl0ZW0gPSBfc3BpbmUuZ2V0SXRlbUJ5SWQoYm9va01hcmsuaWRyZWYpO1xuXG4gICAgICAgIGluaXRWaWV3Rm9ySXRlbShzcGluZUl0ZW0sIGZ1bmN0aW9uKGlzVmlld0NoYW5nZWQpIHtcblxuICAgICAgICAgIGlmICghaXNWaWV3Q2hhbmdlZCkge1xuICAgICAgICAgICAgX2N1cnJlbnRWaWV3LnNldFZpZXdTZXR0aW5ncyhfdmlld2VyU2V0dGluZ3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYub3BlblNwaW5lSXRlbUVsZW1lbnRDZmkoYm9va01hcmsuaWRyZWYsIGJvb2tNYXJrLmNvbnRlbnRDRkksIHNlbGYpO1xuXG4gICAgICAgICAgaWYgKHdhc1BsYXlpbmcpIHtcbiAgICAgICAgICAgIHNlbGYucGxheU1lZGlhT3ZlcmxheSgpO1xuICAgICAgICAgICAgLy8gc2V0VGltZW91dChmdW5jdGlvbigpXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyB9LCA2MCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKEV2ZW50cy5TRVRUSU5HU19BUFBMSUVEKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGYudHJpZ2dlcihFdmVudHMuU0VUVElOR1NfQVBQTElFRCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBuZXh0IHBhZ2UuXG4gICAqL1xuICB0aGlzLm9wZW5QYWdlTmV4dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKHNlbGYuZ2V0Q3VycmVudFZpZXdUeXBlKCkgPT09IFZJRVdfVFlQRV9TQ1JPTExFRF9DT05USU5VT1VTKSB7XG4gICAgICBfY3VycmVudFZpZXcub3BlblBhZ2VOZXh0KHNlbGYpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwYWdpbmF0aW9uSW5mbyA9IF9jdXJyZW50Vmlldy5nZXRQYWdpbmF0aW9uSW5mbygpO1xuXG4gICAgaWYgKHBhZ2luYXRpb25JbmZvLm9wZW5QYWdlcy5sZW5ndGggPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYXN0T3BlblBhZ2UgPSBwYWdpbmF0aW9uSW5mby5vcGVuUGFnZXNbcGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKGxhc3RPcGVuUGFnZS5zcGluZUl0ZW1QYWdlSW5kZXggPCBsYXN0T3BlblBhZ2Uuc3BpbmVJdGVtUGFnZUNvdW50IC0gMSkge1xuICAgICAgX2N1cnJlbnRWaWV3Lm9wZW5QYWdlTmV4dChzZWxmKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFNwaW5lSXRlbSA9IF9zcGluZS5nZXRJdGVtQnlJZChsYXN0T3BlblBhZ2UuaWRyZWYpO1xuXG4gICAgdmFyIG5leHRTcGluZUl0ZW0gPSBfc3BpbmUubmV4dEl0ZW0oY3VycmVudFNwaW5lSXRlbSk7XG5cbiAgICBpZiAoIW5leHRTcGluZUl0ZW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3BlblBhZ2VSZXF1ZXN0ID0gbmV3IFBhZ2VPcGVuUmVxdWVzdChuZXh0U3BpbmVJdGVtLCBzZWxmKTtcbiAgICBvcGVuUGFnZVJlcXVlc3Quc2V0Rmlyc3RQYWdlKCk7XG5cbiAgICBvcGVuUGFnZShvcGVuUGFnZVJlcXVlc3QsIDIpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgcHJldmlvdXMgcGFnZS5cbiAgICovXG4gIHRoaXMub3BlblBhZ2VQcmV2ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZiAoc2VsZi5nZXRDdXJyZW50Vmlld1R5cGUoKSA9PT0gVklFV19UWVBFX1NDUk9MTEVEX0NPTlRJTlVPVVMpIHtcbiAgICAgIF9jdXJyZW50Vmlldy5vcGVuUGFnZVByZXYoc2VsZik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhZ2luYXRpb25JbmZvID0gX2N1cnJlbnRWaWV3LmdldFBhZ2luYXRpb25JbmZvKCk7XG5cbiAgICBpZiAocGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0T3BlblBhZ2UgPSBwYWdpbmF0aW9uSW5mby5vcGVuUGFnZXNbMF07XG5cbiAgICBpZiAoZmlyc3RPcGVuUGFnZS5zcGluZUl0ZW1QYWdlSW5kZXggPiAwKSB7XG4gICAgICBfY3VycmVudFZpZXcub3BlblBhZ2VQcmV2KHNlbGYpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50U3BpbmVJdGVtID0gX3NwaW5lLmdldEl0ZW1CeUlkKGZpcnN0T3BlblBhZ2UuaWRyZWYpO1xuXG4gICAgdmFyIHByZXZTcGluZUl0ZW0gPSBfc3BpbmUucHJldkl0ZW0oY3VycmVudFNwaW5lSXRlbSk7XG5cbiAgICBpZiAoIXByZXZTcGluZUl0ZW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3BlblBhZ2VSZXF1ZXN0ID0gbmV3IFBhZ2VPcGVuUmVxdWVzdChwcmV2U3BpbmVJdGVtLCBzZWxmKTtcbiAgICBvcGVuUGFnZVJlcXVlc3Quc2V0TGFzdFBhZ2UoKTtcblxuICAgIG9wZW5QYWdlKG9wZW5QYWdlUmVxdWVzdCwgMSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0U3BpbmVJdGVtKGlkcmVmKSB7XG5cbiAgICBpZiAoIWlkcmVmKSB7XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiaWRyZWYgcGFyYW1ldGVyIHZhbHVlIG1pc3NpbmchXCIpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgc3BpbmVJdGVtID0gX3NwaW5lLmdldEl0ZW1CeUlkKGlkcmVmKTtcbiAgICBpZiAoIXNwaW5lSXRlbSkge1xuICAgICAgY29uc29sZS5sb2coXCJTcGluZSBpdGVtIHdpdGggaWQgXCIgKyBpZHJlZiArIFwiIG5vdCBmb3VuZCFcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBzcGluZUl0ZW07XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgcGFnZSBvZiB0aGUgc3BpbmUgaXRlbSB3aXRoIGVsZW1lbnQgd2l0aCBwcm92aWRlZCBjZmlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkcmVmIElkIG9mIHRoZSBzcGluZSBpdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50Q2ZpIENGSSBvZiB0aGUgZWxlbWVudCB0byBiZSBzaG93blxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5pdGlhdG9yIG9wdGlvbmFsXG4gICAqL1xuICB0aGlzLm9wZW5TcGluZUl0ZW1FbGVtZW50Q2ZpID0gZnVuY3Rpb24oaWRyZWYsIGVsZW1lbnRDZmksIGluaXRpYXRvcikge1xuXG4gICAgdmFyIHNwaW5lSXRlbSA9IGdldFNwaW5lSXRlbShpZHJlZik7XG5cbiAgICBpZiAoIXNwaW5lSXRlbSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBwYWdlRGF0YSA9IG5ldyBQYWdlT3BlblJlcXVlc3Qoc3BpbmVJdGVtLCBpbml0aWF0b3IpO1xuICAgIGlmIChlbGVtZW50Q2ZpKSB7XG4gICAgICBwYWdlRGF0YS5zZXRFbGVtZW50Q2ZpKGVsZW1lbnRDZmkpO1xuICAgIH1cblxuICAgIG9wZW5QYWdlKHBhZ2VEYXRhLCAwKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBPcGVucyBzcGVjaWZpZWQgcGFnZSBpbmRleCBvZiB0aGUgY3VycmVudCBzcGluZSBpdGVtXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlSW5kZXggWmVybyBiYXNlZCBpbmRleCBvZiB0aGUgcGFnZSBpbiB0aGUgY3VycmVudCBzcGluZSBpdGVtXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbml0aWF0b3Igb3B0aW9uYWxcbiAgICovXG4gIHRoaXMub3BlblBhZ2VJbmRleCA9IGZ1bmN0aW9uKHBhZ2VJbmRleCwgaW5pdGlhdG9yKSB7XG5cbiAgICBpZiAoIV9jdXJyZW50Vmlldykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBwYWdlUmVxdWVzdDtcblxuICAgIGlmIChfcGFja2FnZS5pc0ZpeGVkTGF5b3V0KCkpIHtcbiAgICAgIHZhciBzcGluZUl0ZW0gPSBfc3BpbmUuaXRlbXNbcGFnZUluZGV4XTtcbiAgICAgIGlmICghc3BpbmVJdGVtKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcGFnZVJlcXVlc3QgPSBuZXcgUGFnZU9wZW5SZXF1ZXN0KHNwaW5lSXRlbSwgaW5pdGlhdG9yKTtcbiAgICAgIHBhZ2VSZXF1ZXN0LnNldFBhZ2VJbmRleCgwKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgc3BpbmVJdGVtcyA9IHRoaXMuZ2V0TG9hZGVkU3BpbmVJdGVtcygpO1xuICAgICAgaWYgKHNwaW5lSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICBwYWdlUmVxdWVzdCA9IG5ldyBQYWdlT3BlblJlcXVlc3Qoc3BpbmVJdGVtc1swXSwgaW5pdGlhdG9yKTtcbiAgICAgICAgcGFnZVJlcXVlc3Quc2V0UGFnZUluZGV4KHBhZ2VJbmRleCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb3BlblBhZ2UocGFnZVJlcXVlc3QsIDApO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gZGlyOiAwID0+IG5ldyBvciBzYW1lIHBhZ2UsIDEgPT4gcHJldmlvdXMsIDIgPT4gbmV4dFxuICBmdW5jdGlvbiBvcGVuUGFnZShwYWdlUmVxdWVzdCwgZGlyKSB7XG5cbiAgICBpbml0Vmlld0Zvckl0ZW0ocGFnZVJlcXVlc3Quc3BpbmVJdGVtLCBmdW5jdGlvbihpc1ZpZXdDaGFuZ2VkKSB7XG5cbiAgICAgIGlmICghaXNWaWV3Q2hhbmdlZCkge1xuICAgICAgICBfY3VycmVudFZpZXcuc2V0Vmlld1NldHRpbmdzKF92aWV3ZXJTZXR0aW5ncyk7XG4gICAgICB9XG5cbiAgICAgIF9jdXJyZW50Vmlldy5vcGVuUGFnZShwYWdlUmVxdWVzdCwgZGlyKTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIE9wZW5zIHBhZ2UgaW5kZXggb2YgdGhlIHNwaW5lIGl0ZW0gd2l0aCBpZHJlZiBwcm92aWRlZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRyZWYgSWQgb2YgdGhlIHNwaW5lIGl0ZW1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2VJbmRleCBaZXJvIGJhc2VkIGluZGV4IG9mIHRoZSBwYWdlIGluIHRoZSBzcGluZSBpdGVtXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbml0aWF0b3Igb3B0aW9uYWxcbiAgICovXG4gIHRoaXMub3BlblNwaW5lSXRlbVBhZ2UgPSBmdW5jdGlvbihpZHJlZiwgcGFnZUluZGV4LCBpbml0aWF0b3IpIHtcblxuICAgIHZhciBzcGluZUl0ZW0gPSBnZXRTcGluZUl0ZW0oaWRyZWYpO1xuXG4gICAgaWYgKCFzcGluZUl0ZW0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcGFnZURhdGEgPSBuZXcgUGFnZU9wZW5SZXF1ZXN0KHNwaW5lSXRlbSwgaW5pdGlhdG9yKTtcbiAgICBpZiAocGFnZUluZGV4KSB7XG4gICAgICBwYWdlRGF0YS5zZXRQYWdlSW5kZXgocGFnZUluZGV4KTtcbiAgICB9XG5cbiAgICBvcGVuUGFnZShwYWdlRGF0YSwgMCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IENTUyBTdHlsZXMgdG8gdGhlIHJlYWRlciBjb250YWluZXJcbiAgICpcbiAgICogQHBhcmFtIHtSZWFkaXVtU0RLLkNvbGxlY3Rpb25zLlN0eWxlQ29sbGVjdGlvbn0gc3R5bGVzICAgU3R5bGUgY29sbGVjdGlvbiBjb250YWluaW5nIHNlbGVjdG9yIHByb3BlcnR5IGFuZCBkZWNsYXJhdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9Ob3RVcGRhdGVWaWV3ICAgICAgICAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdG8gdXBkYXRlIHRoZSB2aWV3IGFmdGVyIHRoZSBzdHlsZXMgYXJlIGFwcGxpZWQuXG4gICAqL1xuICB0aGlzLnNldFN0eWxlcyA9IGZ1bmN0aW9uKHN0eWxlcywgZG9Ob3RVcGRhdGVWaWV3KSB7XG5cbiAgICB2YXIgY291bnQgPSBzdHlsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBpZiAoc3R5bGVzW2ldLmRlY2xhcmF0aW9ucykge1xuICAgICAgICBfdXNlclN0eWxlcy5hZGRTdHlsZShzdHlsZXNbaV0uc2VsZWN0b3IsIHN0eWxlc1tpXS5kZWNsYXJhdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3VzZXJTdHlsZXMucmVtb3ZlU3R5bGUoc3R5bGVzW2ldLnNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBseVN0eWxlcyhkb05vdFVwZGF0ZVZpZXcpO1xuXG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCBDU1MgU3R5bGVzIHRvIHRoZSBjb250ZW50IGRvY3VtZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge1JlYWRpdW1TREsuQ29sbGVjdGlvbnMuU3R5bGVDb2xsZWN0aW9ufSBzdHlsZXMgICAgU3R5bGUgY29sbGVjdGlvbiBjb250YWluaW5nIHNlbGVjdG9yIHByb3BlcnR5IGFuZCBkZWNsYXJhdGlvbnMgb2JqZWN0XG4gICAqL1xuICB0aGlzLnNldEJvb2tTdHlsZXMgPSBmdW5jdGlvbihzdHlsZXMpIHtcblxuICAgIHZhciBjb3VudCA9IHN0eWxlcy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIF9ib29rU3R5bGVzLmFkZFN0eWxlKHN0eWxlc1tpXS5zZWxlY3Rvciwgc3R5bGVzW2ldLmRlY2xhcmF0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKF9jdXJyZW50Vmlldykge1xuICAgICAgX2N1cnJlbnRWaWV3LmFwcGx5Qm9va1N0eWxlcygpO1xuICAgIH1cblxuICB9O1xuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGVsZW1lbnQgZnJvbSBhY3RpdmUgY29udGVudCBkb2N1bWVudHMgYmFzZWQgb24gYSBxdWVyeSBzZWxlY3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtNb2RlbHMuU3BpbmVJdGVtfSBzcGluZUl0ZW0gICAgICAgVGhlIHNwaW5lIGl0ZW0gb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCBhbiBhY3RpdmUgY29udGVudCBkb2N1bWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgICAgICAgICAgICAgICAgICAgICAgVGhlIHF1ZXJ5IHNlbGVjdG9yXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudHx1bmRlZmluZWR9XG4gICAqL1xuICB0aGlzLmdldEVsZW1lbnQgPSBmdW5jdGlvbihzcGluZUl0ZW0sIHNlbGVjdG9yKSB7XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3KSB7XG4gICAgICByZXR1cm4gX2N1cnJlbnRWaWV3LmdldEVsZW1lbnQoc3BpbmVJdGVtLCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICAvKipcbiAgICogR2V0cyBhbiBlbGVtZW50IGZyb20gYWN0aXZlIGNvbnRlbnQgZG9jdW1lbnRzIGJhc2VkIG9uIGFuIGVsZW1lbnQgaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7TW9kZWxzLlNwaW5lSXRlbX0gc3BpbmVJdGVtICAgICAgVGhlIHNwaW5lIGl0ZW0gb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCBhbiBhY3RpdmUgY29udGVudCBkb2N1bWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGVsZW1lbnQgaWRcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuZ2V0RWxlbWVudEJ5SWQgPSBmdW5jdGlvbihzcGluZUl0ZW0sIGlkKSB7XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3KSB7XG4gICAgICByZXR1cm4gX2N1cnJlbnRWaWV3LmdldEVsZW1lbnRCeUlkKHNwaW5lSXRlbSwgaWQpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gZWxlbWVudCBmcm9tIGFjdGl2ZSBjb250ZW50IGRvY3VtZW50cyBiYXNlZCBvbiBhIGNvbnRlbnQgQ0ZJLlxuICAgKlxuICAgKiBAcGFyYW0ge01vZGVscy5TcGluZUl0ZW19IHNwaW5lSXRlbSAgICAgVGhlIHNwaW5lIGl0ZW0gaWRyZWYgYXNzb2NpYXRlZCB3aXRoIGFuIGFjdGl2ZSBjb250ZW50IGRvY3VtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjZmkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBwYXJ0aWFsIGNvbnRlbnQgQ0ZJXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFtjbGFzc0JsYWNrbGlzdF1cbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2VsZW1lbnRCbGFja2xpc3RdXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFtpZEJsYWNrbGlzdF1cbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuZ2V0RWxlbWVudEJ5Q2ZpID0gZnVuY3Rpb24oc3BpbmVJdGVtLCBjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCkge1xuXG4gICAgaWYgKF9jdXJyZW50Vmlldykge1xuICAgICAgcmV0dXJuIF9jdXJyZW50Vmlldy5nZXRFbGVtZW50QnlDZmkoc3BpbmVJdGVtLCBjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICB9O1xuXG4gIGZ1bmN0aW9uIGFwcGx5U3R5bGVzKGRvTm90VXBkYXRlVmlldykge1xuXG4gICAgc2V0U3R5bGVzKF91c2VyU3R5bGVzLmdldFN0eWxlcygpLCBfJGVsKTtcblxuICAgIGlmIChfbWVkaWFPdmVybGF5UGxheWVyKVxuICAgICAgX21lZGlhT3ZlcmxheVBsYXllci5hcHBseVN0eWxlcygpO1xuXG4gICAgaWYgKGRvTm90VXBkYXRlVmlldykgcmV0dXJuO1xuXG4gICAgaWYgKF9jdXJyZW50Vmlldykge1xuICAgICAgX2N1cnJlbnRWaWV3LmFwcGx5U3R5bGVzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGEgY29udGVudCB1cmwgZnJvbSBhIG1lZGlhIHBsYXllciBjb250ZXh0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50UmVmVXJsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VGaWxlSHJlZlxuICAgKiBAcGFyYW0gb2Zmc2V0XG4gICAqL1xuICB0aGlzLm1lZGlhT3ZlcmxheXNPcGVuQ29udGVudFVybCA9IGZ1bmN0aW9uKGNvbnRlbnRSZWZVcmwsIHNvdXJjZUZpbGVIcmVmLCBvZmZzZXQpIHtcbiAgICBfbWVkaWFPdmVybGF5UGxheWVyLm1lZGlhT3ZlcmxheXNPcGVuQ29udGVudFVybChjb250ZW50UmVmVXJsLCBzb3VyY2VGaWxlSHJlZiwgb2Zmc2V0KTtcbiAgfTtcblxuXG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBjb250ZW50IGRvY3VtZW50IHNwZWNpZmllZCBieSB0aGUgdXJsXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50UmVmVXJsIFVybCBvZiB0aGUgY29udGVudCBkb2N1bWVudFxuICAgKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0gc291cmNlRmlsZUhyZWYgVXJsIHRvIHRoZSBmaWxlIHRoYXQgY29udGVudFJlZlVybCBpcyByZWxhdGl2ZSB0by4gSWYgY29udGVudFJlZlVybCBpc1xuICAgKiByZWxhdGl2ZSBvdCB0aGUgc291cmNlIGZpbGUgdGhhdCBjb250YWlucyBpdCBpbnN0ZWFkIG9mIHRoZSBwYWNrYWdlIGZpbGUgKGV4LiBUT0MgZmlsZSkgV2UgaGF2ZSB0byBrbm93IHRoZVxuICAgKiBzb3VyY2VGaWxlSHJlZiB0byByZXNvbHZlIGNvbnRlbnRVcmwgcmVsYXRpdmUgdG8gdGhlIHBhY2thZ2UgZmlsZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGluaXRpYXRvciBvcHRpb25hbFxuICAgKi9cbiAgdGhpcy5vcGVuQ29udGVudFVybCA9IGZ1bmN0aW9uKGNvbnRlbnRSZWZVcmwsIHNvdXJjZUZpbGVIcmVmLCBpbml0aWF0b3IpIHtcblxuICAgIHZhciBjb21iaW5lZFBhdGggPSBSZXNvbHZlQ29udGVudFJlZihjb250ZW50UmVmVXJsLCBzb3VyY2VGaWxlSHJlZik7XG5cbiAgICB2YXIgaGFzaEluZGV4ID0gY29tYmluZWRQYXRoLmluZGV4T2YoXCIjXCIpO1xuICAgIHZhciBocmVmUGFydDtcbiAgICB2YXIgZWxlbWVudElkO1xuICAgIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgICAgaHJlZlBhcnQgPSBjb21iaW5lZFBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgICBlbGVtZW50SWQgPSBjb21iaW5lZFBhdGguc3Vic3RyKGhhc2hJbmRleCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBocmVmUGFydCA9IGNvbWJpbmVkUGF0aDtcbiAgICAgIGVsZW1lbnRJZCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgc3BpbmVJdGVtID0gX3NwaW5lLmdldEl0ZW1CeUhyZWYoaHJlZlBhcnQpO1xuICAgIGlmICghc3BpbmVJdGVtKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ3NwaW5lSXRlbSAnICsgaHJlZlBhcnQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgLy8gc29tZXRpbWVzIHRoYXQgaGFwcGVucyBiZWNhdXNlIHNwaW5lIGl0ZW0ncyBVUkkgZ2V0cyBlbmNvZGVkLFxuICAgICAgLy8geWV0IGl0J3MgY29tcGFyZWQgd2l0aCByYXcgc3RyaW5ncyBieSBgZ2V0SXRlbUJ5SHJlZigpYCAtXG4gICAgICAvLyBzbyB3ZSB0cnkgdG8gc2VhcmNoIHdpdGggZGVjb2RlZCBsaW5rIGFzIHdlbGxcbiAgICAgIHZhciBkZWNvZGVkSHJlZlBhcnQgPSBkZWNvZGVVUklDb21wb25lbnQoaHJlZlBhcnQpO1xuICAgICAgc3BpbmVJdGVtID0gX3NwaW5lLmdldEl0ZW1CeUhyZWYoZGVjb2RlZEhyZWZQYXJ0KTtcbiAgICAgIGlmICghc3BpbmVJdGVtKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignZGVjb2RlZCBzcGluZUl0ZW0gJyArIGRlY29kZWRIcmVmUGFydCArICcgbWlzc2luZyBhcyB3ZWxsJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5vcGVuU3BpbmVJdGVtRWxlbWVudElkKHNwaW5lSXRlbS5pZHJlZiwgZWxlbWVudElkLCBpbml0aWF0b3IpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgcGFnZSBvZiB0aGUgc3BpbmUgaXRlbSB3aXRoIGVsZW1lbnQgd2l0aCBwcm92aWRlZCBjZmlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkcmVmIElkIG9mIHRoZSBzcGluZSBpdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50SWQgaWQgb2YgdGhlIGVsZW1lbnQgdG8gYmUgc2hvd25cbiAgICogQHBhcmFtIHtvYmplY3R9IGluaXRpYXRvciBvcHRpb25hbFxuICAgKi9cbiAgdGhpcy5vcGVuU3BpbmVJdGVtRWxlbWVudElkID0gZnVuY3Rpb24oaWRyZWYsIGVsZW1lbnRJZCwgaW5pdGlhdG9yKSB7XG5cbiAgICB2YXIgc3BpbmVJdGVtID0gX3NwaW5lLmdldEl0ZW1CeUlkKGlkcmVmKTtcbiAgICBpZiAoIXNwaW5lSXRlbSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBwYWdlRGF0YSA9IG5ldyBQYWdlT3BlblJlcXVlc3Qoc3BpbmVJdGVtLCBpbml0aWF0b3IpO1xuXG4gICAgaWYgKGVsZW1lbnRJZCkge1xuICAgICAgcGFnZURhdGEuc2V0RWxlbWVudElkKGVsZW1lbnRJZCk7XG4gICAgfVxuXG5cbiAgICBvcGVuUGFnZShwYWdlRGF0YSwgMCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYm9va21hcmsgYXNzb2NpYXRlZCB3aXRoIGN1cnJlbnRseSBvcGVuZWQgcGFnZS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gU2VyaWFsaXplZCBNb2RlbHMuQm9va21hcmtEYXRhIG9iamVjdCBhcyBKU09OIHN0cmluZy5cbiAgICovXG4gIHRoaXMuYm9va21hcmtDdXJyZW50UGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShfY3VycmVudFZpZXcuYm9va21hcmtDdXJyZW50UGFnZSgpKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVzZXRzIGFsbCB0aGUgY3VzdG9tIHN0eWxlcyBzZXQgYnkgc2V0U3R5bGUgY2FsbGVycyBhdCBydW50aW1lXG4gICAqL1xuICB0aGlzLmNsZWFyU3R5bGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICBfdXNlclN0eWxlcy5yZXNldFN0eWxlVmFsdWVzKCk7XG4gICAgYXBwbHlTdHlsZXMoKTtcbiAgICBfdXNlclN0eWxlcy5jbGVhcigpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXNldHMgYWxsIHRoZSBjdXN0b20gc3R5bGVzIHNldCBieSBzZXRCb29rU3R5bGUgY2FsbGVycyBhdCBydW50aW1lXG4gICAqL1xuICB0aGlzLmNsZWFyQm9va1N0eWxlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKF9jdXJyZW50Vmlldykge1xuXG4gICAgICBfYm9va1N0eWxlcy5yZXNldFN0eWxlVmFsdWVzKCk7XG4gICAgICBfY3VycmVudFZpZXcuYXBwbHlCb29rU3R5bGVzKCk7XG4gICAgfVxuXG4gICAgX2Jvb2tTdHlsZXMuY2xlYXIoKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIG1lZGlhIG92ZXJsYXkgYXZhaWxhYmxlIGZvciBvbmUgb2YgdGhlIG9wZW4gcGFnZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pc01lZGlhT3ZlcmxheUF2YWlsYWJsZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKCFfbWVkaWFPdmVybGF5UGxheWVyKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gX21lZGlhT3ZlcmxheVBsYXllci5pc01lZGlhT3ZlcmxheUF2YWlsYWJsZSgpO1xuICB9O1xuXG4gIC8qXG4gICAgICB0aGlzLnNldE1lZGlhT3ZlcmxheVNraXBwYWJsZXMgPSBmdW5jdGlvbihpdGVtcykge1xuXG4gICAgICAgICAgX21lZGlhT3ZlcmxheVBsYXllci5zZXRNZWRpYU92ZXJsYXlTa2lwcGFibGVzKGl0ZW1zKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc2V0TWVkaWFPdmVybGF5RXNjYXBhYmxlcyA9IGZ1bmN0aW9uKGl0ZW1zKSB7XG5cbiAgICAgICAgICBfbWVkaWFPdmVybGF5UGxheWVyLnNldE1lZGlhT3ZlcmxheUVzY2FwYWJsZXMoaXRlbXMpO1xuICAgICAgfTtcbiAgKi9cblxuICAvKipcbiAgICogU3RhcnRzL1N0b3AgcGxheWluZyBtZWRpYSBvdmVybGF5IG9uIGN1cnJlbnQgcGFnZVxuICAgKi9cbiAgdGhpcy50b2dnbGVNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIudG9nZ2xlTWVkaWFPdmVybGF5KCk7XG4gIH07XG5cblxuICAvKipcbiAgICogUGxheXMgbmV4dCBmcmFnbWVudCBtZWRpYSBvdmVybGF5XG4gICAqL1xuICB0aGlzLm5leHRNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIubmV4dE1lZGlhT3ZlcmxheSgpO1xuXG4gIH07XG5cbiAgLyoqXG4gICAqIFBsYXlzIHByZXZpb3VzIGZyYWdtZW50IG1lZGlhIG92ZXJsYXlcbiAgICovXG4gIHRoaXMucHJldmlvdXNNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIucHJldmlvdXNNZWRpYU92ZXJsYXkoKTtcblxuICB9O1xuXG4gIC8qKlxuICAgKiBQbGF5cyBuZXh0IGF2YWlsYWJsZSBmcmFnbWVudCBtZWRpYSBvdmVybGF5IHRoYXQgaXMgb3V0c2lkZSBvZiB0aGUgY3VycmVudCBlc2NhcGFibGUgc2NvcGVcbiAgICovXG4gIHRoaXMuZXNjYXBlTWVkaWFPdmVybGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBfbWVkaWFPdmVybGF5UGxheWVyLmVzY2FwZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBFbmQgbWVkaWEgb3ZlcmxheSBUVFNcbiAgICogQHRvZG8gQ2xhcmlmeSB3aGF0IHRoaXMgZG9lcyB3aXRoIERhbmllbC5cbiAgICovXG4gIHRoaXMudHRzRW5kZWRNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIub25UVFNFbmQoKTtcbiAgfTtcblxuICAvKipcbiAgICogUGF1c2UgY3VycmVudGx5IHBsYXlpbmcgbWVkaWEgb3ZlcmxheXMuXG4gICAqL1xuICB0aGlzLnBhdXNlTWVkaWFPdmVybGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBfbWVkaWFPdmVybGF5UGxheWVyLnBhdXNlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN0YXJ0L1Jlc3VtZSBwbGF5YmFjayBvZiBtZWRpYSBvdmVybGF5cy5cbiAgICovXG4gIHRoaXMucGxheU1lZGlhT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgX21lZGlhT3ZlcmxheVBsYXllci5wbGF5KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiBtZWRpYSBvdmVybGF5cyBhcmUgY3VycmVudGx5IHBsYXlpbmcuXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pc1BsYXlpbmdNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiBfbWVkaWFPdmVybGF5UGxheWVyLmlzUGxheWluZygpO1xuICB9O1xuXG4gIC8vXG4gIC8vIHNob3VsZCB1c2UgUmVhZGl1bVNESy5FdmVudHMuU0VUVElOR1NfQVBQTElFRCBpbnN0ZWFkIVxuICAvLyAgICB0aGlzLnNldFJhdGVNZWRpYU92ZXJsYXkgPSBmdW5jdGlvbihyYXRlKSB7XG4gIC8vXG4gIC8vICAgICAgICBfbWVkaWFPdmVybGF5UGxheWVyLnNldFJhdGUocmF0ZSk7XG4gIC8vICAgIH07XG4gIC8vICAgIHRoaXMuc2V0Vm9sdW1lTWVkaWFPdmVybGF5ID0gZnVuY3Rpb24odm9sdW1lKXtcbiAgLy9cbiAgLy8gICAgICAgIF9tZWRpYU92ZXJsYXlQbGF5ZXIuc2V0Vm9sdW1lKHZvbHVtZSk7XG4gIC8vICAgIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZmlyc3QgdmlzaWJsZSBtZWRpYSBvdmVybGF5IGVsZW1lbnQgZnJvbSB0aGUgY3VycmVudGx5IGFjdGl2ZSBjb250ZW50IGRvY3VtZW50KHMpXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudHx1bmRlZmluZWR9XG4gICAqL1xuICB0aGlzLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmIChfY3VycmVudFZpZXcpIHtcbiAgICAgIHJldHVybiBfY3VycmVudFZpZXcuZ2V0Rmlyc3RWaXNpYmxlTWVkaWFPdmVybGF5RWxlbWVudCgpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8ganVtcCB0byBhbiBlbGVtZW50IHRvIG1ha2Ugc3VyZSBpdCBpcyB2aXNpYmxlIHdoZW4gYSBjb250ZW50IGRvY3VtZW50IGlzIHBhZ2luYXRlZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICBzcGluZUl0ZW1JZCAgIFRoZSBzcGluZSBpdGVtIGlkcmVmIGFzc29jaWF0ZWQgd2l0aCBhbiBhY3RpdmUgY29udGVudCBkb2N1bWVudFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50ICAgICAgIFRoZSBlbGVtZW50IHRvIG1ha2UgdmlzaWJsZVxuICAgKiBAcGFyYW0gW2luaXRpYXRvcl1cbiAgICovXG4gIHRoaXMuaW5zdXJlRWxlbWVudFZpc2liaWxpdHkgPSBmdW5jdGlvbihzcGluZUl0ZW1JZCwgZWxlbWVudCwgaW5pdGlhdG9yKSB7XG5cbiAgICBpZiAoX2N1cnJlbnRWaWV3KSB7XG4gICAgICBfY3VycmVudFZpZXcuaW5zdXJlRWxlbWVudFZpc2liaWxpdHkoc3BpbmVJdGVtSWQsIGVsZW1lbnQsIGluaXRpYXRvcik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBfcmVzaXplQm9va21hcmsgPSBudWxsO1xuICB2YXIgX3Jlc2l6ZU1PV2FzUGxheWluZyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVZpZXdwb3J0UmVzaXplU3RhcnQoKSB7XG5cbiAgICBfcmVzaXplQm9va21hcmsgPSBudWxsO1xuICAgIF9yZXNpemVNT1dhc1BsYXlpbmcgPSBmYWxzZTtcblxuICAgIGlmIChfY3VycmVudFZpZXcpIHtcblxuICAgICAgaWYgKF9jdXJyZW50Vmlldy5pc1JlZmxvd2FibGUgJiYgX2N1cnJlbnRWaWV3LmlzUmVmbG93YWJsZSgpKSB7XG4gICAgICAgIF9yZXNpemVNT1dhc1BsYXlpbmcgPSBzZWxmLmlzUGxheWluZ01lZGlhT3ZlcmxheSgpO1xuICAgICAgICBpZiAoX3Jlc2l6ZU1PV2FzUGxheWluZykge1xuICAgICAgICAgIHNlbGYucGF1c2VNZWRpYU92ZXJsYXkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfcmVzaXplQm9va21hcmsgPSBfY3VycmVudFZpZXcuYm9va21hcmtDdXJyZW50UGFnZSgpOyAvLyBub3Qgc2VsZiEgKEpTT04gc3RyaW5nKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVZpZXdwb3J0UmVzaXplVGljaygpIHtcbiAgICBpZiAoX2N1cnJlbnRWaWV3KSB7XG4gICAgICBzZWxmLmhhbmRsZVZpZXdwb3J0UmVzaXplKF9yZXNpemVCb29rbWFyayk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVmlld3BvcnRSZXNpemVFbmQoKSB7XG4gICAgLy9zYW1lIGFzIGRvaW5nIG9uZSBmaW5hbCB0aWNrIGZvciBub3dcbiAgICBoYW5kbGVWaWV3cG9ydFJlc2l6ZVRpY2soKTtcblxuICAgIGlmIChfcmVzaXplTU9XYXNQbGF5aW5nKSBzZWxmLnBsYXlNZWRpYU92ZXJsYXkoKTtcbiAgfVxuXG4gIHRoaXMuaGFuZGxlVmlld3BvcnRSZXNpemUgPSBmdW5jdGlvbihib29rbWFya1RvUmVzdG9yZSkge1xuICAgIGlmICghX2N1cnJlbnRWaWV3KSByZXR1cm47XG5cbiAgICB2YXIgYm9va01hcmsgPSBib29rbWFya1RvUmVzdG9yZSB8fCBfY3VycmVudFZpZXcuYm9va21hcmtDdXJyZW50UGFnZSgpOyAvLyBub3Qgc2VsZiEgKEpTT04gc3RyaW5nKVxuXG4gICAgaWYgKF9jdXJyZW50Vmlldy5pc1JlZmxvd2FibGUgJiYgX2N1cnJlbnRWaWV3LmlzUmVmbG93YWJsZSgpICYmIGJvb2tNYXJrICYmIGJvb2tNYXJrLmlkcmVmKSB7XG4gICAgICB2YXIgc3BpbmVJdGVtID0gX3NwaW5lLmdldEl0ZW1CeUlkKGJvb2tNYXJrLmlkcmVmKTtcblxuICAgICAgaW5pdFZpZXdGb3JJdGVtKHNwaW5lSXRlbSwgZnVuY3Rpb24oaXNWaWV3Q2hhbmdlZCkge1xuICAgICAgICBzZWxmLm9wZW5TcGluZUl0ZW1FbGVtZW50Q2ZpKGJvb2tNYXJrLmlkcmVmLCBib29rTWFyay5jb250ZW50Q0ZJLCBzZWxmKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jdXJyZW50Vmlldy5vblZpZXdwb3J0UmVzaXplKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGN1cnJlbnQgc2VsZWN0aW9uIHBhcnRpYWwgQ2ZpLCB1c2VmdWwgZm9yIHdvcmtmbG93cyB0aGF0IG5lZWQgdG8gY2hlY2sgd2hldGhlciB0aGUgdXNlciBoYXMgc2VsZWN0ZWQgc29tZXRoaW5nLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0IHwgdW5kZWZpbmVkfSBwYXJ0aWFsIGNmaSBvYmplY3Qgb3IgdW5kZWZpbmVkIGlmIG5vdGhpbmcgaXMgc2VsZWN0ZWRcbiAgICovXG4gIHRoaXMuZ2V0Q3VycmVudFNlbGVjdGlvbkNmaSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfYW5ub3RhdGlvbnNNYW5hZ2VyLmdldEN1cnJlbnRTZWxlY3Rpb25DZmkoKTtcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGhpZ2xpZ2h0IGJhc2VkIG9uIGdpdmVuIHBhcmFtZXRlcnNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNwaW5lSWRSZWYgICAgc3BpbmUgaWRyZWYgdGhhdCBkZWZpbmVzIHRoZSBwYXJ0aWFsIENmaVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2ZpICAgICAgICAgICBwYXJ0aWFsIENGSSAod2l0aG91dGggdGhlIGluZGlyZWN0aW9uIHN0ZXApIHJlbGF0aXZlIHRvIHRoZSBzcGluZSBpbmRleFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgICAgICAgICAgICBpZCBvZiB0aGUgaGlnaGxpZ2h0LiBtdXN0IGJlIHVuaXF1ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAgICAgICAgICBjdXJyZW50bHkgXCJoaWdobGlnaHRcIiBvbmx5XG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3QgfCB1bmRlZmluZWR9IHBhcnRpYWwgY2ZpIG9iamVjdCBvZiB0aGUgY3JlYXRlZCBoaWdobGlnaHRcbiAgICovXG4gIHRoaXMuYWRkSGlnaGxpZ2h0ID0gZnVuY3Rpb24oc3BpbmVJZFJlZiwgQ2ZpLCBpZCwgdHlwZSwgc3R5bGVzKSB7XG4gICAgcmV0dXJuIF9hbm5vdGF0aW9uc01hbmFnZXIuYWRkSGlnaGxpZ2h0KHNwaW5lSWRSZWYsIENmaSwgaWQsIHR5cGUsIHN0eWxlcyk7XG4gIH07XG5cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGhpZ2xpZ2h0IGJhc2VkIG9uIHRoZSBjdXJyZW50IHNlbGVjdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgaWQgb2YgdGhlIGhpZ2hsaWdodC4gbXVzdCBiZSB1bmlxdWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgY3VycmVudGx5IFwiaGlnaGxpZ2h0XCIgb25seVxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0IHwgdW5kZWZpbmVkfSBwYXJ0aWFsIGNmaSBvYmplY3Qgb2YgdGhlIGNyZWF0ZWQgaGlnaGxpZ2h0XG4gICAqL1xuICB0aGlzLmFkZFNlbGVjdGlvbkhpZ2hsaWdodCA9IGZ1bmN0aW9uKGlkLCB0eXBlKSB7XG4gICAgcmV0dXJuIF9hbm5vdGF0aW9uc01hbmFnZXIuYWRkU2VsZWN0aW9uSGlnaGxpZ2h0KGlkLCB0eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlcyBBIGdpdmVuIGhpZ2hsaWdodFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgIFRoZSBpZCBhc3NvY2lhdGVkIHdpdGggdGhlIGhpZ2hsaWdodC5cbiAgICpcbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICpcbiAgICovXG4gIHRoaXMucmVtb3ZlSGlnaGxpZ2h0ID0gZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gX2Fubm90YXRpb25zTWFuYWdlci5yZW1vdmVIaWdobGlnaHQoaWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lICAgICAgICAgICAgICBFdmVudCBuYW1lLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAgICAgICAgICAgICBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgICAgICAgICAgICAgICAgVXNlciBzcGVjaWZpZWQgZGF0YSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5hZGRJRnJhbWVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaywgY29udGV4dCkge1xuICAgIF9pZnJhbWVMb2FkZXIuYWRkSUZyYW1lRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBUT0RPIEV4dHJhY3RcbiAgdmFyIEJhY2tncm91bmRBdWRpb1RyYWNrTWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBfc3BpbmVJdGVtSWZyYW1lTWFwID0ge307XG4gICAgdmFyIF93YXNQbGF5aW5nID0gZmFsc2U7XG5cbiAgICB2YXIgX2NhbGxiYWNrX3BsYXlQYXVzZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNldENhbGxiYWNrX1BsYXlQYXVzZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICBfY2FsbGJhY2tfcGxheVBhdXNlID0gY2FsbGJhY2s7XG4gICAgfTtcblxuICAgIHZhciBfY2FsbGJhY2tfaXNBdmFpbGFibGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zZXRDYWxsYmFja19Jc0F2YWlsYWJsZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICBfY2FsbGJhY2tfaXNBdmFpbGFibGUgPSBjYWxsYmFjaztcbiAgICB9O1xuXG4gICAgdGhpcy5wbGF5UGF1c2UgPSBmdW5jdGlvbihkb1BsYXkpIHtcbiAgICAgIF9wbGF5UGF1c2UoZG9QbGF5KTtcbiAgICB9O1xuXG4gICAgdmFyIF9wbGF5UGF1c2UgPSBmdW5jdGlvbihkb1BsYXkpIHtcbiAgICAgIGlmIChfY2FsbGJhY2tfcGxheVBhdXNlKSB7XG4gICAgICAgIF9jYWxsYmFja19wbGF5UGF1c2UoZG9QbGF5KTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyICRpZnJhbWUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBfc3BpbmVJdGVtSWZyYW1lTWFwKSB7XG4gICAgICAgICAgaWYgKCFfc3BpbmVJdGVtSWZyYW1lTWFwLmhhc093blByb3BlcnR5KHByb3ApKSBjb250aW51ZTtcblxuICAgICAgICAgIHZhciBkYXRhID0gX3NwaW5lSXRlbUlmcmFtZU1hcFtwcm9wXTtcbiAgICAgICAgICBpZiAoIWRhdGEgfHwgIWRhdGEuYWN0aXZlKSBjb250aW51ZTtcblxuICAgICAgICAgIGlmICgkaWZyYW1lKSBjb25zb2xlLmVycm9yKFwiTW9yZSB0aGFuIG9uZSBhY3RpdmUgaWZyYW1lPz8gKHBhZ2luYXRpb24pXCIpO1xuXG4gICAgICAgICAgJGlmcmFtZSA9IGRhdGFbXCIkaWZyYW1lXCJdO1xuICAgICAgICAgIGlmICghJGlmcmFtZSkgY29udGludWU7XG5cbiAgICAgICAgICB2YXIgJGF1ZGlvcyA9ICQoXCJhdWRpb1wiLCAkaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudCk7XG5cbiAgICAgICAgICAkLmVhY2goJGF1ZGlvcywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciBhdHRyID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJlcHViOnR5cGVcIikgfHwgdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXG4gICAgICAgICAgICBpZiAoIWF0dHIpIHJldHVybiB0cnVlOyAvLyBjb250aW51ZVxuXG4gICAgICAgICAgICBpZiAoYXR0ci5pbmRleE9mKFwiaWJvb2tzOnNvdW5kdHJhY2tcIikgPCAwICYmIGF0dHIuaW5kZXhPZihcIm1lZGlhOnNvdW5kdHJhY2tcIikgPCAwICYmIGF0dHIuaW5kZXhPZihcIm1lZGlhOmJhY2tncm91bmRcIikgPCAwKSByZXR1cm4gdHJ1ZTsgLy8gY29udGludWVcblxuICAgICAgICAgICAgaWYgKGRvUGxheSAmJiB0aGlzLnBsYXkpIHtcbiAgICAgICAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGF1c2UpIHtcbiAgICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gY29udGludWUgKG1vcmUgdGhhbiBvbmUgdHJhY2s/KVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNldFBsYXlTdGF0ZSA9IGZ1bmN0aW9uKHdhc1BsYXlpbmcpIHtcbiAgICAgIF93YXNQbGF5aW5nID0gd2FzUGxheWluZztcbiAgICB9O1xuXG4gICAgc2VsZi5vbihFdmVudHMuQ09OVEVOVF9ET0NVTUVOVF9MT0FERUQsIGZ1bmN0aW9uKCRpZnJhbWUsIHNwaW5lSXRlbSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHNwaW5lSXRlbSAmJiBzcGluZUl0ZW0uaWRyZWYgJiYgJGlmcmFtZSAmJiAkaWZyYW1lWzBdKSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJDT05URU5UX0RPQ1VNRU5UX0xPQURFRFwiKTtcbiAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKHNwaW5lSXRlbS5ocmVmKTtcbiAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKHNwaW5lSXRlbS5pZHJlZik7XG5cbiAgICAgICAgICBfc3BpbmVJdGVtSWZyYW1lTWFwW3NwaW5lSXRlbS5pZHJlZl0gPSB7XG4gICAgICAgICAgICBcIiRpZnJhbWVcIjogJGlmcmFtZSxcbiAgICAgICAgICAgIGhyZWY6IHNwaW5lSXRlbS5ocmVmXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlbGYub24oRXZlbnRzLlBBR0lOQVRJT05fQ0hBTkdFRCwgZnVuY3Rpb24ocGFnZUNoYW5nZURhdGEpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiUEFHSU5BVElPTl9DSEFOR0VEXCIpO1xuICAgICAgLy8gY29uc29sZS5kZWJ1ZyhwYWdlQ2hhbmdlRGF0YSk7XG4gICAgICAvLyBcbiAgICAgIC8vIGlmIChwYWdlQ2hhbmdlRGF0YS5zcGluZUl0ZW0pXG4gICAgICAvLyB7XG4gICAgICAvLyAgICAgY29uc29sZS5kZWJ1ZyhwYWdlQ2hhbmdlRGF0YS5zcGluZUl0ZW0uaHJlZik7XG4gICAgICAvLyAgICAgY29uc29sZS5kZWJ1ZyhwYWdlQ2hhbmdlRGF0YS5zcGluZUl0ZW0uaWRyZWYpO1xuICAgICAgLy8gfVxuICAgICAgLy8gZWxzZVxuICAgICAgLy8ge1xuICAgICAgLy8gICAgIC8vY29uc29sZS5lcnJvcihwYWdlQ2hhbmdlRGF0YSk7XG4gICAgICAvLyB9XG4gICAgICAvLyBcbiAgICAgIC8vIGlmIChwYWdlQ2hhbmdlRGF0YS5wYWdpbmF0aW9uSW5mbyAmJiBwYWdlQ2hhbmdlRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMgJiYgcGFnZUNoYW5nZURhdGEucGFnaW5hdGlvbkluZm8ub3BlblBhZ2VzLmxlbmd0aClcbiAgICAgIC8vIHtcbiAgICAgIC8vICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZ2VDaGFuZ2VEYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlcy5sZW5ndGg7IGkrKylcbiAgICAgIC8vICAgICB7XG4gICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKHBhZ2VDaGFuZ2VEYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlc1tpXS5pZHJlZik7XG4gICAgICAvLyAgICAgfVxuICAgICAgLy8gfVxuXG4gICAgICB2YXIgYXRMZWFzdE9uZSA9IGZhbHNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIF9zcGluZUl0ZW1JZnJhbWVNYXApIHtcbiAgICAgICAgICBpZiAoIV9zcGluZUl0ZW1JZnJhbWVNYXAuaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgdmFyIGlzQWN0aXZlID0gcGFnZUNoYW5nZURhdGEuc3BpbmVJdGVtICYmIHBhZ2VDaGFuZ2VEYXRhLnNwaW5lSXRlbS5pZHJlZiA9PT0gcHJvcDtcblxuICAgICAgICAgIHZhciBpc0Rpc3BsYXllZCA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKHBhZ2VDaGFuZ2VEYXRhLnBhZ2luYXRpb25JbmZvICYmIHBhZ2VDaGFuZ2VEYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBhbGxTYW1lID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWdlQ2hhbmdlRGF0YS5wYWdpbmF0aW9uSW5mby5vcGVuUGFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHBhZ2VDaGFuZ2VEYXRhLnBhZ2luYXRpb25JbmZvLm9wZW5QYWdlc1tpXS5pZHJlZiA9PT0gcHJvcCkge1xuICAgICAgICAgICAgICAgIGlzRGlzcGxheWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGxTYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFpc0FjdGl2ZSAmJiBhbGxTYW1lKSBpc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzQWN0aXZlIHx8IGlzRGlzcGxheWVkKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IF9zcGluZUl0ZW1JZnJhbWVNYXBbcHJvcF07XG4gICAgICAgICAgICBpZiAoIWRhdGEpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBfc3BpbmVJdGVtSWZyYW1lTWFwW3Byb3BdW1wiYWN0aXZlXCJdID0gaXNBY3RpdmU7XG5cbiAgICAgICAgICAgIHZhciAkaWZyYW1lID0gZGF0YVtcIiRpZnJhbWVcIl07XG4gICAgICAgICAgICB2YXIgaHJlZiA9IGRhdGEuaHJlZjtcblxuICAgICAgICAgICAgdmFyICRhdWRpb3MgPSAkKFwiYXVkaW9cIiwgJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQpO1xuICAgICAgICAgICAgJC5lYWNoKCRhdWRpb3MsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgIHZhciBhdHRyID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJlcHViOnR5cGVcIikgfHwgdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXG4gICAgICAgICAgICAgIGlmICghYXR0cikgcmV0dXJuIHRydWU7IC8vIGNvbnRpbnVlXG5cbiAgICAgICAgICAgICAgaWYgKGF0dHIuaW5kZXhPZihcImlib29rczpzb3VuZHRyYWNrXCIpIDwgMCAmJiBhdHRyLmluZGV4T2YoXCJtZWRpYTpzb3VuZHRyYWNrXCIpIDwgMCAmJiBhdHRyLmluZGV4T2YoXCJtZWRpYTpiYWNrZ3JvdW5kXCIpIDwgMCkgcmV0dXJuIHRydWU7IC8vIGNvbnRpbnVlXG5cbiAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJsb29wXCIsIFwibG9vcFwiKTtcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoXCJhdXRvcGxheVwiKTtcblxuICAgICAgICAgICAgICAvLyBERUJVRyFcbiAgICAgICAgICAgICAgLy90aGlzLnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XG5cbiAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgLy8gREVCVUchXG4gICAgICAgICAgICAgICAgLy8kKHRoaXMpLmNzcyh7Ym9yZGVyOlwiMnB4IHNvbGlkIGdyZWVuXCJ9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXVzZSkgdGhpcy5wYXVzZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gREVCVUchXG4gICAgICAgICAgICAgICAgLy8kKHRoaXMpLmNzcyh7Ym9yZGVyOlwiMnB4IHNvbGlkIHJlZFwifSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBhdExlYXN0T25lID0gdHJ1ZTtcblxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gY29udGludWUgKG1vcmUgdGhhbiBvbmUgdHJhY2s/KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX3NwaW5lSXRlbUlmcmFtZU1hcFtwcm9wXSkgX3NwaW5lSXRlbUlmcmFtZU1hcFtwcm9wXVtcIiRpZnJhbWVcIl0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfc3BpbmVJdGVtSWZyYW1lTWFwW3Byb3BdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9jYWxsYmFja19pc0F2YWlsYWJsZSkge1xuICAgICAgICBfY2FsbGJhY2tfaXNBdmFpbGFibGUoYXRMZWFzdE9uZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhdExlYXN0T25lKSB7XG4gICAgICAgIGlmIChfd2FzUGxheWluZykge1xuICAgICAgICAgIF9wbGF5UGF1c2UodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3BsYXlQYXVzZShmYWxzZSk7IC8vIGVuc3VyZSBjb3JyZWN0IHBhdXNlZCBzdGF0ZVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcGxheVBhdXNlKGZhbHNlKTsgLy8gZW5zdXJlIGNvcnJlY3QgcGF1c2VkIHN0YXRlXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzZWxmLm9uKEV2ZW50cy5NRURJQV9PVkVSTEFZX1NUQVRVU19DSEFOR0VELCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZS5zbWlsSW5kZXgpIHJldHVybjtcbiAgICAgIHZhciBwYWNrYWdlID0gc2VsZi5wYWNrYWdlKCk7XG4gICAgICB2YXIgc21pbCA9IHBhY2thZ2UubWVkaWFfb3ZlcmxheS5zbWlsQXQodmFsdWUuc21pbEluZGV4KTtcbiAgICAgIGlmICghc21pbCB8fCAhc21pbC5zcGluZUl0ZW1JZCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbmVlZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBfc3BpbmVJdGVtSWZyYW1lTWFwKSB7XG4gICAgICAgIGlmICghX3NwaW5lSXRlbUlmcmFtZU1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG5cbiAgICAgICAgdmFyIGRhdGEgPSBfc3BpbmVJdGVtSWZyYW1lTWFwW3Byb3BdO1xuICAgICAgICBpZiAoIWRhdGEpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmIChkYXRhLmFjdGl2ZSkge1xuICAgICAgICAgIGlmIChwcm9wICE9PSBzbWlsLnNwaW5lSXRlbUlkKSB7XG4gICAgICAgICAgICBfcGxheVBhdXNlKGZhbHNlKTsgLy8gZW5zdXJlIGNvcnJlY3QgcGF1c2VkIHN0YXRlXG4gICAgICAgICAgICBkYXRhLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkVXBkYXRlKSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gX3NwaW5lSXRlbUlmcmFtZU1hcCkge1xuICAgICAgICAgIGlmICghX3NwaW5lSXRlbUlmcmFtZU1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG5cbiAgICAgICAgICB2YXIgZGF0YSA9IF9zcGluZUl0ZW1JZnJhbWVNYXBbcHJvcF07XG4gICAgICAgICAgaWYgKCFkYXRhKSBjb250aW51ZTtcblxuICAgICAgICAgIGlmICghZGF0YS5hY3RpdmUpIHtcbiAgICAgICAgICAgIGlmIChwcm9wID09PSBzbWlsLnNwaW5lSXRlbUlkKSB7XG4gICAgICAgICAgICAgIGRhdGEuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3dhc1BsYXlpbmcpIHtcbiAgICAgICAgICBfcGxheVBhdXNlKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIHRoaXMuYmFja2dyb3VuZEF1ZGlvVHJhY2tNYW5hZ2VyID0gbmV3IEJhY2tncm91bmRBdWRpb1RyYWNrTWFuYWdlcigpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkZXJWaWV3OyIsIi8vICBMYXVuY2hlck9TWFxuLy9cbi8vICBDcmVhdGVkIGJ5IEJvcmlzIFNjaG5laWRlcm1hbi5cbi8vICBDb3B5cmlnaHQgKGMpIDIwMTQgUmVhZGl1bSBGb3VuZGF0aW9uIGFuZC9vciBpdHMgbGljZW5zZWVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIFxuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxuLy8gIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgXG4vLyAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCBcbi8vICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBcbi8vICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy8gIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIFxuLy8gIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgXG4vLyAgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy8gIFxuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBcbi8vICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBcbi8vICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIFxuLy8gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIFxuLy8gIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBcbi8vICBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBcbi8vICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIFxuLy8gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgXG4vLyAgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxuLy8gIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJylcbnZhciBCb29rbWFya0RhdGEgPSByZXF1aXJlKCcuLi9tb2RlbHMvYm9va21hcmstZGF0YScpXG52YXIgQ2ZpTmF2aWdhdGlvbkxvZ2ljID0gcmVxdWlyZSgnLi9jZmktbmF2aWdhdGlvbi1sb2dpYycpXG52YXIgQ3VycmVudFBhZ2VzSW5mbyA9IHJlcXVpcmUoJy4uL21vZGVscy9jdXJyZW50LXBhZ2VzLWluZm8nKVxudmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4uL2V2ZW50cycpXG52YXIgZGVkdWNlU3ludGhldGljU3ByZWFkID0gcmVxdWlyZSgnLi4vaGVscGVycy9kZWR1Y2Utc3ludGhldGljLXNwcmVhZCcpXG52YXIgSW50ZXJuYWxFdmVudHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC1ldmVudHMnKVxudmFyIGxvYWRUZW1wbGF0ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbG9hZC10ZW1wbGF0ZScpXG52YXIgTWFyZ2lucyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWFyZ2lucycpXG52YXIgUGFnZU9wZW5SZXF1ZXN0ID0gcmVxdWlyZSgnLi4vbW9kZWxzL3BhZ2Utb3Blbi1yZXF1ZXN0JylcbnZhciB0cmlnZ2VyTGF5b3V0ID0gcmVxdWlyZSgnLi4vaGVscGVycy90cmlnZ2VyLWxheW91dCcpXG52YXIgc2V0U3R5bGVzID0gcmVxdWlyZSgnLi4vaGVscGVycy9zZXQtc3R5bGVzJylcbnZhciBVcGRhdGVIdG1sRm9udFNpemUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3VwZGF0ZS1odG1sLWZvbnQtc2l6ZScpXG52YXIgVmlld2VyU2V0dGluZ3MgPSByZXF1aXJlKCcuLi9tb2RlbHMvdmlld2VyLXNldHRpbmdzJylcblxuLyoqXG4gKiBSZW5kZXJzIHJlZmxvd2FibGUgY29udGVudCB1c2luZyBDU1MgY29sdW1uc1xuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSZWZsb3dhYmxlVmlldyhvcHRpb25zLCByZWFkZXIpIHtcblxuICBfLmV4dGVuZCh0aGlzLCBCYWNrYm9uZS5FdmVudHMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgXyR2aWV3cG9ydCA9IG9wdGlvbnMuJHZpZXdwb3J0O1xuICB2YXIgX3NwaW5lID0gb3B0aW9ucy5zcGluZTtcbiAgdmFyIF91c2VyU3R5bGVzID0gb3B0aW9ucy51c2VyU3R5bGVzO1xuICB2YXIgX2Jvb2tTdHlsZXMgPSBvcHRpb25zLmJvb2tTdHlsZXM7XG4gIHZhciBfaWZyYW1lTG9hZGVyID0gb3B0aW9ucy5pZnJhbWVMb2FkZXI7XG5cbiAgdmFyIF9jdXJyZW50U3BpbmVJdGVtO1xuICB2YXIgX2lzV2FpdGluZ0ZyYW1lUmVuZGVyID0gZmFsc2U7XG4gIHZhciBfZGVmZXJyZWRQYWdlUmVxdWVzdDtcbiAgdmFyIF9mb250U2l6ZSA9IDEwMDtcbiAgdmFyIF8kY29udGVudEZyYW1lO1xuICB2YXIgX25hdmlnYXRpb25Mb2dpYztcbiAgdmFyIF8kZWw7XG4gIHZhciBfJGlmcmFtZTtcbiAgdmFyIF8kZXB1Ykh0bWw7XG5cbiAgdmFyIF8kaHRtbEJvZHk7XG5cbiAgdmFyIF9odG1sQm9keUlzVmVydGljYWxXcml0aW5nTW9kZTtcbiAgdmFyIF9odG1sQm9keUlzTFRSRGlyZWN0aW9uO1xuICB2YXIgX2h0bWxCb2R5SXNMVFJXcml0aW5nTW9kZTtcblxuXG4gIHZhciBfY3VycmVudE9wYWNpdHkgPSAtMTtcblxuICB2YXIgX2xhc3RWaWV3UG9ydFNpemUgPSB7XG4gICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICBoZWlnaHQ6IHVuZGVmaW5lZFxuICB9O1xuXG4gIHZhciBfcGFnaW5hdGlvbkluZm8gPSB7XG5cbiAgICB2aXNpYmxlQ29sdW1uQ291bnQ6IDIsXG4gICAgY29sdW1uR2FwOiAyMCxcbiAgICBzcHJlYWRDb3VudDogMCxcbiAgICBjdXJyZW50U3ByZWFkSW5kZXg6IDAsXG4gICAgY29sdW1uV2lkdGg6IHVuZGVmaW5lZCxcbiAgICBwYWdlT2Zmc2V0OiAwLFxuICAgIGNvbHVtbkNvdW50OiAwXG4gIH07XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciB0ZW1wbGF0ZSA9IGxvYWRUZW1wbGF0ZShcInJlZmxvd2FibGVfYm9va19mcmFtZVwiLCB7fSk7XG5cbiAgICBfJGVsID0gJCh0ZW1wbGF0ZSk7XG4gICAgXyR2aWV3cG9ydC5hcHBlbmQoXyRlbCk7XG5cbiAgICB2YXIgc2V0dGluZ3MgPSByZWFkZXIudmlld2VyU2V0dGluZ3MoKTtcbiAgICBpZiAoIXNldHRpbmdzIHx8IHR5cGVvZiBzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAvL2RlZmF1bHRzXG4gICAgICBzZXR0aW5ncyA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSk7XG4gICAgfVxuICAgIGlmIChzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEKSB7XG4gICAgICAvLyBUaGlzIGZpeGVzIHJlbmRlcmluZyBpc3N1ZXMgd2l0aCBXZWJWaWV3IChuYXRpdmUgYXBwcyksIHdoaWNoIGNsaXBzIGNvbnRlbnQgZW1iZWRkZWQgaW4gaWZyYW1lcyB1bmxlc3MgR1BVIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiBpcyBlbmFibGVkIGZvciBDU1MgcmVuZGVyaW5nLlxuICAgICAgXyRlbC5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVaKDApXCIpO1xuICAgIH1cblxuICAgIC8vIFNlZSBSZWFkZXJWaWV3LmhhbmRsZVZpZXdwb3J0UmVzaXplXG4gICAgLy8gdmFyIGxhenlSZXNpemUgPSBfLmRlYm91bmNlKHNlbGYub25WaWV3cG9ydFJlc2l6ZSwgMTAwKTtcbiAgICAvLyAkKHdpbmRvdykub24oXCJyZXNpemUuUmVhZGl1bVNESy5yZWZsb3dhYmxlVmlld1wiLCBfLmJpbmQobGF6eVJlc2l6ZSwgc2VsZikpO1xuICAgIHJlbmRlcklmcmFtZSgpO1xuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0RnJhbWVTaXplc1RvUmVjdGFuZ2xlKHJlY3RhbmdsZSkge1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcImxlZnRcIiwgcmVjdGFuZ2xlLmxlZnQgKyBcInB4XCIpO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcInRvcFwiLCByZWN0YW5nbGUudG9wICsgXCJweFwiKTtcbiAgICBfJGNvbnRlbnRGcmFtZS5jc3MoXCJyaWdodFwiLCByZWN0YW5nbGUucmlnaHQgKyBcInB4XCIpO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcImJvdHRvbVwiLCByZWN0YW5nbGUuYm90dG9tICsgXCJweFwiKTtcblxuICB9XG5cbiAgdGhpcy5yZW1vdmUgPSBmdW5jdGlvbigpIHtcblxuICAgIC8vJCh3aW5kb3cpLm9mZihcInJlc2l6ZS5SZWFkaXVtU0RLLnJlZmxvd2FibGVWaWV3XCIpO1xuICAgIF8kZWwucmVtb3ZlKCk7XG5cbiAgfTtcblxuICB0aGlzLmlzUmVmbG93YWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIHRoaXMub25WaWV3cG9ydFJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKHVwZGF0ZVZpZXdwb3J0U2l6ZSgpKSB7XG4gICAgICB1cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBfdmlld1NldHRpbmdzID0gdW5kZWZpbmVkO1xuICB0aGlzLnNldFZpZXdTZXR0aW5ncyA9IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG5cbiAgICBfdmlld1NldHRpbmdzID0gc2V0dGluZ3M7XG5cbiAgICBfcGFnaW5hdGlvbkluZm8uY29sdW1uR2FwID0gc2V0dGluZ3MuY29sdW1uR2FwO1xuICAgIF9mb250U2l6ZSA9IHNldHRpbmdzLmZvbnRTaXplO1xuXG4gICAgdXBkYXRlSHRtbEZvbnRTaXplKCk7XG4gICAgdXBkYXRlQ29sdW1uR2FwKCk7XG5cbiAgICB1cGRhdGVWaWV3cG9ydFNpemUoKTtcbiAgICB1cGRhdGVQYWdpbmF0aW9uKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVuZGVySWZyYW1lKCkge1xuICAgIGlmIChfJGNvbnRlbnRGcmFtZSkge1xuICAgICAgLy9kZXN0cm95IG9sZCBjb250ZW50RnJhbWVcbiAgICAgIF8kY29udGVudEZyYW1lLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHZhciB0ZW1wbGF0ZSA9IGxvYWRUZW1wbGF0ZShcInJlZmxvd2FibGVfYm9va19wYWdlX2ZyYW1lXCIsIHt9KTtcbiAgICB2YXIgJGJvb2tGcmFtZSA9ICQodGVtcGxhdGUpO1xuICAgICRib29rRnJhbWUgPSBfJGVsLmFwcGVuZCgkYm9va0ZyYW1lKTtcblxuICAgIF8kY29udGVudEZyYW1lID0gJChcIiNyZWZsb3dhYmxlLWNvbnRlbnQtZnJhbWVcIiwgJGJvb2tGcmFtZSk7XG5cbiAgICBfJGlmcmFtZSA9ICQoXCIjZXB1YkNvbnRlbnRJZnJhbWVcIiwgJGJvb2tGcmFtZSk7XG5cbiAgICBfJGlmcmFtZS5jc3MoXCJsZWZ0XCIsIFwiXCIpO1xuICAgIF8kaWZyYW1lLmNzcyhcInJpZ2h0XCIsIFwiXCIpO1xuICAgIF8kaWZyYW1lLmNzcyhcInBvc2l0aW9uXCIsIFwicmVsYXRpdmVcIik7XG4gICAgLy9fJGlmcmFtZS5jc3MoX3NwaW5lLmlzTGVmdFRvUmlnaHQoKSA/IFwibGVmdFwiIDogXCJyaWdodFwiLCBcIjBweFwiKTtcbiAgICBfJGlmcmFtZS5jc3MoXCJvdmVyZmxvd1wiLCBcImhpZGRlblwiKTtcblxuICAgIF9uYXZpZ2F0aW9uTG9naWMgPSBuZXcgQ2ZpTmF2aWdhdGlvbkxvZ2ljKFxuICAgICAgXyRjb250ZW50RnJhbWUsIF8kaWZyYW1lLCB7XG4gICAgICAgIHJlY3RhbmdsZUJhc2VkOiB0cnVlLFxuICAgICAgICBwYWdpbmF0aW9uSW5mbzogX3BhZ2luYXRpb25JbmZvXG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRTcGluZUl0ZW0oc3BpbmVJdGVtKSB7XG5cbiAgICBpZiAoX2N1cnJlbnRTcGluZUl0ZW0gIT0gc3BpbmVJdGVtKSB7XG5cbiAgICAgIC8vY3JlYXRlICYgYXBwZW5kIGlmcmFtZSB0byBjb250YWluZXIgZnJhbWVcbiAgICAgIHJlbmRlcklmcmFtZSgpO1xuXG4gICAgICBfcGFnaW5hdGlvbkluZm8ucGFnZU9mZnNldCA9IDA7XG4gICAgICBfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4ID0gMDtcbiAgICAgIF9jdXJyZW50U3BpbmVJdGVtID0gc3BpbmVJdGVtO1xuICAgICAgX2lzV2FpdGluZ0ZyYW1lUmVuZGVyID0gdHJ1ZTtcblxuICAgICAgdmFyIHNyYyA9IF9zcGluZS5wYWNrYWdlLnJlc29sdmVSZWxhdGl2ZVVybChzcGluZUl0ZW0uaHJlZik7XG4gICAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLkNPTlRFTlRfRE9DVU1FTlRfTE9BRF9TVEFSVCwgXyRpZnJhbWUsIHNwaW5lSXRlbSk7XG5cbiAgICAgIF8kaWZyYW1lLmNzcyhcIm9wYWNpdHlcIiwgXCIwLjAxXCIpO1xuXG4gICAgICBfaWZyYW1lTG9hZGVyLmxvYWRJZnJhbWUoXyRpZnJhbWVbMF0sIHNyYywgb25JRnJhbWVMb2FkLCBzZWxmLCB7XG4gICAgICAgIHNwaW5lSXRlbTogc3BpbmVJdGVtXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVIdG1sRm9udFNpemUoKSB7XG5cbiAgICBpZiAoXyRlcHViSHRtbCkge1xuICAgICAgVXBkYXRlSHRtbEZvbnRTaXplKF8kZXB1Ykh0bWwsIF9mb250U2l6ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ29sdW1uR2FwKCkge1xuXG4gICAgaWYgKF8kZXB1Ykh0bWwpIHtcblxuICAgICAgXyRlcHViSHRtbC5jc3MoXCJjb2x1bW4tZ2FwXCIsIF9wYWdpbmF0aW9uSW5mby5jb2x1bW5HYXAgKyBcInB4XCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uSUZyYW1lTG9hZChzdWNjZXNzKSB7XG5cbiAgICBfaXNXYWl0aW5nRnJhbWVSZW5kZXIgPSBmYWxzZTtcblxuICAgIC8vd2hpbGUgd2Ugd2hlcmUgbG9hZGluZyBmcmFtZSBuZXcgcmVxdWVzdCBjYW1lXG4gICAgaWYgKF9kZWZlcnJlZFBhZ2VSZXF1ZXN0ICYmIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSAhPSBfY3VycmVudFNwaW5lSXRlbSkge1xuICAgICAgbG9hZFNwaW5lSXRlbShfZGVmZXJyZWRQYWdlUmVxdWVzdC5zcGluZUl0ZW0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgXyRpZnJhbWUuY3NzKFwib3BhY2l0eVwiLCBcIjFcIik7XG4gICAgICBfZGVmZXJyZWRQYWdlUmVxdWVzdCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLkNPTlRFTlRfRE9DVU1FTlRfTE9BREVELCBfJGlmcmFtZSwgX2N1cnJlbnRTcGluZUl0ZW0pO1xuXG4gICAgdmFyIGVwdWJDb250ZW50RG9jdW1lbnQgPSBfJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQ7XG4gICAgXyRlcHViSHRtbCA9ICQoXCJodG1sXCIsIGVwdWJDb250ZW50RG9jdW1lbnQpO1xuICAgIF8kaHRtbEJvZHkgPSAkKFwiYm9keVwiLCBfJGVwdWJIdG1sKTtcblxuICAgIC8vIFZpZGVvIHN1cmZhY2Ugc29tZXRpbWVzIChkZXBlbmRzIG9uIHRoZSB2aWRlbyBjb2RlYykgZGlzYXBwZWFycyBmcm9tIENTUyBjb2x1bW4gKGkuZS4gcmVmbG93IHBhZ2UpIGR1cmluZyBwbGF5YmFjayAoYXVkaW8gY29udGludWVzIHRvIHBsYXkgbm9ybWFsbHksIGJ1dCB2aWRlbyBjYW52YXMgaXMgaW52aXNpYmxlKS5cbiAgICAvLyBFbmFibGluZyBDU1MzRCBmaXhlcyB0aGlzIENocm9tZS1zcGVjaWZpYyByZW5kZXJpbmcgYnVnLlxuICAgIGlmICh3aW5kb3cuY2hyb21lICYmIHdpbmRvdy5uYXZpZ2F0b3IudmVuZG9yID09PSBcIkdvb2dsZSBJbmMuXCIpIC8vIFRPRE86IE9wZXJhIChXZWJLaXQpIHNvbWV0aW1lcyBzdWZmZXJzIGZyb20gdGhpcyByZW5kZXJpbmcgYnVnIHRvbyAoZGVwZW5kcyBvbiB0aGUgdmlkZW8gY29kZWMpLCBidXQgdW5mb3J0dW5hdGVseSBHUFUtYWNjZWxlcmF0ZWQgcmVuZGVyaW5nIG1ha2VzIHRoZSB2aWRlbyBjb250cm9scyB1bnJlc3BvbnNpdmUhIVxuICAgIHtcbiAgICAgICQoXCJ2aWRlb1wiLCBfJGh0bWxCb2R5KS5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVaKDApXCIpO1xuICAgIH1cblxuICAgIF9odG1sQm9keUlzVmVydGljYWxXcml0aW5nTW9kZSA9IGZhbHNlO1xuICAgIF9odG1sQm9keUlzTFRSRGlyZWN0aW9uID0gdHJ1ZTtcbiAgICBfaHRtbEJvZHlJc0xUUldyaXRpbmdNb2RlID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIHdpbiA9IF8kaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldyB8fCBfJGlmcmFtZVswXS5jb250ZW50V2luZG93O1xuXG4gICAgLy9IZWxwZXJzLmlzSWZyYW1lQWxpdmVcbiAgICB2YXIgaHRtbEJvZHlDb21wdXRlZFN0eWxlID0gd2luLmdldENvbXB1dGVkU3R5bGUoXyRodG1sQm9keVswXSwgbnVsbCk7XG4gICAgaWYgKGh0bWxCb2R5Q29tcHV0ZWRTdHlsZSkge1xuICAgICAgX2h0bWxCb2R5SXNMVFJEaXJlY3Rpb24gPSBodG1sQm9keUNvbXB1dGVkU3R5bGUuZGlyZWN0aW9uID09PSBcImx0clwiO1xuXG4gICAgICB2YXIgd3JpdGluZ01vZGUgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoaHRtbEJvZHlDb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgd3JpdGluZ01vZGUgPSBodG1sQm9keUNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcIi13ZWJraXQtd3JpdGluZy1tb2RlXCIpIHx8IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiLW1vei13cml0aW5nLW1vZGVcIikgfHwgaHRtbEJvZHlDb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCItbXMtd3JpdGluZy1tb2RlXCIpIHx8IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiLW8td3JpdGluZy1tb2RlXCIpIHx8IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiLWVwdWItd3JpdGluZy1tb2RlXCIpIHx8IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwid3JpdGluZy1tb2RlXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGluZ01vZGUgPSBodG1sQm9keUNvbXB1dGVkU3R5bGUud2Via2l0V3JpdGluZ01vZGUgfHwgaHRtbEJvZHlDb21wdXRlZFN0eWxlLm1veldyaXRpbmdNb2RlIHx8IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS5tc1dyaXRpbmdNb2RlIHx8IGh0bWxCb2R5Q29tcHV0ZWRTdHlsZS5vV3JpdGluZ01vZGUgfHwgaHRtbEJvZHlDb21wdXRlZFN0eWxlLmVwdWJXcml0aW5nTW9kZSB8fCBodG1sQm9keUNvbXB1dGVkU3R5bGUud3JpdGluZ01vZGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh3cml0aW5nTW9kZSkge1xuICAgICAgICBfaHRtbEJvZHlJc0xUUldyaXRpbmdNb2RlID0gd3JpdGluZ01vZGUuaW5kZXhPZihcIi1sclwiKSA+PSAwOyAvLyB8fCB3cml0aW5nTW9kZS5pbmRleE9mKFwiaG9yaXpvbnRhbC1cIikgPj0gMDsgd2UgbmVlZCBleHBsaWNpdCFcblxuICAgICAgICBpZiAod3JpdGluZ01vZGUuaW5kZXhPZihcInZlcnRpY2FsXCIpID49IDAgfHwgd3JpdGluZ01vZGUuaW5kZXhPZihcInRiLVwiKSA+PSAwIHx8IHdyaXRpbmdNb2RlLmluZGV4T2YoXCJidC1cIikgPj0gMCkge1xuICAgICAgICAgIF9odG1sQm9keUlzVmVydGljYWxXcml0aW5nTW9kZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX2h0bWxCb2R5SXNMVFJEaXJlY3Rpb24pIHtcbiAgICAgIGlmIChfJGh0bWxCb2R5WzBdLmdldEF0dHJpYnV0ZShcImRpclwiKSA9PT0gXCJydGxcIiB8fCBfJGVwdWJIdG1sWzBdLmdldEF0dHJpYnV0ZShcImRpclwiKSA9PT0gXCJydGxcIikge1xuICAgICAgICBfaHRtbEJvZHlJc0xUUkRpcmVjdGlvbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNvbWUgRVBVQnMgbWF5IG5vdCBoYXZlIGV4cGxpY2l0IFJUTCBjb250ZW50IGRpcmVjdGlvbiAodmlhIENTUyBcImRpcmVjdGlvblwiIHByb3BlcnR5IG9yIEBkaXIgYXR0cmlidXRlKSBkZXNwaXRlIGhhdmluZyBhIFJUTCBwYWdlIHByb2dyZXNzaW9uIGRpcmVjdGlvbi4gUmVhZGl1bSBjb25zZXF1ZW50bHkgdHdlYWtzIHRoZSBIVE1MIGluIG9yZGVyIHRvIHJlc3RvcmUgdGhlIGNvcnJlY3QgYmxvY2sgZmxvdyBpbiB0aGUgYnJvd3NlciByZW5kZXJlciwgcmVzdWx0aW5nIGluIHRoZSBhcHByb3ByaWF0ZSBDU1MgY29sdW1uaXNhdGlvbiAod2hpY2ggaXMgdXNlZCB0byBlbXVsYXRlIHBhZ2luYXRpb24pLlxuICAgIGlmICghX3NwaW5lLmlzTGVmdFRvUmlnaHQoKSAmJiBfaHRtbEJvZHlJc0xUUkRpcmVjdGlvbiAmJiAhX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlKSB7XG4gICAgICBfJGh0bWxCb2R5WzBdLnNldEF0dHJpYnV0ZShcImRpclwiLCBcInJ0bFwiKTtcbiAgICAgIF9odG1sQm9keUlzTFRSRGlyZWN0aW9uID0gZmFsc2U7XG4gICAgICBfaHRtbEJvZHlJc0xUUldyaXRpbmdNb2RlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX3BhZ2luYXRpb25JbmZvLmlzVmVydGljYWxXcml0aW5nTW9kZSA9IF9odG1sQm9keUlzVmVydGljYWxXcml0aW5nTW9kZTtcblxuICAgIGhpZGVCb29rKCk7XG4gICAgXyRpZnJhbWUuY3NzKFwib3BhY2l0eVwiLCBcIjFcIik7XG5cbiAgICB1cGRhdGVWaWV3cG9ydFNpemUoKTtcbiAgICBfJGVwdWJIdG1sLmNzcyhcImhlaWdodFwiLCBfbGFzdFZpZXdQb3J0U2l6ZS5oZWlnaHQgKyBcInB4XCIpO1xuXG4gICAgXyRlcHViSHRtbC5jc3MoXCJwb3NpdGlvblwiLCBcInJlbGF0aXZlXCIpO1xuICAgIF8kZXB1Ykh0bWwuY3NzKFwibWFyZ2luXCIsIFwiMFwiKTtcbiAgICBfJGVwdWJIdG1sLmNzcyhcInBhZGRpbmdcIiwgXCIwXCIpO1xuXG4gICAgXyRlcHViSHRtbC5jc3MoXCJjb2x1bW4tYXhpc1wiLCAoX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlID8gXCJ2ZXJ0aWNhbFwiIDogXCJob3Jpem9udGFsXCIpKTtcblxuICAgIC8vXG4gICAgLy8gLy8vLy8vLy8vXG4gICAgLy8gLy9Db2x1bW5zIERlYnVnZ2luZ1xuICAgIC8vXG4gICAgLy8gICAgIF8kZXB1Ykh0bWwuY3NzKFwiY29sdW1uLXJ1bGUtY29sb3JcIiwgXCJyZWRcIik7XG4gICAgLy8gICAgIF8kZXB1Ykh0bWwuY3NzKFwiY29sdW1uLXJ1bGUtc3R5bGVcIiwgXCJkYXNoZWRcIik7XG4gICAgLy8gICAgIF8kZXB1Ykh0bWwuY3NzKFwiY29sdW1uLXJ1bGUtd2lkdGhcIiwgXCIxcHhcIik7XG4gICAgLy8gXyRlcHViSHRtbC5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsICcjYjBjNGRlJyk7XG4gICAgLy9cbiAgICAvLyAvLy8vXG5cbiAgICBzZWxmLmFwcGx5Qm9va1N0eWxlcygpO1xuICAgIHJlc2l6ZUltYWdlcygpO1xuXG4gICAgdXBkYXRlSHRtbEZvbnRTaXplKCk7XG4gICAgdXBkYXRlQ29sdW1uR2FwKCk7XG5cblxuICAgIHNlbGYuYXBwbHlTdHlsZXMoKTtcbiAgfVxuXG4gIHRoaXMuYXBwbHlTdHlsZXMgPSBmdW5jdGlvbigpIHtcblxuICAgIHNldFN0eWxlcyhfdXNlclN0eWxlcy5nZXRTdHlsZXMoKSwgXyRlbC5wYXJlbnQoKSk7XG5cbiAgICAvL2JlY2F1c2UgbGVmdCwgdG9wLCBib3R0b20sIHJpZ2h0IHNldHRpbmcgaWdub3JlcyBwYWRkaW5nIG9mIHBhcmVudCBjb250YWluZXJcbiAgICAvL3dlIGhhdmUgdG8gdGFrZSBpdCB0byBhY2NvdW50IG1hbnVhbGx5XG4gICAgdmFyIGVsZW1lbnRNYXJnaW5zID0gTWFyZ2lucy5mcm9tRWxlbWVudChfJGVsKTtcbiAgICBzZXRGcmFtZVNpemVzVG9SZWN0YW5nbGUoZWxlbWVudE1hcmdpbnMucGFkZGluZyk7XG5cblxuICAgIHVwZGF0ZVZpZXdwb3J0U2l6ZSgpO1xuICAgIHVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgfTtcblxuICB0aGlzLmFwcGx5Qm9va1N0eWxlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKF8kZXB1Ykh0bWwpIHtcbiAgICAgIHNldFN0eWxlcyhfYm9va1N0eWxlcy5nZXRTdHlsZXMoKSwgXyRlcHViSHRtbCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIG9wZW5EZWZlcnJlZEVsZW1lbnQoKSB7XG5cbiAgICBpZiAoIV9kZWZlcnJlZFBhZ2VSZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlZmVycmVkRGF0YSA9IF9kZWZlcnJlZFBhZ2VSZXF1ZXN0O1xuICAgIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuICAgIHNlbGYub3BlblBhZ2UoZGVmZXJyZWREYXRhKTtcblxuICB9XG5cbiAgdGhpcy5vcGVuUGFnZSA9IGZ1bmN0aW9uKHBhZ2VSZXF1ZXN0KSB7XG5cbiAgICBpZiAoX2lzV2FpdGluZ0ZyYW1lUmVuZGVyKSB7XG4gICAgICBfZGVmZXJyZWRQYWdlUmVxdWVzdCA9IHBhZ2VSZXF1ZXN0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGlmIG5vIHNwaW5lIGl0ZW0gc3BlY2lmaWVkIHdlIGFyZSB0YWxraW5nIGFib3V0IGN1cnJlbnQgc3BpbmUgaXRlbVxuICAgIGlmIChwYWdlUmVxdWVzdC5zcGluZUl0ZW0gJiYgcGFnZVJlcXVlc3Quc3BpbmVJdGVtICE9IF9jdXJyZW50U3BpbmVJdGVtKSB7XG4gICAgICBfZGVmZXJyZWRQYWdlUmVxdWVzdCA9IHBhZ2VSZXF1ZXN0O1xuICAgICAgbG9hZFNwaW5lSXRlbShwYWdlUmVxdWVzdC5zcGluZUl0ZW0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwYWdlSW5kZXggPSB1bmRlZmluZWQ7XG5cblxuICAgIGlmIChwYWdlUmVxdWVzdC5zcGluZUl0ZW1QYWdlSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFnZUluZGV4ID0gcGFnZVJlcXVlc3Quc3BpbmVJdGVtUGFnZUluZGV4O1xuICAgIH0gZWxzZSBpZiAocGFnZVJlcXVlc3QuZWxlbWVudElkKSB7XG4gICAgICBwYWdlSW5kZXggPSBfbmF2aWdhdGlvbkxvZ2ljLmdldFBhZ2VGb3JFbGVtZW50SWQocGFnZVJlcXVlc3QuZWxlbWVudElkKTtcbiAgICB9IGVsc2UgaWYgKHBhZ2VSZXF1ZXN0LmVsZW1lbnRDZmkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhZ2VJbmRleCA9IF9uYXZpZ2F0aW9uTG9naWMuZ2V0UGFnZUZvckVsZW1lbnRDZmkocGFnZVJlcXVlc3QuZWxlbWVudENmaSwgW1wiY2ZpLW1hcmtlclwiLCBcIm1vLWNmaS1oaWdobGlnaHRcIl0sIFtdLCBbXCJNYXRoSmF4X01lc3NhZ2VcIl0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBwYWdlSW5kZXggPSAwO1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVJlcXVlc3QuZmlyc3RQYWdlKSB7XG4gICAgICBwYWdlSW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAocGFnZVJlcXVlc3QubGFzdFBhZ2UpIHtcbiAgICAgIHBhZ2VJbmRleCA9IF9wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJObyBjcml0ZXJpYSBpbiBwYWdlUmVxdWVzdFwiKTtcbiAgICAgIHBhZ2VJbmRleCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHBhZ2VJbmRleCA+PSAwICYmIHBhZ2VJbmRleCA8IF9wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudCkge1xuICAgICAgX3BhZ2luYXRpb25JbmZvLmN1cnJlbnRTcHJlYWRJbmRleCA9IE1hdGguZmxvb3IocGFnZUluZGV4IC8gX3BhZ2luYXRpb25JbmZvLnZpc2libGVDb2x1bW5Db3VudCk7XG4gICAgICBvblBhZ2luYXRpb25DaGFuZ2VkKHBhZ2VSZXF1ZXN0LmluaXRpYXRvciwgcGFnZVJlcXVlc3Quc3BpbmVJdGVtLCBwYWdlUmVxdWVzdC5lbGVtZW50SWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnSWxsZWdhbCBwYWdlSW5kZXggdmFsdWU6ICcsIHBhZ2VJbmRleCwgJ2NvbHVtbiBjb3VudCBpcyAnLCBfcGFnaW5hdGlvbkluZm8uY29sdW1uQ291bnQpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiByZWRyYXcoKSB7XG5cbiAgICB2YXIgb2Zmc2V0VmFsID0gLV9wYWdpbmF0aW9uSW5mby5wYWdlT2Zmc2V0ICsgXCJweFwiO1xuXG4gICAgaWYgKF9odG1sQm9keUlzVmVydGljYWxXcml0aW5nTW9kZSkge1xuICAgICAgXyRlcHViSHRtbC5jc3MoXCJ0b3BcIiwgb2Zmc2V0VmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGx0ciA9IF9odG1sQm9keUlzTFRSRGlyZWN0aW9uIHx8IF9odG1sQm9keUlzTFRSV3JpdGluZ01vZGU7XG5cbiAgICAgIF8kZXB1Ykh0bWwuY3NzKFwibGVmdFwiLCBsdHIgPyBvZmZzZXRWYWwgOiBcIlwiKTtcbiAgICAgIF8kZXB1Ykh0bWwuY3NzKFwicmlnaHRcIiwgIWx0ciA/IG9mZnNldFZhbCA6IFwiXCIpO1xuICAgIH1cblxuICAgIHNob3dCb29rKCk7IC8vIGFzIGl0J3Mgbm8gbG9uZ2VyIGhpZGRlbiBieSBzaGlmdGluZyB0aGUgcG9zaXRpb25cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZpZXdwb3J0U2l6ZSgpIHtcblxuICAgIHZhciBuZXdXaWR0aCA9IF8kY29udGVudEZyYW1lLndpZHRoKCk7XG4gICAgdmFyIG5ld0hlaWdodCA9IF8kY29udGVudEZyYW1lLmhlaWdodCgpO1xuXG4gICAgaWYgKF9sYXN0Vmlld1BvcnRTaXplLndpZHRoICE9PSBuZXdXaWR0aCB8fCBfbGFzdFZpZXdQb3J0U2l6ZS5oZWlnaHQgIT09IG5ld0hlaWdodCkge1xuXG4gICAgICBfbGFzdFZpZXdQb3J0U2l6ZS53aWR0aCA9IG5ld1dpZHRoO1xuICAgICAgX2xhc3RWaWV3UG9ydFNpemUuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25QYWdpbmF0aW9uQ2hhbmdlZChpbml0aWF0b3IsIHBhZ2luYXRpb25SZXF1ZXN0X3NwaW5lSXRlbSwgcGFnaW5hdGlvblJlcXVlc3RfZWxlbWVudElkKSB7XG5cbiAgICBfcGFnaW5hdGlvbkluZm8ucGFnZU9mZnNldCA9IChfcGFnaW5hdGlvbkluZm8uY29sdW1uV2lkdGggKyBfcGFnaW5hdGlvbkluZm8uY29sdW1uR2FwKSAqIF9wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQgKiBfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4O1xuXG4gICAgcmVkcmF3KCk7XG4gICAgc2VsZi50cmlnZ2VyKEludGVybmFsRXZlbnRzLkNVUlJFTlRfVklFV19QQUdJTkFUSU9OX0NIQU5HRUQsIHtcbiAgICAgIHBhZ2luYXRpb25JbmZvOiBzZWxmLmdldFBhZ2luYXRpb25JbmZvKCksXG4gICAgICBpbml0aWF0b3I6IGluaXRpYXRvcixcbiAgICAgIHNwaW5lSXRlbTogcGFnaW5hdGlvblJlcXVlc3Rfc3BpbmVJdGVtLFxuICAgICAgZWxlbWVudElkOiBwYWdpbmF0aW9uUmVxdWVzdF9lbGVtZW50SWRcbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMub3BlblBhZ2VQcmV2ID0gZnVuY3Rpb24oaW5pdGlhdG9yKSB7XG5cbiAgICBpZiAoIV9jdXJyZW50U3BpbmVJdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF9wYWdpbmF0aW9uSW5mby5jdXJyZW50U3ByZWFkSW5kZXggPiAwKSB7XG4gICAgICBfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4LS07XG4gICAgICBvblBhZ2luYXRpb25DaGFuZ2VkKGluaXRpYXRvcik7XG4gICAgfSBlbHNlIHtcblxuICAgICAgdmFyIHByZXZTcGluZUl0ZW0gPSBfc3BpbmUucHJldkl0ZW0oX2N1cnJlbnRTcGluZUl0ZW0sIHRydWUpO1xuICAgICAgaWYgKHByZXZTcGluZUl0ZW0pIHtcblxuICAgICAgICB2YXIgcGFnZVJlcXVlc3QgPSBuZXcgUGFnZU9wZW5SZXF1ZXN0KHByZXZTcGluZUl0ZW0sIGluaXRpYXRvcik7XG4gICAgICAgIHBhZ2VSZXF1ZXN0LnNldExhc3RQYWdlKCk7XG4gICAgICAgIHNlbGYub3BlblBhZ2UocGFnZVJlcXVlc3QpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLm9wZW5QYWdlTmV4dCA9IGZ1bmN0aW9uKGluaXRpYXRvcikge1xuXG4gICAgaWYgKCFfY3VycmVudFNwaW5lSXRlbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4IDwgX3BhZ2luYXRpb25JbmZvLnNwcmVhZENvdW50IC0gMSkge1xuICAgICAgX3BhZ2luYXRpb25JbmZvLmN1cnJlbnRTcHJlYWRJbmRleCsrO1xuICAgICAgb25QYWdpbmF0aW9uQ2hhbmdlZChpbml0aWF0b3IpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIHZhciBuZXh0U3BpbmVJdGVtID0gX3NwaW5lLm5leHRJdGVtKF9jdXJyZW50U3BpbmVJdGVtLCB0cnVlKTtcbiAgICAgIGlmIChuZXh0U3BpbmVJdGVtKSB7XG5cbiAgICAgICAgdmFyIHBhZ2VSZXF1ZXN0ID0gbmV3IFBhZ2VPcGVuUmVxdWVzdChuZXh0U3BpbmVJdGVtLCBpbml0aWF0b3IpO1xuICAgICAgICBwYWdlUmVxdWVzdC5zZXRGaXJzdFBhZ2UoKTtcbiAgICAgICAgc2VsZi5vcGVuUGFnZShwYWdlUmVxdWVzdCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5cbiAgZnVuY3Rpb24gdXBkYXRlUGFnaW5hdGlvbigpIHtcblxuICAgIC8vIEF0IDEwMCUgZm9udC1zaXplID0gMTZweCAob24gSFRNTCwgbm90IGJvZHkgb3IgZGVzY2VuZGFudCBtYXJrdXAhKVxuICAgIHZhciBNQVhXID0gNTUwOyAvL1RPRE8gdXNlci92ZW5kb3ItY29uZmlndXJhYmxlP1xuICAgIHZhciBNSU5XID0gNDAwO1xuXG4gICAgdmFyIGlzRG91YmxlUGFnZVN5bnRoZXRpY1NwcmVhZCA9IGRlZHVjZVN5bnRoZXRpY1NwcmVhZChfJHZpZXdwb3J0LCBfY3VycmVudFNwaW5lSXRlbSwgX3ZpZXdTZXR0aW5ncyk7XG5cbiAgICB2YXIgZm9yY2VkID0gKGlzRG91YmxlUGFnZVN5bnRoZXRpY1NwcmVhZCA9PT0gZmFsc2UpIHx8IChpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQgPT09IHRydWUpO1xuICAgIC8vIGV4Y2x1ZGVzIDAgYW5kIDEgZmFsc3kvdHJ1dGh5IHZhbHVlcyB3aGljaCBkZW5vdGUgbm9uLWZvcmNlZCByZXN1bHRcblxuICAgIC8vIGNvbnNvbGUuZGVidWcoXCJpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQ6IFwiICsgaXNEb3VibGVQYWdlU3ludGhldGljU3ByZWFkKTtcbiAgICAvLyBjb25zb2xlLmRlYnVnKFwiZm9yY2VkOiBcIiArIGZvcmNlZCk7XG4gICAgLy9cbiAgICBpZiAoaXNEb3VibGVQYWdlU3ludGhldGljU3ByZWFkID09PSAwKSB7XG4gICAgICBpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQgPSAxOyAvLyB0cnkgZG91YmxlIHBhZ2UsIHdpbGwgc2hyaW5rIGlmIGRvZXNuJ3QgZml0XG4gICAgICAvLyBjb25zb2xlLmRlYnVnKFwiVFJZSU5HIFNQUkVBRCBJTlNURUFEIE9GIFNJTkdMRS4uLlwiKTtcbiAgICB9XG5cbiAgICBfcGFnaW5hdGlvbkluZm8udmlzaWJsZUNvbHVtbkNvdW50ID0gaXNEb3VibGVQYWdlU3ludGhldGljU3ByZWFkID8gMiA6IDE7XG5cbiAgICBpZiAoX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlKSB7XG4gICAgICBNQVhXICo9IDI7XG4gICAgICBpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQgPSBmYWxzZTtcbiAgICAgIGZvcmNlZCA9IHRydWU7XG4gICAgICBfcGFnaW5hdGlvbkluZm8udmlzaWJsZUNvbHVtbkNvdW50ID0gMTtcbiAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJWZXJ0aWNhbCBXcml0aW5nIE1vZGUgPT4gc2luZ2xlIENTUyBjb2x1bW4sIGJ1dCBiZWhhdmVzIGFzIGlmIHR3by1wYWdlIHNwcmVhZFwiKTtcbiAgICB9XG5cbiAgICBpZiAoIV8kZXB1Ykh0bWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBoaWRlQm9vaygpOyAvLyBzaGlmdEJvb2tPZlNjcmVlbigpO1xuXG4gICAgdmFyIGJvcmRlckxlZnQgPSBwYXJzZUludChfJHZpZXdwb3J0LmNzcyhcImJvcmRlci1sZWZ0LXdpZHRoXCIpKTtcbiAgICB2YXIgYm9yZGVyUmlnaHQgPSBwYXJzZUludChfJHZpZXdwb3J0LmNzcyhcImJvcmRlci1yaWdodC13aWR0aFwiKSk7XG4gICAgdmFyIGFkanVzdGVkR2FwTGVmdCA9IF9wYWdpbmF0aW9uSW5mby5jb2x1bW5HYXAgLyAyO1xuICAgIGFkanVzdGVkR2FwTGVmdCA9IE1hdGgubWF4KDAsIGFkanVzdGVkR2FwTGVmdCAtIGJvcmRlckxlZnQpXG4gICAgdmFyIGFkanVzdGVkR2FwUmlnaHQgPSBfcGFnaW5hdGlvbkluZm8uY29sdW1uR2FwIC8gMjtcbiAgICBhZGp1c3RlZEdhcFJpZ2h0ID0gTWF0aC5tYXgoMCwgYWRqdXN0ZWRHYXBSaWdodCAtIGJvcmRlclJpZ2h0KVxuXG4gICAgdmFyIGZpbGxlciA9IDA7XG5cbiAgICAvLyAgICAgICAgIHZhciB3aW4gPSBfJGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgXyRpZnJhbWVbMF0uY29udGVudFdpbmRvdztcbiAgICAvLyAgICAgICAgIHZhciBodG1sQm9keUNvbXB1dGVkU3R5bGUgPSB3aW4uZ2V0Q29tcHV0ZWRTdHlsZShfJGh0bWxCb2R5WzBdLCBudWxsKTtcbiAgICAvLyAgICAgICAgIGlmIChodG1sQm9keUNvbXB1dGVkU3R5bGUpXG4gICAgLy8gICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICAgdmFyIGZvbnRTaXplID0gdW5kZWZpbmVkO1xuICAgIC8vICAgICAgICAgICAgIGlmIChodG1sQm9keUNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSlcbiAgICAvLyAgICAgICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICAgICAgIGZvbnRTaXplID0gaHRtbEJvZHlDb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJmb250LXNpemVcIik7XG4gICAgLy8gICAgICAgICAgICAgfVxuICAgIC8vICAgICAgICAgICAgIGVsc2VcbiAgICAvLyAgICAgICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICAgICAgIGZvbnRTaXplID0gaHRtbEJvZHlDb21wdXRlZFN0eWxlLmZvbnRTaXplO1xuICAgIC8vICAgICAgICAgICAgIH1cbiAgICAvLyBjb25zb2xlLmRlYnVnKGZvbnRTaXplKTtcbiAgICAvLyAgICAgICAgIH1cblxuICAgIGlmIChfdmlld1NldHRpbmdzLmZvbnRTaXplKSB7XG4gICAgICB2YXIgZm9udFNpemVBZGp1c3QgPSAoX3ZpZXdTZXR0aW5ncy5mb250U2l6ZSAqIDAuOCkgLyAxMDA7XG4gICAgICBNQVhXID0gTWF0aC5mbG9vcihNQVhXICogZm9udFNpemVBZGp1c3QpO1xuICAgICAgTUlOVyA9IE1hdGguZmxvb3IoTUlOVyAqIGZvbnRTaXplQWRqdXN0KTtcbiAgICB9XG5cbiAgICB2YXIgYXZhaWxhYmxlV2lkdGggPSBfJHZpZXdwb3J0LndpZHRoKCk7XG4gICAgdmFyIHRleHRXaWR0aCA9IGF2YWlsYWJsZVdpZHRoIC0gYm9yZGVyTGVmdCAtIGJvcmRlclJpZ2h0IC0gYWRqdXN0ZWRHYXBMZWZ0IC0gYWRqdXN0ZWRHYXBSaWdodDtcbiAgICBpZiAoaXNEb3VibGVQYWdlU3ludGhldGljU3ByZWFkKSB7XG4gICAgICB0ZXh0V2lkdGggPSAodGV4dFdpZHRoIC0gX3BhZ2luYXRpb25JbmZvLmNvbHVtbkdhcCkgKiAwLjU7XG4gICAgfVxuXG4gICAgaWYgKHRleHRXaWR0aCA+IE1BWFcpIHtcbiAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJMSU1JVElORyBXSURUSFwiKTtcbiAgICAgIGZpbGxlciA9IE1hdGguZmxvb3IoKHRleHRXaWR0aCAtIE1BWFcpICogKGlzRG91YmxlUGFnZVN5bnRoZXRpY1NwcmVhZCA/IDEgOiAwLjUpKTtcbiAgICB9IGVsc2UgaWYgKCFmb3JjZWQgJiYgdGV4dFdpZHRoIDwgTUlOVyAmJiBpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQpIHtcbiAgICAgIC8vY29uc29sZS5kZWJ1ZyhcIlJFRFVDSU5HIFNQUkVBRCBUTyBTSU5HTEVcIik7XG4gICAgICBpc0RvdWJsZVBhZ2VTeW50aGV0aWNTcHJlYWQgPSBmYWxzZTtcbiAgICAgIF9wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQgPSAxO1xuXG4gICAgICB0ZXh0V2lkdGggPSBhdmFpbGFibGVXaWR0aCAtIGJvcmRlckxlZnQgLSBib3JkZXJSaWdodCAtIGFkanVzdGVkR2FwTGVmdCAtIGFkanVzdGVkR2FwUmlnaHQ7XG4gICAgICBpZiAodGV4dFdpZHRoID4gTUFYVykge1xuICAgICAgICBmaWxsZXIgPSBNYXRoLmZsb29yKCh0ZXh0V2lkdGggLSBNQVhXKSAqIDAuNSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgXyRlbC5jc3Moe1xuICAgICAgXCJsZWZ0XCI6IChmaWxsZXIgKyBhZGp1c3RlZEdhcExlZnQgKyBcInB4XCIpLFxuICAgICAgXCJyaWdodFwiOiAoZmlsbGVyICsgYWRqdXN0ZWRHYXBSaWdodCArIFwicHhcIilcbiAgICB9KTtcbiAgICB1cGRhdGVWaWV3cG9ydFNpemUoKTsgLy9fJGNvbnRlbnRGcmFtZSA9PT4gX2xhc3RWaWV3UG9ydFNpemVcblxuXG4gICAgXyRpZnJhbWUuY3NzKFwid2lkdGhcIiwgX2xhc3RWaWV3UG9ydFNpemUud2lkdGggKyBcInB4XCIpO1xuICAgIF8kaWZyYW1lLmNzcyhcImhlaWdodFwiLCBfbGFzdFZpZXdQb3J0U2l6ZS5oZWlnaHQgKyBcInB4XCIpO1xuXG4gICAgXyRlcHViSHRtbC5jc3MoXCJoZWlnaHRcIiwgX2xhc3RWaWV3UG9ydFNpemUuaGVpZ2h0ICsgXCJweFwiKTtcblxuICAgIC8vIGJlbG93IG1pbi0gbWF4LSBhcmUgcmVxdWlyZWQgaW4gdmVydGljYWwgd3JpdGluZyBtb2RlIChoZWlnaHQgaXMgbm90IGVub3VnaCwgaW4gc29tZSBjYXNlcy4uLndlaXJkISlcbiAgICBfJGVwdWJIdG1sLmNzcyhcIm1pbi1oZWlnaHRcIiwgX2xhc3RWaWV3UG9ydFNpemUuaGVpZ2h0ICsgXCJweFwiKTtcbiAgICBfJGVwdWJIdG1sLmNzcyhcIm1heC1oZWlnaHRcIiwgX2xhc3RWaWV3UG9ydFNpemUuaGVpZ2h0ICsgXCJweFwiKTtcblxuICAgIC8vbm9ybWFsaXNlIHNwYWNpbmcgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIHdpdGggY29sdW1uLWlzYXRpb25cbiAgICBfJGVwdWJIdG1sLmNzcygnbWFyZ2luJywgMCk7XG4gICAgXyRlcHViSHRtbC5jc3MoJ3BhZGRpbmcnLCAwKTtcbiAgICBfJGVwdWJIdG1sLmNzcygnYm9yZGVyJywgMCk7XG4gICAgXyRodG1sQm9keS5jc3MoJ21hcmdpbicsIDApO1xuICAgIF8kaHRtbEJvZHkuY3NzKCdwYWRkaW5nJywgMCk7XG5cbiAgICB2YXIgc3BhY2luZyA9IDA7XG4gICAgdHJ5IHtcbiAgICAgIHNwYWNpbmcgPSBwYXJzZUludChfJGh0bWxCb2R5LmNzcygncGFkZGluZy10b3AnKSkgKyBwYXJzZUludChfJGh0bWxCb2R5LmNzcygnYm9yZGVyLXRvcC13aWR0aCcpKSArIHBhcnNlSW50KF8kaHRtbEJvZHkuY3NzKCdib3JkZXItYm90dG9tLXdpZHRoJykpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuXG4gICAgfVxuICAgIC8vIE5lZWRlZCBmb3IgRmlyZWZveCwgb3RoZXJ3aXNlIGNvbnRlbnQgc2hyaW5rcyB2ZXJ0aWNhbGx5LCByZXN1bHRpbmcgaW4gc2Nyb2xsV2lkdGggYWNjb21vZGF0aW5nIG1vcmUgY29sdW1ucyB0aGFuIG5lY2Vzc2FyeVxuICAgIC8vXyRodG1sQm9keS5jc3MoXCJtaW4taGVpZ2h0XCIsIF9sYXN0Vmlld1BvcnRTaXplLmhlaWdodC1zcGFjaW5nLTkgKyBcInB4XCIpO1xuICAgIF8kaHRtbEJvZHkuY3NzKFwibWluLWhlaWdodFwiLCBcIjUwJVwiKTtcbiAgICBfJGh0bWxCb2R5LmNzcyhcIm1heC1oZWlnaHRcIiwgX2xhc3RWaWV3UG9ydFNpemUuaGVpZ2h0IC0gc3BhY2luZyArIFwicHhcIik7XG5cbiAgICBfcGFnaW5hdGlvbkluZm8ucmlnaHRUb0xlZnQgPSBfc3BpbmUuaXNSaWdodFRvTGVmdCgpO1xuXG4gICAgX3BhZ2luYXRpb25JbmZvLmNvbHVtbldpZHRoID0gTWF0aC5yb3VuZCgoKF9odG1sQm9keUlzVmVydGljYWxXcml0aW5nTW9kZSA/IF9sYXN0Vmlld1BvcnRTaXplLmhlaWdodCA6IF9sYXN0Vmlld1BvcnRTaXplLndpZHRoKSAtIF9wYWdpbmF0aW9uSW5mby5jb2x1bW5HYXAgKiAoX3BhZ2luYXRpb25JbmZvLnZpc2libGVDb2x1bW5Db3VudCAtIDEpKSAvIF9wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQpO1xuXG4gICAgXyRlcHViSHRtbC5jc3MoXCJ3aWR0aFwiLCAoX2h0bWxCb2R5SXNWZXJ0aWNhbFdyaXRpbmdNb2RlID8gX2xhc3RWaWV3UG9ydFNpemUud2lkdGggOiBfcGFnaW5hdGlvbkluZm8uY29sdW1uV2lkdGgpICsgXCJweFwiKTtcblxuICAgIF8kZXB1Ykh0bWwuY3NzKFwiY29sdW1uLXdpZHRoXCIsIF9wYWdpbmF0aW9uSW5mby5jb2x1bW5XaWR0aCArIFwicHhcIik7XG5cbiAgICBfJGVwdWJIdG1sLmNzcyh7XG4gICAgICBsZWZ0OiBcIjBcIixcbiAgICAgIHJpZ2h0OiBcIjBcIixcbiAgICAgIHRvcDogXCIwXCJcbiAgICB9KTtcblxuICAgIHRyaWdnZXJMYXlvdXQoXyRpZnJhbWUpO1xuXG4gICAgX3BhZ2luYXRpb25JbmZvLmNvbHVtbkNvdW50ID0gKChfaHRtbEJvZHlJc1ZlcnRpY2FsV3JpdGluZ01vZGUgPyBfJGVwdWJIdG1sWzBdLnNjcm9sbEhlaWdodCA6IF8kZXB1Ykh0bWxbMF0uc2Nyb2xsV2lkdGgpICsgX3BhZ2luYXRpb25JbmZvLmNvbHVtbkdhcCkgLyAoX3BhZ2luYXRpb25JbmZvLmNvbHVtbldpZHRoICsgX3BhZ2luYXRpb25JbmZvLmNvbHVtbkdhcCk7XG4gICAgX3BhZ2luYXRpb25JbmZvLmNvbHVtbkNvdW50ID0gTWF0aC5yb3VuZChfcGFnaW5hdGlvbkluZm8uY29sdW1uQ291bnQpO1xuXG4gICAgdmFyIHRvdGFsR2FwcyA9IChfcGFnaW5hdGlvbkluZm8uY29sdW1uQ291bnQgLSAxKSAqIF9wYWdpbmF0aW9uSW5mby5jb2x1bW5HYXA7XG4gICAgdmFyIGNvbFdpZHRoQ2hlY2sgPSAoKF9odG1sQm9keUlzVmVydGljYWxXcml0aW5nTW9kZSA/IF8kZXB1Ykh0bWxbMF0uc2Nyb2xsSGVpZ2h0IDogXyRlcHViSHRtbFswXS5zY3JvbGxXaWR0aCkgLSB0b3RhbEdhcHMpIC8gX3BhZ2luYXRpb25JbmZvLmNvbHVtbkNvdW50O1xuICAgIGNvbFdpZHRoQ2hlY2sgPSBNYXRoLnJvdW5kKGNvbFdpZHRoQ2hlY2spO1xuXG4gICAgaWYgKGNvbFdpZHRoQ2hlY2sgPiBfcGFnaW5hdGlvbkluZm8uY29sdW1uV2lkdGgpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJBREpVU1QgQ09MVU1OXCIpO1xuICAgICAgY29uc29sZS5sb2coX3BhZ2luYXRpb25JbmZvLmNvbHVtbldpZHRoKTtcbiAgICAgIGNvbnNvbGUubG9nKGNvbFdpZHRoQ2hlY2spO1xuXG4gICAgICBfcGFnaW5hdGlvbkluZm8uY29sdW1uV2lkdGggPSBjb2xXaWR0aENoZWNrO1xuICAgIH1cblxuICAgIF9wYWdpbmF0aW9uSW5mby5zcHJlYWRDb3VudCA9IE1hdGguY2VpbChfcGFnaW5hdGlvbkluZm8uY29sdW1uQ291bnQgLyBfcGFnaW5hdGlvbkluZm8udmlzaWJsZUNvbHVtbkNvdW50KTtcblxuICAgIGlmIChfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4ID49IF9wYWdpbmF0aW9uSW5mby5zcHJlYWRDb3VudCkge1xuICAgICAgX3BhZ2luYXRpb25JbmZvLmN1cnJlbnRTcHJlYWRJbmRleCA9IF9wYWdpbmF0aW9uSW5mby5zcHJlYWRDb3VudCAtIDE7XG4gICAgfVxuXG4gICAgaWYgKF9kZWZlcnJlZFBhZ2VSZXF1ZXN0KSB7XG5cbiAgICAgIC8vaWYgdGhlcmUgaXMgYSByZXF1ZXN0IGZvciBzcGVjaWZpYyBwYWdlIHdlIGdldCBoZXJlXG4gICAgICBvcGVuRGVmZXJyZWRFbGVtZW50KCk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgLy93ZSBnZXQgaGVyZSBvbiByZXNpemluZyB0aGUgdmlld3BvcnRcblxuICAgICAgb25QYWdpbmF0aW9uQ2hhbmdlZChzZWxmKTsgLy8gPT4gcmVkcmF3KCkgPT4gc2hvd0Jvb2soKSwgc28gdGhlIHRyaWNrIGJlbG93IGlzIG5vdCBuZWVkZWRcblxuICAgICAgLy8gLy9XZSBkbyB0aGlzIHRvIGZvcmNlIHJlLXJlbmRlcmluZyBvZiB0aGUgZG9jdW1lbnQgaW4gdGhlIGlmcmFtZS5cbiAgICAgIC8vIC8vVGhlcmUgaXMgYSBidWcgaW4gV2ViVmlldyBjb250cm9sIHdpdGggcmlnaHQgdG8gbGVmdCBjb2x1bW5zIGxheW91dCAtIGFmdGVyIHJlc2l6aW5nIHRoZSB3aW5kb3cgaHRtbCBkb2N1bWVudFxuICAgICAgLy8gLy9pcyBzaGlmdGVkIGluIHNpZGUgdGhlIGNvbnRhaW5pbmcgZGl2LiBIaWRpbmcgYW5kIHNob3dpbmcgdGhlIGh0bWwgZWxlbWVudCBwdXRzIGRvY3VtZW50IGluIHBsYWNlLlxuICAgICAgLy8gXyRlcHViSHRtbC5oaWRlKCk7XG4gICAgICAvLyBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgLy8gICAgIF8kZXB1Ykh0bWwuc2hvdygpO1xuICAgICAgLy8gICAgIG9uUGFnaW5hdGlvbkNoYW5nZWQoc2VsZik7IC8vID0+IHJlZHJhdygpID0+IHNob3dCb29rKClcbiAgICAgIC8vIH0sIDUwKTtcblxuICAgIH1cbiAgfVxuXG4gIC8vICAgIGZ1bmN0aW9uIHNoaWZ0Qm9va09mU2NyZWVuKCkge1xuICAvL1xuICAvLyAgICAgICAgaWYoX3NwaW5lLmlzTGVmdFRvUmlnaHQoKSkge1xuICAvLyAgICAgICAgICAgIF8kZXB1Ykh0bWwuY3NzKFwibGVmdFwiLCAoX2xhc3RWaWV3UG9ydFNpemUud2lkdGggKyAxMDAwKSArIFwicHhcIik7XG4gIC8vICAgICAgICB9XG4gIC8vICAgICAgICBlbHNlIHtcbiAgLy8gICAgICAgICAgICBfJGVwdWJIdG1sLmNzcyhcInJpZ2h0XCIsIChfbGFzdFZpZXdQb3J0U2l6ZS53aWR0aCArIDEwMDApICsgXCJweFwiKTtcbiAgLy8gICAgICAgIH1cbiAgLy8gICAgfVxuXG4gIGZ1bmN0aW9uIGhpZGVCb29rKCkge1xuICAgIGlmIChfY3VycmVudE9wYWNpdHkgIT0gLTEpIHJldHVybjsgLy8gYWxyZWFkeSBoaWRkZW5cblxuICAgIF9jdXJyZW50T3BhY2l0eSA9IF8kZXB1Ykh0bWwuY3NzKCdvcGFjaXR5Jyk7XG4gICAgXyRlcHViSHRtbC5jc3MoJ29wYWNpdHknLCBcIjBcIik7XG4gIH1cblxuICBmdW5jdGlvbiBzaG93Qm9vaygpIHtcbiAgICBpZiAoX2N1cnJlbnRPcGFjaXR5ICE9IC0xKSB7XG4gICAgICBfJGVwdWJIdG1sLmNzcygnb3BhY2l0eScsIF9jdXJyZW50T3BhY2l0eSk7XG4gICAgfVxuICAgIF9jdXJyZW50T3BhY2l0eSA9IC0xO1xuICB9XG5cbiAgdGhpcy5nZXRGaXJzdFZpc2libGVFbGVtZW50Q2ZpID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgY29udGVudE9mZnNldHMgPSBnZXRWaXNpYmxlQ29udGVudE9mZnNldHMoKTtcbiAgICByZXR1cm4gX25hdmlnYXRpb25Mb2dpYy5nZXRGaXJzdFZpc2libGVFbGVtZW50Q2ZpKGNvbnRlbnRPZmZzZXRzKTtcbiAgfTtcblxuICB0aGlzLmdldFBhZ2luYXRpb25JbmZvID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgcGFnaW5hdGlvbkluZm8gPSBuZXcgQ3VycmVudFBhZ2VzSW5mbyhfc3BpbmUsIGZhbHNlKTtcblxuICAgIGlmICghX2N1cnJlbnRTcGluZUl0ZW0pIHtcbiAgICAgIHJldHVybiBwYWdpbmF0aW9uSW5mbztcbiAgICB9XG5cbiAgICB2YXIgcGFnZUluZGV4ZXMgPSBnZXRPcGVuUGFnZUluZGV4ZXMoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IHBhZ2VJbmRleGVzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcblxuICAgICAgcGFnaW5hdGlvbkluZm8uYWRkT3BlblBhZ2UocGFnZUluZGV4ZXNbaV0sIF9wYWdpbmF0aW9uSW5mby5jb2x1bW5Db3VudCwgX2N1cnJlbnRTcGluZUl0ZW0uaWRyZWYsIF9jdXJyZW50U3BpbmVJdGVtLmluZGV4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFnaW5hdGlvbkluZm87XG5cbiAgfTtcblxuICBmdW5jdGlvbiBnZXRPcGVuUGFnZUluZGV4ZXMoKSB7XG5cbiAgICB2YXIgaW5kZXhlcyA9IFtdO1xuXG4gICAgdmFyIGN1cnJlbnRQYWdlID0gX3BhZ2luYXRpb25JbmZvLmN1cnJlbnRTcHJlYWRJbmRleCAqIF9wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9wYWdpbmF0aW9uSW5mby52aXNpYmxlQ29sdW1uQ291bnQgJiYgKGN1cnJlbnRQYWdlICsgaSkgPCBfcGFnaW5hdGlvbkluZm8uY29sdW1uQ291bnQ7IGkrKykge1xuXG4gICAgICBpbmRleGVzLnB1c2goY3VycmVudFBhZ2UgKyBpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5kZXhlcztcblxuICB9XG5cbiAgLy93ZSBuZWVkIHRoaXMgc3R5bGVzIGZvciBjc3MgY29sdW1uaXplciBub3QgdG8gY2hvcCBiaWcgaW1hZ2VzXG4gIGZ1bmN0aW9uIHJlc2l6ZUltYWdlcygpIHtcblxuICAgIGlmICghXyRlcHViSHRtbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciAkZWxlbTtcbiAgICB2YXIgaGVpZ2h0O1xuICAgIHZhciB3aWR0aDtcblxuICAgICQoJ2ltZywgc3ZnJywgXyRlcHViSHRtbCkuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgJGVsZW0gPSAkKHRoaXMpO1xuXG4gICAgICAvLyBpZiB3ZSBzZXQgbWF4LXdpZHRoL21heC1oZWlnaHQgdG8gMTAwJSBjb2x1bW5pemluZyBlbmdpbmUgY2hvcHMgaW1hZ2VzIGVtYmVkZGVkIGluIHRoZSB0ZXh0XG4gICAgICAvLyAoYnV0IG5vdCBpZiB3ZSBzZXQgaXQgdG8gOTktOTglKSBnbyBmaWd1cmUuXG4gICAgICAvLyBUT0RPOiBDU1MgbWluLXcvaCBpcyBjb250ZW50LWJveCwgbm90IGJvcmRlci1ib3ggKGRvZXMgbm90IHRha2UgaW50byBhY2NvdW50IHBhZGRpbmcgKyBib3JkZXIpPyA9PiBpbWFnZXMgbWF5IHN0aWxsIG92ZXJydW4/XG4gICAgICAkZWxlbS5jc3MoJ21heC13aWR0aCcsICc5OCUnKTtcbiAgICAgICRlbGVtLmNzcygnbWF4LWhlaWdodCcsICc5OCUnKTtcblxuICAgICAgaWYgKCEkZWxlbS5jc3MoJ2hlaWdodCcpKSB7XG4gICAgICAgICRlbGVtLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEkZWxlbS5jc3MoJ3dpZHRoJykpIHtcbiAgICAgICAgJGVsZW0uY3NzKCd3aWR0aCcsICdhdXRvJyk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuYm9va21hcmtDdXJyZW50UGFnZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKCFfY3VycmVudFNwaW5lSXRlbSkge1xuXG4gICAgICByZXR1cm4gbmV3IEJvb2ttYXJrRGF0YShcIlwiLCBcIlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEJvb2ttYXJrRGF0YShfY3VycmVudFNwaW5lSXRlbS5pZHJlZiwgc2VsZi5nZXRGaXJzdFZpc2libGVFbGVtZW50Q2ZpKCkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFZpc2libGVDb250ZW50T2Zmc2V0cygpIHtcbiAgICAvL1RPRE86IF9odG1sQm9keUlzVmVydGljYWxXcml0aW5nTW9kZSA/IChfbGFzdFZpZXdQb3J0U2l6ZS5oZWlnaHQgKiBfcGFnaW5hdGlvbkluZm8uY3VycmVudFNwcmVhZEluZGV4KVxuICAgIC8vIE5PVCB1c2VkIHdpdGggb3B0aW9ucy5yZWN0YW5nbGVCYXNlZCBhbnl3YXkgKHNlZSBDZmlOYXZpZ2F0aW9uTG9naWMgY29uc3RydWN0b3IgY2FsbCwgaGVyZSBpbiB0aGlzIHJlZmxvdyBlbmdpbmUgY2xhc3MpXG4gICAgdmFyIGNvbHVtbnNMZWZ0T2ZWaWV3cG9ydCA9IE1hdGgucm91bmQoX3BhZ2luYXRpb25JbmZvLnBhZ2VPZmZzZXQgLyAoX3BhZ2luYXRpb25JbmZvLmNvbHVtbldpZHRoICsgX3BhZ2luYXRpb25JbmZvLmNvbHVtbkdhcCkpO1xuXG4gICAgdmFyIHRvcE9mZnNldCA9IGNvbHVtbnNMZWZ0T2ZWaWV3cG9ydCAqIF8kY29udGVudEZyYW1lLmhlaWdodCgpO1xuICAgIHZhciBib3R0b21PZmZzZXQgPSB0b3BPZmZzZXQgKyBfcGFnaW5hdGlvbkluZm8udmlzaWJsZUNvbHVtbkNvdW50ICogXyRjb250ZW50RnJhbWUuaGVpZ2h0KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiB0b3BPZmZzZXQsXG4gICAgICBib3R0b206IGJvdHRvbU9mZnNldFxuICAgIH07XG4gIH1cblxuICB0aGlzLmdldExvYWRlZFNwaW5lSXRlbXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gW19jdXJyZW50U3BpbmVJdGVtXTtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnRCeUNmaSA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgY2ZpLCBjbGFzc0JsYWNrbGlzdCwgZWxlbWVudEJsYWNrbGlzdCwgaWRCbGFja2xpc3QpIHtcblxuICAgIGlmIChzcGluZUl0ZW0gIT0gX2N1cnJlbnRTcGluZUl0ZW0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBfbmF2aWdhdGlvbkxvZ2ljLmdldEVsZW1lbnRCeUNmaShjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgaWQpIHtcblxuICAgIGlmIChzcGluZUl0ZW0gIT0gX2N1cnJlbnRTcGluZUl0ZW0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBfbmF2aWdhdGlvbkxvZ2ljLmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgfTtcblxuICB0aGlzLmdldEVsZW1lbnQgPSBmdW5jdGlvbihzcGluZUl0ZW0sIHNlbGVjdG9yKSB7XG5cbiAgICBpZiAoc3BpbmVJdGVtICE9IF9jdXJyZW50U3BpbmVJdGVtKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwic3BpbmUgaXRlbSBpcyBub3QgbG9hZGVkXCIpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX25hdmlnYXRpb25Mb2dpYy5nZXRFbGVtZW50KHNlbGVjdG9yKTtcbiAgfTtcblxuICB0aGlzLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciB2aXNpYmxlQ29udGVudE9mZnNldHMgPSBnZXRWaXNpYmxlQ29udGVudE9mZnNldHMoKTtcbiAgICByZXR1cm4gX25hdmlnYXRpb25Mb2dpYy5nZXRGaXJzdFZpc2libGVNZWRpYU92ZXJsYXlFbGVtZW50KHZpc2libGVDb250ZW50T2Zmc2V0cyk7XG4gIH07XG5cbiAgLy8gLyoqXG4gIC8vICAqIEBkZXByZWNhdGVkXG4gIC8vICAqL1xuICAvLyB0aGlzLmdldFZpc2libGVNZWRpYU92ZXJsYXlFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuICAvLyBcbiAgLy8gICAgIHZhciB2aXNpYmxlQ29udGVudE9mZnNldHMgPSBnZXRWaXNpYmxlQ29udGVudE9mZnNldHMoKTtcbiAgLy8gICAgIHJldHVybiBfbmF2aWdhdGlvbkxvZ2ljLmdldFZpc2libGVNZWRpYU92ZXJsYXlFbGVtZW50cyh2aXNpYmxlQ29udGVudE9mZnNldHMpO1xuICAvLyB9O1xuXG4gIHRoaXMuaW5zdXJlRWxlbWVudFZpc2liaWxpdHkgPSBmdW5jdGlvbihzcGluZUl0ZW1JZCwgZWxlbWVudCwgaW5pdGlhdG9yKSB7XG5cbiAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgIGlmIChfbmF2aWdhdGlvbkxvZ2ljLmlzRWxlbWVudFZpc2libGUoJGVsZW1lbnQsIGdldFZpc2libGVDb250ZW50T2Zmc2V0cygpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwYWdlID0gX25hdmlnYXRpb25Mb2dpYy5nZXRQYWdlRm9yRWxlbWVudCgkZWxlbWVudCk7XG5cbiAgICBpZiAocGFnZSA9PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcGVuUGFnZVJlcXVlc3QgPSBuZXcgUGFnZU9wZW5SZXF1ZXN0KF9jdXJyZW50U3BpbmVJdGVtLCBpbml0aWF0b3IpO1xuICAgIG9wZW5QYWdlUmVxdWVzdC5zZXRQYWdlSW5kZXgocGFnZSk7XG5cbiAgICB2YXIgaWQgPSBlbGVtZW50LmlkO1xuICAgIGlmICghaWQpIHtcbiAgICAgIGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICB9XG5cbiAgICBpZiAoaWQpIHtcbiAgICAgIG9wZW5QYWdlUmVxdWVzdC5zZXRFbGVtZW50SWQoaWQpO1xuICAgIH1cblxuICAgIHNlbGYub3BlblBhZ2Uob3BlblBhZ2VSZXF1ZXN0KTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVmbG93YWJsZVZpZXciLCIvLyAgQ3JlYXRlZCBieSBCb3JpcyBTY2huZWlkZXJtYW4uXG4vLyBNb2RpZmllZCBieSBEYW5pZWwgV2Vja1xuLy8gIENvcHlyaWdodCAoYykgMjAxNCBSZWFkaXVtIEZvdW5kYXRpb24gYW5kL29yIGl0cyBsaWNlbnNlZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXG4vLyAgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy8gIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBcbi8vICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIFxuLy8gIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIFxuLy8gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vLyAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgb3JnYW5pemF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgXG4vLyAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBcbi8vICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vLyAgXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIFxuLy8gIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFxuLy8gIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gXG4vLyAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgXG4vLyAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIFxuLy8gIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIFxuLy8gIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgXG4vLyAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBcbi8vICBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgXG4vLyAgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKVxudmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKVxudmFyIEJvb2ttYXJrRGF0YSA9IHJlcXVpcmUoJy4uL21vZGVscy9ib29rbWFyay1kYXRhJylcbnZhciBDdXJyZW50UGFnZXNJbmZvID0gcmVxdWlyZSgnLi4vbW9kZWxzL2N1cnJlbnQtcGFnZXMtaW5mbycpXG52YXIgRXZlbnRzID0gcmVxdWlyZSgnLi4vZXZlbnRzJylcbnZhciBJbnRlcm5hbEV2ZW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFsLWV2ZW50cycpXG52YXIgaXNJRnJhbWVBbGl2ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXMtaWZyYW1lLWFsaXZlJylcbnZhciBsb2FkVGVtcGxhdGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2xvYWQtdGVtcGxhdGUnKVxudmFyIE1hcmdpbnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21hcmdpbnMnKVxudmFyIE9uZVBhZ2VWaWV3ID0gcmVxdWlyZSgnLi9vbmUtcGFnZS12aWV3JylcbnZhciBQYWdlT3BlblJlcXVlc3QgPSByZXF1aXJlKCcuLi9tb2RlbHMvcGFnZS1vcGVuLXJlcXVlc3QnKVxudmFyIHNldFN0eWxlcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvc2V0LXN0eWxlcycpXG52YXIgVmlld2VyU2V0dGluZ3MgPSByZXF1aXJlKCcuLi9tb2RlbHMvdmlld2VyLXNldHRpbmdzJylcblxuLyoqXG4gKiBSZW5kZXJzIGNvbnRlbnQgaW5zaWRlIGEgc2Nyb2xsYWJsZSB2aWV3IHBvcnRcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcGFyYW0gaXNDb250aW51b3VzU2Nyb2xsXG4gKiBAcGFyYW0gcmVhZGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU2Nyb2xsVmlldyhvcHRpb25zLCBpc0NvbnRpbnVvdXNTY3JvbGwsIHJlYWRlcikge1xuXG4gIHZhciBfREVCVUcgPSBmYWxzZTtcblxuICBfLmV4dGVuZCh0aGlzLCBCYWNrYm9uZS5FdmVudHMpO1xuXG4gIHZhciBTQ1JPTExfTUFSR0lOX1RPX1NIT1dfTEFTVF9WSVNCTEVfTElORSA9IDU7XG4gIHZhciBJVEVNX0xPQURfU0NST0xMX0JVRkZFUiA9IDIwMDA7XG4gIHZhciBPTl9TQ1JPTExfVElNRV9EQUxBWSA9IDMwMDtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIF8kdmlld3BvcnQgPSBvcHRpb25zLiR2aWV3cG9ydDtcbiAgdmFyIF9zcGluZSA9IG9wdGlvbnMuc3BpbmU7XG4gIHZhciBfdXNlclN0eWxlcyA9IG9wdGlvbnMudXNlclN0eWxlcztcbiAgdmFyIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0O1xuICB2YXIgXyRjb250ZW50RnJhbWU7XG4gIHZhciBfJGVsO1xuXG4gIHZhciBfc3RvcFRyYW5zaWVudFZpZXdVcGRhdGUgPSBmYWxzZTtcblxuICAvL3RoaXMgZmxhZ3MgdXNlZCB0byBwcmV2ZW50IG9uU2Nyb2xsIGV2ZW50IHRyaWdnZXJpbmcgcGFnaW5hdGlvbiBjaGFuZ2VkIHdoZW4gaW50ZXJuYWwgbGF5b3V0IG1vZGlmaWNhdGlvbnMgaGFwcGVuc1xuICAvL2lmIHdlIHRyaWdnZXIgcGFnaW5hdGlvbiBjaGFuZ2Ugd2l0aG91dCByZWZlcmVuY2UgdG8gdGhlIG9yaWdpbmFsIHJlcXVlc3QgdGhhdCBzdGFydGVkIHRoZSBjaGFuZ2UgLSB3ZSBicmFrZSB0aGVcbiAgLy9NZWRpYSBPdmVybGF5IGJlY2hhdml5b3VyXG4gIC8vV2UgY2FuJ3QgcmV1c2Ugc2FtZSBmbGFnIGZvciBhbGwgb2YgdGhpcyBhY3Rpb24gYmVjYXVzZSB0aGlzIGFjdGlvbnMgbWV5IGhhcHBlbiBpbiBwYXJhbGxlbFxuICB2YXIgX2lzUGVyZm9ybWluZ0xheW91dE1vZGlmaWNhdGlvbnMgPSBmYWxzZTsgLy9wZXJmb3JtaW5nIGFzeW5jaCAgYWN0aW9ucyB0aGF0IG1heSB0cmlnZ2VyIG9uU2Nyb2xsO1xuICB2YXIgX2lzU2V0dGluZ1Njcm9sbFBvc2l0aW9uID0gZmFsc2U7IC8vdGhpcyBoYXBwZW5zIHdoZW4gd2Ugc2V0IHNjcm9sbCBwb3NpdGlvbiBiYXNlZCBvbiBvcGVuIGVsZW1lbnQgcmVxdWVzdFxuICB2YXIgX2lzTG9hZGluZ05ld1NwaW5lSXRlbU9uUGFnZVJlcXVlc3QgPSBmYWxzZTsgLy9cblxuICB0aGlzLmlzQ29udGludW91c1Njcm9sbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpc0NvbnRpbnVvdXNTY3JvbGw7XG4gIH07XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciB0ZW1wbGF0ZSA9IGxvYWRUZW1wbGF0ZShcInNjcm9sbGVkX2Jvb2tfZnJhbWVcIiwge30pO1xuXG4gICAgXyRlbCA9ICQodGVtcGxhdGUpO1xuICAgIF8kdmlld3BvcnQuYXBwZW5kKF8kZWwpO1xuXG4gICAgXyRjb250ZW50RnJhbWUgPSAkKFwiI3Njcm9sbGVkLWNvbnRlbnQtZnJhbWVcIiwgXyRlbCk7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwib3ZlcmZsb3dcIiwgXCJcIik7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwib3ZlcmZsb3cteVwiLCBcImF1dG9cIik7XG4gICAgXyRjb250ZW50RnJhbWUuY3NzKFwib3ZlcmZsb3cteFwiLCBcImhpZGRlblwiKTtcbiAgICBfJGNvbnRlbnRGcmFtZS5jc3MoXCItd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZ1wiLCBcInRvdWNoXCIpO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcIndpZHRoXCIsIFwiMTAwJVwiKTtcbiAgICBfJGNvbnRlbnRGcmFtZS5jc3MoXCJoZWlnaHRcIiwgXCIxMDAlXCIpO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcInBvc2l0aW9uXCIsIFwicmVsYXRpdmVcIik7XG5cbiAgICB2YXIgc2V0dGluZ3MgPSByZWFkZXIudmlld2VyU2V0dGluZ3MoKTtcbiAgICBpZiAoIXNldHRpbmdzIHx8IHR5cGVvZiBzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAvL2RlZmF1bHRzXG4gICAgICBzZXR0aW5ncyA9IG5ldyBWaWV3ZXJTZXR0aW5ncyh7fSk7XG4gICAgfVxuICAgIGlmIChzZXR0aW5ncy5lbmFibGVHUFVIYXJkd2FyZUFjY2VsZXJhdGlvbkNTUzNEKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgbmVjZXNzYXJ5IGNvdW50ZXJwYXJ0IGZvciB0aGUgc2FtZSBDU1MgR1BVIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiB0cmljayBpbiBvbmVfcGFnZV92aWV3LmpzXG4gICAgICAvLyBUaGlzIGFmZmVjdHMgdGhlIHN0YWNraW5nIG9yZGVyIGFuZCByZS1lbmFibGVzIHRoZSBzY3JvbGxiYXIgaW4gU2FmYXJpICh3b3JrcyBmaW5lIGluIENocm9tZSBvdGhlcndpc2UpXG4gICAgICBfJGNvbnRlbnRGcmFtZS5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVaKDApXCIpO1xuICAgIH1cblxuICAgIC8vIF8kY29udGVudEZyYW1lLmNzcyhcImJveC1zaXppbmdcIiwgXCJib3JkZXItYm94XCIpO1xuICAgIC8vIF8kY29udGVudEZyYW1lLmNzcyhcImJvcmRlclwiLCBcIjIwcHggc29saWQgcmVkXCIpO1xuXG4gICAgc2VsZi5hcHBseVN0eWxlcygpO1xuXG4gICAgdmFyIGxhenlTY3JvbGwgPSBfLmRlYm91bmNlKG9uU2Nyb2xsLCBPTl9TQ1JPTExfVElNRV9EQUxBWSk7XG5cbiAgICBfJGNvbnRlbnRGcmFtZS5vbignc2Nyb2xsJywgZnVuY3Rpb24oZSkge1xuICAgICAgbGF6eVNjcm9sbChlKTtcbiAgICAgIG9uU2Nyb2xsRGlyZWN0KCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICBmdW5jdGlvbiB1cGRhdGVMb2FkZWRWaWV3c1RvcChjYWxsYmFjaywgYXNzZXJ0U2Nyb2xsUG9zaXRpb24pIHtcblxuICAgIGlmIChfc3RvcFRyYW5zaWVudFZpZXdVcGRhdGUpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZpZXdQYWdlID0gZmlyc3RMb2FkZWRWaWV3KCk7XG4gICAgaWYgKCF2aWV3UGFnZSkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmlld1BvcnRSYW5nZSA9IGdldFZpc2libGVSYW5nZSgwKTtcbiAgICB2YXIgZmlyc3RWaWV3UmFuZ2UgPSBnZXRQYWdlVmlld1JhbmdlKHZpZXdQYWdlKTtcblxuICAgIGlmICgodmlld1BvcnRSYW5nZS50b3AgLSBmaXJzdFZpZXdSYW5nZS5ib3R0b20pID4gSVRFTV9MT0FEX1NDUk9MTF9CVUZGRVIpIHtcbiAgICAgIHZhciBzY3JvbGxQb3MgPSBzY3JvbGxUb3AoKTtcbiAgICAgIHJlbW92ZVBhZ2VWaWV3KHZpZXdQYWdlKTtcbiAgICAgIHNjcm9sbFRvKHNjcm9sbFBvcyAtIChmaXJzdFZpZXdSYW5nZS5ib3R0b20gLSBmaXJzdFZpZXdSYW5nZS50b3ApLCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0U2Nyb2xsUG9zaXRpb24oXCJ1cGRhdGVMb2FkZWRWaWV3c1RvcCAxXCIpO1xuICAgICAgdXBkYXRlTG9hZGVkVmlld3NUb3AoY2FsbGJhY2ssIGFzc2VydFNjcm9sbFBvc2l0aW9uKTsgLy9yZWN1cnNpb25cbiAgICB9IGVsc2UgaWYgKCh2aWV3UG9ydFJhbmdlLnRvcCAtIGZpcnN0Vmlld1JhbmdlLnRvcCkgPCBJVEVNX0xPQURfU0NST0xMX0JVRkZFUikge1xuICAgICAgYWRkVG9Ub3BPZih2aWV3UGFnZSwgZnVuY3Rpb24oaXNFbGVtZW50QWRkZWQpIHtcbiAgICAgICAgaWYgKGlzRWxlbWVudEFkZGVkKSB7XG4gICAgICAgICAgYXNzZXJ0U2Nyb2xsUG9zaXRpb24oXCJ1cGRhdGVMb2FkZWRWaWV3c1RvcCAyXCIpO1xuICAgICAgICAgIHVwZGF0ZUxvYWRlZFZpZXdzVG9wKGNhbGxiYWNrLCBhc3NlcnRTY3JvbGxQb3NpdGlvbik7IC8vcmVjdXJzaW9uXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVMb2FkZWRWaWV3c0JvdHRvbShjYWxsYmFjaywgYXNzZXJ0U2Nyb2xsUG9zaXRpb24pIHtcblxuICAgIGlmIChfc3RvcFRyYW5zaWVudFZpZXdVcGRhdGUpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZpZXdQYWdlID0gbGFzdExvYWRlZFZpZXcoKTtcbiAgICBpZiAoIXZpZXdQYWdlKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2aWV3UG9ydFJhbmdlID0gZ2V0VmlzaWJsZVJhbmdlKDApO1xuICAgIHZhciBsYXN0Vmlld1JhbmdlID0gZ2V0UGFnZVZpZXdSYW5nZSh2aWV3UGFnZSk7XG5cbiAgICBpZiAoKGxhc3RWaWV3UmFuZ2UudG9wIC0gdmlld1BvcnRSYW5nZS5ib3R0b20pID4gSVRFTV9MT0FEX1NDUk9MTF9CVUZGRVIpIHtcbiAgICAgIHJlbW92ZVBhZ2VWaWV3KHZpZXdQYWdlKTtcbiAgICAgIGFzc2VydFNjcm9sbFBvc2l0aW9uKFwidXBkYXRlTG9hZGVkVmlld3NCb3R0b20gMVwiKTtcbiAgICAgIHVwZGF0ZUxvYWRlZFZpZXdzQm90dG9tKGNhbGxiYWNrLCBhc3NlcnRTY3JvbGxQb3NpdGlvbik7IC8vcmVjdXJzaW9uXG4gICAgfSBlbHNlIGlmICgobGFzdFZpZXdSYW5nZS5ib3R0b20gLSB2aWV3UG9ydFJhbmdlLmJvdHRvbSkgPCBJVEVNX0xPQURfU0NST0xMX0JVRkZFUikge1xuICAgICAgYWRkVG9Cb3R0b21PZih2aWV3UGFnZSwgZnVuY3Rpb24obmV3UGFnZUxvYWRlZCkge1xuICAgICAgICBhc3NlcnRTY3JvbGxQb3NpdGlvbihcInVwZGF0ZUxvYWRlZFZpZXdzQm90dG9tIDJcIik7XG4gICAgICAgIGlmIChuZXdQYWdlTG9hZGVkKSB7XG4gICAgICAgICAgdXBkYXRlTG9hZGVkVmlld3NCb3R0b20oY2FsbGJhY2ssIGFzc2VydFNjcm9sbFBvc2l0aW9uKTsgLy9yZWN1cnNpb25cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVRyYW5zaWVudFZpZXdzKHBhZ2VWaWV3KSB7XG5cbiAgICBpZiAoIWlzQ29udGludW91c1Njcm9sbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzY3JvbGxQb3NCZWZvcmUgPSB1bmRlZmluZWQ7XG4gICAgaWYgKF9ERUJVRykge1xuICAgICAgaWYgKHBhZ2VWaWV3KSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBwYWdlVmlldy5vZmZzZXQoKTtcbiAgICAgICAgaWYgKG9mZnNldCkgc2Nyb2xsUG9zQmVmb3JlID0gb2Zmc2V0LnRvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGRvdWJsZS1jaGVja3Mgd2hldGhlciB0aGUgYnJvd3NlciBoYXMgc2hpZnRlZCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGJlY2F1c2Ugb2YgdW5mb3Jlc2VlbiByZW5kZXJpbmcgaXNzdWVzLlxuICAgIC8vICh0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4gYmVjYXVzZSB3ZSBoYW5kbGUgc2Nyb2xsIGFkanVzdG1lbnRzIGR1cmluZyBpZnJhbWUgaGVpZ2h0IHJlc2l6ZXMgZXhwbGljaXRlbHkgaW4gdGhpcyBjb2RlKVxuICAgIHZhciBhc3NlcnRTY3JvbGxQb3NpdGlvbiA9IGZ1bmN0aW9uKG1zZykge1xuICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICBpZiAoIXNjcm9sbFBvc0JlZm9yZSkgcmV0dXJuO1xuICAgICAgICB2YXIgc2Nyb2xsUG9zQWZ0ZXIgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IHBhZ2VWaWV3Lm9mZnNldCgpO1xuICAgICAgICBpZiAob2Zmc2V0KSBzY3JvbGxQb3NBZnRlciA9IG9mZnNldC50b3A7XG5cbiAgICAgICAgaWYgKCFzY3JvbGxQb3NBZnRlcikgcmV0dXJuO1xuXG4gICAgICAgIHZhciBkaWZmID0gc2Nyb2xsUG9zQWZ0ZXIgLSBzY3JvbGxQb3NCZWZvcmU7XG4gICAgICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IDEpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiQEBAQEBAQEBAQEBAQEBAIFNDUk9MTCBBREpVU1QgKFwiICsgbXNnICsgXCIpIFwiICsgZGlmZiArIFwiIC0tIFwiICsgcGFnZVZpZXcuY3VycmVudFNwaW5lSXRlbSgpLmhyZWYpO1xuICAgICAgICAgIC8vXyRjb250ZW50RnJhbWVbMF0uc2Nyb2xsVG9wID0gXyRjb250ZW50RnJhbWVbMF0uc2Nyb2xsVG9wICsgZGlmZjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfaXNQZXJmb3JtaW5nTGF5b3V0TW9kaWZpY2F0aW9ucyA9IHRydWU7XG4gICAgdXBkYXRlTG9hZGVkVmlld3NCb3R0b20oZnVuY3Rpb24oKSB7XG4gICAgICB1cGRhdGVMb2FkZWRWaWV3c1RvcChmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBfaXNQZXJmb3JtaW5nTGF5b3V0TW9kaWZpY2F0aW9ucyA9IGZhbHNlO1xuICAgICAgICB9LCBPTl9TQ1JPTExfVElNRV9EQUxBWSArIDEwMCk7XG4gICAgICB9LCBhc3NlcnRTY3JvbGxQb3NpdGlvbik7XG4gICAgfSwgYXNzZXJ0U2Nyb2xsUG9zaXRpb24pO1xuICB9XG5cbiAgdmFyIF9tZWRpYU92ZXJsYXlzV2FzUGxheWluZ0xhc3RUaW1lU2Nyb2xsU3RhcnRlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIG9uU2Nyb2xsRGlyZWN0KGUpIHtcbiAgICB2YXIgc2V0dGluZ3MgPSByZWFkZXIudmlld2VyU2V0dGluZ3MoKTtcbiAgICBpZiAoIXNldHRpbmdzLm1lZGlhT3ZlcmxheXNQcmVzZXJ2ZVBsYXliYWNrV2hlblNjcm9sbCkge1xuICAgICAgaWYgKCFfbWVkaWFPdmVybGF5c1dhc1BsYXlpbmdMYXN0VGltZVNjcm9sbFN0YXJ0ZWQgJiYgcmVhZGVyLmlzTWVkaWFPdmVybGF5QXZhaWxhYmxlKCkpIHtcbiAgICAgICAgX21lZGlhT3ZlcmxheXNXYXNQbGF5aW5nTGFzdFRpbWVTY3JvbGxTdGFydGVkID0gcmVhZGVyLmlzUGxheWluZ01lZGlhT3ZlcmxheSgpO1xuICAgICAgICBpZiAoX21lZGlhT3ZlcmxheXNXYXNQbGF5aW5nTGFzdFRpbWVTY3JvbGxTdGFydGVkKSB7XG4gICAgICAgICAgcmVhZGVyLnBhdXNlTWVkaWFPdmVybGF5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblNjcm9sbChlKSB7XG4gICAgaWYgKCFfaXNQZXJmb3JtaW5nTGF5b3V0TW9kaWZpY2F0aW9ucyAmJiAhX2lzU2V0dGluZ1Njcm9sbFBvc2l0aW9uICYmICFfaXNMb2FkaW5nTmV3U3BpbmVJdGVtT25QYWdlUmVxdWVzdCkge1xuXG4gICAgICB1cGRhdGVUcmFuc2llbnRWaWV3cygpO1xuICAgICAgb25QYWdpbmF0aW9uQ2hhbmdlZChzZWxmKTtcblxuICAgICAgdmFyIHNldHRpbmdzID0gcmVhZGVyLnZpZXdlclNldHRpbmdzKCk7XG4gICAgICBpZiAoIXNldHRpbmdzLm1lZGlhT3ZlcmxheXNQcmVzZXJ2ZVBsYXliYWNrV2hlblNjcm9sbCkge1xuICAgICAgICBpZiAoX21lZGlhT3ZlcmxheXNXYXNQbGF5aW5nTGFzdFRpbWVTY3JvbGxTdGFydGVkKSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlYWRlci5wbGF5TWVkaWFPdmVybGF5KCk7XG4gICAgICAgICAgICBfbWVkaWFPdmVybGF5c1dhc1BsYXlpbmdMYXN0VGltZVNjcm9sbFN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2Nyb2xsVG8ob2Zmc2V0LCBwYWdlUmVxdWVzdCkge1xuXG4gICAgXyRjb250ZW50RnJhbWVbMF0uc2Nyb2xsVG9wID0gb2Zmc2V0O1xuXG4gICAgaWYgKHBhZ2VSZXF1ZXN0KSB7XG4gICAgICBvblBhZ2luYXRpb25DaGFuZ2VkKHBhZ2VSZXF1ZXN0LmluaXRpYXRvciwgcGFnZVJlcXVlc3Quc3BpbmVJdGVtLCBwYWdlUmVxdWVzdC5lbGVtZW50SWQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVBhZ2VWaWV3U2l6ZUFuZEFkanVzdFNjcm9sbChwYWdlVmlldykge1xuICAgIHZhciBzY3JvbGxQb3MgPSBzY3JvbGxUb3AoKTtcbiAgICB2YXIgcmFuZ2VCZWZvcmVSZXNpemUgPSBnZXRQYWdlVmlld1JhbmdlKHBhZ2VWaWV3KTtcblxuICAgIHVwZGF0ZVBhZ2VWaWV3U2l6ZShwYWdlVmlldyk7XG5cbiAgICB2YXIgcmFuZ2VBZnRlclJlc2l6ZSA9IGdldFBhZ2VWaWV3UmFuZ2UocGFnZVZpZXcpO1xuXG4gICAgdmFyIGhlaWdodEFmdGVyID0gcmFuZ2VBZnRlclJlc2l6ZS5ib3R0b20gLSByYW5nZUFmdGVyUmVzaXplLnRvcDtcbiAgICB2YXIgaGVpZ2h0QmVmb3JlID0gcmFuZ2VCZWZvcmVSZXNpemUuYm90dG9tIC0gcmFuZ2VCZWZvcmVSZXNpemUudG9wO1xuXG4gICAgdmFyIGRlbHRhID0gaGVpZ2h0QWZ0ZXIgLSBoZWlnaHRCZWZvcmU7XG5cbiAgICBpZiAoTWF0aC5hYnMoZGVsdGEpID4gMCkge1xuICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiSU1NRURJQVRFIFNDUk9MTCBBREpVU1Q6IFwiICsgcGFnZVZpZXcuY3VycmVudFNwaW5lSXRlbSgpLmhyZWYgKyBcIiA9PSBcIiArIGRlbHRhKTtcbiAgICAgIH1cbiAgICAgIHNjcm9sbFRvKHNjcm9sbFBvcyArIGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjaFN0YWJsZUNvbnRlbnRIZWlnaHQodXBkYXRlU2Nyb2xsLCBwYWdlVmlldywgaWZyYW1lLCBocmVmLCBmaXhlZExheW91dCwgbWV0YVdpZHRoLCBtc2csIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFpc0lmcmFtZUFsaXZlKGlmcmFtZSkpIHtcbiAgICAgIGlmIChfREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZWFjaFN0YWJsZUNvbnRlbnRIZWlnaHQgISB3aW4gJiYgZG9jIChpRnJhbWUgZGlzcG9zZWQ/KVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIE1BWF9BVFRFTVBUUyA9IDEwO1xuICAgIHZhciBUSU1FX01TID0gMzAwO1xuXG4gICAgdmFyIHcgPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICB2YXIgZCA9IGlmcmFtZS5jb250ZW50RG9jdW1lbnQ7XG5cbiAgICB2YXIgcHJldmlvdXNQb2xsZWRDb250ZW50SGVpZ2h0ID0gcGFyc2VJbnQoTWF0aC5yb3VuZChwYXJzZUZsb2F0KHcuZ2V0Q29tcHV0ZWRTdHlsZShkLmRvY3VtZW50RWxlbWVudCkuaGVpZ2h0KSkpOyAvL2JvZHkgY2FuIGJlIHNob3J0ZXIhO1xuXG4gICAgdmFyIGluaXRpYWxDb250ZW50SGVpZ2h0ID0gcHJldmlvdXNQb2xsZWRDb250ZW50SGVpZ2h0O1xuXG4gICAgaWYgKHVwZGF0ZVNjcm9sbCA9PT0gMCkge1xuICAgICAgdXBkYXRlUGFnZVZpZXdTaXplQW5kQWRqdXN0U2Nyb2xsKHBhZ2VWaWV3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlUGFnZVZpZXdTaXplKHBhZ2VWaWV3KTtcbiAgICB9XG5cbiAgICB2YXIgdHJ5QWdhaW5GdW5jID0gZnVuY3Rpb24odHJ5QWdhaW4pIHtcbiAgICAgIGlmIChfREVCVUcgJiYgdHJ5QWdhaW4gIT09IE1BWF9BVFRFTVBUUykge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRyeUFnYWluRnVuYyAtIFwiICsgdHJ5QWdhaW4gKyBcIjogXCIgKyBocmVmICsgXCIgIDxcIiArIGluaXRpYWxDb250ZW50SGVpZ2h0ICsgXCIgLS0gXCIgKyBwcmV2aW91c1BvbGxlZENvbnRlbnRIZWlnaHQgKyBcIj5cIik7XG4gICAgICB9XG5cbiAgICAgIHRyeUFnYWluLS07XG4gICAgICBpZiAodHJ5QWdhaW4gPCAwKSB7XG4gICAgICAgIGlmIChfREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwidHJ5QWdhaW5GdW5jIGFib3J0OiBcIiArIGhyZWYpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChpc0lmcmFtZUFsaXZlKGlmcmFtZSkpIHtcbiAgICAgICAgICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICAgICAgICAgIHZhciBkb2MgPSBpZnJhbWUuY29udGVudERvY3VtZW50O1xuXG4gICAgICAgICAgICB2YXIgaWZyYW1lSGVpZ2h0ID0gcGFyc2VJbnQoTWF0aC5yb3VuZChwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlmcmFtZSkuaGVpZ2h0KSkpO1xuXG4gICAgICAgICAgICB2YXIgZG9jSGVpZ2h0ID0gcGFyc2VJbnQoTWF0aC5yb3VuZChwYXJzZUZsb2F0KHdpbi5nZXRDb21wdXRlZFN0eWxlKGRvYy5kb2N1bWVudEVsZW1lbnQpLmhlaWdodCkpKTsgLy9ib2R5IGNhbiBiZSBzaG9ydGVyIVxuXG4gICAgICAgICAgICBpZiAocHJldmlvdXNQb2xsZWRDb250ZW50SGVpZ2h0ICE9PSBkb2NIZWlnaHQpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNQb2xsZWRDb250ZW50SGVpZ2h0ID0gZG9jSGVpZ2h0O1xuXG4gICAgICAgICAgICAgIHRyeUFnYWluRnVuYyh0cnlBZ2Fpbik7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ09OVEVOVCBIRUlHSFQgSVMgTk9XIFNUQUJJTElTRURcblxuICAgICAgICAgICAgdmFyIGRpZmYgPSBpZnJhbWVIZWlnaHQgLSBkb2NIZWlnaHQ7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiA0KSB7XG4gICAgICAgICAgICAgIGlmIChfREVCVUcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIiQkJCBJRlJBTUUgSEVJR0hUIEFESlVTVDogXCIgKyBocmVmICsgXCIgIFtcIiArIGRpZmYgKyBcIl08XCIgKyBpbml0aWFsQ29udGVudEhlaWdodCArIFwiIC0tIFwiICsgcHJldmlvdXNQb2xsZWRDb250ZW50SGVpZ2h0ICsgXCI+XCIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodXBkYXRlU2Nyb2xsID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlUGFnZVZpZXdTaXplQW5kQWRqdXN0U2Nyb2xsKHBhZ2VWaWV3KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVQYWdlVmlld1NpemUocGFnZVZpZXcpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGlzSWZyYW1lQWxpdmUoaWZyYW1lKSkge1xuICAgICAgICAgICAgICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gaWZyYW1lLmNvbnRlbnREb2N1bWVudDtcblxuICAgICAgICAgICAgICAgIHZhciBkb2NIZWlnaHRBZnRlciA9IHBhcnNlSW50KE1hdGgucm91bmQocGFyc2VGbG9hdCh3aW4uZ2V0Q29tcHV0ZWRTdHlsZShkb2MuZG9jdW1lbnRFbGVtZW50KS5oZWlnaHQpKSk7IC8vYm9keSBjYW4gYmUgc2hvcnRlciFcbiAgICAgICAgICAgICAgICB2YXIgaWZyYW1lSGVpZ2h0QWZ0ZXIgPSBwYXJzZUludChNYXRoLnJvdW5kKHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoaWZyYW1lKS5oZWlnaHQpKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3ZGlmZiA9IGlmcmFtZUhlaWdodEFmdGVyIC0gZG9jSGVpZ2h0QWZ0ZXI7XG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKG5ld2RpZmYpID4gNCkge1xuICAgICAgICAgICAgICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiIyMgSUZSQU1FIEhFSUdIVCBBREpVU1Q6IFwiICsgaHJlZiArIFwiICBbXCIgKyBuZXdkaWZmICsgXCJdPFwiICsgaW5pdGlhbENvbnRlbnRIZWlnaHQgKyBcIiAtLSBcIiArIHByZXZpb3VzUG9sbGVkQ29udGVudEhlaWdodCArIFwiPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXNnKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgdHJ5QWdhaW5GdW5jKHRyeUFnYWluKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIj4+IElGUkFNRSBIRUlHSFQgQURKVVNURUQgT0tBWTogXCIgKyBocmVmICsgXCIgIFtcIiArIGRpZmYgKyBcIl08XCIgKyBpbml0aWFsQ29udGVudEhlaWdodCArIFwiIC0tIFwiICsgcHJldmlvdXNQb2xsZWRDb250ZW50SGVpZ2h0ICsgXCI+XCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoX0RFQlVHKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInRyeUFnYWluRnVuYyAhIHdpbiAmJiBkb2MgKGlGcmFtZSBkaXNwb3NlZD8pXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy9pZiAoX0RFQlVHKVxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwiSUZSQU1FIEhFSUdIVCBOTyBORUVEIEFESlVTVDogXCIgKyBocmVmKTtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInRyeUFnYWluRnVuYyAhIHdpbiAmJiBkb2MgKGlGcmFtZSBkaXNwb3NlZD8pXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihleCk7XG5cbiAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKHRydWUpO1xuXG4gICAgICB9LCBUSU1FX01TKTtcbiAgICB9O1xuXG4gICAgdHJ5QWdhaW5GdW5jKE1BWF9BVFRFTVBUUyk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGFkZFRvVG9wT2YodG9wVmlldywgY2FsbGJhY2spIHtcblxuICAgIHZhciBwcmV2U3BpbmVJdGVtID0gX3NwaW5lLnByZXZJdGVtKHRvcFZpZXcuY3VycmVudFNwaW5lSXRlbSgpLCB0cnVlKTtcbiAgICBpZiAoIXByZXZTcGluZUl0ZW0pIHtcbiAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdG1wVmlldyA9IGNyZWF0ZVBhZ2VWaWV3Rm9yU3BpbmVJdGVtKHRydWUpO1xuXG4gICAgLy8gYWRkIHRvIHRoZSBlbmQgZmlyc3QgdG8gYXZvaWQgc2Nyb2xsaW5nIGR1cmluZyBsb2FkXG4gICAgdmFyIGxhc3RWaWV3ID0gbGFzdExvYWRlZFZpZXcoKTtcbiAgICB0bXBWaWV3LmVsZW1lbnQoKS5pbnNlcnRBZnRlcihsYXN0Vmlldy5lbGVtZW50KCkpO1xuXG4gICAgdG1wVmlldy5sb2FkU3BpbmVJdGVtKHByZXZTcGluZUl0ZW0sIGZ1bmN0aW9uKHN1Y2Nlc3MsICRpZnJhbWUsIHNwaW5lSXRlbSwgaXNOZXdseUxvYWRlZCwgY29udGV4dCkge1xuICAgICAgaWYgKHN1Y2Nlc3MpIHtcblxuICAgICAgICB1cGRhdGVQYWdlVmlld1NpemUodG1wVmlldyk7XG4gICAgICAgIHZhciByYW5nZSA9IGdldFBhZ2VWaWV3UmFuZ2UodG1wVmlldyk7XG5cbiAgICAgICAgcmVtb3ZlUGFnZVZpZXcodG1wVmlldyk7XG5cblxuICAgICAgICB2YXIgc2Nyb2xsUG9zID0gc2Nyb2xsVG9wKCk7XG5cbiAgICAgICAgdmFyIG5ld1ZpZXcgPSBjcmVhdGVQYWdlVmlld0ZvclNwaW5lSXRlbSgpO1xuICAgICAgICB2YXIgb3JpZ2luYWxIZWlnaHQgPSByYW5nZS5ib3R0b20gLSByYW5nZS50b3A7XG5cblxuICAgICAgICBuZXdWaWV3LnNldEhlaWdodChvcmlnaW5hbEhlaWdodCk7XG4gICAgICAgIC8vIGlmcmFtZSBpcyBsb2FkZWQgaGlkZGVuIGhlcmVcbiAgICAgICAgLy90aGlzLnNob3dJRnJhbWUoKTtcbiAgICAgICAgLy89PT0+IG5vdCBuZWNlc3NhcnkgaGVyZSAodGVtcG9yYXJ5IGlmcmFtZSlcblxuICAgICAgICBuZXdWaWV3LmVsZW1lbnQoKS5pbnNlcnRCZWZvcmUodG9wVmlldy5lbGVtZW50KCkpO1xuXG4gICAgICAgIHNjcm9sbFBvcyA9IHNjcm9sbFBvcyArIG9yaWdpbmFsSGVpZ2h0O1xuXG4gICAgICAgIHNjcm9sbFRvKHNjcm9sbFBvcywgdW5kZWZpbmVkKTtcblxuICAgICAgICBuZXdWaWV3LmxvYWRTcGluZUl0ZW0ocHJldlNwaW5lSXRlbSwgZnVuY3Rpb24oc3VjY2VzcywgJGlmcmFtZSwgc3BpbmVJdGVtLCBpc05ld2x5TG9hZGVkLCBjb250ZXh0KSB7XG4gICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgdmFyIGNvbnRpbnVlQ2FsbGJhY2sgPSBmdW5jdGlvbihzdWNjZXNzRmxhZykge1xuICAgICAgICAgICAgICBvblBhZ2VWaWV3TG9hZGVkKG5ld1ZpZXcsIHN1Y2Nlc3MsICRpZnJhbWUsIHNwaW5lSXRlbSwgaXNOZXdseUxvYWRlZCwgY29udGV4dCk7XG5cbiAgICAgICAgICAgICAgY2FsbGJhY2soc3VjY2Vzc0ZsYWcpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmVhY2hTdGFibGVDb250ZW50SGVpZ2h0KDAsIG5ld1ZpZXcsICRpZnJhbWVbMF0sIHNwaW5lSXRlbS5ocmVmLCBzcGluZUl0ZW0uaXNGaXhlZExheW91dCgpLCBzcGluZUl0ZW0uaXNGaXhlZExheW91dCgpID8gbmV3Vmlldy5tZXRhX3dpZHRoKCkgOiAwLCBcImFkZFRvVG9wT2ZcIiwgY29udGludWVDYWxsYmFjayk7IC8vIC8vb25JRnJhbWVMb2FkIGNhbGxlZCBiZWZvcmUgdGhpcyBjYWxsYmFjaywgc28gb2theS5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBvcGVuIDIgXCIgKyBwcmV2U3BpbmVJdGVtLmhyZWYpO1xuICAgICAgICAgICAgcmVtb3ZlUGFnZVZpZXcobmV3Vmlldyk7XG4gICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBvcGVuIDEgXCIgKyBwcmV2U3BpbmVJdGVtLmhyZWYpO1xuICAgICAgICByZW1vdmVQYWdlVmlldyh0bXBWaWV3KTtcbiAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVQYWdlVmlld1NpemUocGFnZVZpZXcpIHtcblxuICAgIGlmIChwYWdlVmlldy5jdXJyZW50U3BpbmVJdGVtKCkuaXNGaXhlZExheW91dCgpKSB7XG4gICAgICBwYWdlVmlldy5zY2FsZVRvV2lkdGgoXyRjb250ZW50RnJhbWUud2lkdGgoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhZ2VWaWV3LnJlc2l6ZUlGcmFtZVRvQ29udGVudCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFRvQm90dG9tT2YoYm90dG9tVmlldywgY2FsbGJhY2spIHtcblxuICAgIHZhciBuZXhTcGluZUl0ZW0gPSBfc3BpbmUubmV4dEl0ZW0oYm90dG9tVmlldy5jdXJyZW50U3BpbmVJdGVtKCksIHRydWUpO1xuICAgIGlmICghbmV4U3BpbmVJdGVtKSB7XG4gICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbFBvcyA9IHNjcm9sbFRvcCgpO1xuXG4gICAgdmFyIG5ld1ZpZXcgPSBjcmVhdGVQYWdlVmlld0ZvclNwaW5lSXRlbSgpO1xuICAgIG5ld1ZpZXcuZWxlbWVudCgpLmluc2VydEFmdGVyKGJvdHRvbVZpZXcuZWxlbWVudCgpKTtcblxuICAgIG5ld1ZpZXcubG9hZFNwaW5lSXRlbShuZXhTcGluZUl0ZW0sIGZ1bmN0aW9uKHN1Y2Nlc3MsICRpZnJhbWUsIHNwaW5lSXRlbSwgaXNOZXdseUxvYWRlZCwgY29udGV4dCkge1xuICAgICAgaWYgKHN1Y2Nlc3MpIHtcblxuICAgICAgICB2YXIgY29udGludWVDYWxsYmFjayA9IGZ1bmN0aW9uKHN1Y2Nlc3NGbGFnKSB7XG4gICAgICAgICAgb25QYWdlVmlld0xvYWRlZChuZXdWaWV3LCBzdWNjZXNzLCAkaWZyYW1lLCBzcGluZUl0ZW0sIGlzTmV3bHlMb2FkZWQsIGNvbnRleHQpO1xuXG4gICAgICAgICAgY2FsbGJhY2soc3VjY2Vzc0ZsYWcpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlYWNoU3RhYmxlQ29udGVudEhlaWdodCgyLCBuZXdWaWV3LCAkaWZyYW1lWzBdLCBzcGluZUl0ZW0uaHJlZiwgc3BpbmVJdGVtLmlzRml4ZWRMYXlvdXQoKSwgc3BpbmVJdGVtLmlzRml4ZWRMYXlvdXQoKSA/IG5ld1ZpZXcubWV0YV93aWR0aCgpIDogMCwgXCJhZGRUb0JvdHRvbU9mXCIsIGNvbnRpbnVlQ2FsbGJhY2spOyAvLyAvL29uSUZyYW1lTG9hZCBjYWxsZWQgYmVmb3JlIHRoaXMgY2FsbGJhY2ssIHNvIG9rYXkuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGxvYWQgXCIgKyBuZXhTcGluZUl0ZW0uaHJlZik7XG4gICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTG9hZGVkSXRlbXMoKSB7XG5cbiAgICB2YXIgbG9hZGVkUGFnZVZpZXdzID0gW107XG5cbiAgICBmb3JFYWNoSXRlbVZpZXcoZnVuY3Rpb24ocGFnZVZpZXcpIHtcbiAgICAgIGxvYWRlZFBhZ2VWaWV3cy5wdXNoKHBhZ2VWaWV3KTtcbiAgICB9LCBmYWxzZSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgY291bnQgPSBsb2FkZWRQYWdlVmlld3MubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgcmVtb3ZlUGFnZVZpZXcobG9hZGVkUGFnZVZpZXdzW2ldKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVQYWdlVmlldyhwYWdlVmlldykge1xuXG4gICAgcGFnZVZpZXcuZWxlbWVudCgpLnJlbW92ZSgpO1xuXG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNldEZyYW1lU2l6ZXNUb1JlY3RhbmdsZShyZWN0YW5nbGUpIHtcblxuICAgIF8kY29udGVudEZyYW1lLmNzcyhcImxlZnRcIiwgcmVjdGFuZ2xlLmxlZnQpO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcInRvcFwiLCByZWN0YW5nbGUudG9wKTtcbiAgICBfJGNvbnRlbnRGcmFtZS5jc3MoXCJyaWdodFwiLCByZWN0YW5nbGUucmlnaHQpO1xuICAgIF8kY29udGVudEZyYW1lLmNzcyhcImJvdHRvbVwiLCByZWN0YW5nbGUuYm90dG9tKTtcblxuICB9XG5cbiAgdGhpcy5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICBfJGVsLnJlbW92ZSgpO1xuICB9O1xuXG4gIHRoaXMub25WaWV3cG9ydFJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKCFfJGNvbnRlbnRGcmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuXG4gICAgICB1cGRhdGVQYWdlVmlld1NpemUocGFnZVZpZXcpO1xuICAgIH0sIGZhbHNlKTtcblxuICAgIG9uUGFnaW5hdGlvbkNoYW5nZWQoc2VsZik7XG5cbiAgICB1cGRhdGVUcmFuc2llbnRWaWV3cygpO1xuICB9O1xuXG4gIHZhciBfdmlld1NldHRpbmdzID0gdW5kZWZpbmVkO1xuICB0aGlzLnNldFZpZXdTZXR0aW5ncyA9IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG5cbiAgICBfdmlld1NldHRpbmdzID0gc2V0dGluZ3M7XG5cbiAgICBmb3JFYWNoSXRlbVZpZXcoZnVuY3Rpb24ocGFnZVZpZXcpIHtcblxuICAgICAgcGFnZVZpZXcuc2V0Vmlld1NldHRpbmdzKHNldHRpbmdzKTtcblxuICAgIH0sIGZhbHNlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVQYWdlVmlld0ZvclNwaW5lSXRlbShpc1RlbXBvcmFyeVZpZXcpIHtcblxuICAgIG9wdGlvbnMuZGlzYWJsZVBhZ2VUcmFuc2l0aW9ucyA9IHRydWU7IC8vIGZvcmNlXG5cbiAgICB2YXIgcGFnZVZpZXcgPSBuZXcgT25lUGFnZVZpZXcoXG4gICAgICBvcHRpb25zLCBbXCJjb250ZW50LWRvYy1mcmFtZVwiXSxcbiAgICAgIHRydWUsIC8vZW5hYmxlQm9va1N0eWxlT3ZlcnJpZGVzXG4gICAgICByZWFkZXIpO1xuXG4gICAgcGFnZVZpZXcucmVuZGVyKCk7XG4gICAgaWYgKF92aWV3U2V0dGluZ3MpIHBhZ2VWaWV3LnNldFZpZXdTZXR0aW5ncyhfdmlld1NldHRpbmdzKTtcblxuICAgIGlmICghaXNUZW1wb3JhcnlWaWV3KSB7XG4gICAgICBwYWdlVmlldy5lbGVtZW50KCkuZGF0YShcInBhZ2VWaWV3XCIsIHBhZ2VWaWV3KTtcbiAgICB9XG5cblxuICAgIGlmIChpc0NvbnRpbnVvdXNTY3JvbGwpIHtcbiAgICAgIHBhZ2VWaWV3LmRlY29yYXRlSWZyYW1lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhZ2VWaWV3O1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZFBhZ2VWaWV3Rm9yU3BpbmVJdGVtKHNwaW5lSXRlbSwgcmV2ZXJzZSkge1xuXG4gICAgdmFyIHJldFZpZXcgPSB1bmRlZmluZWQ7XG5cbiAgICBmb3JFYWNoSXRlbVZpZXcoZnVuY3Rpb24ocGFnZVZpZXcpIHtcbiAgICAgIGlmIChwYWdlVmlldy5jdXJyZW50U3BpbmVJdGVtKCkgPT0gc3BpbmVJdGVtKSB7XG4gICAgICAgIHJldFZpZXcgPSBwYWdlVmlldztcbiAgICAgICAgLy9icmFrZSB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgfSwgcmV2ZXJzZSk7XG5cbiAgICByZXR1cm4gcmV0VmlldztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvckVhY2hJdGVtVmlldyhmdW5jLCByZXZlcnNlKSB7XG5cbiAgICB2YXIgcGFnZU5vZGVzID0gXyRjb250ZW50RnJhbWUuY2hpbGRyZW4oKTtcblxuICAgIHZhciBjb3VudCA9IHBhZ2VOb2Rlcy5sZW5ndGg7XG4gICAgdmFyIGl0ZXIgPSByZXZlcnNlID8gZnVuY3Rpb24oaXgpIHtcbiAgICAgIHJldHVybiBpeCAtIDFcbiAgICB9IDogZnVuY3Rpb24oaXgpIHtcbiAgICAgIHJldHVybiBpeCArIDFcbiAgICB9O1xuXG4gICAgdmFyIGNvbXBhcmUgPSByZXZlcnNlID8gZnVuY3Rpb24oaXgpIHtcbiAgICAgIHJldHVybiBpeCA+PSAwXG4gICAgfSA6IGZ1bmN0aW9uKGl4KSB7XG4gICAgICByZXR1cm4gaXggPCBjb3VudFxuICAgIH07XG5cbiAgICB2YXIgc3RhcnQgPSByZXZlcnNlID8gY291bnQgLSAxIDogMDtcblxuICAgIGZvciAodmFyIGkgPSBzdGFydDsgY29tcGFyZShpKTsgaSA9IGl0ZXIoaSkpIHtcblxuICAgICAgdmFyICRlbGVtZW50ID0gcGFnZU5vZGVzLmVxKGkpO1xuICAgICAgdmFyIGN1clZpZXcgPSAkZWxlbWVudC5kYXRhKFwicGFnZVZpZXdcIik7XG5cbiAgICAgIGlmIChjdXJWaWV3KSB7XG5cbiAgICAgICAgaWYgKGZ1bmMoY3VyVmlldykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmlyc3RMb2FkZWRWaWV3KCkge1xuXG4gICAgdmFyIGZpcnN0VmlldyA9IHVuZGVmaW5lZDtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuXG4gICAgICBmaXJzdFZpZXcgPSBwYWdlVmlldztcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIH0sIGZhbHNlKTtcblxuICAgIHJldHVybiBmaXJzdFZpZXc7XG4gIH1cblxuICBmdW5jdGlvbiBsYXN0TG9hZGVkVmlldygpIHtcblxuICAgIHZhciBsYXN0VmlldyA9IHVuZGVmaW5lZDtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuICAgICAgbGFzdFZpZXcgPSBwYWdlVmlldztcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIH0sIHRydWUpO1xuXG4gICAgcmV0dXJuIGxhc3RWaWV3O1xuICB9XG5cbiAgZnVuY3Rpb24gb25QYWdlVmlld0xvYWRlZChwYWdlVmlldywgc3VjY2VzcywgJGlmcmFtZSwgc3BpbmVJdGVtLCBpc05ld2x5TG9hZGVkLCBjb250ZXh0KSB7XG5cbiAgICBpZiAoc3VjY2VzcyAmJiBpc05ld2x5TG9hZGVkKSB7XG4gICAgICBzZWxmLnRyaWdnZXIoRXZlbnRzLkNPTlRFTlRfRE9DVU1FTlRfTE9BREVELCAkaWZyYW1lLCBzcGluZUl0ZW0pO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gbG9hZFNwaW5lSXRlbShzcGluZUl0ZW0sIGNhbGxiYWNrKSB7XG5cbiAgICByZW1vdmVMb2FkZWRJdGVtcygpO1xuXG4gICAgdmFyIHNjcm9sbFBvcyA9IHNjcm9sbFRvcCgpO1xuXG4gICAgdmFyIGxvYWRlZFZpZXcgPSBjcmVhdGVQYWdlVmlld0ZvclNwaW5lSXRlbSgpO1xuXG4gICAgXyRjb250ZW50RnJhbWUuYXBwZW5kKGxvYWRlZFZpZXcuZWxlbWVudCgpKTtcblxuICAgIGxvYWRlZFZpZXcubG9hZFNwaW5lSXRlbShzcGluZUl0ZW0sIGZ1bmN0aW9uKHN1Y2Nlc3MsICRpZnJhbWUsIHNwaW5lSXRlbSwgaXNOZXdseUxvYWRlZCwgY29udGV4dCkge1xuXG4gICAgICBpZiAoc3VjY2Vzcykge1xuXG4gICAgICAgIHZhciBjb250aW51ZUNhbGxiYWNrID0gZnVuY3Rpb24oc3VjY2Vzc0ZsYWcpIHtcbiAgICAgICAgICBvblBhZ2VWaWV3TG9hZGVkKGxvYWRlZFZpZXcsIHN1Y2Nlc3MsICRpZnJhbWUsIHNwaW5lSXRlbSwgaXNOZXdseUxvYWRlZCwgY29udGV4dCk7XG5cbiAgICAgICAgICBjYWxsYmFjayhsb2FkZWRWaWV3KTtcblxuICAgICAgICAgIC8vc3VjY2Vzc0ZsYWcgc2hvdWxkIGFsd2F5cyBiZSB0cnVlIGFzIGxvYWRlZFZpZXcgaUZyYW1lIGNhbm5vdCBiZSBkZWFkIGF0IHRoaXMgc3RhZ2UuXG4gICAgICAgIH07XG5cbiAgICAgICAgcmVhY2hTdGFibGVDb250ZW50SGVpZ2h0KDEsIGxvYWRlZFZpZXcsICRpZnJhbWVbMF0sIHNwaW5lSXRlbS5ocmVmLCBzcGluZUl0ZW0uaXNGaXhlZExheW91dCgpLCBzcGluZUl0ZW0uaXNGaXhlZExheW91dCgpID8gbG9hZGVkVmlldy5tZXRhX3dpZHRoKCkgOiAwLCBcIm9wZW5QYWdlXCIsIGNvbnRpbnVlQ2FsbGJhY2spOyAvLyAvL29uSUZyYW1lTG9hZCBjYWxsZWQgYmVmb3JlIHRoaXMgY2FsbGJhY2ssIHNvIG9rYXkuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGxvYWQgXCIgKyBzcGluZUl0ZW0uaHJlZik7XG5cbiAgICAgICAgcmVtb3ZlUGFnZVZpZXcobG9hZGVkVmlldyk7XG4gICAgICAgIGxvYWRlZFZpZXcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKGxvYWRlZFZpZXcpO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIHRoaXMuYXBwbHlTdHlsZXMgPSBmdW5jdGlvbigpIHtcblxuICAgIHNldFN0eWxlcyhfdXNlclN0eWxlcy5nZXRTdHlsZXMoKSwgXyRlbC5wYXJlbnQoKSk7XG5cbiAgICAvL2JlY2F1c2UgbGVmdCwgdG9wLCBib3R0b20sIHJpZ2h0IHNldHRpbmcgaWdub3JlcyBwYWRkaW5nIG9mIHBhcmVudCBjb250YWluZXJcbiAgICAvL3dlIGhhdmUgdG8gdGFrZSBpdCB0byBhY2NvdW50IG1hbnVhbGx5XG4gICAgdmFyIGVsZW1lbnRNYXJnaW5zID0gTWFyZ2lucy5mcm9tRWxlbWVudChfJGVsKTtcblxuICAgIHNldEZyYW1lU2l6ZXNUb1JlY3RhbmdsZShlbGVtZW50TWFyZ2lucy5wYWRkaW5nKTtcblxuICB9O1xuXG4gIHRoaXMuYXBwbHlCb29rU3R5bGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICBmb3JFYWNoSXRlbVZpZXcoZnVuY3Rpb24ocGFnZVZpZXcpIHtcbiAgICAgIHBhZ2VWaWV3LmFwcGx5Qm9va1N0eWxlcygpO1xuICAgIH0sIGZhbHNlKTtcbiAgfTtcblxuXG4gIHRoaXMub3BlblBhZ2UgPSBmdW5jdGlvbihwYWdlUmVxdWVzdCkge1xuXG4gICAgX3N0b3BUcmFuc2llbnRWaWV3VXBkYXRlID0gdHJ1ZTtcblxuICAgIC8vbG9jYWwgaGVscGVyIGZ1bmN0aW9uXG4gICAgdmFyIGRvbmVMb2FkaW5nU3BpbmVJdGVtID0gZnVuY3Rpb24ocGFnZVZpZXcsIHBhZ2VSZXF1ZXN0KSB7XG5cbiAgICAgIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuICAgICAgb3BlblBhZ2VWaWV3RWxlbWVudChwYWdlVmlldywgcGFnZVJlcXVlc3QpO1xuICAgICAgX3N0b3BUcmFuc2llbnRWaWV3VXBkYXRlID0gZmFsc2U7XG4gICAgICB1cGRhdGVUcmFuc2llbnRWaWV3cyhwYWdlVmlldyk7XG4gICAgfTtcblxuICAgIGlmIChwYWdlUmVxdWVzdC5zcGluZUl0ZW0pIHtcblxuICAgICAgdmFyIHBhZ2VWaWV3ID0gZmluZFBhZ2VWaWV3Rm9yU3BpbmVJdGVtKHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSk7XG4gICAgICBpZiAocGFnZVZpZXcpIHtcbiAgICAgICAgZG9uZUxvYWRpbmdTcGluZUl0ZW0ocGFnZVZpZXcsIHBhZ2VSZXF1ZXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9kZWZlcnJlZFBhZ2VSZXF1ZXN0ID0gcGFnZVJlcXVlc3Q7XG4gICAgICAgIF9pc0xvYWRpbmdOZXdTcGluZUl0ZW1PblBhZ2VSZXF1ZXN0ID0gdHJ1ZTtcblxuICAgICAgICBsb2FkU3BpbmVJdGVtKHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSwgZnVuY3Rpb24ocGFnZVZpZXcpIHtcblxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfaXNMb2FkaW5nTmV3U3BpbmVJdGVtT25QYWdlUmVxdWVzdCA9IGZhbHNlO1xuICAgICAgICAgIH0sIE9OX1NDUk9MTF9USU1FX0RBTEFZICsgMTAwKTtcblxuICAgICAgICAgIGlmIChwYWdlVmlldyAmJiBfZGVmZXJyZWRQYWdlUmVxdWVzdCkge1xuICAgICAgICAgICAgaWYgKHBhZ2VWaWV3LmN1cnJlbnRTcGluZUl0ZW0oKSA9PT0gX2RlZmVycmVkUGFnZVJlcXVlc3Quc3BpbmVJdGVtKSB7XG4gICAgICAgICAgICAgIGRvbmVMb2FkaW5nU3BpbmVJdGVtKHBhZ2VWaWV3LCBfZGVmZXJyZWRQYWdlUmVxdWVzdCk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvL3doaWxlIHdlIHdoZXJlIHdhaXRpbmcgZm9yIGxvYWQgbmV3IHJlcXVlc3QgY29tZVxuICAgICAgICAgICAgICBzZWxmLm9wZW5QYWdlKF9kZWZlcnJlZFBhZ2VSZXF1ZXN0KTsgLy9yZWN1cnNpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb25QYWdpbmF0aW9uQ2hhbmdlZChwYWdlUmVxdWVzdC5pbml0aWF0b3IsIHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSwgcGFnZVJlcXVlc3QuZWxlbWVudElkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbmVMb2FkaW5nU3BpbmVJdGVtKHVuZGVmaW5lZCwgcGFnZVJlcXVlc3QpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBvcGVuUGFnZVZpZXdFbGVtZW50KHBhZ2VWaWV3LCBwYWdlUmVxdWVzdCkge1xuXG4gICAgdmFyIHRvcE9mZnNldCA9IDA7XG4gICAgdmFyIHBhZ2VDb3VudDtcbiAgICB2YXIgJGVsZW1lbnQ7XG4gICAgdmFyIHNmaU5hdjtcbiAgICB2YXIgcGFnZVJhbmdlO1xuXG4gICAgaWYgKHBhZ2VSZXF1ZXN0LnNjcm9sbFRvcCAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgIHRvcE9mZnNldCA9IHBhZ2VSZXF1ZXN0LnNjcm9sbFRvcDtcbiAgICB9IGVsc2UgaWYgKHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbVBhZ2VJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgIHZhciBwYWdlSW5kZXg7XG4gICAgICBwYWdlQ291bnQgPSBjYWxjdWxhdGVQYWdlQ291bnQoKTtcbiAgICAgIGlmIChwYWdlUmVxdWVzdC5zcGluZUl0ZW1QYWdlSW5kZXggPCAwKSB7XG4gICAgICAgIHBhZ2VJbmRleCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbVBhZ2VJbmRleCA+PSBwYWdlQ291bnQpIHtcbiAgICAgICAgcGFnZUluZGV4ID0gcGFnZUNvdW50IC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2VJbmRleCA9IHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbVBhZ2VJbmRleDtcbiAgICAgIH1cblxuICAgICAgdG9wT2Zmc2V0ID0gcGFnZUluZGV4ICogdmlld0hlaWdodCgpO1xuICAgIH0gZWxzZSBpZiAocGFnZVZpZXcgJiYgcGFnZVJlcXVlc3QuZWxlbWVudElkKSB7XG5cbiAgICAgIHBhZ2VSYW5nZSA9IGdldFBhZ2VWaWV3UmFuZ2UocGFnZVZpZXcpO1xuICAgICAgc2ZpTmF2ID0gcGFnZVZpZXcuZ2V0TmF2aWdhdG9yKCk7XG4gICAgICAkZWxlbWVudCA9IHNmaU5hdi5nZXRFbGVtZW50QnlJZChwYWdlUmVxdWVzdC5lbGVtZW50SWQpO1xuXG4gICAgICBpZiAoISRlbGVtZW50IHx8ICEkZWxlbWVudC5sZW5ndGgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRWxlbWVudCBpZD1cIiArIHBhZ2VSZXF1ZXN0LmVsZW1lbnRJZCArIFwiIG5vdCBmb3VuZCFcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRWxlbWVudFZpc2libGVPblNjcmVlbihwYWdlVmlldywgJGVsZW1lbnQsIDYwKSkge1xuICAgICAgICAvL1RPRE8gcmVmYWN0b3JpbmcgcmVxdWlyZWRcbiAgICAgICAgLy8gdGhpcyBpcyBhcnRpZmljaWFsIGNhbGwgYmVjYXVzZSBNTyBwbGF5ZXIgd2FpdHMgZm9yIHRoaXMgZXZlbnQgdG8gY29udGludWUgcGxheWluZy5cbiAgICAgICAgb25QYWdpbmF0aW9uQ2hhbmdlZChwYWdlUmVxdWVzdC5pbml0aWF0b3IsIHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSwgcGFnZVJlcXVlc3QuZWxlbWVudElkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b3BPZmZzZXQgPSBzZmlOYXYuZ2V0VmVydGljYWxPZmZzZXRGb3JFbGVtZW50KCRlbGVtZW50KSArIHBhZ2VSYW5nZS50b3A7XG5cbiAgICB9IGVsc2UgaWYgKHBhZ2VWaWV3ICYmIHBhZ2VSZXF1ZXN0LmVsZW1lbnRDZmkpIHtcblxuICAgICAgcGFnZVJhbmdlID0gZ2V0UGFnZVZpZXdSYW5nZShwYWdlVmlldyk7XG4gICAgICBzZmlOYXYgPSBwYWdlVmlldy5nZXROYXZpZ2F0b3IoKTtcbiAgICAgICRlbGVtZW50ID0gc2ZpTmF2LmdldEVsZW1lbnRCeUNmaShwYWdlUmVxdWVzdC5lbGVtZW50Q2ZpKTtcblxuICAgICAgaWYgKCEkZWxlbWVudCB8fCAhJGVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkVsZW1lbnQgY2ZpPVwiICsgcGFnZVJlcXVlc3QuZWxlbWVudENmaSArIFwiIG5vdCBmb3VuZCFcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRWxlbWVudFZpc2libGVPblNjcmVlbihwYWdlVmlldywgJGVsZW1lbnQsIDYwKSkge1xuICAgICAgICAvL1RPRE8gcmVmYWN0b3JpbmcgcmVxdWlyZWRcbiAgICAgICAgLy8gdGhpcyBpcyBhcnRpZmljaWFsIGNhbGwgYmVjYXVzZSBNTyBwbGF5ZXIgd2FpdHMgZm9yIHRoaXMgZXZlbnQgdG8gY29udGludWUgcGxheWluZy5cbiAgICAgICAgb25QYWdpbmF0aW9uQ2hhbmdlZChwYWdlUmVxdWVzdC5pbml0aWF0b3IsIHBhZ2VSZXF1ZXN0LnNwaW5lSXRlbSwgcGFnZVJlcXVlc3QuZWxlbWVudElkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b3BPZmZzZXQgPSBzZmlOYXYuZ2V0VmVydGljYWxPZmZzZXRGb3JFbGVtZW50KCRlbGVtZW50KSArIHBhZ2VSYW5nZS50b3A7XG5cbiAgICB9IGVsc2UgaWYgKHBhZ2VSZXF1ZXN0LmZpcnN0UGFnZSkge1xuXG4gICAgICB0b3BPZmZzZXQgPSAwO1xuICAgIH0gZWxzZSBpZiAocGFnZVJlcXVlc3QubGFzdFBhZ2UpIHtcbiAgICAgIHBhZ2VDb3VudCA9IGNhbGN1bGF0ZVBhZ2VDb3VudCgpO1xuXG4gICAgICBpZiAocGFnZUNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9wT2Zmc2V0ID0gc2Nyb2xsSGVpZ2h0KCkgLSB2aWV3SGVpZ2h0KCkgLSA1O1xuICAgIH0gZWxzZSBpZiAocGFnZVZpZXcpIHtcblxuICAgICAgcGFnZVJhbmdlID0gZ2V0UGFnZVZpZXdSYW5nZShwYWdlVmlldyk7XG4gICAgICB0b3BPZmZzZXQgPSBwYWdlUmFuZ2UudG9wO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3BPZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmIChzY3JvbGxUb3AoKSAhPSB0b3BPZmZzZXQpIHtcblxuICAgICAgX2lzU2V0dGluZ1Njcm9sbFBvc2l0aW9uID0gdHJ1ZTtcbiAgICAgIHNjcm9sbFRvKHRvcE9mZnNldCwgcGFnZVJlcXVlc3QpO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBfaXNTZXR0aW5nU2Nyb2xsUG9zaXRpb24gPSBmYWxzZTtcbiAgICAgIH0sIE9OX1NDUk9MTF9USU1FX0RBTEFZICsgMTAwKTsgLy93ZSBoYXZlIHRvIHdhaXQgbW9yZSB0aGFuIHNjcm9sbCBkZWxheSB0byBtYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCByZWFjdCBvbiBvblNjcm9sbFxuXG4gICAgfSBlbHNlIHtcbiAgICAgIG9uUGFnaW5hdGlvbkNoYW5nZWQocGFnZVJlcXVlc3QuaW5pdGlhdG9yLCBwYWdlUmVxdWVzdC5zcGluZUl0ZW0sIHBhZ2VSZXF1ZXN0LmVsZW1lbnRJZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsY3VsYXRlUGFnZUNvdW50KCkge1xuXG4gICAgcmV0dXJuIE1hdGguY2VpbChzY3JvbGxIZWlnaHQoKSAvIHZpZXdIZWlnaHQoKSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblBhZ2luYXRpb25DaGFuZ2VkKGluaXRpYXRvciwgcGFnaW5hdGlvblJlcXVlc3Rfc3BpbmVJdGVtLCBwYWdpbmF0aW9uUmVxdWVzdF9lbGVtZW50SWQpIHtcbiAgICBzZWxmLnRyaWdnZXIoSW50ZXJuYWxFdmVudHMuQ1VSUkVOVF9WSUVXX1BBR0lOQVRJT05fQ0hBTkdFRCwge1xuICAgICAgcGFnaW5hdGlvbkluZm86IHNlbGYuZ2V0UGFnaW5hdGlvbkluZm8oKSxcbiAgICAgIGluaXRpYXRvcjogaW5pdGlhdG9yLFxuICAgICAgc3BpbmVJdGVtOiBwYWdpbmF0aW9uUmVxdWVzdF9zcGluZUl0ZW0sXG4gICAgICBlbGVtZW50SWQ6IHBhZ2luYXRpb25SZXF1ZXN0X2VsZW1lbnRJZFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2Nyb2xsVG9wKCkge1xuICAgIHJldHVybiBfJGNvbnRlbnRGcmFtZVswXS5zY3JvbGxUb3A7XG4gIH1cblxuICBmdW5jdGlvbiBzY3JvbGxCb3R0b20oKSB7XG4gICAgcmV0dXJuIHNjcm9sbEhlaWdodCgpIC0gKHNjcm9sbFRvcCgpICsgdmlld0hlaWdodCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZpZXdIZWlnaHQoKSB7XG4gICAgcmV0dXJuIF8kY29udGVudEZyYW1lLmhlaWdodCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2Nyb2xsSGVpZ2h0KCkge1xuICAgIHJldHVybiBfJGNvbnRlbnRGcmFtZVswXS5zY3JvbGxIZWlnaHQ7XG4gIH1cblxuICB0aGlzLm9wZW5QYWdlTmV4dCA9IGZ1bmN0aW9uKGluaXRpYXRvcikge1xuXG4gICAgdmFyIHBhZ2VSZXF1ZXN0O1xuXG4gICAgaWYgKHNjcm9sbEJvdHRvbSgpID4gMCkge1xuXG4gICAgICBwYWdlUmVxdWVzdCA9IG5ldyBQYWdlT3BlblJlcXVlc3QodW5kZWZpbmVkLCBpbml0aWF0b3IpO1xuICAgICAgcGFnZVJlcXVlc3Quc2Nyb2xsVG9wID0gc2Nyb2xsVG9wKCkgKyBNYXRoLm1pbihzY3JvbGxCb3R0b20oKSwgdmlld0hlaWdodCgpIC0gU0NST0xMX01BUkdJTl9UT19TSE9XX0xBU1RfVklTQkxFX0xJTkUpO1xuICAgICAgb3BlblBhZ2VWaWV3RWxlbWVudCh1bmRlZmluZWQsIHBhZ2VSZXF1ZXN0KTtcbiAgICB9XG5cbiAgfTtcblxuICB0aGlzLm9wZW5QYWdlUHJldiA9IGZ1bmN0aW9uKGluaXRpYXRvcikge1xuXG4gICAgdmFyIHBhZ2VSZXF1ZXN0O1xuXG4gICAgaWYgKHNjcm9sbFRvcCgpID4gMCkge1xuXG4gICAgICBwYWdlUmVxdWVzdCA9IG5ldyBQYWdlT3BlblJlcXVlc3QodW5kZWZpbmVkLCBpbml0aWF0b3IpO1xuICAgICAgcGFnZVJlcXVlc3Quc2Nyb2xsVG9wID0gc2Nyb2xsVG9wKCkgLSAodmlld0hlaWdodCgpIC0gU0NST0xMX01BUkdJTl9UT19TSE9XX0xBU1RfVklTQkxFX0xJTkUpO1xuICAgICAgaWYgKHBhZ2VSZXF1ZXN0LnNjcm9sbFRvcCA8IDApIHtcbiAgICAgICAgcGFnZVJlcXVlc3Quc2Nyb2xsVG9wID0gMDtcbiAgICAgIH1cblxuICAgICAgb3BlblBhZ2VWaWV3RWxlbWVudCh1bmRlZmluZWQsIHBhZ2VSZXF1ZXN0KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0VmlzaWJsZVBhZ2VWaWV3cygpIHtcblxuICAgIHZhciB2aWV3cyA9IFtdO1xuXG4gICAgdmFyIHJhbmdlID0gZ2V0VmlzaWJsZVJhbmdlKC1TQ1JPTExfTUFSR0lOX1RPX1NIT1dfTEFTVF9WSVNCTEVfTElORSk7XG5cbiAgICBmb3JFYWNoSXRlbVZpZXcoZnVuY3Rpb24ocGFnZVZpZXcpIHtcblxuICAgICAgaWYgKGlzUGFnZVZpZXdWaXNpYmxlSW5SYW5nZShwYWdlVmlldywgcmFuZ2UpKSB7XG5cbiAgICAgICAgdmlld3MucHVzaChwYWdlVmlldyk7XG4gICAgICB9IGVsc2UgaWYgKHZpZXdzLmxlbmd0aCA+IDApIHtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIHZpZXdzO1xuXG4gIH1cblxuXG4gIGZ1bmN0aW9uIGdldEZpcnN0VmlzaWJsZVBhZ2VWaWV3KCkge1xuXG4gICAgdmFyIHZpc2libGVWaWV3cyA9IGdldFZpc2libGVQYWdlVmlld3MoKTtcblxuICAgIHJldHVybiB2aXNpYmxlVmlld3NbMF07XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhZ2VWaWV3VmlzaWJsZUluUmFuZ2UocGFnZVZpZXcsIHJhbmdlKSB7XG4gICAgdmFyIHBhZ2VWaWV3UmFuZ2UgPSBnZXRQYWdlVmlld1JhbmdlKHBhZ2VWaWV3KTtcbiAgICByZXR1cm4gcmFuZ2VMZW5ndGgoaW50ZXJzZWN0UmFuZ2VzKHBhZ2VWaWV3UmFuZ2UsIHJhbmdlKSkgPiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGFnZVZpZXdSYW5nZShwYWdlVmlldykge1xuICAgIHZhciByYW5nZSA9IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMFxuICAgIH07XG5cbiAgICByYW5nZS50b3AgPSBwYWdlVmlldy5lbGVtZW50KCkucG9zaXRpb24oKS50b3AgKyBzY3JvbGxUb3AoKTtcbiAgICByYW5nZS5ib3R0b20gPSByYW5nZS50b3AgKyBwYWdlVmlldy5nZXRDYWxjdWxhdGVkUGFnZUhlaWdodCgpO1xuXG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG5cbiAgdGhpcy5nZXRGaXJzdFZpc2libGVFbGVtZW50Q2ZpID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpc2libGVWaWV3UGFnZSA9IGdldEZpcnN0VmlzaWJsZVBhZ2VWaWV3KCk7XG4gICAgaWYgKHZpc2libGVWaWV3UGFnZSkge1xuICAgICAgcmV0dXJuIHZpc2libGVWaWV3UGFnZS5nZXROYXZpZ2F0b3IoKS5nZXRGaXJzdFZpc2libGVFbGVtZW50Q2ZpKHNjcm9sbFRvcCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHRoaXMuZ2V0UGFnaW5hdGlvbkluZm8gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3BpbmVJdGVtO1xuICAgIHZhciBwYWdlQ291bnQ7XG4gICAgdmFyIHBhZ2VWaWV3O1xuICAgIHZhciBwYWdlVmlld1JhbmdlO1xuICAgIHZhciBoZWlnaHRBYm92ZVZpZXdwb3J0O1xuICAgIHZhciBoZWlnaHRCZWxvd1ZpZXdwb3J0O1xuICAgIHZhciBwYWdlQ291bnRBYm92ZTtcbiAgICB2YXIgcGFnZUNvdW50QmVsb3c7XG5cbiAgICB2YXIgdmlld1BvcnRSYW5nZSA9IGdldFZpc2libGVSYW5nZSgpO1xuICAgIHZhciB2aWV3UG9ydEhlaWdodCA9IHZpZXdQb3J0UmFuZ2UuYm90dG9tIC0gdmlld1BvcnRSYW5nZS50b3A7XG5cbiAgICB2YXIgcGFnaW5hdGlvbkluZm8gPSBuZXcgQ3VycmVudFBhZ2VzSW5mbyhfc3BpbmUsIGZhbHNlKTtcblxuICAgIHZhciB2aXNpYmxlVmlld3MgPSBnZXRWaXNpYmxlUGFnZVZpZXdzKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgY291bnQgPSB2aXNpYmxlVmlld3MubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuXG4gICAgICBwYWdlVmlldyA9IHZpc2libGVWaWV3c1tpXTtcbiAgICAgIHNwaW5lSXRlbSA9IHBhZ2VWaWV3LmN1cnJlbnRTcGluZUl0ZW0oKTtcbiAgICAgIHBhZ2VWaWV3UmFuZ2UgPSBnZXRQYWdlVmlld1JhbmdlKHBhZ2VWaWV3KTtcblxuICAgICAgaGVpZ2h0QWJvdmVWaWV3cG9ydCA9IE1hdGgubWF4KHZpZXdQb3J0UmFuZ2UudG9wIC0gcGFnZVZpZXdSYW5nZS50b3AsIDApO1xuICAgICAgaGVpZ2h0QmVsb3dWaWV3cG9ydCA9IE1hdGgubWF4KHBhZ2VWaWV3UmFuZ2UuYm90dG9tIC0gdmlld1BvcnRSYW5nZS5ib3R0b20sIDApO1xuXG4gICAgICBwYWdlQ291bnRBYm92ZSA9IE1hdGguY2VpbChoZWlnaHRBYm92ZVZpZXdwb3J0IC8gdmlld1BvcnRIZWlnaHQpO1xuICAgICAgcGFnZUNvdW50QmVsb3cgPSBNYXRoLmNlaWwoaGVpZ2h0QmVsb3dWaWV3cG9ydCAvIHZpZXdQb3J0SGVpZ2h0KTtcbiAgICAgIHBhZ2VDb3VudCA9IHBhZ2VDb3VudEFib3ZlICsgcGFnZUNvdW50QmVsb3cgKyAxO1xuXG4gICAgICBwYWdpbmF0aW9uSW5mby5hZGRPcGVuUGFnZShwYWdlQ291bnRBYm92ZSwgcGFnZUNvdW50LCBzcGluZUl0ZW0uaWRyZWYsIHNwaW5lSXRlbS5pbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhZ2luYXRpb25JbmZvO1xuICB9O1xuXG4gIHRoaXMuYm9va21hcmtDdXJyZW50UGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYWdlVmlldyA9IGdldEZpcnN0VmlzaWJsZVBhZ2VWaWV3KCk7XG5cbiAgICBpZiAoIXBhZ2VWaWV3KSB7XG5cbiAgICAgIHJldHVybiBuZXcgQm9va21hcmtEYXRhKFwiXCIsIFwiXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQm9va21hcmtEYXRhKHBhZ2VWaWV3LmN1cnJlbnRTcGluZUl0ZW0oKS5pZHJlZiwgc2VsZi5nZXRGaXJzdFZpc2libGVFbGVtZW50Q2ZpKCkpO1xuICB9O1xuXG5cbiAgdGhpcy5nZXRMb2FkZWRTcGluZUl0ZW1zID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNwaW5lSXRlbXMgPSBbXTtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuICAgICAgc3BpbmVJdGVtcy5wdXNoKHBhZ2VWaWV3LmN1cnJlbnRTcGluZUl0ZW0oKSk7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIHNwaW5lSXRlbXM7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50ID0gZnVuY3Rpb24oc3BpbmVJdGVtLCBzZWxlY3Rvcikge1xuICAgIHZhciBlbGVtZW50ID0gdW5kZWZpbmVkO1xuXG4gICAgZm9yRWFjaEl0ZW1WaWV3KGZ1bmN0aW9uKHBhZ2VWaWV3KSB7XG4gICAgICBpZiAocGFnZVZpZXcuY3VycmVudFNwaW5lSXRlbSgpID09IHNwaW5lSXRlbSkge1xuXG4gICAgICAgIGVsZW1lbnQgPSBwYWdlVmlldy5nZXROYXZpZ2F0b3IoKS5nZXRFbGVtZW50KHNlbGVjdG9yKTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50QnlDZmkgPSBmdW5jdGlvbihzcGluZUl0ZW0sIGNmaSwgY2xhc3NCbGFja2xpc3QsIGVsZW1lbnRCbGFja2xpc3QsIGlkQmxhY2tsaXN0KSB7XG5cbiAgICB2YXIgZm91bmQgPSB1bmRlZmluZWQ7XG5cbiAgICBmb3JFYWNoSXRlbVZpZXcoZnVuY3Rpb24ocGFnZVZpZXcpIHtcbiAgICAgIGlmIChwYWdlVmlldy5jdXJyZW50U3BpbmVJdGVtKCkgPT0gc3BpbmVJdGVtKSB7XG5cbiAgICAgICAgZm91bmQgPSBwYWdlVmlldy5nZXRFbGVtZW50QnlDZmkoc3BpbmVJdGVtLCBjZmksIGNsYXNzQmxhY2tsaXN0LCBlbGVtZW50QmxhY2tsaXN0LCBpZEJsYWNrbGlzdCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICB9LCBmYWxzZSk7XG5cbiAgICBpZiAoIWZvdW5kKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwic3BpbmUgaXRlbSBpcyBub3QgbG9hZGVkXCIpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG4gIH07XG5cbiAgdGhpcy5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKHNwaW5lSXRlbSwgaWQpIHtcblxuICAgIHZhciBmb3VuZCA9IHVuZGVmaW5lZDtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldykge1xuICAgICAgaWYgKHBhZ2VWaWV3LmN1cnJlbnRTcGluZUl0ZW0oKSA9PSBzcGluZUl0ZW0pIHtcblxuICAgICAgICBmb3VuZCA9IHBhZ2VWaWV3LmdldE5hdmlnYXRvcigpLmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIH0sIGZhbHNlKTtcblxuICAgIGlmICghZm91bmQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJzcGluZSBpdGVtIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbiAgfTtcblxuICB0aGlzLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlld1BvcnRSYW5nZSA9IGdldFZpc2libGVSYW5nZSgpO1xuXG4gICAgdmFyIG1vRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICB2YXIgbm9ybWFsaXplZFJhbmdlID0ge1xuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwXG4gICAgfTtcbiAgICB2YXIgcGFnZVZpZXdSYW5nZTtcblxuICAgIHZhciBzdGVwcGVkVG9WaXNpYmxlUGFnZSA9IGZhbHNlO1xuXG4gICAgZm9yRWFjaEl0ZW1WaWV3KGZ1bmN0aW9uKHBhZ2VWaWV3KSB7XG4gICAgICBwYWdlVmlld1JhbmdlID0gZ2V0UGFnZVZpZXdSYW5nZShwYWdlVmlldyk7XG5cbiAgICAgIG5vcm1hbGl6ZWRSYW5nZS50b3AgPSBNYXRoLm1heChwYWdlVmlld1JhbmdlLnRvcCwgdmlld1BvcnRSYW5nZS50b3ApIC0gcGFnZVZpZXdSYW5nZS50b3A7XG4gICAgICBub3JtYWxpemVkUmFuZ2UuYm90dG9tID0gTWF0aC5taW4ocGFnZVZpZXdSYW5nZS5ib3R0b20sIHZpZXdQb3J0UmFuZ2UuYm90dG9tKSAtIHBhZ2VWaWV3UmFuZ2UudG9wO1xuXG4gICAgICBpZiAocmFuZ2VMZW5ndGgobm9ybWFsaXplZFJhbmdlKSA+IDApIHtcbiAgICAgICAgc3RlcHBlZFRvVmlzaWJsZVBhZ2UgPSB0cnVlO1xuXG4gICAgICAgIG1vRWxlbWVudCA9IHBhZ2VWaWV3LmdldE5hdmlnYXRvcigpLmdldEZpcnN0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnQobm9ybWFsaXplZFJhbmdlKTtcbiAgICAgICAgaWYgKG1vRWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdGVwcGVkVG9WaXNpYmxlUGFnZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlOyAvL2NvbnRpbnVlIGl0ZXJhdGlvblxuXG4gICAgfSwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIG1vRWxlbWVudDtcbiAgfTtcblxuICAvLyAvKipcbiAgLy8gICogQGRlcHJlY2F0ZWRcbiAgLy8gICovXG4gIC8vIHRoaXMuZ2V0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgICB2YXIgdmlld1BvcnRSYW5nZSA9IGdldFZpc2libGVSYW5nZSgpO1xuICAvLyBcbiAgLy8gICAgIHZhciBwYWdlTW9FbGVtZW50cztcbiAgLy8gICAgIHZhciBtb0VsZW1lbnRzID0gW107XG4gIC8vICAgICB2YXIgbm9ybWFsaXplZFJhbmdlID0ge3RvcDogMCwgYm90dG9tOiAwfTtcbiAgLy8gICAgIHZhciBwYWdlVmlld1JhbmdlO1xuICAvLyBcbiAgLy8gICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwYWdlVmlldyl7XG4gIC8vICAgICAgICAgcGFnZVZpZXdSYW5nZSA9IGdldFBhZ2VWaWV3UmFuZ2UocGFnZVZpZXcpO1xuICAvLyBcbiAgLy8gICAgICAgICBub3JtYWxpemVkUmFuZ2UudG9wID0gTWF0aC5tYXgocGFnZVZpZXdSYW5nZS50b3AsIHZpZXdQb3J0UmFuZ2UudG9wKSAtIHBhZ2VWaWV3UmFuZ2UudG9wO1xuICAvLyAgICAgICAgIG5vcm1hbGl6ZWRSYW5nZS5ib3R0b20gPSBNYXRoLm1pbihwYWdlVmlld1JhbmdlLmJvdHRvbSwgdmlld1BvcnRSYW5nZS5ib3R0b20pIC0gcGFnZVZpZXdSYW5nZS50b3A7XG4gIC8vIFxuICAvLyAgICAgICAgIGlmKHJhbmdlTGVuZ3RoKG5vcm1hbGl6ZWRSYW5nZSkgPiAwKSB7XG4gIC8vICAgICAgICAgICAgIHBhZ2VNb0VsZW1lbnRzID0gcGFnZVZpZXcuZ2V0TmF2aWdhdG9yKCkuZ2V0VmlzaWJsZU1lZGlhT3ZlcmxheUVsZW1lbnRzKG5vcm1hbGl6ZWRSYW5nZSk7XG4gIC8vICAgICAgICAgICAgIG1vRWxlbWVudHMucHVzaC5hcHBseShtb0VsZW1lbnRzLCBwYWdlTW9FbGVtZW50cyk7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgfSwgZmFsc2UpO1xuICAvLyBcbiAgLy8gICAgIHJldHVybiBtb0VsZW1lbnRzO1xuICAvLyB9O1xuXG4gIGZ1bmN0aW9uIGdldFZpc2libGVSYW5nZShleHBhbmQpIHtcbiAgICBpZiAoZXhwYW5kICE9PSAwICYmICFleHBhbmQpIHtcbiAgICAgIGV4cGFuZCA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHJhbmdlID0ge1xuXG4gICAgICB0b3A6IHNjcm9sbFRvcCgpIC0gZXhwYW5kLFxuICAgICAgYm90dG9tOiBzY3JvbGxUb3AoKSArIHZpZXdIZWlnaHQoKSArIGV4cGFuZFxuICAgIH07XG5cbiAgICBpZiAocmFuZ2UudG9wIDwgMCkge1xuICAgICAgcmFuZ2UudG9wID0gMDtcbiAgICB9XG5cbiAgICBpZiAocmFuZ2UuYm90dG9tID4gc2Nyb2xsSGVpZ2h0KCkpIHtcbiAgICAgIHJhbmdlLmJvdHRvbSA9IHNjcm9sbEhlaWdodCgpO1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcblxuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJzZWN0UmFuZ2VzKHIxLCByMikge1xuICAgIHJldHVybiB7XG5cbiAgICAgIHRvcDogTWF0aC5tYXgocjEudG9wLCByMi50b3ApLFxuICAgICAgYm90dG9tOiBNYXRoLm1pbihyMS5ib3R0b20sIHIyLmJvdHRvbSlcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmFuZ2VMZW5ndGgocmFuZ2UpIHtcbiAgICBpZiAocmFuZ2UuYm90dG9tIDwgcmFuZ2UudG9wKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2UuYm90dG9tIC0gcmFuZ2UudG9wO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNFbGVtZW50VmlzaWJsZU9uU2NyZWVuKHBhZ2VWaWV3LCAkZWxlbWVudCwgcGVyY2VudFZpc2libGUpIHtcblxuICAgIHZhciBlbGVtZW50UmFuZ2UgPSBnZXRFbGVtZW50UmFuZ2UocGFnZVZpZXcsICRlbGVtZW50KTtcblxuICAgIHJldHVybiBpc1JhbmdlSXNWaXNpYmxlT25TY3JlZW4oZWxlbWVudFJhbmdlLCBwZXJjZW50VmlzaWJsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1JhbmdlSXNWaXNpYmxlT25TY3JlZW4ocmFuZ2UsIHBlcmNlbnRWaXNpYmxlKSB7XG5cbiAgICB2YXIgdmlzaWJsZVJhbmdlID0gZ2V0VmlzaWJsZVJhbmdlKCk7XG5cbiAgICB2YXIgc21hbGxlc3RWaXNpYmxlTGVuZ3RoID0gTWF0aC5taW4ocmFuZ2VMZW5ndGgodmlzaWJsZVJhbmdlKSwgcmFuZ2VMZW5ndGgocmFuZ2UpKTtcbiAgICBpZiAoc21hbGxlc3RWaXNpYmxlTGVuZ3RoID09PSAwKSB7XG4gICAgICBzbWFsbGVzdFZpc2libGVMZW5ndGggPSA1OyAvLyBpZiBlbGVtZW50IGlzIDAgaGVpZ2h0IHdlIHdpbGwgc2V0IGl0IHRvIGFyYml0cmFyeSA1IHBpeGVscyAtIG5vdCB0byBkaXZpZGUgYnkgMFxuICAgIH1cblxuICAgIHZhciBpbnRlcnNlY3Rpb25SYW5nZSA9IGludGVyc2VjdFJhbmdlcyh2aXNpYmxlUmFuZ2UsIHJhbmdlKTtcblxuICAgIHZhciB2aXNpYmxlUGVyY2VudCA9IChyYW5nZUxlbmd0aChpbnRlcnNlY3Rpb25SYW5nZSkgLyBzbWFsbGVzdFZpc2libGVMZW5ndGgpICogMTAwO1xuXG4gICAgcmV0dXJuIHZpc2libGVQZXJjZW50ID49IHBlcmNlbnRWaXNpYmxlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RWxlbWVudFJhbmdlKHBhZ2VWaWV3LCAkZWxlbWVudCkge1xuXG4gICAgdmFyIHBhZ2VSYW5nZSA9IGdldFBhZ2VWaWV3UmFuZ2UocGFnZVZpZXcpO1xuXG4gICAgdmFyIGVsZW1lbnRSYW5nZSA9IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMFxuICAgIH07XG4gICAgZWxlbWVudFJhbmdlLnRvcCA9ICRlbGVtZW50Lm9mZnNldCgpLnRvcCArIHBhZ2VSYW5nZS50b3A7XG4gICAgZWxlbWVudFJhbmdlLmJvdHRvbSA9IGVsZW1lbnRSYW5nZS50b3AgKyAkZWxlbWVudC5oZWlnaHQoKTtcblxuICAgIHJldHVybiBlbGVtZW50UmFuZ2U7XG4gIH1cblxuICB0aGlzLmluc3VyZUVsZW1lbnRWaXNpYmlsaXR5ID0gZnVuY3Rpb24oc3BpbmVJdGVtSWQsIGVsZW1lbnQsIGluaXRpYXRvcikge1xuICAgIHZhciBwYWdlVmlldyA9IHVuZGVmaW5lZDtcblxuICAgIGZvckVhY2hJdGVtVmlldyhmdW5jdGlvbihwdikge1xuICAgICAgaWYgKHB2LmN1cnJlbnRTcGluZUl0ZW0oKS5pZHJlZiA9PT0gc3BpbmVJdGVtSWQpIHtcblxuICAgICAgICBwYWdlVmlldyA9IHB2O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIGZhbHNlKTtcblxuICAgIGlmICghcGFnZVZpZXcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlBhZ2UgZm9yIGVsZW1lbnQgXCIgKyBlbGVtZW50ICsgXCIgbm90IGZvdW5kXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCk7XG5cbiAgICB2YXIgZWxlbWVudFJhbmdlID0gZ2V0RWxlbWVudFJhbmdlKHBhZ2VWaWV3LCAkZWxlbWVudCk7XG5cbiAgICBpZiAoIWlzUmFuZ2VJc1Zpc2libGVPblNjcmVlbihlbGVtZW50UmFuZ2UsIDYwKSkge1xuXG4gICAgICB2YXIgc3BpbmVJdGVtID0gX3NwaW5lLmdldEl0ZW1CeUlkKHNwaW5lSXRlbUlkKTtcbiAgICAgIHZhciBvcGVuUGFnZVJlcXVlc3QgPSBuZXcgUGFnZU9wZW5SZXF1ZXN0KHNwaW5lSXRlbSwgaW5pdGlhdG9yKTtcbiAgICAgIG9wZW5QYWdlUmVxdWVzdC5zY3JvbGxUb3AgPSBlbGVtZW50UmFuZ2UudG9wO1xuXG4gICAgICBzZWxmLm9wZW5QYWdlKG9wZW5QYWdlUmVxdWVzdCk7XG4gICAgfVxuXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTY3JvbGxWaWV3Il19
dlUmVxdWVzdC5zY3JvbGxUb3AgPSBlbGVtZW50UmFuZ2UudG9wO1xuXG4gICAgICBzZWxmLm9wZW5QYWdlKG9wZW5QYWdlUmVxdWVzdCk7XG4gICAgfVxuXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTY3JvbGxWaWV3Il19
